var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _NodeLeaf_key, _NodeMiddle_key, _NodeEmpty_key;
import { ZERO_HASH, hashElems } from '../hash/hash';
import { EMPTY_NODE_STRING, EMPTY_NODE_VALUE, NODE_TYPE_EMPTY, NODE_TYPE_LEAF, NODE_TYPE_MIDDLE } from '../../constants';
import { leafKey, nodeValue } from '../utils/node';
export class NodeLeaf {
    constructor(k, v) {
        // cache used to avoid recalculating key
        _NodeLeaf_key.set(this, void 0);
        this.type = NODE_TYPE_LEAF;
        this.entry = [k, v];
        __classPrivateFieldSet(this, _NodeLeaf_key, ZERO_HASH, "f");
    }
    async getKey() {
        if (__classPrivateFieldGet(this, _NodeLeaf_key, "f") === ZERO_HASH) {
            return await leafKey(this.entry[0], this.entry[1]);
        }
        return __classPrivateFieldGet(this, _NodeLeaf_key, "f");
    }
    get value() {
        return nodeValue(this.type, this.entry[0], this.entry[1]);
    }
    get string() {
        return `Leaf I:${this.entry[0]} D:${this.entry[1]}`;
    }
}
_NodeLeaf_key = new WeakMap();
export class NodeMiddle {
    constructor(cL, cR) {
        _NodeMiddle_key.set(this, void 0);
        this.type = NODE_TYPE_MIDDLE;
        this.childL = cL;
        this.childR = cR;
        __classPrivateFieldSet(this, _NodeMiddle_key, ZERO_HASH, "f");
    }
    async getKey() {
        if (__classPrivateFieldGet(this, _NodeMiddle_key, "f") === ZERO_HASH) {
            return hashElems([this.childL.bigInt(), this.childR.bigInt()]);
        }
        return __classPrivateFieldGet(this, _NodeMiddle_key, "f");
    }
    get value() {
        return nodeValue(this.type, this.childL, this.childR);
    }
    get string() {
        return `Middle L:${this.childL} R:${this.childR}`;
    }
}
_NodeMiddle_key = new WeakMap();
export class NodeEmpty {
    constructor() {
        _NodeEmpty_key.set(this, void 0);
        this.type = NODE_TYPE_EMPTY;
        __classPrivateFieldSet(this, _NodeEmpty_key, ZERO_HASH, "f");
    }
    async getKey() {
        return ZERO_HASH;
    }
    get value() {
        return EMPTY_NODE_VALUE;
    }
    get string() {
        return EMPTY_NODE_STRING;
    }
}
_NodeEmpty_key = new WeakMap();
