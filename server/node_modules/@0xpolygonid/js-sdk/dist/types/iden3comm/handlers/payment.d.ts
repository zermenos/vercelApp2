import { BasicMessage, IPackageManager, PackerParams } from '../types';
import { DID } from '@iden3/js-iden3-core';
import { AbstractMessageHandler, IProtocolMessageHandler } from './message-handler';
import { PaymentInfo, PaymentMessage, PaymentRequestDataInfo, PaymentRequestInfo, PaymentRequestMessage } from '../types/protocol/payment';
/**
 * @beta
 * createPaymentRequest is a function to create protocol payment-request message
 * @param {DID} sender - sender did
 * @param {DID} receiver - receiver did
 * @param {string} agent - agent URL
 * @param {PaymentRequestInfo[]} payments - payments
 * @returns `PaymentRequestMessage`
 */
export declare function createPaymentRequest(sender: DID, receiver: DID, agent: string, payments: PaymentRequestInfo[]): PaymentRequestMessage;
/**
 * @beta
 * createPayment is a function to create protocol payment message
 * @param {DID} sender - sender did
 * @param {DID} receiver - receiver did
 * @param {PaymentInfo[]} payments - payments
 * @returns `PaymentMessage`
 */
export declare function createPayment(sender: DID, receiver: DID, payments: PaymentInfo[]): PaymentMessage;
/**
 * @beta
 * Interface that allows the processing of the payment-request and payment protocol messages
 *
 * @interface IPaymentHandler
 */
export interface IPaymentHandler {
    /**
     * @beta
     * unpacks payment-request
     * @param {Uint8Array} request - raw byte message
     * @returns `Promise<PaymentRequestMessage>`
     */
    parsePaymentRequest(request: Uint8Array): Promise<PaymentRequestMessage>;
    /**
     *  @beta
     * handle payment-request
     * @param {Uint8Array} request - raw byte message
     * @param {PaymentRequestMessageHandlerOptions} opts - handler options
     * @returns {Promise<Uint8Array>} - agent message or null
     */
    handlePaymentRequest(request: Uint8Array, opts: PaymentRequestMessageHandlerOptions): Promise<Uint8Array | null>;
    /**
     * @beta
     * handle payment protocol message
     * @param {PaymentMessage} payment  - payment message
     * @param {PaymentHandlerOptions} opts - options
     * @returns `Promise<void>`
     */
    handlePayment(payment: PaymentMessage, opts: PaymentHandlerOptions): Promise<void>;
}
/** @beta PaymentRequestMessageHandlerOptions represents payment-request handler options */
export type PaymentRequestMessageHandlerOptions = {
    paymentHandler: (data: PaymentRequestDataInfo) => Promise<string>;
};
/** @beta PaymentHandlerOptions represents payment handler options */
export type PaymentHandlerOptions = {
    paymentRequest: PaymentRequestMessage;
    paymentValidationHandler: (txId: string, data: PaymentRequestDataInfo) => Promise<void>;
};
/** @beta PaymentHandlerParams represents payment handler params */
export type PaymentHandlerParams = {
    packerParams: PackerParams;
};
/**
 *
 * Allows to process PaymentRequest protocol message
 * @beta
 * @class PaymentHandler
 * @implements implements IPaymentHandler interface
 */
export declare class PaymentHandler extends AbstractMessageHandler implements IPaymentHandler, IProtocolMessageHandler {
    private readonly _packerMgr;
    private readonly _params;
    /**
     * @beta Creates an instance of PaymentHandler.
     * @param {IPackageManager} _packerMgr - package manager to unpack message envelope
     * @param {PaymentHandlerParams} _params - payment handler params
     *
     */
    constructor(_packerMgr: IPackageManager, _params: PaymentHandlerParams);
    handle(message: BasicMessage, context: PaymentRequestMessageHandlerOptions | PaymentHandlerOptions): Promise<BasicMessage | null>;
    /**
     * @inheritdoc IPaymentHandler#parsePaymentRequest
     */
    parsePaymentRequest(request: Uint8Array): Promise<PaymentRequestMessage>;
    private handlePaymentRequestMessage;
    /**
     * @inheritdoc IPaymentHandler#handlePaymentRequest
     */
    handlePaymentRequest(request: Uint8Array, opts: PaymentRequestMessageHandlerOptions): Promise<Uint8Array | null>;
    /**
     * @inheritdoc IPaymentHandler#handlePayment
     */
    handlePayment(payment: PaymentMessage, opts: PaymentHandlerOptions): Promise<void>;
    private packMessage;
}
