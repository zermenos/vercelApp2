"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processZeroKnowledgeProofRequests = void 0;
const js_crypto_1 = require("@iden3/js-crypto");
const utils_1 = require("../../utils");
/**
 * Groups the ZeroKnowledgeProofRequest objects based on their groupId.
 * Returns a Map where the key is the groupId and the value is an object containing the query and linkNonce.
 *
 * @param requestScope - An array of ZeroKnowledgeProofRequest objects.
 * @returns A Map<number, { query: JsonDocumentObject; linkNonce: number }> representing the grouped queries.
 */
const getGroupedQueries = (requestScope) => requestScope.reduce((acc, proofReq) => {
    const groupId = proofReq.query.groupId;
    if (!groupId) {
        return acc;
    }
    const existedData = acc.get(groupId);
    if (!existedData) {
        const seed = (0, js_crypto_1.getRandomBytes)(12);
        const dataView = new DataView(seed.buffer);
        const linkNonce = dataView.getUint32(0);
        acc.set(groupId, { query: proofReq.query, linkNonce });
        return acc;
    }
    const credentialSubject = (0, utils_1.mergeObjects)(existedData.query.credentialSubject, proofReq.query.credentialSubject);
    acc.set(groupId, {
        ...existedData,
        query: {
            skipClaimRevocationCheck: existedData.query.skipClaimRevocationCheck || proofReq.query.skipClaimRevocationCheck,
            ...existedData.query,
            credentialSubject
        }
    });
    return acc;
}, new Map());
/**
 * Processes zero knowledge proof requests.
 *
 * @param to - The identifier of the recipient.
 * @param requests - An array of zero knowledge proof requests.
 * @param from - The identifier of the sender.
 * @param proofService - The proof service.
 * @param opts - Additional options for processing the requests.
 * @returns A promise that resolves to an array of zero knowledge proof responses.
 */
const processZeroKnowledgeProofRequests = async (to, requests, from, proofService, opts) => {
    const requestScope = requests ?? [];
    const combinedQueries = getGroupedQueries(requestScope);
    const groupedCredentialsCache = new Map();
    const zkpResponses = [];
    for (const proofReq of requestScope) {
        if (!opts.supportedCircuits.includes(proofReq.circuitId)) {
            throw new Error(`Circuit ${proofReq.circuitId} is not allowed`);
        }
        const query = proofReq.query;
        const groupId = query.groupId;
        const combinedQueryData = combinedQueries.get(groupId);
        if (groupId) {
            if (!combinedQueryData) {
                throw new Error(`Invalid group id ${query.groupId}`);
            }
            const combinedQuery = combinedQueryData.query;
            if (!groupedCredentialsCache.has(groupId)) {
                const credWithRevStatus = await proofService.findCredentialByProofQuery(to, combinedQueryData.query);
                if (!credWithRevStatus.cred) {
                    throw new Error(`Credential not found for query ${JSON.stringify(combinedQuery)}`);
                }
                groupedCredentialsCache.set(groupId, credWithRevStatus);
            }
        }
        const credWithRevStatus = groupedCredentialsCache.get(groupId);
        const zkpRes = await proofService.generateProof(proofReq, to, {
            verifierDid: from,
            challenge: opts.challenge,
            skipRevocation: Boolean(query.skipClaimRevocationCheck),
            credential: credWithRevStatus?.cred,
            credentialRevocationStatus: credWithRevStatus?.revStatus,
            linkNonce: combinedQueryData?.linkNonce ? BigInt(combinedQueryData.linkNonce) : undefined
        });
        zkpResponses.push(zkpRes);
    }
    return zkpResponses;
};
exports.processZeroKnowledgeProofRequests = processZeroKnowledgeProofRequests;
