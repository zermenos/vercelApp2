import { Signer } from 'ethers';
import { EthConnectionConfig } from './state';
import { IOnChainZKPVerifier } from '../interfaces/onchain-zkp-verifier';
import { ContractInvokeTransactionData, JsonDocumentObjectValue, ZeroKnowledgeProofResponse } from '../../iden3comm';
/**
 * Supported function signature for SubmitZKPResponse
 */
export declare enum FunctionSignatures {
    /**
     * solidity identifier for function signature:
     * function submitZKPResponse(uint64 requestId, uint256[] calldata inputs,
     * uint256[2] calldata a, uint256[2][2] calldata b, uint256[2] calldata c) public
     */
    SubmitZKPResponseV1 = "b68967e2",
    SubmitZKPResponseV2 = "ade09fcd"
}
/**
 * OnChainZKPVerifierOptions represents OnChainZKPVerifier options
 */
export type OnChainZKPVerifierOptions = {
    didResolverUrl?: string;
};
/**
 * OnChainZKPVerifier is a class that allows to interact with the OnChainZKPVerifier contract
 * and submitZKPResponse.
 *
 * @beta
 * @class OnChainZKPVerifier
 */
export declare class OnChainZKPVerifier implements IOnChainZKPVerifier {
    private readonly _configs;
    private readonly _opts?;
    /**
     * supported circuits
     */
    private readonly _supportedCircuits;
    /**
     * abi coder to encode/decode structures to solidity bytes
     */
    private readonly _abiCoder;
    /**
     *
     * Creates an instance of OnChainZKPVerifier.
     * @beta
     * @param {EthConnectionConfig[]} - array of ETH configs
     */
    constructor(_configs: EthConnectionConfig[], _opts?: OnChainZKPVerifierOptions | undefined);
    /**
     * {@inheritDoc IOnChainZKPVerifier.prepareTxArgsSubmitV1}
     */
    prepareTxArgsSubmitV1(txData: ContractInvokeTransactionData, zkProofResponse: ZeroKnowledgeProofResponse): Promise<JsonDocumentObjectValue[]>;
    /**
     * {@inheritDoc IOnChainZKPVerifier.submitZKPResponse}
     */
    submitZKPResponse(ethSigner: Signer, txData: ContractInvokeTransactionData, zkProofResponses: ZeroKnowledgeProofResponse[]): Promise<Map<string, ZeroKnowledgeProofResponse>>;
    /**
     * {@inheritDoc IOnChainZKPVerifier.submitZKPResponseV2}
     */
    submitZKPResponseV2(ethSigner: Signer, txData: ContractInvokeTransactionData, zkProofResponses: ZeroKnowledgeProofResponse[]): Promise<Map<string, ZeroKnowledgeProofResponse[]>>;
    prepareTxArgsSubmitV2(txData: ContractInvokeTransactionData, zkProofResponses: ZeroKnowledgeProofResponse[]): Promise<JsonDocumentObjectValue[]>;
    private packZkpProof;
    private packCrossChainProofs;
    private packGlobalStateMsg;
    private packIdentityStateMsg;
    private packMetadatas;
    private getOnChainGistRootStatePubSignals;
    private resolveDidDocumentEip712MessageAndSignature;
}
