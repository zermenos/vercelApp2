{"version":3,"file":"index.js","sources":["../../../node_modules/@iden3/js-crypto/dist/browser/esm/index.js","../../../node_modules/@iden3/js-iden3-core/dist/browser/esm/index.js","../../../src/hash.ts","../../../src/proving.ts","../../../node_modules/rfc4648/lib/rfc4648.js","../../../src/jwz.ts","../../../src/witness_calculator.ts","../../../node_modules/ffjavascript/build/browser.esm.js","../../../node_modules/snarkjs/build/browser.esm.js","../../../src/common.ts","../../../src/authGroth16.ts","../../../node_modules/@iden3/js-merkletree/dist/browser/esm/index.js","../../../src/authV2Groth16.ts","../../../src/index.ts"],"sourcesContent":["var cI=Object.defineProperty;var DI=(G,I)=>{for(var E in I)cI(G,E,{get:I[E],enumerable:!0})};var M={};DI(M,{beBuff2int:()=>ZI,beInt2Buff:()=>WI,leBuff2int:()=>pI,leInt2Buff:()=>lI,unstringifyBigInts:()=>d});var B={};DI(B,{abs:()=>fI,add:()=>iI,band:()=>KI,bitLength:()=>f,bits:()=>l,bor:()=>TI,bxor:()=>PI,div:()=>P,e:()=>nI,eq:()=>aI,exp:()=>bI,fromArray:()=>wI,fromRprBE:()=>z,fromRprLE:()=>m,fromString:()=>R,geq:()=>RI,gt:()=>xI,isNegative:()=>MI,isOdd:()=>p,isZero:()=>Z,land:()=>qI,leq:()=>OI,lor:()=>VI,lt:()=>yI,mod:()=>hI,mul:()=>QI,naf:()=>tI,neg:()=>kI,neq:()=>uI,one:()=>w,pow:()=>N,shiftLeft:()=>sI,shiftRight:()=>W,shl:()=>UI,shr:()=>eI,square:()=>YI,sub:()=>T,toArray:()=>rI,toLEBuff:()=>vI,toNumber:()=>JI,toRprBE:()=>X,toRprLE:()=>q,toString:()=>SI,zero:()=>y});var BI=[0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4],R=(G,I)=>{if(!I||I===10)return BigInt(G);if(I===16)return G.slice(0,2)==\"0x\"?BigInt(G):BigInt(\"0x\"+G);throw new Error(\"Unsupported radix\")},nI=R,wI=(G,I)=>{let E=BigInt(0),A=BigInt(I);for(let o=0;o<G.length;o++)E=E*A+BigInt(G[o]);return E},f=G=>{let I=G.toString(16);return(I.length-1)*4+BI[parseInt(I[0],16)]},MI=G=>BigInt(G)<BigInt(0),Z=G=>G===y,sI=(G,I)=>G<<I,W=(G,I)=>G>>I,UI=sI,eI=W,p=G=>(G&w)==w,tI=G=>{let I=G,E=[];for(;I;){if(I&w){let A=2-Number(I%BigInt(4));E.push(A),I=I-BigInt(A)}else E.push(0);I=I>>w}return E},l=G=>{let I=G,E=[];for(;I;)I&w?E.push(1):E.push(0),I=I>>w;return E},JI=G=>{if(G>BigInt(Number.MAX_SAFE_INTEGER))throw new Error(\"Number too big\");return Number(G)},rI=(G,I)=>{let E=[],A=G,o=I;for(;A;)E.unshift(Number(A%o)),A=A/o;return E},iI=(G,I)=>G+I,T=(G,I)=>G-I,kI=G=>-G,QI=(G,I)=>G*I,YI=G=>G*G,N=(G,I)=>G**I,bI=(G,I)=>G**I,fI=G=>G>=0?G:-G,P=(G,I)=>G/I,hI=(G,I)=>G%I,aI=(G,I)=>G===I,uI=(G,I)=>G!==I,yI=(G,I)=>G<I,xI=(G,I)=>G>I,OI=(G,I)=>G<=I,RI=(G,I)=>G>=I,KI=(G,I)=>G&I,TI=(G,I)=>G|I,PI=(G,I)=>G^I,qI=(G,I)=>G&&I,VI=(G,I)=>G||I,q=(G,I,E,A)=>{let o=\"0000000\"+E.toString(16),D=new Uint32Array(G.buffer,G.byteOffset+I,A/4),s=((o.length-7)*4-1>>5)+1;for(let t=0;t<s;t++)D[t]=parseInt(o.substring(o.length-8*t-8,o.length-8*t),16);for(let t=s;t<D.length;t++)D[t]=0;for(let t=D.length*4;t<A;t++)G[t]=JI(KI(W(E,BigInt(t*8)),BigInt(255)))},X=(G,I,E,A)=>{let o=\"0000000\"+E.toString(16),D=new DataView(G.buffer,G.byteOffset+I,A),s=((o.length-7)*4-1>>5)+1;for(let t=0;t<s;t++)D.setUint32(A-t*4-4,parseInt(o.substring(o.length-8*t-8,o.length-8*t),16),!1);for(let t=0;t<A/4-s;t++)D.setInt32(0,0,!1)},m=(G,I,E)=>{E=E||G.byteLength,I=I||0;let A=new Uint32Array(G.buffer,G.byteOffset+I,E/4),o=new Array(E/4);return A.forEach((D,s)=>o[o.length-s-1]=D.toString(16).padStart(8,\"0\")),R(o.join(\"\"),16)},z=(G,I,E)=>{E=E||G.byteLength,I=I||0;let A=new DataView(G.buffer,G.byteOffset+I,E),o=new Array(E/4);for(let D=0;D<E/4;D++)o[D]=A.getUint32(D*4,!1).toString(16).padStart(8,\"0\");return R(o.join(\"\"),16)},SI=(G,I=10)=>G.toString(I),vI=G=>{let I=new Uint8Array(Math.floor((f(G)-1)/8)+1);return q(I,0,G,I.byteLength),I},y=BigInt(0),w=BigInt(1);function d(G){if(Array.isArray(G))return G.map(d);if(typeof G==\"object\"){let A={};for(let[o,D]of Object.entries(G))A[o]=d(D);return A}let E=[...Uint8Array.from(atob(G),A=>A.charCodeAt(0))].map(A=>A.toString(16).padStart(2,\"0\")).join(\"\");return BigInt(`0x${E}`)}function ZI(G){let I=BigInt(0),E=G.length,A=0,o=new DataView(G.buffer,G.byteOffset,G.byteLength);for(;E>0;)E>=4?(E-=4,I+=BigInt(o.getUint32(E))<<BigInt(A*8),A+=4):E>=2?(E-=2,I+=BigInt(o.getUint16(E))<<BigInt(A*8),A+=2):(E-=1,I+=BigInt(o.getUint8(E))<<BigInt(A*8),A+=1);return I}function WI(G,I){let E=G,A=new Uint8Array(I),o=new DataView(A.buffer),D=I;for(;D>0;)D-4>=0?(D-=4,o.setUint32(D,Number(E&BigInt(4294967295))),E=E>>BigInt(32)):D-2>=0?(D-=2,o.setUint16(D,Number(E&BigInt(65535))),E=E>>BigInt(16)):(D-=1,o.setUint8(D,Number(E&BigInt(255))),E=E>>BigInt(8));if(E)throw new Error(\"Number does not fit in this length\");return A}function pI(G){let I=BigInt(0),E=0,A=new DataView(G.buffer,G.byteOffset,G.byteLength);for(;E<G.length;)E+4<=G.length?(I+=BigInt(A.getUint32(E,!0))<<BigInt(E*8),E+=4):E+2<=G.length?(I+=BigInt(A.getUint16(E,!0))<<BigInt(E*8),E+=2):(I+=BigInt(A.getUint8(E))<<BigInt(E*8),E+=1);return I}function lI(G,I){let E=G;typeof I>\"u\"&&(I=Math.floor((f(G)-1)/8)+1,I==0&&(I=1));let A=new Uint8Array(I),o=new DataView(A.buffer),D=0;for(;D<I;)D+4<=I?(o.setUint32(D,Number(E&BigInt(4294967295)),!0),D+=4,E=E>>BigInt(32)):D+2<=I?(o.setUint16(D,Number(E&BigInt(65535)),!0),D+=2,E=E>>BigInt(16)):(o.setUint8(D,Number(E&BigInt(255))),D+=1,E=E>>BigInt(8));if(E)throw new Error(\"Number does not fit in this length\");return A}function V(G){if(G<=0)throw new Error(\"Length must be greater than 0\");let I=globalThis;if(I.crypto?.getRandomValues){let E=new Uint8Array(G);return I.crypto.getRandomValues(E),E}throw new Error(\"Random byte generation is not supported in this environment\")}var i=class{constructor(I){this.type=\"F1\",this.one=BigInt(1),this.zero=BigInt(0),this.p=BigInt(I),this.m=w,this.negone=this.p-this.one,this.two=BigInt(2),this.half=this.p>>this.one,this.bitLength=f(this.p),this.mask=(this.one<<BigInt(this.bitLength))-this.one,this.n64=Math.floor((this.bitLength-1)/64)+1,this.n32=this.n64*2,this.n8=this.n64*8,this.R=this.e(this.one<<BigInt(this.n64*64)),this.Ri=this.inv(this.R);let E=this.negone>>this.one;this.nqr=this.two;let A=this.pow(this.nqr,E);for(;!this.eq(A,this.negone);)this.nqr=this.nqr+this.one,A=this.pow(this.nqr,E);for(this.s=0,this.t=this.negone;(this.t&this.one)==this.zero;)this.s=this.s+1,this.t=this.t>>this.one;this.nqr_to_t=this.pow(this.nqr,this.t),NI(this),this.shift=this.square(this.nqr),this.k=this.exp(this.nqr,BigInt(2**this.s))}e(I,E=void 0){let A;if(E?E==BigInt(16)&&(A=BigInt(\"0x\"+I)):A=BigInt(I),A<0){let o=-A;return o>=this.p&&(o=o%this.p),this.p-o}else return A>=this.p?A%this.p:A}add(I,E){let A=I+E;return A>=this.p?A-this.p:A}sub(I,E){return I>=E?I-E:this.p-E+I}neg(I){return I&&this.p-I}double(I){return this.add(I,I)}mul(I,E){return I*E%this.p}mulScalar(I,E){return I*this.e(E)%this.p}square(I){return I*I%this.p}eq(I,E){return I==E}neq(I,E){return I!=E}lt(I,E){let A=I>this.half?I-this.p:I,o=E>this.half?E-this.p:E;return A<o}gt(I,E){let A=I>this.half?I-this.p:I,o=E>this.half?E-this.p:E;return A>o}leq(I,E){let A=I>this.half?I-this.p:I,o=E>this.half?E-this.p:E;return A<=o}geq(I,E){let A=I>this.half?I-this.p:I,o=E>this.half?E-this.p:E;return A>=o}div(I,E){return this.mul(I,this.inv(E))}idiv(I,E){if(!E)throw new Error(\"Division by zero\");return I/E}inv(I){if(!I)throw new Error(\"Division by zero\");let E=this.zero,A=this.p,o=this.one,D=I%this.p;for(;D;){let s=A/D;[E,o]=[o,E-s*o],[A,D]=[D,A-s*D]}return E<this.zero&&(E+=this.p),E}mod(I,E){return I%E}pow(I,E){return HI(this,I,E)}exp(I,E){return HI(this,I,BigInt(E))}band(I,E){let A=I&E&this.mask;return A>=this.p?A-this.p:A}bor(I,E){let A=(I|E)&this.mask;return A>=this.p?A-this.p:A}bxor(I,E){let A=(I^E)&this.mask;return A>=this.p?A-this.p:A}bnot(I){let E=I^this.mask;return E>=this.p?E-this.p:E}shl(I,E){if(Number(E)<this.bitLength){let A=I<<E&this.mask;return A>=this.p?A-this.p:A}else{let A=this.p-E;return Number(A)<this.bitLength?I>>A:this.zero}}shr(I,E){if(Number(E)<this.bitLength)return I>>E;{let A=this.p-E;if(Number(A)<this.bitLength){let o=I<<A&this.mask;return o>=this.p?o-this.p:o}else return y}}land(I,E){return I&&E?this.one:this.zero}lor(I,E){return I||E?this.one:this.zero}sqrt_old(I){if(I==this.zero)return this.zero;if(this.pow(I,this.negone>>this.one)!=this.one)return null;let A=this.s,o=this.nqr_to_t,D=this.pow(I,this.t),s=this.pow(I,this.add(this.t,this.one)>>this.one);for(;D!=this.one;){let t=this.square(D),H=1;for(;t!=this.one;)H++,t=this.square(t);let J=o;for(let K=0;K<A-H-1;K++)J=this.square(J);A=H,o=this.square(J),D=this.mul(D,o),s=this.mul(s,J)}return s>this.p>>this.one&&(s=this.neg(s)),s}normalize(I){if(I<0){let E=-I;return E>=this.p&&(E=E%this.p),this.p-E}else return I>=this.p?I%this.p:I}random(){let I=this.bitLength*2/8,E=this.zero;for(let A=0;A<I;A++)E=(E<<BigInt(8))+BigInt(V(1)[0]);return E%this.p}toString(I,E=10){E=E||10;let A;return I>this.half&&E==10?A=\"-\"+(this.p-I).toString(E):A=I.toString(E),A}isZero(I){return I==this.zero}toRprLE(I,E,A){q(I,E,A,this.n64*8)}toRprBE(I,E,A){X(I,E,A,this.n64*8)}toRprBEM(I,E,A){return this.toRprBE(I,E,this.mul(this.R,A))}toRprLEM(I,E,A){return this.toRprLE(I,E,this.mul(this.R,A))}fromRprLE(I,E){return m(I,E,this.n8)}fromRprBE(I,E){return z(I,E,this.n8)}fromRprLEM(I,E){return this.mul(this.fromRprLE(I,E),this.Ri)}fromRprBEM(I,E){return this.mul(this.fromRprBE(I,E),this.Ri)}toObject(I){return I}sqrt(I){throw new Error(\"Not implemented sqrt for F1\"+I)}};function NI(G){for(G.sqrt_q=N(G.p,G.m),G.sqrt_s=y,G.sqrt_t=T(G.sqrt_q,w);!p(G.sqrt_t);)G.sqrt_s=G.sqrt_s+w,G.sqrt_t=P(G.sqrt_t,2n);let I=G.one;for(;G.eq(I,G.one);){let E=G.random();G.sqrt_z=G.pow(E,G.sqrt_t),I=G.pow(G.sqrt_z,2n**(G.sqrt_s-w))}G.sqrt_tm1d2=P(T(G.sqrt_t,w),2n),G.sqrt=E=>{if(G.isZero(E))return G.zero;let A=G.pow(E,G.sqrt_tm1d2),o=G.pow(G.mul(G.square(A),E),2n**(G.sqrt_s-w));if(G.eq(o,G.negone))return null;let D=G.sqrt_s,s=G.mul(E,A),t=G.mul(s,A),H=G.sqrt_z;for(;!G.eq(t,G.one);){let J=G.square(t),K=w;for(;!G.eq(J,G.one);)J=G.square(J),K++;A=H;for(let C=0;C<D-K-w;C++)A=G.square(A);H=G.square(A),t=G.mul(t,H),s=G.mul(s,A),D=K}return G.geq(s,G.zero)?s:G.neg(s)}}function HI(G,I,E){if(Z(E))return G.one;let A=l(E);if(A.length==0)return G.one;let o=I;for(let D=A.length-2;D>=0;D--)o=G.square(o),A[D]&&(o=G.mul(o,I));return o}var j=class{constructor(I){this.F=I,this.p=BigInt(\"21888242871839275222246405745257275088548364400416034343698204186575808495617\"),this.pm1d2=B.div(B.sub(this.p,B.one),2n),this.Generator=[I.e(\"995203441582195749578291179787384436505546430278305826713579947235728471134\"),I.e(\"5472060717959818805561601436314318772137091100104008585924551046643952123905\")],this.Base8=[I.e(\"5299619240641551281634865583518297030282874472190772894086521144482721001553\"),I.e(\"16950150798460657717958625567821834550301663161624707787222815936182638968203\")],this.order=BigInt(\"21888242871839275222246405745257275088614511777268538073601725287587578984328\"),this.subOrder=B.shiftRight(this.order,3n),this.A=I.e(\"168700\"),this.D=I.e(\"168696\")}addPoint(I,E){let A=this.F,o=new Array(2),D=A.mul(I[0],E[1]),s=A.mul(I[1],E[0]),t=A.mul(A.sub(I[1],A.mul(this.A,I[0])),A.add(E[0],E[1])),H=A.mul(D,s),J=A.mul(this.D,H);return o[0]=A.div(A.add(D,s),A.add(A.one,J)),o[1]=A.div(A.add(t,A.sub(A.mul(this.A,D),s)),A.sub(A.one,J)),o}mulPointEscalar(I,E){let A=this.F,o=[A.e(\"0\"),A.e(\"1\")],D=E,s=I;for(;!B.isZero(D);)B.isOdd(D)&&(o=this.addPoint(o,s)),s=this.addPoint(s,s),D=B.shiftRight(D,B.one);return o}inSubgroup(I){let E=this.F;if(!this.inCurve(I))return!1;let A=this.mulPointEscalar(I,this.subOrder);return E.isZero(A[0])&&E.eq(A[1],E.one)}inCurve(I){let E=this.F,A=E.square(I[0]),o=E.square(I[1]);return!!E.eq(E.add(E.mul(this.A,A),o),E.add(E.one,E.mul(E.mul(A,o),this.D)))}packPoint(I){let E=this.F,A=new Uint8Array(32);E.toRprLE(A,0,I[1]);let o=E.toObject(I[0]);return B.gt(o,this.pm1d2)&&(A[31]=A[31]|128),A}unpackPoint(I){let E=this.F,A=!1,o=[BigInt(0),BigInt(0)];if(I[31]&128&&(A=!0,I[31]=I[31]&127),o[1]=E.fromRprLE(I,0),B.gt(E.toObject(o[1]),this.p))return null;let D=E.square(o[1]),s=E.div(E.sub(E.one,D),E.sub(this.A,E.mul(this.D,D))),t=E.exp(s,BigInt(E.half));if(!E.eq(E.one,t))return null;let H=E.sqrt(s);return H==null?null:(A&&(H=E.neg(H)),o[0]=BigInt(H),o)}},XI=new i(BigInt(\"21888242871839275222246405745257275088548364400416034343698204186575808495617\")),n=new j(XI);var CI={C:[[\"CcRunsaOm9T+H6q6KUy6OKcaoXdTTN0bbH3A29Cr16c=\",\"DANWUwiW7sQql+2TfzE1z8UUKzrkBbg0PB2D/6YEy4E=\",\"JQ9RFqQX12qqQilS/MWzMyn3cU/CbVbAQyUH/HQKh8Q=\",\"JkBlrYdXLgFmWWJsM8ghP3o3O5uCJaOE9FjYULtKlJ8=\",\"K7jpStjYrcps6Qn/lLh1BymylORAA3baOeM/2iS9Qq8=\",\"GQUQZdBdhh7IE8FSkdRqMo9iAbIa1dI51Phfuwml264=\",\"JFvQYXqkSWGPW9RVCqx7jgjU0cAXFllDzfR3bN/zQ0o=\",\"CfsaERgHT/edisv1sCEx4EihVwFV4PKxw2rQkdSRqI8=\",\"I0q1BLuugZiXJ0GVL3i36wGOoZLwXlTBSEq4lz/2bYg=\",\"AfZuUJuEw1WuPUw1E6KC/Uj5yMZDn0Kng1+8/g8qMkw=\",\"GyL11p1yXmACzwDdnuYtGlrw79xJEPVBJ6kgzMQ/kfo=\",\"AlK1Xt6tE1+FKWi38cT0kPplns1bR6eKfbkfZabfwj8=\",\"F3OuLhY3ySrQZ3wqBH/qjspLUzA/IYcfaJKiwEh9f/E=\",\"LVewKQbNCrgqeedvru9vh2ZurAk893FWRdXsn3rHMvU=\",\"ChbzpigksoHost24/DkaSY+wYTF/r/oDaW+DRZYxPZM=\",\"Fmb1Jff0tpiNKjeDSrdH6uBYd1e3iOt/HiawjjaghZE=\",\"BdpE+OCjuLsTIx8MoltQtX9cghKOHf7D5UHZEuvhe3Y=\",\"CaObqZkzA7oZG6yL2z4BRNv7XzliTN2VJNx4YWM7yVo=\",\"BsD7gkoZIC0w7mtBjAAp4QDoWm0Vj58qgo39LtCSCmg=\",\"A4fY4FaysXapd2tEkss7QYrcZgYn5SuzMkKDv5UiOV0=\",\"FHoa+CA271sop6N76kDWrDATzxtiNYOWv3FW9cLcloQ=\",\"MDjZIGDa6q8b0Egr0/BhPYjo3/kKegUl+SJ+TLfG+Bs=\",\"BylAqh1Tilo5oyP55dZWFs9sIjM5AG+XialyRVMpCPU=\",\"LT1gSUn04UxwuKh5rt7Emzo2e6IWrwSPRk7W8V4rkCM=\",\"IlueTzXHVJ+Ad0wrTRgwmy3PfHKHuYLkl0ahdmQec8U=\",\"HqeBKI/fE7IZAJWiNEgo433+gcdaCXCfDRObu/bHBBQ=\",\"COlsPn6N5EMrICQFRYRouQ3GiQ1M7hKLNQLltstK7us=\",\"BbQ9p8iqKa9tyq5X0HC0nSnOiJpkpKwYPoXVWzZsgF8=\",\"vsmKA047ive6SGHxrVpI3O98mW56UcfN3nJNj2EOUg==\",\"LrZ8z6KeK0Irn4Sl0FdfxDWzD8rjAwOUgL44TuTr5yo=\",\"ECu9who/FHvwTu3uXXC9CEpxBcYxyG7NLE6HSaE5Fco=\",\"J0vBbIhyG6v9W76NhWLBvxJ644kVKA+7jjEVytNYL3k=\",\"GFzs5BdUmyUoPeBFEfdpEByIULQJ1JKKuDFhE1G9mTg=\",\"E8c/sEP36Xi8nPtVx/qstPTII2dKvhdzcFmsCjLDYAc=\",\"JLOh2DMIdCs2DJxgWVZz4gHN1M71pBRckzxOWWlIHXA=\",\"GLWulN+eyXqqKo8PQkJbzM3IJmoHD4Zu8PSNejdEOYs=\",\"IOs5jLlYzCzMfLH6w4UBq744FpsthSLZ5fCZ8tWQXLQ=\",\"HliN0+yLDSUsLHwMeKArIru60fTcqi54qLju8vTik0Q=\",\"D4vzvWwiujsb86suP7QIGM1CF/+68pTKQjMdTjBDoKY=\",\"A4jJ/PMPwoQdZI9GutAd0QvuncGE0l6ryfYXAhEJzsM=\",\"K7fzl8WUGsZ776iyMvFciFPawmPaeTVVRBqQzsg7ZFQ=\",\"F/OJtS+ep6mIdKSjHvanvrQ/sX2w5JklC7PwGBxZ+yE=\",\"A6IJDqy4l6MfsQVh1WCpruwkt60U0XsUXyDIdaCyjHw=\",\"DDmFNPDrWA8f5L9kVTOJ5nzKRxQ5lDDglhncvuF7oJk=\",\"Bwlayf2kavp/GBJZ42Nf7/p/Ee5j8+53elzr9IIjKMQ=\",\"IEb3zxyPE+8racvIvA1dgJ+CVoq+KzPRzQYJWLHO1oM=\",\"LCdBNqXeKEnebn+S+QlyllAay2jVYTj7y2YMTLD2kQc=\",\"HE1ReKy1xrbs7vI6/G8W7HsDgwlMtkZ+jQ9FB7PPdMM=\",\"BlsUR9DWTOztEWeFuSxjpqfdlwFQfcvouQkyXij3uNM=\",\"ImXX4kSIEiDIGhk9l5MwQJyb+jM0OJUTQOAj57cqGWE=\",\"FbErNVr34FY3ocduZ/nOxvyopkSbN2afaFBQIlazCro=\",\"GhUi/sxq4Cjk0+MClJe4jzXCtIxoevFo7CWC2QdbQ4c=\",\"IvVueegbdJbkcqZBoFPEFLzFOwqTUOJYkkCAMHb1jyY=\",\"IC3bZtCYiZTnqrrWks6sTiMkZyoXq4QX0e4niv0X/Qw=\",\"ErBwHogTxbIajjAgj48RWLls1Ciud73qcvhFEPc+384=\",\"HmP9IOcG4UB8iDjOsmuEyf5pP93g6x4anffoTlPu7n4=\",\"IKFsWoYlbe/9Fa8XTDn52aoRUAZ2rH5XAIgoDdGJYlk=\",\"HI+L+OFT2lWtWsouqu442lY+BDXA8vN8J1WPubrgo+s=\",\"DXcyaHu3v186q8/cxPu2fhWcGYMhPkFsOIAST93xh8k=\",\"DN0ER1qGmZou3Lu/gmSxleEIs7YLZHXYNfbM754vaGU=\",\"L+ZVhs1OdUtMY6iMLtP5ug47+kP1R7QRU1YMIU/jy80=\",\"BQPPljyCc2BOZZEo7CkmH2I5mBXZjFbb9PKDfHJ61Nk=\",\"HuSOong5Bht4N5k29tl8qUALOT71/fOO8Udch0LLM0w=\",\"GkI/jY/IkrItfNW/AZfFdcV56DVj0EhZ1zssHFwEE/k=\",\"BpoNpQEz6ZUvAOYXeJcqe+Do2Kt2yVYWrkZWNqu5fsc=\",\"G/eHndQvLLuRxloJdjVvZ5ZML5Tfvw5EzyuZCRZdhhQ=\",\"GyPcz0hYIgZcj8Cv5hC+cWTiUFYmf2xKgF//1FR6C5g=\",\"Lr6Q1vb9ykIODC4ATOXFpECeVkycTzZx4wEfYnvsfC4=\",\"FnzWkwU1qBbf6+gdIMN253aHdg86L6DaKQsvTWxoY/c=\",\"CIZcEPSmM8VMzItot53yhfGfEhA3TMZOPIqWbU+QJks=\",\"HekC+8C/AZUcolq7OdeIlHIbN+BxhRsDpyzGuDO3iTs=\",\"Dj7KAHaZ3Q+FLrItpkLklfZ8mI3VvwE3Z2sWox6rRmc=\"],[\"DumlkrqalRjQWYbWVvQMIRTEmTwRuymTjSHUcwTNjm4=\",\"8URSNfIUjFmGWHFp/BvNiHsI1NAIaN9Wlv/0CVboZA==\",\"CN/zSH6KyZ4fKaBY0PqAuTDHKHMLerNs6HnziQ7Pc/U=\",\"CE1SDk5btGnh+Qdct8SQ76WVZe7a4tAMqO+IzuorAZc=\",\"LRXZgtmVd/oz2lZyJBb9c0s+ZnovnxXY6z52euD9gR4=\",\"DtJTiESroWHPFXikPPA2TpFgH2U2pZltDvvmVjLEG20=\",\"JgDCfYefvKGG5znmNjxxz4BMh32Cm3NdzD468ClV5go=\",\"KPi9RKWDy6pHW9FTlkMOfMuZpVF0QN/ZcAWFWCgr8sU=\",\"Cc19TDgNxUiHgarQEufq7x7TFNf2l6VXLQMMVd8VMiE=\",\"Ebtu4Skaq7IGEg7KrORg0ktnE/6+giNJUeK+59D4VfU=\",\"LXTo+gY32YUzEPPA4/rh0G8XFYD1uP0FNJyt7s/OsjA=\",\"JzXk7J05vf+sm+8xusujOLGglVmlEaGL5LTTFu2IkDM=\",\"DwPB6eCJXbGl2mMS+qeOlxEGwz+Cbgjc9hfiQhMTLf0=\",\"FwlM0pe/gnyvkpICBbcZwYdBCQuPd3gRhIp+nq1neMQ=\",\"Dbj0GcIfkkYfwrMhlGV5g0jfkNQXgELIG6fUtNVZ4rg=\",\"JDRDYT9k/6QXQn7Vkz/PvGaAnbYLnKFySiJwnOzu7OI=\",\"Iq9J+/1dfp/NJWwlwH092Oy7rm3uzQOqBLsZH62nVBE=\",\"FPvTf6itbk4MeKINk8cjDEZ395e0MnMj9/fAl8GUIOA=\",\"Fakpi7uIJTTUssn7xuTvQYlCDE6z8+HqIvqn4Yta5iU=\",\"L33nXyPdqqUiEyPrzrLyrIPu+S6FTnVDTC8dkFYiMrw=\",\"A2pEMqhoKDt4oxXoTErlrsohby/56bLmI1hPdHnNXCc=\",\"IYDXeGqM+BDidyGKsUoR5eOfPJYvEehgrhxWgseX3lw=\",\"CiaO+HBzbuvQy1W+ZA1z7jd4mQSEzAPOU1cjd+7/+OQ=\",\"Hu/v4RwL5GZPKZkDHxWZSCnpgujJDgkGnfm64WgJpbI=\",\"J+h/AzvR4KicpZboy3f+OkuPuT2aESmUZXGjw88kTFI=\",\"AUmKPmWZ/iQzIfV9bFQ1iJl5xPnSo+GE0hRRgJF47jk=\",\"J8CkH0y5/mfp3U184zcH901da8wjW+8Qjeobvr3lB6o=\",\"H3UjCQixQbRmNyOLEg/HcPT0roJdUATBanyR/h2uKA8=\",\"JfmakZjpIxZ7uoMbFf/9LXuXs6CJgI1OsfCghb7iFlY=\",\"EBvDGOnqWSDQ9qzcK7UmWT09VuyO0UxnYil0IoupAMY=\",\"GhdWBwZ9UXOXwTNOywGXVOvAyFKjzwkewczEMgeoPHY=\",\"DwLw5tJfnqPeskXz6MOB7msus4C6SvXBxNiXcBVd83s=\",\"FR11esyCN68I2KZncgPslpJWXeRWrnif81izFjs5O8k=\",\"JWzZV3zqFDBJ4KH+AGjdIAhJgO5bdXiQp50To6Yk+tQ=\",\"BROrr/YZXqSIM7E9pQ4IhEdmgsP73RlUl7iuhuGTfGE=\",\"HZVw3HCiBfNvYQJR7m4ugDkkboTkrESDhtGdusTkplU=\",\"GPGlGUdVuMXV1/G/iqpvVu/7AS3XhM9eBE7sULKfydQ=\",\"JmtTthXvc6yGZRLAkeSk8vpLsK+WbvQg2IFjI47rvKg=\",\"LWMjTJIHQ4qkK43idkTAImgwTf64yJoaP0/W6DRK4Pc=\",\"KrMPvlHuSbx7Ot3iGabwtfu5diBe+N9+ACHa7m9VxpM=\",\"Gu5tSz6+k2bcuczkiWnU3x3EKrzVKLJwBo2SB/pqRck=\",\"GJGuq3HjS4laeUUuWGSuHRH1dkbGC7NKohHRI/YJUhk=\",\"JEkrX5XAsIdkN+lLQQHGkRjhayZXdxvTp8qrAcgYqks=\",\"AXUhYbM1D34bOyyGY6DWQpZGKCE9ZsEKsv3fcbz95o8=\",\"CrZ2k1ci4vZ8+4STjmFMbC9EW40UjeVDaM+4+QoA86c=\",\"Cw9yRyuaL19FvHMBF+2a5Wg/wubiJ+PU/g2h96o0gYk=\",\"FqpvknOs1WMcIB0aUvxPisryshUsOubfE6eKUT7c02k=\",\"L2C5h+Y2FOsTwyTB2HFusL9i2bFV0jKBpFwI1SQ1zWA=\",\"GNJK4B3ekv12Brt4hFVOnfHLibBC9Qj9nbdrfMGyEhI=\",\"BPw792/jHi+Nd2NzEw33nRjDGF/fFZOWBxXUckz/pYY=\",\"DRj2tT/GlUbP3WcLQXMr323ungayEmDGtdJicEaNv4I=\",\"ukIxqRjxOs7BH7r6F8UiPx9wtM2wRQNvpdcEW9EOJA==\",\"B7RYsuAM18YQCYUwFmPn7DPIJtoGNf8evt0N2GEgtMg=\",\"HDXC2W25D09gWOdvFaDIKGu6JOLtQLFs7Dnp/XuqV5k=\",\"HRK+o9jDKl12ZWjwPdHs2wpPWJq775aUXg3eaI4pIFA=\",\"DZU+IAIgAycFJfmnNSbpiJyZW7Yv3qlDE9tAWmEwAoY=\",\"KfBT7DiHldeGpAvsTIdQR/Bv8LYQtAQKdg4zUG0mceE=\",\"BBiOM3NfRrFKSVKphGO8EuJk1fRG4MP2S5Z5yqrkT8I=\",\"FJ7CiEbU9DioTx0FKUMbuemWpAi36X6zvxc1zb6W9o8=\",\"DeIPrgr1GIvKJLX2NjC61Hrq/ZjmUZItFIzOHF/d3ug=\",\"EtZQ6PeQsSU+qUNQ5yKtL32DbCNLhmDt9En7pphMZwk=\",\"IqtTqjnzStMOqWcXunRGqv2tvBqKvijXg0DfxLq7j2w=\",\"JlA+jUhJvfVFDavqeQe8PeDeEJhx3XdpBKEp25FJFmw=\",\"HV56Dill3/oA9UVPUAPFyOw0sj2Jfn/EyAZANbDTOFA=\",\"DuPY2qCYvuAS2Wt+xIRIxryaau+lRGFbnLPHu9BxBMs=\",\"G/KCCCoEl5lV0wdUzU2QVvqe96cXVwPZHcIytfmOrQA=\",\"B64TRKv8bCzj6VG8MWvuSZcWRfFraTczoCchc+6a1GE=\",\"IX46JHgnw3bsIbEx1RHX29yYo2t6R9l6XI6Jdi7oBIg=\",\"IV/+WEsOsGegA9Q44vvii6vh5Q78KJQRdQm2Fq3cMO4=\",\"HncPyOy/3IaS3O3Fl8TKD77Bm4TjPaV0EqktHTzj7CA=\",\"L2JDzakZv0yfHjqKbWagV0KRT8GTOLPA5Q6Cj2n/bR8=\",\"JG793DEX7NOVldAEb0SrMDoZXQ6cyJNF08A/+HoRtpM=\",\"U+jZs+pbjtT+AG8TnLxOAWixyJqRjfvmArxizsat8Q==\",\"G4lKL0XLlmR9kQ9qcQ04t+tPJhvu//E1rsBMGr5ZQns=\",\"CusVVOJmaT2CEmUkeRB9X9wHer+IZR9aQlU9VOwkLMA=\",\"Fqc19vcgnSTmiIaA0XgcfwS6fXG9S30OEfr52o2coo4=\",\"BIe4t/q1/I/XwTtN8FQ80mDkvLthWxk3T/VJ3PBz1Bs=\",\"HnW50sIAYwcSS+omsHckk8+11RIGjDrWd/31HJI4h5M=\",\"BRIOPQ4oADwlO0bV/3fScq5G+h4jnRxslh3LAto7OI8=\",\"DaX+tTRXZJK4Iuh2MkARmsCQCgU7Fxgj+JD1/VXXg3I=\",\"LiEbOaAjAxoirMGh9fO7bYwmZqY3nZ0sQMyPeLe9mr4=\"],[\"GbhJ9pRQsGhI2h05vV5KQwK7hnRO3CYjiwh44mntI+U=\",\"Jl3f4SfdUb1yOTR7dY8KEyDrLMdFCswdrUf4DI3PNNY=\",\"GZdQ7EcvGAng9mpUXh5RYkEIrIRQFcKqPfw2urSX2Ko=\",\"FX/z/mWscggRDwal90MCsU10PqJQZ/D/0DL3h8fxzfg=\",\"Gw9o8HJqBRSk0Fs3e1iqvEWUWELnAYN4Skq1oyM3uPg=\",\"EijSVleHFAQwVp1pNC03TYVQnepCRdtHn97xpCXidSY=\",\"F6h4Ts3N1uVQh1w2qJYQ97jB0kXVL1P/lu65EoNYXgs=\",\"CYcKi0UHIqKy1e566GWq8KoArc/DFSCjLgzqolCq668=\",\"Hh1qqpAldOPkBVxrbwOkmyu9t4R/lA68eMCm0/k3KmQ=\",\"KBbE+msIVIfh7sHu/ZLun+9A8wGQrGEAkQPQMmZVDbI=\",\"FzWf2Ivja6hnAA6D92/7RmYGNO+60V3PTU1QLUJ/9Rw=\",\"DjAEy0S6RVo/Fv770MAmQEy6wgPA8ja6rYeWELhmECI=\",\"ClXydq8c6268bGgg8zSybxHKSvmMgzvBtJYZPWsEp8o=\",\"Ae5LBFitzUxIYaJ63BQEpZgdMgtrjiDlHTG5uHfoNG0=\",\"FDFeJ1Pn+5T3AZn4ZF14+HwZSkBU5phys4QdobT0gvE=\",\"K3tj7P/VXZXGYPQ1rZ4uJfJmy1fhfr0baw116IpqVtY=\",\"u1b6Pp/UirRtTnKVu+EgS2UuvpWCIYYPVuONuA2DwA==\",\"BQZTv13Vnt1tFfpgcfUAUFchizOo+SpYucJlYIEkn4I=\",\"LFdUI+JLUiZVxal2xl0GkoeQDI1YJVFAmMWxPIbx/Nw=\",\"L/OizN7pHgmjL3QjK3BM3Zn3LB94VXos5WiwfiGAcdc=\",\"EURzSQGoHBVDuLxvydNl9QRp64mUlJHTaT2+nGI42Qw=\",\"Hv+alU4kvNSvILardNieHNOLxpSp516m2iF6mNuAzSI=\",\"FHB950lsVjj5f+m9fUhcIOrWv9v8BZl5Hkn60DAc1t8=\",\"E9DeNBuoGfkP4+8ffOClTYU4rN2bPvhAqR1I7lNgQrg=\",\"JlIKsdIAVdre1xLVmwcIhFjBivvQ2liu6fFRqQM3K6E=\",\"Boy0gnrEhfxudTejwKBtCKTCeQ9cZdmGbXUpaZn3SV8=\",\"B9a6qi5YfCGwPfoOtxE24pgss4m0OMi8KCdI0OZ06J4=\",\"FbktNtsCyxa4Me6rLm7XXRJv+8J0zDNiNwhRUm3hPSc=\",\"J3uc6JEz3nt5GK1fz6tzI+9bnBkWtYjNfloNgUy8M5U=\",\"KuhHtms8XXO3C3MwQKqGxR9zcJLWXDSS1SkAD6GAKyQ=\",\"L6Porh/vl0ze1qum3CXPVn4W4K8p5nVwZkPyG/jv1lE=\",\"Cx1LlQjOxNGapT9O/kbFeVLb02j8vNRUqLEIe8GKIIg=\",\"AtOBAU0BV4uIizJzJwur3Dk6w5LnlYvgR4lH+vpWm7A=\",\"LnmoJ8hUBiQlI6lEMQBwIbyGWkXKvLpDaMQdRIb+/sg=\",\"AgfJm31ZSlxh1+YMwjZcTAyATNQ0CYr2JE8KAMJZs0c=\",\"EZwSQIbqWOu4PxTyYsaTQkNg6X5vtCroWWutvp7bLco=\",\"EE/zjMoPABc8zQtovdugn8VD8HT3U72OQT+DNPiHolE=\",\"L1tTd70Vb4mEWBHrJiQ2Y43AOLjLEOFHqH30wOI4QlM=\",\"D3Do4C0dI5aJMKjg22mxwgIE8+O0zs0QH4FHbQteqZY=\",\"GsRlOlEHGuci+QoD8AbYV1gU23grfxn2B9rk1WrVhrM=\",\"ErEmAOO/2Oe9+uXvnE84BfpB50rKv33oF4IwF6iyPbk=\",\"EbnRmQiRnay34PjQuncobUF1KaGKHYnEBe0cMCif3Sg=\",\"LDUNJF9PdYZHRPiNv/j+M1sA9PtoiJXBNjp0hKzoINM=\",\"Fqf3b9KyFH2275TCLHi/94LeF+9z5S2n34JgP0IrRh8=\",\"HRjYAkvh6W7CViavBqE59gk1RapQQDPax+KF0cw9s94=\",\"DIyrGtWZgHKUW5uIIo9TwpVGaBn7lNj2qe1Em+j3wYw=\",\"GmjRM9cDzUBsowBBkTzjQjxzsTOEGHqxUwEJt1atT3o=\",\"JKWLnobOgj/0xFNClBQX/yPQPID83vlJjKDYYIVeAak=\",\"DmMVyT+7idOAIRSLbDUyD7eTxBxqQ4bWrtas/i+VLFc=\",\"LDgG2ZppzmMpnodvXyGMcpXYciR5XXVo1VhpbjTGkvg=\",\"BZyJOncelHdNSaNWSUVo3TdoVquJcF3/JduCc4YPoE4=\",\"EWbZgZxPquiYIkPQ3rH4l3An1cxWv1LOJgvsXifosPU=\",\"EoBvqz/LCfwreUBsPCA8SWX8clkRKvIQQxLhU3Mn4KM=\",\"FyAV4OM3NgWPYKoz6C091z3D6tifmN7Q26NdzB2L2iw=\",\"B3uhiADYUtCjT3CujP1ooIApa/nUehtA3n5v1jkqDTA=\",\"IJTs12i/qPDfDXjQ2Ubhr/Si044CnkFHnW48D+efqLk=\",\"DM69MCr+hMIP93TTwfZQynzQvKCLqh4mHanHRBqCP4k=\",\"W5MDBTu0DHNnH11VtAUuDVVJhx8bUoPwFIWmtWjNBQ==\",\"JScokISrSSJ1tM1n04MRorgW6qaO5r2yOJ7u/WukxyE=\",\"IiL5c4KQ2NXyo+rNrZXxLNTnQX7SZhsBL2RIx1A4d/I=\",\"ImyCCPJtaea34C/iZVfmvRYPy+J+50H9HlgRYcF4k1Q=\",\"IWsgjAJh88kfr2CeFfep1IU+QNkgRJayRBEV1zwpQcU=\",\"Dg1mDgRqJZ87rWgpcptq4xUfvNdd4zsSL+E0yj1aTdY=\",\"JA8DnSAmsyZvObpcTsSKxqzoiq2u+ZFJjNUtqqD/u6g=\",\"KMjMz3tAosPP0u7g7E0WCodqTf60CP/jM+kvpeHuTXk=\",\"DX+BtLRtTyR8QkPwRahSzJV9Kykj0o6y+ne1qYRO/Wk=\",\"K+Qy+HssUJSoLHiEV2Ud2M2wIArDtChgy/VEdZlrdy8=\",\"E+o58tY9mtrhh68U3Qe1M9RaY0NeDqTl5VXTXnDUAWs=\",\"KeOxr+GXO+nNHPSwRzJav6plzyuY/zrtR4cEYZd+ySE=\",\"CNt9aE5rhBtelpJJj5Wh+VChzx62OLtOSPO8GjxXEZc=\",\"D08QQal2qgUZbaHAQhJOMnfqGij7bu6rS+wSQ70xYYs=\",\"BanQUm1vGMhrJV8A6G7DTn+KJsJRtRwh/kwSvcTA/x0=\",\"KEsDBN1s5mm89lDFq4XInUQQ1HKqbrAN8bjRflLy8/8=\",\"I2PpsBoBY1mJYv+GkHAC+VkC5yUEkpTKerEMx6o/Bro=\",\"AsLbEmR8TARh3TKQp1xfL9jX8RWz4EDLBd1+OtJg2EI=\",\"LjxC9nFDH5Vg89CGOsRFBSQi1bmT6f2muBSGsU/+OnQ=\",\"HThEHyKMDOIv8oglYPXX7jtMDKoQE3HLd4L/2Xr1//E=\",\"JoFBsOScWeqx1XPq1OLh83k2TdEz8s7FdMJa3ix5Qoc=\",\"IgnLLhh98VIoENPyiGjabPUq+aZdvXuAYEn0ctlmN0o=\",\"Cl6yUQ5vgE0YMNeXSsFnfQggNOU4i/rukaMZ7KfB/6s=\",\"HLKGTDiABzb4862YZp0616nV7lITjpa4pwFeEInjauA=\",\"KvjtBb/I+K2lR+6bxsfGxejBXGwNOAo/mqJ3JzMhtU4=\",\"D4XRWTs1vgP3myIohVVaJSvx8KORHXhBMsSbGpasDzw=\",\"KQlRkuxT4LhZ66RWKV2VvEVn01Gm2tORuLiXB4VQCMU=\",\"GpLv3h9fpWrrArTEuPUayAgx+JjHhDQHET+7YBEXeFQ=\",\"KgXo3u6hXkN3wICqcP1qhtxz8/36a1X1YQYUwYSwsC4=\",\"EhGfOwGcw/xG7MgIk+hvUQsd1AMLLOKMna3NHnGtSJE=\",\"BCtv/mh7wjor9rczFyhqVDxg7RIvwiWq50LDocLdOh0=\"],[\"DrVE/uKBXdp/U+KcysmO19iJu069R8OGTzwr2BptqJE=\",\"BVTXNjFbhmLwL9un3XN/vKGXrrEupkcTunM/KEdRKMs=\",\"L4O53yWbK2i810gFYwfDd1SQffDA+wA19Qh8WNXowtQ=\",\"LKcOLo1/OaEkR6yDBSRRtGHxX4tBp17zGRUgj1q6loM=\",\"HLX5MZvmpF6RsE1yIicclJlBlvEu0ixdTscZy4Ps/qk=\",\"CpwLGRao5B02DQLm4uXRuYw0387HaUKchRhn5G4Sb6M=\",\"Hda6NzHknSHo026dTR7a0kXr+b3Z67YKJS5IBKY5D2o=\",\"JK4qZ8PVIcEaEbcRKrve4wZHEHuAiGapgIN9DX2k4+A=\",\"DSDJMQtcFNnvEoZq9aRerjypvhbSAElwZsiy7pZ4HXA=\",\"DgR8mCH+lNVdQA12OmbExhaZk6vtVDxyhLSjVDABlEU=\",\"KUdKt5mx4TlI7/QdLOeb+tM10JEQFXB2mIrCB+EMgd0=\",\"A4mfE50NxLKBvjt0q0xweJt/QeespH6iciog15r7ypM=\",\"GGZiT3YauN16kcXzevXkdjmVHVrLaxu/O5bKJz9xAp0=\",\"E8EZ82cY99XwmthUEyWhOs9rNNttnuKvfqBgYSQPMAk=\",\"DkoQCBWAd0ArEfE8CIkLc5ZDzI6T+kRIe1oVdd2Gf9c=\",\"DvUF/USsEKJRtnDa/hTKvZranjACIQrJw4dvN95Oetg=\",\"HTHk4qWXi3SRxD02dHClpdFEW2uBKaW5pv0jhAVyDeU=\",\"Cpea1UKNSBy2JNnVBFJKlpTKXLRCG10dxq8sAw++rDk=\",\"D3/M0uyLxu2c42gvOKopHe6pNz9JlXeL92Kt421qsqA=\",\"JpG5JN+hIwBffAeNm/hwbe/pnCupm9buU7FT6f7Hu4A=\",\"Agd99lELSGDla5E77zqA28RksORnit1g3qepUXRjIgs=\",\"Ke4J2K+dJMpJNQzi4KpH0Ao9whuvv6wcm6YcWOKZPow=\",\"CLKSxmHUJ1BrmgGRZiTzzeMyqs7Z8aSUpzPOpvJb+q0=\",\"JYNpnOU2p1eyLkcT7fuwUAkshKvHLJCthzk6Hamkz5A=\",\"Hj8bZgIj1lrYiZlHU3T24l/UFI64EQoLEs/6GWV7C2Y=\",\"IPPsuzfDSux5ExRVRhJZ5ZsiLw7o4C8xlM9iqa1MNEg=\",\"DfT1CI5ERPv4fVU7pi29qVaW2LnPYhCxyFUTsXdvvGQ=\",\"ArNI7/1MnO8Aoc9N1n3WZLL/42GoB8WJolLGO8v8aDM=\",\"G6HlIvyxU2ds2PIOgiVvAyfAAPqWsbRi/IS1VvJqhsc=\",\"ApTETfjmjJYUTpZMN7vFdmdk7TVQr/gNvp0/p0QZ/lA=\",\"AxNxbuxtzYpgLKBAcASY3ATHff4hlHU8WbyBjB0mNqE=\",\"KH3sdGltZj4jWfaCJd6VU4TZYLuvuQlnQppELhnj7GE=\",\"JeQvcsa+CUIxG6CXzzZWg9tJYsggT+ySE/D49ywZRr4=\",\"EraIG5ZlT+F2jCQqzVOZsIY58IGpSJb16m2nC2tHXJE=\",\"DfwrVFRv0yZ9e+VccWyyQ+8YEY7ZSYyCcESb2UGK/bU=\",\"J91V/g1cD/Vq1IkPoCnCfF820Ezcc4mauZsocrKO7fA=\",\"DGCWJxGu8W56LOWfWHRD7ItB743PzLOBiK3L3dMvFz8=\",\"LtwJ/rJnxrWG5i//4yv18WwotYWYa4ERZoS36LQNQtI=\",\"Cvg4aFnbJS/ylaGUZtjRAGIskFAhN6oc1MS8yWVtEeI=\",\"Eh8hg5L3PUwWq+OCECpFnmwICzyk7aUaI+ZRoTpoBVA=\",\"HqOCc/XVnmUGH4x3XFcf/HXvZ9KUBbXgKRPLMBnVb44=\",\"Cb0jSQBWmbzArDW2J+L48Iv8OwvzCxRvN3QqwVVhh/4=\",\"CRxQWx6SRIwRrqIqqsTUT2p/ITL4npG39V+UBGlsFDM=\",\"CzFvHClonU9JD3/N1eny0lbUQ7oUzaS7eZsFc6kxqZ8=\",\"IEklGRmo8/Q5gYi4H5nS4tDj9TWc+lW986p1/a3zZ+c=\",\"H+f562eIEBkIgUFo4+TPeomaEFv55YSvAGQYikqsVb0=\",\"FY5lebA4gVOwrNYw6pTej22WbVKcLQG56bHGfB7B1XA=\",\"GZT4LycVOvud4qo/S+BcSyxIfjk9ztyiVmqmt/vDaWs=\",\"G2JQVT6GKaWopAtWhDLOfb2DyHYD7szI2tVyzOvvbh0=\",\"AgKWlAp9Ht7Srnn9ePoqwRq7IhC/JFQv6r7nHw0NfJ4=\",\"JVOUP54P/OnCl80xwp8fpfAYg8yeUE/e16kFAywXDIk=\",\"HFbrNiiWwvAK0Y+urwTVd/X+tNtOB3llw48ur1974Iw=\",\"DtiFcgXgaABV3n6CK299YqwPdf72faH/e3c1IIiFz5A=\",\"ARj5EYWgk1X52MP1VjZ6K+vnnn2VKKjXKlkmgWcarHU=\",\"KnHmpnq9slp4AQ/m/gog0dhOIcunWtVZN9wYNME68MU=\",\"AjJ9vAWZfOhXVoDkuJKdTp7SX7kgQnfWAwYZhtvuV+A=\",\"DgUjXgHyHMPylxw4LRjBTkF4Wl7I1EfNk9EygXkubW4=\",\"CYr6Lqf/Blsq38SrAPOwRJbB5JDqsmTSNwsQflpJIE4=\",\"J73be/BuqmNBmtrkQgndJaTjXty4Y7AJvTTMxJBdIEs=\",\"JwRAa8gG9MyxkIXLnTdxsSq1znqr8GAengaivJiDet4=\",\"IcdcVGZLn+yGdWqpAnJhl1JE9Cz5HJzAszwqYrdWo+8=\",\"K+hMHYTBYDjqX5MykGmdqqqBZMXqOaAry93GbPaf6Ow=\",\"LJcOQdSGSc8BPGdsjGiKwWVWNyDR1fMmKKxbI5SIqW4=\",\"DhrSZgoulY2qHyZUs6N/7mBUbKAycVBzMHB0LtyAZDU=\",\"IGDuf993X8fjiaVTdjdMnjXVyHY9WX9CYwTiNvV3uCk=\",\"HgEWgYyEPthvCdruClga8Q1S3ura13ZW5zbqwI5vDxc=\",\"ConBSY7yWjg9iGu1hCTmlArDmePlV+nelRppfFSnV2w=\",\"AwN0PW822SXhCXSDNQ9b0sspfU7JI5IJ9jxRa4SaZ+Y=\",\"CM9ERG2WhDAjLfF11GK5ybDi4sN+hAZ2TLlsfDRGAY0=\",\"JBmBHLrrP1UbCpIy7uXVPjdp+89SOVMwdDdfGwB3fxY=\",\"QjfGImJts3a3dISdu+h2gJCC8bE/WCT0xYNp8n/ntg==\",\"HltJDHLutgfhFKXLh6hJSxeJN83uNLno6Uc0LBRFRVg=\",\"BCZTM+WeGl/3SSA8tKXRQVpyhixhOAscJC0PMsoVuXo=\",\"GJ3q90JYRRrE2mglMr5D0kpcaDKTwf90ht4m012YLoY=\",\"BOxRaw/UL6U6NJBc/e2q0CGzY5nQPYJjrgjEavPsp28=\",\"LOHIoAhFqCs6obZkL8mIV4V2zvhhllJebVlcdwGtcA0=\",\"JHgW/Q00+dOzlpF0eGBclKHAUqbtZjvcNE567paGtrQ=\",\"xnbb5sSU1WCcRE3mIrz2DPVVCRpQf86GR3AZ2uqYfQ==\",\"HLOVreUw/CQHqnshSNLfruMPTd8lj8FJzOPFzegKhdU=\",\"GQ4UlOPP2to7nmXY/jwex2lUDaAj+ewuViWfalaJCw4=\",\"GPKUGyM1E4M2w1GnkjQyIqhF7goupaO5FgwdbZsin+I=\",\"FOojzosjEuB99X4K7OHaXSwOAfdX5qXIarXkA2iFRNw=\",\"KBitEAX077XVVDYaKfheoQlA1ucfOOg2m+/zVjpmC74=\",\"I846mlIpFaKBeTl3tJBUw31l+QuEHgypCBe6tJ1520o=\",\"BsLtK+h2MJqbO0Ts43scQjgpJ90EJJZYo9QePzjV4CI=\",\"GLZ0D3LXfrz2QrlFyi7WyKmFOjdJ1/q2BR5Mo29E/EI=\",\"H+rLnrKmh4BhN00Gmp2uMoNp7mPnWhuZzbBqSLDZl2o=\",\"GkTuRWWpZ2RzAMde0rJUPY1F1Ud/1gajVtEHO9E4MdI=\",\"BB87O1sQUMFr89Yth9XSc7Bn2khGeRAyMe1loY2p/kg=\",\"H9lYzE/gopC9D7+4uKUTrLWJjWO8DX5YW30IHEnrVlk=\",\"F12roHxe2/hPCch6jDTdczJZQ6SPwSy4OdykdRJWHS4=\",\"Cc8KTm4x3CTf1aWieneDPkd9Wy2Sz/X8XMrZUoxDung=\",\"EtSUZb1BIMv3jlo0FNRMZTC8ljvXAcVNTGQYps6+gLE=\",\"EBsvK2dYBNOyayvR4HxzZa8L/C7fAQkW7vs54oIV1Eo=\",\"EU/GX6ugmll0ngtfERkweDUpoGOEViFiMst+WjOXNqo=\",\"Hf+ZtSeZr8gCwrv5tn3QRNPLUQF9xPiDWN3Wc2bTqfU=\",\"KQ9ElqUt1N2lntzNcyUDi73AVUrTqaC+eTHJEGKmcCc=\",\"CR6HBGY8UWw7lnIdIDPZhQifuZLcpIyN3Ll9fRXH4Yg=\",\"Lc4iWZ3gQZagFp/CEdD5yGkmQ6oJco6t9tULtTTA4yM=\",\"Kaf/ByDhcMDmfv3nJ5Uyj+zvZtqtpfDiyoWKjGE1/Ug=\"],[\"FEhhRZjgD5jnrn3qRfvYO9loZT74OQzeLoa3Bq1AxlE=\",\"CreykTiOXJ5DwNwfWR+4Ps22UCLhtwr0O4p7QMHf98M=\",\"K3y7IXiW9SyajAiOZUryHoTN51SjzvWxXE1UZmEtat8=\",\"K8aw3b4dcBtlcEKL3Byhvw2ln/O7u5X8K8ccDG5nplw=\",\"EjpVoxmAOE89ILLOy8RO1gw4wR99IOknHvq5qQXu/Tw=\",\"A3UBzIydyBkwmnafTfCY5YiwGFi8jrfieeKIO+n7jFM=\",\"Fd4jFjeo6jRzwkmeG+4yDBfGoKT0ipsorRRE1TUd2zY=\",\"HJsdo2mJIG3pFzsN37U5vfB/id8FXvwcxIkALaP0tTQ=\",\"Hyjsn9yzhUyzJ+Pi/jlYVQw3/ReRmKQc8goaTIEGVMs=\",\"KgQY4S3SbnlsCRvB+x5Q+CkCY7PID2gDbmWTwtsvg8Y=\",\"Dfa8mQ3WiPq8H4pfj6Aqaob3o6nuRS9WhNEj6sFQeJA=\",\"JM2ZqzAe504jguI4vplB2YdvMg6ZQEgWR/y/vKfraow=\",\"EDbuxrOrZZpQwirjs1clLmRkHOCC5cCEv2Gk5hGYrIU=\",\"IezhAwv1rVdZ81upavk22Cpkq+T5uy9QwopIggkoYRg=\",\"Ll2QWeYjA9jRf7UJpgr9xNjuHZE3+P/w0MbpE1qvZss=\",\"JZHYjBFYC3XE7fRNumujHGlvZ4niLT+mO7ruccaYaFc=\",\"HmRzRcEIAFp+L4cPARQiI7siq0SgPHGYhSqvbXZcO90=\",\"EH4nnXEOZTWO9E+WbllNK6BOPhXjfKWqURetxxtEHwk=\",\"Fzspgpit9lmz9pWgL1Fhfsyn4iH2eDdUBfIEBeN3pEw=\",\"EiigzRBZRocKzHWGlp5+Oz6NT19G1FCxRpggKtueoc4=\",\"B3jLRdmMDsaISb8gPcexUYQJKMydf0BnC/fUizxmHWg=\",\"Byp/8ScG+js0ADCP6zPvPd6uuaVni9Shff8Jb6menmQ=\",\"KwmXsBFlwodFA9wS/nfWq1ikTFg7k5w10IBbtVXNCfM=\",\"CAgFEpJZr1Di5fLY773jWBMtocGfy32vSJhUkcnSh7U=\",\"FD5OHyr03vGxkDig1qyWBuM/QHBHmfCJC0q6Cy1suSM=\",\"HBa0R98KMCbVuRI6uvAtaQdsWRUwUmYN8je1IhSF2j0=\",\"IhJ2NWShfFuBZwPl5Sp9sMW/tmj+LkJMslE2FCaDC5I=\",\"AW3TCkjZb3bpN49lvDQXgel8+5SvWlcJG/NBNCwNem4=\",\"DvrkpWlRRlf2fhnKEcAeJCbvD6or7Ujv4HEdM46juGs=\",\"KB3NUy3EUL5VlTbiUuAVnuIdW5H7+XJfSlfdhw2A53k=\",\"D+TRGos/JNxVm0o3EY8Vq4Pa1adN+u1BY36ZSoEzP5U=\",\"GFeTjgJ5CBkygnipEyIjRGQPIAxRQQRWCJdov86lYaU=\",\"IAfQQ938VP2Zn29LY9TKZsXxJpUTiM3bHc3jKUQVVnU=\",\"I95muSfVdnksaaLG598g0/x0VhT1ICeAvCtML7J+njk=\",\"K9/L7+NT+i/+edLv1aUcmBNFot5A71x2S/kNqG/tz+M=\",\"Js/8DlmEkzMT5PBt6tB5Q4gNpmkp063td+D6f5lCRP4=\",\"IcUyrQ1QZ0vjlH/y1Ot0Tq26ooEvwPwlpBy4TA/T77g=\",\"JG7PLuRTGGLMWi14Qv48eAuGjvRF9wyaHiv/RhScxG0=\",\"A5ezmAo876D9xzOcT5UAs2Q8VKPuejlgAwR0Gi53LpA=\",\"FESQlXZ3Y2qae/ErGsma+VXqcJmbL5ciEVUqx1Ysau8=\",\"SpZml3eTjNlkP/JX1fVsX08eta3qSaZ4zsPqFwZ/HQ==\",\"JCOlCHFCmoxIuhPk35OOYoDXFbOa9DRJ/wYDDjRuPis=\",\"HKUGQOj0LAPCiAFOjvErgBTDxApi/FhW7ptjMUbsYCo=\",\"CoM1wvp2LQm9oet+IrEcwRffeIwNAj1tiUdydoGnqes=\",\"HFevemeW7Te9lkwzzRvJyJdHuiHfYQAgn8Pfn3B/HNo=\",\"CPCtWmwB8L3n0ajn0mhIF59e4x1tWbuOLHAeN6TPuyI=\",\"BQx4IcblProYWmJ4/gSlwfLyhkG9yEPJ+rKsiX6KJGY=\",\"C8XURcXfUvubS51pVLx1dj1TsMIImDLr3KlgVnn2jQ4=\",\"EKayoHxHLCoy6dwfBQH72lyfBbhh0ceKXP81lBl7c9Y=\",\"GiREizRCR5x6yBkb+vxn2cdeQCALMY98ctDC2Qiz3bM=\",\"BeIwx7kdwGeALGyf6tUIl8AzeTieKn3vNw70wo5Wcb4=\",\"HurWhdnzV39+Nk2kf3TY7iz2zuMWYAVWFdjylKMClKw=\",\"BKIuqhB5G1mxvYrZYm33QnVTXr6jAfj5EsUh7ynFBLE=\",\"Bjd7YGFbe5qfDrInZ4bQKMyoL7zn2xzCf1C4SGyIBto=\",\"x2SV2keLvf1iP8rC87CNZBxMZUc4+tZ7npDqBxVxTw==\",\"JQrWuU4b0GgXz9JCFCOpXhi6hysnbBmeFqj8ZQxanWE=\",\"Gy4OZhRvtbEiHIeChqCYPpA+apU5D1fSmKUNzm9Sq0c=\",\"GMqJCq6u+Xx8F8qyw1GPzPEYC4+9E0+8vOOPeG8sDgM=\",\"G1w9uU2eDNRVccG4gIQYbrWJMLzs6yyPd1sS83lhvqA=\",\"BilMcmhqabYGk0mnOoFULLFqatcTN7fH/1pd/gaiYK4=\",\"LBiiWowsrhebGmQ+ERWej1ydpEiq7jpE3ki+Psp7slM=\",\"D8RaK5vW9BkBuqevrUDMKNRHnDBNEBBnw1Z/5EkzLrA=\",\"A3i8O1oyz1ygiCJ8W28KVm4LdXM8cEgEYZ5ql5vB028=\",\"AlU3U0a+q9CSv7/XJ4tDe908GL2VHX9CIM3FATYR/Z8=\",\"BSSFOiqXF69kUA/sg2wTgH5ZeL4yiGBHvTaDpaZbaFk=\",\"GzmYVTFU/CbOiPBIgWDCROHexki5MMEy0HfLk5l69eo=\",\"EgdLTYPpL44KuSQprrUnAUAzipfujlx08rWZ2Vd/Jf8=\",\"GkCx4BoJbqfrznTAJ1NrxYd4tF3O+3zAViVt0HMmpmI=\",\"D1IovAlLnuwZZ9d4orfWtN5Y7ejg+XQWXTerbyM2vuQ=\",\"JzFLlh0vlpcJd6M/L6xoI8BDIH5LakigVTfqeNd5wW8=\",\"Knj1vfmK+h2m3UWrNguHdwPh+fDnl/7MpFMn7kq0ZZU=\",\"LP3lnKLwGif85VTCZbwj/aMt3Z3/PdCi8d/d0HZMILQ=\",\"AZJafRys7lYAEPhD71/J57ApRmfYcdSeNSOoj+CvVqo=\",\"GZ/0u6+U7jh1YPu+w5XbGvnu2fUN1g3Dyiy5LpJFImM=\",\"Jvf5HZWc2ukZB7KPsvFJ28J18T1Vd22lGoggD458rwk=\",\"JM3dZBt8o7xsTSV4MqWuXpISbDvS6fBeAScxEU1i0MI=\",\"GFR+31C9d7JlPCpTKEyZnc5dxp3WE4BNEKDulrylVzg=\",\"KycXjspLeYunKy5rVmvf7MsqHmDYUE5MjskZLyuuuw==\",\"MCDriK56z9Y0Jwnz075FzywUa83JBu5XlSc65LbnAEo=\",\"VLgabTsfACIwxM1iP3ew+27so6/vr+aUVE7u7BoXDw==\",\"BNHgPJNRC6b7Sb2atRBj07FeSOLtRJvaJ2XQMGX2z/w=\",\"LKaijmuYuMgiCrwJGi+v6G8nHu8dk4ZLeyu1oWDdjZk=\",\"KlhmAGeGUfFEvx5U3j1vj9UZ2q9KStmh8yIz6J+dZzM=\",\"CpSp+4VKPFNBHXNs5Y3IIZayzRMUSiQKb+FzUIoiHZE=\",\"LTNsZHy7VHjjpy8g9B0TXTX5b73ZsrKITmsj7CAeR/0=\",\"A9vj+JlI+fRxXEkaSD379vb53PtYU8XTztcH8AUKIYo=\",\"IkZuwVM4EUw7MWstmGyMDT0UgA2CJ1pC9Haw/9+UNbQ=\",\"HC1sWxgvOU6NNpmekanu532nH1SQlh+3g6T45vhC5oc=\",\"BPxWUVz4MkfjcOSICdO9JFq7UmONhrSKHLdDFn2yKU0=\",\"Gq68kGF+WqS0+QNvzFCS2n7c6cEQ4+rwDX/Tmxeq7Sc=\",\"AV99rZKMs05oWKLesvnZLEUqU1oJbF1xP3MZwMV35BM=\",\"BgAoMHIhMj9G61Z3PFMg/aotcSOHW0IBduNLPuB56XI=\",\"FXsojOybU1bmA3O/pD5nUR4qfmJJNlDI842Bn8NOWdA=\",\"CI2+iPP+j9y+vDTOPwDwf9pBHXgOz/HaV2YK6/0S6/w=\",\"CfE8iSE8gtW/04+Pi8/kb99APSjm00nsAXbjffnJEv4=\",\"Bb/61TcirGxCI2EkwyAGaav/ptySP75RQcjkFXzTF6M=\",\"KQp4KaTO8uJdL28oQhRjNEv95SID1MynNlc1N68zQh4=\",\"CecgnaxxUWl74X0+OsUrDuZGeSm4eNgUrkzCc0s5NI8=\",\"B2KfW3zT3VNt9qhmoHH7XfVjUvr9Dwl3Ec0WZ+o0QDk=\",\"EWQd4K9dAztELc4fgzTq/UlZ8SIwTqbCF3w3fVXq4EU=\",\"ECHoBtg95Mvss8FlDHYXdOg8rk7Luw3xMxAVDLraiPQ=\",\"BK434ednbh089kKF9wQTXIzWQPcMiVve3VHe0mD7tp8=\",\"KkkdKLMg/3e/ciG1n8wlNcfPycDxGl/cXknIN6cfAjk=\",\"K6fCaVgRjwt1FETo6jUk1F/M79h0RhjmblVnnkK+KcY=\",\"DGUW9Musi48pvpQGxsMJ3zTi2n2TETPko08p7GKD6bM=\",\"KZGsx9tesxWfh2bEnWkgeQJbSApwZWQ17nDFaH2q6ww=\",\"KddgW0E83dGSd5tzJeGvuOUu0+l+kq33AcenDBGMZI0=\",\"JQe9N4j1fO/udU0/9akpgNzwYq5KP62T7ABZ6y/lRew=\"],[\"IZdwP860y/B8bb9GxK2T59FOVU22bQkQL/hIJHQ/5Oc=\",\"EyLw//x+SFS9i1/CPnEGtR9ZvVBh2LVlrKL9Pv5RL3k=\",\"GeQU+AOAqi0iITMRjDN9gqjFiUwviIYe5G9Ej6nWE1k=\",\"IiQRmaTfnLfWUknZViytbGXxZGDnmnk5y/3W17kgnZo=\",\"AwEGFzU4Tfzs+aMRwireMntRx4shFhX0HHf22F6KQbY=\",\"Ip4dhsHygQ9KJjO3tLW7YbfcXRmslf2NN5VI/ytoUO4=\",\"DjHc+cUyCagX7rKS6YlyfD9Wv/ZYg6/l/cKKw9++pnU=\",\"Bo+Re7GwgF5bWIi2qXgkOVuu0ZW12gtxxCq9CRwu9Us=\",\"HQv7i7kKwjQALYN3FWEyl4AqW7y2mqLajPq9gy9S17I=\",\"DWfBgvv0HBjVr8tIviAjdBPwKmTb8J6vcfI6FPueIQM=\",\"MFiQnLEDVXcGMEubtk2UrqTlBNj9qLgjE5lveWKISIY=\",\"BNBqgBluEOZkrf79B10MygSWHuion0/W1gHuubYMjbs=\",\"CrBi+NS17Q7CG9tC6z/LCoj6E6/K5FI9I4ZFUihAe1Y=\",\"FzgHVHkq1fgZXjJ6WmPNdXDNGZS9ahMOAcH6Ghc9RjA=\",\"LU83gO70/5mskW9LEt1XVhPLliG8X6CYDtmk7Iqt5Ww=\",\"KrvvSBs2jKlx502uBGkUOfhFwQ0dV4lCabJ1wZaq+e4=\",\"DyQyT4LWgjHdndb4wF9S2OrLmuAcyx87MCKCIjd9DlM=\",\"JnYXMX9RRmVCle9gK5ElDbAQtF9HJM5+xUiEspxARZc=\",\"AVf54vc3SYghuwGrEAHXFessM229/Lhnvs8KK7ZJDAY=\",\"Dae+wMuY0zelLN8NZuipfyQilnE0aEilUurBTIowxwI=\",\"FfyCDvUzAtynCfPuSAuhNxyRreefn1h/x4eNcxwFltE=\",\"CEVxWt/KNcPoBXwPzUzmphKNDoEX2I9VHT7GWH0PQpY=\",\"BCL3ROK3NglryHdaOQaJOmTNqHSqRFfStEKpp3GVbQ8=\",\"FfQhVQv2Y51Gq1d5/Sax4RYY4El+BcyFxgiwD68zgqE=\",\"BPF8rSug72+GAuk/W5iNXzV+Ya5fPsNQZvy00ae3IMg=\",\"FzLvVmDYSuUMoJwCHrDXfx+yoAzHkFskeViMScSIZz8=\",\"KbElAfp54IvCUlmYX3MM3OniQ0GS7IJuD0udVovTUbI=\",\"IHyABqp4/ECoTbQK2CFC0PYbKN7fEOIgHYFc9PYnRZA=\",\"CiVwTOTLdKlNe9y9tfomir1YnYj+RbLyyC+QMmzQSag=\",\"ESEfOnGvMKABAcQj6kCpWFqe7HVodyXX7iifQo9A77I=\",\"DgHou/XuYRRxOAzou4w0uTKsdulvqry3rSC+lhh8L6c=\",\"HIlKFDBRPfNVI+IuT+n0EKQ96R2sc64zjHcv7x+3Q2M=\",\"K+40k5LfoLW0oI7ljvVPAC4GqyaDT5SEPUj/DO1SbVw=\",\"hKYMHXCIfZ8tI6jHcTMygp60HPMYEUn7Ijt6v/TX8A==\",\"I6RQbJDAfzrhdqDiv2f1f4jUWJjJe83ryKgmOrYCx8U=\",\"GrZolqHflcAgi5kOLGNHBzlKERDLMUu4LgouK0lYruc=\",\"LGuEKqvrhO3knlWdjuplgpP/S7qTJbWh1MtknTF/RhY=\",\"FjIa9jhxMowriPRt9DK+mqFLAIuT+FzZcd2YbcFtLjU=\",\"E9ZHII09vMnfENHuNbWY5sjthWCPgbppUwiOe8bbc+w=\",\"Acau2p4Ppp9RQ+byLnR7fnTmkrklTVXGG4kEcMvX8Gs=\",\"KH10pfoDpO1lvUp8ba8DNBj0dMfdm5V78rF5ZcrAJLE=\",\"J6Qye+sLPgzCGYBbPwXoVL7c2ht8k/EWkf/Wu3al0Ok=\",\"JxoDoAC/QS5/z+iRi6ponGaCQXgD9bMC8a4waVyOZ3A=\",\"GkQ2IA5NC+ZdLw9AABV8lX/uUV5ZHItUvNRsAtWZI18=\",\"G86TlKXa0KTO41uOmbSzwM7gWLiuT94wHDFFpaepTHY=\",\"KxtP8rwYa33anD4F3Uky845qfASwrwg5RBpZchJdyQI=\",\"E8h9Dkv6STzCoZexydtJQml5rf7kcUBI2GXU9ulfaZs=\",\"DoYUltG1TjUwqg3GTGaD7A0BpOPRxp1Q9NZyC5gczWI=\",\"DbY71G4GvK/7ywPl3T+qiPJqCqpygZjF0JpIP8QZcQA=\",\"L4/KOkS/nqmUUuGgVYhq98lYULcWIirYnwIZBU1F24c=\",\"Bbe7PlpOKUY5XR1t3VQb2cFmz6GVbRYXE+fjUPWUfXM=\",\"IOTmxHpovjF1/PWno/i/ezshmCA7RVLtYguVk7ZuVIM=\",\"FUoqAjecdpW6R4PhXRChR1YO4rTQOgSguQHa3nLfSGI=\",\"FW8CyrX7Dn5voMdDv9ZHFuFeXlDhJ3SAWxx03qicU0U=\",\"HSWCGFVtAVLwo74EKxvRRndKYW/8fnMT6VGbUEExiRI=\",\"Fgpdo1XUaUEuVTWAT5nfuPqDnXziy3r6UMH9A2IZ9Og=\",\"FpPAyWuV9wN/r2oYKJgUxoI3hw7clKcsiD6yx1HV7EM=\",\"Kw3w9GP2nKIGrVxKEV0aaoPV4Kwyi9Ro81gmqWjVcIs=\",\"GcrSPBSpvtDhWfJQvshlXAcUm7oEFh/gAvdpVMoZK2A=\",\"JYV+rmvjB7ZTw2pAkKOWPWCEJBDgTFci3+3ij6ZF9U4=\",\"KayXFJVbepyU55We++uhfASDmte7q9xkO5hArkMVX3I=\",\"LmN9uth23VKnKE2yZlk6qFsgIL80CAJiXnT0Wizfli0=\",\"BGjYl3n63tvbTwCThYETxQYDIaqvCCpT1E/HTGXn7oQ=\",\"CRTO/VGigi78+GKdV+tbbscZWpAId2LsiBTxS95kdSI=\",\"EgqdPLyli5F/TmERfH/iGQum0jjON0lJd4xAptF2cH0=\",\"HPHHWhssoJrGVSFcswizns75bXRuy8NLN1g72OBIDV4=\",\"BRHK3C1DF2mpU9DSNVzdPYwT3KemxbGQBby/PFvPd3A=\",\"HiqsBj9DA+JKKkSxvtVoikMnk1bceKdy5Nz60FYuXdE=\",\"Fyo5bUHPsrEkHglqpB86R4gwPYgk1UloceA8uVkPibo=\",\"C94GgjfMQarbescY1Ma5Fst/Nfs5nrslFTB+YASWni4=\",\"FSLR+PDLkhSz9mAtn4Z70q4HqPp3rvvDFTr001DZM+4=\",\"FX1WBTrKLEzTD3ujTl1BuKY2lh73jB3qF1nc6szR7Wk=\",\"EK/4wPovJfWKKZ4ixzLxuQFhb25LxvY695u5PUX8GI4=\",\"CpVX03+7Nc4Eby3z2L2c/M7fhe7yVJhD2n8sLjbSveQ=\",\"B1Ap2DUaSUkXATbeZsF5qNbua1a4lZivGZUo146NLFk=\",\"KqdnyRE5hpayMC/hWtM+81xsl2GOZy+DeqT9QpMDVc8=\",\"AU2Zx0F6Mp/2LTKChCHhuKAx0wJCsoXIak9jeV43ZiM=\",\"GG4beAiUZ0eDEMNeyp0gWMCou44upcMk8TFOR4oSiU4=\",\"LKkwbvYt+xrVgkSsW9cLC8hPhjaPbJvU4V3a7UMumDg=\",\"F2MNYwdihYVmHqrulDjGcWD36vbQPTymNk1K3aSb3yc=\",\"IRh8Hf+udDQKSIzfCM4yIiZUSBZ4CvAWCY2MOcfnLjE=\",\"AdshC5PDIKGLqxdpruYydr2ZrIkDWw2jJ80Gy3CFSso=\",\"GLtviYBcG9WdjXrRCdXya00YgT9xzzqrom7olnCUBOE=\",\"CcCmwtecwGAj8/Qxlsm4pgpVcW0sfKCV2Eml1n/2/pg=\",\"C+a31s/tlSj00a4wbzE4MG6nyBy/kD6biE6rUITcTBY=\",\"Fvx8gIVSsTYtinOb/fbG2+cLAGEXgPtIGNQk1eAX7Vw=\",\"DzGpHm23XfkEvmuxT+cnFCnleH+akY0csSitdqyUiDY=\",\"IwpmziT+3dRfz8tcp+TvsSRhp8CgtnOnOyUpJdMQ1Ig=\",\"Be03B+etNHiuUIEmy6J0dDz+hoW0YVP22joLS4PqktA=\",\"BGXDcNtAuPFLT275E1UMEbyyg5rHB+L+mpwxtDz42Tg=\",\"hfQriUhzp0UaYP7AU5+f+LLgpJXkPbe5XDp1xXwg7Q==\",\"Los66TaMnB8VQq5zTNmVhp+BqsZJAvsdNZcCLaCPmTg=\",\"FhSF1PqGIOb9CbCIFZxOIjFVAZv+nq4o+YcP8ZzP8xQ=\",\"C25AAznl52wdIA/SeIRZnUc92Y+t6eZIlAgz6jK3VBY=\",\"Jh7jH61HwNt7wEb3GEN+5Rj+c+ySweIDFV2PKE1EsxA=\",\"BOEGCJt3bQGihLhK3N26S/DuVsLIWsWEtNk49FAjJS4=\",\"BLFOifQih97jYUKhdxj3YVeJyfliO1NK/v/PnH4mRJ8=\",\"HVWRWyC2BTTx2J8vjElWgSP8tMbZGXNz5UZi59nrg7A=\",\"vwT1t9F4p37jL+VDvkaOHImqRXovTWaZrqdD+ASUuA==\",\"G7HzHoh2R8tFuLxb4YXiBukazPhuXOW8GzmvEvhX6j4=\",\"JvC0IUIS6oAwq6dbLraZ6ErfJLxLhWo1IrgsHtyofp0=\",\"Gtfhxv6t4mnAdrZyObMW58/BlLA2taU/kgf0V1mcX8o=\",\"EZR87a2FnwL/tLmegQhRL6MlIkrX4bz4KyjGGomEADU=\",\"HvTwMw1hRCKO9sw27aDReThMTcGFjJXeEtBw0RxDNIw=\",\"EDGr67Aha+UGwEplFNRx8YsNwbWpthbIekZbaJzRM20=\",\"I/l+toD1oTs+jarlcqvirA3ZLqq0cwAvBwjmtghLLfg=\",\"KJsrouPI9mW5Sk1ztb331mh0aKqoTvf24E/hI2WeQbI=\",\"DUD3E7MbLQQdPgHiUErxACC/xFvVu95PSxM/Y1NgkLU=\",\"KSBNc86Es/u+BHx0mX7nmfkpI80W7OHrYnXItxZZ8Uk=\",\"I80UtQ9BKfpWJj/vvnR15RyF9nzfOKmudjetBK1kTGo=\",\"FgOIe8fmlWrk/1ufRCOyKTq1K2my7AIay5C7bajcOIM=\",\"ITfZnCQUXlLq0BKbsiBpDF/49tv/dVyEZwVLZFx0sPk=\",\"Hz1tE0kJao4FlEQ6SHOG+fUbL8Nm6RCplS1PCz2+xBQ=\",\"IUjhqrPpyCopfQSvgZHisFzscbDNa4tOB5Bh3QDwGgA=\",\"F/sHIbM3VAYCirbwSIKiAuaAHLu7ULrcvV12DVnmDFQ=\",\"BE+K3jNFVM1hB0OquroRluABBudUz/iwiKxponPtB00=\",\"LhDnTTBnlmH8Oslgt8lny8UAKdLqRjq471VjPMVAUkM=\",\"HkQDCDJSbOMtVAxc3S3vf5AFCbyAGf7F44hIs1dtuo4=\",\"LBe9evRj1S0/1+hyPREHg2lWHKPE7OSPEpitq+fIIuA=\"],[\"EjmS3zudqmUTnsE/u1L300jhNDM2hMFZb+sOjYw61ZY=\",\"L6RvXbqZCc6ZhKAeKvMLVQ3+yXi+krSRGaOVnH9iNwM=\",\"Idj5TTvZjwtjp6rLF1ssyhOy3YqM9o/DbZSuKUAbLSw=\",\"GowGxhBG4Pjcajm8V66g0H/X2zTmj3NXnaieEWr4frg=\",\"KYzXBG9YwMq3dSOlim/f0UAbieeuXu9JlEQtFn960dM=\",\"DqxzeWZxXfSiCzGraT7ahqB/PoMPykdaZXTWf8Xxn2M=\",\"Brm3GLs7bUXgy+bV2aLwlqd76wVoIXUNByJirypwoz4=\",\"C8za1uix/fuoRqlVP8eQWz+W5DXWU+7DlyVl4fu8MCo=\",\"IcLf4g3FpyFnu6vdlaGMFH+Eg8t8Di5oSh7kAS9L2S4=\",\"JK1rJ1Wmpu5R2S+jDfJIkyDlCoznEyUEzsow6UgAebA=\",\"BnpG/ExSxuoQLNN7RHj9vbXnSYd+xDe8t6y/tk5h7Mo=\",\"GiYjl1ZS1Hb0ucrcS4UhkmiRDHw7LQrhL9R+sWIlfzU=\",\"Al+M4wRBzobmsh1SyodGPOwpmj71QyINcrwkkf3ATEs=\",\"Gs3wtI2KR4mps6xf+JYrFumlbIgOIjZoolAYZXg0ql0=\",\"FNP6fuHNK4vi9C629LlbuLHRVtd/FD+uPoK7jFYQ6nc=\",\"A6Ik9kcKZPKU+k3WdSTeWLGPcIEuCTwOHAazHXWKET8=\",\"LIIq6nFAKAfsIdsRoIlmj84ubC0jF03j62lISlMUhSc=\",\"EwW2bokOl+EdUncaYFCQJrrt0OC9XnlxNCWcdIoomZU=\",\"Kx6AvF4/VG9LETmed6B4TrfEOcVG6fuibrbHfYnBRRc=\",\"FWIyaosNVDa9e9Fz0/nmnDvnTceScLT7HoU51YTqwdE=\",\"CMmsqJtEfnRovx6m2wgDRramgn7/H7gTks3n9hMJELQ=\",\"E44ALowMWXVQtyrL/JxQlSF1uoXAYbfpc9h9l5R2tUs=\",\"AxfuQ+b044eWghrS1VhE0BK/xcK5kPpItJHvfGNyvcM=\",\"G2CDH8EVIdEi2c3G/0XHAF5qFmcX56oWhcsobJ7MmSs=\",\"LnPTXrqbQ6UQDeF7ulxZ2HH/oqm1IrBkXig6iSWdRG8=\",\"IqTTy3dQ5fTS8DgSlFePaYvn1ngxFZV5P/bx7j7/LfQ=\",\"JHG3qWmvKVudQHY0pIahyCzCc1BtianNXIClO0Dhk18=\",\"AZe3Ph15KhBkUqw9Mf0CteFhf1RC/ia+9f/9t+FJd1Q=\",\"Cy33M7NUHHiDYqXev4GKCHvZyanTnB/PJWStOYC66Pg=\",\"HMZuooWzwJy0ZTKDucbuZrfno8riDNUDFdr+OpIROiw=\",\"AlthUrqevoNsL1Z50PiRswuWrj4GphMtovb20hL8S1I=\",\"GoiaoWRhNwpOdepr9/+UBcKWVilZlrC1iEIWMR7P16I=\",\"H2+vQc9wjYMHRCpRlMHTjcPoM8zE7N/biqRMXp/OVm4=\",\"FwIh41/gTaIwPeoUERP3cRxlHcpXvrf6NiTSiBCF19M=\",\"H0/SVDQPlQn8HOByv3lcmrz+3V+ArY6+onJr5HQZexs=\",\"K7T6ac1jHVtBiDe5FV2wLVSJ5/65Ky61oXvugDEFh4A=\",\"L8c3pMEHPAGEMs0PnovFt1wZ+U9VQxQlHVEPx4i3nV8=\",\"KZ040WgDYWqQZdGCDiuGCCgOgVf36e9blU6z0r6yZG4=\",\"Buj6ZPb54qZmUODwArKvp+DCya5BcHLGi48fMbIXvWc=\",\"FR4u/6Du964olFBgF59Kr9o6UGNb47PP1CUrXsnClEk=\",\"E/Il/yIHic89lUfxX/X2vWsFdXBjbiXL/657cH1rOms=\",\"B18NWy867x5yy+DQtAZQXsmgwrYfN6wPrIK0TZ/dX3k=\",\"Am9JG2XvGP/SOCxE7VBqUGo3WpBJ4vb6OSqDfzAExQ0=\",\"AmkWxGCw4tVpeRTRZS+8PaJRebAQoRWOVG3oUCB0KuI=\",\"F44nCww1xa3jRX+lmFwSlfZNRYoqJf6EnH61tL/IE0g=\",\"ErX7fhiU2Eb/OZmz+RBTKanMRZ1bYF7QDzM9p7ITCQU=\",\"E49C9PAfSwWc1svWr6Gq1EPymJPiQxPS/TsOYaN4z6I=\",\"CvaKK7X5tvtJI1a/aoD0BzAFa/HYVCRhSulwPr0groc=\",\"BxGh+Ejvt9ICBo0VrRglcgwrgrshFLyIQEO8ONcn9rM=\",\"D3J1s6/hWP3lg2elA2/Sbq24zRxkavtN6mT78dgOH1A=\",\"BFWsuix3vjpRj8ZPeXfuPGRrMLU0KUcm7IlpdtahZSk=\",\"C9Jh0dRsmf67LLG9cKyPvgEpUovgWfznXNujKPc9c0g=\",\"LlrusE37v1/DXds3ElSb6OZD6hQp+gAIcq8u1QAVJxk=\",\"HIauZMRopFLowcLVIIum4XN4zDI3OApIJ5iJvOqszL0=\",\"KsydFWYwJ/xbT6Rn5ww7R28qB6bqWFyvcoeSEQBWekA=\",\"Iw0Dvob+kRQUUxJgV3Pcr99xuX2OLPnp7yRhBrX7FFk=\",\"KrYKQVTiJhxuToKyC+Pgj3YTzTNNuuKVhuSMHfSa1ZI=\",\"IyiqY2nwr3Nqus4/eIXX3FZsOe+DFQgXjm1ivUOAz8E=\",\"EWS43OfkF57A4pTaVuWrQ94sIKddV7jlg//qI0nmJTk=\",\"JJHNbyNBYGPncXEJXA2yFySKLACtw+FGujLZrCuUF0I=\",\"HNyEjTU/x3LeFR+GVqfi4kt/2jhVaNZZb+gaMD6iCPQ=\",\"AqOY647E072ZvcNSDbc0GUbU7tOhb2+u3xZ5BeZVKIQ=\",\"Cwf3PMhDLh+eQJXjkjWf1GRn+b/z4kr1vEy+mxe0PmI=\",\"BOlkrV3tJ0lA/meOT3IHnrsJ8om4OBv6cdfI7wYFlUs=\",\"DbKjqrMmwTRHcfTF+HKgUEZfh0aconcE/ZPvP+WlodY=\",\"J7BE/v2S2olypgsCl/m5PykXhqdJ/vHin4zPa/3nJWQ=\",\"DGwL9ezgu5vgc34MlPmxBZRInuXABnblHzF4EVXuhyk=\",\"CjbIr5MXgayxHMaSLwv24ozgGhoY7pkNo0IaCprqAUc=\",\"JV92IE5hN6wSrldv3Em6oFS6GCZ411oKPOvQHQzWwoY=\",\"CqMaaBF/Ih++G2Cdjiaem6HprCKOLgpRKrnHdKOmP3k=\",\"FBUTEOZWZEyGpc2nYgxkQK0rsJaIxwUwweusYNltVrU=\",\"J7lTsd4OMKGkI0BbdJ2DAoW/6ilM+h0+EbTMWAGqpkA=\",\"MEdrdg8LRatOW3vr7yzOr7KwbztBk/uZOMlGxjEVsAg=\",\"C3D/oA+Xo3eZBUTZUBYCN275pJarjfxEhWMGvyihuSA=\",\"KGGtuQZ/RG20Wza/k6tjRfU+B3RsBjVG32kWBOwCZSk=\",\"Az6bQnTDV6jG3WGj4wI2c1taI/OWrLUtktZoWl8D72c=\",\"KLTlBdUwnimm2o+U/ewDmsRLQxELwPi83kK9gz37DTE=\",\"D2+uESKyGe4LFnXui7XHxIdElU49ri+dXR6nHA7bCpw=\",\"ArQXO71ULxuJ/o00eKBQ6B1C+klenJavJjquo8SY6Rc=\",\"CNcvXwFqspORNE8guCFFDakS/wFuTaZ0/5fF2SvToaE=\",\"HZ44eZg3fZ5oCwtV6DCfuKKXGVUd54PBz4F8/5rWqQs=\",\"FCTirPXbDZGVbhXVtdxBMq1sT7hjycjlcrtJ/u6/fiI=\",\"Cz2zTkJTVYd5ZpuEnvL6tV/8ZU1Pn3cPdMvEW6EX9IM=\",\"EmmGHEnX83E2c/b+xLV0NskFmqELVB1krr28EeZRP2o=\",\"JVe3oxhoFmSsJ8SDSbG19EiS5a0CyLgUk0GL3GZRc0I=\",\"BlDc1NNhCx13bWcwJOZ5tsdrXN4LmFCRugDhz06yYGI=\",\"6udzEqc9w+yyQxQ7pk98/clGXPAPsIcpWChkMP1Bqg==\",\"D0PZnxC7fI2FE4T1IVvNvJBIm9Y8m0+j7Ei/GFEBLZM=\",\"LZW9BB0bVSL+2COl2dYH16/UVUYfM7yMFATvNIIhq7g=\",\"L9g/UZWXt+gHq4D9hwHco/QIWVe48pVfXfecJPAKH1M=\",\"JcDJq9V2yAPkIu7Nd6PKT2OjK5+Q9TZu03ZY7qhvJx0=\",\"AxUJvemnKG7tFeojU3rHLfzDWp9MjNySuvOd18ykk5s=\",\"L2aS6fv6CtZLP3SEJc5Dw8acteTBOg/wbBTyu3UUGvA=\",\"GqN1yHmWbL2H1M5wieNUeGxvKljia5fHYN+vty35xes=\",\"LxS68XkjZaR2xMGTk5JEpqTt819BYWu220sr9RFkKiM=\",\"DBVSURoxhdlzDZrTqGxtzmKfWHHX6co4OZdYtYeDDs4=\",\"CkmRY7iEtnQCBY4TkQ0ciYc8lS6hp9Gj7v6qItKjfX8=\",\"LP2txGNNyHXkwr4PV5doyFsy5aGbrztdU2o9EKMZm/4=\",\"K6mBizXbGMt2MRZGh8WTybray1O/cgYHtGISMwvkIMo=\",\"DjewrnMGDcK19nHifhSnzb9vN7egPmllS+51qfvVLGo=\",\"/c4vw6daOB9t2EtMpfl1Ol8Pi+v1y25gbFlxeqe4FA==\",\"D7Wi3cAwQd/7gIoQh31DfCdkJAlkwu39vlRYVKrigq8=\",\"HqQDCQC590wzpTqVDSH0BziBP2nouvRERNbwoTaMbYU=\",\"KyauUrv31Bpm2YTuN6QMlRKcSUnMdO3kD9ffPzv8dxQ=\",\"FgYuqPnD0byazs4+OvrZYer3ZQaXc+Z5JA3XI91FMPo=\",\"B4gwVz+rNqR3e02CwESmDQb8KryqwYJv/9LOBjDQDrA=\",\"AvF/2+7arlTRQJxc7io/Pe0AX7b4TbjrYAERZ55HG+g=\",\"GgGwxbIJr5DjV5nPYwRBsP44OUMAodva336AIwQlzgM=\",\"D6IKJqaVDQMeIMn+GfExfA5pTrQ5eiX9+XlGv9ZuUZg=\",\"G2OGnidJJuoukcD6CRtwdNX8/ZmH6IdhTahu69a0LB0=\",\"BygEMyhVcDjnNw3ZhKgiBQGZGTp9qcCmcK96+QlDgtA=\",\"CVcKf3oGECtVvPzf9kxCzyrplKICVAVKvs9mCTGLNwc=\",\"AcL/I/1tAJAWHbVKmYEPdux2fi226DCvyaq96WFIKeY=\",\"B/r32AdS9QHPDszGvaAc00k3YzDfeZyoQu1PRSUX9v0=\",\"KiXckNReNrk2fSB+Rb441EkDQjHtfGQi0nlbrtngjT8=\",\"BdbQjkDSdBvDGM/dlh5ivVsUORRSBvSa6w6LtookSFE=\",\"Cdez+KRvAws7Cye9x32ZDMZC5PPdZnsIXvEU0Iu9qfA=\",\"LReWDs0GcGw33c2tXkcH3cA4XYg/CP58izZlnZTvhbE=\",\"FfJHFWSEihYyBLB0wdukxRix6aQFKjp+XZwqDnfo6pk=\",\"C8KdZEQF0M8+8YsxFHS49tDlu5hWBZ6muQjY6ru+Sj8=\",\"HzzCuaZmyl2ri8F0NnYt7ODqbvO+zzkhSZJifUlZXuI=\",\"DFx+wLcseUf34RKRkaEepcLSGkMVYbPuFRPQ/ge2tdE=\",\"GwKwL4VHv2LAJQYi/b9sCUkJ/CUVHDlBtcjC4G1nW+I=\",\"DTITtzIQm+6vECs1nbIk2GAx6iu+FAb3C2VOupgKuEw=\",\"FYSOzyHmDD7B70WZh3cgK3CEJqcrA/jcTlaW3HTu/Iw=\",\"FNv276fK7Sz57GmNuX51UsYrOGo0g6w5Aovp+11uOww=\",\"JhYSa3RsPYpNzcvubUu4xat6OsjFxbkaZUdHEZvHCuQ=\",\"GR/hI5bvwj74hl4ykI12wJqw/lKkZlVUAgt7plk4Ypc=\"],[\"IIjOlTRXe/OL57xFfydW1VjWbgwHucwAGlgL1CzaDnc=\",\"G4bmOQjEsSr0POxoEDVslNIcnjfXPf/5dCpY4Ow1a+E=\",\"CcoCK6EULRcPdVIS4u3J0KSs4z4Wgl9UDV1Q1aAhoWk=\",\"J35p1HoTOAQkH2rr6USb5uIshJxtitjJOOr2E7wa7NQ=\",\"F7V+oDdU4krg70Jaoq2TGqybpUV6GM7FlFRaI122smk=\",\"EcdAmDOV4PSgJuLHyTkjY3XJB3dV6xo3p31aH9dKusY=\",\"HNhVKQEN1+L7fqQDUVurVydVakecWbgi78WoHrN7xb0=\",\"LLk1QALOxLy/qYXeNPQ9cCztg9GXqjdLWh+W+HsS8pI=\",\"H3r5jgj2h3kj8no9rUDFJaxS9W+72HhQZUT5rNYaoy0=\",\"GguAfeVe8SY8t01z8ci/NAO7Px4DzFAqniuNQjaI7Bg=\",\"H9WaSTrwH1OOrumxy8ss0beZ1gk/AVkQc0QEfCFY2Q0=\",\"HT+kwE1U5SY+dDovoBA3AJh3OFN3e3PHySr2TuoHlhI=\",\"HciSqNAG6bmdWX9EnQVT67UbJZMZq52LLQLtnGWCwjI=\",\"KgU3N53Kt22TCNJpng6QAQkxinQMdbjuG6cRIO2/4HE=\",\"FJ0syJLny8H0ECSTu5a0o2ko3PYvfbptng1Eb1/9T6E=\",\"Hknydxt1EK6nfuAA51esEFaZxiozpBjr2lcpaQN7W8g=\",\"BWSf+/SKFdOThctikSvwSelwYVX/PdQ/fODkyzXIbD0=\",\"JpizWbuzaGtiaDHVlvxbUDn0r1FrxoOiiYdice1iiXs=\",\"zYwI78XSvGJ+5yfawyWvmbT3KscPYciQsFk+sDyM0g==\",\"A2qamtMnqnAjLP5seIhOwjrqcDgUxwGhhieJNntFs/U=\",\"K1iZ0DiiNIJHRtaX04/0I0Wfe9QBV4L1KKNwWm8v658=\",\"JSS9ehlpdEFo8RqgP6gtoDTtzRwxFBQgsjCTRNJ0Gu8=\",\"CJGJVwWTZ52jW2aL1bNUJIm6sQIt15DKapnAntCnmso=\",\"BmCJcKScDqZfIaVEwhXr2JtAI8OH6DOex8nLgLa4euQ=\",\"KDpjNtgeAujc+9S+Z/zX+Lc8/0zj+KfzRRsm6BZ5MJ0=\",\"FFNuob1Dr015JwVOzcliVj9vOW43LzXK4OUhjWK/9FQ=\",\"MDauP0zvikoKMk9AnykMFy5ewjo0911XIzoEoFVkjgA=\",\"IiYtmhywtZQbPxk8OBQDQluD5v2eG02TAYMUjkFNuZ0=\",\"FVXkcmz1140Rtm9JaXJOZL6NwwR9CVOqhL5CxKOrQJg=\",\"Kj6eUqwfpJFeJiQGwnzs8ksEEfpnTqUEasRIl2KehUQ=\",\"FNiryXAGJL/FSTn/ZPdeCtGHZi3dAhXjz/9Wo1A3EjE=\",\"Hg62hbVhvcxst5NQSkwbUFavM9329ek8cjlvblPuqqU=\",\"Ln4UbZERwR2TSOwiMCcL8hG0Mlwuh40J+u3vmLzRDb0=\",\"GMA2755XM2l1WvMxQruFZDf2SY+xFiuPivRSPDkLCbI=\",\"GVzjg89bTmWs2zANbjWTIOprrI+ogUVsclJrRRPuHXE=\",\"DBKGCyktIuVSDUFkJ+H/gO7u7kd5mzIuBYDC1F1g5qw=\",\"L/c7hZ9oybjqqUB4VF9U3R6d/XT912LdZfUirxnsP/4=\",\"EgXcRhVdnMIqieg4/xpGJzjT7xlyoBhkxyrw80LlJP8=\",\"D+y2gP8ZsSTOdFtvcPuhuRcW4S9mT+k1Ytk3AK3wvEU=\",\"I0ORt4b5SY2yaAxueqv0sKzg8DaOIe/5RSjQURKMvGo=\",\"KTfa2J4r8S+VzOcNvjukwu4BhCJjh0Ib0YA4iUzq7ck=\",\"IsermpEsKqkuKv1HSecJaDIvfldQzmxpfcs0RGECuFo=\",\"G92CQcyRzwkXgDKOpqDKba6MEMUHlgBtRiRVuQ5/YA4=\",\"BJ4+tNO9uOo/tuw9wGVVbqzhinGYZBhLNtqDW/Po3hE=\",\"IKhhHuOpGhUT4RrpYuyCiEuiTzIXGTmJKjTsbUYiqIs=\",\"J9KB9IIVS1wAHKODoQh7sUgXgvK7RX+zJQX/YzFew3Y=\",\"BTDF7kW2sWq8gwbrvxAqHAd0+GGGmSeNXTqZ9CSVo/A=\",\"JW9ALsFzIoiirif1ai/uIZm95nyikXmE4qbH85UqjjI=\",\"DtVEvTAdM9S57zWd478B5hOX8vKZEZRMXQkd28UY4UY=\",\"E3D/uwI9Zu5i7DiV9h3nMhIgergxlL9ssdSdN73U800=\",\"KkbVU4pam9r0fkRZTzCSES51XN3hpsEoVomUoEDpoE4=\",\"HzOW19sxwZERBpE17y0JXBqvvix218w4eUSy8TftumQ=\",\"Il8yA/7Za4RnJMFGs9OzUdZhXuXLHfg5CgKnFe4gbxg=\",\"tAXaNRDnq+dZKYE31IU/ZR41t2YAKNnOaA7ynbTCKw==\",\"Fi352c+HSoljDZBhYKvRFLCSdMAQY2xEDDdztfASN0w=\",\"JjSdB9v+hi9HOT01RJHf/Y7Va8wUJNRdwykmab6M4NM=\",\"GnWg69Ar1gv4UeDMVkoHylFF1Oy5cGJazH8iVIDimQM=\",\"Itw1MW00Mk3E/EgSskRoozuUvRGH/eQJJnDXifg3K6A=\",\"HyYMIGjd00S/j9DZha2ZngoqCzRbXU4VZHxgoAGd3rk=\",\"BDCYkG9guouWTD0zhUvqO/xyjr03S4cetxbhvuj2+oE=\",\"F/wGAl99ATKRL2zRibdYReio6+Jko1YWEOwttMsi+AA=\",\"GFNQG2oiI3z3kPZNWS5Gt2vXjXpuEahqXpZL/fmLNfg=\",\"E/hahgwyjX/paXD7sT2sGSMwZ7GG3cqB97gF3H6NTeA=\",\"JVOFii397iVW0kkjxgnrO9kuWPHKscQGMXAZ3wvd+8c=\",\"AY25XfHvXKwfTV4h3YHk59T7+Y3u8ym6w+R0Sy9yzC0=\",\"IYz6QAoAPaaf85b5ovsoLVRKQ2l7aPxrrMzNnPmTOTk=\",\"FbGSr9r3zMRhIJEnuVZHzWYcNwRGQvAgfMnMaZ7oo/o=\",\"D6Khk8yK3a33dm1xLHrxAHS8gUlGDuNbXHjRXPUnA04=\",\"BvPdQd1KlGWGKPp8/BfrAkpZzqzZ7w/AYX8nXNncD8U=\",\"B6nL9GYROHztGxjE83HVgs17BaUMr34jCjtfyeAouuI=\",\"E1+YhxV3xeY45WMlN3ch+8vVkNhek+0xD8HAyALdBqA=\",\"6PitpP/+Cmufr/F/apJvKP/DjZWN3yWd30CQCDvWbg==\",\"Il32qpvEnpsvXI3IHhXJHsEGTbIBvmM/Hl/Oa8W5tqA=\",\"Fxw79/RbpXGTCZHmPcj02CPqHYhTV6N/eCUnTpueDUA=\",\"FxIHdh9NccXV+mI1KzBtqQLwJZ9MBHC8gkCRRP65rPM=\",\"JqiAWQCmCH9NkWxfi3UqsyEQI9cwocX3RdkSL9nBmXM=\",\"EpQz1qtaj1RDSJw1e2m8DCfKxq48JJl+Vyj/x2Q51bk=\",\"HAwCvZpPejb8Ktk4+adCwK9dd0Xx8KxbZkqj5AV6bxg=\",\"Fl/3MJwZrfzI7m3fdS+U+lwkvQ4+vbrHLB+wau9W37A=\",\"JrOH0tzaWs/kiHLxyQdwgwQ5gaTSLsNhgwSJzLSdOEw=\",\"E29zsgBmv5u2KeFNyFJOYCbBWQWf2/URYAZu98QWvkw=\",\"KrS4bnzeOYLS6II1wxLRQT2F5p0/XVG/+X+FIb18NbA=\",\"Fas7983YlEUB1Pbh+/m8xlDFt6loYPdc4I9SmaVg48o=\",\"BjdXse4BGQsYqqkHjObFm0/5eaQ4l/esQfZnrBMAxSI=\",\"ByNdXIlzJ7my3qQ6nJJNY63wliyAJOlIazHH99yT+T0=\",\"DHk+CV8k+XMAKUuQ+cc0JBUJrjGsDhP58d9G4P5Tf4w=\",\"FsRhE14UPG+wjZwz/jhbDHoBK8II+mZx5GGVNLPnMTk=\",\"A2laP8tvN3jdSITa1i5OhsdQ4o0U+zHNWVZ+Ou/Q+3E=\",\"F1AfAS9UxPGWqjHL2RuxJsJU9VPlXUq4RPTUxonRofs=\",\"IP+MJwFyPr4RTZMtSF+0r5r2QeUsqw1TkNtNxiQpXNg=\",\"BgXUgkPiHP7x7ZEw9YRKDBTHkGJLk+yYkw0lDBtBC78=\",\"D/oDKrm2M9NJCbt0ikmNHXb4IFeXPsyun8+sRfUOpuY=\",\"IC2W8W9idhKfg1/MyD9S5MwafV8qwyrkNj6UIfZwS+s=\",\"CX4/1NNb0TlM1ILC/kvDwCiB5FKtv1iFiiQQahy/CtY=\",\"J3woR66MpkRGydBOK+RbeGpP/cfdHSfWvJeNuFrIWsg=\",\"A0EKp6IDjXXTMIKl/WvXfQGFeK1/up93EuT0Hn05fm8=\",\"D/AvHXnUEMgo3UTGM4wxBIzteciq28Ra/kVZ2r7AKYE=\",\"BJ54H0ZuJWG5LUWkD7dgJa+xcys5pI264cVUInKx4SY=\",\"CojEmlhZFKGtmYBdqd7IUP/7K72mT3tQlRamcTuIQoY=\",\"BF57xL7scQey7fJkn5goY8bhBliViBiesMneSw4DkBc=\",\"CCiuomO59dsjn5xJ42oujNyONI9YkEE44InPy4Rwrls=\",\"JTlV8QWKM4e0CYHN+zO3RiOBejiUtRCH0/mks51xahA=\",\"F3xpvD33pGPE0msGVWJGHvHK/5yS07sUPOKym+E7IzY=\",\"FNYGjDm5e5oQPLDUDpqL8+96bHvR1iLX2le3oiyx36s=\",\"Jd0rV7R5n2EQNm4LrqZlqkIyUBlYG4kB/K94hktR8Qc=\",\"MF7HWPpuu+XOULsvFuwA0EMBM6Df1M15wS1p+MwOjsM=\",\"EawKgAnOJ9PiGD4x3QF1+BKEs3yfbnFOgt50aWnJiGU=\",\"HRCbi2j0QqCaBixaZjoJNalqkSGVh+/PPpXwqik1eOU=\",\"DHsKEE5APa3IDu9V1o/VbVau/8QL7a1PRLLr54DQiuE=\",\"GAdlSEH/ty57BGlCwAgNl/QxkcbS54tw5p/4ZwFc+ng=\",\"G2PaGpntkPQLApIYDbp4tuCUVLdb3mSsnlzK8rK2QEM=\",\"1+XE0yG8bRgBBOahNEULimIDTpjXLJMYxhF2RTyW1A==\",\"LiUqOXvfG1NUcjnjxum7UmDBkFkwZE4imF9B62oib00=\",\"C+Ppsair24iTda5gguFON73SG44qZ16lZibp9LnVfIE=\",\"FhtSkEqZjwPqYq5ntWHx10gEzhVPkoweCGcx1o77UhM=\",\"CFL1ZnL8BsvnJgNmF+/SELgCXIW5Z2bpWSXhfwhWSv8=\",\"IcToc9jQOvmJ8i2+T6CmryqHGdKJcHrlBrOVGDSbbL8=\",\"GsQaRDFO4YufnU/cpYKgUsm2nAkwmuRHQEs7pYEEWB4=\",\"DuMzupNEQuSYzt5mCaGCj/zpTPB/p7FMHJkYia0USNk=\",\"KZbGjQB+qNFsAU/bMxkPpY7l3nk/B/5EE+46T8pDRm8=\",\"I/Z4si/sJbo1fMBo6yWfEUdUplR3Aiq+JM0HUHgl/Bc=\",\"H2yCcUKIVJ2kZGU0VHGJNJ7JCKovoCcp6XnfaliChVs=\",\"H4GOdLnDpJC2EpJr/onnlHFo00PHgISjvt93EhYBQ1Q=\",\"IGgzQ17EmIdy7h8Ou5MTMZyyQ3BcExPeYD/fYaMj7wQ=\",\"FxeFsDEE3xWmMqr03Hy3rPR5NMcsljEPE0JQCAUSDRE=\",\"ILc2OJHNNYnv6Dq7kdny5sWbV1uNOtpsbMhPrwZ2PbA=\",\"AtYGCbxoXQklzexveNcx3woEBjinVNpVW4v+JlNqMl0=\",\"GpGXmrOtNAGHLSELO0E0fUQxLl1Y3wwSF4gdVEujAas=\",\"FmVG02TkIFDyw50ZbdQYmugkpXDTnAKuaoXYKwBBm/w=\",\"GsIIn3SqfWG3xExX67tnUb5MiiKy+C8TtROVm8LyAMk=\",\"CQjKhkoEvPZ326PNJyxqF3DnqcY4Hu2/nwSRsCgA/w4=\",\"JLyKhm2be+2SQu1qSCJS23fp2DrOYGKTGTmUqqEm5y8=\",\"F6M7TUoIIRdsQGtHnjjagNJlIv7Akx8hjI5U4mmw/6w=\",\"EtbRefGL9sbBNmECbA/c/uWWrwglRfMpngWop4v/Lig=\",\"Fcf7n8+PGpLPDGd/5Yt5BlpaUC13isaWfAIvbzETJAU=\"],[\"DhliwjL9Cmu1StiWKoK5g4z+8Z0pClX8SdbevQYc0vY=\",\"AeH0XP8+dBaKzNCpRTb8pjFxKJU+tH2NLXm4R7NVz1E=\",\"E2fuw7IMt0lTYY/ZJhBHdV73+Krl/+lvyPfZoC43vRo=\",\"L/atQFM6+irLeMm5FlDXzL0nSwn3jBAEefOk1ylW1wY=\",\"FSyMPZ5D2QrYCUgxp0r4FR/c2gsY172DdP/aaNGl/HE=\",\"JBcH2yb5bfUCNk0mcSx/Rl0KxVl6MJVZsHVAY1GiCXc=\",\"FaTkcooZfa5jA9DN0rbR5BFKn604pTC8pv0Gyh/8H1Y=\",\"DL/WPzY5eMOH1lbpPxHjNph6aHSMj1TzhYh+ZLEHVZg=\",\"H7WUR0uDNPmupv5eMj+w4Kwn0olZIaxk6T5STk/9JcQ=\",\"BaxVNh2pMcG0xWCqjbq8hiS6IlhxvOIkrdta+QFnaus=\",\"DnJm+Qk5W11C7CmK0+tz9sERSfSRFk+ZfqdrZCgrmvU=\",\"HZKM6RbsAXiiwNiokK+QRoyK9oxMEoxo8ELK1RxteJU=\",\"EVIeN48imEQmNBD+RGKPyp/60X6umWXe6QDvFKTS1tI=\",\"I/PqO1WtNxCgBS16S5yaZUVu9xvE6xbB6QgDSzzTstA=\",\"DU+XLnlbvKhiO7CFA3ZKkOQ4S+ZE9XtKVvHn4VSJIr8=\",\"KlPmDsucAN2ZaS1X16VNiTk0RoIDmVJn6DlUhZ0htZU=\",\"GFg7sKg60ucQNpR1vVSuHYIddanh6HDfEcFU9BvhpjI=\",\"DUVojcmG945xxGO3btLAVogcdtxVLM+NOh15XXaC77I=\",\"FEglaDCredJhjG68WvViT9Bk4qFhlOWgw1x2/LCU03E=\",\"DAx5Er9nwnO6riZcaPN4o/wG7td3i6atMYFCi9VaFIo=\",\"CQDPxxXtsQnT5sAreleDJvV+/rPab1jmR5Lco0UqVfk=\",\"C4S4UdnQ1iHrKHL9dbhIrWqQWRGpiLRqPQ1w0mTIeQo=\",\"BpuBBbxgvuEwl8D7FNBaG5MtN9twP2/1V2db+72opbA=\",\"CgrQgqYiaEAzRSQCLh08cWhCNEnfnC/8tEzZ1NIwIyU=\",\"GMNQUAp7uf7MBLKG7g6+ds9xKBtEY9u8+OJmIhgX0yw=\",\"LaMXxFnAsNlz4EvMqcEScmx2GM6XYMIijDCLdDPZB6A=\",\"IyoH0a73nBET4//nCUrDec1nxBmBudvTDcaR7d7dvG8=\",\"BvjruMsEbAqn6nlXRM77yCflcn3RbQ8nZ12Z+JZEkso=\",\"ENt4g30GUlhq+gZmtyHhyUGAFzGDMAmSxGAsjBxBVHg=\",\"EvX7d3j7K44bXsMG09jypJfuTpqlvxkkppTQTK3VxSY=\",\"9qlL9mEh1Zk5MpiGNtCqJHngKZr/LOpbfvwxGhUAfQ==\",\"GLgYocJQ1vi3eHDB71lCJQIUZVRg5LWqCcgGZIkEFzI=\",\"DSUYX9tKPGXgWWO4AxBYTypgacLAsHqytt8tBL6g9So=\",\"BjZm9xnJ2s0/85WZkmgCvZ4HxhBQsQ7nmt8NoExZ6OI=\",\"Jfni5HZs9Le/kaY/fb6VSy/6TO5yaZMxNLUwnq+dcC4=\",\"Ejeiv+fvyFP8TpxPuE2OfFaxJShti8gaVDTG2HNyBtM=\",\"AUmxeSGmDwJVGgPr3Qo6cfcEjQ+fR4kwdcYlNBrgYVk=\",\"IeEp7gUtpFfpTL3BrFc4qzAKq7dqPMPCNjfLYiGHRjA=\",\"D/vM+BjMz0e+3fhVi4JCyQ5B+2A/E3sC8HdCKNaXjZQ=\",\"EwGMZAcr2gNs5lMQUB71eBbTl6nrpW+HtWAkusXr6eY=\",\"GwCfLoq8A/SY/bhIV8IJG7sAlXePmQ/nmdDyyX4sJnA=\",\"EBVG/bcfMpkcEYDMB+rs9HkgzQcEaR5VWzvETeXFKJ8=\",\"HR9mouwGIfIpw/jMexU2g9mT4iDsWh8B1CoU20anhcc=\",\"DA0NjHn3b2LrjqeFhT7mrqrFklYXKhRHnTQQHcjmOtA=\",\"Cj8Dil83Bzwep6Tt/B3LYIWcEhjh+2EbpZ3SRTmclXI=\",\"C36Jq69pev6iq3k/fLw+gH26RSMdT75rZXqV8D8bFwU=\",\"CRxHoiv76MwGf3ABnqGi6qmzgf35D/qJcbJHgSuXf2w=\",\"I1AmGeNHVTtbvYhroOuvS2PAfCidoHsMdyj71gkiQdE=\",\"L11SgXSb6QEZNU51HqEm5XjMxDpMNy1nrmbYfAwBM2s=\",\"HOaFW124DEKXHMUsnDUnXov8dwVoSjkbzkFRrZ/Nm+c=\",\"BPA/I1BdbhF2A1EO8lv0beRLlVBgEbVkKxILdsSnonc=\",\"AvDzam7Nj1OvlbS5UUmXrgogjYnpdL0zWd2Y/i4rPUE=\",\"HPPE/5q1idClZguGtf34847Dyl6SxEW9TPvmxw3mSSk=\",\"DZB+FFEGEfwUYS5AZhbPzAs7ElgnjYAqWj1914UoTmM=\",\"AUhXX9mEz4TQ89u0lWSzl8F6yBfm/+NIiBMhznbjXEQ=\",\"E8MsJoicu/qvTR8l5kvLcg4cykUxL5D73qhDXZ5nKa8=\",\"Lyj3AtaEGYEU5yHvr7aSLDpC3Qj7sf1oMZAt9LVaapY=\",\"Bf2R7AVIAPYe4Si7y+My7ExOslvFd4HENskx1aRLY2c=\",\"KgcTfgIR1ABX051wexd8tXbzOZspuacBnD38fXoi0nw=\",\"G5WSwaCFJHDl+gRdMnJffOF5glBaozF6fapssx4+NZw=\",\"DP0wU4fNpCofWo4AoO9ShuBQRzgHPcyHE6Q8JDnBcME=\",\"LhDGKxtVZrUEfxgnn0aABzSUKQWExpcIVTx3KbagTak=\",\"K7FlOlYiHGJjsMYquKCnc9IltBSphJlLbT1a/QiS5n0=\",\"DycKuJvSIN32Lxj9+NJ49ng3nnthYAaovq2frJ9HPHA=\",\"ChMB4sGJIIUTZzuI1rMjh1lIj3m5mnndEdC9HJc7laY=\",\"JMsC/DSoznXuz1NBhNc3O34ckPtffiT76OyOoe9U45M=\",\"FgMWVTf9ouQxt10D3wHe57Of2FGkciQ9zrwsltDe/1Q=\",\"KHFm2HeQ9c9UDs/7G/Zaza8YzEak8RZLW8B3gCLhGhg=\",\"AqgcmYuvhHu7Ife3FB7+hPesVqg0x5Z+pvRUKfovsaU=\",\"IMlcR8LOF2pQD8GOW3mOv0306r66HWlf4hfgA6wvDhA=\",\"BUz+I5tG1JuvRWgIinKyv+0Hc74n9ufposArux/6UVs=\",\"CHdFZDkvupoCib0gErUJvMexJtnvM3jaB2nYrzfLRMc=\",\"JKfyFpg3MsEa0wFTgYQQDiywkHQt2BwJeDkYQE8cdTg=\",\"D6+lI8qd63WMxcD1TkhZGaOxxsqrbzIqNrAUghx0ZFw=\",\"DIsR8zGhfYOEixDvtvhxa6qS5knZ7hyVhLM00DeLUxg=\",\"Av6LilI6CMLl6nYAt4dvpLdZOP1WwDx07itgudHoKZo=\",\"HQOa2KzGyVFcS0p48bioV4TCh9X6DszvQ5AUNcHEGUI=\",\"G4khfFEEN0wLdKOj7glxylg/WdCYDDdWbvjvNjsaQXo=\",\"IotNBlvYTWEE44KMrtBv6aoR192OqQ7+/ChIkzBnSy0=\",\"HVf2TKb7Jdmktlc2aD3G+PkLTVWU/P/WA0RD6Yczr3I=\",\"Eezlu7u2EZaK1ktS2J165dHuvEFpIX4HuZ39/qD7adg=\",\"Icovt7GGl0tLtn+V+UOget9mLrAsc5LZ9edSZ2TnuYY=\",\"H0cTjYM7DIz2KU73fQ6+3pTqV6KKwKPmS8td+RMg8Qo=\",\"C5W+XK0xsGypfKdCidiXcqqw6AB9BVgijYjxE2ShSWw=\",\"B5SkjW0CAdSzr4bA/NVHk5H5j3ViMQXz4mbd4hXXYVc=\",\"JFWgPoM7Ha+hfymnH9dvlNjF0J+h+xZlNz1Qmojzdj4=\",\"B5nqk9eBw13qS0h/mEn/GADxtjzJeELi/eafVHu3Z2M=\",\"KP0HDjSdUGlCzCF6UAZM+y4+u9PN4WwJ/Wi35OqxuCI=\",\"HPUAHJz87oUvy5+NieGeM226lb7FRUEPRDW1sB9LgNM=\",\"CO38TkmsQEhhB040I3obEk5Njl1szeKdHunAQ3VsRPQ=\",\"LuW2UkKJzdN85MzI3RnpTNLucv8mS0aARL2oInsRDfw=\",\"J3WpPis+743Av5vTIuXxQoHrW7v/mM962T019MQ5JiQ=\",\"BMVk7nShGZRE09xCYekLGIbXYKf6aOuu61teNTaE4ks=\",\"Jf/nsg6u6PaU+oEDlEC1xj7KHKxxL147Ia8bmnvhF60=\",\"FKEDU2gJMGmypDNwJ/ppXphbblbKgY/5RHgMFneoNqo=\",\"D9U6sfxt75dlHS1m0PWJdrOdB9uMTJrBldsNq3MGAnQ=\",\"Fkdrw7w2QZORIFG2TJOcAAHpWVPHb3p0iVfXjMyIEEA=\",\"DFpSM5/YSx7KxKFjs21BlBoVb1OyVZBhYC5k0t0DEDk=\",\"IbY8MNwLrytx7oa31ckdocF83OvloKDl8shEZYTgXCA=\",\"G8zKIgmG2Pw9IjkacL+6V1pHtPgyMGUuF3Li3NGgbtY=\",\"FiqWltbfKhMDjgvG2i9SI5lRogS9BanioJBmz2sTpr8=\",\"HWYa9L5ZvVPakqzfVzan3OUNp5bDk7TkMAHSf4jVjW8=\",\"AftD/v9IsKTlrJsXpsk+JB8Xtd/HZSO2XcNmvATJ8Gs=\",\"HnCvXSif6i7yYUEkbpY1/QB748PXVavzu82pxOSmALE=\",\"FIkoQz/APTqHi0IO/IlU8E/dSVi8giphI98dTRXQLfo=\",\"BhswRT2O2utaDno6n5UachGlD8NgkDxLJaUeTjbcQ0o=\",\"CsrUvyLhS/MVN/OShtJftJP+Z/Fjvd68PpTekRqVVvE=\",\"BaTcYC9z4TmEF33ApvLXryaZiPhyuBfIN8hVnHmwOBk=\",\"HR+BPcodj1TXNEHIFMyw6Evq6O9EY+/7YS62rRMc8F8=\",\"DoLDV0th1MI5owJNaCK/oYbVmJuhrgWXCSVg6GlK2as=\",\"F+qe+e99qAbJkpFrJAmid//wnTYznL/fRodgZ5P97p0=\",\"GUVOXH/6lxa9HbXXB9TSS5CfTHGBN+u3OpZh70GnzkQ=\",\"Cvjcz77eogZFhncaI6x3bbmsTfN4f9+FfbSiGT6TSjs=\",\"J0iHKmrToHswFhrjdEDV3aJ5oSzC/+FHR7+QgucmMOI=\",\"GlKaOfZRnc3+OOMRx7D2YVUOOIhwdyZQ4c4CE1va6YQ=\",\"CKV6/+E1E7O7GWgDgaF/ghAb6fWse+DPnH5h9xDmOJI=\",\"IA0TsBcMEkolAm94AnPE9Vej6Vy9aGhOTk317ABhD2A=\",\"FMeaNX9TRp+R0B9EMrcoVR24Y6sjJSXC2Vz2FvegmNg=\",\"DFE/1Dr0PsbJBQksbV1Qqsgz8US5Yw6ZSDqDw0AvSDI=\",\"CrgCF3s5X2tq09x9GZX2Dt22Ppw3inUkeggALSmGSC8=\",\"WJ0ijzFtp0+9jwgGukX8wfMdxFLjdDAFC9nLjz4KzA==\",\"G0bfb4iJ/QdbWF1hkl/h8I0VkAB0vOcG6l+yEdzGPUM=\",\"HSuTgTKs9w8SK2SuFy7BqCLsveWhiLR454nFw+kc76E=\",\"IwjCA1RNFi1UpLh9khAu+Fy78atMPALWZCrwOHMDM9o=\",\"Lrc3m9aZltgTE2yZwuZvRcpGe8364DoxXP456pnu2jo=\",\"DLz4vgnneptwBPqknFYOhAdwODJjmBlsBPlI0JrFc4g=\",\"By7WlzJC8Rfl/Bw0TZvDjV+z6UvMAvSIQ6BX4ZusyRc=\",\"BmcMOlaNfvt/EOrr1yfnpCSl4rQNcgH7ZtC3RyMIHuQ=\",\"HiEFzTVuvqqhIjMjOioi4FJMgiuE+7NotAnUSBku+dc=\",\"EPMJLLEm2RPoKeseCc74UIEmWEheWsBsFAvRtUn1OQc=\",\"K88bmRfLc9GFauXa00n/CGYOgApbaalZrdGa9lWIhMQ=\",\"e/zZiP7qvi++A65xQIwaOU2vKUPI0y5B9rcvJJO/rg==\",\"Kpd91XNakRAXjiuwmJxxKbqyxvknb/GpxLOGehFbgV0=\",\"Ip8B5lP3soAVPeH41OnqoOGOgcPd/pzw9RhbY9z4864=\",\"Jy6+8QYWq5x5407/ALD66nUh/OpV31Jr3J40JZLalGk=\",\"AsilCFFw3I5ib9n18RhvmXY5dupqwIwlPQJftG4VJsc=\",\"K3e3x/e4Yra9RbiUrxzRzKRE9CbWNXH/5tV+YI8SRBw=\",\"FRggljnlE9ViMYSHHMwaAuglNraNSDlXdJMNvU8TDd0=\",\"JBckT8mazOjR2maF334zh2vaPdYyzWhCQqYNVFVbDvQ=\",\"EtvVYW6Tr/8FbnQCr7Nh9XU+1mjW3tCMyL4/6+WK49E=\"],[\"B1KvPG/cyvOGgnZoXwppuXSeFwaoKRe2TsLvhH+ARVk=\",\"BpUD1BfiX0Vox4WLqDNDAcD6GcGzSLx+GKTBrOHRVBg=\",\"JcGxIfM/TPezCOxGMPJ7YD0iqoHKNZXoAcX6fZdwoJY=\",\"I9a1UUW9sygnwUVq9Ne+TC0hPoJcHS8Mn/mbInN1H24=\",\"GzV7zj7z8rdq/CtYBIBa2xTPa/N/4jV8eap9azKsrso=\",\"KOxawIgcHmQmukmUCYlKbzwnb+Vonyw1yQJ+gJRId9k=\",\"LJhiUkrIoHtH0hHJxQTIsL05jQKKz2kOS47UAF3Qbu0=\",\"H25vCsSut6UjQ/MEGAeLQGRM1D4pDaC67pKJHEwGWsg=\",\"A9s1F+Iz+KdtIbL7I8hfp8rMV3dp7eoJquOUB7mvL90=\",\"D8Mz3KQYPatHnFli6wXuS3morG4Mzp6bCiFCJHv9CHc=\",\"Hu0oGXioOVwEKJuGGXZzsPK2XhoTUmRSfiUKXN+ZrKQ=\",\"LjcNsjhX3jaJ/JuQi/Ra2PQtqQD9tMyUp6QWKGVVp/U=\",\"EJu25eBMDrUpcTDGUkCXRw8zdcEvyQktIe0zQAYXoKU=\",\"Bz9KF9Rc5MtvTbh9bz9fTxZQxhjkA+GHPqO4xNwYfPs=\",\"GjvNRaKx37jnVobTZRys4T4aIvXYOMtKYbF0F2Ze7PA=\",\"JyFHUaqG/SZU6gX9JhHw2QcodDOHWosMPrSyLSTXOrc=\",\"HFRj1ARgQV3GhO8kFbpmYosXq1+fvJWXumW3SJLTRAE=\",\"D5NOwezXrXTeWQgXNHZYoip4NJa6uZQ8oaPGBNTLdF4=\",\"DsKtHsoLJgxMZXPy87UG6UbSqCql+eZcL8S/ZdMQsdE=\",\"EEA8b5MFGa8xd6gvK+FTLldYEnyp/ITJPGUieWGKyrY=\",\"EsuDGWg5cXQPqBZggxq229PZPHvNRBqRKBDZY1gr80Y=\",\"LHy6sztilPKS7g6zHVPa8uuElNlqgcD9vWL/xoHnEwI=\",\"GeFsG5Eju7+PreA7SjbF34WA+N4BY2ebGBXckOxYG/I=\",\"AtJzT9rqbaVwMT30pTPABJ5EtytkkGrpzcs8hnCGN6Q=\",\"D+185dUMotM9Gt+pkBYfx4DNwwxb8tWIGEoZD2hlZ8Y=\",\"JTO4s98h/OhUSm4S/Uw8H6CdPh8UbM+rUq8epNbqNhw=\",\"JUqbDaF/HRNJXfr2jN6Y4iT4BpegwxuJrwl/PLJw8nc=\",\"BSoZZ4nn48agIKDS+CwkapA61/jOPO3oFT23KsQc5WY=\",\"Id+diZmB4QBUGq+ih1PnY6TFoq+YRbDpt8TtHnvu4sU=\",\"EOklTZXAS/SYj23lH7AZyKfFogFotqWUeTVeiAAoyHM=\",\"GHLUBK+4QklSlY8p0Htg2fho1fJqTSYPhDNztwbD6FA=\",\"L3+7syr2fYhzcgECK1am30fUdtr6e4h4Sqmrc8V6b54=\",\"J7WtOD/AhdLCY56AYp1whuQDCujgjrtAOGC06ytKxIc=\",\"IKBLpzl16hr4bqQY5bn/9CS5OjgH7MOuzOx33pwdWx8=\",\"BNJzXbQYlo6AR2b1efKkq/ed7rZiQPspkHsDTbk0cuY=\",\"IQuhHzUmEBAZuYqvlJLARJHu2nAeusjGbEU1AxdvwNU=\",\"BZjHVBPz+EM4xN3xduhW9s7XPMrI1byPxvEtXzBuyOw=\",\"Dxotn6hAfjEMWK9Ae/cwvs2RkgcNeqQhU3nR79nm0ro=\",\"C69XesJiHKvc9//tQHPifR9xH561qXOcEr1t8Ho88lc=\",\"AjujBX5dnxQp7HhIuJOrO0AWG9vGOHyVjFhytEkbNmo=\",\"G2AQ/WmQ0+SSj9/3NvqFe9UX41k15UodbK3ZQerbhAg=\",\"KUP9rblmB1MM2fEADbUNovxcsDCwOYXR08tT3NaTeuk=\",\"CTdbmP3XN/J3ouwmpW03Rlj0SMaQ/I43bg8QEuTaQPs=\",\"HBJPnzomcjYbGfq68PLhFYsxP6I3S3LDcLRmK/luiiY=\",\"EOKCuTeSwqiTxUKURGpjuzals1ZarXUESZ/CLrzFiDY=\",\"BL+M1nMZn0Hfa2e3bcRs77QJcfD91eH6Fe4ZIatdhgM=\",\"FBDL3CYZZKKtUA47bq6qUOqLEZ6hFmb2VY+bPVhVrPc=\",\"KxeDO2yZ2NRMaPGmYqR0k9q6WCvFScPNjOR9Vy/8kTc=\",\"GsVaD52dSYMpLrMEJ/HKAbhh8XgJ8v2U09ibL3JifsA=\",\"Cl78Qd52yRRBDpFH5eZ/icd5KyAoXNDRWhwYkekawpM=\",\"E0S221Q5xGoi0UT01YQ+KcdQsaz3sHJxBr/blMwCPPM=\",\"GgQYOehEzaoPfCphypJZ6GBZklhJX7ANanW1xQPnGXc=\",\"JVXFKdNm49lYmdnErUwtSrKE3kpF1gYK2RuKi8X8JN8=\",\"E3iU0sf/BrFB5gHJqV9WZBGcoytV3F4WZ7piUklUpyQ=\",\"Hy7Rsmz6OJGUR3kl9N07zveeiYKcjJZFZ4NDoTqy9jc=\",\"IHKwxK9G/V0gASK+XFAR8b/y1Eq11ECtlG20uhG1I1A=\",\"DKs6jnfEOJbvxKtbsS4/1tI0oNyyNsfJNcV6ADOFEe4=\",\"BADoZ++zqIhxJvlsqIQ1jpafFLqBvk33ZoZS4VpYHLc=\",\"BZTxSvcCclCRGksFR49lm6sYGrQmYx+kw2nDYf7w4J0=\",\"FxNFCUre3IfzhA940/PtZ87ztqaiablxmOASq/DrtyI=\",\"H9vuT4WACvz/oQ12wlwBhntHLUjaEpbsqrR4GQ+B4kI=\",\"GjfIsBD+Wn8pn89Bc4xQ9akEyrWC5BGsFIKODBi6h1M=\",\"BZy+kY1Mxdzy06MbOvLCzBB7bPsDsb6ak5p/c8UHW44=\",\"LwBU1xnn8NOZHlIXigINO3ggp/KgdWld8gGl4pKDGzM=\",\"DTNTrXObrM9cqaVoQNmXdrWn+2D5F53BWVDAY50Y+4M=\",\"BQeow9P185ZeLp/mL+noJGkctTr9dDC2JRU2Ydo+lN8=\",\"HqsdK0T3n1DiupF6lrIZNOvUPvUMqlsh3vXv2MONkXQ=\",\"D/+Xq8WmMYsDtG6kNhyNKf2KWk2tUShol+d8KrqfJe0=\",\"IokHwUa076Vq9bjy5ZvqoBdBqxDzKHNp78144bFt7Qc=\",\"GDognRSvShqdsMZHrYJvt1qmdQbQOlDm6TfjpNzC0M4=\",\"FwUrQIYOz9S65oSuEicek6MuG3A8MSfV0jVYvXVJbSw=\",\"A6YYELYOAZ46X7U/sFX4FgDI8mmzyX/CKLNzvGpeVk0=\",\"KW0ENNl3oQWwf46NU3qDgeiF3P5ILDq3c88cObO948k=\",\"C/rHO45/mIK/aRJWhK4gxxhIgtN2POh5EdvD6uz+hsQ=\",\"E5AOITxIze/j5wkBEarxwIc+IboPCxJNqh6QiWd+qTc=\",\"GfVyXYWb2ZRpNp2KWwKUAdkKTHzzcme0cA3c7jH3i+8=\",\"EPjCCzBiK7dp2QL+wGTYf+hwBJfeTDoyZzQUYD80HyI=\",\"Gl1EqdbrFmcn87rR5Mnk8g3Z5cCbj/FoWBPoSHX3wmc=\",\"KFgS0ffpxWUupUnv3jQmAZQFuwgECLAfUf8Er1yk97k=\",\"F7XWV8pSTE/ctkIbvxXc6q7IkeenMBd4ZVQqPsZ2RLQ=\",\"FRISDlTe9hGfxzGoDr+LmqRJpealZU3LFu6HgbVcQO8=\",\"DOb9n/Mm2ZGBftZvD+2TKY3IEWwF8J4hRIMMB6+iVwA=\",\"FMnlRP/obzEMAnUircpuZn2/E4pYbm+kJb8fKyEUv4A=\",\"Louo5X/hxOoGqUHN0iQsQU/Mmh5kW34TfOYfxEVt+iU=\",\"Gh+y5p6/Q9y4rHzw5oVhcL6MYsodsPdxINNqren66Qg=\",\"BZnhDdxxbXAdWFfiPewRMLVQnDkT//xyfOIHeDoqzKA=\",\"KQis5Vb/HzaPhD4IQszQ36pCo0+vZ+C3jebEfeK2oDY=\",\"HoDTgc/hhLLxH+ONZEVKYpLv8j9STW+vrjTOFQ0bhAU=\",\"Ayw7Kohyw5+z7cku+V52/bY4H4Kfv83e8mAE2ltdcg4=\",\"DwWDBuTzl7ewKljdrofVFl8hu2EJvmTNMXUJf2PQ1AI=\",\"KpeCQsVR+oYm0N717llnWZjdj/kO6vp9k1tYuKLQ0fw=\",\"LGRs+NntFHRviipDjN/Ia3D6HDEDPUr9hpSnNj0coLE=\",\"HMfVnHVqjpMHH5Xx64pcvCruo2ZxVDKHO+j5Tj+chzM=\",\"DQnQ5rZHV739cSjQQcQwsNIagKN5LQZ08AKIcsFP2Os=\",\"DCjTnRRcuLav4YV2QDCA7RlFFHO1eJSaSRoJW2oZ0II=\",\"IqKoXxMpFaoJiYB3vL125XLkNA2AhXCO76q+zDfOyh0=\",\"GtaMThSKbGGX/dn6LEX4xvMRHdrFLbCL0q53hg4gOm0=\",\"GbWaTrI5iJbieg5nBSn79LcsOVOoLCu6lUGlIYbPdHc=\",\"Hjru1h46e8bb92dPgAKlnuKNPV1Rq7612FDbs69QVZ0=\",\"I30U/hDMENQc97lUXF2s0kUgdyUifuXVV4o80WPEwWE=\",\"B6VhsDwDqFb117FeiVRIQBqKTd8d4xG1FmNkDIHPRMA=\",\"IOPBICH1P8IGiTmFZHo93WT7FmAlekudfTP7qL5ymho=\",\"Ec/dU4b53fNunhonHAqFZeA6p+QnxiTFBQ2+q0CxC2U=\",\"CXuQ9wFmaMVThaDxAbaZ0Mkk0VVpGOtYydmhbHgVs8w=\",\"I91PggXpy54SPifoD0a46/tFVN9BUorNvKFBZq9wqLE=\",\"IATPSDktHTSSBp0LIMXqY2x95HBGaLrgQA8y0GeLX5A=\",\"EO+6frsiDemvSvWz0s9OOkY9b2GzpRsZCzkol5IrFa4=\",\"JsqPoyhgRw6bqV8rMo9FttOuqMZpT1L3srYTmzHw5lk=\",\"Lnpgloiekyw7vcEjSwQpRsqNvDvZ1CiU4ier6ZSzlUw=\",\"KypbIiAAx0hXF+UTTTHZZtAQlNIBQs4L4O1bzSOPpPw=\",\"BdJSVm2yQ8Js7tlXGf9Oay25JqgqkK9mw5E0V3JNaIs=\",\"MBbXo0LMrv/4M4NPjIXkzd5QL0z9Ll5npDTO6o5+hzQ=\",\"IuSldCcgzFRfWoteyB/HbIVmdMKVbHTpPQnaFbnqhdo=\",\"FYwDlYPZFHFlG0JbZ6nEKHRrfS/00/nHgFzQlyUogrA=\",\"LiuRk67nVzuhgQXTbVRSY28KSiP2u4CN17g1GzEEKIw=\",\"FSiO7sB3l3hju+zCevDohlNDT521AEG8ZMrjpKsCZ9Y=\",\"KUrD0j+tw5/95PxRwjH8sekEPSBzhKUSgexpk4Bvy8M=\",\"yZTwFUpgQt8DDPy4d16puvh5DRAfsAT3khve/uTd\",\"I74ZfIPfM0w4GKTrVPN1X7pa1hxspAjW/K7nU6LkSeI=\",\"Cr5PYPVxAGLfeDiiXmE+7Fx8UAKSz83YjEsQT5Lmbc8=\",\"Itnuos6YG+aNA6Ynoaw4rhc5O0L9WJ6Ekt+GvQP2m6U=\",\"F/1/TmdfRW53kCvWjaQ9egzIunUHW97HOAC2cPrvLIE=\",\"A8vxORfY9pYrhb2bG0deCDqaZQMpAmTXMrxwRetMDno=\",\"E+OELni2vjQUwpvVUoWTZzvPegccnlR9SmqOjB8p9Dw=\",\"AmOLzDTn7Jd+YgWjVtgHPtrrN9bQyy7hXMxlfgCIT3E=\",\"GCSjb5szzYiynZ1WeUwC8EmMjDUgz+uNfSPfAd0RvLg=\",\"L2TT6elmDv10eiihgXGXcMuJrMho8dsLQqDUFCTVuXw=\",\"J+l2uVwdsKQxzGPSvLd7dCDqtyQMqvvU9u2Ut3HX7iA=\",\"BxAXzwWQOKbxrZIjyEPm9od3Sntnftt9fdbU2Krd/w==\",\"Jj4etpt7LIfz2fTUkhADZwQaAMwgCRQC1r9JXXTe66U=\",\"Hb2PenkO5PthI9gWLoebbTNOE3wiTadbr5sA29WxSic=\",\"HfD0RACM3+9DSE3AT1/dFpTWyQ6PLjWhhQgxh52deis=\",\"KsKQSUYrp3BAiRQDbw/ESfSsFcSlwWdo6V4khsYtqLk=\",\"Cv7kIWzeRBq0fbkP/a2xKwiXisb2I/Os3k1PnYx386g=\",\"H1314dM3LcvIPXByv78rqJFAJOM5jrvDRhQD05oemJU=\",\"ARwJ9L5EM1RLtgTbZipyK7FoJP2FxITEW/Jd+l6pcy4=\",\"ER6l/rdW6wf5QrX7I4Sdsk0QZbJ4tGQ9VTEcBnLP+UI=\",\"CrfBlHY1h/HcMODtU6627rYDas1wK77JUJ1kmoH5QL8=\",\"KCxZUfmIGRYD+d0HdZpPZT8Zl2lD0g4w1MD4+roNqgU=\",\"I7gnIafNqsKjn3tL0QF25QmD8yz9qLq4jqdG69TSXuU=\",\"C6/CLDHnNYcN+tkaVqRuu60psp5TFknIW/ecjckceSo=\",\"JHEOnNn29C9xzIgVk0zofKDWd/rPHz2JqavC2omPloc=\",\"JHXMq1DiwT+113KgdXHg5r5VGlXiUORPIq3xx6TX7eg=\",\"FzJv3mjhk+SjF4LyrOzXpGhJOqlNY4M1da5RhOm6JEE=\",\"HQRL4CXHn2ENQAnuCj87UNxVbnhXGNGW5nxg/NpJhFk=\",\"C8OFF7C+22agROOLHBmdEQ+jat+hJR1G5jXyLOj7O2E=\",\"Ahin7XtbTjnSHL1OzfDU8xMIzCBVg6nvbZHtaWm0XCc=\",\"BwmJwj7+HA1gifm/mHvoaFS0v1qoizfdo7T73dsGjzY=\",\"EfCh8tWJRjBwECc0YWOkxpdAI9MheA6RyN9ekeqTDHs=\",\"CQcCAr0UTEWrcExy3MQKVWbL/Vgm969HRrRHKx5ow5A=\",\"JDOS/kzWymtnR1lsOHRQzmoa57CpDroiLDRw2KgBOPc=\",\"GpQmUJOrRAYuXQ5n359LcC343o363KxstCKWgRF6Xak=\",\"GrMc5J439pC6+ex7FEM1fNJNe60WqebpXkO2Vk2Yexw=\",\"IXnO7w/u47CwPJZY6XtjQvJbII1+2OUmFQ/DtVkSjF8=\"],[\"FRLfATW2aSWJ8HEUCmB0nPd1xkKzANovtK1cbiOtTl8=\",\"KxCa4DftMDYc9lRLL0zljzVliYltaohJSC7T+bZuEZg=\",\"Alhb7OBu/1U9SFR4oZ6xSeIRGuTh7LHWH8EM/hwHfzQ=\",\"Af+Jb0wGYvSyrZJnQbSB0DuBOozDQ7nC0rxIGccLLzw=\",\"GwyvAvQ0+j1M1PuxPTEWrItzhqWv1sZwduy8NwSqRdw=\",\"D8t8nxPIVRengFiUrIK1fAby8VOm9R9g+OUIaE3+W80=\",\"LcK99/Q4EuOc7yEOQukrSWiti/VUVBGCNUUE0yy/mVQ=\",\"Ba3Z3yDBiY2ka790WUQ4vrB8mmVjXJD0XAoI/rrRNmQ=\",\"IcraZkFmTaqZf9VazouIGRzcQZT727bKWJVEfIpYhZ8=\",\"GWI1BFiaYPBYsESJsVMyTRbtZmZ6BN9XKxA1kLhIvwQ=\",\"F3ZELYUKQ2oAXgLGR1ty/S1fhEUokMREFihI7h1X3sI=\",\"BsFpH9bS7pg5ZhDzyGjXCHTyTv+FOTjYf6zokjSgmpg=\",\"F/DVzzYMNUpX5/uYba2zquuglJIOdyzdmrx1hQQAr/I=\",\"MGLA25ySXEjML4C2mNlgJkKoTPow4b02QI4s+C7zNYo=\",\"I57H5LRyPI7TW5h9sD1iwqB8RHvdbvGDsGR4IfaHTC8=\",\"K9Oe1/T2py0CaT6Wd0C1+gMU2aH42fiRHCja0/Ff+m0=\",\"IDUOdbvVYuM5Jpz3/SIft8btLKz8yQNlaLtLpcsXvcA=\",\"Dpe7nZeEkg+zmr81pDNDftb7YxUlKF3DwSbiTvVOS48=\",\"CxLMyHHTJy6AohZGFANVkEjkpbOvRF7uvYIkp+2saF0=\",\"Hfo7BcICzZguPXPLgXCdXUizzBBfp47I8PIWQ2gmvi8=\",\"CNn7sHFcm/Ex1t5wsojZSvwC1GlgRZ/qMOBzPtO+aw==\",\"KSt1FCSPGuZi5UN3Bc5JFT5b4nwhLoYQffFyX/RlMy4=\",\"HViwaE9k22Ias60NyYJj/XKF1rzYbgehRb3GqnXJAe8=\",\"BOe71o6ZiakRkAgvCymwsK3CvignYcRNG6aHdXUUrMQ=\",\"DZOlN0Z3x1vcG0BxsZSOU6G2cwjnDq0XhyWwj9ntjSI=\",\"EeyhiInp9Jsfl9WZjSNfl8Fj0XBrTT1MOA2a4fPnmig=\",\"JmuSTmeoaKWFs5jC4/KOMhh4MjeGK6s+kl5uep1lmmA=\",\"DS4mrVjqzqO2oUwceAPKynqzxYgbxrWydFMcLUYYZ/w=\",\"C8y6RTK37qbD5AE1ZVFx+9knE+9ughgWlZHlATqEvd8=\",\"F6EuqXUEBbPVkDCvA1wY5PNi4YPaa4TphYCPMgIR0GE=\",\"B2UQu56xkHDco4ih06la7MXeSixpwxgWZfmCtg4Bg8I=\",\"G3A0s76waAuFi8jxlSjowSLW9oBZsVxwWZkQyZO2vAA=\",\"Dqz3rJhi/4VlhSFRcTh5XaWfQnPx2Wn4FbqrI4Kyi9k=\",\"E0QEO+7xr8Fl0JTIxdpD55O7qYtXnyQXoZ+/5Tjiy4A=\",\"BWbcoQoLks4Xe29ygkk+azE5Hm7dP/RWMnflBMRBsfo=\",\"DJxrXEa5h3wu6s0DPxhP70l9LtGh7ydrpFSNBfPHg4c=\",\"Gl+Skh1PNKdEX+8GGPGxoh1ocUuAtoUN+5yDT5iKlso=\",\"FNFOYhy+YnAigJ8H7geMsrP+T6AkcV4/cZKlEPHY4QY=\",\"G29nyi/wei3lj3oKyGB8kv6MQTM1WTjMmBLDKxK4/HU=\",\"BMO7f1VaGodH7d5f0z/uw6tS9T275u8j98JuYt4m+hI=\",\"GsoDo9h8kOej/7uCMxSb6wtoCUktM84+UHlRqjimYzE=\",\"IpSrLxQ+SaI9J5xv6RTWfuh4s9xU+df/EHu+eKwv+vE=\",\"L7QwOMC0QzrAyYCfTn1+aI9cHTwI9mrGQ5f66UHmqkM=\",\"J0R5hnphbGAuh8dSH/+6qF++szASijvIyLg2D7WjKWs=\",\"GKNBDQY7TnIBZQAijYiJ3GIyAbTAVdq2YLZTR/tO+CA=\",\"LW/o09aUul2tuQT9aQSiUaotNR88wRxtGqlP/u5FJhk=\",\"HsUYJRjW00kKsLP/iZ74m2ERl0MYjt3+uyVNzSp4fiA=\",\"JjoGHz7JIovfk+uT8mlf6mKZJdbc6C8Y5tunmzvp7Qo=\",\"L+AwCoGWuaRusffVKbTUwJ28WHZaQqnzth73wQe80iY=\",\"CGL0SG3AM1DqY4Q9udoJpaPDASwIVKest17hg2PcBBQ=\",\"CezQHX3RUxby099yqecxJ02uEWWSra6Kge7OUaRFM1M=\",\"D8Enzu43f+3A0tppYXc5/nkLrgKIWNvl24qT4yVOuPg=\",\"FdIkFgJl345eTBth5/lWCz38V2SfMDj0QLZOkovTKXA=\",\"EQ94X30EFRo3tEk1obv0eCr8cq0o4ELEL+Y+YwJVD1A=\",\"F//+4TcDm0KUPm+NBErofOBtX7HD4uUeMAmkX6GHP3A=\",\"CssYiJUAZ++pesrZKR9jwFJFzeEW1+C+36HdkNrBhaE=\",\"IqSrqlgTdUUvw7UxvU7VT++bv+4BbmZeQkk/CcOT/tE=\",\"Ja3s1jaA0j+HvmIm7AWivKhSSWPd/6+GM3nUyB/Hk8Q=\",\"IgzpDtZEL0Weyh/h8gJ+Y3fnGJ4PbvQ+HNNk6coc654=\",\"I3LU5ACf7V72WjZB2zyNbsszBA/CWYkDk5RIGpS5cZU=\",\"EZJrCs2USv4gMM8OiZTZDapTX0ZZZ7ZKsLbPaeMWpR8=\",\"Eik1l1P7Sg3HQdqEvJdYqgp2YrMUox/gA0dPqtGOOAA=\",\"Kzpm0WbFGmK/avLlSJfFHkX9CL2nTVhXrf6P4+S8OXc=\",\"Hn9Po2K9htaSd4GvKkysRqd6GbKMTuVbK6CIHS97ji0=\",\"CR99ZvyOoufqlewYdqk9M2iPn51H08iwffktFVTjjLo=\",\"LBeufZr4AL05O1+g+LFik9r0nlr8raUIR3lbh+Era74=\",\"Jm52iRsCcbytFkS4Uu+N6dPD56U+IvbPCW70T7Nbu8c=\",\"Ak2jDDTkm0F+bOaW/vfrlOZ7TXTbbS1c2qR3fCYCFmw=\",\"BMPTFwP/7qIu+FCe3UaFhrrWabdMJfya2kmhhZN8LJQ=\",\"ImUxTGbhgv7KdV+aDPfFx/fba1AeAQwoMVn1/MW97TM=\",\"GqF2ZkPrMPljKfo+zLZ5ZNUQBU25WZ9fJTbXw39cEUk=\",\"EH6NpoiWpNOrQO7fL6deAl94fdknmTVyGOgj+r68iUc=\",\"GRr/RLe/mQJ7sdaVTKCQHJUPe6jx4VSUdfDyisbnLWA=\",\"LWoA7VuKsAVaQneznReJGHROxbTlo5IgXdTq6bTx9Qc=\",\"CL3dE84+bQrdK6vF8No+2cJOEKr7KJ0D6WgWPET05mk=\",\"LwV1z5t96ttjQyD5DYRnjXcYM/msnRtnwxiXP8qxjxM=\",\"E2agXTBH1bNFL8xiQXNDJF6nJ3lfsNBe+4CnXh5NfLA=\",\"I02twpVXnGKxCA/WTzQFlOryWLlCJfzWvrEOXvtNb+M=\",\"H3ixwVKkACeix7CsGb/27eMgLqG5Xl0K9DElozzqeCE=\",\"FTLo21/QpsLHhaC8oRF0GQP9CJ2bc3Fb8N1wwuFN+bI=\",\"kBJ0f//gXotEgvJ401ooxvWObVAtaaXzUSJSJaoCeQ==\",\"EFsZL3eMQjVPKpedkbAv0zxSxZ1UKhKPwI5dEclvvWU=\",\"JLy9ikkvVC0ub67mxQPJxvemfPx9jnVnWeC65nmSC4E=\",\"E+VZEylfJml+qM4ar/sHNz374kuPQeeJ4F2LlsLcnis=\",\"CsUk8pCNjhKSoY7m1e1YPClibuvQOlk9sBphWZwoYTk=\",\"DcQCx66+PwI8pLdd1faaz4r2YH7a0UvYBhgQd+QRaKg=\",\"BtaHtw8gCATLOzlUZgnBrCMJxLWfyWx2c+vfLJANlAA=\",\"HgwmYs2qkTNuEMfrPG6rEjMKmdqKCV6Sj3OotFrMyLM=\",\"FL4MvbJaX4TTa0Ffcf+Af534nb5qmFAhOiiKvebbYmQ=\",\"L8jIk44lVNnQLhNesNK9JROQkC6C1uy0rDe4q20SIzs=\",\"IFnzrR1P+ieH/gV3378ScBaJuzNZZHIZ2EoADpXGLJU=\",\"AekO0JYAsa1+X5J7peQNb7h7tTfGldWrb+8WbaGP5/Q=\",\"Bk+1l+O7Cj/bjtJe76lD9sohFQtOApg2/THWPLgSI84=\",\"BxBkQxT/fWCR6rdzJ0Ibixj71kq29nVrYbqW15hU1vI=\",\"F0kbYi4vR8rweiq/C2I4lulzZH0CvgEfCZuEr0Xf0d0=\",\"LHqkOCwcwYl5iN1RJD+s27fTfoyrLieibdf7B5XXdxI=\",\"FGldKMf6EupgROiYptimWSpfERopNiSkXcJJRPd7txE=\",\"FgLnfW7jpGtgrKa6ZcgUV8TTbI7hSzVZlmy+oK4yzvk=\",\"GrAuW/r51M6sdfU5g7rplNEtDESigNfi3zKD7h9CmtU=\",\"DSs6FIsT2KVB48uC1iTLMCCbT1j+9RIbt06O7Kyr2Tk=\",\"Lmgu2PA8XpXYQAfompIEPJaBEc/+nRhmUljfDTpqm44=\",\"FCimucjMzFl6nq2jnDz/8BVP2fXOSHjZljuJx6h4zvU=\",\"El2uQHW9b4MxT/cXLHDxkhc6LU6vCdiHuULUW3z3raU=\",\"Jzqv6mLvatGFu/vlSnU+WfY5qy3/hbH0wKKOITbUvsY=\",\"F5MUcF304LUw8dN/nQLDqItm4icu3KFhNlYVmZsc9AQ=\",\"DcBaqGF9V/2+MNdtdAet1qLpX7c+n5QuTCQuLtEBYxg=\",\"GEafNaGtVrJYseYCQ8li7m3Jn68nTwL+tCqKURgmUsE=\",\"L3m3lmMYJzmi/gxgcHcWPffA6RkxQyNDN7kAfPRy/3o=\",\"G7TUrpRtXsfPsizqgo0mO35XTqd3qokcsLoHy0EsJBM=\",\"JycLJ9yPuc6xxapaSfl6eVwdxlL5AS6iEQrGh332wgw=\",\"FNo1Roc53D/wEQyR71QL6QTHPl1x5bC17aXsbcsvbq8=\",\"LpDZ7j58IWSFG2SvvN4AS2wLgq58zfb3iEn7mBo1ou4=\",\"KxVhLrlCR0ab2Uda5L3peAURysq9VmwedLoXYdYLYVg=\",\"EhxSFXa6SuSgXtJWVlGyiT1fcE5cbwpkLGDlDfIsjvk=\",\"I4Y/0IAVgu6bmkyD87bq74PFkGjAsdS56T7F7BoMKTg=\",\"E6WXoZMH6Q+wR3j4Ly5ngKnixOA8sFFeLLlgxRg4aT0=\",\"D+TxEED37IA7qGzG3Ma6AO11aaAMtKr1aF0BS+7KNag=\",\"DDDt2sAz4/ETiUMn25djqv10ezLRNEtl/3EIF3El3i8=\",\"FkSeu3FzfGUTMmtGNpFP3J94ZMfxACWglzSIDUI80cI=\",\"Jn8aoRYrcoTOyN+DQDJBiEv0opVH4tDEcParwZ+8TnU=\",\"D/plwSsg9awFqwNaO5zwmDvLTNAHXZqeW+d/+bTxe/w=\",\"D+VQ2eTj6txoiDqXe2hppYh9sVP2vbpJIz9gvvd79Eo=\",\"JVAC8UxFrs+MvczCXCXPFsnHccZT3SE6LOIuGQ198RE=\",\"FgxlAFQPibFF3lqp/pRGBOqs/L8cF1UOyR2mB4CCzho=\",\"E4P683uGbZl2n8MraORadT+APqNuNRvsNCInKTVsY5M=\",\"JAsa9wr2SNpK5ohtytXGc+Wzauz7fy5YvRJWTFp3aXw=\",\"DfnxBYfpn8YoC2qE8Ksdy06q3IlYUY6iu9XmSMyknho=\",\"JuQmHyPwhWrvQpowe6/fG1czXXoPOKuZKnelzKm1CtA=\",\"FFuEgsFZhvvBpAhdqyOb8tW1JGMrrtOSc1USc84XZaU=\",\"JRAapHFaur1Gf5F2fQzQ6AN3QYgzgeOSyFIbCMbPYt0=\",\"KJYljx0T+LVWuS0LX+BoT2eoZlvZd0frA2Ttm0HLK50=\",\"C/wlr2DjdfGn4J7FwEEe4UtSNG7emDffVwNCAYn9h38=\",\"KaBCvSXW86pd+ZYZp5TeF0MvvRx1+jOhAQwa8wy82Cg=\",\"HNDecrZYz6iXXc6XfMxrbNBuT49J5iDnLX6oT/I3PAE=\",\"IZfERp7syni9Rim11TveKajTIiu//8WUgFLgOfGONGE=\",\"BZxvQLKxu4Jzk1bCTnjuuQDR0QV/qdSCiRV69gPQXdA=\",\"GM4we4njcAhwxwpulGDxrtUWn3KdLnX35sfm0CmPwzQ=\",\"J8cKt9V+zwuDSN+JxC44F0ULPwGFGWc/n1COXh3crok=\",\"Gq1aq/N1Hn1BO4E4wnaQNehZEic5XQ0c4p0cWztCpU8=\",\"FlY0tUdwVCpJ/2hOyjBMmdnQYxVBIlK7gqLOXv4k/ek=\",\"C+eCbyZ+d6znSk6w4Q5SaPB/Us78HXt056W4KgjIUmY=\",\"Jj/b6qKEDAXeUt0Q+0KBc2GhidKr1UzhRf7BjLEbftQ=\",\"LB3dLolsnatVM9hADfF+s1OgGRublygt8Yd0ETZXtHM=\",\"CJS5DBiwXX6jR7jb4Ucf4AILnQsetFoHsPcNSzvZAig=\",\"MFa4CFbJ5sotkqW7O6RsA94ieF1YVlq6UI0tiYBo10E=\",\"GzOVkBsASRcuwJoxTkpBg1Y3J9Mqh3Z6CU1wU1M2vpM=\",\"FD5loqh5t6NWYNpP4hQb4zwXrg5vEyT7PNmh0GGhV1c=\",\"Lz86UMgjcsrGgVMiaY8JgmIQpXGpzWTGjf7EcRpf5gs=\",\"C8wzjVqa0VUZqgDon+UswkSRQW4atpY1pn0yRuWLEqw=\",\"KkYvqcSmguEYzO1lpK7JISSW3ftd50NynLKB7Dp2qPw=\",\"BzkUSc5+/jFfgW8MHDrTO1IABxBu+NEcKiRj3icKsoI=\",\"CMwrwIB1PHcwxX8XnjjL+VuV2x/cq/rgqNI5NC/GjIs=\",\"HOFgUDN5oAfjirPM5h1voNeP9rGVJuFUYCPLbd41UaU=\",\"L+X1PmoW10MOyadl1kC9XeZYdQm+i9dzvnEHPk5lKXU=\",\"K51jWePeeyUVm40v1CyWJErZK8tU8mrYpqELJxPeTXM=\",\"L3MKD78kgQ1JBlUhKWgJtQxelqa9xOP+RNnUUXollyg=\"],[\"E3PHcc3xUSGiJPMw2EtmiO+f4AOKO8JqKOMZZXigAA0=\",\"Kfn72jyZmDYBf3bhIa86ylzni7SPqGemqV5bnbOHUzo=\",\"HH61EWogB1wWm3htnchqJO56JSW1ZbvCYiCajNpJBSg=\",\"IaVJ61VPD4WfYdaPG2u+mqNEmmI4VGu98qHDCMnMUuY=\",\"C1P/9wE0fRud+YtGF1gA4NMlCsbUoa+nGjSe0ZWHNQg=\",\"AhKaxHQkFcAg2yRzmZs039urujytRxNxj5XmNG4Vg7c=\",\"AdKPMF6LDsiNo3yCUbDI0jC2i+qUAaFfUSTWTFRUvCk=\",\"HtMB4C4/yTCZn85tN0TCNZZwDANyBwWTnWHO5FH6/5M=\",\"LtsYMpZuNOru4JA4WK/tsT27qffIAsg+5ihTDQ4mrhs=\",\"Ej2q3ckwxl/Ge8d8qL9BI/6B+9BQHo+JrDGmmHVth9k=\",\"K8w2NiyQIQrPZ9X+IdUxBOnVR40FcUHTsXJZ/tjkqPw=\",\"H6koyrWTggfomOYdmcfWFiaRRPeQCBWxcJX3/3bjydU=\",\"KcLxz6cqD7j1OmMehM/fXMGPtCbCVPWpBf0+gx/HyDc=\",\"AtpYYJ94sprmiJ+V6i6O8BpqbCgU7QIxeunnFCop0wE=\",\"K+8fRe+64aT3dyFjHfT2mCVV0FrF9e0hXdJZOa9cGwY=\",\"BpJmu4mBPnewDjR0Ou4Caoc7fjH8b2TtV9oYnEYBQvc=\",\"K3GYsEP/MdkV3rnV/dAzjlvYAomSzcAz7vuc6/ksn1U=\",\"IP9ss46NlQGt2T0WhOVCDRu6YDlOfAJ4eo3rlXOHgAA=\",\"Fq/U8Z0xLMSyVo3ahdid18g0sFtNj/q/RBDxXCK3fLw=\",\"K8lsS9nrjwnBdIOqV8XAXwAsaiGuriIB6IIzW+308fo=\",\"GCehG2WEFLmLj3bdEL1eD+yWVowv4Fn3GZnsr7qwoAo=\",\"IC0b7OU3WDY0tuHnBlmhvPGv4cd3XEeMAGSLQ3V42ak=\",\"IYtbWLMzPnNc58iKbi8XnpBzIhUKeDP7hBMlveg4RQ==\",\"EXJn8FKzkxnEzjS8ilQ7E+gHhGYsIIzjeK1hGP2wrOU=\",\"KXm8STrh6z4N90MWzxL9723RZ0F0oArp75CLOi35irU=\",\"GSUxMkN5X5BlHESMgUsT8vqYjPyIlcmiv6hVEWRGGkc=\",\"MJuLw7CrB1JaZDEFrO3QrmZOUzMviaGF7T1/HagCAw==\",\"LFFNGAO0E0X5bK3PmD3O9VUbfr6P948j7N4j69WjaDE=\",\"I9Vv/W04ybqQlzD75kQ8tbTPmpcC792YaWZSw/LRd10=\",\"HreuL5327TN2DlGjUc+qP0quunyFS4W8bitjzD8qPcY=\",\"Czpjc2mD82WIC+365vuP5e6g8y4LOY4W1hDWKoJAeVc=\",\"JJ9RHzHE3et02RnNqRM/28HPLZtmKIya0T4CxxnDlhI=\",\"Eh07duZb1mX19dKQhDXCVxRBVGqVBDcKDwwz3m/X5zg=\",\"Hh/VfnnPBCsbO4g9T0Jl8V8Ig5qLXD8YAqt7YtVesjg=\",\"Fv772gWA5Sjb8mSOyC1qzBFMPBtyDVavAcVC7W1layI=\",\"CDqLj0hU1ZnuI3++oyOfkJDgbCI7d9Ew9ZEDa+ggnb8=\",\"KlITI9/n5+LNYiZ09GzF1kEjET40I0BpZu0G8ufTeTU=\",\"EPrQKKVDuURe5oQaRENBITF7mhY+Qjp71sCFLsUh6WU=\",\"J0vdBJpztmd+D/PmSo1200AJ5Gd2CBmpsBialP8U95o=\",\"Jmnim4vUaKo5kWOZR9/nb8FmER1v8bJBOdL//x4SWe4=\",\"EvWUlLVpWs12Ej/sAB3Xd+QCeLc0KzSGPmHauUd5gx8=\",\"DkWsHzU/Rf84RljzS61Hs7A9qTeEt3C2B9Iu4DbI/2I=\",\"Jw1af8WvnU/7xu3FfJFZQ0jGDzyop5TRQfV8eup7DiA=\",\"HFfIR/23Cb/Th3YWSvmq5xdQBYYfbM5o5xedyOuNWdo=\",\"CXvUx0ye+GF/Nk6H2QouT0YcV/LntC3EiyRZc6JfgZg=\",\"CTmdz1/avmr+bAKj+oMb8KT5LM5GZU1660qrgAZ4Y+Y=\",\"oR2qZyTs8vddjjaNMe1Dff8bugrNMroSKI1EKKtm2Q==\",\"CVylsAOGtnVzjuOYJ/muWkPOCc0renCMUmydR49lCQY=\",\"EWHrLZbY9eGZoB+xcSxfSynryX1d6Y5kRHSqo0OR918=\",\"J8oJvMYUdSkFNZ3EiYKbnKB1Xei578HMxtg0d9sb1go=\",\"Ly3dEBAFsNdtR/RECy3o2YL/yyZBa9es1bEhgycJeWg=\",\"Imuw0xqOlh/3kl3g4H0zrmPD6Ab/GfN16OlrFQrC65w=\",\"HlD4zl6OSKR2kzUbxMlf/8J051qtL+fm1gfYBh4I2hc=\",\"F+mL3BAGLcqzPhlFkxhv0p8GpaPNlaa/Nz4xQEfqddo=\",\"B+bTiyjbDVh7E6x8pAVv4nzG5RRnJTueG5MYsYH2Gtk=\",\"B6Bt1iMHUOP1m1ft9rP91xpKFIXiuXZbyFQC3mxTnhU=\",\"IkvL+eetnrY72qjmecC6Z8WU5Mi+vS4G8dc2xPpbnBk=\",\"FOQ7EEhP0zHvAnqU3pU90TPBToI2VuKj91gDdtkLd4o=\",\"IcLGnjBUb1M2PiTmAyICYnIo8tMsYZJP9PZLez6TqMg=\",\"A/43eW3t/BP6AWDS2jmYiQo/IOjDUixPpxfhB5b0BxU=\",\"K9Wy4RzaSFvvU7tMLGVMOb67WBSwYTSQKFi6HHn+CIM=\",\"HbbQbTDWLAj/wcIknTKXc0wI3BQemtmrzCUb9GBbO2M=\",\"A1DVF1gk0Repegx1j/rQ09I99QDwl6JfjgYded1Cru0=\",\"D0bRRerOax3Bu38hhDGumvDJJ4rCkSyhAmJ6ZWvi+tM=\",\"D70pU6HNtAzoTKWJ9xGoquXnXHRcXKSCb2XdK7UIE9I=\",\"Lm/ub/UbKr9m2zzpwjJxujXK7U5ok3YhYb9yg+DCeYI=\",\"60whIUwM5DQBDx/kczoyeCDhr+U7pyMzEt9RYV1Ylw==\",\"FJoB42RKmupHXXfnKKLpgm9rk1zLXenwYMCgXYkEpHA=\",\"MFGry9Qi2yObBO1L6s07Tbi9BFuNSrNqhyRU42L4KyI=\",\"E4oBGYFu5KyAFbrf5au3EUgg8WE3W2B0IFr1SIfniOc=\",\"FsjhRklw4NdsHjxAc+Y/suUUslhYv0at71mxdRSA9FI=\",\"F5rlmeAJo/ECe1WbB5YTB+9UZz1S6L+MT4esX5mamsI=\",\"E7NRjLSohGhr5e+AL+PJoHYZUPLl9mpGnfR8SYD7284=\",\"BSo1Tm+KjEgrnKj6UeRzJ2O9ohSmX+V1/xLJVKQz4ns=\",\"MDSBVLFAf5uzs9j+jezEHHcMzhiNZLp7AhhRWzYi/n4=\",\"Ikk/vdBtwqzOxBXemKnUEeOTOT5kjN+GrT77YDc9pNw=\",\"K9M8ONZ9qeKP8itK47bg6mjGyLJ11kQIzXwLx/PCB0Y=\",\"GMo1gCcw69WqvyX8fNNSKDRCu/pukl5m6DRDRZMuw6A=\",\"EjoVsx22RIBzbucgYxqwCIokFn0UYL5N1CD3zUCs8uU=\",\"G6MftJ2/4IPR9CEONEWWqcYeb0vMv+3diPO+sWiSGwc=\",\"EMcxZ6l9kUEJdnLISM8+6BFtOA5vEwF3hTOTOgePKic=\",\"ErLwljtnfWiQD74lAL39S1MgheXK/p25wuY2qKsMmMw=\",\"H+7pqMgYJUvsQ8C/6k4Bzip+b6qaTdASCHcKbwu+fDU=\",\"I4jGpH7HO5wZi/CtPVki41mEV8vKgtCx0s28rPVq420=\",\"G9m3a2emcuyYLNuutV4UYopNsHkrwPUkUcR1yrDs890=\",\"Cy7mTd7NPyaswcbETvFkO4625YnQME/qO3t+HpHC9TQ=\",\"EH+A2IP9dhMiRnVlqZ3IeG5prBl/vtt2NkMuxc/LJng=\",\"GfCoMeFkdyNo1TZaAQfQriZLqXvVFgvuBp8eK0Wbq8Q=\",\"CZq4fnuFJCl4K8r/WL0ZZJ6iayTkk7JDxx1BG0jjY3U=\",\"GNtC+MtCGAQiWH5oFzokzQ3WL2sXAJiXVB8WJjpAV0Y=\",\"KiITJFPbLWjTiLcAVFzehj1lK9vF9zPGkqGGN1T8cpQ=\",\"Lj+B6Um74aLooGtw4h1DOhA2qmhL85t+kzg5lzhn6jw=\",\"LCH4VRjMkywjKq+8oeTsyvbXN1qAsVQoKOGv962NhEI=\",\"IcAjkSf+iylloyzH7o0GPreS/0aHA8VM3eEAkvqdki0=\",\"IBxrW3kdQrhQAKEBGsUrJbrVMJ709ILiYRAxAAG8y04=\",\"LbHSNM11XqlZn+VgAYZrtLcR7QSSJ9Z92zXAO9uMbfM=\",\"GEmLa06+o51CnCXlqrG1/JfsiA5zYzGBSjzfeZv+pxg=\",\"Hl0S/MDGgIJOCTSmQVOh3t1JHsKe/7Yp41pF2IkCg0M=\",\"HdxLnTFZNUpFlEuWO1QIHTWERIGSZZYl0/BvqYGB9Do=\",\"Efxy5JlOay6Z+LWHc6XrirKC3QbvBgcFE3G62nuAxAo=\",\"Ibx0YeUWDy3IbScPvCyPkWBaSeXHWsV8euNIG/H0u08=\",\"LRZRCiIJWu6V2sczWJWnDg7FapqbMyAdlLX3y2/GJrc=\",\"L9+xE0ofVK192QS+OZHghuG44MTVwOuAQg2lwP5LCUQ=\",\"KGRtTgBhNV1c2TbAj36EGXAdlZSCmQpG1MvhZLra+yY=\",\"AduxtHbA/dUHZkocA2JAOMLPIjLIe+qecR/TLckVBiI=\",\"CB29T9yHedqUcvx8PcizVBjD9nBkO07I6HjCVvbMIqQ=\",\"CIbNqgtDHJfYRjQZrFZR/0V6fBVnP7iJFulPpV9YTTE=\",\"KDgzFofgMum6P/9kksHFR/aF69dglTZ3DAnb1+w80t4=\",\"JiG8YWluyZzyL2RQGxMWVfSYyV/tcZ7cNGkeGBVDVOU=\",\"JUnUVdrqoBt7Ungkk/4bC3wU37dwh8kVG0yjbxUwask=\",\"CkwjbrU4Rv80iKW89Z/iIlL3iiDpU1FvIsiLTAbn9Kc=\",\"EMB36U8NOFKz48KxTuy6GMJ7Us79b7Gh/2om75XkGBU=\",\"LrGHyOi11p3kSXGks3CukX7N0ChrdVYMHTA27MVLGWs=\",\"Czlb0gmhUIP7OlgKuqN2ofo5fFT5HPigwUHse018Hpc=\",\"Khqk4k2DXYo/nq14gao5H6kwdS+MnBpEjVMwf/kw2Lw=\",\"GjlZv6puXsn6RamTm0dnbtdztUXTcuX4QDzgAFKGBa0=\",\"Ax7qW3c6nhiqaimGP/bFETD052l0BxIHu8p/I45JEOk=\",\"EJqKhneNgM/fhrTWu7HlfiGKuP2ElfH+BRtXb/LnfJg=\",\"A2HTNL8ukHlIwFtiUr/3kDr93HOPKVKg3Ik7CfsDTs8=\",\"EfY2t9fuGWA71+2pDmaLfssjmXUNAC2c0peDZLYy6gs=\",\"I68vHWp9vnNNYAY3f+BqICpUgs33zzJL/yw+70F+jZ4=\",\"IAV+CIfQiYVs1bzeu551sSR0rdWOV+OneibLbMNrthw=\",\"Jlc3Hb2yYojkoxl1QQ3VdyAD4iVaFeVBnxHpfaAKpeI=\",\"FJaB4+dnHs5zgcaYH8+0bskyZMwkL5phQLM0SqZBdY0=\",\"BEg0gqUCVF/OSQ1zZ0vswp3skds6ZyGGmpKFYlL16+M=\",\"GvseJH9XlRBSlvjwdevIMe3otRKON4v8N0ND7m+TGX4=\",\"IxQL5U+X9tHMW6AIR4SOT8lzZWuqVqs+G3VMwSopa74=\",\"Cub/zkbmwLwM5jQfnTCMeSQ28KBxQpiKk32z/YozNTk=\",\"EpIxwN+tmG+cDC+YaLAMIrMU4isktVpDh3CzIO8ZPqc=\",\"HWK1ZhipZ8fRKORaKAYv5/C85txVCDtYN0q2gG4BVzo=\",\"F+N5QFLUjEqpNsXhif3gG4u0YH/UeLZ/27ytPoqpFms=\",\"JK9PQ6kcXFHGsvP0TspZvceayGsGygks/5/H2cRpH7M=\",\"IVB1zkG9aFvjyX0rwovsF0QhOYAkqLvk2RIgCObgJ8E=\",\"EP8p/j52HZ94UY62CyodrrOUdTSHSQyfXvk33zuHaZs=\",\"Fg/55Dp2S6IoDV/2danbBJop55JPW6JFg7HW2QyqAyQ=\",\"CtMBFXwooSAHFWduWrWyRp+jlVnBqEf3eHq/SH2CgFU=\",\"A0CeOoO79S0W/vEPu+67tAuime93DjZAZRpIYC8T0Qg=\",\"CxIyNk2HzbxwlEKQmBHQoCQdDYt5M7WUcXmdazCljaQ=\",\"GV3Mct2fJinbha8+DJo/9S/thoA4yycQPZ8wyMcOH7w=\",\"GS0tnjH7ZbQJqyc+fisFDBv/WWrlbKRof/joa6i8J68=\",\"Ktnu22fovxgruWcEW5Bq/Ohm4AJYoyA4CnCbgYUhvzs=\",\"Ld/pKVbfLnUXFe3oBXPPpTCLRr5f0Pd974pRnxE6QQc=\",\"HvDaxgINezdubw+oIYeCCgpNi+eo7/2jQvf4gGVl8qg=\",\"Dk1u/iPBSW2Cdfik3VNr+YiiyLotK+ujKPKGBqTKD5E=\",\"GFsw7i06Fm8vWaA8funyBkEfdPd3hzuSBFtsEo/4QgI=\",\"Gep9YnWm3RZ3V5QncNrChhBX4WqYjS6T5PYYSdhCeqQ=\",\"I8O09eSeFq5p5jm5VtSK1rppbyQ6ZpqrE6ssKFXhGH8=\",\"KQN9ZLVJ0cnsRSTrvtuAacsjIYvvPNqBETSzbTVR3cc=\",\"Lqhje4m3mKL3MdmPKria6YFPGN6qfv/MljP+gpqdEJs=\",\"K7S/NrFb53tzdKAmNSZEuOcLGslRbrh+unZy7NA/EgI=\",\"EAbwdTO25fM9YTuJuFi7ZhbBj4R48iWvL049cmeAzqg=\",\"F0n0Ft97T0MlfZuFVeVAuwrQ18irCkrhKWAh2g2Q7Fk=\",\"JshrWEN7BFV6lsx0tRHb2gDpxMV7uGwV1JvOMY2otZI=\",\"JnncXlauH2pU04KHx+1gbQ2VBaXK1aBpmwkEFXHEVgo=\",\"Ez6rLXpxjz90HrEOlzvF4poCHoP2RCQYqDKwkbwtYTY=\",\"FoSktxzXLsPL7mcVHGONVYjjcFggxGjCicUuc9aaj6A=\",\"F8uTa8qXo39jcywB5sQPaAc2DNtz9i15LrkQ4DS0BB8=\",\"G/S0c/DHeqWslKRpciFrM52ZyTOo9QNARLS1Na3DiKc=\",\"LGt2pCov2fyBBTeN5RdtYML4Epzcyon6CwDz7cZOB5s=\",\"KJPQy0Jile3Om1UGtWorhn6vSLCMUkKIjveXZvjZrtI=\",\"GS10v1jz362QFhKYPGvMdTkC4iQaNx+YgONRFQ5oKSs=\",\"G/abtm23Pvag4EaJ6WmIluvthNl5ZoOBE/XfX1cQc20=\",\"H4IBqAILop6FIaGgzTv/UGA9qvrwhPA3Py7baP7nMI0=\",\"L8UdevpUi0SfQO58SDhmVdsCH5404UPFGxOCOZu/bkw=\",\"H06QkRTGXWLhoeRm1JaLqfb6YSV41HTiXMHqE4iPNg8=\",\"KVf4qlHRJrmWGVD9cuHHIkZoo1naTlwL92HUmRPRR+w=\",\"GoD5V3yDhK64iJtjNhB4KE71UsYtLMCIBmfoXwHQMz4=\",\"HeQW4IrThtZUs3/Sth6ttbVV4P7Bt7CdhDW+6X5XsOE=\",\"G6LOPW41LQZDstPFx8AjttF3fyRieM/m4WVOnlQTtTU=\"],[\"MEwprrbxhzhHh5V20w8fboo85BCCwVx2Mt+SDW21Fk0=\",\"K3OA2LJbymSbP4u9CoauQXEJBpvicGb0b90cfIfUxAw=\",\"BMdyAOVJSxy4o9M09prluvp+h3W6GSTlY+/lke/zAvc=\",\"BsC4lm35MIDDrBV2SG5hqw0CdjeqxBuzXkgr+hDjT8U=\",\"JMc/QlkDkE9A2/9ZAiXyUc4ZgKWlzi0HrkNuHQkHeNc=\",\"I99vb0RIJzx0XOU9XXq7XSbEZySljWiETTw+5F6bkks=\",\"HcGxrDiSgBiOk3VmBxuEv4GJuVXQV5tt5eqKUTa8Luk=\",\"J/ccXKd0ziACi4FA8URHIEORfNSRnP9k2EinRb1WkYA=\",\"IrLuU7MCui6Da5h4PhXrbenRWnLMfKo3TmG1HdDS4sc=\",\"JU2FBl+HJx6G17QR1qzCgPntJXwJjJ/bBKLKTffH12Y=\",\"KGIHk/N4v+iB4Ji9LsYr60aJnzelSr0FPPsLO7jV51Q=\",\"LBnybQg2Y1sE84+jDuXGSPoOobIC6whGghrNPGmc8GE=\",\"D57Yfpobp+58KL/XrDj/O6EISfsE0zIomLqf4BBPtEU=\",\"DR3v9CJjt8rooSOhZBtyWAFUdhYauIHh3CDhZbPwRXk=\",\"Aa2IKyKLXyK59qAuELoJBJySgbMq1xgYUCtmrHfuOsY=\",\"GCK6jFWODmvQ79GrS0USmHnkO3pqzwdXmx5jQ8Uxokg=\",\"GSwAXXRsDQRfVTDxDziim1DLbIYDlBDmNNJagJID9JI=\",\"Lp5t5OdFGT0uuLibW1c+3fimUGdGr7mKLbhYE0rNgI0=\",\"ATNzoGLHHQdU7osYct0oYb1MJUXoB93cZU1or0Ouh/A=\",\"EwyU85qaB9cdrH32H7VsuXXJCSrCq3OxE7NB6BmOqwg=\",\"GTTutyEId8PC4H2azntyq01lm7FDH46K55oaXo2v9e4=\",\"IlRzZbkGn0Ga6Lk3CBbwMKOHzwzmuI/cVPzpHEhdzfE=\",\"EIsgmbcmTuxQ66tczTVYo1njT8oc+2nfTj+Mnan6qnM=\",\"IrlG8Yhs7gf7Abf447xYXqj5p/zbKq7F+qh483jrIA4=\",\"AikzeysxbCeQl2RNj6hh5eXAc3fL47oWi1VhNUKHRoE=\",\"DpKDy4X6gAEgNEyrmn95LpdfXCXWT1y2pSG2JmWvdFE=\",\"ESlWv5x2PsEBr5ozUVnfB9GwvZC8hL4pGv+ahfMPUWM=\",\"JvJ99P2vM/PRLVlIaQZTrR7mJcsArvkrc1J9NzZcRyY=\",\"LtTEtz4lR2Irt4QDzZg8bx0zslU0En6Yp0col6hOSzo=\",\"CfAQjq190xUE3iuEYHaoAZgnCGoMTdZXDBt0I8oFsM0=\",\"EXLG7BbMUC+8Yz+KTDCLFFUdLEgitZGBeZRuZUXp3l8=\",\"JkiO5fDU+LV2bFuMv0FJcLdQ50iKoxaXbf9aty80nxo=\",\"A5KuzQDaOL9OOfsZjvlucLuHdLgVKXDdLhYptR/xCuU=\",\"L22XHNX5kxFErNm56Yutbh541gy9lm+xjm9jCnbfprY=\",\"BaeV0SMNPHgblxdzW/RUZPNsQd8HN2NkmG0P0SyDF8w=\",\"HiOKNi/+Vgsx47BQU55sj+DaIh+6GLEq1mGUXiLl9bk=\",\"A1++Pg2dknbJkKOxcZ4nVQVFoHf2IV6sskea8bNoY2Q=\",\"B+0UEQ6avrNSDhRoLvrXka1cL+tR1VjtATZ1KJsca9w=\",\"EdrYImcXJO5qeG4hDpU24K2geW1KoPztacHUEeEeDAY=\",\"EQsykHqshpAFRDrWajPOKFCMkl9QXkSjS1P3CjqkU4U=\",\"BVqPS+Ss0m42Kk263znBmLQ+oCXsQp32sgERd92ObPo=\",\"G86ZzNDzdHi+PsxbZ+x8CoSwP3IxYw3/peFs5vkNa64=\",\"HWFZWnFKXxsypSVd1VItYzoOv3/fgqnPsiJxzJYsgB8=\",\"DeT7qO8QdoMkqh6R5gbyo8Pz9qKdyNMb96Zw0xaVvwI=\",\"DurxF0DycGVCOXecuDoFGC0MmPPUu4p6EYzkwN5Hfj0=\",\"JcOXSJ5lggqVXWKEwAJCeheEIz+qcInGZ38QPS+v23w=\",\"6zoWA1bIkpSVvZ9Y06hlf2nz7sqxUXEj5ySpRtxQxA==\",\"GRIv/ZtkMKb2yBysC/yLSI4aKHWOlAf97493qh/kwO4=\",\"B3DKTGeqQKFlk2UJfdtw7u1tYjBzkmX3Z4bL6giZ6CM=\",\"IM8999u/R7siDMrw7Njz1U4FdWKKcpGnLPjbXkLhSYs=\",\"If4snJYl1mqTH6kxv3++psKAj/19B/073hV3WVfGJ2g=\",\"KtFYu2df8UsdzdyZPZ1gpbTp82SK+9tb67LNmpjMuIE=\",\"D4nHw0SZ2YHGzDdsb76vyIt934dRXf7GXam7zc1o6u8=\",\"DW8zrGUONdPWQqo/01kS/f5QFLhs0R6KgyF5S5qcKZI=\",\"Cc3NeFjyc2NvwDPHeOX1iLn+YxVHYlTxeqYCwgBlyqw=\",\"K8aOAp2AA1UwBkijb9iiQVd1Cg1vsvIwOQZFHzs9mCA=\",\"Fj+KJCeAXQJiDFS8HTIYbuPQfaxB2SiemqPdLK0zdgE=\",\"K3LLBC4Hne6NVrF2LQBSeQEFOV+gKZ55zHL0wnv6IPQ=\",\"GqV4pe4sZquCmf6ZEzCJ6QZ2xKLm1Wy52gZ5//bL3P0=\",\"Ji0VKasef1iSUDDmyvDnmhTENuWSbjPNedMhOIuWbfo=\",\"Gqa3HBe+M2sbHPI4TW0+4Kfs4a0gA8pyf2Nr1LcGF6U=\",\"KGqKLHH1OZRSShietb9B7tV5BNkfRO7kCXZ3g2JUevM=\",\"A3reUu0pYNgLwtkrgVpTFYg81C0mcJrmSoIv+S/zc+Q=\",\"DWQfCXq2JgstwkCoW3eZVB9uc6OiVknOmLS2SmxJnc0=\",\"EXZRDMZ0sPDKqwD06b4fjG77rHtzFf9tQWkYS47wCbs=\",\"KbZ4ORjzeoAV0SKrOXE4SMqEAIq6pxaIKwSSxszRVkI=\",\"KKi+WPEQ3YwrkEKPtP61m2fv+BXpKPt9dXR9NcvEDr0=\",\"GD8mMuPKbsI3foNYwyBdI/khG3WfYvyrxfsjFNByipo=\",\"Bq654QC0fqzC2s3souqZD3Bmp54sfIPySQvas+tDYgo=\",\"ISlJRnzdgH6PNXbUA/7wnpu2PKN1SJdUHGzXfeTO7a4=\",\"GFj3R73fWU1mPKSf0qq5NAL/nRhssjCgJdU7jUxibnA=\",\"GaKTresJSFzMA4ALghcHBg3CfoZj41XpCONo4ui8AVA=\",\"HUJB7QOCeSY6GE6zqrfy4UMmt/rwQKSGKM6KOMewq/g=\",\"FpKDgYgHH3P/gnNCI+WZnHJrBV3Rm7WmjlE9VwVdi78=\",\"CB2BndpXJl6I+56190VK59zeOaFLAPRc2xlAbovyTvs=\",\"H6etWivHmd+jipxYGw0XmQ0fU6FF4m57EKCQGp376Ko=\",\"FAEH2XVUtV7ChQEapT83JonhbWir12PN/6v4cYvMd9c=\",\"GqblLAWqfUDc5hvDiwOKabs2SQ0gFNrPT6Rucb4BKtY=\",\"Izx7px+eDKCewgJ3/gmpY5mhR05NylFY6XU2iS3nK1Y=\",\"IjcJ3riCcHbynCB3jSSiAG+rWQCSx7s08hLDMbSxuTI=\",\"FBh8TpTQWbZWVZHhbf4s6kBzHVgsFIfj774c8wWptFk=\",\"EtV/nDd1sFCfXJXxzC4X8SZKUSGvpjVWEd4qce4j2AM=\",\"I7oGuoMFgj5eYsrB7SWIi2I08TKUyT4dNtXy9zyLYT4=\",\"CQGDIrjydGI6TvBWIiOhZsD8pZfUUnro+83yl8j20cc=\",\"AajQ/FYW7cAjjlKH2ftoaUaKg6wWhFLFzz+aQGNFLyI=\",\"KxqNuao7BgvkKJALNSgIoYIenJ80+MjnWxct738LPQc=\",\"FOeMtlJKcSXXcY1J3XZSX1jPJzmrnLsNQI3PLhL2BNA=\",\"ASCLc0+Xi9rkVxS/t20/qDxVjQl26cmh+pOh+mn3vq0=\",\"JstrfB1l+eW1I1w/MfnX/x2BfktblF+slKmbPP+sPVo=\",\"ETRGVkMaDYfeluaAb8CrueFRTN8XXWF7cACLHN+n+xc=\",\"KBgHeOlNkA3yMap+VR9tcgfzNE9bQWTRmtRiflOq3iU=\",\"FJfMBYeqmmYssum7Kua/PnWgcW2zf/By1sXM5v+mUnc=\",\"EVW4ifF5jBtZfN9OqYt6IuIpGqL0nUYoF5EVrRmBeh8=\",\"E2vPxJ707PnGE7/vrOEpZEoAooPI6VZ8CwFJ7X1+Amg=\",\"LJTqMY324xMdhaRoFoJVHOZS2y92/2cCEsU3WZTS2ps=\",\"EaAIV37bh+UoUVnhZV1wtfatSrvz+PGdZu4acXJiPM4=\",\"FCYrh59YtVMSbMF1dDsJtd6s9a7Sl/4+QSRBftIBapk=\",\"AzjYa46E/ovWE9V6OnE6welx1SpYbpQQa0nX05DJJlg=\",\"GtFph1EB4WLEnsJ+wyvjeuPTefNHkw+7ZW1xi4fBTDY=\",\"HjNlSCTJFeFvrUoWbuIW0bOjZCjZBEPckTH4GN+FD24=\",\"I9FXAdj12gU4ZqB/R4jElHbFUYyKgSKV3uOqEHTbbZ0=\",\"LS+6Ny3nBaoAXCHbTXG7oSydR90BYbzUVAnIg0I5SOw=\",\"AWg3HfuYs4D6LSYwxhL4YTBC5t+QZYwjULJw7s6Q1n0=\",\"BBIRLs0MrGHERc5GqFGLVuDyuvg5SIWR6tSqzthfoB8=\",\"I60O2x9P6XTu9UP8F/zX3BoPBeLOWsGON0yHvAn3XHg=\",\"Dta+PusLkUfXxQmp2rS6LVfHudSyeA+wUVUl/qQnjrg=\",\"BpDQgZiCPBD1Gn6jy0c6bZjtDP9qFwabUJcaaFZ6exE=\",\"C/XK7kiM7oh/Z9syBs1dok7NG6prrbRLx2F1fiE3zjo=\",\"A9wxkGgpVUTdMyIZRLnihfchn4XohVl1xI9p937fChc=\",\"FkwPn9NY4qAR5VkxtR5WVDUrtv3Gyy36TYp1ci8mIcw=\",\"B+iXjoixwHiek5fgnJ6xDjaPzockypSPbyrJLPIw5uo=\",\"AixUYlCMSAhns82W4Y3DxC/9kOFYbKQfpnFYg4zfFZM=\",\"kiuXqS1qEfsYF40F8FQ0W0PbT1xrkcc+KPbOOiLexQ==\",\"F2JjA9G9qOR91tDaNC5DJ+rmxCAFJSF6IPYibLVL1E4=\",\"Fu0tcCxvhIA5sx/4f7Har4iyP2sArNf2QJp83vg7WuM=\",\"HZVSpC3vF1C1XSftsJziZAn4+JBQ+3TMUwcveI/spsk=\",\"CT8urGwIsKQ9TfN8GyDRllx3ED3i5t2Ihi93syKjLdM=\",\"BjZIJZq/G5/rjAsD2zH1WeR/DhHeKzcbKZBDkU0OvaA=\",\"Co24rnVwgYvZznwC3OiXEs/AT4ANVfFWLrHtJ9qd6u8=\",\"Kt3Yp/qUoBHhKRCpiyuK5Th3ASQu4igd8TL56d0/x8Y=\",\"CCUyy8mnLgVmaJRvqwjqxIF1R88m7z648Vnnb5Aj3qc=\",\"Kry6Cq7BQdd0LA8HhdqicmIAtq5p1GToSa/XBGXJtVc=\",\"ETrALVl3islpAuP90FYsUEtBjPio40nafWFFCi/G1oU=\",\"GTp/Y51M5NYtx1Z+5xiFP1xShLoJ3kKP3wKEbuIjMao=\",\"B21JtcDceN2cjnzMm1o132nc6GgFqkf+P4zwYuR+lc8=\",\"IwUfrqN6rI4SrpS4egJBF0exTec3UaoaP2oH/umGleQ=\",\"LDqEhZxGvtwkEgRBu237ETwJ3IBwsuDNE57UnJZHtzc=\",\"AWXfRehGDLe0I6lGjSk1wUyTwzxwDGVOMsLmdD3lnes=\",\"JDwdzy6AHfG1Orcq0x/CTMyweyUYWUxOXzAk2mcSFFQ=\",\"LU8HdIhRhpvFgSErQxwgyz4mjLf2rvJy3q72bpKb2Fk=\",\"FEXdkkjov6TmaY5/UVU+8aFS032IlJ4VucUMPoB0rKc=\",\"PzEo9fzuoiNDLTHOri+LEbOKFcqcP84hy4dW6OCWQg==\",\"DldLYgHpJ+XzaalmFR3fxcBvrWbmTV4JcC7xcrWt5Gc=\",\"B4S1GnrhB2wXN+ri/Ew728IYeyj3FOVs3eDNMiKSqkw=\",\"KJAS09H7NBnj+oEpTzpkwVaF/6pliSfAnBgzzlnOX/c=\",\"K88+NauJGeBdVRZpCL7KI6cRxxIoTEVpXGVY4OPaIvM=\",\"A99c3BD+r9Nh2XgzDLlVFbwuWH59u4naTsrFdGG3W20=\",\"GdxltK+6qBJwFbP2jTW1V8j6yZON7pWuNeoS2mG33NA=\",\"H6J51Tn8m/ck2i52Irwyb5U10ArcWWkWeR130DvwFsg=\",\"I33ZbOA0aYWMq/8YlE8FUhlx0a03PtbgQZh3VNv87Bc=\",\"AxJhY4zDdi6wJacWrTvPHWRHoIDzzMYPgRcxUlT1aNQ=\",\"Ak+0AwJuEBYGB68uCiFKpyVjfxmvftRBMKlAA2W/Yac=\",\"Cnc/m77Gw1tdepUAVHd5Y2bE82ymNOlLKDIzr/9XUho=\",\"L/KbfdBHUPkmuID1Ssw58ugohS9AaYr6wmYbMFMnhYA=\",\"FVWoILQGmJPmYl0RMEnEa8W0OU1ifCZorczTrAxkkug=\",\"Kl0lz3HIHlsSnn03peJyja1dmdMQnSOhjEYntK/Pj9A=\",\"DXScXe3O+xkQ7JRQqziNp66yWtx4zQKadbzsKVWejVE=\",\"ITSXmlXa1kXvg4MiBY57yO3jCWlIH/K75JbYzNaqjKU=\",\"Gl0o8ex5qKcNjPt4PP9MK5bkzlvrl2ZaD2pS5zpwu2s=\",\"Ikj+8cyXexi/UFGlcTdMNsrQszi64he82c/wOPzXvFc=\",\"GjEFwyNNSvvBEtep840iIGwKHncRLWrCbG1qpj71AIg=\",\"Bv9F5s8mS9y56LO08TpE0cGXrXfuU9Avq9DAp43fauQ=\",\"B+o0yvf5yXNPSJlT1CjK2Vv5jNMtXBjltR4B0URLj5E=\",\"C7m9TqVi+oh9Tmcjp5jnZBoI27Qs1yhSuAAqhsV/H5I=\",\"C+Hij9iI5C+tN+cur4hPbGxdA3r8CVe8nrtIk+TKEh0=\",\"HeiVW191Linn59ktY0XaEbzzKTeowqvJPEl9Gv+u0FU=\",\"FA+u0DLlGQD+ID2NMvph2YQta3KDhkzrmk0YV9apy14=\",\"BlOkWs50V7Ry6tGzQ4ZoxX02+vWeKhkTR1Y1bOXL4TE=\",\"BtIzaeAk38MaHjbNkRT7eJIxbcV9pmE+zEHKCEmhp+U=\",\"EGojT35MXQl88A8lZgmwKd6YPQQESmYCPUd4l7ka2xk=\",\"DVkHw1O2dFQMINuHLNbg3ovWb5s9aROWqgZni1qbi9Q=\",\"HIzEhYzc1fNq6867nPGF/rqAmpIwj/X2O2bCsfUt0U4=\",\"GHCaXtVe5PhhT/BOUDhyAh6I+D1IjYoFZ1l7YOjNs/c=\",\"IFc+t6Qm05/c1fRvoZlz5r5TEWDnWulAG5nd1+KsJcU=\",\"G2ixzrv1m5biOuwR8HV2m1SsHn3kT/E3CPq1qb/hdxk=\",\"HnRij9KAtFHq4NAK3ZZflb8Z+6Q0JcPAWJIHeC9wK30=\",\"Gt9mcrutqfg0lMorq5fy6Q9jBSX5xoM4uks0zMSEtHg=\",\"Bro9rd9o0oOoX2WgrBWRNGGnrAmjIOOU0JqlrpelDbQ=\",\"I2E0g+gRysryeCDQqcpVKtIqsp1PHVefEL/r058U7mY=\",\"BboTcCg7oxnPF/YxqSkfzl4OaC7B0BvW3yhDUo42Pbc=\",\"EwocGoPpGiHLN24N+BsZbYwinsYN+FowvOTKj0ZvxYk=\",\"KtdFFY4L1a7RcITV/hLWcbCCmoM5Lm3QqQocApLsoA==\",\"GkcD7Kj+yEzYI01fxGdzd2Hm0ta7bVAqQOJflAROCu8=\",\"F+7aU2CLS+fSybZmTdj8ZyvUhkHin2QCv1VEPGZ7q0o=\",\"GvnniGCQ/LvnPZtwtynun4o4TEhiYm6mhWc7SDeuJic=\",\"LDANBEEveeFcld/USInvSn34KMazJ3bbN5fGdPzLX9o=\",\"D2F8FcQcQko5qooWAcXKRCB7PG5EsAO8Exefp6+4Iyo=\",\"KA5nIeIzqR9/JgBPdTqCqjQD+9n/QgQRwFjvJ1+1QpU=\",\"A5HDtMaq0yA+8+nX0hfUt3/x/djGOp/svl5wLVHFPyM=\",\"ID+cFK7dYxnT7ITtdRfV/EcDqghfRfWQ6GUEITsX+2s=\",\"EIQr1XxHDnGLdVU93xgni2BZStO9f+EgvEbLD7RQ1CQ=\",\"MCUMd6ZAMPMi4Pzkbrl4NlWpNkV4S1IZwJ6wzPP+iKg=\"],[\"FI2eRUIGaxJdptaf8/tnbr0n5qOKH/QoG9Y5yXr2/9U=\",\"C2CiiAUyQpX8r1G7iNlpI3LL9O7xy6i4XLwFk0ZpGog=\",\"LTj4Eq0desecMv3VelbtuGGIXyD6S8bQ2ULC9B6OSn0=\",\"JXOKzRFjWAAzNn/Y8e4ZnX6zw3iR4GvCDmtHagNXWIs=\",\"JH9pZ/ykJomujiC1p6GY1jCGVJt4wWIKUfXTaCTM9D0=\",\"LiKBMHemaLK3Ukm41RWj3Nk1AgBmlCRbsIf/BzJwi5M=\",\"FSPqib5hvkfhw2sOAkBowoxI2nS/cGmrLXc4nIPUdPQ=\",\"FGaVzhOCMOCHtT7xv4FgHyWR3TRKfLUJ8TiTk2ng0cM=\",\"EtBdlXH6S0FxiG2cLNRMfX/FpBJRlefSjDxHy1y1t8U=\",\"JCchFHCE1GE1Q3iJdxEfP95siTJqVW41vM0qLnPKxos=\",\"D9khuoOVpd3oM+bbpBczhQB7ONGvXjhBo0XJpIDJ0pI=\",\"Dwu9x6OeUUaSny4cqftKY1UM6o8SEJwdguYBl11YH10=\",\"DWUAhYiy7hpN7gMTttQ5aVLZAThfLhr+agoN73Zdwg==\",\"CupWe+MeHELOM/WJ2QM2OkgvIcHD2P5Q+m3wGKLcfCU=\",\"AvozR1ewPexr4d91jr4DUzF7NTFuz8cpNNBp8YI0a70=\",\"IYDdn5crHrXogZqEPST2UOglfnqMz27vP6PXRLFvBzo=\",\"F4ej/WbLSTKBANNXTXBwGZpruIuE326bRK/Ol5gjPE8=\",\"+/UGtnFNZNyGI/wM9Cb5GAU66B5YR9M2euffAik9qA==\",\"FPV72z3cdbZesHIOJ9qglBKzDs97EV6BYrnlX69J9b0=\",\"DasL740tGtyA3MpYHhiR7YALv0FT7tFc5x7l4LC/lAo=\",\"Jfa+OpxfKm/zIIeyyqAbOht5CYEfAlGW8VYxkjnTWaw=\",\"JbVBuWkjsXVQ4TekpbwNVE0Axdp3FcbwC9/7m8VtDcc=\",\"K0rQhg+MPEMvKgN7Di99p6Sls2AQRLokpWtbmj29pA4=\",\"B9WBe9Ej+QpKPC13Uo/ZNmMh2NxpmIRYzEJVgclkOvM=\",\"E/2jsdAqU7EGxLpGUs2Q9Ga5es/RNsmoQx8dzlMapEM=\",\"JFD9axoXvh7EY4eGvT/KTMpM2HEmjrB7HlrureNvy0Q=\",\"HAdT6/Y3lKKd/YPrDQ529tHq1YP3L2TAvjmu+eV3oKE=\",\"DxENwAetgQwPrlCImb7SCqXMjcPYMk8Pe7w5lRGdr4w=\",\"MGI8LySnxqswfw6ISIoAmSL8K4I1/HQVJqTT5qWSKK8=\",\"HYlYF+ePLx8Y5TEwpu2L1uHRiVQzgPaRqWlIPwrjFIw=\",\"A6vxdNIHUQJ5f2FmAQXPQY3tH6syS6410TaxegJUwB0=\",\"I3R4Fy8HPRXbqdEsrmQz7nFSGsKUtU146s59yUGy+C4=\",\"GA+CCnQI3uc6cqwC99zHX5miufdamquCN303Pt3KcS0=\",\"Kl67p0Tqem6CEPSD8La2HB/uyqhnyMEa6gSIuCJ3JhQ=\",\"IoLYMmw8EuD3V14azEvZQYk3MuHn08C83dNeNm7dX34=\",\"DrZ9jmh8ssugFVLs/U/X/8PVeIy0eqOIeh8uw77rCPM=\",\"F29AbMBLvMS7uCxW5OwgvO6liPG++P11fh5Y1HVFt38=\",\"HE0M7GyLIr4PGj6eMnBaiiIdiH6gvuG+oagiZgiQVlg=\",\"HjXex59aV5pC+CxFsaGRFHvMTj/QL0WvQS7drgjbStk=\",\"B1xKM7Eon3kjq7RtemhO7acSAE+XTvVxX04rUEOX6b8=\",\"L0FsFfkBgYFSkRCJziqWAY55qPt/MRxMak2e6ffYqD4=\",\"B6kjZ9IQKSZYRJ7z1G7Ja5gsNEgFO//I0nsXpkP0OXk=\",\"FoeZ5R7y58e0NaIgBS4GKV9sCLHmsLUSKrox4tlT5E8=\",\"LEIstAQM4iOunCHdczGJa2hwTCao9N3Id70GWedcjEg=\",\"KZZv7ULAmzVZHttMrAV0RB38/U9SvwzDGy5iS36sKAo=\",\"Jt3BRalEV+rwKDh21Op9a/ELeCe/OmhK+xD6wdFyiU4=\",\"E6ijBZCixdR29g2enqekwXg6X+oHevAymbjDiWQb9MI=\",\"IdEucSLENyUWVnYIgu748xaMI3ZG86WKUcJl2LRRhPY=\",\"JxpiVzBrQzfM7qVwOdQE4ZlgWMaOcdY84TKYEK8tpO4=\",\"GYBHhgfmireWGGDjjceNoh8uRT+JrN+C6mKtkpXY9iU=\",\"JgZTz+DrwFYrVLlZm6AGado0OjyzoUxk+GFJ2FEN+Ko=\",\"LE/XvidR+LYSnZlzUQiAgeYFhf8BJJhCS1Jkg/g3L5g=\",\"BkDJ229Fhpff4XYQsGkpCMx/csHAv1z/MxaMSGfCKg4=\",\"CSXmK3dyFkBVAI+HZbgn8lGwBvLdI3BTXfGhbocrkjw=\",\"CvTYzXTq6796Kbzu3R3PCrDQD43mRCu4Ym5/BLBD9A4=\",\"DPajTizTdtawANiwpe0ATnz8rYmH82UAlfTZdAr9ozU=\",\"HnXcabe5T5Fbklp3MoC5s6I0GrkGnrh8iDrIfaEC2ec=\",\"Jr1YJZwn+s/KY+JIq2oTDqmJO1OSjz03OgoZfFwnN+Y=\",\"FRG2wZrvCPbnnLxygs9LXT6weq0QufXWXgBeVDPbETA=\",\"JtgW+DeGFeoxsIZzuu9nPFFRwDalo0/xHMDOr/5K2YI=\",\"HDjWCBfDpkahXYLt5TqO+CH/vrKxbI/qvW+n7QLmXCo=\",\"KrGSNXkj0RmBQ0FNRIZIuh9gqRf0gGu8KkrTsmF+y8c=\",\"KSCpAqwsEVI8lCXqL8+c9DC24nwK6fWH3Ju765ZTY1I=\",\"DU6b/cb43Bpu5auo5fn2fvO4OlJgEpU6mcg+2wrhmUs=\",\"KVv2du+V7zCcHT+N7e9XWC7DF4B6cuwQZ0rc0beaFxc=\",\"IyGA6FT+3hozWdyPGl4Uw657UYb7saP2pv2fUlI1GBI=\",\"JAWkPzXSR/+3XedYa6Iof5sFe7MhvZzpvtjImAfWeXk=\",\"GJMbJ/86npKQNxey7trg398z6ctfD7EKNb+o87rbzcI=\",\"H9bhCvGzGJ1CVIx8y5N0nEFGrfOZe403fAlURdkK8JI=\",\"DEdy/5q+/HmPVTVUzDkihLKorEsENwjBg/GL321pvkE=\",\"In/Uc050cWQarPZkgl07Fe4Q0Cg8LcNTZMmxZ8zsqtc=\",\"Ey+uqiULYO9X9+CuF/F5n8lTC6Xm8rqtrwGwiVld+d8=\",\"H+JK+atiRuDIUQTMMbpZF1xgsVVkdiP4k3GGCO+iBH4=\",\"LzdrGCFSkPJcP7mHzIlWmj8YrEQ//xaYlnjiBYcb7LI=\",\"Ly/A7pEqoCh1sJbkgzZBHu7Kbz3oUVL1EDjKKRvAyxg=\",\"LK04Ek2IJBDDhrTrFEX/4cc/e3iaJzqc0ma8Iy5MaLA=\",\"BSAC3pwEVT30cWxGqAEC7UU76NW/2bLw7HwdMAKn57I=\",\"MC1oCtNETgJrBs1uS/Ys998jT/nlpGxIwXwpN1B8/Ms=\",\"KzqdzNOHaBl6vDtMtkCrPAEgb0mt0U0dcFw3HH9wWv4=\",\"CWpuR9Q0Vwe1wl6GyKaQJo9egx5t9Nhk4fP6kPLYU3w=\",\"LisAWgpU0P76zcjBU+hPXLtQ68oQX6DwJCND/EiTeDw=\",\"EcisKn95bHhS4j52zbV2zfNb2rppGPkMv+eqImVVSpU=\",\"LC5mRRqtuDDxyR2FVPLjnk7hmxVwkFKFH0gWKbvxK5E=\",\"DbB4yeL2jrfY+GlVTaQ0uVdvGG3ZQ7H1hrm+YaFy+WA=\",\"B5Mo+H9zGYQw4X3NdhO/ZRr9yGtRQpX3wjjS8mdhir0=\",\"BXkk6PPnmARNZZGveWt0zpa/62dt4zE+tQ4IEBNriwk=\",\"FzC4u53QPYMmmBIl6OUfuSN+TAP73eXw7hIAQzm2uaU=\",\"DRIbVN7yERLZGlvJ/tUkn1373nxjvyqmPRTLWbDczvs=\",\"E5JMG1u+bVwBlE1oI3DBPP39kPF7VfB7BYYHE7qUV78=\",\"HPr3rgiWjHYnkANZjrH362t2yj77qoc/IePg66pjfOI=\",\"IJCNB8h+ZcjGauKdLvIPi4BJ4wSoGOdpo8PGPuTu4NI=\",\"DSJfQIlZ2RdoIB/cA1daaOeoVZOYUsAs9k4zSPs4PUI=\",\"ESeF1ysJt0mgMSCz7Xz3k6mc5XEK/S8H0e6zmXTwM0A=\",\"LcAf10X47EPWGls1W0WXUAEOx+a0oTrNzKYn1/b2ur8=\",\"FvNa1NyAdfbBc7lYi+M4Oa1n+liDeDsK5vBgHecmr6Q=\",\"G7wUPmyT5nQdrjcDcoX6Qu+Nrg1v43KLnpLnnqVmsnc=\",\"DffhfaWXo3iE7ANCm0l2TZ6M2kb9ZWoSL4xh2RI9Sro=\",\"DXOwwKdF3Um83dYy1OQfV7OcKNtyJSDCTLPZztDYqzM=\",\"Jj+VDJUUGiiHP07MDRjIK4n2DnBCyz6fEoz8XwPjhYA=\",\"GV4ZcVFg2ZbOdGT5XbGb7CxxwC+roPLGxc4K10j9PTw=\",\"HO5yBBUbakerjO/+okTRkoYh/iZhtcCV0cwkwaZXlpM=\",\"KddpbOW7ZvK+ptVczsTb1GQpjYAYE19zTRFUMMyCxC0=\",\"JsR8GLccjoHdAlNp4S4kzN/Oxsq5dMD4bamN7t6s7ck=\",\"D6yWMXYMC38IJL+BSSeX24yz9eSRgEDErxekwEKxFuA=\",\"B+fqeJqy8xGE9ak4ILCKT2vd8C/oP3xCpq9ppjKN6GM=\",\"IOs3/GXvz42HqybHy9JM4rWX59mnP7byuds+B3VTS8A=\",\"IPQCi2O9/rpOLa1h9CMtKlhFYK63G9wvbDkpp2ANZKo=\",\"Bg4gS3wI8XhLNmo3qG0NjZDDhpic0Wf8+ryMJ0Gu+c0=\",\"QIyt0rDI/DnMvoNm4W7e4W72/LALyguENoHtVqZ4Tw==\",\"FyKuoycD9QbyTFVR47WR3ST8SrnRiMFJ/Rt157kN01M=\",\"KwVuoxaBGSjZhOJ5bVaELkRFAduqjNy1Rq9d42Nk9OM=\",\"J28SoCqkgTPmYPbpPO7PpgpSnbtESkVTgkuYHjOW0Wk=\",\"EZnIlBxfj47Qy2fALF4BQ2Stf3CCIu8X6CN45MFVqMs=\",\"KKPSpUeWe72HfrsY7SOOkXBrJZoXI8HjRd5bVFuKlD8=\",\"JE3eUOxl4OZsw7wmnKloniWonFJppLf9UTfpq2t7G+M=\",\"GN0nGlT25aw6oCAlRwtGEskES+AMUbgONHk4pSj6nXA=\",\"IY5CRiLX1B8zYs90MQbokNjSEIaV4l0nmi6Ivro9uKI=\",\"HwXF9QQbF4pUFDoC6IUKnpRiWVWvBH2eZY583lgPzUw=\",\"GR2oxjV5MHFrwPxhS4C3HqayVA0UvL/PJRCGdk8/bn8=\",\"DVS/u/ioz3yZsKqOamiLlk5Q5o8t6M4mA44VWsBjL9w=\",\"IuHouy19EhapgU/1RU8GTWepxW5L6/dwDPobZR3s+O8=\",\"Hw+njcfiMA+jar0qQMhY/BCuFFW8Q2ldEhwYeibf58M=\",\"FRyN5cTWtBJUEwxpd/eQ8Ttz9v54b0fTLWoOCY3IyhA=\",\"GRRR5VAkC58PFaXw67s2Dqm5jGcw4Ql/32t7gCgmZDM=\",\"CIxYohxKwF8Rad5nXCxUPN0ivB3QbEL8xOuJC/DlGMY=\",\"HkMaAaNM9yJHgXs8VoTwQoeMbY9n6+3dBHdzdEvM3PM=\",\"CKatCjYKDyVY94q7JopMfc4ZzOz5iaNK0qu86k9QmG4=\",\"L6fTpRTYebk7kwSf4nbmBxbFR9TykBJsFei2ZiJKz6M=\",\"LzUtlnXajXyBSU4BUTOluLTGICCJi+RGjeL9gaTCzvg=\",\"D26+A4jUJNoMeawyn0tXHMP9jVuuVNWW5jgtp2nE+ms=\",\"H+TLW7cKnaJOD1mDluQ0vrpe0umtU5lR3JOjjDf+P7Y=\",\"KfMW2MfzyOeSnTCEm6me32bmGi1BTmlgCB0BFPRcB78=\",\"BP6++q4+ILU1ghPu8G1Sx7eBek5b2NtJAtL/3ohoVk4=\",\"BNa4ZM0TCu86Bmus4nGQIEeqBWTrBXAe+vVdHyGO7LI=\",\"FZdH/9AZw4nlSstoB0gC7fMzMmYtXbu6m2ejwh2+1Gw=\",\"IRa/v1BncWr8unQZsHszFfDunI3bA0pua1/S54eT7zs=\",\"K6dsx6Ja8VaV+tuP19Q22RY16z8lGytG3DF8j1BgxMQ=\",\"AjhGX9Jz5TjZOBOSEFIKB/LOO99Q44GVlIbb/U3Qs1w=\",\"BcNApTKO1Q0rENJK8R52PM+dMJBuW/3CoPI/qPI+3s8=\",\"J5q2HP5PJUhc6kuzSRWY2BbVc045G9Gj7cu/7g2hxro=\",\"B24vvTnU+rKtbejVPnAZR3FSj0ykAY/FbGi4XwQVaNM=\",\"B1z4QEQooaOPBKzPUfXqan99fPZu5BIUnCO/TE5h+tI=\",\"G0W6/1OX/qV1eQCySZwKpmRH5eY3IlNFe50kct/IYis=\",\"Gjn77/QLc7v/9yMsJtkttK/jKGz/hA0ZO0JWpmQysJw=\",\"Gk1ODmivqpnAiQwyLVjkbr/fwkgIaItk/SPd705wx/A=\",\"JNYZ2hTlUFoEZuvSSnZvKvH8xv4txLtYRA9hjYxXp6s=\",\"J0RC3QLLTUlLs4wopC/AJJSrPq5W4RXLPGWuSqcocWs=\",\"JqnyRpSBpZT5tUZVPBLfZsD91LRjc3DL5pXKs3T18RU=\",\"GbbbCHscwcS3ZecCdCNtmB1bAips8NOqvUeO2i+JWJQ=\",\"IxuUteH47aNAXBqaBQJPu3n4cihHyMTbpq8zsLXo0HI=\",\"J2pXG4ss9jeuSHNMAcMKkYkHKcsTeGLQmw3uLyVcVoE=\",\"Bj0Nwc6FxVQzp4C8asn6i/RRHObDehIbZxLNiQV4d1E=\",\"G1dmSZu75EEOmQoHil7o1q1cS6nQRooFbBDg30869jw=\",\"EhtlCXg3p1DSTp3KLKYbjvgOHvR4w9Txy/9k1CVtoRA=\",\"FVvdGA4URnIzIDEev2zhZoFYkh3sDF2UloiO7yj6g5Y=\",\"LIVB1JRaZhDBZLSkVGsvO5u/bckxa1ZYkntjXYurhYk=\",\"A0oI0xtS2pAhWuAIdDB9Qh6iDHhmBa5/yH0L4XK4w8Q=\",\"ElUv5xJO5tIIhqcmjXOpSFDwamAESGQd9VsI55Mwd8c=\",\"LRnJ1GlNWUxTgnAgcOcFep8Mf3uyq4P/aEgQ3g4hBs0=\",\"IKfXeUvb6Tm6Fm00roQ+HYTrRjISK3/KJvTjQbDiiyk=\",\"IlwhPAo8mt3zLwxb2zP9aVdpETXYR1e0xE7rpZRp5WE=\",\"LrVCpcd/NMZ0wd8HfolAj1SB9BM+O6YqS0Sc9k+bJTc=\",\"MDoAOvnB5U2dMYmSA5bQx1LJr/4cF+P9uvZ7OBH+x+w=\",\"LEKifpTLYv+2wWmXnQnzk4ep6fm26d9xyf9BZajtVnM=\",\"Cua6XvLn3WTj8kryAnGSfpWFmCfpqdMqokfecMWvmDU=\",\"BMWNRNKxRFUnPdoMknOURu1ZWZzuGlBdDLNjERiEVBA=\",\"KlxJMd6fVT/k4CB1XYtcEMEuvCNN3VAdb0WxsgWDc/A=\",\"L9lOuJIVK1rDtz5gYfOk+VIZjzwzDhUNT0TJM+bI+zg=\",\"G1OVwoHhvVdjIBzRxyo7Xbcamf/Pz323k3BMC7TVPJQ=\",\"JtGLn/zzmuYvAxd/Rjnzf1abgFAOC7RVNGbWe0Y0K4I=\",\"LE63aKbbLbKV0hW6D4Hc3Nd+DjS8EjeRwD7n05GBKzg=\",\"DC4/Zdtz9AWOx8bMPD7lxJVQ3BBsNZKfC9LQRZAwkxM=\",\"KPFaTf4cdK4SirJ8oyCN/9kxPU6Hp1kTbu4+GUzJJd4=\",\"EezD6Nkpxb6Er5dMzkSqgLx0oW8T6blif3BeOSn9IRk=\",\"I51FHqPjlRc1EBlnTLwqhManrdj6YIA3F2iFnpqJ8nU=\",\"KiqTE3ILStuOT1eVwyJAU7Mb8tYBbZCW5Wy4fwH4ESQ=\",\"DACJrUnjZEdFoONZYxKzS6bA+q8Z42K8tW9KeXTG23Q=\",\"LugsMalG9dcb4DuaBBWWr+YkycamxJB6i+XdJ0w9FSQ=\",\"GuDp05xhAKje0+fsw0mIt1xTONyTbJHG8dlcQFwHu74=\",\"HxH3XH0KyEEAGzEjwEVSbpjCA9GmyqGNY18vK/pzVzg=\"],[\"EeJ9p7fvlklIozKXTQfM7qd4vDOu280J3iIvoirQsQE=\",\"H2A4G4O0So/mWg9BQvqq/F+/VfeRM8V0DFPwNqMGW2U=\",\"D8HhrIrTUk69v6RdzFFXZUgjTQKSrf4c1wpwahttrdg=\",\"CkB5jq06EreLzY8QuxXLDEJrvSKCqB3NwHAITOeLjXY=\",\"LcCdM1cFEVWYfqlVlENrbL85OwE19R4vZ16l9GL0qcU=\",\"EEuSQdU0JkUy7aGB3hoVTdF17hUPNJAz5G3cVBgdoIg=\",\"EnpiCNmPbNOHuAL6RMqyA3s7kfBiLxcITxuNisnRJpg=\",\"LQdc7rq1Q0HcAvsfUNk4zh39zeZZlVqTDsGPhiX4bU0=\",\"BE/VwhAaIL4q2SO+vhWkd/QMYDmj3Q10Q/5ydYBCAQw=\",\"KzAshRH703ArgVVkxTmay4qPKo63f5bH8ISWKOCfm8g=\",\"B8vjOduQWZRV0e3tHoqHC9MCySp5sdD07ociLM6Z4is=\",\"EyZ0kxLG6L1O8kyXyAn3iuVIOUyUw98vKP+oEF3r4hE=\",\"BUAhQGuNH4xwgOfCRTBOS3p5fNI22tktkpsiPyaXgOA=\",\"BcDgM7WJ+N2yOp1Vnq7s+YaRqNAY8Seb9AbQjyeHzEI=\",\"JQiozdRQ+Wm2HHSdVmyUWaFurUMw411UFbEuyjhYS7E=\",\"Jk3MwC5XTKfnNtolByvY++mQliH9T0Fpsrro02j/EtI=\",\"E3GZ95bTENf+Itg2Y8jmB9NCQH3CjBDSeu3EpFyP9w0=\",\"L2h3wagYzx8Ic0PcON0SCDNXS5aRVA0DEootBRwb4kA=\",\"D0GOE6kOQpW9OExNR2Q5jh5EhlBY5thfEDlqfLBxZJQ=\",\"Gmhk3nynBzD4ZXvtQXxCiqXd2v7ibueLlCyGvmGpYsc=\",\"D4vi4lPLovEo5zZdixrZX4mGlozGAiREXyvXF8JgiNk=\",\"FqjZ8mWmb2n61te3RM8JDkkFUsbUrHf4nwnQrnAJWls=\",\"JfGlHqf4iEfNGcnfqchYesek9LihC/kA0gJwOYuWE+U=\",\"KNSm7r85KpN4t62aq4hiJFJ5qfLAsWeMttMUHrsUZE4=\",\"CtdTfZ1bt+NJNurfZv6STYDIk3Rf3OvV6gi3n5E3rtU=\",\"Bq6eGzou24abXG8jH+3ljcff5CvzgCOUzl1iw6ZVZ/c=\",\"H11CUHcesTDARsjfHnf3932iBwk0ajNNvSLHIZEEXLE=\",\"FL1qG1Z4zaTqOhbDtau/OO4dgiGYScw3+8vZNOfeEWI=\",\"IpBRVra7NX4nJ73LjzmmagmCgwcEYpbG1TIqvbky0L8=\",\"ICP8uH+J5v5M78PTFSSe2BM4NLVq6rb+B7f8JGsJbA==\",\"Du944jrQBkj822XrJGxze3tAYLN7a4ReuRQQjxMWZG8=\",\"HzAwvl2k4WwEaNYxB0pl9UV0Yv1r5ts2w6UiRTFk5I4=\",\"ENwgC4wbVl1MLojVvButEsSQog0F3MTPVelkTzU0RVw=\",\"EanPC46X6ibtDUmr86CSM3AzM3iaOQ1y22YfpwscwsY=\",\"AVuXhg0ag1pwb1Spf/BKFcad076w+GtRyDgD1JDCzy8=\",\"EiW/0NcBs0khSHOrA3FjGdnJbjzY2WICixfbhD5Kfxk=\",\"D0667iq8vEnUCKpSxg3MCTyw2ohMSpLQ8oDXsQBgBWA=\",\"Ct7up1lEzV01BF7Iy2pXSHKHqS0fcM0LI4mk8Sh5KsY=\",\"GHSHDHKjLw04UpSnPQ/2fXI0r44OxXxjtPd+chMFkfw=\",\"DNAR7lIXBoLTd3ugCF7BYg4ZsUhdmJiADdKx109hNXY=\",\"LnK5EHzB4am+8WuyGjCMn+P8kiHlX11MvUPujeKX4Cs=\",\"B62NjoY4aHRdLAxuHQjdNXgD9GU+ogRXku21YzmffYQ=\",\"Jz0ymOWyIoTdZrsPXpY/Cmr2jBQBjHKPxCzIKsw4TbM=\",\"ERuDKRhUba5aGnHTErQSRiudK76Ge+T98InrFYIL/hM=\",\"DE3sIyiqvuwivvBAxWWxIndTwdvNnkcPkGpPy1zb5+4=\",\"DSHyvwqy90pes4q/eHEh8BXYisIt4UkMVI0GBrjm17Q=\",\"HgiDdRLzz+Exm4+Lq/Sec4q9FZ4yIidAG3pUQZePd9M=\",\"IR6szDfOo0hcuDAJlFOMFTsdxbjWPJa0N7kUNGQqEbQ=\",\"Ej4EWFH4ZJ5jMuPiCLnU2zkJnwd6EQRVW8OPaMYt7ug=\",\"CLZq5go14ZKWOvnKPoaBAS1SiKWrxnBlulK7FR1AQuE=\",\"AukYjI4CoItxn3z4rzB96CfUJKFm5vnrsXK6QYVaQFw=\",\"BSRYuUFXsOXQtc75/+jgFOr9fPwbQ2EfrzHC2NWbTqw=\",\"JLsCZsIKBAEK3dUUv3bj2hJ20TzFj6+JZo4ji57S7W8=\",\"DNmmGdwGIaX0zbqDA7X2naYga/KKBLltT9/TohTj5U4=\",\"EZlJuRRFylX6bqjaLBHZOJLltM80hVmfQRBu7xSe6po=\",\"AmXsN7VFzV3BKifBEowxShPoyyIrXSXDuQYZNOk8uXs=\",\"BqqE58JGzXI8ePo5Sn3tGVluB0//SsIAFxofTHW9eSQ=\",\"G05sI3UnVlBoqmUmnNc7XEZ1sRSPwx+6vNyqNB9jIF8=\",\"K8fZewmRE8WrZyVP+spJMEG8Q+jTRL6YFS6YpPt4baE=\",\"Ho/UFFxM2gPhfrYsD52MyX9bE7g7qEALV6PYAAnADus=\",\"DeRYrEospl4lxsAosj5z/K0b2z4/G2pzDrR+BN+mUxg=\",\"AtG6K/3bWHha4UDCORl3KfDGDvYR87N31Krjxt1ES1s=\",\"KdlLBojjI2sgln7HR7kug3/Lw5b9bDSLHgx0im7gIfE=\",\"LsbFUAvHmYx7gh0gnGCKYwGVtzTAKlrrFbHHVbeFfV8=\",\"DRhclwuNA/qwywWGBdLAhxx2ryBH78rKDhvjk6SBfvI=\",\"MAxYoLPFmJOlrPp6Ctwd4p36Pxa0aJrwU1zCUT1gkgw=\",\"AjYK6/7ognpLkDcBOm3sivjzgwjRGbMWffGePs7WLvY=\",\"BDuhOaqs1aHBNJEEI16YVe6IAsrlowqF7a2FOwkrUYE=\",\"GwWXsAI8yQKXuKTplmdtZSdrGkxkCdfDwmAI5Wz+b2M=\",\"6xhXaSyuYVBG0P69ku2+2WQXwHuEG0YveLkJYHce0A==\",\"BjmbWHNQaFVoTQJ8dg+luJchrDAECWEU7isMXqcn6qA=\",\"kmNuyjGs6tGi5jEx4lostMteXbdmYVhh9PywbkMh6w==\",\"Lh2UDxXGofSaKPZsDVOfXsRDHrxTPd/vis8PVGO30P0=\",\"CUZBITe9AsiJvD9mAGNTmOXCk0elgJlDOORKb6QbQLk=\",\"GOwsWUhVfIaZ5eQlrkK19R24+urbYrq4CNFmIlPmHK4=\",\"CsFmZ56yhk12dKib2gFsI1c2eDggWRy5UEuJC5EX/ks=\",\"BNuX4c/58vti4WB3IhwgMGwy9Xm+QNeDjm7BUyDDhEM=\",\"DE1UCrF9O6Ayj5U2nob7Bz82YIlthaZ5/5xsmSaLt/w=\",\"LmtL5e74mN179ms3VK0b26sBOrDtmcFjKkicdph/LvI=\",\"FfIHL/0tbKo9bKE/dwOkfAu6lCsNm6CxQQR6KXrhmJk=\",\"HvgVXlwz+IVb/cwkrIlduTVVnV28RCUU1CcuCyJwYE0=\",\"GU9ONFg15RZWRnfRr1GT5n8mVzr+HRL9d2cxJuS2weA=\",\"Kj/VikBDarz0/316WCxbq1Xt8hUKeG7VHFbG/ytmjJg=\",\"EXKcG/Cg+RrDTkRW057m0t0cBkNowvCot29VWALZrw0=\",\"LhP3zh837l8oObrNlP6xBjlg7mQ48Q4BAAdpvChW51U=\",\"DhRC9fD6hzf1DYk1/fwgTPB+b7Os18fLx4/Sjc543uo=\",\"GqxW3H/20K2yy3sBxn9IfjyBI1BFCZO8yxhrL7oHeVc=\",\"DbZKNaNaj9a0hs8A9TJIh/hMICQGN7Bx1GKoiWrxETQ=\",\"LPax63J2ErRnbmXXUKLLFcgvE7yFjgv2wc+HuW+HlvI=\",\"B2HR/zqQ+g7OUYcF8vgAVbdmf/ZnBj+1vaqVDvyAUZk=\",\"CSqERW6KsaJu0J9MnHjfvtv0kEk3u7qq6aI9xoD7AcA=\",\"DPnLGgqeF6nWv0spbuBTDBuIFBvOaTV/lk+8InlkZc4=\",\"H9OzSnw6ROGPqOrbiW5aF+1Dm+2O/XIyRqAJRGu5Xw0=\",\"BLWtGCtLpAraX2nkNnQEF8G8kBtYUV+WnP8vveUweHo=\",\"F67UPwKJVHWrlCf4TFe5ZWg9RKySVU0UDr0ENP79aUQ=\",\"MCdyhIvKzviY1Z4UnvhOSCLtqmCR4jaqQb1oOsvUOn8=\",\"FLZsSw9e42yflGRKQRDNCYJcyMhfbLMoOR6D/Mhscek=\",\"GNbQC9e4Vhndi5eRWLqqh+X9l6DG1TbCEaPsZjRY+ys=\",\"DAlMKa13AY1NoBrF0Gu681MzC6/FWpQvuqMLSHbhEkA=\",\"AfbEvZZyo0DBFGI8g/8lDI5BDwo6EbT+dpCZ+L4jDk0=\",\"J52XUe5znpdKtleSvrknZ3NTfiCV2+gLryNq2vLZ3j8=\",\"JWCZm/i5uheASxMGfdSwsAIiGdy+Fn2rX5MAtoI22io=\",\"AhHYBQoMwI1DPUhzgd/uduOcivxGKS8zZWUSH930+LQ=\",\"JtxvSE0URcX1wgj/Gkh+Ny8fh4LewKXaA6hfcG70jow=\",\"DRHqtWfEY/1nlsO7cRRnpqePfYR94gHrcX26UWgI0jc=\",\"I5swqGbjd4SRuEKowt+a4UpjFZgcI5TCbZnOl8Tn/OA=\",\"LjXNv3lTNHHkhJqXRn600bIcatjvNGkeCLdO8Zwnc1o=\",\"Ijdynq1Sc+jWrNQKY+sIgToik+Id/1TqAmGca9uxjHc=\",\"KQyHI5NvNrkaofxCdoAH6pBJUuwOQUgNB0uW1BcD1kg=\",\"HCefHVCGDs6BSMwbWfXBSoUK8vOn4q+4/d9ylk/fnFM=\",\"GTjkIUYF+OL6Wef5DrEOug6YTCSl9cG3GfQUISKZIuI=\",\"G0WuNqMsaJFQSJBW6hYc847RUG8zpxHWtHFlcnfXcO4=\",\"LwrIt740nTjwrn99zXzIbrOqBscIs/r/kPaySotpFDE=\",\"HEAjjebGHcj9tadWEb4NS/f1xOs5/pwGXCaulw4rHwY=\",\"G0uqcek9EwGK5Ou3kLwYjEtGyJLGeConEVvKxNFl89w=\",\"FF0P0Vlg3+WXGH3N0pJ8UXC4U5KO4IaGVVylpXq0sdM=\",\"CDeRpCOsQFBOfJkISYBZmjNZymk8aqzEexkqMl1t9iY=\",\"KZmIXJR8ndAGFrv8CIgZ/+TA0vkDOwT0CKz88deWUaM=\",\"CNCmKj7gW8NiQa9e6gti39TyjDH753+6rjkvp7Ba9PI=\",\"GOk5cKioBwoYNRFMQxbn/8JC6xKAMayghtPOLNNVjjM=\",\"EmWQ8nO6zdwo/IfBALW8z5XupcFgfbvL8FttspkswS4=\",\"IaeyoYq6m4FAbP58ZMGwtAN8JB51ZbUnYNdOdyDpIRc=\",\"BJhd/yQ8u9jqwWt7bwNgMRgpOWbeCVsuBXBDiRv1F00=\",\"GK1VhEaxyTQuOEbDmNBXJ+vCLUqMA95jgMvlWqtyQbs=\",\"GwVdkI2o5mLuSwXDxmiGo1vO+2eUbPprru3djLBvtl8=\",\"GhAmP7Y71PI/26y6b7Pw10mf6i4eFUezaxfE+nncDro=\",\"EUssP3cwrgihoxu9wnyhs/2mPV2OtVvaxleLJ2Mzlcw=\",\"Gj8n4g3zxARfOmcGXthpN34MY6mjZ/CfejvGPUAGuuM=\",\"Huu0jmVIhen9xgs61nuYhTCSP2X6dpg4UbEJJkC+vvc=\",\"KrOwW5zFiDjuhT+dSkgXx7ux76ne7bhNUskK2dgMKx4=\",\"C+jVEMPw2O3VcWlx8kUrMQauD0kz2JRAS8C17uzr41Y=\",\"MAIl55K+X2ea0tT4s9BwSVvN+HblBSPNh3tPzpvTBUM=\",\"LfSzY4jRHCyl2VwkyT6K0Qunt0c1dTzQx6pIBfrb8Pc=\",\"DvberFrjIcBUY5RE1PADFmMZWZe0z94WPHXpiesGKbY=\",\"D+BBdTgxqmprwOoIoVO9WkCd4U7PY2s2glOQdDVuWFI=\",\"EHEF0So5TbyzGDK1cIGu23PgqhesfC+u4YcNLawUf4k=\",\"HCYYVi8EFmvPqTuAxTfqizWqB9juM3A/2nYHn3t48c4=\",\"J/f02RufRSIReZQ4pjjwyA49tY7LjRlOl+IR4VjfRvs=\",\"KpmC8xyfYotDZS3CAhfZqRvfqUvRJeHgMuT2Ym6zuwI=\",\"JnbBRRAR2rWJHuj3FUCUEjlpYISWE9EzNK8DYXa380M=\",\"AnyV31bbqydmAmJxdVble209ZoaaD4NL/9zfWMgN6TI=\",\"BQJVyOdapOKUuSFzOAPanWuanu7ihga72mQ6kSL8drc=\",\"AmoNu6ESjB7tZ0vyHnp9IxY9SGNJZ9Da9+RnUBdo0jc=\",\"FugMhIg7M3DnXxqyZrRvC4OazKs3JieOwgaZi2Lnid8=\",\"l4Kx+1rDnjEkxehXJTM3pFA5UKbdFR8AWWPJIlStfQ==\",\"Cml19F0/e7GMfbCihs/fvg11t5x05nrSJlzRaMFnDB8=\",\"CbLWtN99cHMq017u0bRo79kyp4Dp50y4LD3BxHtMhEA=\",\"CWGV43UiwWP1/WbxPKyL7nKuS0RSJOvYU0Cmm1oyJzk=\",\"JtAV1wkxBC7Oi9FdtrCLwUlrdQG68Mi/SlU0/WBCKUE=\",\"A59dO/Wc6xKFQHmiZ17OznuMxdmrnD15rcHRgcphmKk=\",\"E1KzDsYdkt2C4jYNOBN9L7AsHnjW+ZzEN+hkC+zFYSI=\",\"C9jp+wOwNwnAvmUQsjP8/7wfn2P01gGbEQ93QX/jgbE=\",\"FNN7eSD6/5/xCsNWgSL+OCIax4Pmdb1fbmlJR1WFNyM=\",\"IgjFdtQ5psnAw4DnBj//dqHyaFu+1v177SPHMvNFUBo=\",\"CPT6cbfDxxxmwAdaW3oMticcb3Vol503QuKEfNZQqlU=\",\"MFU+R9QoRPTcl9O5be57bEg9KGgSXrfeUIFk3iRmt04=\",\"DhDCy5AU8RDLVNJ64BMJiLDDKlX40RHyv3l9xbLDmoY=\",\"KAGGjAhhvMlTQF5JZN/UR6iIjYg5qn5BTeF2x8Bh4jg=\",\"I+p9r7/nvx2Pi07IOqHwzjH9/JrF0sygLxTtG4fK9Zk=\",\"Iv8BLtyrZrdBbcpjKlnKum1kHgL2/kfnUQzpRZZvNyE=\",\"At/YAHb/uuzZcxGlwLIxRAAAWh8HtsIdkiKFg8pbWks=\",\"AjxFph9PLIs+Bmom4jLibbk6qiTi9l0mYBqy16G5VgY=\",\"IHKQf5hMo1vOmtPoLYww+azAzpjRReT+J35ihIlZTi4=\",\"iWTknemp/uHKdi/78H+MSoEivE6Q57Vn/P8Aim5F5g==\",\"LcUDJnsUl6ghRTpzAw8qNSMhO/DbnVsGE0LNhZoc2Qc=\",\"Bf1Cle4OdtxWr0EZ5zdqWT5LsYWvYK3d8jK5Hmf7Ku4=\",\"IJL/62t3YIcN+vRxgj7XWR/PbmvVsbz0N3XTwHtGJwY=\",\"C/Gkn5uaw00w5GO6eX4+CN+0JHkephKygJMuwgjH+AA=\",\"JyqIpT4mP/Cla/9MxkX8wmnTrVpj+WJf/p6sk6Nrd9Q=\",\"J7tAIrH2iRhLENbymCQxHMxeLvFKORSuqPBsy38qqM4=\",\"F48O50yDTA0i9668UXH5YLIFRt2ctTs97XijUatBzhA=\",\"C/bfJ2s/KK/VIGqGRt1vTAlf2YhxpQYFAvOmREvjIbU=\",\"IZ1OeQkt8TsyI/k10qCiVzwffVCakd1/xVM9TDxdCY8=\",\"IPVwK3SfVt+BBBGtmVDKn4fx4Pl7gWMoCzst8Ftnm00=\",\"EXKE8DiHK85ox5GtGCRu2EuttpLjOPcWeT9aa/IWOG4=\",\"LC28ZaJrMT+EVn7XHUCEcJPQjOjCuKNDxit/V+9j2Wg=\",\"F0M3PjhYzcBYIEnvfgKE0zQDzIv1aZfFCKELX7AIrnc=\",\"C6KPKZ0cox21o7wOggLpzo/oX4DE8D+eri2rXeBRplk=\",\"DkaDHcMvc8EIYFX66t8EfTQIwswNwuclyHjcnOaPF+s=\",\"HYY1zeLsZKpQ2Nl54p7xH6AGC/huoAdiJQ4xTiiB9wo=\",\"DrbYb34RsePcIYglEeA7eqZAY2iPxS9lXxLjSjQ9vLk=\",\"Aguy0bDK7RFLBvymSLBwOnNG9rJpDyIPgudxC1hraoE=\",\"HE21rIHg5HgYv8CPfsLWa/FdqquO52Zyj1iFOetgB14=\",\"Fuul9d1GQV9Vq7gZmwBprTq3p46O7fr8roRXYKSx5SU=\",\"BGcYxJz81nz8J9qvC8ANsBZaizS9GAERC4XD+JB3nwI=\",\"EOzPO0zxZ814+e7qzEYu7XHrkqLjG9wfxLFsCxn+tE8=\",\"FuGywN2IUnd08YvFP0J0/RWlr882VvFJunvw1nBQ890=\",\"HRO9OW2lpo57gB/wssbCcl+WG/Yz0N+vGksskElprlM=\",\"ICNRgQSGixuX2aUXDXozIwv/BhjfSjGzgfvpoOoyJPQ=\",\"CExPkFASAjnYbLDYRTXMuUgh8KHe8ESV/+tVnxU93CY=\",\"H/b0I9lGZ+8teWYGAOBcVw9013rgcTnSAZBp/5bINWY=\",\"B7Vxmh4JuWpc4sEwudPsdgAtgb1qi0atJydANrs2O7o=\"],[\"L7WDdis3WSxsWpXrHQZpS2xvncTxrUhi3Y9eZ8t6P1w=\",\"Eun0bNgjG7A9QCi/ehHXwOMx3AXAiObcPR0AHaWLhaU=\",\"EnXNcDJvUvgWp8U/5i4yPv5hpbjTdH9t7Fg3qCWHOvw=\",\"BufRZbV7ApnSPnUKdeouEsnHoWlUxApNEJBKYeh3NUE=\",\"L2fyOpPvHiFaSt0uy0G+9LnYXvkTUGXZkoAONPqYEIs=\",\"Fp65lS4qhiPvON5X4V4kLfOIAZSJ4Bt8hPqDnYZNzRo=\",\"D0zUBLQCTKE6UTujFW1N6cs6okDGg7Pg63JTvJjItfY=\",\"HEhr+uOrAy/1GejcptxB6gYLDvkIMSe9fCxOCJ/UWso=\",\"EC50WGQlHOlAxnseL0vE0n/ThRVxzmgTuqxmXozAx50=\",\"HmptYgQz0iKTBE/+NqXypynBKczj7rC9r9zQ1SvDurU=\",\"CPOr+XrY0Bz9hlH/LVduPWjsxHqtgrQYjZITi65gO20=\",\"KD2j8c+Ed9mCHuYDeLHDnHJChRGhudZoPAMCk4wkjOY=\",\"LZnNjYjknguryEy9WK28FDp1omuhb5ZGai5BYpc0Q30=\",\"Fx7danRWpMJf74qm2LdI6thpNp9ypOUChh/QN92o93k=\",\"L6tkaUNp46K9VzwMw4NpXAKjgeeFeSo/q9bhyo3y06E=\",\"DGFVlE9k92lPyOzSormiNwVow8iY25Ux3BjHJHT5r+c=\",\"HuDlz64DBiIkkhDNzacUN/KPCxcwZTwJFe+/wIYHw8c=\",\"HBUVSJXr/LreEvDgLwz2X4c1GxlyNYvrDq5raXbK2rw=\",\"BGf+3Rb56Hswaa5pfRhcnIhO1dnmS7gUvRH3GIV1QIM=\",\"K1VlhS9llpuwh/y1Fia0dUtpE22SVG//RLcEiy+e+KI=\",\"IlCswn1e+ND0ro7ed1EKf/uJfUXZyT+y7OT+TJpSD5c=\",\"LAq+Jv+L1HXvcngVurioHRVNLB427s0HV0IieCsCqMA=\",\"GbC9ngxfofVohb4A/pfNTOjhB+laEIOLcN/zQFEYimk=\",\"I0L6gF7rKyN2M5Qq74C6/Trzh+yNRy9dEuj5g00y6qo=\",\"DtV2Y6KmTHOyhwrwBlzrjN6jl1mczZgjdH+ITNzY+vk=\",\"LI2oJHGfhrvj5gGxnT7iqft2bnU3qsLqn0TOSJbmS/w=\",\"JC+6h2sWNh4RxnfWLGqsc5MGg8DEC8EZOCR9LCRKRHQ=\",\"AYDP0LHNOvfVkD4eY4vdxnEYdv/21bEmBykN69XkCbM=\",\"/ozhsmXWV+eQu4LmiBstp3RxO3JLmojsNjc/pm+RWw==\",\"6HAcsPAx0Dpdgfz5SSMN043sEiGO2TfLMdWMxGQICQ==\",\"B+1XX5FUsSsPvBK/9DUMak04hZ0Q9VfTjFE7N0afR74=\",\"Iun0bhfdpAZqSvgaS+GclN5LEuCSH4GQMPg1Kq0FC5E=\",\"KyEEn3uObnZ9Yz3L8qyyZNrceoWjm5N0WME09lKm6l0=\",\"IWxaW/9EWsOj2h7rcGiYQ3hAkFuf8n2vvzjvpHC9C9M=\",\"LhS9TwFGL/0Mg5KaqXcGrHcvZqOgoDJsAOrBH51aSFs=\",\"DyjlHi93cjkgXxPqIejzMXKuU4sh+2m8/NgqxRUA7q4=\",\"LCKV7LrZzxs/anc8aXFOtGY6AYJwRBaefx7dWDgQbuo=\",\"Aa/nsdisQ4c51IjvAD+cPGeef+LwkYu8+TrR8SfyKB4=\",\"Lggz2v6HJ5aFzVtaAQX4uYd0swg4M770Ngi8qEUbIQ0=\",\"C79CZvyghhNBxxlvwVWS+iLc5hQZNeAfxgd8d0y7lnw=\",\"BTDGawfS243uNqsA+RxaoKJrSNiUDwtyc1plSB5eeB4=\",\"Lsq+7DGHemgFiiL3c+ktSDhnwB330FDD+pU8zOkKy1E=\",\"HjecDS+dC2WbxzK1donkjAJiqXY3mVnhK5XLXUWCDyg=\",\"J3Z3VmBr9ye45TYQAsYT1sOiDfnBeIycEi06dzams0A=\",\"G+PYMt4hlkQwYsO0IyGuBXeTaP9G62j+V9g12NZWriU=\",\"DpuDlwCxjvPropfLaK2ZKzvs4M1b7GXm5AcSQlRH3Fk=\",\"AnYJAJcKNNIFGuWH7Bj1AtJGBw1wwsPX/t7rUb3LeF0=\",\"A3DsP3Aob0lmks1fUPawbiHFzYn6KPnItx1CtLoneQY=\",\"C6j4Y2Lh8wG67rsjM4k/f7ouoILXWWmpfuMJW6q7EKg=\",\"LWg8PNe09US75Ka6qar3hhRDSlkVKZ/7N/kqvLSk3Wo=\",\"JVRMz2ANhgS/PhGu677Te3fPsbIvOxEKkwyR6eeVH4I=\",\"HFg2deQj+Uc0QygxUoCWaDPwX5Giokruwatu03N2+Vk=\",\"DLdS79B8hADVCgbz4bq6PLNbC6KLJi+FJvXrCrW8edg=\",\"FM9EK28iyj9MFpdOLrVsoITQXrk64QSSdbi8vk3COPA=\",\"GvG5Nb21YHiX9P8HRasIFA1ugIeGUoVbGUdXb8/uT6c=\",\"JJmtS3llIw1N1dHEHgBpnEBDPiLCdFgH7/OVoT5vHw4=\",\"K1guoWaQKBluYuYicaNvUysUwKgQnTTOU9+bdbgdY6o=\",\"HDNaNHq9oEfEta2T27LpQS1SYEn+H6vhtf7iXumeC+8=\",\"HjRRxJXGDc1ENzBAHvMp1wVx42RN17VmTOom2vinCqQ=\",\"LZYobm2erdY+OTM18SF3EHRsy5KINOcxBYI6y9LaAFw=\",\"DBAz3iGJHszpvQr+MTM09+ZZd5lOVFIE1hauDsTBvYo=\",\"Dw9Rz223PpcKa478iCO8gsrIQD7DacAqFK/+X7QO7jY=\",\"CO0tzsAWuO7cBnptp7ViSEwBAjTYSCF4BmKs+dKBs0g=\",\"GaXsO3iC7JEL91kOl3S2P/N5CZlabWlWEdVTLWuBpQ==\",\"I/7sXWI1pAXw1T/BbJVfoCFMu1T+lzlIod05JjYHwz0=\",\"CFQ43ULB10+wQH5IqxtE4OQqo/VLjX1PbvuHECxqAOk=\",\"GRbx1iGqr0+Qcr/E5BtLeOgrWV11ENUHWRQUwAX9Ayc=\",\"D8JDUVbU7nbpqFrGrsL7tQsLd3lcNwwhg/ypvLvQdpM=\",\"Js9NEhmQA/aXj4B2F4TeCRnToUiHpX1KKLT/OtOb2Wk=\",\"LEgDddjb1KxPA59FL+Gp8HTIEdSNwrIU0/XegnoaICU=\",\"IZtfgSZ4Q0DyeLd7dl3ExpeTez2BuiaR+JeYOfAswOs=\",\"FK3C8nM/VdSftijDukERDhaUYhSZbR+TJiuTR8/mmiE=\",\"Iwpf42bgqk364dw14CBpWXgaZPItXGhOU/+qZhSx3zE=\",\"Enn40uLUOp6zt+QUnRZFG3jGURi1qA+GZ49e5v3Ky94=\",\"K+TLQUSqS45wXDfaQriBnwFl7zR2+8Mno6PesKDo11E=\",\"KDsY96FJzy8sjMRGUTtaA6BgIs2FnxbaEUnn3HxgpFo=\",\"LVuviIh66+ItXZCW3WxF6UH2pnNprwHHVHnnB4AzeKw=\",\"HNmm/90Nr3ypiQho2as5jgVGM1vyliOt7Xbk96+lrVU=\",\"FgdnwctFfeKstAB4HYzdJbmfda8wHnScxGBJyNtVY/c=\",\"G7uxm/OE+YEqpjaFcp4N/gbzRUwSE5RUcHwXicOfym8=\",\"CtO+t1yRzrCyu4q6KhxzyV595XuNWnmE6fTQEPFaF1U=\",\"GEHrbMNaHdZP66HYrWz+zWUGPh5sLK1P1b/xtGFOCwY=\",\"I1bu3sSILZAyzoIdYRuYd5vTROKr4KV95N4GtyvmtEc=\",\"EP7eYkWpx4s5HmnbkRCDBr7hMPrymEMtYKSUTubtZHk=\",\"K08oFhx6hDaSsHQQIj2LXbdi/xasDN7UFsNZTealNEM=\",\"HwhGsbJqo9sUrA1plyyRGAURg+0dFjOHa0TJLwIuARs=\",\"KP96d1LlFzTh9WjGqj3eMAnCLtIQUD1dzX3CX39nZ9o=\",\"GjrL3XOXlNJSFQOZxqiz0RTZfWQ9TOg/6PZPQdjDTpM=\",\"KQukazgXmkR8yB0AMdGOm6o02ppgun3zyyx2VL7z9BI=\",\"C5h2WJY37jYow6CFANZzY6GgHaehrIH1KMRQ6bBQxuo=\",\"A1t7M6HhfG0WdMwikGjgPT0XZ7yVDWii43bwx5Oolt8=\",\"B+azCg08JSa+ZZIOa4c95y2x12H3k1IC/OCIU4dBs0c=\",\"Dl7Yc5NJXCp/O4d1eMa8CWU3VReRWTUdjmdHCr6cxpA=\",\"AoJIc6t1JhFZV3NqXNrlg7/O4QudQY744XeV3jOG8h8=\",\"HbSf9H6mroDCZlT/VxTmnPOh/3sxsfp6O55kYYMF1YI=\",\"G+QhgJ+AsRpiag7rkno5wkE+cgXSXIkna/VjNWUDiUE=\",\"A7fHYptTXfW0hyEfTnibmih6vnxFNjLvfUJiPC0sN34=\",\"Eqn39uDGWs34yf01T37ITW5BY4Rl40fzBjrcBOAOgJ4=\",\"HfWQXjh/jsgRKMIP/ZlfrVQCCW48xtLiKaI3CbaFmsY=\",\"LTnait5hVjYHDmc0/YSDaNWEKKo7Ku14TYQp8gddEi8=\",\"AyfB0fDdNbCN+EDbJXliMkPBPZwHO51wmEvPyXyb638=\",\"GKEPPkUqCAdq62uCUAQyKkim+w9RlW9QJQpBpJRUtsE=\",\"HpTfoLIfez5gR9WZs61JGmk/5Fit0qVsXtFhVfrFnqY=\",\"D+IBaUFGG+sPC+0lvzHoyaNvIf1hz3AJXS2iu5O/Oy8=\",\"DOuCk3yEkj12v4VaG75BLdPjXQN4AHQER3iD2IW0JbQ=\",\"FphbLuZLQr+boGc76w5HWAdjxSf0eS/plMI+MEZiGpo=\",\"EOb/lsXa2KNNevLjxqsuHrbvV4SSM9KUX8CqvUBOW20=\",\"GS/bxTs4K0WqMCDSFmXd1la8HMMyWBzHHsl8OtcdxUI=\",\"DYQxwU8f9GQPv2mQUG2TCEO83rTe7vM4C1zyFho70DA=\",\"BgRjK3DRwNvHTtKdadEdN7kGaYgsLj1nhLR6Wq0DSV8=\",\"DyVTx/pb65zy9pV7Af97t9PtYfnC5vqKUyZHBPmGwZM=\",\"H9wrtBrAQY2DUUFNw2CrLdMk0WIoB89Z21ymqsrl1Y4=\",\"GMQqFX85v8raV+CFx80zeByvx7M9ZQXdqCiXKWapwqw=\",\"JkV0jRsTyCW7RXqndhuc5UJcVhN+ITyGNMh6spVDuh0=\",\"J4ivcs21lKwI9BJpSX4a4Y1EIy7Q+AoGvZ5y/SFuOXI=\",\"Ia4inqZSnE+d6Je7hJq2uxW7ku5B9z00jBC6jWSsvP8=\",\"Grz9+ZB4Rwb1R5JmBmitEG0aaTYkV4XD/QI6U0TMJeo=\",\"Kczx2TTypkdZXRvgkAACubejQ8Pn06uaw9KrjeAav4w=\",\"A5wv/aBPuFD15w2Xyi2T/eBbZRsxCx0n3CmLn8iI2cA=\",\"HyulO/HJlmX9b06GKsCImaQdqTgZgVPkxji63hRxmhY=\",\"JFG45CMs6cgJ5Dm261/Su62PUem/BCmjO7DulbeJBxk=\",\"FxpinSxANkMnZm4MBc4wl7K+BepcdRI/p4hRuheJgOA=\",\"CMmzTfMRoYdkBE4klhqV0bLcrDxt+bvgSAZZYR248Tc=\",\"CyKj4yGjijgBQECR0rFg/BM1MOi3pS0kIsnxqLJSvCA=\",\"B5fENevlyEWnQ/h6fw0mfzO/uvyfFonCeWs5J3Ln0wE=\",\"HnMGsxoTf837OJ+sZLXx3cYUe9HMfzDxHWeHBFQWXe4=\",\"ARLwHFqotq6S4sjKdmf10hoLHkqM4AoszM3EWa3psBk=\",\"IZ3mtC3zBpnGaSHBHombiI6e0xe1hqvtNvt2krEhaxs=\",\"CGoii6VwR9xbu7BL7e8Nh8GnjOzmqvm2mBF7KScF3gQ=\",\"FOmEMjV+/UzDI9oqNEFC508qoRfMGqS1Wa2D5UHr6kk=\",\"HmuJWFhpTuyteLi4jVQhfIedi4atkoGQeJoJFHFo/JY=\",\"FeN/rx0IST3ytkNXbhd8n8cE/s8WS3MnSB0yMT1V0WE=\",\"CF0PVn3azT+OXgDEIJzZspZpPboR0Ah5YptSInDnmO0=\",\"EGffgh9hb8ljUQTVshUPgx/wSh8rE5nbSWc+gMXIbbE=\",\"CQMyFgQn3j6wVfm4dI9+K4jBH0FVducuTgh0FlRFV7o=\",\"LclHSTiOvYduDUS6AQX42jb84NRYMeQlUJLVx/i4QiU=\",\"EYyFfynlolPVC00k0tDCm4LGisTsMeiLxDx0qUh+eV0=\",\"CvZ/DQei/kHHKkV8kulUWKd9ua0KKHaLYrZoGt6xFXk=\",\"MBBCBK0PrjZvEWILLxLua7fBQeL+x+Kdlj5vyU+Mgos=\",\"GXasirh09JzNYyNfTYHPADLOZtU7DZqRDaO40FJKWmA=\",\"LDFt4xZ+3rchqxJwoHSO5/d+16inxydVlDb2+5MTv6M=\",\"CdIBHIOkyRH0U150H3lDK18qW45TVh0XlJbdtjy3WfA=\",\"E1u4d3PMohkctdIu1I5jPXEUkRm97mVpYjr4g+1zQpQ=\",\"LUfOZVKWdTmZ0NjKvPBW8AR+qhZvX4vDzF62Ae0sVgA=\",\"ErOuL402M3AmdKTqLpirW7GG2lXLf1utA4vgikb4+Ps=\",\"GUFnPHm+g5JKQ7AVnl8JGcO0vTNN9WfiOhCdWtcJOpY=\",\"C1JMG/PDkihdSaQti9q0ykVFFHkuKrtbtPYskCybkZA=\",\"FRXtdyJqMxHq3z/I8DXAFv03BaCLip38IXX9e/WOuNo=\",\"BkhilzvQt7dfe0YkqE1oD6t9qbZ0GqXW7bdqnQxAy68=\",\"AaIzYf7fxeSUsLLU7rgMk/iDWnMQC6y5ib5SJvzw31U=\",\"AUdSOB37lmWUchzZSGdQpPH44zewaBCTgxdWM4bU5UQ=\",\"BKCQNOD2niZYHOZuCX+bW+AI0Ivmh7gSJUDy4yYpFKw=\",\"ELt2Spa/QCpTeFzy60r3sF4g2JrQZYre0SwbWBURU48=\",\"AUmc/QNriuNyRYVhwZpZqmNQVGkoGPmzI0cHFoKY+hQ=\",\"Cos7SOxovC+p40UhCZaE5yJYJkt3luqpvCEwyl+WL80=\",\"GkblnGwhydVLmyMfwUAzedAeFmgL/pYi3MAVVb6HSH4=\",\"CVaaOP+2wz2OvK3GApo7qOqMit4aeHTD8BdRbDWMxpg=\",\"FqnCAdV0AE0CdttC5+8xWSzUmla5t2jKc8fG0d3Woso=\",\"GcBflmDyy2sRMXnjJlb+KznJMHwNHps+aAmD4nvJQcc=\",\"KfS4Ed3cZyXuWfpaKK9UXLIfFct/pvmIXLfWpAWgY6k=\",\"H5knH/6Ssn/fVhVy5fYJL8Bvt/qpy7LgdggGfN1SmxA=\",\"C5/c/cffuHJJV/ADJ93ZNy+Pzq271BWDtmcmslK2wIk=\",\"GTb1pBznE1yQJwR+wddZv9kcpwpiMkQA8Vox3r8Xm6A=\",\"Dl6vpgM0181xJRZj9bkd/hDsUDobL+WziGrZsQZiq7A=\",\"GAZdBlwwT3lTIxJA9USsUdiX9Yd3xpu50fikhqEMF3o=\",\"Jnh2a+nSxSUUeZmXYOqNb+ShUlCV4xL648y69onn6Ak=\",\"I3UPd685iKBgD/hothueXj0A3g+HWWEtSvJgz0sRPOI=\",\"BzGLEp5HidIb7HkgujVBk/3W/GKO7BUTY4UoQxJykls=\",\"KnutHrLmQYqVSGlROnpTHFjwmFxkqgfbJvj3lJ+whh0=\",\"G6uJx6648PHFW/Guv/2TelIM9jMK3ZPMM4Rgd8g6mHo=\",\"FVLVmFhk7yhErj0gpAo2ik4DKkyknY/2VGxFDLHgeac=\",\"BLkRUbOzXxH1mWNl3kPUP+VHbluvpvcR3DD6ziYj0yA=\",\"B1aDNMegWVtawhBbK19zil3wkxq6hXa5cHItTkXJEtw=\",\"CxYuRYru5S6kmtWc17X9Lf2iT72d6M+hzfBgFunRccA=\",\"LO8ySOtNrlV5PhvPpVPJMV9reMNWJRUI55r3z9itldM=\",\"FeckWtl4VzpeK5ElJ955ZM1K3QX6w2VIR8wLbt7Pua8=\",\"J8Rx2vBZja+A0C4GyBcflN1LaJqgvuamjleziN3FIVU=\",\"E8/d6TLC2PlL3OrnrXoLpdVF8qwgoE9+k5fWe5QrCaA=\",\"GfmmT7nRCZNuhA0cvhCMnDbrRtI3zchGLqgmf67n6Lc=\",\"FBaczfCHJYJjMrvVItcu+UtdyW0HoYNZsM93AzEiTWc=\",\"LodEF3zShJt3BAQhkH/EqcNWxM0CzPMt2PBThv8xIuI=\",\"FQfV3rm/a/oQ4rQytW2qxMpi0wL9jjegIezxEetCAYo=\",\"JtcJezJpxdYYqVuvubEoqHLFyF13BRWygVtYHpTIuf4=\",\"HHqydfHCIbwkjYSY27BcR/Qbl/vbY3v+FVzx51hJ1HY=\",\"Amcwd0BcyLweDYiSDq4aeX16QPmZk4W+Dad2wDJrkgY=\",\"I/6BvpuSGb4OYxLykCLH0M7JjaPFHJWYUtlR1vHLY4s=\",\"ELo8GD+ziQw2D6VidgrbRWsBlJ73FR7Yq4ED8xx4kKI=\",\"LVJZ2qwjHODnSHLEBl4U24syZ5knhycBuuJD9oQsNA==\",\"GmN8Jwaplv9XwDf09e43UB+z595NBnxMD1zPMPnYKgU=\",\"LmBnxVjZaDGt1tzj92aFRvls2ExOIny85wCWRDHs76A=\",\"GgxdNfxzKFGRfOO9E6fyj3WJhTf2/47vGh/0G0t66TU=\",\"LtyGcJXPlByx/3iHkmpMjETOsZJxcuObNi0vdGG7G4Q=\",\"LyBiplw/5zHirqAkGY5BdifzjWzZHgpIdKhWEiqdlls=\",\"JhqZZb5p3j/9dCNcOiOePjdM/hIJD2kp58REK/uLYaA=\",\"DlGn8hCd8lb/gU/DEKOwjv1bwWBpivmuIZwmYD6EtYY=\",\"IBU3SFyBi+orG8Y1A1x/kqxL6TsacyolnlCBxrEIIv8=\",\"Cx3GbDZN9spD6WzpFgEs/EkRWmY16KdqE8VvlmmR704=\",\"G3DwcJDdscSAwQVX0vgYwjVaDQES8ESPRXGW2w71heQ=\",\"AZQWlEOKE52N3hCGWHZAMgf2V6KIMRfNOozC58XSTzI=\",\"DPAxcBg4xM6qSQzTbnENNhnOVASOqCbPI6LEVvJF5v8=\",\"Ey1/rHNTWyx5XdqqOmkoFwToUJfXisbosenop3IYY/c=\",\"BK7/yg+ZIv0Debaaf7cQtJ3NBQJqPyV2pIpuBPkbYw8=\",\"JfW1AB+HvyWBk48+3gwqejUUHHq8Plu3u4YBoio89Dw=\",\"DnEZJ1olsrikpqylNGUOhOxytJCkE4TUSXXtjICiooo=\"]],M:[[[\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"DMV827CFB9Yr9npEk8wmL7bAnVVwE//x9XP0MSIfj/k=\"],[\"K51LQRDJrpl3guFQmx0P2yCnwCu9i+pzBUYrn4Elseg=\",\"EnTmSaMu01WjGm7WlyThra3oV+hutcOhIbzRR5QyA8g=\"]],[[\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"KWnyfu0xpIC5w2x2Q3nbyizI/dFBXD3e1ilAvN4L13E=\",\"FDAh7GhqPzMNX55lRjgGXObNeeKMWzdTMmJE7mWhsac=\"],[\"Fu1B4Tu5wMZq4RlCT928vJMU3J/b3upV1sZFQ9xJA+A=\",\"LiQZ+ewC7DlMmHHIMpY9wbiddDyMe5ZAKbIxFoex/iM=\",\"F2zAKWla0CWCpw7/CKb9mdBX4S5Y59e2sWzfq8juKRE=\"],[\"K5C7oA/KBYn2F+fcv+guDfcGq2QM6yR7eRqTt042c20=\",\"EBBx8AMjebaXMVh2aQ8FPRSNThCfX7BlyKrMVaD4m/o=\",\"GaP8ClZwK/QXun/uOAJZP6ZERwMHBD93cyec1x0l1eA=\"]],[[\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"KnWhcVY7gH21Jb4llpmrKP6bx/sfcJQ/8Em8lw6EGgw=\",\"IHBnnnmHgu9ZKlLKnO+CDUl60u7Lqn5C82az5SHE7UI=\",\"L1ReV4ICyXMkiFQOQfeDto/wYT/Xk3X4uos9MJWOdnc=\"],[\"J3aGSU92RLvEqbGU4Qck65Z/HcWHGOWePO3IIbKnrhk=\",\"CDq/9eEAUfB44oJ9CS4a6Ai03T4VzMNwbzjOQVe2dw4=\",\"LhjIVw0gv134AHOaU9p12Qbs4xjNIkq2s6K+l54tfqs=\",\"I4EL+Ch3/Bm/9+7+rj+vS7gQTDK6TNcBWWoVYj0BR24=\"],[\"Aj22h4Tj8MwLhWGIJqmzUFEpwWR5lzsKhKRSnmawnGI=\",\"GlrXG7vs2Kl9xJz9uuMDrSTVxHQeq4t1aKn/glOh628=\",\"D6hvDyfk091/M2fOhvaE8fLkOG0+W584+ig8aqcjtgg=\",\"AU/NXrC+bVvur8SUQDTPMhwGjvkw8QviIH7VjSo0zdY=\"],[\"HTWdJF8obBLVDWY7rnM/l4rwjNvWMBfFezp1ZG/zgsE=\",\"DXRf0A3RZ/uGdyEzZA8CzpRQBKe8LFnoeQ9yXF2E8K8=\",\"A/Pm+reR8WYoFo5LFNuutlcDXuPaayyoPwwkkeC0A+s=\",\"wV/DodVzPdg16uCCPjd/i6SotidifMK7Zhwl0g+1Kg==\"]],[[\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"KnC58dS7zNvAPhfB0dzbAgUpA9xmCeppafZhsut0yDk=\",\"L2mnGY4fvMfepDJlMGo37VW5G/9lKtaapPqEeJcNQB0=\",\"DD8FCmv1rxUZgeVePhopoTw/+kVQvSUU8a/Wxfch+DA=\",\"KiDjpKDlfZL5fJ1hhsbD6nxeVcIBRiWb4veMLMwuNZU=\"],[\"JftQtlrPT7BHy9OxwX2Xx/4m6pyiONbjSFUEhukcd2U=\",\"KBFUZRySHnRjFamTTxuKG7qfkq2O9Ll5EVuOLpkczXo=\",\"HB7dYmRbc62TGrgON7uyZ7oxKzQUDnFtajdHWU0wUg==\",\"DexU5tv3UgX6dbp5kr008Isu/i7NQkpz7ad4QyCho24=\",\"EEn4IQVmtR+q+x6aXWPA7nAWc67YINnEQDsB/rcnpUk=\"],[\"KT1hfX2nIQI1Xznr9i+RsG3rUyXzZ6RVbqHjHtV2eDM=\",\"KMK+L4Jk+V8LU8cyE076M4zNj9ue4rRfuGqJT32zbDc=\",\"FbmM6T5HvGTOLyyWxpZjxDnEDGAwSUZvp/mksii/wys=\",\"HEgqJacp9d8gIlgVA0sZYJg2ShH02Yj7fMdc8y2BNvo=\",\"AuysaH71tLVoACvZ0blrS+81emnj6GtVYbkpm4LWnI4=\"],[\"EE0ClasAyF6WARGsJdpHQ2ZZnldam37fYUXxS6bTwcQ=\",\"IYiAQeb+vVRtQnyJCxiDu5tibYy03BjcxOyPp15TChM=\",\"EsfirfpSTllY9lvi+6yAn8uoRYso5E2SZQUd4zFjz5w=\",\"JiXOSKezmkJScyYk5KuUNggSrC/JoUpfuLYHrp/YUUo=\",\"LToa6i5tREZoCPiMm6kD073La1i6QEQe1OvPEbvh43s=\"],[\"Cqo14shLrxF96j4zbNlqOXkrOBOVT+m/PtW5Dy9pyXc=\",\"FN21+toBcduAGVuVktjPK+gQkw4+pFdKNQ1l4sv/SUE=\",\"LvwrkNaIE0hJAYIi57iSLq9nznmBbvRoUx7C3lO70Wc=\",\"B/AXp+vVbdCG981P1xDFCe1++OMAuai7n7nyivcQJR8=\",\"FAdLsUyYLIHJrRceTzX+SbOcSnpy27bZyY2AO/7WXmQ=\"]],[[\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"ClFKXCJ/TOyV36Ap6N0STDSJWqRrsnwJEfN4DVAVVAo=\",\"J4u0mntORK6kbrD4gstpKAGm5g/dW1wjxjzWXMzk/go=\",\"DDmen2eqQHB6ID/u+wuVi72tzsXKNJAdJT0CaiQZ9qI=\",\"HWs9X26jacJvgl0jYpM+qjHqNewKd8H72eAcoVI+RDI=\",\"JL5RAJVDYgbdCr0LDLuVyIOrMEqlJZixppMG7JgaaI0=\"],[\"EZJPAv0ZsJJVqqHPRuoFGOPXv+70dCFglJEBHbC9CwI=\",\"GS4W0X2VayV7haZS7v3y7glYnqxb6AkVd1cj0ssdoG0=\",\"Bj7ewb7YMfUGr422SNb96hRTRYh+i9z/EJA1odm2dNc=\",\"CD8N8/GgNR0DMOw/9gLKjMNTt/bnYscQcYTNe0I0SfY=\",\"EZ7xiLs90NMjBpdsGZQehmS+aH56aWkton2iFabwbUA=\",\"IRYQ4q1KN3Qm+t9waLDBpsKZoWTBwaYD6u2USHDQubk=\"],[\"JH+n8CIwShmU/1BUVsIgHvm3FzaUmNP/zkRmAe2d+EU=\",\"KYzgweMRO7k1xwWOd3K1M7GqnbDAkmvciRflYFyjrBA=\",\"G67xy1UJtSakIGH7U2V/mbMjJQDoVRksvoyUDgaMR18=\",\"Gmdk1ZQ/xKcgtMChn9uMcRmEMHKHpYubX59dWCEssmM=\",\"LZ4KtcBok9/f0DSBOBuoa25ikt9WCdcfLGSy2aefgJ4=\",\"FaZ9mBBBsfbwnz+evv2GTnedOvCBV3hqwHdQXlDsefw=\"],[\"A/17Ge8shh8i93/4EPVOJ3vJTrdsAtedmGvj3N8FHD8=\",\"CUy06DYhr9Jx5BvHFyfwFY69YSI5rJ1pixf+S+Bbf8g=\",\"EyRWSse9+eIhZOmFjX+o42ixZerqPa9Otn7lnA3y5dQ=\",\"ARpjom/qv4f6Zr3mbMJakiyWOC12xqf/SPFTe+rtaDo=\",\"JfFmMb93Bg9+o0CHwCW/E1eEMZ7wjNouMUGe4KUp5lg=\",\"BJMn+nnSjBKiyCQGlH938Gd1sCh0aLMTaHdwHb58lZg=\"],[\"GL1BI5w+cVeaZ3RD7P+9VVqB7u6mk1Kmi2fIVjwMKgY=\",\"A9iAOVvpPCfWSa9f0ULnazORjLiEHVooFzvVz30yh5E=\",\"V2G4xq7LGoyk6k38LIN2BkpKgATO7aIQpVJAVi3cEw==\",\"CMp7ZGV8NUjzK+9bY60kKIpBwLJRCZrSf5Q0MH4+ZNQ=\",\"FEx6EdpafF2rrj8z+9A8rYbRi8WUx5pJfsuYlO21VPE=\",\"IwlA3MUjJlj/nClpej/UFtFw6MmY8aqF3qDELXn5Uao=\"],[\"LXjDpdKN6f81vwoldjUZblcwyn9ASTJ3B4zXXai069w=\",\"KO6ua1hmrWjkQ7uvkWgNt9fiswN+OP72G0LLzP/OyoE=\",\"EMnigxWdWMtMsuNf3oOjuh/cKAAu2ZY9KpnxhheKFI0=\",\"AZmCcEcek2GVVEawzbi+qRXsBnXxzWSN3LBDA1B6RIk=\",\"D5cRYmJ3I/P+rayyiwwQTLj3TeUIdS+o18DbKvE96O4=\",\"GxIcBJzRFZ4okAfgydqZlcxLq0wm+4iOw5cqii5laWQ=\"]],[[\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"H+n+tcf3x6Qmv/AyzWoxWCeLbGssxXqHEhP8r9ZCeYk=\",\"zbLbnk+dcy0hfF4xFIIRZdSeWi1BVWvNU9DE1DMiTA==\",\"CWZCFspWXBpE/CuYNH6os2kEs4d/IVncyZmJWt601ws=\",\"FGP1HUpMseuhbbwRVWaqSP53tDwkTJmIo8ZY0vVkk9Y=\",\"IU5BeIvSuZA0fH8qj0dhLU386xoebaOBZYc99mzlH1k=\",\"BUhUFyT2TiASgmCJmr6PvN/xhKGVepOF+3FZI78Px50=\"],[\"G0vFiF0c/I62kYdTANtaDHNirjgYmKyvi2PK0E7LNsY=\",\"DMfquxVKp5VerEehn2Q3orjewP6eVoYVD/boixp7S8Q=\",\"AS87spyXJ5MYISP1xJMG4Wo6eHxLzZx5ihMbcIVtHL4=\",\"ER/Y384r07e6DPqT4g+2hav3bXcwWFe43zCRTkhJ7O8=\",\"Fq/Y9MOQOLgAalnSkq6oRzHA+DgyphuCJQ7ZARjo/sI=\",\"A/uoLT94NiCHPalOn06EyLUp129U5LXX1IBScq+bl3U=\",\"IcXiWmmRNk5ZogXlsByBHe6wlWgKcpKDac/S3nGxT5g=\"],[\"CKcvu1Xd4+k8WBhXGkJKVJU2lQKe7bz5Hq6wEnUcf4M=\",\"A5Pv2WOZqgcm75r3m+i2xxXkKZBsoNFQdrWpkP6nWs4=\",\"C7qQBkBMXt6CtSdnfa9ETtQ/0eDb3FUo3SzR8XrXNIE=\",\"GfU8ClkrPqk0l6UR5W9mdTWYJlsatndNpI7sBOTZNCY=\",\"IpY2HzvxVO+6uZaSGTbpsd/4NScR+VhjgXIFUzPgdXk=\",\"BmeC/j6GneLOvX679g+0NXhTKd+xKtm9G05G7TYolRE=\",\"EcXMU/YzjIJYF6/3eSou+86P/xcTANQUVaLtrDdmPQI=\"],[\"D5U1mh9oRdSSGJL4PlALuxs9N2PY/HYkAK8Dmwq7g/U=\",\"CHEjODW3UuoDDPik9DdxKW7rM/aX0bCCXbR9OayeWVU=\",\"F+TnO/cB+I0hms8cpjkMweF8n4SxcTggg3ygcL6Eotw=\",\"GbaDw507AC/DUjt77lpgFIsdvfGN0cMY5qVB6M9moXQ=\",\"HDFg666xD4CfaYQ8+NW7rKGY0fjjQ5vim+uS2QnsiRw=\",\"HFzWsj7zNr4B76N6J+a3quXRZD/O6yEs3/UViINftTc=\",\"J6CUn9yfEElcTuchSqDt0q2O72j1d9qLlvnYejlQS/k=\"],[\"FvAXUc6YUyiv3jTYFhne+0Pmx7Xa31LQ+CRy+853cNk=\",\"GgJ5jwR6Ubquo0/Psmymr+lqX60dLbQnBJe25lBIkcs=\",\"I0uKB371K1OjQ7jaWyDMNYrWB2DdYCdtSFAV9z1T0gc=\",\"JUcROoGHefE+NEhxnH7xALgDa7Pogt1eZFbDUxHBvVs=\",\"CUxmvc/1Q4LNkhOr5DMS7bW01BTG4JrMokkSp2NUBMY=\",\"LztL8PEF+I4nJIrwlOKf7tn/P62aeU4VgwvSsxFTlFM=\",\"HH/Gjz+95KI8RV7w0NvODOVWoBlObVUsBFXLtbDCMOI=\"],[\"HDkWJjKEV/yvpinz5tM+JVXo2IXjwHzsyK8fTVZZZBc=\",\"BVZl123zzQ/LcTwjTqedBqMdbj5MO8xlfbpMZk1aDaA=\",\"LcP9dzlLe1rBy9G0bm3tW4NdchekxQpIeumjWn/UXZ0=\",\"zxSPgEXNvnuxAT9y69QSaj41y6mpcEQbqNW8dpQ7Cw==\",\"Log71AjEyCbQBP93fXwJOENKtbuE80IOXZS4U7F0b4k=\",\"L0CF6qn4Cmm3Ofwj8v5AV/ZHKbMReD/PqzoKNvwf9DI=\",\"EdD1b8AOfYWzopOf0zmR3Iq8HO0MPzxTDL+0UA1j3pw=\"],[\"lw9nG5ujXj48ZC0eC4AyAj7VuskcLBBW8DllpCxSlw==\",\"Ju6WkaY47cfJGIfjAvxV6Od1goakSEWtiP1947sQUsE=\",\"FmhHdkD6sUxyscFv8BkuSM+ILxIna9Evl/gsbuLmHkg=\",\"MAhCHu12egkzIqCcNzOXOgOBaMsozS4fcJB2wAuGlZk=\",\"Ior21CXpGng90Y/Ymms4vaBT8vI8CUuHXyfLOruiAws=\",\"I2NgM0npT1IPofmP4lB/aq42GTQHiqWaFiFMCIGFY4s=\",\"AbLp0g2bVd6wSMq+Fjbw6WNjvsiGZ5y9kfMy+yut5E8=\"]],[[\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"JUuBJvRSQ/FN2CEd9B/lUWs1lS1WxiZ4wUjnPNutNxg=\",\"JwcS8YsVGPr+CTZg9JLNvC+3D/qzHYpNihk0vmh5I2k=\",\"K/w5gaJJrqrsSrkAFyfTLU5v51WY7pZPyFzzDVDfWEs=\",\"FgYKF+GxH4Uc6rIEZFcrPXjVguoFABSEMQFIX2Wrcj0=\",\"5zIXoQbEAuTGwWbNnvH9KgsWrBy0Nka8HHJvgxd3cA==\",\"BLlZygfnGCygjyNRoDVFvXq2dvdAsCMxY36hQ0yFRew=\",\"D8nMlSIvknFc90dgECJeFMw48xQHHlDg87yexnSoqsw=\"],[\"Dh9OTSbp2l+O496vSLSTYQvmHX09sdl1T+yjCHmtxkQ=\",\"IInFl/6qTKmiAu37yCN2MQDilMnjMADlE7KiFkkdR0o=\",\"EHz++h6GQEWmaDllJu2fZ1srvycspjXY0+iAEJm7l9A=\",\"AhYw7D8jbtIZ9zzGF7n4smfb7pmmPFKFROoxsnzeSfs=\",\"J0EgPWbFI8djnqcTsgNGEZyWHMHpZZpFivdMvuFtcb8=\",\"F7IJKw9jRXa2VMbeIaGo2BK9TAFVn/+DIXEpCC4rKyA=\",\"Bo6OY0Ed8rOp18Vn9mQZpYDTuhW7/dEibv+j/WvUezw=\",\"L1oqDNDLJIlslIeKgQbVfoLGjc8eIJFnpFrpz4Vw/tI=\"],[\"DCmMFDVqWn8ibFpUnlkYSQA4Wq/Y6kHZdGcplk73XzQ=\",\"Dd6qkGy2Xz6cm+pjRN2o25DCU8D3+Z7O+IeG/v4OXMM=\",\"BLlqKWo1rPQVkpuHhLa7pkpjDSnf8otij8mO9wgjC1c=\",\"KIkKAxmbcn/t5e0AkO1pSUwFPJeTD7tsUjWLDX0QTBY=\",\"IgjFAEgGx6r1gxRZC8vqFhaP5i7ASXr8a90pOMEtmiM=\",\"LyTWCcsjcg7aVfrinsbxmQLELYv5BPtlYgJzbZey62k=\",\"A0TQx3LC8FNmSnuSZrGdSK5dKrPRwaGBUHVKtLg2r9M=\",\"LNGbXFW6sYCeUsyfwaA4wIk12hnPxWPnBI1r0ZcKDI4=\"],[\"GeBwmC0+5nXhYiyiDROyN15Si2dnBoguuPGv4cUEXqE=\",\"ERTJEgRCdQST2ZnU3UXb1PO3WrGDIJI1OWzoPY7pkW8=\",\"HwRlqcEzocaAXXBb5rPqmRKi0GLDTb75LeRpVbg+e9k=\",\"G4Dz9Dk5bC9Ga46bJXZaAUlwRVob6u16b6MI2sdftYI=\",\"HAH220NdxIhe75zf7RkyULnT60zuNmZ0sHvdGU/zSf0=\",\"LfGD/ivJuLdXc/qWHI1BF+WCqAtlavXFh2PnAk6kGJw=\",\"B+DMoaNe0V+9thm/rsx6mo9MUSk5J1YqzqjquBfGuEs=\",\"JP8phngf5ArmHo9coO8XxaXqe928En1DFUfB9qj1zt0=\"],[\"AzPikjmS6J3uVwplASXtp1ogpy5p4QhjoZ0Xt77qkpU=\",\"Los1qMKeY53ejf1JtLNH8A7kZ4Y/bvyzVfoVNO9weD8=\",\"J6K39VSeXu25AQXA+OIPBXGrevCAHxvdI+qtkfIimhM=\",\"Kku60kWjPl2XAVN/dRQQ5P8pe48dHZCY/pxRjCYaGwo=\",\"Hw42ws+awsQ4jnSWbZ7n0aCzGGkWoIz6MG9rs20h5Ug=\",\"Ff6WP1vQ2Sh4wQqJThGAGNuC5jUor6TUcD6Yge2hGNE=\",\"Ii7fPia/dLL1A5gxiSAdTujm1vrTQdf/UHSN1zl0nfY=\",\"Eqh9DFQZ9EhBmEDl5aktJ2rOAJY9mH8qEAiRPZiicRQ=\"],[\"GUSqxyv2+83sBDYSOMPE2VENXwdDmhtv9B9lKZC+ATk=\",\"IObMYTrmywpRhCX1PbEpin+IWe4gqtCDINCk+bv+hRI=\",\"AxsK+3qy8dJB+IIXj33NrUhZHMZ5BdZR28r86UsU0HM=\",\"HkMfKxt+2uT4y7XTB79RMcNSwqIVqHDXOWF/SwF8bRY=\",\"GZ/CvmDknmeewu3mzzNF3LO5GOWz4Hws2BQTM5NOF48=\",\"CvWU3EAw6FCXAfvT2JlfcxJq1yp68P/zRO7oKjHOd/8=\",\"LUMItII7Rl22U9NoGBgSCdI80S+ET3L3VI1J5VBVpgE=\",\"CvPO/yyGWpAblAbV2bL8WIM9ZC9Gxkk8oDDvWVBh7Gw=\"],[\"J9gCrQGaQv0EiSrRZ9noNZanMGBYkEATGWYWdXNjWfM=\",\"JCDdEoH8DfrBdqdS0VkGtV8Te5zDINXV2qnfPz1D0+Y=\",\"IuAyO7vazl+8dKCz3t6m4eO/EOhN/HH+OVCJrBl690Q=\",\"JVY5iJolnr5Z90qP3y785/3h46Zms12ObsYB1NCyJok=\",\"CjjRY7ii+jCSmZwXl7GvkJvZcaJaZWuu+9vfo2KOZ48=\",\"C46FfZ+x1VTzpOwwetkH3npDZDhgOvGyjU5O43mWDOc=\",\"Lo5n/IX5tNAOnhGXs1vt9Vr9cwCkw3CYfIPBXPc8rjw=\",\"J/QthoQvTYqMOv8vR//B4Xnwl6rszlW7oLD9/VsZCqc=\"],[\"K9BaBAoJh6xrwB9nJC1Ut6LFJ6lwrSgVsnNHHrliPnM=\",\"F71PJyZ0jZmSWvmi8pKeIxwYaUKME7Hjl7sAmRkXI6M=\",\"Hu821i8/hk6uZ8YzJOR6Y0TjOi1b+4LwW++ZAMVOdFo=\",\"LQ2KgUz6FsIyPxdL4ty+DClYKfxZvyqJ8TtOrQ6wVqg=\",\"GYlJ7vKyfCucPWmeP+V9o9W1CcK2cK/OQAq6Gqqe1R8=\",\"B+vNJaEOVmk6KBVfza97NRnZ4OCCQeIXiWlst27gYpc=\",\"IvG8TsE4tZYSjOXuW4GElkzCYjGOF60h1FxVJHf1PmE=\",\"K2s7w0DUEZ5Xgx5KIYcBPxIWqztjmUXdkqmElDJB8dA=\"]],[[\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"BgfNj/m4iXc8nraLikNmRp1HDNfGAEEGyq6VwQxCRBk=\",\"HaUkz/YLZIVtwfXd4P9i2nsYLaJpCPa6blkK3r+RtAw=\",\"IvM+ruPEgeZYAbdhpygykI8Gb+Idq1+l7B1Mbpndbfw=\",\"B1+E6ccZu43o5hCDKQ2v8ZqqQzdFTluoBCV3h0cPL1Q=\",\"IIS+mlfprbgDA6jcr/1Lt3rbaBUWizah02OzhCVDcTU=\",\"CzA0SfG/S5LSy8Jqs0tCFbbdevAQdHpwWypuM5iIKSI=\",\"DAmbxoJDU3ID+XJU8I37fvwJ3o+W1y87Pgqt7UXhi0o=\",\"HF/ZBg1ODZmSZEKaUATBZVcL0WdbCfl3cIscpI5hY4g=\"],[\"H406nS0xqzLZvbY3UXDbuon2+PdNFuT9AvNnXV/iuq0=\",\"JZFYC3PntdXzTZ/cDPf+Pef2oYolXkN2/ePrMd+lHXk=\",\"K7RWWJO2/8V5kTnNwVEVh0nCxl20hnKrryTFs4E8Dis=\",\"HFznd3aJPUgUdES59tZqTaKclXB96DJ1bHOeq46HZY8=\",\"F1UFORxhm3VTD6g+UTGEOB5gPYRJ0eBwAX7o7ApNJfk=\",\"Bu0dFN7fdjowZfJ+ekbX+/INK06GoNuGaSoml2fVd+M=\",\"FAzdozu3p5srqoUd9a1Fnn31abnyw9pULTuNW3azVs4=\",\"A16ezEZMtDHMksM1boqYVH6EPtEyTB6XEXn9Gtn9UaA=\",\"Ep8GyTDt02/C+3BEpjMnUaLjvNvnVtiDcWzq1rxwY8s=\"],[\"IwxpQTlBb0BCLXE+E8BWxFw8Yxs0aFRSOXDq6lijffQ=\",\"CTz/EhUK7LNGXEyZ8ES+hdzB66IdQpEywiYN09EupEE=\",\"JQgaAPwgrjZrH+fqawnmKlH2/Td/YINowSuk47+Jk18=\",\"Krjt0i++KhzTzppCEtDvsoLMrCivTYdvyUYgMHDJIL0=\",\"KcXOl3EMFXigmQ2GLPiBut8Q5Pa95ikZnoA80cQmvk4=\",\"EyRUSlQXTPezzY/8S4YyDyMZ2biMF3m4mxkWAY8/ubc=\",\"HRiyWqyYsoLhC1o6dM5cqhaaXDC65Su6KA7VF/P4L+8=\",\"AvNekh2uh/EoTAyK5zfb3Ek2y7sDoDpZGFUv5WUnCo0=\",\"FKXOFgMijW5vreV8HaU2ZZukbRslVm8Swo3ry+3FtPQ=\"],[\"IGOkYa0GMVrlmSpToUu1mDZ2JK/CgzzLuDr5LKD2ozQ=\",\"BZEW2oiggSZ92IggT8b7eQRsMpfMtl+eD+DVC020TsY=\",\"G0NxnNELYMVkfAl9H6hLjzwSycR1reE7OIx+xHJAvhE=\",\"JuSRVKzKJEJNX40p9lD5gk3oLreIcynLyDpWrgHe5KI=\",\"LK+Gz/YFIczF7G4uLIO0cHu5D5SGRL+qj4Cwr81M3hA=\",\"LpI+pG1JIkfhLgp9zPZiD17qZim3Uys68kaAk5iFljM=\",\"HsbDL1E7jzDHqrQufZGuy+VK6xiKhPjKRr1+l0G5o4k=\",\"I6csJ/T15upTJdWzaPmLQGk7LbHoyj0JZzl1PcVngwM=\",\"FDYX7827wNJ6CR8oA566irs5OS4qRihQsfnNhTL1B18=\"],[\"DFdOYo+EtrqdF7nSv9R0fgbdaM2iOD1kzjZZJwmMBG8=\",\"LJSElzc1FOfZhG3qnd9XVTN922YQQ9bGKM7Lj1UXO9g=\",\"It0gHsurlKLuOTeW/vzKY6pU2aGaucfyCgvtz7nRkfI=\",\"C63Xf1FtT6Mh0QmbweUZCQAVka2ZGfCM6XGK7rK8pNY=\",\"JPknk9Z2OLSr/fSM47YqtdDhslDcJ010by99BUQYW2I=\",\"C7u7h+zMkdX7B7bFUIjKUU1o3dk88xyO0tLMfyOyKw==\",\"CJvushw0bLm8GCqitw+FPxoiWNVok85alI2cZF7Lybs=\",\"Dgex0i7tVP35Zv/fvOu2U7Xaw7KpH1AnKHbvsXFYviw=\",\"KIXy1Evg7P9X2SpDhO21vr+1hbsj6uKi6lCAa6uLe9c=\"],[\"J2Qo2IBAo+D0QkJNL/y40Zvs8/tsoCwbXGG13cU865A=\",\"LCcpgSvp7UMudXCRMxGcsKFOG26jHBJ5t8Pkld6vEI4=\",\"C455g4zTBweZnGIWIed+acD0M9VDt5xmjPN5tmI7rIQ=\",\"I2ccXR+1VgY6ZLX2ZDQJNtxf/t1L26ouliBXBNpYZPU=\",\"AoCd/iTH/XzUm5eycVD004o0C2Dwcz/UUwzUJptIEeQ=\",\"JgEKP1KVu0SBMQy8pThKR68PmQXkx2v1S4cO8P/vocg=\",\"J5BkOmYDjM5KZIiEfY0tou6oSWH4E0sb42lH+ANSfmc=\",\"BfpW1DHUvQliWobTYjRk3JC9VB6kF0jyAm9lAl6p0vI=\",\"BHFdtthrUT0AJYnx+VIvfeOxqL1wLBZ1We3pfaLAB20=\"],[\"JL32EBsvIjF06GnWrsvo6lsEoUw4/fFJQ5PMb9s+QqU=\",\"IoDW1HGPnwa1UamIQI8FFQcORV7WM3fpEL4If7eb0ZE=\",\"AggtVkdljq5kiTbO++360s0FOFcqphIspozM7Wj0MvQ=\",\"Ag1yAszeJJAdbOLRB+eeH9eNbJOYunpJlvEWre8U3vM=\",\"JnCWiBUO0DX5WWh+33dH7o7pRrdwFz2+UDkKuMCMX5w=\",\"B1GkpK8kYlXOQSxLtH+jSlG4Yo882QIHd3XI+kiOdRk=\",\"FZ4l4AMmp28lwRQ6W+b1P6UczzaNmXTMbZPM6OuB03w=\",\"LW8+DphBPV1qEQGyRcnnEbsulW4npYcHhP1UA7OYZ8w=\",\"CIiHlmwHnS5omo1te9kT6S0yaVm62lm5mmU/6q32xGc=\"],[\"GA/KGEFQwONUtLOkoHWCTUto6CdJQ/Tdiwxk7KJdxo4=\",\"Gxu6ElUFrpZ1vOx8mvV5xcyDUzydVVvjmK+gnL+V1qc=\",\"J3uuL8WXpTatvpwkvI7oFzHt21dMalFCwcWkjFH4LoE=\",\"HYZJaZXxQmTnoFTMgiSQA2h3XD5axrX1QoX0pzwhca4=\",\"HlrkwpWtWhfgD5c/E28SMKb7hWN2MbMG03BfgO/6wko=\",\"KNI1FhnMxvsxrUIG4sBkv02bIpKyhGPlPkdx8QZw3b8=\",\"JIa4hDcNSaAD/QQegA8KiYq2G16UeZdGHuMoQkHzuqo=\",\"ITF2vBoEk5/n1rwwaRqr1hUu0k8wm/85OaDZHVTGemY=\",\"Et7UH4BH2j5sIr/tPsW7UtAn5WAEjbTA+Wyp+oXhe8M=\"],[\"EHJtz/hymchTIVmXZgdjPxvCrSRFPBurJrcmuC11brs=\",\"FwEyV3FtPLrijhwnLLaqooRBNgSf+8oFyiAVIwMsZNQ=\",\"MDVMnynJIMBemdfMdHUQ529/pppxWUopDq5yk8WkhEE=\",\"E2lhdG00/RlgJRc8TXm/iz0dBSkcWEko2XJY/V+0+04=\",\"IxDiM35NU8FjXaGKJyIXjVWvWDWRvMMX66hC3yR96qk=\",\"GBXk97QKcCeHhkCmzcSyhUMAz2/UlTwqwsd2Je9ErgQ=\",\"ER78E2qd/g68/66JQ+Z5zA+/Yv0M4DtAn+zZMqgoGxA=\",\"CloRSNrUVi6rGBYrORS2TVdT6WF6UVTpP35D5oYGh+o=\",\"H0fGekMlZy8XuL0d29gOTp5sYkGanCBMx+iCGJJDGq4=\"]],[[\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"GruVtuMyQ6BQ5WO1xP0FneVRPsKJlKb2DlfJjTvI9YY=\",\"EQ0hOoNkeKowG8H9Tt04hQfYd0Wzq/ulvygq/SH3JCo=\",\"GO2y0QW7U7dorgE3hQ3C0r9tEwOh+O5Krfdtj4GZBYg=\",\"HlPpLfbFPs7EwN5bB9xMmgxVRfKrzB+r9My4SgpuLCc=\",\"EPy4F+EPafcHTmTDk7gHzd3zPISotc/jP0S3P+GMDjY=\",\"Kx2MEfxlLFk1Q7b5gAu30Mk3He25bwi7vM/9xsxE25g=\",\"GfRz5AwFZ21fjVHhEzbpxlyzKCjDl8yBJfHcZntsrfc=\",\"D886TZxsM5LeG9/iXPuGgX7LgMUb4X1H95dQIB8fzQE=\",\"I7AtAP4mNIiWc6fQRzb+Fbn2JlKxwGJqGa+NYIXXCCI=\"],[\"L+Qp24Bo5huCYk8ldmJzzZ/mNo/wl+q5eqoJvkxjDic=\",\"CltgTJWLyQBxrRBhixdyWZ4Mjd37ZBEx/vOdqlijmSM=\",\"LN7gxjWk/NlUnw+RtPSptiiqcxni6qCUppOzi1z5okI=\",\"LJYtfVSpjDqCpjjYyCRQgT9CBxoXxsBfRwtElY9X7xU=\",\"K8dhGF9Z77e2e88dPlTaANrqBn/knj8dkzTlRwQ4tFQ=\",\"LkUNH+d3PJiJoL5V5ERTvMhEyUtW/Au4BuuZgqxVNCg=\",\"JcD4fJRvN140H3L2qN1jqU6G9K0YJxW8/L8rKN9rSg0=\",\"C/5vwI4qLhuJEa4GW5hTiPzRBaSQpKuUOyVVjPPQVLY=\",\"DBguQ4JXxK1+e3nDto1gmE5QesWXy0fcMdkTp6VA/Zo=\",\"L/TQuHmKgmZ3k1M3MAg8JSI9WJzdB5Ni8ejC4B1UR2o=\"],[\"LnUIZ5QkOQgzZdIf52DH3+yeNZPGfeEqQlXGsBZItpA=\",\"JOgt9Yc5U3krrKNFt8GfYQOa3rEZBZK8oYz0+QfBpv4=\",\"1g8FhXVdSFd7RldG3o4obkmSUVDxeE8p+2uW29jw7A==\",\"H0lekwFDFJiNrOXk6Gf1EJ4J+gD86Hkp0eDs6VpEk0U=\",\"EkMx4Oyx2YCKHZHvqpiVCr6TDEb+5aMNWtB5dqW8AmM=\",\"L0Ifz1TXfdOJMM1pB2+bqt09PxlHNxIVpmyJTWN+ibk=\",\"BUOyvGbzstk9TBiCA53bN8cMC0N6wjrFu5ho5t8kSF4=\",\"ID2e5kYqWGkU/n2/wb+il3O3+bPWOupBIMYBEpwWZg8=\",\"Aloey9fniT9kbzXT4H7pl8lDVHN4hP5sJq6BVXYNuKo=\",\"HYl/YOh/zlzu2Np/L0pj/e5/+dzxecCOBenlzdgjisc=\"],[\"IyN5halrF3/3wBSGqw1gPSmZG4Mkq9awfbuW9cIboX8=\",\"EOM0nu/ToRJBfhEP2egyB45UtfRTfNAYruPfu5BUFYE=\",\"IWjc8hbYNppibMxhRTI2o4nQJRnzBS6H7/nMuKopnEY=\",\"JikD82rPDcBV9hA5ffB5T7wwkn7xhcY1a8M+XDH6758=\",\"Roh3JPKTIYlcLvi8DPVF33c8BLqgl8NSpBZTlcynhg==\",\"EydggdsBLR1PS33S2KL4pRgNLswzhUzdNfnOsHv0DVM=\",\"LdEXIYU46KywMB60Ct+iQ19b/6gCj/Uvlqmdd/6ScGY=\",\"G5Eqvy4WSa1INMpbKjgxzJwgfU0I5L8nSnncqA5S/iQ=\",\"IBNf8mOGf3CO4CdRcMyXiGicCIspM6Nhx3XPQwdI7x8=\",\"C6bUzu4hgtPyqy5KOtCPwx9/TMD+yRrVPpK/ito+J48=\"],[\"FczshXslk0/9Qpr5LJENsx0A3Bw/uDdFox2BMepbqoU=\",\"FlrevgDHugGUmQGMlvXFhw7KVnnJDIQ9lScYSlJfzKA=\",\"A1MN2WLvI9wW95sowfwd2v6UWL4VF0y7vzqAbeX2PO8=\",\"G36SKz3VA+ZEGtqWbIs7p7kIyyuYtfvh5ML7mCRVuqI=\",\"JHRgrUWAoYY56tppuQTJGxn31Dh0NXB2lsQLrDv73TM=\",\"FE1b441Exb+PPFc1M0+xoHwTcC2Grzm6C0Ig7Jp1aKI=\",\"JpsGsx6J/xMtrrwgDv3IqwaBNvzmXy/FWh3Lk5t/xvU=\",\"BiyqPJ/Tm2mGT69wHcikWIVxyzG/1cnDxZ39l+mfcBo=\",\"IOFg93KZii99AGTH76FYhOvG2LcYIc1TNuLfFDQcle4=\",\"Bc6UuOmmCyiUdxBGHYfHdXJGJmro+l068+qBd2tbjAc=\"],[\"FxAq0tmAQ+VQnnbDMeayLV+2LQdHYIBqpnV2RmDrVtI=\",\"AfuBIY/u7fTn4OM92Oy+YtZca31CM/MuBzVx/4YticM=\",\"HO3G1OFHZ0HBCZVX5Y5kLEKJKqNuLQp5P2cHgaIbDb0=\",\"GoiuL94SujLl9OzKzxHCW8Fjve2qqIJEdMrlhp5ewg8=\",\"JlQSpOO1Vgq6UC0g7YM97/cHt9QlujwJ87Y5K28fQzk=\",\"EmkbWZ0y7cSK6Zx6c6vVnlsY9L93P6EFHKvSxJqqv2s=\",\"INRAHLv5KHfs9hbX0oVRywrsVS+ulRjc+SGMOMGgvJA=\",\"E4wDouzqGDy48mXuzX6TJ1sLuYKXwVRachl9xt3ZM18=\",\"FQ3xEpG2gOO6kloEccf7sw5wSrS1VOpdjAe3CyuWICo=\",\"DDRrBGrwPLkEjCk1PhEH1rdeWQuy1CLqg8CaXaG6DGU=\"],[\"Ck7Kq96dHqEcgdr6jV1Iab7nrQv063g5e3G4+YnPmBI=\",\"G+KAL76lEAOq+ugv9EmdEVg3exCPiwIMgrhGCo1gOvo=\",\"JpyME5pPYeFr+q6ei7scaYCMkHEIOwoznf+eSQS0Q9Y=\",\"I0B3KCaccP5xKwIZFQWdyNwhJK5kjiy1Sfx2NivCuX0=\",\"Aq0G/J+BaEVC4EWKrhnAp8GL6U8d4/zmo+XSM1oB6Q4=\",\"BXilXw/aKZCbn4UMPXS+ZmjkRErGkXZPFkSmJkmCGOQ=\",\"LuLaJLf45wNftzsIw0FIM/+jjhSx+qwZioYKV2fS/u0=\",\"EViZWfwkkykvtsUHMOdJlK181tNTPDsApX2ugzzHAeU=\",\"F1cgKejolyAtDmXCFyxXHUuRyoVuetPxGK2SISe4cFQ=\",\"L7+Mxux++zAQZCPy5nsKqUAzYOVuiLbFy67DSoC9x/Q=\"],[\"DsGCFkj93ESKFRKuzIrDdxSSOYGUD1VCc3pGjU2IfI8=\",\"BBgIHejClYNVoeReKO5RuixmytBINfT72B5pbeY5h2k=\",\"Dqe8UlA+IDnSd5EuAi/W0N7VvGh8b/lxlJdvOii9MMY=\",\"EqsxhibVEcI9KLqp+1tYAuCrlePLF67bqiX00ITP2lc=\",\"DR40GSND1m/BtlkctqOwYCsINaQDxyJ9vL1y/YAAxvI=\",\"EuOwSSSyz25Ae9JrPNR7ymHW/89++hrqHC4NikneZL4=\",\"Bt2J+r+SVGhHucE7Oja7x+Z5xbsN14VAPz/0m75hyOc=\",\"F7n6zb50fXxRY8oA47C4JdAS7UNXYE5xhXUNZ3xrNX8=\",\"Cv8VZQuAW/9vizUV1eKc+RS3NJr4kk55YAn4pPG3Jkw=\",\"DQZOckSe/BHR6QuXdJ3jkJSQuRK7H3L1QvQdYqsthHo=\"],[\"JVpJOqS+zZ0TfrdpQcQSB4TBIz9sX99dZcCDKvVD5BU=\",\"Hz6TerKfOojG/kOGmKcZilIJqmrJ8UExnzuyAef9ZxY=\",\"IYC56xVuszytGqdQ6g+j3b+kEnKW5Jf4bmRB4FKiO0U=\",\"HMadjzTuh3g4lQ4gqdTEvT6ayvPWk6pkyuBPqiJaLh4=\",\"C1ZReYh+4w44FjHY5d01fHDuLrtBBhfSMh9thTf5iXA=\",\"EWKlbtO7u0tnYKFqMAunICEwCG2k1ViKcJJkI/+MJC8=\",\"E2D3GQNFcrWUEMUptipiqpRWVlRZfkJ3nzNADx0X1lI=\",\"DGA9A/koYNqKaMbcsZJNGkUJmupQ8aNi7bLyp93+kP8=\",\"GpGPwRfZpkReNj7lgz3AFBEDS5U4TZju5HrolvkqfWc=\",\"AqiODDVhdmXzzC/HfZCvx6jRABxx3rzyczygxxoZ4eo=\"],[\"Eg9EZwMBsUNSSSlNmDPVngFoKvTIZYcZcnZ4/Zq37y4=\",\"ARPpaHabDqMst7X/cEhKrMlvE9woJ6jl5hFpXgeX/Dw=\",\"GM0UcUMK2tMeRbUpSU/Ip+MZvS/AYZyZIH36zbZXu/c=\",\"I9D6ll6SDfxTC1JnCx4y4tX8KCH8kYwIRKADtxQYJa0=\",\"LqazKvN812XXKN3vowkYkCoh4ZspFACFT1Y5PFbWlGA=\",\"AzQMrLBNWoVhTqzEvjNSk4uqP8cUwldaqdhfc5ETxQs=\",\"Ff+CfgNMAqkHZ/AVKEDn/G25g+SW6gUZwP9B3qgYBig=\",\"BdVvDIRNFpJIUDE15N65/9YynVTPzu1LlH14pWhoEUc=\",\"LlYYQR7+owzH3jENSHJZfQh8HhIuAuuxF9sMLf8E/Aw=\",\"Fe6z4FQbzwENoMR62xL231QLl01DnJPhnqTQL5l11EY=\"]],[[\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"mBPIA/+Eo2lO7a9LHCFyYVJ13BjKZUx5mnBECUbM8A==\",\"IClz9/ulvSHtWL/nFW17KQENQQkPY/G7KQwdXaGtYA==\",\"EjBerfZNrCSnkTpi2Vrv1F9INVV2xnHlb96cx8g0T/0=\",\"JceDrWbWofxshHcL1jf2IHCX3/sDeNfgOV+MC4a1Bfk=\",\"Ii3rYG8TzyjHOmchbYixb1lY1dKSuhDvO8LBD1oLYT8=\",\"FhTQJUcncf2HCp6dQis1ccVJTn1nmCTY/hISF31fouw=\",\"ATWL3Wt6UbH1tdCU29juCGzNz7nCf6rQgG6O9xjQ4rE=\",\"HCAH66TRYphGu2lASsyEVl3l0kYg91z82fEf7us/N0g=\",\"IvSdckQHfkH0CcCzU6/RaW46oV/9tKC9uIP/56Gochc=\",\"GVFSOkJwxUQD3+Mhj9PUzO+kMRTxsZ+ywoIaQ3Rxi50=\"],[\"ARoTGjd4w3dCM7xUCWQZ1GPTq7rhgyKn53pRGIFmX5M=\",\"FJWvA9yRgMiG8OG9r50Y4y5rDRuANw58vldF2vxDNSM=\",\"EZNExTcH8AJDmDxtAk/Umg+K+A5YcZM+WP+Hw6H0i5M=\",\"qSvWqRnRYFYVeG8u/oB0PKV8EOyAz7kmcitb7UCLeQ==\",\"HH06ksqkNc3ZdFILtvtsrIFjTMm/TlNN93c24G12jDw=\",\"EvuIoPb3SdaNqSUNWt7PCIRCgnJI1n+Yn9FLXJzU1Mc=\",\"L2xOCXu1hRvhK74scSwvqQbzELeASNaVtKrTAf/A0mg=\",\"HAbHgvvAmAueSTsppeSgSu/GaM1CVdbP4gjp58i5ocQ=\",\"IRhlt/nBx5GjPXA60ygPaXVjJDSa/IkSoZuD3izQagw=\",\"JVQuB8HBOXm7FPjU7pPat6PcdQgGzzfywC/1O0u55m0=\",\"ErWgnh6V4NAfvNI0+tRz2O4rqXb6IoJ/+m3QPIslpk8=\"],[\"KhirTcR3fhPLg1jBxCMVNXDRy5CVRCQ6vazUVHyOw6o=\",\"DZXoz4pmtWwy59EeAQfkHhKXEi0azEEzLxtJiVo8l/w=\",\"B8IvlvL1VlPQTtxjFQVnp6BGCbC3nuz6yxSF3Ot7yHM=\",\"D3FsVN5BkgxAGmLfj5GG4ZuVI+mGN6WxE9YczDC6AhM=\",\"LNaPwxtn3EX7axb0K164nboq5+mqUMXxkVJ1qBiHGQo=\",\"ZikuZOaixkZzrtNly1D3vU4dO1Jw9rLpmCWQw/hADg==\",\"CKHvZfUhKOs7It8rasowUJsK+K8veIju52bAwkhxGIs=\",\"JFKWOOvN8m3ogWKH/sY3BhThEuEMA5GQwQOnXO0RtCY=\",\"EuS1QI9IZBlRc56iflIQZyQLgqpRpC3i1NwegiWQgYc=\",\"hLiLHORZi3Ac+WozeaAqMVfUGTyKjxFXRZ9qNOwy+w==\",\"LBhOkE17/TaNRJW54wJ/mva5MTyPGT+SmsniTRDXo28=\"],[\"FuvXgsvPbWPDi4eyfbKkpa9YR6mmCInEz2qjGNaGax4=\",\"CwXxYQjEYWqXOwHYLlDU/J3NzOZ9LSH4UoFr0jTphys=\",\"LzlM/T5EJQPDoiUSqkt2uVt0PHB2ykEVqfu7fGsH7l0=\",\"ChV+JE+TkSXVf5yOZvfYjsD7PAW5D1JrrAhxvKhGd/U=\",\"HUVnwS22SNSpxBMkwDKTJbdqB3MPrXLvnkkKdIZ0mFw=\",\"CpSi18QJPGOII7CVcz83F21+dHuiRkW1FawqJB/92oE=\",\"L28UUC8g2Vip/yO2lsrDriSWdReuiy6Vktr0UYQLuY4=\",\"EmQcw89Qyme8k7yMGe2J1GE+nigaUc3zE8vIERkiJCw=\",\"AhhcekrYyyHxkAk5bxNKLD/WFNMF5HXd0Z8m9tSz+c4=\",\"L22jhUUJEc0nLhNgHnzmbCuR2AkwdJL37leK401vX7Q=\",\"FvxI5V1k2DAQrVczd+okIjl/w6fmyIr4CKVm3gIj8MA=\"],[\"ArftR/rCddNPhC8JsB75QhAU3gQMJqWRWVsie6e8b7I=\",\"IwtiMVswvEnXPf+KneecYg4Dx0exTEMvFwcV5YjWBao=\",\"IGNRdQA3vckNTz55GGGfxpDCtYV/i/vYbXwAHkzyyhg=\",\"Ihi+hh1STq8DuUILE2jpxap87+5y0ObvgHMu6dfm4sA=\",\"Bp7k6yC0hg1K+Rr+F4Ezj1OqNUVi7Nhz4OYlr3B0byY=\",\"CiJhKNodm9WzKfVfUsdWgt7zNpqxM1nct9IS7vyoYik=\",\"F860KhnebdMuOzjMKZDmQnO1KlYYJj7r+knYRRjqO+8=\",\"KQEt7/sRLrFANBWcWRYvhm1KGAO00ZKkMpNZ8PkDJm8=\",\"CcSy9hrfJFJmFozJGOlvf438Nb0997I/xkHvAbzHHM4=\",\"GAK5flS/Ool4Yyy+EOQpcFsDaAMl0m6hkMDx68c2LqM=\",\"LbGsTCscI6AAJ/3PD2Y6+JbYdBW7A1sUnSitPamMb8w=\"],[\"DF5J4xn7lTUHPwf54FWsyvPj8ko13LRsq2ffxkjvrzA=\",\"FdIXoxeEdBBI8ybhVa+W6QtarnNPBneeaYhkA5yS4SM=\",\"GszqCcK/0X9AYXJccS/Rl2oH53PlTZBtoWYhUgGlgTY=\",\"L5vRnQyMOIen/AFz+GPwdeZrGDrYnxNwSTBBbh1ct+w=\",\"BsrQwr1DjE26LtZLv3UGbnMUhMNtH2c4tumGAen7SY0=\",\"G12oOWY2FYbogQ/tAyQ1yqgKm0dtshKQR07Rl3/O8i8=\",\"KtveXHtz6afiK5E/meQNleaJxlxCjCOXzSc5I89o3b0=\",\"GouK0ey2y4iCc6kL74saLPwD3UTgsosY4QdOQEqeD0w=\",\"KB7KFLvDkgkZ4AEVBFHD5E/xjh3RFxQS/15mPXSgc8E=\",\"VMyBx9HVlYHrzSaxbMvcvxlo13+HoggdEwVPURGPfA==\",\"FwwFpfilXVyf3F6COLNnvjWJF6GaKLTEfkbz5z1CoIU=\"],[\"AWHkrlstJM1ji6XDK8Ixe/kNQE434APxBV2aluQG0w0=\",\"CvmvvsrhdhzBfUS1HKZtHb3q80HoXxCClY+cty97VdQ=\",\"BeUsD/jASo5ePH6vodCQL+Y+NYmJNLAPQzOzj+YU+RM=\",\"FOtAHBCEqd3NXQCS5dGimaoPVcNRVFx4FwPAHOh9ayk=\",\"Hg4WbXNKphTGtT209pEXmEGjP4EFQwo+5wq8qDum7G4=\",\"L6dd7tKB23NPq6W3Dq9Xli+T4u6h09zuNMgasen8wO4=\",\"FL/jMRXfKTZwOT4dyNpNaUesxLYCSeWxyMrjdmZc1YA=\",\"F+oZjzqyYdoAAVLyaw6w6+CIpwnosGoYo9whCMIJaGQ=\",\"BTPopFS4zW341I+psKnLKVKTPhprHUI8vFTQUzpyWZs=\",\"GWgbQkLRHiiqclMM8zp9FXGfGoiP/2JeBGUsd+4rLeM=\",\"Hrf25VICFcFeJ0NVsZu/cau/BKpCbNB9pTbLP5Cfblc=\"],[\"Ijx/xtJPxT0bQo7bjxxS0gzuxZIYfSx6awsUe2KSuB4=\",\"HaT048Z5CuG4nEEYhh2MoqUMyCpOfx7TxbqMuUS6Rok=\",\"LnCLqviUvFg15f6oEif6jPrvmQhtErCjp/P4W7ymHSg=\",\"E/4jviQmG6W5LTY5ifWOF/zu1KhY0cYfws8rcdvbaTY=\",\"HIeclCjhlgfWR/XvFBXnb3xZ/QHlKvuASGCBhR+aUoQ=\",\"EoyzFQsVy8T6qxS/fWdu82grUsq/yNNBnf2YEJ0Z7MA=\",\"K/UjzYqjviDOfYkfhyensktypNSDhITehCrMeC/YvTI=\",\"BFqqmc4eBqPAIVCASpEIf1ekO3l5d3PoMhbKlp6HM4A=\",\"KEzPcIWVR/y5w8e2TPCtYuUXJuyBtY6wHBofjsep63A=\",\"Gr/ksc9dsp1AeOUom7FDSYq7vcmvVnIEcKJqPforqFU=\",\"FBEadL0kcwyDNpnrQbOPHU7Rb88P7MFlW3byQ31KDJo=\"],[\"GuBg45szjQmEXi6evrcL+3TNSvkmIX9XMr4rbLf+cqY=\",\"KGCqUtwvlnwMGguUKsgeAhidAxQwwRqRmlqolbz7YVE=\",\"CsI/AP8BW6qxyL6akJQ8PHLReBi+etQnxF6z/xgocn0=\",\"Ay+i8WZiLwV/YalAXJJWIjyrK6gslJVgeSF1WrAY9pA=\",\"IVwM1OPxvbSCuT5XGHnXkxvpACPXoiDo+TshyK3UH/o=\",\"BScAsZ721C6jkuBEoJTL/DCO6h9y8qNCix5yG/wyxq0=\",\"AzuTpc8V/7r6JybyUngkoRr45C4B06fuFZsnPKCmUgw=\",\"JU46zbx1rFkmebAytlqckdLgkqteVxlVG12mNbE+lHE=\",\"BPpWIKLAV9xVKln97+UKkBBoGQ/cPfh2GZHKtQoBpEk=\",\"HSJ5Zz9sq/ChxLjuv46ceDYWgLLlnX7Bk0iBn1s9WhQ=\",\"LUa0jlCQwMVqOQ3jc/TJogCNsxH+MQY89P7VRikRNYU=\"],[\"BGGRq0HpOSnqUfGQ/U53OsjVCDMo1LLwSCjco+aQmMM=\",\"Fv8z1nyFEhvO59gc/xYYkn8ckrTR0hwqB7auGLK3ubc=\",\"AhNHmPTKf7mSgBLJN/N96HQyuGZa7t83Pn/6b+DBPQA=\",\"Ku3b+iRXVq0eFlhin3R7jadZOxlcyVAyT5Xtye2kKq8=\",\"H0H8Z8oTIrN7eqAbYx/RkQUoH2xqTTf79o/BtfYoAsY=\",\"ItHmTU7hXmDEWdhR7580lek39akJkDgsl4Z8RbeUAHE=\",\"JJ9Bb65atSpDXWUgEAbdiujVQmbk1WQzB1UZAkI/fMY=\",\"EqmWq8hXcCGseIDBbwWNngbpURGH8Krf9rtkDkMW0mw=\",\"LSZAp07emvbJiI5faKhPrJKxMzfa2PxhUvqzS1VBmQg=\",\"DyRtL7tOEhfwljH7yHcIJ8NnUeatjW+xaBDjOVFDrYA=\",\"FfMOvfuLjuZEJBA5omtAjceo3nfyzG/tdUtwPqkt3lM=\"],[\"FLobU4Pjczxj0Awywrv/2OVFB+0zv3VEyGOIGR7KPkA=\",\"G6DoNfR2JrDYJCaQDEkXCovinDnZAzeqX8EHZOIyGhs=\",\"Ahn14opfpSaJ0re+QyYkKAyUDJv5iDwfsP6Sn3iHPBs=\",\"EjpgVWgQI7FlcMcPzfOujjh6lzaQueZ2G+IvmUHX73Y=\",\"Hc42Bir35LAJj1WQYiztevnyjojUds3hOR6zBAjV0mY=\",\"JS50dGZ3/XWEzrD4qmk2vQT5Uo72AHN+mRP+S1aY6yg=\",\"GakHmpiXojcHQlJ2eRK+17djWujKDt4t06QqdcHGuBo=\",\"B3ft702RUg/NSQoi3Faal+VAoP21J7Sxo6hU/jRrjn8=\",\"Eho3ZCaf01zfHmIcPcYxj0e4YjgLoANXhJ2IQAWUY+4=\",\"L4DKFRsHe1B2coHqXUwfdFf42kRN2hbYFJu2wQYe0Ko=\",\"HulQxFoML0pLZGiKeTXtK2PU/ltBSvoFwaKEZ0QJ8WU=\"]],[[\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"H5MFV6KEmYIl9fTk37z1rCEfGxLZGwVi7T1jKF16cUo=\",\"AY6CIvaQfaV0Xuuc1KnmLyi4txCqhf5yn56nOj7wCZ0=\",\"GA6STXV9C+QGb+sUbtViEuOKz530lXQyZT83D5Bbiwc=\",\"L30HFdE5EZDnsUoSQrZ5nqwxQuIfCMoCwhdV6ud6Vbw=\",\"Aig+2NXm+UcLP09Jp3EGHkpPx9rGg978wDSKiGLGznE=\",\"IfYO+xMrYpCZkLn5lPOBqcAqvDzLVMXI6MnFZkxpE9Y=\",\"HN6CrO5guEQk6bzuSaVGTuBdHPC3BGkgimdWNaxxVJU=\",\"EYokUQohU/gY8KmWyH3pE1h4BfFs2xk52UBpQflY6OE=\",\"FkVnsN4Wt6VVD8oim6x8sHeVJDJeTKXnioYHiIFmAmQ=\",\"GI/zAxlBEqcDRSfMndC03rCWDJwQbOEVF43XCH5OjAI=\",\"CD2DKt+btKJfaGq+2p8W6/UyY9z570MReB0Jkg0JTq0=\"],[\"D9VHhA86MKUzqZTR/bP2CuUHP0SE80vpUe4Wonb965o=\",\"BMQGGCDNqb9HLfP2TWr6AE8ehiPQpPYULMofGaTCdfs=\",\"EHdX6wwHmfeBMI2D0uBX74EG9rZWtF52NhgeETos3zI=\",\"Ks0544kqxCntgShj76Be2nRrVbuXRpSk53uaGau1UAE=\",\"KXiLts2Ufqnvru/Q7rf9Vj/MLkC9Yj6iskQrVdmNxaY=\",\"BquGcsk2BwoQdXrbRQMaXiki8PuLX6s6T144cvtYLtM=\",\"HbmKVi/NGl5EluYSZKrV6jtFX0bqvYlXumcenDHlCSs=\",\"HE3eB9D5TRqqgyrC9XEtQ4tOGAS1IJzlWULXr7JMZAE=\",\"LPyCcS7Z1x/0/fY+5K0Rb6wZV5T42RAobBUu/Z+Vm+4=\",\"GLSbdz9XmYiOmr4/aIPXBjMzg1ts3TM1gLK0v0jzsn4=\",\"CzAN5bmcJ9MyCR+PsNl88EqGpR1NIDd4jg1POOj06rI=\",\"BUGva5ZSRmIITRII1xtrKo1m2RF5dFshNnnCorvJSWg=\"],[\"BQGWcb2gJmcMf/qQgXlRBZY/Vs4yf894RR+6K9s6wcY=\",\"Dbwiw+VMkkqILCIACVEjnMJjdV38s4sn70+IDiAstfo=\",\"CWaiG5YVryt1Y9/kG4ufwGA5US3JyOEZaJHrd/hWtgg=\",\"F7GGIdvWHfCF2kz4oDOV43ACacffTZjOSFH5Cry7NjE=\",\"EswnRkf8Vyu3kDW/wzMqTlZqKAEfad0IdPAcVrxEw+I=\",\"LH1Ti55tKy4G5y+KqrJtvd6tH+9qdAoR6ZU/jo6e4Fc=\",\"LzCADA7kYQEFadNrYGhaOLApEqAgvEcIWYhU9lgi8Vw=\",\"EWxF5NiM6uRWXA6U2oROryd11fW0NdlNLT04tYP6eEE=\",\"L/zLxAAx66/s/DqXKEvQ9txNRezri4mY8aZnvuNp7WI=\",\"IAdCSxKa3iGUxz5uLJ15Ng0TYMT7uMXzEzD5OFWLOs4=\",\"LFPWZ21NTIfZ6vXU2gjR6Y0QOjOI1Zp8DD3lHiYjqjo=\",\"LPLJksAqNjNP9dyFFkbufaBLROtUTuPA+tuNxe7ypYU=\"],[\"KVLBjBVVjymyrnf8OeUaOV8XOpCX20BNt2WrApBrJ9w=\",\"L7scWenomZ2RxA9NRCMxIqs1/8l17ftDxT7Qfb8NnHY=\",\"CCBGCBSY7uY8KHxvo+/N7+uhtScqd7upz921avpTyC0=\",\"AqQpwtBtzzTTRzDDr4vBmwSr1lJGjeWoW11cv9nCPm4=\",\"LvWEw6ru274rSxA6YelO1AqXKUFWrX3fDeQ7hFJJ9TQ=\",\"KORiDSEFNryqQu5Gsc3LIb8hWTO65O7GOe+9UfS7ZVc=\",\"HjKx4ua1knOhE9YJZjr2swyVs2iE/l+vNx3j1WQhPDs=\",\"GIIDZIBNIhGTR7coE1tAmVb3kz3voQWdY0uXfZ06vN4=\",\"CbbACjffJ3DOwPG/Yqaqw704DGzp9PluDwh5I3/6UQs=\",\"BEXibib5FwfaLfXBiLr4DqL0jHA2FJgPp5iXHNjsYPU=\",\"GfUQFxUWKXZ2bitXpYZ0vFjhuivhilmwegfkqT4DgHU=\",\"BsXfj9Yeyi+0kj8KRt1OQWo6O0jBDe0TEz/+q2/RU+M=\"],[\"I1OmCva9YeXqwsmkJj1FH60HOAZU1HkjeNr3UuXMM/o=\",\"C49A0sTSjEcghSA6DkYK9zu+zsOys6Y/JwKPLKinElE=\",\"LH7L8UstYEmmQ50PKfEOJuyXWsw+Pt23fIMaUJr1kZY=\",\"GX37ZBicCarvlKH1QtjDSuon//unBCAtUobWK9Du03I=\",\"BfmmqNZMyhJyXdFREPdK7Pmd0w5Xp9mYKc2HV7dbdy8=\",\"/g3vcL+6QGea741aI5s6G1pS/o/X7bdUruKxgtZLZg==\",\"GxUjRjpFopgoiQSGgaQiwC6jc/i4wb8Wx0o3XVBgxmI=\",\"DISdB7HZ5uy6xRf8GSN/9zQkoGePlGmbI/dpUq+kUUw=\",\"LEA2YWwVYAYzd3HB41X8Dy8jjmTL1p0Giqu0tYEWiG8=\",\"F2gE7Bz4XTUpg1EkXTIjZUaDjZuYz0JC1gHH6OUBtJs=\",\"L1hVqHajf3u71hBKzPyuUH6d3NKnIZtIenaxfFJbUMo=\",\"GiM8fOv7DG63Lf0HqitTfM8pHoQJOq42zGgAL/uDY5s=\"],[\"DtajvUgXTjcLTyZLN0iLA6Xj9MD2HPMtMVetPjuG9r0=\",\"AowBqfAWAbtGQX7UZr5gCFlQUveC5GhX2BIp5k5r2gI=\",\"FEAi5+B3/yKizj3+mSMQfVrvBG0KHyy182GRqwTq5O0=\",\"D9O9t5ytkTQyt9OCjgctrcJs9JA9VriXYgByOEbGV34=\",\"KXnRrq/fl5iFYNTrus+m4rfz0CaUaru51Tl2ReboGCU=\",\"Iq4CNSCXl0HlxY+wT9JdEtyPX8tq0VIjpdp+D5HHtPU=\",\"BSRu54VLLiDoYS2gIbMHmOXw0Cpb/V550/msbHn6YJs=\",\"K2Ck1D0SzzEHbgaQ6TFxbEeobncow0stPLDLz5W7t08=\",\"BBuQmmWNE2mTs/UJqenVATi6ykj2tmOZrFxknmjdOqQ=\",\"JbbmXpD/v5ENGf464j0Df49k2p/j30g/xPSXfKNqexw=\",\"LA3kSKiN/qrMm88oULb/T3AeGlONaQmLyUCHzDWTCWY=\",\"BfbWL1RRjwOeeapya/FaWYNYPspAYkBUAKzKWMqdIjU=\"],[\"IRA6eqIMjRVQG+jCNQTGqRLGEAxdiAhcwuQqUjAvRIM=\",\"I86OQCk5zM82F2pb2DGDoNVKJO5sq+T8f4FN+/Jvheo=\",\"FwQD1BQUj0aBuCE1UJUeI47cAJ9GsAaTzj2cWAD63Qo=\",\"Kbn/4F2yxS3dG/DlxTLu/nBJfH30uX2y8GJINldqayk=\",\"FTiRBS/KEpD7+DJA0zT9TOBd54rfqiyWhkiODEfOH8A=\",\"EFwLJGZgxL2Kbxs2/Dz/hqLEMsDckyHLUKu5ihDNG64=\",\"Bs34BVQ5rIQkxDXn6b6j8K6T6rFxrDg+0s7bRg/LBMQ=\",\"AxYde5ThsEEfwB3PvXSKbfMVb/BFNrPdMQH3suvDgRs=\",\"JcB1tB6i2CeklVtkadudQXYPr4hfLG6cCUB+uxxNwnQ=\",\"L6KveXDhMffv46fHiIkKuGD3Z1HlW0/2NN1GzE3mYNg=\",\"DOWHBm6uDDRcM2jFPf8hcM2wgb7lKyQ6Hm3m1PgkUdc=\",\"Kwnek8bjFIz3/1cxyOFE3rtmyoluy+QInS0iy9sJd34=\"],[\"L7IyVz6F1oxTbRAMOm6pFyiERR5new0c0PtNxMJ1Nrc=\",\"Dbgqu806G1b3/I0RbLVMVP4mJDcCvT1X5x984NRwpA8=\",\"KZfZKl6bxmyE9jXoy/CA63IOzUyj5Cw6uNCIYRiAhho=\",\"CioAbjsIa/UCxbFUDqrsFLnBW/iEccttR5+0Vj8BZJc=\",\"G4x+sE01Gv9Odq9/n6ERT+Rartr960LBwjUDsSJjnHs=\",\"Klq6O0XnnrJgaypbR+uQdYSuz7/AtM1QzaHOSFQzhZc=\",\"L5pc23lkXjRUxhfXendP6vJO9gNFTAIHb8TJ11SMxFU=\",\"BkOOiwIgRkA5p7gCLwa+ruUCxd4mnbgvkdiP4bcoNPo=\",\"EVqRhnIzzHXRyQakKTDpPLnBavztOQzBRDXlz++06W4=\",\"DI/U7OXCBRkM9shC0Wg0RAeb9Jg11ci437sRr5VsyvM=\",\"LOqYzGSr2Sbflj2lfy70xDQUHLU6xjEbJWbtuVeYJxM=\",\"Ajns2SUXglF095Y0XbKWViIjdg+xuBwJG3SmpKgpaKQ=\"],[\"MCoIW+BA/5pwmtDHMjiw0eEeHRdAmrqjT8Rd4ptUFTU=\",\"LnA+qa+ZFhrPmUnaevsY1GLYW2cWVtYcLN7jpyOQIT8=\",\"IUJ7Opos3x4ubGKJBrIeJCcdcsGLAmG+aMykSGXezhE=\",\"I3qeAgkIzQ7b2erodyNQ4Ocx4yKLiS/F9k/fqbnapnA=\",\"LYEl2+9gK9lw0R+tfP4Gw8ZPVoewm5YKuSsU9p776lc=\",\"I6OyPV7fXLZhYP0lI7OjgxQikcDg7mZmgulGsdV5N9Y=\",\"AbFiXXV3hqGak7N6338iyopQKqRGLKePfaLXwis31/k=\",\"FImLq8iBDLxiZohTFRGoRz7YmiJWnUe6WGwoTkW9CuA=\",\"L4+zcXi1JXWL9qpSfyV3Ph68+OFCU3lQDIJFx0G6P8Q=\",\"DpkvREY+Lf0mfmpKHDMD6noRhiUu/Wyfrp5fDB9tgmY=\",\"LHrkddkMR19zwNKb6IidDEuFNv7mwDiZhL+eTbsarm0=\",\"KUXLheNFMuOiL8V2cDeXiTzikNAVZDCo3OYcnfiai9U=\"],[\"BoPmQOYVTvc8PNax0PD9huv34pLmP6hM8KiDwvH6qLo=\",\"FlEsFQwdL7cjXv0tTw+tX914+NDN5TpmvJAgbILEtZc=\",\"JLulgIanhUGo6/1TXBB8NpRteLpssm0ifmFRMfcdM30=\",\"bTSdYYLsMNaMm+AQWHxwf34eF1wNMk5q3e1jN6csKw==\",\"EJJIB/b9xOnlhnkuOs4wAfFrwC6EraXfUde9NyQ+4e4=\",\"JmNfTfcXIQfa1rfDBo0tQ4v79IZHEDn55lqchGKiycI=\",\"KL9UiKUl9VFEANznIkMCh/6OTIEBVAVusPTW/mEJHPU=\",\"kN/MAyelQWcs/CbH4TcFg8X5IUF3CTAQ/T+/J5qv1A==\",\"KaFNxLrApMUr8wqva5uOBUU9DXlyRrZHMtUPF2p8olc=\",\"AmCf+X71dP1o0Wo94IcsO1mluSgljdFGmCahkdy/W9A=\",\"IyOP2hQXMC3QPOVGB3SWECkpRb3b1YckFxT9OWSvXxA=\",\"075qWxK88bxwXCDDDzILiIHGwuwA6FdoXAWZJio88A==\"],[\"Hwnz+wf39kdvrJiUa3N1CV4BSyjyOgesn8cHcUSsOXk=\",\"ApiqXVpEVlt172jfkC15HQHZinXoIu9VOxdhxY1v3zI=\",\"Af1abrpS6eods4mh/I3T0Cg9c3wY6wbgkLb9LciOChQ=\",\"Cqu6OdIg8wYE0MRN1Hw8cN47efW6pwo6egygKuGwgMU=\",\"IwkYkZtoJvqnEkxb0V0QwDbVZeEAtpajvnr67bKrums=\",\"K7KO9C9fratqb/1WVbNlgN6wY64wgdWHuxWYh4WQ8cw=\",\"IYkb7jH7e9ifDkQis8j1s5MpmvDZgl25vnPnsgCXkjw=\",\"A44MLinHnM9GteobxYknauyVt06LuC5DhcBYVjfIhfg=\",\"LIncdWK5HY8vfaogm3VgUgtrxi7GMdtBzF7awfsUK+Q=\",\"FdxXh5y0HWAV2piB+Ui0DSDw4D+th3RthXWvAJyWAz0=\",\"HGdP8urSfOAC9L78etXw9RI+WXk8D+IQdegZzlbOHoM=\",\"Eee8SjnScwGWtsM0+ZdQ3lu15PvKXWoZ63/hSr6EXb0=\"],[\"BZjDjS4seN/kkHx06CMlyxkdUmCJVbWD5YJuvr0YV7U=\",\"ID/SB4qyqPiLdgZUMUXuNNrqsq78oxvASkdgZWl8q/g=\",\"EnZELZODxS1Q/Jtaw0RCpOyOnNeu5tbOrMGm9SGq5KQ=\",\"Fu6YCixn3iT6GjQILxHHG3xFlmpui8aqGh28fvapurI=\",\"HbkiuMJJ/3v5YSHq6dlVXvd3Dz3XsFYZGumrOKXM9u0=\",\"CW3UOoMqto415XyY17AfKi5ZNoB3BFk6xyx0ABOD9+I=\",\"IoLoat6FhV1OoGV8St0gYlxtqpC8k5Q7Waktu3e2NoE=\",\"KDMdDTHKhnWtR2fEkCYbv+W4SttMosVZmofzMZCBMPQ=\",\"FJcr/IXeA3sH5VMy5rxbTwjzntTripch3/xKWG3Zod8=\",\"BtA5tk6C15dd0ho3te55MI8g6C4jSJOC7C0XYZBYeJY=\",\"Jie+aNnNDM2jgo1RYhukCfms8J8anMUDop7DBvhgauc=\",\"DHyduVKGX7lHD4qhQCU2yzuCJ22eKICCrH+DsQvLbRc=\"]],[[\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"LYxwA1cxrZ77qSghqIEZ9rgYOjYr5kFympPWoyfAOAk=\",\"B7YgyKeOCeSc5UeqeDqnjz5FlMSas91vYCvGwDUdgj8=\",\"IxmWtZJShXVWfTnQBkWoOxOSkJO7+gDWpmHkppA1HQ8=\",\"BOR6cuSbnFqj9p9q8i+gq2QMk/xSTdPFCEhtZvB5hSo=\",\"Coy0sr8/DF2mceSPg+XBswGPDTEgCm8Z/VGV2yLu9/Q=\",\"GLuwArRvLl/sKxIPr4eCLKjnes6U4DqrXBbEuTFzncg=\",\"Ar+uGwVO8ukk11qKASg9opEDxXutEp7IOWzidLpFJN8=\",\"BtEBsZR30WJ7lUJYG/DN+rOLBc3v3LgZZcW+ANeA8ZI=\",\"GK9h9hhP+F8QTCvvF5s+xaXSQt++vo4nopGPYg6KW+g=\",\"EeOnwtX3Q3G+sYjG49ehSzMSivjuModUbRLXd3zvcMs=\",\"LeXWp6JzQ90EIqxxuNQJtDzLC2cul4+P39IU9NeGZAQ=\",\"Iny0O5gYkk8qJYiWSgrX3fo99iKEtLOxAZmlAe2XBiI=\"],[\"Ky/18nUxtvPWqF114+CPOi8NrDaApsJtVey/gDyoBWk=\",\"Ce80kq0Z3R0L++sZEzCogO55M8nTs2u1+gIoO65dYF4=\",\"J9a9GHA9fKkqokB20xh7bAAo0LYhPZ5dLGYRUjehkFE=\",\"GT8yo/g592BJycvyQUWQaYohGOg2WDJ8QziqNkjY99c=\",\"I10OcaNQ8fI9m7UYKsROyeRhXneAHlqtyrgzaq2xcSw=\",\"HfXJ72lK/mG8JTrpCKj2rwoIzbnnip8yLCI4gyLxbCo=\",\"HbICHso6NiSn1FuxbPSkTir0+uDcKAAw5+vlU5T2nYw=\",\"GkaiZpGEHCYQmjKuB+tYSmuK9lcnPNxNihEt6gvMhc8=\",\"DK6AzAWu22bW5kmwV9vFrpdZ2l17Q9XiWkAOH5Lp0ao=\",\"GVBXrxMZ4k3xuQXG4uspVwA8/DSwAcDlS53PLqXfa+k=\",\"LU01rNnyij5r/WAUcpSCk8Hk8ITHFN2xoHXy6unOIbM=\",\"Al6y7YTFIKuhZOM/A1O1ExiGwPvRjlVpVUFRLexWOgw=\",\"FsfFxhYe2jLGW7NHZVrKqAvMmL/AI/SrEvWyqJnzfj0=\"],[\"C2WISc5iC77v8jO30SJYAV6p+HpTkPVhSYHrbky0pfo=\",\"FFjeUWpTQZDFVQxqG+069TXDiyQuuSkTcwluxg45wfE=\",\"KWnrUBbySzGszxc8ogRmjcIimEW/ZEbOoAfBEzSb1Nc=\",\"Cl2mWbb8saQnPht+O1RNLL02LKxJev0AS46pIP2wS/8=\",\"Ehl0DEJHQ9u/iWmW8O56QHa6lgpX6Ndnm4KEeSGFcNE=\",\"E0QxEo5f/Aq2ATbF2FGhHc3WPNzxetZP13UXcB3mdfg=\",\"CXxhM66o/kjzpfxBa99eRtBd4HI7xJ5Tufteg9NQwpU=\",\"EH2geE37MU2ChZvkTTe00rY0XBdLkWUcZcmESWgqUgQ=\",\"EiVrO5nTHYo3KYb5XWbME53SPpNUh9oms+JJ6ny/ka4=\",\"HZUuv/y+3SYDbFSh6KKCj+MgrfB6KG5/LCEbR/bD7oY=\",\"JjCbUstV9upakDCwE3j2XS5repYZkm2bGx4hy6Afp+E=\",\"ChJSXweBMiNx/XCwkozObi6qpnuJcNzfMZ3yXoAZpt4=\",\"J+N8aKAVMPCSzTfEom3s4nN4aNwsNRlDXh8suI8Htiw=\"],[\"EYEy+8HNg/lRZ8tEc9VMa9LEF+J4Ll7+oW5y1HtItw8=\",\"E27yUVlV/2YZSY+sWUJIFhifiWrA7Wm1mFTRBd9HxLQ=\",\"KcZ7zgS/0CD0/36sq2y94DSyL7hjNGdaNh8FnlA5UxE=\",\"Aqgyzu04N+dCGW4JSR/iPj9uURJuq5rOyW5xlTEC7yQ=\",\"K1AfEAPieqgJ3J5c2El2o7jBacHpxjl314I/gNP4I74=\",\"A+pOK//gLaWXfO0fGm6FLpIavi4BXzWzbOS9AkbCzYk=\",\"FQ756TKnS43r9nAIBkEzmxJoT/WjA7L7fB2NVvVqth8=\",\"K0WzviZ0/YIFFqzWzGGDxPrg9+36mvzQLf7szQK/7UY=\",\"I4ll1liWevorzlD/GMu+U1MnxlsLduUNowc53tJetJI=\",\"A3C3V6xs3UZhDuwMItQ6VD1eBIJXe73BTnEJAwe19po=\",\"KqhMHvnoSKZPdIuA4nndz/hx6cTD4vr6r3kVmwtOQBg=\",\"G79D3bWgsNKEWSOxzhKCkjWcuzE8WHb7tS9eax/LcDE=\",\"Gd0cbUUpgkitSZUx8zzgAlBUWNdheOyiYpjjmmL7lQE=\"],[\"C1lEdo1hwbNWKldJ9PBsTdCFu1Yrg41+LvFKIf31JMA=\",\"GMv94M0hwYN5ei8IlZSoHNgo87B0I3HtAuuD+wBk3UM=\",\"EkR0sIgp2bcXxQiEvIlc0/gdUZhZ0hI116dEUNCpQns=\",\"CYuyxMYzTf6kdNBMsul2GGH2sYqAWKUrYZ1iJ6JiKKg=\",\"DzTbk+qNKtfR7/httYIMx62ke9zYyC0Bgh9cIaPqIyU=\",\"BuA8oRRnBVIrtencc1YO7ua5tL9R1I+VP70fAG11inU=\",\"Ejf0TwNrLaAGepSUczTjr6KsTPEAmJZ2b1sZHN4oSXI=\",\"IILpEDzEUkWSQokRFScxKGD25+6UV48BGPSpIND41SU=\",\"I6bhQyhOjyOMS2Mq14rOWw3NlKiXywXR4pe0iA50M7I=\",\"IuB2o6puv+mWugaL9b/7F/pyQzjNZ/Z+olMwGVxigXI=\",\"L+MbDfBPJ2pSW2GazEpbo+tY2MMhxiOQ/rqwXs28eY0=\",\"I+jDYGrugY0q+oxEZdXsucRb3njdgZwPNaYgWTwfQuY=\",\"IV9VY0ZOLfao2qjDRHakZeTun6CtAfxDmbZJsuB9Fnk=\"],[\"KwTW/7r3FEAS2SxcYhKAPAtbzA17GVC4idH6bz5WRFo=\",\"InV9qegiNFKXvQYKP3G7HnDOl3BJw5MjUDVnfoQ1cxQ=\",\"LH4o9Z/oqKO7L6KyseEUzig/4iqXij359ioXHLHWXk4=\",\"EBdJ+d0mBRkcGWPyVpSuJn9rRL/i0a80/vy2XpWHhLA=\",\"BNAqsFgm+lC8xfmvnjlkd+aFQtB2toPuYbhYadRTWJM=\",\"AUxJnuUZJbIx2hfue1WnX5b0YuQxZ17jbHvk6bBp4mA=\",\"LZ6pnS0jcygmbVndfgGLvWvMeUHZ/18HoXuvAJn2FNI=\",\"MDqeIoVdldB+gXLzoFNtS5UUL5YrAGqKsJ57tjNehIc=\",\"JOE6OPBNXg/Atrbg94KmpSOos7ASciS44jdRucufiWA=\",\"EmhR8+rcAYMoinUBU5EKQeB0s1RPBhClEnOtNpi+DLk=\",\"J8G0Br0Z7RPVM1ULi2IRhrH9R/Zx5mBGgDF+ZjiwkeE=\",\"FYiA9a25bdE5gSi5/zOfPYJ9pkY4kcyhKcASwGsWsyE=\",\"820WbpkTm5v8GsMnCj2YxK+oG/l0NgdvVzg9pQQ2pQ==\"],[\"Kb4qQoNK4y3jMg+w7ka0wQKj0a5ExdzhUv3qtUUMnEQ=\",\"FiKAUSXd80TBjjUdEegikWGLl1girQyQPvvq2lpR1E8=\",\"FlwLl4tLtkap/yJaxJAFISkr5UyHmILT8R6qMQM0FIc=\",\"DHteCTQ9tcY8EQ0xddAbtJgpDZcbHm3A6aDp5xWDVrE=\",\"K8yC51ORvk6pzQ+KUF+eT2hHePx6mxvOt4aLspnNIHI=\",\"BhHs0fN5oAYrBcSu2xALwBUkTGqI8WMaRWzCrMqJMMw=\",\"BHf5UeGfUxuENK11W2eD1htnnvu4f9lW45TbnENOI1I=\",\"KWNRQxPwRvhE+VD/6oD15bQktwfxZZlmLlouNmjL5fs=\",\"CQENc2d2IKrhsPqAI/8cgSMTrpw79DBm6mC8GrR3p/g=\",\"A2H0CCt1puvSP5pucwnYxOdSAVnaI0Qe3WMaasFMIM0=\",\"DOvPMJdbNyZ67fUh7ivHU8NCTcS27fOYT7Aq4erUTa8=\",\"I6GsBzUZRql0yIQekgkqT/xq78f6mI48H358h+FRKpA=\",\"Ht18ferySeD9P1doqpLp2tZBGLSRvM4SNAxG8hCwfO0=\"],[\"GUb+neCpQ9WnFurAhWHNkfkDH+yC2pq3KIPHshixHrc=\",\"KXZdjPd2GaWAZY0Sf7b6pE1scKD01l26qWB1S0GV2f4=\",\"AgZhNLspnZ41nLgqg4D+tjtg5LmFnZuYcu2vkVL5LU8=\",\"EWoxPQDPmdwY4h+TpbsZgBi76kt83O0+TSEJcd0KaBs=\",\"D+KbW+rVTFu/QmuxKESikgiErER5BhAc6piImGoDCxE=\",\"Iq83wOSojerp9/rYOBmRBzXLS0kxHgquEct1NNC87m4=\",\"HYuLp3LEzacujvmxnEJNVdVyUbJHxjK+olUnGvz8cLY=\",\"BLf40dXsi/aJrfEtZWuU4VsLIpwWOMnEdX+vDRj6ZDM=\",\"CkHlpEId79Xtes/UhAE5WkCaZ8Pt9MFozjNo7ZRCEtc=\",\"Gr6LrbLRI1O5u5gVIIapQht87hd2FzDiWsKE1rHtezc=\",\"KRwNpzHAFsDWxMdThwMKliv3ous14VqsAvrfUwJ4o9E=\",\"A0xGD/8ohi73pQmhdQom7R5ZYPy1jE9Ix9Jnx35Y3WY=\",\"COF0Gpf2NI7W1o9Le8bsiy2/A/QmdpzHec7uS6G+sD8=\"],[\"GvPKYkClWrpV345Jg1uS+hfjmtVwHvcPgUQQn4lL8dA=\",\"K7C2sI/BvREHDtxC8j6Ae4LouI73A1Xfx04Jan/zgcs=\",\"CTcu0Yuhp3Tq/hv/be7EvAgUsImcYZb6Faes0V7MXKI=\",\"BATA+hvR9+BZBUy7h/a1xp0RRX5Z+QQZzkvRC7ioA98=\",\"G7IJGHCk+sA2gv5bHi61axStbkj0Z2/kFFS/7rD/1Nk=\",\"KZ75Wu2MdUlNuC6GefvG1aPS4prs3PaXmpsnKmB91d8=\",\"IGqi824ysrBta+SK1JPTVMp0aHU/Um5r2CVJ/DbNQQk=\",\"JZVHFotksqIolBpULzlKJpnAgcFJRj3Cw9If2LLk8xw=\",\"L8fRfzqa/B3iia0PlBJq7sg0SYEgYpzIfEWGxid4AHU=\",\"FafmSlpG9Zc+ToKiY++QXtZPGCsgQbqgChNZ5+nF7ac=\",\"EhbwVgfgMuSQOKwUWBAOiayFGaWjzuRUWwiFDYvxYOA=\",\"Ij2xjzHIXpjh3XtyRd3doP+OMZvX0aZ/28fu9W1meBg=\",\"L0qoZB6kE1Ax9Nl6ei9nmoy8pWK6aqVOrn0y/30E29I=\"],[\"CB9YqRpODRAOA2n92BoZADU0L9BnfuG/UhXkf45YwsM=\",\"BJUedHt65rmdklAQjF0rcBgak/8dS/cjeB4bk4Apgnw=\",\"HjoTDoyv+bXlY+iq+EsvxzZo41HP0oz2b1AS3mE0W1g=\",\"DBwhavMwVMSX7wQ4H1hYIpi1QzX2Mr1irdKeCAZ6Wdk=\",\"D1TJxSKlx04NTgxjYRp1AmV1dbepY8DnhtKnYcToRbs=\",\"EDzIOEvhvhCHubtHwOtgSfheBBP3tAjx3C+h5vxK+Rs=\",\"KNqTCazKED7PGd9ypyITTVMLrmxmDbPDZNDrsgDCrqo=\",\"J5Gd0vnT3J/L2hojuVzyPjYw5v1SEPrKas9GKbiOX/E=\",\"H4bj6dFH7WBMceH7bvhFnPxAABu0/FzMJmFmmxVavro=\",\"DhVOvVDbPChk2+HtcrCBYhCFG4bDU2ktF0TLM3K/py0=\",\"Ga5llFodvtOWXy3jo5/y1Uqx3uDzM7iPtJ7bP8mseJk=\",\"mbl8h4zjXJV9AbQ9qwf4AD4sN5tBymGm5WqSBPsWvA==\",\"IaCkPIjOJu/7+LmtZoBWtbA2LlAJ89gAM9tHMij7f8g=\"],[\"IqhSr5BoCoypaItx7SfBV9ArQGvWx/2BIdfHeTrSMF0=\",\"F3gLlGnoHKcMfLtDR+f7QMY+9o893lHQTLR7O4P8KZ4=\",\"JVVDoxSvxaKZFBMijHXq45i5BXayO2zYYShmXMO9lHg=\",\"EcsgVE9DQ3poin3LVzp9pPjHtENzSe7fP85DKm88FlM=\",\"Fg9awLJIH4AZ6V4LJkRbpk3AOkvooVRhSWJH5qwpACo=\",\"IGz0KQrJhENPp3S7D4kBojOQVjK3k8gLHVmWbpanODI=\",\"AblDWFXWzEM5JA6fo4GcL/QgmA1s8Ucht15Msf5X4Rg=\",\"K5I35ZQeFlfvpQe4ksO43Vf8jVKHbstZndXhBStrHy8=\",\"GC2Pke4qmiYhWzXzwO7PjsXMNgEkz2uQPnDKgxJpddw=\",\"JVKNXTHb13z6bnsYR/joTIHB7VuuKlHJ5APMdUxUu1U=\",\"L5lq5iDQCj1OVe96bOC2gTiPG3/zh1tyWupuuQOdiyU=\",\"LCsefHD+wvWMoBvvWsN8u5RxrnkUvwjffkfdjjvDzpM=\",\"Axs2nQEfIZ5Kj7Id+TUoeNk/+ANbzag0w9zEHDwt+F0=\"],[\"Cye6gqD/uYNomBc2rpJ6IngomFwAw+XfjBJ2sQAQiaE=\",\"GRPVHZxx0EK/v2Sdnm5upf3YK0/TFz/y/gK4VYJSiRI=\",\"B2VHRJ+gOEXxheYVeKWo8mg6GXM/wExzrGoLib67hFM=\",\"GG8WCuhm4QxL4Op9IEzWTlczfGDECzTDo3HXU/L/ABo=\",\"Lz1rjiNhFmCJUBuRR+hKtrCXkqwXpfCA11s+Mgr/yGw=\",\"Ddhdzwj9ONIvMW2R2BLLKohDCHda+p9mfGyoCVQ5fIY=\",\"I4gy5kMVjpZom1gDsLd2AbWb37SSYROjRV8f9N9uK0Y=\",\"IC445mmINhnsvGpqRTaLm5o+mrZ+/vUPiW3+SLeNPaw=\",\"Bn0rYS119Pl0MS0Erg/vQ6NbYO8FTA9HUwLFX8EL2rA=\",\"IfDGuJb7FCINgRRBYpx4+Ojid0YCYiDjMczriaDuiaM=\",\"LIJe5WHEq2oiMxF3mZyJgG+8NFGDh+gHwgw1lzm6nrY=\",\"BGJfIljt8CYroGR8rkJqSG/IAdwLWdIOwPTQr4y9I84=\",\"AgpyCDV5BZy2WZUtPyoB7ZDSEAInW16hHyCcdjuqhFc=\"],[\"BLRlJiB+3HCg0jyEOLxJo2VjVVLe4kBmGize75ZvIPY=\",\"Kp40KlbItkZtP+UzuJ8atEG2Lf8xU9OuZQDCw75jZeg=\",\"L5i/CB4Ot4+AJcA+6cGZ8ug4xR5aCu/TM+n3z7OPU0s=\",\"Hh1ZIO3P6day0N2y9vdBr7BlkDQPwHsYLqfD672TOTE=\",\"G1m7YOmGGUmH/OoHBJi8x8k91WHOivX63nVM6sB7FwU=\",\"JM4Ky1ItpSfT6rcoZc8HPZVLq77TzRcGqmnXZ+mv580=\",\"C0O4+sxDz8BntVE6vM6EZQS5OVzcFN+WhhpSilKuLsU=\",\"JidY+z4HaTaZX/MUDvfRsKHg/kJApQdH4sPBINl386w=\",\"Dqs/JkF+a1PFMgct6S1Kp4zN8dqRZgpGGrsPn9e9zX8=\",\"IK3esq/SDnUqOdLyHr3cJ3J3OwYpItyN07oGiDbbpGQ=\",\"B1SUdDbDze0ppgyeiYI3whg6Sdt+cOfrc677S1xpMkY=\",\"I5ymGm735QGBCqiatJltvqj71H/S96LJaoGOk6PDjIk=\",\"GfEXcQSbW+gbQ8qB42EfQQikudwwzRIkQfdDGcOtzek=\"]],[[\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"EoJuW5vhybhffJiqypziiocGh9NijWDe8KswcrV7Cbg=\",\"Iv6hKXpKXwiQTVVcLhXQFhAqTtKcMrS7EICe8Ur0LHc=\",\"JMxnUYlAh7gxWYtbx/nbPLtIzilNkgjhqkNstfougOE=\",\"LMPQUDoOHalSsIG6XcWxF+ZGvtVypkUmbG7DzgoUdLk=\",\"Ee7b5aWWnzNEZQNJS0aaK4P4jTqkd+XW15Y6gzOmExU=\",\"GJrp6bFiqxoZ1ZnO3O9Ci9EyXHh0CqrWcVtxC/rEweY=\",\"Gq0RRJ1uLG4a3PnokRTDNsAUVSjzVqwEn1L9jLCENwo=\",\"DX4eriz+xAZALTTCWeWWb24usmHU8I4pCIMlprtmmmM=\",\"B5aiOtbtKsmVEEoNPmx16XfOKauh0l5iqaiiA2TqG+A=\",\"KZuOhiHX2MjT1ihssSazTuU7LcmjaXuDgMbkf1cRNFw=\",\"IPEe6B0qyantHKxh2c/fEL8bSc37ttIyhyod8UJ8GDk=\",\"CkA+l5lDuNL5R/btptQRcIgTQbteT7uztP4919zN13c=\",\"BGRiUzgPS/ZClyroGXd3lFSqCDP9o2sYIsucCXGePdE=\"],[\"EhhrsiAArYS2vykXmt4tTn6U/wflFifglYBXEGH6jOg=\",\"I345mA+QB7v4aZ2+zgVP6h8ZdmvmEBiF1CH6PqRrU0g=\",\"GAjL593yo2hNihZP4tFQ32Igb2vjPVd9xXmPGTru16E=\",\"AzzM7wWwvPe3eqVWCg+UnJC+XMLFcSL5iF0koRfGP5g=\",\"KFTIK0tfXfbdOHLj83E3LeDRLhbpEIdmkgtUWBBedr0=\",\"m2PHXfyrVy0oCwV/vDZA013V8WJEhjq4ox4JVtqIAg==\",\"KP028cdh6nvOKebwAGf6QLMuazGPUGtslLuEe/crW1I=\",\"K1bC5E9wOjsUPaA8JXSTZ/dSsWgXJX5tEjsQvIVUNDI=\",\"GE5YJGieT4FDhWffQ1854dNagZBB1+rzr5CEKb6yvC8=\",\"EATF7Lq2t9Eva7TK6rM91Wwfgp7ij0fCn7+7FH6IRlQ=\",\"Cpc6ZlaT7QlDTtsssKlxrSd6grM4V4hVI0muCei9DIU=\",\"ElR4yJc7w5W2SMgiCR+N9GlQSnHKT98dq1mnCND+Rxk=\",\"KwaW1FmAAgoqQhBzRA46T9Oe3FKI5pAKWVjgzYHg7uY=\",\"AmRiXHTyo7u9wZSBt4ZnV+Y5wSS061YNpTH875l3OQM=\"],[\"I5n6pkiu35Akxqw86v6iSCFuJKnlbK9azSnOJUap9rI=\",\"BUD1SSSXWV4TCA8C9rHmU+LlGJUWD/1coU0mrtk7hnI=\",\"HBzLRP+KttqFTpJx9L7ybSrCbNdEHxtp0W7uDXp7SBs=\",\"Do78hc/r3ilc5YneYK7A20PIH0vn2kTrJvpLcffLfuk=\",\"Cx2BD8xyFVHipZbpAJNn/GqSSFerKbcDIHsIyV7NAB0=\",\"Cfysw5mAZRJN4Bv3wMi6JqxCQfH33soe7+XvPVAV460=\",\"BdLwo8IjEirAEhQlAyC1L/Wj0kIRjhl3iyyM0al2xhE=\",\"DHUT92K2QCKhUdYjAgmd/9UXkdmv09z5bL/PYDWiwnw=\",\"GP3mRRBiAW7eqjLkCo/DB1HhfpusGS+MqJHBHznr/4E=\",\"B3VZRzc3VJ37IBbfpyVYuywcgW1zGHY6Xk/VFrBJFOg=\",\"LenuZSnlq8eu6Tt5TE7v3VF8T+EvpWvOBqNwjYYza74=\",\"ErWRt681/9mXs6YTaH5EkiViXdXRAc7y1vKvAtnb1tc=\",\"L5+I/pvjZFfopUZFWqAKD1EAp/MlgLePJqd70LdhIYE=\",\"CXFOcX2qPOs+l5TSSrzRcoMcuhgGbEwEiwmV6ebfHew=\"],[\"A63Sn+OY7S1E8jMSXs0VCePO3nfmvgi5SvT+yH6z5I4=\",\"Erv7sRDsKXEAfdrF+ONvZVRl0F8kYplrIRTvrKxwr7U=\",\"G40gnWayway6ukNeMEriBmLTNtEDML6zNVz4AfGUcz8=\",\"Cp1+5+6RZ3r/08pPxnRiW+iX33n4LsQ46A8eAAyLH3A=\",\"C26yJU7frh11A8NRjmTPGfNEPWzQO3HPvxvlk22k4EY=\",\"AamrP8IFmwz/fjzEMffbRfWdj39yTNEKA/MaNmOPi1I=\",\"Aj+6I6tLwk1IgLpab/1utQUN+40PVkdtOjApDto3KsQ=\",\"CyZwD9TpUMJa14/ttj/LDZunPsq4WMBxZkhmqQlvFNU=\",\"BKVyuGEF26UlPX7R5201oSbmcYVRuXayCPWT8IFY3qk=\",\"G8vmftX7dSKt6v0dmhUPjVetohjbNGkVyG5sAMAOOLg=\",\"Lqa3pyZcUD/LKEwrsZUS2uce81cSXDrHVca8bMN722Y=\",\"MFRO2pwyLGyHJnHWZ/xfzwnPuNNOjlgStuc456tA2O8=\",\"IGcz4yemS3jTxItvdYDQiHwXeDQ7Z3aIWeJTLX0cRqc=\",\"FNrJBZyeeNlsfvgHujQrlGhwZ5eCIx0q8Pbkq3bL0QE=\"],[\"Ehr2H03FuySJCr65JR5c6pR3CrBi3Awou4mV3Y8YNjU=\",\"Ly7FHEj4tzxRsmSnDSugtGvbQ/kz3g+uqKfaKpfLQfM=\",\"EXOM7TkzxLJ94TkR23HM1Yt7MTRO2RU9vd3bkfvbzqs=\",\"CRdbH6+s3A5itflebKZ8P/yWom43z8c0eVuS8eRhJNQ=\",\"IQpKgObqp5n3zgV1K72k1P8FIHQslD4e/usSqRIppa8=\",\"Gbr9DXlCuDnzatPXDZyHtVZ0ub3uAqfcMOT5nrzB2U8=\",\"JrjqsN0NlbeoQ54P99NDinOie1mT2B/OznKagko1IbE=\",\"FzmF/hfzsPuF3mEEwCtGw9ee7p3Ci1Z/AqsaHA3exXY=\",\"HZSOh3SxgPpeGjkyQ53+jF8ypDdlfSEnfkJhS0yaPcM=\",\"G2GgPiGDYiBP0gtnU25ebKe5bbtT1T7RYCMCmIYUh28=\",\"E4C+rHsGLGuJkUqXao0LnTJ2oTyCwj+iH0+kQD4yZ80=\",\"IRDBBe+0gbZ5zrLxEtbqcERCdjrirGXt+PFc/RacVg0=\",\"wnLRCvLveKmN/3SGxJ11Be3YjJIuVnKjq7FcxJ9BNA==\",\"Ep3Wd8H4qi020qfVNAZF36w0pkrkVvkbl96fjpExNhU=\"],[\"LKj/7i1Y8pRSl7AM0LUR2hZwgNU5SbPx/OrKlha2FD0=\",\"JuNlRNC1lS3eQAfRGBhGW96RxNzmWrwBXnVWuli5X/o=\",\"HpfOATr6punJk+nP3JquyRsGeHgZgwmFpy6ffG5Rarc=\",\"MBawdMgUIl4tXBCRqDA+7kvkdrFFitVMFrThaR9rRyQ=\",\"HBss8R8NOjoSG+fQ3fsk3HH1S5vvlDruMpY5ZpIqg5k=\",\"xHSCSv0qiAxqhae3paQ0rEIsemOq+N3HxNkyXt70Dg==\",\"GXdex4H9QImFn2t/EnyR64Put+yereFGd7CmsQuebiQ=\",\"IKmmKEz8Q4F5XjsGg36VloFf1bbxYr3gL5fbaHyEef0=\",\"IEQapfTVY45k162ZgrG/z94Vj2o81q9ilB4FzI5TMVE=\",\"LT0mnuMk58Q8EaqEzRW61lRE74Np3xV0moprLIEh4rk=\",\"GlcY9Kkt2NF5uTKwgg9lx7uT6rzjmPmXMk+YrHYyO5I=\",\"CP1Dl6qLOoTdG6Ti0Ot8bRxe2h92SBS1/+IEyOxzVgY=\",\"GjJ/8sRvWWn8rLRjUG4QLWglAjgfw/mZuf+9RSC6RpU=\",\"EIec6rw60EXXb2zVsmtW3Ee1EtZQlFj5/96Np55mSc0=\"],[\"LJnvXgZBR9qXgrkUopS2wU0h6n7sH3LodhZxBp2CoTQ=\",\"Imv5S4axd8/n8DED1Z4/nOI5OCGVRwjnxyP4EEpoxmQ=\",\"Bmq4vq2ue+vSajOtvWuzktaCXaN6Z56K+a6LxIE8MWg=\",\"DAmYYVReATpofN1Jo6KWqNLC6ZaRwlNdpxLTUdXmPBA=\",\"FXTJ5cqqimp/tIlNLEXRkB0cQrMhT+mnL9PMZo45n3Y=\",\"A6ZakdNbbod5CNXEGeeFD2RfYrHJE3ZaIUuw96KRW0k=\",\"DAc+rdtdP3nlv4O6wA83cAvWRQLYv31aCZ+z7/fTsD8=\",\"IXqkALK2Jbw2QypUXlMxJPmcHLmOuF33RzGehdUwRwo=\",\"F4pY/xItFozU/xGkcoCkuOXNsxNBG29umpR8f7V3pR8=\",\"DqRdIkee9Xc+WLD+dAho/B6LUL/3YEnVtu1ecjcRhns=\",\"HHy/JEjecRTu1wGwQYCQNOB7lGoDQLd3JoUp1YLCJao=\",\"JIffnV4Ga3b/yy8MoZCr9fweWHLEtqNqRocOkVkgEBA=\",\"LAy75GQikXFSyhkGRivLWhPvU2MiqHFSN9oJuMWUysU=\",\"D3w/PMls7aA55DyGwbaAx31vSfUOlN4j5NtC+OnK99M=\"],[\"DX0HzTeY9E2DKmVxwhcGdYaT5ek2hM4tGl6KU+DMZwk=\",\"JeMRs3zuaTVF4sLvwgQ7wHNVIRWzoGXO8T02VHtrncU=\",\"IbN75SGDXDK2c6Mdca7RvH8+qW/h1MI/FGI6CoUaPNg=\",\"C3Gga7dbChC/0oo3iL9UqKFEsyh9+cWRomQ8QQD+OI8=\",\"Ju1f/wbvnhlCvT0NO6aEjkfsBFzSb5MEnYDL+mvMc7A=\",\"E3kIuqwuNeE/hoNKv+mNG1S3wl1shfxsBex83tkXVRc=\",\"FDmR6DhtYjNMoNh4MqCEW0hBbvUVjBjnuduM1q7iI6o=\",\"FI3JM19iH/+cjS+nKpz1tv66vh9c53aJwaKeOTGF+6M=\",\"JW4UU3jSYE24xQndpFUkUrbEqJH6xdoZnHVgdo2UiDY=\",\"IoAlDiEr4qSNKTeWqIrGKwVBEBL0amb4egIgo9/z950=\",\"CcieBsrVQwFT3VLMZq5PUhv0FF3wSGgb6y4Go4UFARc=\",\"Cq1owg+t4ePiv3D870tVC6ANY5niDYNAL+CbUt3N9Sc=\",\"JfQQNSHjbVXkGBYu+Ov+xtRWlVIO9HuFSLo4tSon+/U=\",\"EL14JPwbiDs9oActLGGUxKHllXFWWU6Qitv25rGRK5s=\"],[\"KRlRFxBmI///sK9SXIOGhtDZcln8c6UZRgmse3sXExM=\",\"DyM24O7kaFdByiOCjDTCTwc0kfDnLBOWEFJKVvcapAU=\",\"HobsCGgFvHcSt1EN72USSbodSRB2JB2Z0AxpKIDzmnU=\",\"FJN4ecTHEnZEx2W2Ni+LmM/TL4Vy16rZzDKb7VtQemk=\",\"BZ3oc8WYBvVRFLw/gwn5tkz8unQ0quIgRH6g6cSmbaI=\",\"FmLybPBPW5ac3WuT6JDvK1sRJPUYIoiNwhZ7vs98Mec=\",\"BfuJfXHt2NjrHztcgjpYgqBtlkBWr9Uy5siIk6JfJhU=\",\"Ds+sqtDBR+Czx+BJdx5tQHKwLuTRccDlMiQhTRet41E=\",\"JfZNQqdQlxr8uAIwcPbsl7sjYrGWparir2pw8uezV68=\",\"IL5wP4bXwLna2Y/4u5/JL+isCoTGiXp12FEUb3SEC3E=\",\"KW86nBBCImkqRK0k8Pb9gZACfgdVVn6acAnsce9EDqA=\",\"BjAWebbNsXqmwhLONC7PaBq3zZa/C/uTNQNoAE2Xw1M=\",\"eUDrBLYexTQcFwLwOZP67RZ9tvos6pIpDNghsV/kwg==\",\"CQ2hLhWVVR0lAPkDELdwHfl2dkBBE8M+R1sud0mtthM=\"],[\"AbYtSxfeZzdbWPJIqI2/cHzJ0UkbzgCVZEygIZoB5Ao=\",\"DZu32rShiaO2mQpVJsgrCuULp91Vj5Ubuf00PLtLDhk=\",\"B10aps0rjRgcng9CJ1yYhK5voJGG/iJ+XEZz5W46zSg=\",\"KPngBY688VkbwAfLAqw6zeCFFCfbIMc1jb75+pxXwro=\",\"AX45zLo0MqE1wAddcgxklWLuTTG22i6ckL1yoDl2XnM=\",\"DNCkwn3hGutkYOMvoryyicuDMhcjFVMEkp6wyk7qA8k=\",\"J0WgWdCWLxvw3eHhuX4Lv0xBQ9EP0/3rjSspXuTXqd0=\",\"E2WpBMf2chAC284XB3qJqSu4A4vSevUzM/RHxM8DWoA=\",\"AvgSEh4urMx9Ub8mY5jVuo9gGiqm0zXrafeGRkIXdmc=\",\"IfjYVAkd22AdqxsB+zDD1Pd8wxZ/ozMsOzI3egfmqsg=\",\"AYOTUF6mIwZpqAMPbnYTChTBBwqQG6W2QLiK6A19MLU=\",\"HhUf7f6hFlnBiaMbon8sz2lWCEGI6yxMmbgn9kXx22E=\",\"KuHsnglXfILJe0sJFCrOUaqtHffcNSzU5YE9jO6cmNs=\",\"JM6wdm3iX8IniShqCSh750AxDEF0cyC98utclW4EA1Y=\"],[\"LhaBvHwi0kxDP4HdOjJv0CQr/H4r3rYwfk0qyjKt2h0=\",\"KkpsyITP0Ir0sNvom22ODlgRMget7Yy6stB1BT7+mYw=\",\"FCqDIGdHIA/bAnc+dm9QTGWvgrIAwOf9lC+SviPVhr4=\",\"DfZTUk//kt3o7ByaUcG+wwvzak8B6bO2LrE/j/33uL8=\",\"KufxQU8UQ3NTGBY+G/seG89cJx839qvxqoZ2ay5Z4Ek=\",\"IDC3vCpwkF0DFnTvtCAzb6uwdprAElw13+L/NywapOs=\",\"EqcQ3m0X+Rr4kBAiJoU7tkIJ8bQTMaHRcwW/W3tSFy0=\",\"H7pxO5h0IxHfs/o1b/g+7yNM6L8rDUpS3nr00lGfLxI=\",\"yPhyKJKi8GxatFTkB71Vfpwup374B+4OPYnGeFsNMw==\",\"Db0JPcFuc4Mr3mLQXLsG+CcfpHIpRwRi2MGM+KEk+es=\",\"HcowYKa7xMMk9++6IidP2NHyVgpO66jIsNOJl+DZxGs=\",\"KRvZQB3iCRa5ACoAZhFLO/rk08gwirpK/czfCuwS1mo=\",\"HJf8d1+WL+Bae2Y0a5PDJgyPapCn9cYyI6M4bhmFLq0=\",\"HH3OzqWeb3vrbXAuL+dFiEFdMOXcCZcLstVqzI4IMo8=\"],[\"ZYUNEdDsqHw2l7b15X94yoaVK60ckEfb0utr6enbMA==\",\"Hrl4GbNTHrtkDta0ITQzVBkQHR22DdGpJO+WZfepGvU=\",\"DuRoPI2lNra1B3Okabu94uQXoc+b4iFSCvHnVZaNf/Y=\",\"At/PsoCj03LbwVY56s5FwLrFYsROKS8UKbyRZXj7C/0=\",\"EuqSGs9bitxqTja+hXE1dtZYCZIwsLF2bGZvEtkqsUI=\",\"C1NCUDr0Ru+CTfTfagiBlftnJ2ZX1CDm8xKyYo6SKYY=\",\"CSZfsxSmdraz+CfwcoOh7U8wDo2Q+WeyD/YfRV0qsv4=\",\"CrkT9l4c6znti4O9XX/ZAOeFEe2rz+YjFN0Q1WeFjY4=\",\"BAfVhaan77VhN35fOXIxmj5yheFGxUme9shQSj0LYuM=\",\"L/W7vAItG3T+GEwGTljZZ/Gq0fCSbJBqXjVs/DuBrSQ=\",\"BtptiMIz4xgsX6XM2hOSwPiffGvsTmDajfgFSAfrCSI=\",\"qrJ+YnmVLHKR8DaRjwsnnTsdn45OisOA2nfsL8JOoA==\",\"J3N/zXbdKWwogXZG0wsRaMTQDh92TEVlyqMnbe/RXH4=\",\"EQpehN4JIJ6TY8A8IrU3rGp6q6L2qdGh9r+rcalgpYM=\"],[\"Glmza5T51yNXflBNYAxJPygQ8OZxEmcsdDq7sTq/Q7g=\",\"ImuR41LGXeT87hEkRb/yDkpnrw4RCVcxmyhg1Qh0Brs=\",\"Fo53Hp+PhgxJNn75GaANTxKLqwHBPX3XLOjTa8bR2DU=\",\"CzRYkLM8I9FnOWxYPRLk89nvyQTyYSAlEjUBkKsZYcU=\",\"GBXUwuahj08/pTigBBRtf1QPvoCkYFhXcU+6J5VhXfk=\",\"KCpVX5rU+1dpj6ofwyebuMKMH43IxpMiW9hSDbQxNIk=\",\"FIqxWXKmkltxRgJxD+nmTAoBUFOsuDjQ6HakbLVlP1k=\",\"COE8LmHERrUwJNIRarF2yENgDQDmdkAsRkF0UVjCQ/g=\",\"EcuD4B/1gDsEmitZrpkVs+AEXh22lKbfnenE5xUtGR0=\",\"EZgWhiyCJunl36vzFns7K/f7PRkGOYmyShbZfJS9U9c=\",\"DGHsebEG6dxklKY1nxdf9jeDnKU6yOehNHHFZkYYA5A=\",\"Ho7mQTCLpv5WALLfSSzy8U+YkroQJYJsU8d663vNsEs=\",\"FrYbJC1B4ZdYQzCaAaNqFDl9fI5760r72SM7RTqszbo=\",\"E4ItzD9icbcVScLNkXuFnNrDavaEiATRWjVNTeD2fvk=\"],[\"GksYa3fNU/lhyMy3gV2Xgc73pSr2TQv3RstSJRLT0K8=\",\"CsW4YSjuR5RMEq9THPFFgELDWt/NnltqdTGXNxRVnec=\",\"DCpDkGcSFEnB7z26a+H/hParf6xLvVStdTnmGCbKGXE=\",\"BPfx+v7hIbuBE0T3P1T0o1gwdnOd2d/EYrOuY0PJPLA=\",\"GPbEDjzPiFgEs3RDOvCpYrKWP7mqAei66MyDSz4Xox0=\",\"F0waEJXpXU8JjI1ggmd2wvc2kds37DuTeDW2WwG6E9Y=\",\"H3+XBMqxz+orJHHVee+Z0ZOyNK+Q5iygm1pnHCQopRU=\",\"AfoCYWAkzZvt9kPqNtJi0bJPOKVXp3qCxoZhjDwz7fk=\",\"LhwpLga3+KbkNE8QVAZ1pjyknkUvaVZfz7zUO6wPOvQ=\",\"BvvO1SV2qRPmzcXFyW/cj59Okx+pC+60bZs8LXdeHjY=\",\"LOxn5iMgvGoMoyUY7IHHQ2OkttJZvSdaY0JdbO3kaNg=\",\"J24mI4KJSeai/ckX4u1F3ODuUDza/8mt2BX20dPE+dU=\",\"DHW6YPjg9q+hJudXA7g9mQgRYUe4sttF7yTzFWuPGFU=\",\"CF44CQXrLLfnU9CrD/SRiyMsc0QYtr/hMx3kkvx2shw=\"]],[[\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"ETrYtGw+7CDJlltaey6KUVKYcdBAG03m9j3p5SEWI+I=\",\"H8UKFtvfocO5kDj0f4GhxdHvbnsiHUzMpughIgEw4AA=\",\"EhSp1tcoj+hWUajLgwSMdmnIO17YLKJkL/8B6FKkS0o=\",\"DUIafCWvVTh4j0lHWDZxKvXaFW+IxYZ1aM2VjjBQJsw=\",\"Lei6g9K2q2pxH7kjCt7hy6Rt6MkwyG0masuMHLloTiQ=\",\"Dqe+gvHLSTsbvYOrfKKFvwoVWeoFw/WYJ7OwE9CpH7I=\",\"Hjrn5XddNSZR1xPr386/nKjpBc+3kr94dCOUUPkUyMU=\",\"BZQ+NhijLPBQAYpOI3X00Ce4wUrIKg3lfLuQxRIqZLQ=\",\"BgN1UYD2bpghXWHlNGsRbMAM/QWCdNfZabOvleeLszU=\",\"GYF9tm/bghXs9wR2xARMP0HXisWlScaE41hFlH3KCxE=\",\"Bzll96m6jLM6lV1C2lX9fDej8CJrAp023LP76pXWQvM=\",\"CaVQQxQwhGtmlBJbVkKwBgfzahopSFNho89Cfad+zNA=\",\"Bo606dbgpYi2GmrVAfOA2g8AkGdmbAhT0VbjPVnENRU=\",\"Il4AoNpaf3SWtw0JI6fPf/Myv/BpWMwPP61DmHT2Ak0=\"],[\"Gakqxgh6uJmC/lZQ5eeZ+RAD/YtFQAdI0sJeQPBMV40=\",\"B5MM1SVvird6uSsIu7WxlaRKI4LGbidRRhnvuU5kkRA=\",\"LY09kk8olxmeOOr7x+EB0X1+VjSIqfMZgGB5auhMGwg=\",\"HA3iv+r84WTJg4BnqN9jQPnZft8BIjMxWbcU9Fw/E7E=\",\"IOSigwPdVeXO4zLzDuuvvXky57NTHZQkVMNEuLjBfN4=\",\"G7Fe5NSSqOLPGxDbG3OMZ4AGbqg0er5TY1enI/bPV74=\",\"LM8xpXJBK7fZz6Y3cHhTIX59tVULHMMKiUzfSDo7Y+M=\",\"AdSSw0skW8EpQbsWPFEYv8+FvE80QEKyAx7YZiofb/o=\",\"HJtcLAf8z9ncazq/4FZ1/Jl+t7jL2Ni0y35nFhWw7M4=\",\"AkOTC6Ad/TlF8qoC1YiSK0fBvvL/gCOoSbTKZqG/6Ys=\",\"CPMo5eZsC4ebNsIz9Zi9hXjRji2p8BnwQRcxUk9C2Qs=\",\"KEovCD7jKmZjCByABxPg8jleNI3OzIn8gap1pdsroSs=\",\"GXcug4FvwsSblkJ8atBXM0f6SaXfaRJSWSrrw5AFWjU=\",\"LcWQADnUyFI6w3mUXLm1ilTgHbrNZ/DEuu6F01PT/pc=\",\"DMN4tE5Y9mi0WDL9q0pJNycx7yQVw39Atd7VWUrvPMo=\"],[\"MCYI11DxZJHfWihfX39qXOa1VPXazwtp1FCyS7tJZ9c=\",\"KPgUS9rhuQTq1ws7cseUMDfea0hJDv0xd3g1lO3Si58=\",\"Kqmq5izbhSSQxlD/nifJsz1M1AIMpm9eGms3TmYpNbw=\",\"HjlNgAZ/DhC6qV3g2ZtOOSBKGHJ9FAG0duyXa18XOoI=\",\"IL0CjJWNV7eeNSGP405Gnr2qjo5xTpGNWBkfZQRrlyo=\",\"J/ohIEMTecvYYgX/EU803S284T4cKgqORqHcJ+e2hv0=\",\"BWRlG8EXkXDjyXr7xPSTYXAXtDshPu7Ya5sb/+Uh/oY=\",\"BzM8vQ/xPIreH+vnKJLZrUNce0UapyqMBacII5WIKGU=\",\"KQp65zL0dU4MuRkjySSJcZMmB74ugpFj8RYS/4qVWxA=\",\"HrUg/qxi5FRfT+fNtnXjZHS4sf0Z4V18c6Kx37sj/tc=\",\"JZoqHwRoRHJM+ZKu3CY19mgPVeig/axpXs0F+8LLvRk=\",\"CPeObcWc1GlMQau8oIZWmpCDyozIAL2RNOTUjtnYncM=\",\"LY7Gra06ZGhDyIzaAShfjzLSnGsQJctUIUIr+L26f84=\",\"G3KsQ3TpW3t9KM0pCVB/MAboNS1K8Z5HsLkJaCoDIA4=\",\"DX2Cc94je6LU1egFHFvV4xLSmLZyb/vTr35zKvkd/yc=\"],[\"Gjx9qmtK9WYtDYQHsodnTYPq5bdWNAX0je9JmByYxCQ=\",\"JHT1Q9Hy8zte8/uxkGURNaWTkMijZh+uLfHT8UQytgg=\",\"GEimDvyJllBzuVdz9GdmZofjjVm+II6Dd9MZA5IQV+Q=\",\"LKLYsKeT2Q7TGM219pcZMTcVW8+5Qtgr71WL5fqzWb0=\",\"Bu2YoYW7I1jzNOsleuXjGDWZwFTBtOICJWm4No2hq8g=\",\"GrUnYUo3wv+wDA+tNgq6pEesEGP7n8ZW0BSM3OLXw3I=\",\"C8dpzXs0/NG0VKv/DAC4m1QKYZuHyVREZ5w6xr6E1FA=\",\"Ka1SNv+7WYovjSOHA2CNt6SXp0U++dV5+/Bb44+PdvE=\",\"FDTs4gnUkSgMWuBdfibPktmbtyiaXBysCaOM5TtuA98=\",\"JV373zBVNBOh+PURPWDphYODjRPhHB7gKyWjh+oAzM8=\",\"Bn2SlLQHKxLDaMKBalO7Frfn4qeZeaQW8tAq+GKr7fs=\",\"KTyooGxfF52TgGXqR/gPZf8hlpqUKeQAqhd+z2tq6FM=\",\"JVuWJY3I4WRPG8rs7nc2MvJabqgDzTKh4B+CVzd19vw=\",\"HyqNyv55/Q6iK7FWPDsosjxcTXWR1F4GdEs7N51CZhg=\",\"IuvgoxXge+SwkoiF9SRJsBGzln5RnkOMQkzAQow1cm8=\"],[\"LbHJhVrCmsxnk2fb9w8I2YiUB33yQR+R72jdkBd8Hps=\",\"IXFahHQsAtBXrEH3Q7Fm2gIyKEJWgZUO36/4WBIBoJc=\",\"DIk4CBA1SdIDDL/gAE6mZV4k7nGh+MHwctXPbheuJJk=\",\"KEJ6sAemjHqxI3HxO9fboKz36X6m5krlLVIZIQ/oorA=\",\"BR3rSyNIkOMfWsjmmh5TJFN3Suk6npNg/gCe03eunDY=\",\"FwzuKYP6PT7O8vgG9A7tjY4TXO/wdvxTC7/uh2yefx4=\",\"JEtrY/gEGll19GQLGMfQZ+SgYn8YdR3JBgFriJPDUSM=\",\"LnKxsRTf7n6NfwFhJVxolfp4YHDOYtgGxFoi19mKCjA=\",\"Io5zmbDgWAKFK91dXgmWbwPEw6/1PGg+svaeD8whwLs=\",\"GEURMlgbmt+ZbGyuFbktLkwJ/cfWwntEJvMrXmagtyM=\",\"Dh1+wqVLEbNuZddVHpqHWojMx6bARw58JuGZZwoIWbI=\",\"Apto5lLerIGIJNoMKhG0CNeoOaLoV2xVv6XxM1/8W5M=\",\"GG4TYAQRk+EvOAmbDjXnZ6/8NBD2qN/Om8dVZ+ObxAI=\",\"GSlN0i2mc0cDd9Zx+r30LOzTfsvAGDhqQ4cG1hBrBKg=\",\"Au088CFPRE1DZlXgOviu4rTZaWHuoG6BM71ujT44I08=\"],[\"DwbuR1WPGC2BC7yyFKJdp/cKVnoEZLNI4bMOyn3pnSc=\",\"HvDgwfC19nZExIb+zwIjjLf0+mOggqPAMNrdzmWkuCo=\",\"CtgHGMbp0cZ7Sje54QPbMvIl/kKpumVf8GVhi4e4Kuo=\",\"LP/DeNLOx2unCAs3/GcaljKLzfxGMPzC8hM9zynHDdE=\",\"IfH2pjBHHjKouaxLftSwTFa5anHuIKZqVFjGuNXG00Y=\",\"KIhRdw8aE4IiUdqRyE4SNZP64cnLzmxP8jF+cLtlggk=\",\"L/TuEQ7hvmLicV3NEZyVuVQTN26I7D3cPwb8nbjCepQ=\",\"KtNpqEtX90VboxBkABynd50rS5awtKkfFWq+w2aqt4Y=\",\"JPD6FU/MbWRZ1sVvcR8l441X6QvnuARsngAYFe20FAQ=\",\"ByIcrTnZtfjbcFqHIwOLkra6+HKEExc16vvs1TPdptE=\",\"Fzs7NJ7oiNk0runBToic19eF0ePk8etypcLlbEj9VMk=\",\"Cbw+QL/l9hb71SDziUoP3Tf+spQp/TpQFZUxcd46cPk=\",\"Kcsx4a/vTyUleKq9dvI6EyCqyQ1KCmbCIl49lMxI0i8=\",\"GTK8a7SItzbg1L8wbUHmIuZsHWhapFmBUwVLQPdcCwA=\",\"DLb6Cl4RuRkqUZBJOdRaBa+AVb3qPzefqsKdEwmDDoU=\"],[\"IWbXjZSNr6ljOBzxVg0AvzoKHCiKdDNEyGQ6WNr4y7M=\",\"J46NrIxWsooj26TZD7qR65R/UJLUp6nseAL2F3hIjoc=\",\"Ag2HR28SQ/SQJG+Ic27l/W0zGR8FYScUh+lpP8/Xpkk=\",\"z8qh19OC4f4fy5UOFN8gKgh5PXGFJVsCXVYuuNl1RA==\",\"DDnb325tJKkaCkX5IsiUviUrqhJ9msdpCfhtwLzGimY=\",\"F5U4TpG6+lVN7fUVbNeZ4RIQ/9Kv6Be1xjrVuF5/3QY=\",\"JmbsGmfap76wV6oObooQOWYBohiENyNpwBK0mq+EkEk=\",\"FXk/McrqOd4xXcW/WjZirV2OGhL6GnKA8u+q2vqXrfQ=\",\"GIAL2heomDL+pU8mdB2Gxrb7nhWwLnvQZVM8tWYdKpU=\",\"FW9qCeaoHY7s9NvyFka7loskBnhs0d7dTMcyt1Mvf+A=\",\"KXdlihDebnkhq540vPB7vKYaclSa5X0MFWkb0UPU0t4=\",\"KEGBCT5DQZeJJjc25USBcRH9y1WaQ3c/BRhmCKzFQuQ=\",\"IA+iDtG4cTE5AMAfi2l3YNAw2MwBUP3FjgSg2KKzRLE=\",\"CNHWi4Q3vJgKp8Wdgzk7FioIJ950Bw0tNLTq7cF+fmA=\",\"A5WYoUQ8AJZ4YCuN00dPJ22l1iQlCD7GKKFzfozKPnw=\"],[\"KSm+m/4/k800/OrmZdlrHeGvsmvK7qL07cRUxQy8RAE=\",\"D68zhD5nM0N+mJleb3v6b+76c9dBDYWFkYw0fzz+kqU=\",\"E0uGZC/yAjiPT+NzVspPDsOAVWa31NQS2JN6NZ75tAE=\",\"HYckxeZB2W9uNydxsKd2u3Qv08COGuJQQyJGzTvQG94=\",\"MFYUqs39QWfNG/3Y/N7OaJLYTUpl6G5vfGNJ+3Xki5Y=\",\"LNomRzz9zRhbooz9qhXn3iNZZGoCh+votg1wLfAJAQw=\",\"KwZmlx/ZEVKecO+RjQGfRLXJ13RCttGGb252gy1HiEc=\",\"BWxV31Q6jUBDoS9AnNLEvPQ6dw8+OMP8ea0hS0Lag0w=\",\"FrEfJFAqpMw7DCVioYokq4+YZDGyRANNP8KVVUArX0o=\",\"GOoO3pAQx78PrDYbW45/l8de2ToTp61KAX2SDAPJhoY=\",\"A5YJdzPeWh+kpUh0m3P/fEJvmNnlrRaSBhTTN4l/ax8=\",\"C51aOpV+7yUa6cJuU0I/m+by78JLsYdWiTqdgOVqCCU=\",\"GmOlidFxCqcFE2y1IMLxxE13jkkMIS1LcunxU45VVc8=\",\"HANDgWuM7LpIUZtZsPttSputMJ7jgxHcPoz+i611378=\",\"GvVuZXUSP5nF16t7g3cPD9YPufQDjClCZEBp48JDeT0=\"],[\"EHbUOcZ5l8N8bB/amjfcL3Yt1XeUbzb8/czXiY7GfNQ=\",\"K6Q31q5sWIxrcVBsi1CDR+Y0tlzuMXrx+7nMKpl/wAY=\",\"LASHi0y4FW6Zg9EVdO2Z3HVi0/uxh4JXq7xohS/dJoA=\",\"D+6PlzE5eXQQCDRknuh6J6ySvno4EDA0YBQar7VCpCk=\",\"DvmuZeuSJgXUJgqyAh37tHdM1f+u3Bt53GgSCL5vhcU=\",\"J6tLQJAUZe9ZAHEU7PH7+rYVfCT0AiRrhqYDlyZzCPM=\",\"K7W/A875M+Tuh/UR3jmFz/AyOre3GNTLyj9Cmt2/MFI=\",\"HuEOKMYS2dbucvEnSFDD6Cm+XAb1uykygBUqVhDrAeM=\",\"AgqdV1/qiRMCsQZDmrA6ipUdiy7ytWKZGUbrJUHx+60=\",\"C3MRnJjSXrbeFCRrFAG+9IXJ3GrM7cI0lLlSajnVMiE=\",\"Kmbe/PSJwj7sUHmg7OHFNBAnpZ58WS52AYS4JtcNupw=\",\"BKqOkdww+coxj+JHGP5ZWHH3iX6S1X8th9SxvPmmNeE=\",\"EzNps7zHPueT6Gk2DNUNjfYP45jtnZwNDQPmafeW6H8=\",\"BwnquWzGJV8q6ReRTyUIUCVJDEIyhJFuI7YIY4zM4pw=\",\"Do2cBwfcW/gKLwjDQ8acxlne+GYwrzFBoAOss9PpDAg=\"],[\"GFya0NqHz4JGJNAr7DukZlgioPazsl3v86/MaHzhMh0=\",\"JKbBkZ+Uq6nbmKWvOP6qU5HNp5+d6/rxGGcNeSfkHbA=\",\"F4OkUhWAWt6dNZIyEgsYPbVLQ/mn6PuNzZW6m7q7ulk=\",\"EW8jmr6CBze14egrKs46Rc76xImmv/CE4yMDb1QncQg=\",\"GtzLiY5f4YtcKaRwjEsRK1bQ+l0pm17cB9b1vABCi4s=\",\"JxIngd97sF9q6eFOjpnaXCPcd8wGEIwOuwYeXRvpNiY=\",\"LjenRA51tkmgeZz/63+drjj638fKtsVYXkqE9DdynQI=\",\"KfNW3Ow7eVI8BYmnBG7wdYSGgoshIUbD9c6YevP9cZ4=\",\"D5wF9gmtFN6+r/EHuVrM1g5iZiJZkFEFq/r6no4I6uo=\",\"HGaChVLKwUQzNO1wt/1/tSX5B6tkR50ReGTJLpEZhsY=\",\"EPQzaMBWf0Bapqr882fj5ovv+VfEsMuhfDDGKz+VSQw=\",\"JToRxmRjptyv2Dmfyli6J/67wwfYgzxmbg2N8HLF9p8=\",\"HplRbCQNQryqrZxz8hpGGT24QzNJIDA17qMDmPnfeJM=\",\"DGegazPPc4grHHFS1FhbeCI9hcd83cLH01lIJMUBZWU=\",\"H23Y6F01l7ttN7R6HwYxIgFMiIJQs4z46C4+VHHvhKk=\"],[\"JwKxvjnpEET7c5JsEQRxn0wDeqQVGCPOqyTwzsSfRkg=\",\"BNgOfvfieisTl2eKxCq8xuJmLIgFA+RkP9+6zmcnO5I=\",\"D8ljAuhmLeI8xcjCKKyKwtzb/EiKWfTdQePycJX34ZU=\",\"KjHK25GNeLltzVSLOUQlpC4qp6KKa2PlCSYb+ub6JbM=\",\"GKJmHAOrmw2PfQEJHH5WPvwDMZZ0fjQTnT9cx6wAHpo=\",\"JoEqzQPbNBLK1Luhrvcb1EsAlNMYrOA2bHnnKf8OsuY=\",\"A3Hw1JNG3y2IufGtqKyZ3YElz6bDDzc4+5kyqFMmjg==\",\"J86pxD/gvxzp5TwMAm6DnYCn2GkTZgMQLN32PN8ouXU=\",\"CV8dtDyCfm8LnNT+kp57jHjJP9AuyeDxCZL+t1O0ygc=\",\"EKZiaN2aLzaOlVB+/CCF7u7ozpd8oe/1suPZS8NC/1g=\",\"JaKkPuYSZj29YYFPLesG7QBadBT5mCX4vmb1Qvlaey8=\",\"Dk/UmHeMLHagLQ2R2PiYJYVucG9Zgzff6788ozOXlo8=\",\"E9hMp/NYqv+x7o666Bwy4BrcAekNCclFGvNuMa+CFw4=\",\"B0DB6bjtFun64gQ2nFVM+3IAfcz9JTDy401UQAOuWZQ=\",\"DMj5C6to5t6EhF2hiZv8UkQL3duUCyCDAa6UqVd3y3I=\"],[\"CvcaUc1GO5+u2pOAPNwDGGx3gYRSUv304BVXCdk903U=\",\"F/ajrtsABamwoljjG45uKkjz+VUc72gSpJB1rruHhfU=\",\"JLIuXOZxznnf+N4W180r1jddfsqgFuz1nP6yRtrIByA=\",\"JAyvbXqy97arPRXvzzB09bIUKh6ATyUBLZiEVICeCWw=\",\"D4rux0FE0Ao8o4v/ELsPOo2/9K9hl4R9uHl0WutXteo=\",\"IT0p1OG2wB/A0QnqYWlJAHbRMdjgNLMED3vZw8Nz6hc=\",\"DQMntZMELeBPWOD/kzhtFgjTOoaHLB0+fgiRIKrHpP8=\",\"C9wHix7dnLH9LCoBqXvffUWGSEOfrB8oUJtBotyed0A=\",\"JrwA2c0lEkRCgy2Xq9kIZtP6ekAb84vZX6etUmVI/qI=\",\"HxSqtaWa1FLPaSsSPGWHPdgP/BiHmKRXDsp5Kz8vJX4=\",\"GC8ck8brKYZ7FVnFggemrq9Atm6q9XnKa9fKQKrrer0=\",\"Em7IwgAmLEXREzv52l8eX9YrzqHkk6CArxvSg6uG8SI=\",\"BaeEZKS2u8pultg5gnv926qdkkhArvZVXeZD3xZ9TKo=\",\"AqhMQk61j5w4tDgK844EWEaJgJiPqh8NTG5yOEVnhSM=\",\"DA3PKxNVLsVclxZr40fKL5OwfioQFkCW01P6KAx5aCE=\"],[\"KGZ/nHMyBz4pPIC5jt/64Br09ntMUqtF5J24sw8YLSg=\",\"HmICkSlJLIvfhRSUWVBoE2FZGp9e7cJEnl8inIW7l9s=\",\"BSwz/OCNSjn9gFFWyK/7hDSUKLpJIM/S55At3PmwVX8=\",\"IiTIXwwLQJMBTbHoF9H/FpGPFeDNIxuEikjPgzJMQUQ=\",\"H1NRSpfotXIE5XvWsbHZVV87UDaBVBVOZ8ITT9MVFZE=\",\"ITL3GsiYksmEoKc2U/LUUiKto0GBqebbzqDWOWH5NPM=\",\"BNvEyN5wjlmqSyEW5TlEvsl+1CMJtKGEVh2PMtKR+cE=\",\"JWWhemvFboewtjZkMZuKR79mLB9J4uySUb5P3zPZD08=\",\"Fz6AWWdWzZruBL1t2dwV5Ljrv+/jdx2YGb1NREcm950=\",\"AdNGVbV3biRwFiGstBMkystQFl4Bm/8eZfmDBPfYIqY=\",\"BC7qYW2QUCUUekgutDajt1U1yYabdtbNrOEY4VyR+3c=\",\"DPAwsQobQpHlduurs5xYP+oPpt7PqYz/epbcBst32lE=\",\"Jg7xOsfoD9LbPenrlC7e7z9eJS1MBFCLHhsTAZGtDfY=\",\"C8Nn/ZPOrLWZxhSqKAaHg6XSfuwfyPoXZQFbdt2C9c8=\",\"HxJhF6lJ3/kA+l0RGgziZhvZ1URFd8SRqZUc+1gZLQ==\"],[\"J2PDP1ste8OiMECvvNr5mLsTJUwnKl+GNaEmBqWcLlw=\",\"FrrndIZ2VuZPyV88JJ+AHxUP1+4o0ZW62erkN0OHUng=\",\"8NR1IlyZcCu6T9ASdhArXKv/e9TRR8Djze5MB6wxsQ==\",\"OaKIlRoDgeOq9ZjvEyhTtdaUcWwg24eSPwvPFMkUqA==\",\"J7zWOcR0gtLci20T2hn7jWPz1sh19v6khtpv8u4R4Qc=\",\"EhOVAjkx9rs+8otgY+t6LteDngg/25LB5Vk8g+3/X1M=\",\"KQ7ZrnR5+b4TrxP5i/iFB+b98BhxDkhZ/S5IzGb/myQ=\",\"FbCFtetnj4zt8hv7MOLWSuHL3XRyRJ7STmA0EBxliGg=\",\"EqZD9KMnrNJFRRTdRpVR42qw4/JOzDsop23B84IU/jg=\",\"FqHu276nnFQRpjnjvw6Q9uP3QPFBWZr45qQ6IGlXL5U=\",\"Bc5/WS3KIUjhmFVP1k24xHnynSPx8W2vPLiTDZRW5MU=\",\"EQKY/n8rz9rAvNw6/+60Ntezo3dFOud4+r03qayymac=\",\"FIKfCdS+675vwwVFBHJD+z2rmcYqq3Nkp6W0J0V6AsA=\",\"Ani1hQPguQFBBPjERr7Uxt5XXHLU3Z2z0YZoRpeaq5s=\",\"E49n+9nLke9SBtSMq7JprEK9NSzzceQzEbzK2JrMUJ4=\"],[\"D4Go2OCHWOijKqgpJmbEy2uj9fBsTc9PxQL/l/A6haY=\",\"EPAXJ5m+I6j8PxVq37bFErpBXjUWe1Y797GG/RKkHlc=\",\"EYPpG3q3Ny8VfUxHdpHur/yeiGP7LYBlcMZ/SxhY/FQ=\",\"F2INQ4SZ9sCma7V3rdTK3WatOeM3fTAr+D07uhJrKso=\",\"Dp6DcxFK0lr5fSjicvxC2EkDc8q1ghk7h0oQQo7mzSE=\",\"H2Zboz2kq52YBsr/d87TnJviVPzExdqPVwCWER+xCbU=\",\"E1qjgzm9kn3VBk5NVy31WBGyJrq1SwrK7lEdYK7bAvo=\",\"IryWy+f4y8qBspun34SN1lmQNf9RW21IVVCELho1ocI=\",\"EeGwr39fyfBJh3FUrhc6GnLHvDuhkuQ4qdD6gf36SQA=\",\"FN5Ei+y6bKCtshsHRV0sKGTHuFOCJnAm4o8JeIItZaw=\",\"GESoHU+rV67btMRiji5H/LKSKIPqsLLh3hbySN5LuQI=\",\"Du8E8kriEO4KlLxWIVdHg+SdTZM2Wis90Gn6/UMFVFI=\",\"EyhGfIe6cwKJIaiTM7q5f4sk/Kpy9Dg3y8/l37epRf4=\",\"B5HYMul2tmvar/RQcx/zXZmFlauXSPaVu0XSwP7waTA=\",\"EUkrpAZDXzViOQb/Rd8Rw577Wf/wn1AfuJPXF+NPnWE=\"]],[[\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"ER0EwIP1Gm/fh0EqU39mAQdtYfQ1CU6haUbvv6SJPpc=\",\"ATPFkT8l/16qhg0DGPaktDSf0i8tU1MOXHhbcJiKOog=\",\"CIdfR9b1GMjC31Gnhr8iB6reKEBnIo9EDn0DB1IKVs8=\",\"C6n0ShB6gcsj+6ZvK8NBUnKPX1ymhAZkmn7+R8lHPyE=\",\"BUKDKrI7bHpLVHoQZgNxUqJELpmMU4G6l2mEExU7pvE=\",\"C6H3ZDZzYJUpQsy27fBRyPk3kGqBZkHg0eni7SaQb6g=\",\"LgYR+kyjmF17+vUS8hpAgRQfTtDcSwIoNNPLbP2Lf/w=\",\"Dm8jwO9vFZ3saDQah4MPuGS2wIy5VKFKJQCHZpeJf7c=\",\"AaeipKCNh+dfcgMCvq18ohyPfC7S3rrO2bixstpGHLw=\",\"HYAF30jIVlmH27RCtILK5b/BDuSG7MW2cM6GE0WXnR0=\",\"KBIiVII/iSast+mPVX55YoLl4ScWGIWOdtSdCIbaFvM=\",\"JBTUrvx7SFffaBMo5opYLSOy3P/Veajmru1sYQUOBc0=\",\"L3EMctbaGcfYfL/9VWZbRysCZdE+IyapozuW6V03RrY=\",\"LihUQdC+2Qu0HWSAg2hQ5NdtqCEbBKI228fDwwMgwA4=\",\"KWSQGitC6a6hplk2Yq654SB3oodDS9pOwgEuNqGdyVw=\"],[\"BpsXed7D6t7T8H0MPmzs1s/+eNdH+u2tnJBmWqLZLLM=\",\"GHquJh7z7iGzcCNRigcWdcbQC96CvX9UQUSKu2Mqdks=\",\"FpU4CU1PdSUpRx4/3cnvmUz61PltzH1jbw/VCbjrnDE=\",\"CmiDDxnApymy+Jvic3PTl64RV79QfneZ1CIBZuoJgtc=\",\"AYrjkIbuu5jR/F8F+g+H3csUmwr+ONG7uFplaXiV5j8=\",\"BMXrx3E0TMBhJ2VxC/yxwuYJerw9NG8ElJX317fwbLE=\",\"Kfqn2tyLfpWI1KYB53vYCq3ycqG/7DxEPKPMrIHZ4eE=\",\"Ks80kwErvYGHJOfO2iQx6XyJM7+utddGO1Eubo6Pf8w=\",\"I7NGEufQUvazEsoODPcANK0jLZv2PIiCEIU4O29uxKM=\",\"EWgMxugLDkMKTNNgcBf6gzHYbE0DqW38GHZ8l8vgoZc=\",\"H6dy695vNzJERiPWf+mREWKY+PMKLRAQyK5hMqPWkH8=\",\"LmPxdAMy9X6DF/JZLr2NsIEnFNZgQTLVJeM+GbPJhJQ=\",\"EgLjSdHXuAWEbpCDTvyRHraxDCoJ6uqintKIvXebFPE=\",\"Fo/cMtSqjckDStSk+v7onw7VyYDT20JNOPjOXNBMI3w=\",\"C5rp9e5q1wplG0tm409SGxMNGMSUZNhv5dSxggSJAo8=\",\"BsIZSvcvrFjKE6Kl4yIxBO9JpUD9Lq6g1nqSDYVnBAo=\"],[\"H6Tv/INJjRmqpZi3dx+IoFVN3dqJ0y3Pim9M93bRO5k=\",\"DaKO3n9j91WWolaLLdelhFduWygvKEeVsaeqIWY4IrE=\",\"GZg12pX26yLFkevlFMfyg/Z0/Poet4ff7leBpk8IJDk=\",\"KvVgYAs+JavMf3ik1uLNP9mby6B1q4K1XphBvve5IQ0=\",\"EBVE0TFFTyC1SbJKZeyE8bMiH9m0NGHdxtFWgzs0xSo=\",\"GlF0DNpeRepNS9e/XOVGamahGvtbyTzxDVMJ4H1BDk4=\",\"EyRVi4pdS6YbF3kBKL6fJEDACF3V1gZbiPCjslN72t0=\",\"E0cwJLpBn8KndD59+PyDdaqxUNN1OlQlCoCNZvLQa5E=\",\"E/FbxkU99vk4NEZVBTTcV67bEBOeMFPoO6/dmTVhdfA=\",\"ExS1T4eGCWJEUyyfBUs3ljbitYv9zrPUjfsiELUptOU=\",\"BWqOzSMqZ0xj17YD74zQYyHFYN8v0/bCZJr1dkZ/15g=\",\"mLdAl2wqEDHnUTLgUL84OLc50GFYJUPBx/lcFS7iYg==\",\"AkuW2+v6ttI/oywsjndYyyQLrNgUMyPFPNtI3Itl+OQ=\",\"FbvVYZ8NWXkIBPK5s34Gn8kJonltH3fQxiYJ3totAng=\",\"BHYAVL1dBxMlSL7XZX8XxhwDjrzf3UAlx7gC4IlI4Qg=\",\"ClSUybz6Bqpyw2/SLZj+ctwU3A5OdOA9F1XzisNAUK0=\"],[\"AWdvXAdBerVMN+yK4agxS97rCZZHaYgVkgQ9/8smv0E=\",\"IEO/5S0pZOSjstpeMBB3Fsx2T5sci6Rj8hWrH38DSYs=\",\"Db2GYlEd1wAJkbOdoSn50DtWWgzS8hjW6ru0miXxBeU=\",\"EbM6nxgY7X9YHKwCAFHeJv4o3AvYyxpEV9WoRHvb1vw=\",\"Am8vWNY8pu9Zu5UgbOPtMSSIXsIXYrux2x1qd3HsZlA=\",\"LrbtVoN3tpatPLI3Bk7GjjkMJIhuHxItIdfPMpDcbQg=\",\"GPqvHJHgAvfbvRL0CL1cW5LzjgLONjWCSCHgNH+vU+w=\",\"KUN68bFPY3ofDjmVXyYEvyBDn8sqCQ40aqZanr5peI4=\",\"Dt+GvxsVmf4nxm80lIYtdd93ZAcKgmPPiHePcoeTjY4=\",\"EzayCOANjrrIMkapbr3eNRBj+j9jWIfnU6DOPinH7t0=\",\"JkY0HrRLSADVYITLSFAPrEj8UziR9VfpZ4TMYATYkos=\",\"BvU8ef7Z4JhI4RKgdC2K6EoEvZulqidlseXt+xYCFA8=\",\"KjyfVa+s7nNaG1FVJkJjhK0EQpH3aRl02cBcY0tDlH4=\",\"HhbpyiUC1pYCO840JyRK1lU86Gu8TDSaNLphBnxrbWo=\",\"AqTG0yWXecOW74Fzrl/oe9YR2+JdHASK2pYwbbHjpA0=\",\"JlyiERgLASw3jgGY8LX3dYwVXjZ1+t+SynkVa9Vv4zk=\"],[\"H057vI1Cd55Yqge/VP8yS4FP5oe0yOuBubfnREjuJ/8=\",\"J7SKY2o5tRqTiuo+tVIJFVn7++ceCW1RjEDZCN0lcO4=\",\"DdDBGPFa4H5dtVB336RuCBCZVNmeGNcs0sr2E5IOOQs=\",\"BFxhf2BMGsn7jXbo04AyLlo7afp7fCriyOxZZtakx4g=\",\"Jbl0/FEp2CrkxiRuNfgC4DRA6tCZlYZTE8jKkcggwtE=\",\"GBWJsUDJEJ5JL8PsfYyo48JafOWN8G8T70NWHVjFkm4=\",\"DuEoiymFXi443SYpKzniYFKYQTRFONZJmZajLnzFI/M=\",\"IG5NRFMVt2QoDMZDuUefSZRuqG1zBLaixpKsNNfJjTQ=\",\"FkFkjCa1otwpfaqm1N22ovJYunOPkJTnxc2m76jJk7E=\",\"GIe+h/ejUkEEgu873PfvF5duCH64mQx21+lxxEwEgjk=\",\"Ix8smL2o1Iu0ptnJi7vBYCcjWiKh7U+IvI06blgiCfI=\",\"H86okobcHbYf4REWBq85bpjLU9q1GZdQql5dEVYfsUU=\",\"D3v8+rF9s0wUTO5EY2verfq0Smv0/I7zhOyJpK6e0gk=\",\"Ad0KVQJ0OqqfWDvQrTXeE62NX8mPGWHyYSrUwo/Z+fo=\",\"GVnbAfXIuwz0g0kDc+dbBFG4e0PlkYG+C2AWZ08/Xvs=\",\"IfZZ/tr2wmF/F9Y3zW9UoneC9OhDH4evXIWRkyzn2rc=\"],[\"D2sYyY/In7+pmgTIyWrl2zXClkefSEtoDfkF1MvR36k=\",\"F/51o9EbS50qz3hW1t6ju6xireDFATR7FoZPPHPrt/k=\",\"B8khv0XjVISKYLDl8pK7A8JGlJi5weTTIvSv0YZ0CMk=\",\"DmGX/lAjKNDvf5uTA1UxKzRyBLh35/hdm1adw08GTBo=\",\"LUCb94vW9qTspzl9BlAj8LtnMiB5JdPOS+759iHaK6I=\",\"IFptWqstIktmjHD8tBWC7p6+H/CZKStLxQr4spLA6kI=\",\"I4CrBR0KxYCn0Rb0qTN+sxCQpMfsvU5jjncXt6Ur8QY=\",\"E4LDwkvySJ/p79gKFj5lARH12YheWKntcp3KH5p05Z8=\",\"KAxFIq0P/ZLDkelMcPhxILg0GJDDMprwUGJfK+UvOkE=\",\"H0BalIMxHhSXVo8b3NbVjNa8gTmCoOcVYbYgADuIggQ=\",\"HK/Ptikm+8BIV7C9fXOSuNit0WtcvvtUtNUxKCbomUI=\",\"ChLhYmIOcb7rIDvlZZRBawg+fpTuwj4PRKX/6eFZUIs=\",\"FyA8TS4aQooXviwn0cTFlg38aqNvIr3ei+VqDNROcas=\",\"DtLPrns29HCn0faUD5FOjs0yK/1rUPmtn2oiJuepXbQ=\",\"GEnNCRDXLqzDLYkbcfr1ALy5PhzvJQSvRDuU+LHOchI=\",\"HkY64/TDvQR6oQSfTwkaLx1dNVDj1YAfz/aPml5oKPQ=\"],[\"5s0QiD4eEcbBkdNjKfMOsARa8GwthtDEOfXB9P71Sw==\",\"IybD3KeqtrGFJlT7E//0KhUsqWMhJCFsx8xvbTdSKlk=\",\"H2lNGsuqsOpbwCahhk1Wi+VVuJwPSbYTTpuJWuFB2oY=\",\"DN/gmeehVCeN+2wDiLnaoej/Mjogvmpqp6hDgzP4ecs=\",\"F/cyzBNUsftHbnBWjS3LC2aD0wsCQV39OFUEc2qobeY=\",\"KCOaiC3HsvP/e5qo3p49ga9zbU7m7ZkdXGtPpUAUj0M=\",\"FYkmuelLEPyzIbKTu4qGR2J6W9MTFYCNOXwclPZQ8s0=\",\"F80Rhk/Sxz0IZ9NyZLTKFN+TWoLypvQyxJmBNfpfSqA=\",\"HXcgmLYVSSHbjnUG5vA3LKRPIK8zhuE7z3H/XcDWGxs=\",\"IJV2vnLbewyf4rgykSXn3/BImo6QCl8UwebkhgQTQmQ=\",\"C3qx7xf/YjX3c38EQWGQLwPVlM9KDMZ7T/tHEa3h6w8=\",\"Gxu/Tp9wYFFxag4omQyvF1cwhqXYGMA4g2aWgIsS2OU=\",\"IqjudDZ0E+zPeqA/3UIMa7YlWm3YIIHWsU7ampdSMps=\",\"LHhfnYg09c9dCPEG1fmRg0D9QUq+JPCp/yuOBJK0TYM=\",\"BLXcIFe4gXCnGKEC4MqRd6/HV+4mdzoCkMa6sVnKT7k=\",\"J0EhkforLlMnoR0pDktDmkEk9IFFxh/07OhEikNz6t8=\"],[\"BCWpZB+wFVi8cXCi/8JOtqUUGYspahYpzChNmDvKh1c=\",\"CAxEKQkif0qdqS4zI3+agssMb30MQVW96lxlF7BG654=\",\"FgTeai2xIr3V2DlUChAF7UAkJbrDuF46ciJNM3QCvew=\",\"Fd7YWdUBwnM/6t3eIv82+oroWAOux6IE9CsfZVO8xlU=\",\"BA2w3v5rpHl7dKQxJc802GorM+eiLicQsPt6VWiJOqw=\",\"GrFfL95vU1535hXIwmAhk9RYYMwBWEnfV4+f75pbsoM=\",\"Jk+tzHkaoY52dRqJUkLDDNu9EZepCkVtwnjhC/C/9eU=\",\"LeJ5/Pd6JwgjqRps0ar7WOnjqzL9/ws7BcmNVU22+tM=\",\"BT7YrVUNiZL0uYFJIBg92Dm/NV6sqMx7BwIKImFKgIo=\",\"J5cCsTXRRO3pQxlSacAL9iDwWL8Bhs6f/zyziyIkWg==\",\"F5qCt38sy5SzjrWCrEq7sW30KezCJHG+c8x3ZvltmUg=\",\"CJ7+0A6dmT9fwdWvLytdR6m3Dm1aYD+6qo9lECEj79c=\",\"IeJfCn+O3DjeJbpgWobMCOCMywPnfF4Lntq+dHaLYMA=\",\"DY28P8hUwGZcMMSIRte7DrGNPXik9w/vB/JC5FuGXqo=\",\"F73zOAcohLUizjxQ70cRCRudr0ikM3S9wKgww35dzcg=\",\"Czp2nIs3FWImA5XuTzSPiLsFai8OwPmOTmM799lDYV8=\"],[\"OXp9dDSwqpQTSN5FrsRCzVytLDmIhJUOgjPFjdUDNQ==\",\"KxwA6gCJP5+RMxvJBzl9uGXDfTvGxLObgc2TFpb9eDc=\",\"JZcM4xt7EM7yISZ7sb4WVuwpFG3wb9tbT2/mYHUjqgg=\",\"LUAmv6ezehmjAKuvLh1cMtvNQiQO2GD2gfYd1tYhTO8=\",\"KeiQNJQkFKH/aDPW4idC1BBuD1830fKrgOVETlpSycc=\",\"AytiZvJAF/3hsoHQ/iBt/zC1OdXFuhO1MS5IjY1vGUs=\",\"LqAUth7VdTkiOb2UEcCmxCArczTPLg3YwwQFKOSj39o=\",\"Es7VJU4mCp23q+DL6iY5ZoD25X3AdzKnVdQJ73USALk=\",\"HU+bpP2M5O8ZO5+HD0SVYHlTjWO840T5AWrF7WOpml4=\",\"AsnDE1z2S4nrW3FNey682B/H7a5jfMYRZZHfIItrJYM=\",\"GLY2hfb+0qoZBIVjeEQhUd0foBx85hIdI+Hp7iC0JVg=\",\"KyAuHSYmxnk9aKrPnDqP/7J831oLg/+PNQT5qyakPRU=\",\"BqeN/eFFjuNBoInBX5U6IZNSff+0P1Us2tWV2nxv7MY=\",\"IvYuReUAhGlqwlEqJduZJSRM8CFLa1Q9Op+DuOjlj/o=\",\"LZN55psXggi4SWuKCgqQ1XiyHwkMUwQr5HZ+PBDTtA4=\",\"GttMh0M9hm6P5a4m0BR345YoecIMjDoXDAcnFnwG0Lg=\"],[\"HWbyCPwEQRoThcIuID3AjwusL3zZ36zN7CDTuTJSrQQ=\",\"CS8Dx+mOYcKoWUP/r5wE27AUX8IFXk1b6Qu2i5AQl0Y=\",\"FJVvgKZbAfnul+LrBw6d8nEcuLy1ON2Y5TJjbMYHgug=\",\"C8y2acsBbUmEZJRPcZLs/2cW5stfiV0nFby7tlsSiMA=\",\"Eh0rpb2PIy7PRKrPEETNarb5Px5TfX0VQXVP1J9RsiU=\",\"BONY8lmjMkT0BYoFYRCiaBa77Dx2q2pfe+k8ngyS8+s=\",\"LaJgOibU/ew1MYIEulBgZj4VoLHk2TlSWNXm7srqj7E=\",\"DvX57muhrh0SZM8aNuD+S4BDqwvd+bnDIA+2h6jqXIM=\",\"DVPWHIpSFODEcVJ0rWel1qLPufw8HnkdQd4iyLqEaKQ=\",\"JS54tIOK1QB/UYu5xqTOUBhx9xEo7uPwyXhM1ksYP78=\",\"Cieo0a9qBGCuFyTzLyGgawNmaNCoY75Q/MR/7FdjzpM=\",\"AwSKJl0O60DlpTFjOsIruCX3XO6QNuZqBhvj1NJIyGI=\",\"A/2U5Ru9poQ9MaKCUw1UJAqklhZdZE1ddzex5afWDVI=\",\"Lya8E65IUgpDnJ9Uars1oSIqMH44+vw+f/yEP2x3160=\",\"AUBX0C5evPM8Fm4Y/pBN76njQqGeiNQjNjd/HF5n7DA=\",\"H8Ju0Cfbe55yQcLHYBdmYvY0ugWpynqFDhhK5YjL4hU=\"],[\"DsHtOuO+rE3dH9sXucfGSOfsgYhaB6W8vZZ+ajZ281Y=\",\"Kg93uzYk/EgmyaKma+TsddvCFkKhb8xBgtLWXA/Y1/8=\",\"AdeZroPvZVLzDtxHuegq3AUD3Et02kC6C70syesbClM=\",\"Bd4QmcZfCKmQrA8fRewvuHLHceECddzPpPzhFGY50NU=\",\"DwkT607n08AtjOc9HOwrbLsXapISmzSilK3wZiQ/9r0=\",\"JamsLR74Sr2YkntSwk84eW6mDmOFjsW1AZbX4WnJO4Q=\",\"IKDj9OEknExq8QDf32P4vcaex4hbzQ0sLpjZj5u50QQ=\",\"BrfhjQG0f/jk7wgHjoEooGaTvmV0iUkqxBlahUcivf0=\",\"Es+HJTkT1F0ofpdfK09bkJ0WqH2JyIkFf2Zva6YTibA=\",\"KafVVOn/vuY5hnhC/Q59QeqbG8liG2VPyzmPcclbZo4=\",\"GGdWd1BY0JxjnNq7rNAb88J0QVIVb79+jz6Zn7YQ7Tg=\",\"JTLddIf8rg3Dp6xQuA7DMMb7bUz4hfETWYi/bfwBCm8=\",\"Au/lKdsd48Adb+f7inHx6qtq8WQfsfeq1PK4jNE8n+U=\",\"Cvgl98oktKKF9UR2LZ3v3JnyuFwbifxf8gedPVDm1Oo=\",\"F4GN0CVLKR0Nj08aRYxqIdiEEVNmGBK76YaxQDzycN8=\",\"EBdftvgbFkNq8waC82+6s5bt23gppQ6UbHXyfiYJh8c=\"],[\"Cz5gHjal2C4CFDYshBlHTcHMLA7YEmU01po/eQsnxgM=\",\"EIO3QtNTMqi3m4Dn3ASnL36GaS5Sm2oexWhzNLYH2nw=\",\"EkF8ABvoYZcBOytIccTpsNzrg5kZGanK+s/lRmb1kK8=\",\"LEZdm164UteTOLQnsxhNlB80BGFyqCzOROK45cQ3lHg=\",\"Cg/mbA1N4AzHdhAIcyoAl/sU1kZfnR34NeBCP7IH2Xk=\",\"L1IfJLwCKGriv4SE+7w5hDiGdV9Sv+x9PdXfeNNAch0=\",\"AvHT7tNgGPlnlxHgML265RIkte+4sesc3KiriGIS8Ps=\",\"I6p8zDdRt0DuyfNaKZhryVik28fEsS6rK+g3Zwbesg4=\",\"KwiM0woQiZurwyW7oyqjQ9Mp+ah4JGnE0l8PI3/2B/0=\",\"MFoMLCxNNZmOmROCn1YCUENj8hvXIDRzULYEGT55vD8=\",\"CL2d3RkteXoZ3R2gSb6zn6ZZZZiicDHqHCsolm2WGAw=\",\"Es7o49HKwcqEUXqz3vSHxGCuwFg0j/IgyAG3iXmvnmE=\",\"DKtQSyKjVz0JUJ+F0/vZTpRBesslOSNCus1oQAbDcYU=\",\"FgWQloQp9ID1VhHGRIkS/fQj03v0g8NqzMwayaKdKlM=\",\"HJXCkXNTxTtM2391Cg/obOEPjVvbAYAy0/eTeX18CjU=\",\"I9MANzu46/fbzzFKPAsf3s1criP357uRW822pngrV/s=\"],[\"Fjy046XskuV7JbCVo6qoz9xM5ZJncYzGCQoH4UrxCw0=\",\"BT6V+UVbxkmdRHts7dC2qtnLztl8zxAGDzye9R4o520=\",\"IXH9EflEhUZqgZ4k0KzvCLDIfXi0bZO7lGK0Q/pAzcU=\",\"I5GAdcj6CSm+/CsXH5nr6d3WaDWU75qD+E1Kz9lZLVk=\",\"CJjtHsGkNof/aroy3l+BlDRSigdSs5KDMYmbBkay8GE=\",\"HcP3pllTChOsytGBtuJlR0EI2LFGkmZVLfvDjLZ50G0=\",\"DjiLsQUkJAbjcggOmXoxOSz0/72caUFj/DZurncOQ10=\",\"InPDcOtYEMA5A2BdfMlNWpKvaqqnuETzUYnndAan6Gs=\",\"GZcv/d54mOyL5Pso5LGe+qQ8fuIMiOKQluvocuHBlHU=\",\"Bh144ZU9GUPi2WgzW3PhX+zviQdelslD05cCshTdxfo=\",\"GUGEqCXenptj7Xp70HElPvWQPh51pQU225PCYxGnIBc=\",\"IcDRh03sr5BhMYPqgnuRwbKVGDn3HzKcucmwdT/67+4=\",\"HLM60rp90MIGNENDKoR7zM53Wo2vho4MR0kFpPo21w4=\",\"K7Ms9g+NRp7bG2xWST1Mkzi0BRriUU1LYILvGLHVIoo=\",\"AklbPBv+xgdBgIFJMz/EPwTXnexWWCwpKCn/37PBo8Q=\",\"DwQX+mI3Fn50FSUmEwbBdmTcPvqSR6oNS8//OOid7e4=\"],[\"LcqQ8+WhWymJX0jXoSkNejNka4liDdCozN46o6UdQcs=\",\"BZBNrjRw1AzhJ0myfWRuYg6FGeKxfPoBbK64nZ407m4=\",\"Ium/KqAv5l48x0+z2D1OM1GGm9MFKMN4lYr0Yu/WRf8=\",\"Fdf7piusV75dl0UqPAbZ+nV/FE3xZkee5zBpZ0gKKH0=\",\"EeCyND7zcdLW0igFl08lObblENdh4NoXDQ2pAJWhMmI=\",\"K6OYRTk/zHdv04PlNdVnYhx/ZABag6b39IIivJAgkqg=\",\"JRQ2ScE+CNSwC/NNKqGo5FD4l4jid2aJYhcEcVXFvx4=\",\"KnMQ51+v6QLiAoepGr44iq6EILHqRmDdfBWcJrljLNE=\",\"H6aURwP+ABKhbuYEJSn/AryAQxPvjG2LD5EKdeb0dzk=\",\"Jh+XW6vXaSgiRzuOOflIuc+YcwqXhd45MXnUu5nazcg=\",\"Lgiyi9zEF9lkOzAICFon9KmHZ5LTkVyLnaNWem3WzoI=\",\"AX6e0ZHFZB12iw5V7A1KhfblQZ0y9WaNOX1bbLgFOH8=\",\"Cq830fU90FVuNH7HBZYjeQd81UMZjhwnWT9EVFISYfc=\",\"Kkpy6d/lvyX2/edQoYR+W0Qpi6WPtQS+V6WV5/zNxAQ=\",\"Kt7IVJ3/3nI4sr2m53MpkKkRcAyNNSiLqjnmcBWVMjE=\",\"Ho/SCoAw/dlOLENT2PgrSyEr+Ie8WWFYFIkLD5KkfZA=\"],[\"LHjuXqFtOPC+udwHM8S7GJPLM/9nG3N6ESLWT3Kc/yI=\",\"LlY7ncWj1NWpP0drRm43EBnHf9bupQYSak95J08va5s=\",\"By6i9c3Io3ifvOpBSpHnsnu/sxUd9RDQgP9O98xz8Nk=\",\"Arbxb4ErqQOQE1WVXMTduZ8k8cbiZDCUflGBGmgxG78=\",\"HVnVwQsMndNHiZN32jW35nfH057xtJFmuXSn8ryZyUY=\",\"BHMP4E4BCMmlFFpcSOYMVFfkcIUiFXv+D4KvXGZNbqI=\",\"EuwkI5uhsPyflSVQoiOlLSCdjSK4shrCSIGicZJ2vg4=\",\"IAmDmXJe4V2T/9PkgeSnuVyMUIP51pv/FxTup8fYLUk=\",\"GCN69zO8REGKyE5iP0g6a+KLjyHQM/vwmdZFuiDx/CY=\",\"Hj1s7zf5vawj0bOBpsWNDs8Gpuv1jfp6mVpEPtffaOk=\",\"KOVbC+1ZGRIW1dvh3QWyLACbB53od/1UqvVAHSyGfgI=\",\"DGyewxyeO+B0SRn8VVx3wMElknvRbeKAdxKzXKJt0EU=\",\"KmB/rNOTb90OhOm8PktLrIboECwrWtFcrlUNKLNlTnM=\",\"DFCaS/SK126QQQvqNKiRl0Fgi7u2tVA8k+cyA28HnRI=\",\"F4B0MDuQ2JheN2WEuLjft/lS+PTPhNgV+Quqo7ZExMY=\",\"GFcoJjhd/G7spNPHHRELBKuuATxUUNnklHo9AZu0G28=\"],[\"KvMk7E+ed4bc8AQ5x1opS/91PjKSu/YuZkcfpzDxnHk=\",\"FFYAg9mA0XLdQMlCbP9BRnrOpB1/SP8RrF/MCHui1bg=\",\"Jg91HHgjq65huPN0jIR5HAvYSs9+toVIcCUBeOmlLPU=\",\"D2Zzt/tL6M3qdKqngCycc/8NU6mOlKK8YGhdiQok/es=\",\"GhW34t4nEl8uanT07HzSRV8bv66xFV8a+Bm9tf5UJB0=\",\"B1oJ5B503ooqx/7ydZHnanfIUeGlEYXzHpm14I8BzHQ=\",\"B5wElE1QtHd90L6+lTYAZFzsqdZfugIPlzZRRr75xs4=\",\"AsorrHwaoMZOaEEj8P/iIXOSMFK2oB88Kb6AE3/Ylyw=\",\"E9kDWg3HmLBNzvDwjt0kFST9yg6VupysBdIHvTF+Gc8=\",\"HWZX15GDEWnFa26aIB+LeyQCRqLQ+FRDBIm5g0VAMtQ=\",\"HInY+XXwMEKCrY971BwSw7GKxrgOQGX8zaQju7P/p4Y=\",\"IIKe89+cGD+JZeScjzFcKZWmRGp2BTVD63UBRfGndAA=\",\"FKK9Wlb4cAnbmBVGUzIC86+BLS701rA38oMIU7n5A5w=\",\"GZcz2kru2NbNFIRhYX6ORt4i03IEMfwWBWGbEqf9Tio=\",\"H1/AYAKLoH0R/JR39Pr/55qBBA6poExWgmdkSJXmc38=\",\"IIt8jB/4Qi1KG9E6AqlGgc4hfZJfQNKHX3Pe8U3noiA=\"]],[[\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"Ew/FRHf9lTN3/COrvXpBvmdkiSqHh8dZwUQP4BM8hS0=\",\"LJyR9IZhdxuu72d0V4p49pw1XI6QcVb98m2znSRGQT8=\",\"HewLr6PoGQYh5eCV73UeoDyDbbuARbKnP405fPuBUZI=\",\"Cl9SrW7EqKo3fY3SrjqvbuoMaMY6HQNPvaZxM8oLhcs=\",\"IKtzlL/as0TLtvISOACg4jUI4hJb/nlatKdnzstNkwY=\",\"EQ6jIrDCZHbGe/osG50XE/k7O5z4Mgzg3NS2Qoi9oHo=\",\"BU6r5hMWgfoB+8bb8+fVNZXQ+ICZhxghQriQrIr4nL4=\",\"Ik2BH73vjsCgBtN2oBnlfJO9WWIToHgjt9Srzh/Y5iE=\",\"DmkfykIxKKfUr8qlgrGpR5m6H10qXVO8K7pWu+yyJ6E=\",\"GJ4nnJLeC6tmcH5ubjEFJOYVzUxqrMZlNyo7jjctjOY=\",\"HZvLvRe5OxkT0vec3xKEREEjcgbwKUdG2T+OW9zrRyU=\",\"EXkYRjWpeA7hMS3MPRXH7wQrGK6UCWcOKMTH8PubYI4=\",\"DkhGYYKugzOvGJGmqhlzZ0HtBoDVfJMe3hP8B66C6Is=\",\"HJ1W9xwvIsRNOowXv1tARS4FRx8Lbf6f/kcl6yn3NGQ=\",\"IjRUb16FQej3KteUiRlQsysc2JHMZndcW2NZYWQunBU=\",\"FMCdFVxdQoGYwjS1U9ozjyJ8vBKw5C8rnOcVY+4UlcA=\"],[\"FEDcJXj0RpTRjCX4ktmMI8/bh6dyIAAg6JeCPUvITTs=\",\"Bl4TTLjYREfW6h4XkyvUo0Hr7yVoMTwkWU+vnX7KIRA=\",\"LGsTPoCr74SQT6SnX5aPuqvviQKG1f0RuHoeUrfrbQ0=\",\"J8cjMvWaABNbqpS94pSRHRNdHZX1PFLrizuVWUN0kG0=\",\"CHSI9zWx/i+jxscUjElo5/NHmxQYoaVmdDwcohXc/Pw=\",\"GfDi4UGJbq5tVtGCtoe4psZMu1ngMbdJ81gi/H7jU/4=\",\"KZxH8ePsxVerHJq+NvDSug7OAQUeB/CFjpepzhb1Zk4=\",\"Gkvv4RwCMMYt5E/6/qDekDujKMbWevc2gDEraPms/9o=\",\"FAdi0wxcOgsHULFACoap4vXPwlMbcpNw862f4dzUP5Y=\",\"GAqkur+nU5dT2cIi5eM1mspZ4Gu+/Hzzo/+k+WH6HVs=\",\"FyCOqc1Nwabe6+ao0noxgatfhsanBub9AH/B62eOneY=\",\"IAB6D103eYeJ4KjvaDU22c9IMaZWbrcntBGR2fKXRxA=\",\"Ip2kQaMCkpsLrpN0G3x14RM3x5flch+dfuWSNc2ppAw=\",\"ETe1xhuWhL7EHk36p2Q4JWYipDeOpOZGooRLvIW/gcw=\",\"ETADwdx7rzXkU2+V9Oqy87rdosehxrWvyVYjSt4+cSk=\",\"G2FGj6tZySXxmGGGvLl5ZahYUjolgtQ0MZqVJa5xFY8=\",\"EX/VKHcPsX9xjimi2Rpj7Hw57x3TA58JQ/cX0YBCU9U=\"],[\"I67rDGSZuEv8Mq48Qt+XKHmP0u93TxUYuHC8V9E4WQA=\",\"DnbEA5K9X0WLwYe+VAmTEqD+//RLRBY3Ag65JnCm/PM=\",\"LOhUbLWfQg7eYWkudk4On2cVsWosgEfNgTHJdkb1DSQ=\",\"FuZGYRRNgWiFsy8/eAlwNHd4gmjVfBSx2TmiaynLfvM=\",\"Bs8NuS+GsnMu5fuIHvAXYBLcSt/YSbm+TeF4RqbOXZk=\",\"GPdUqVsK8ORwb/kCS7E1Fkq9b8Fu5AzC1oUtiKL/yfc=\",\"HMBTpqTW+W2nfl5zrbnUm8TQ7yzC9p+t5IBAt/jXE4Y=\",\"AeQGZfW7jFwNycEfOdR+nTPnF6+jG6dPkvhzelXv4TQ=\",\"CXbXw4RLyN7qDwM3+JsqExMC/9LQqHAYHKX9X7bU+2M=\",\"LFQofu42jV1S37BoKC1o5rCbdr0bXJMzs2hIrCd3RPU=\",\"Ioo0iMq7+fKe/AvOIRoJAxlys38l6jWsqEDcIzGgzzU=\",\"Frrkn167H/6Ia2NNIV3mHr9PRNHNxPhGcN+O1pMQv+I=\",\"Liadx49w+RA7K87T7b1B4VbmSRCIe03d+KPu6WD2Abc=\",\"H0uFVSuWDRwYt7j2avcwWmdz2bBfr1Hg7RpfLvL5Xn0=\",\"DV+5sOFQPyuSaXxHO2nPdtOPwSkS4sPLM5ltuwzfqjg=\",\"ARKR71FKENbwZR5K0NpdSkieMBiSeHnalC3v299wHd0=\",\"Eg50FtdDCOJAR/aCjGiuKLwoiyFuiiXosOvPc4SA45A=\"],[\"HtnT6Sdqy3tNrlProUiAb9m7B7LdBhhyEvq33L5j1yw=\",\"C5gXZeyuad1687EP+kJLiusgbMT0klcmXGdTscxU688=\",\"Ctrq8od2uBPVGPZFx5Ple/FgZ/2A65Id1aZ+iVZGycQ=\",\"IBjbOGo+Tlfq2o2RQIsVUGHfBQFA+yL5pPNPtOLQJCg=\",\"BnxEEXRdtsaqZZ7HN6WGqPShzeA1LjCqAGN5SGX8HAQ=\",\"GT/g6bSAEPoxnDO4a2sY9CjzI/ojfKkYo4+qqRuklWc=\",\"CVWOzFi+5PPFePYkid2QCECpiJCWwKYhFKotsEWh0DM=\",\"I8Sr/rgxkjYqriGy6e5c/HZb8QAPeYw65wEzVWq8eL0=\",\"AVJgQgHKffBZlOnV8FjztnSc6mOqDLW04cOgC2ZnlY4=\",\"L2U2GkrtMg/NA6RcRN2nQCE1cfOXXOILlr/9lgy8biU=\",\"IhIsYxP8mkxtD5RNPOI4JyvzUUext4iqsrjbzrYCTHY=\",\"IpqltUemN4DY0SniCf25L4VmJhbVnakIB15mj9gXgi0=\",\"Iakf7YvtFJFMT9SRtvpNy657O4s9RWMDr4hsMoq/Rpk=\",\"C6ilSRSIb64WcAwC7993Z0E6C+xaGe0M8KfYrGDB8cM=\",\"LhZKUk7iLrWokD+uHzWjp4+ILz46mJK2/0dTuqyTSUk=\",\"LfL7LC4yHjzOE9FgkXBaQMXHlfi0G2Hf1q59l9Y1eLQ=\",\"BpleUQ/XZpN0w50nkD80KsW/ihRkgH8wi+9hC3bLaT4=\"],[\"L/V/P36VsDQR23kKhmR0Z1gRlxJNIXUg7y5jMqWzUYU=\",\"Dk+wRKn8tAh+NRNB8l2YsTmbV24tZlRTTzSCGaCs34Y=\",\"IIagG4FkOKKkHFnkPXP6mqzwwk5Pa6winWX7pZkiVUo=\",\"EiY7fj895giZosIv7pGZcs153Ciah/MfG0S68kOdyHw=\",\"GZCSQcrFAojA0SND4MEs+bl5C0Be8KkAGqa+AokGOqk=\",\"AR/wkd1VG21YYgPuDK+uL3ZS6SOrqCV0pTtjKgZvSIQ=\",\"CT19VWPjzNC18VqbCT/muGOqzM+a8R/+qbKVt91CsfY=\",\"FmnkS/AiOnf0j/+8n08gtYFPYYWuEaIQ+P38tfcdYD0=\",\"GrbY/jn4e7DuW4g+6iclyqUsV1dA1awwsFj3cRPQUjk=\",\"I1vxeLW1YmLZiL/GJwiw+F1XOFzeK02s+ebVkt6yr+Q=\",\"BmSaE+ZQI6cTqu5Th9OI42Ca6bFLpNoQZC7gt7ShZjQ=\",\"KaWx5OLyVEVJat7CMO1To1mTs3YwrstdduVmCNG3jMY=\",\"KfB8Hv/GW1WJ4cpSy+AL1l716WLQEgAwJnC23Oee6wA=\",\"MCiclnjAMw+Fz442JoOmFE8iuEGqCPWG8hndntrveLw=\",\"AfncvefQWBNKUQpxHQNtHxgA5HOmOzOn4PsE3C4J468=\",\"Abqvj/lrsiJLw0z4DDi/EwhvHkKbzuwSCQ2KfDdqmoI=\",\"HYFLPBdlbCMn+UzAJHJ4C4hriDlPGly+NNxPRP8TT84=\"],[\"Ffrvv4WEo4lptKcZ/+XwLCGRqMztoLd1FiID0wuAIIs=\",\"MD45yojo2m5cljVkcS34p/hQGnr0qZDkzOwZ5fj8gF0=\",\"I0hYDeSarAHOj8taorRn9nh92Klszs1vtH331aQwc5g=\",\"EOQg7cttp2Fwsk13fOnTFhLtsVk+ptMOjP2s+2l0+ZE=\",\"AdJblLt8ScAXDuH7Klgktw5FVLzFS2yPjMDMnXTxml4=\",\"HaPgBgHKP8DZCxl70qR0tG7+Ov87LPrx6+Ffoa+t8ts=\",\"BF3AV5ymbn4JbU3Ya4guaK8tNdcM9eOxeDyqoOxCQlM=\",\"LVs/UjqWaMvkiHiBv3tAGE+XhxPjWN4nDYemAOXFyS8=\",\"G2K6gDeoPxJhVEwwfwGdvqHMaoTUgeqJYLD8ZwdF6K4=\",\"F5TsKw7rIvvXU7IfzZSee+2zBfFaWer3SpYcMEZjX4U=\",\"HtTJXGKDtF7AzYj1EZdvBj6ivrBpW4r3zBBYlZOnl4w=\",\"C/znsSAGi5owAp29s2vgHQcegWP6FyTxPGyom+Kbcp4=\",\"BQanpd5rVuvsXnCKcKPOyzos/SXnog7UleKVqTAjxag=\",\"BIkASPzb3mNmdhzVj8xqwKM2DZpkIz0+pNjWvooj7EU=\",\"KFsgeZlwtYxjrJ9K9WTODyggm2GAIhTaW/r9DPJMZxI=\",\"B7DXDM/xtw2tm7SwFC4/bcW8ldN2av+tN4zFBCSE3sk=\",\"A7kNo0sZjLyhfjSqyYsWmHXs9zrrXG/x8Ayf5TWqmQI=\"],[\"Hm6qsRkVk94NicuyOZq4qpVdgprZWUKM1Tm+MLcv3pw=\",\"Abd5ldvzDMVfnUzUhJztlJNJ2oEjmgFUQP2zi4dqvuU=\",\"H7a9bfZQ0n6MrAWsC0Xu8HAOMIsptL1B7s/1gCftxFw=\",\"DryzWPlfhLcZxjHUBFzvA6xvwjj2g0Uizr0C5HQRu28=\",\"AydOc12y+vGGeHUoJUJy7gGWfmrp2CUUE3i4NU2EOWU=\",\"TvQZRVWcH7CyEWyyvh8EO/zo28lv7szNpHy/aL5ZtQ==\",\"DaAvZBDiQFih6QQSzVMCxXGX97GvKplJb5z/P/1YgI8=\",\"EMGFbygvVW189tSik2IVBnJLptPFguTCYYQvKkvbDsY=\",\"I5q8fJ+GauwoaFwm9OBGqS1DYNNstQiQ9CLhjtb4p7I=\",\"CD4c1ZQ0YatQWyADEb3kAD+09+0WqljIvCjy4I6faSI=\",\"Ff5ippsEOClDldob/JMnLYh5fO7vZmuiRD8MFG+Kt+4=\",\"IAVVaLMzZ7wSv0rtegkJwXNYildjxqGnWYunxsfjwqU=\",\"DAKxSPShVZtZfNMg8AwCuWp/x8g4Eb2GoeecwxBrIgE=\",\"GkFi6KdwREe+DB1NXPL3d2cPSEHqJ6wnCc1r/+7Szr0=\",\"DOPdcn/dEai8cxUA7/ojdjCJzjMyy3MPn+VxRu4gSBA=\",\"EfKO5dqA0Z4xWBtWakOVN0ZtnKf98UtwhoML2KwTxMs=\",\"J/p3oGWHkeZ1V4HDZ2g/nJMzpBNk94cO3/GTWjR0hdg=\"],[\"KjuwIMilDTEO9bXHfMQIsHf+JIFFR1TEVo/2aP5fCXQ=\",\"I2Q63TC+IEc00CnPA0yVgURVEGDBkBxCCijJaI7DaoA=\",\"A+lxgjfBcA190hPgJvMH6AALOFFGf+2eb1H6UCDCNpw=\",\"DEji8wT3MNSOg9rlx4pGGIUAvIBApJVC7qXvGiG50iI=\",\"DKwyA2LiNbRY1tNkzQ//kU88BWrbsDjcKoYaSff3DiQ=\",\"LwU/3xpy1q2Mnfl6BNY3kW8l40JbbcM+mcp8rFzH5Mc=\",\"Lftt1ZitpX6nGo1o5pJGCPDseDiAhojuSz/NUh975tI=\",\"IsxDSfa6o6jgth/ECrlyEOS9Oz3sfwW7jvg5yEaSr7w=\",\"Av7VoDIAQXZkU334+jAna4XZG9LtId4z2QH7TYJDmFc=\",\"IqZ6iHdpgtahX1d9z3gKxIXrqub99vvlC5XqJmp7YFk=\",\"KweaHQm51KdtTlDEXAH7dQixxEOo+yHr0oUz4F3viGQ=\",\"LfH/hmRPzEKhkyzxXTFO7UB2CCRvFKgJhyX/e+gJyH4=\",\"JKRm906ZpgKJT0IQEPQ6gccIsbStB2QlGQuFNH9oWxo=\",\"LpRLRJwTac6XZvpvT5modjC1wfLWNnekN6U31htsdHA=\",\"AQeXRspR2VGKDDCSlspIIGKSeYkQSUJ3viu2WmsTSzo=\",\"E9ewPo/J+mR/ymzcqXFGkB33xnWhZJE8K9Kjtu48tA==\",\"BtbuUxuj/c7QXiTPkQPQli3SJ/HeaSwBmUg+kqskulk=\"],[\"BR+BXEVLYBXH6/kMKXuQ6WBM02rMavB/mbXlH96zIjQ=\",\"GUaiariVP5vlWBBfpRefF152okQp2tXVMsLOs8/qBck=\",\"klrzWjNmgBrICjHWP3RfqAe9oQVgNFrVcr70zyzg1g==\",\"52bwOvu3r2MOqor/T+YPOBDzDz9EOEmO/gGGMz2twA==\",\"ERHtema6LM1L6g1D7shuo1q0AlOhIJ42N/ED3LhPxCk=\",\"Ha90hCx+eRBDSa05lZLFxMzhb3nhqG9Q2UFZh3LMqVM=\",\"EFcGK0C9zx/iqu9FiYyHEUZ5mpLIfQ/OZDAta8gxct8=\",\"EtAZ43zRvXb+4GW7c4CpvYMxpNvNHJx3Z5K8GQRcI7Y=\",\"CZbK502WJ8o8VsZGCV85cwJ00l6CxCziHPeJJT1Io/A=\",\"LRGI2efmrCTEssncPfz7D+R4LWifMblLH7Fe8p0R8Z4=\",\"DDRJan21q7MwsvbOmtrvWubjCMj8LFY0CXrjUqp0V9Q=\",\"HU+w8Y8xyCcLRjbmtdejPkVbEFDeEWQYLPy3OczpZdo=\",\"H+4YiIQlcklwvSiXtUx/qOnDZ93byEhNo3hk+v+fkFY=\",\"Itbnh/RNqmtlk9/eVXbS/fXcBEfmWh1edxLk5iw73O4=\",\"I6hdT5Htpp8xDEUdfUgML0DA1TOC3dP8qq5ie5YXFw4=\",\"JEDnhheaf7z+jSmrGND8bPo4PPt0f3otFbd9gtmw2dM=\",\"HlB5Ib58dhJIef/OW2LdDpYlnpjMZMJyCNYrQL/j5II=\"],[\"KLdcKsFn/fGEclMXx7u4CD5axbupN7z6bO/LaeQEi/A=\",\"JItTP4deXujnUc76Sx0HMvzTAVHDpcxKu7sek7RlXUU=\",\"D4aS1kpbaalWxOIAa/7DREd/318MmquGZgmEK511Jp0=\",\"G4p5CdfnvU8LzIADlo44SsLotAWtBc9hA2TT7LmC234=\",\"E+c2zHC3yCijjdY5Ts52ucza4spPQ5Y0MlAv6MKtGf8=\",\"KujajQsSmiL4NNDSNMiRfC+Hf/ANwWIVSY1LdI+0DfE=\",\"JubRiup1qUhhoCMztTZM7Oqnit+7dCgXIYyjr2B7kQ4=\",\"J6o4+gUcQ0GJ31e6/YByPuKb3M1Z+8GqmvEYkdNyLmE=\",\"ME28CTaGI1bgAksqMt+jCFq+29M38iuJBivmFNg8sIM=\",\"JlxDyIbwfQJSANVs0kawFnCz6Cq0gvWHmxBgjMBaN/w=\",\"BP/iepLLQwDndDiO3DFHq53MSrNUw4D1HKei5/4EY8Q=\",\"Gdbx0RDZ+HPbAC/y7YKJBb1sxdeSHCONdWnaqbJAHTI=\",\"GXEcQddvZKNxq6YvP0ZxDe4MOq0he3ywC9EmE7JO9Ss=\",\"Dgjdtp1e/ZScPWceTnjk/HYoxl7Bz7wYumoQGqGdv2Y=\",\"JAZX1n+SteQmGs5DT9KGIGwxVWU3jOi4FmFSPw5t3FQ=\",\"BWFJIhcSuI7CkfwhgyQULQKHPN1TGZZ5/OTfy13akRY=\",\"BoGtrqec9FfbVwGTHw7i8V7LsVntUM90ahW4XG+KU3A=\"],[\"AjrzJFmWg9m3G2HQk9Y9y72X5ElXMz0ml/3QYMHktYU=\",\"LnocUdph3SFKF4nW8e4pV/adIbHxbR+UWOslpAZQC9M=\",\"K9/n60+oA7wdwAUqRthQ7j4JHrqKfxJXloL29v1QRNQ=\",\"HZLkIT2ECjMOy9sIaT2/mpcbvWIpBH64igPzNMre8ic=\",\"HygFCEl2sUL3x0pBb/Q5/xvNi457BXATAEB1SmG3GRI=\",\"CZsKYzCSakoVZN/pT5oRBLuDdLtRioneCMWRwX36oFk=\",\"BWW5ZlkCWTXZwCXHqyCxYR2wC2fsxRQms0L4x6F/7YM=\",\"DwuTNttcFtRy/aP7msE7EzlMCaufSE7PatIGAhe1iWo=\",\"Kn3o9f9HbYHTk/HSdGNsqVbwW9QivJ88wPrABUtYywI=\",\"DybQXpOPgxe9YI7/CJXTUtynErZTsUkvjC6payb5OB4=\",\"KLc7M1xy8HdIcaIDDUROX7lUl5wcVo4RL7kRpGxmZ2g=\",\"KCoB6PLOCcvdhi+Y/auj+a8CRD7cliyzSALQRHfeHiA=\",\"J3DRSiIBUvpwgwQL6bPNOMis6eIHBzSGvPr8rXBnSLE=\",\"J6VzA2UJqKKakOqjTSra7V7R7GsgcnTzxcoj2tOIDlc=\",\"I4SjhLzCxKF/98nj59Ex05FzxDEzOpx8HW/XEQ4lkCs=\",\"FixbvIG0RCe+ToLF5SU71mwwVPXFtzsospI4SHhJp5Q=\",\"HmGWFHUIvy7chyxOiXqWd3ixGfaftDGn9kbSAY6rQBA=\"],[\"BaB4aKfJX1CgFYef583x62wxfk1InUUVII3fQKMjKeo=\",\"IGXjdO2x88u9KRncBNFK2wcGLdAewVAbhVIufg+vkl4=\",\"E72swTe7z1HYvJ0oGTHW5xEi3G6T5//ouDXjOTd1w9Q=\",\"DTs/uGpEt0IkKaJJiEyFZErxl1ZBIG5hAHDALvWp9M0=\",\"J6pQoOXVWIwUhujn/I3aZUif/7hmdWwhj4fnKAzd+mQ=\",\"C5rr8EEUbBGRmXV+qM7uWrzqnsQs2yi5IcryHoSEeFE=\",\"J3a95SoSWUcsHMAg5xn4IZHew6t2mbfQ/Xad0/45KZc=\",\"J1pvWWIzVNcdOLTiAM4ulnaqt06ouDZvzjO9vEfQWG0=\",\"Esb2yDo1MPrO1gyI8ZqC/RK32TinmGTtIKVFpS/c4R0=\",\"JXaJpOIvaodoqv5UIY0x3k5An9v0IxlYJTa7WDMTo5U=\",\"GVghuZrywhdATuWC4piJByujzZlLdJVcJhta02Tlqcc=\",\"MEtnkAjoofCUSEI6BYieDfZjorZQVcqe5amd/hP7mhY=\",\"CN/+aEqjP5EdNemmRLS9v80VpNpJtlMYFrYOjOT2teA=\",\"ByNyCD9iGVvMK1r6sQOBmKPwVGti0XHqIcN8jzFVEXY=\",\"JVR7UbLGh05FOMqbNAk7cUrTao81bkx44NZrHxkAOPs=\",\"F48qqN+aEe8zVY3Mk0lx92l+Ymz+8A/83rbzycGn0Qo=\",\"Bo76NbxiASSrfYiZAXG65BAq0h3937OH3w3gyKOhiek=\"],[\"LFtKZbxVrF++695Tzl+miIL67SqSp7P1cygyxy9/LDA=\",\"LzZTWoOgnPCfw4ogpyVHeuxWZo8DSjZKn0pWBf/9M8w=\",\"B9eM4MHIc5GgagbIPTANUlJLKfGDiE4wDg6t2s0F8Gg=\",\"Jcfo+vbEihVsuR2BqZfGZz0yaUo/3WT16VlOn1BLrYM=\",\"HzzG9l2dNDcIJaOP0fSPUJ98VhcbnnpiTZsOzfasTqs=\",\"BV7yceOIJ4sayjTTywARa9b3y1hLPGnw3ip6/I2Y3rg=\",\"DBoyTEnRX4eTGCGYm4yEN+qetG7Tqs+Ilf0cwxEFPmA=\",\"Auu2cw17r+rCP8C0V+qCTu6jxV7KY0vySyrCqaIUg+E=\",\"IB4D8f9nJilHOiTzLS1QKs3I/dKIMBTedMmPQKGVs+Q=\",\"HtxX8XThMitifG+dvieuJwPD8Rw2SzgYi/QdjKDBcJo=\",\"IKVvzjcSK3QAq2GmXqyBXdGA9S+tKDX3/ZZJBjUjiB4=\",\"GZgUftrzqSqxecYawsNq9crz54vL+2hM/qFdsXuDWQc=\",\"HL+rfLBeLyglSyML/OAX8AX7Ty3Yk1rRF2WzR9IANmc=\",\"FR4LwhEOQwDdgqTJJELEdRxlspRCbIwyDGnmGDGVjOs=\",\"DlnhqZDsAPcu3Dckg0nXpab3vK7xWBEEUPHlmF8KXZk=\",\"JK/ZL4Dld4j0D7srefKUVNxIX7r7WnJj9GK3yEtOUAs=\",\"GwEiJKTwUN+EESLRfF6k7e18jsIDR0OkMqLO6JOXbyk=\"],[\"Fz+JXkcsTrFqKv87jgQX+zK4PrHjIzRxx2oFUFBdBgc=\",\"ESPTyX/45rWJ0Ri8QMoLmsEq6QlVjyWCVR96QjRbRiE=\",\"CYTBMrKaBfK1BsoHwG/pplhPNruHUG0tMWpPNTysXx8=\",\"LXr4NMnN8bOMjP7SGPHvDOC5kI3p56p6VRDE+5F6AoE=\",\"GxFxN5HqTLLhfIxYZ1AgQ9Coz5VThMHHk8UGt1/A2yk=\",\"Jvvxo1GWP7vatZDb12DOYoQnNSWhtGxB8pImxlM59LM=\",\"J+aFaOnP/Qf5JT7528NWJR3GstapA9bHBGtekOG83Jo=\",\"D/IV6x443GdDLiYt8n7afDqpQZ1bbimb2UjpcPw1pi8=\",\"EYw+/pIMnD+QfIZ3Q9NdLMv/fInpwxu2oXxVLvkrbAE=\",\"F7OfOGNtXv9eBu/wietWBRpgK8j0vxuwrSss0QzwcTg=\",\"I1EykS2y2gekdQxe1d8lkOcYQErvxIvmlTQy9kQkBC4=\",\"AopFcstlQmHPk1hDWSPmWv+PQDk3UnSLdqz9Lj9XVck=\",\"IdcmmlPTcSsgVDsAOa7MlGZSATPSmehEIACzMYSjnoQ=\",\"E/Gsw4nE+OdSzH5LgcN64hMMYN+ci36H3F+3RZyvSRY=\",\"BmxgkJNvawVPF96pFoKVQzKz4y2PIKCuFx1BcxbTYi8=\",\"BJKuX1rCpRAuqW5grIN1VTaHFRrkQELb9YmSMsjyEAo=\",\"II2BQVG83N38+DWpWMJZpkd7/kszknEO352AeHolxdA=\"],[\"IGywOMwyhSbQw9xa8ZQ32DIZdRxe6PYbDp4vWIE2a+M=\",\"FgswyHTZwGcEySwmbHpbf9lmpipdsAjxv/30Q7EJmoI=\",\"GwD6qFE2sb/EluDqmmKEyuUlqpZhL/7rUUgIlVaTh54=\",\"F1r15Q5Whewtuxz3os0l1FaA9s3faNfAeV3smLh/anE=\",\"EEVg6VxJ/rt6Awhi7bOjPCsqPUFLBTay5U4lqzbo8oE=\",\"Ev1nhjsuA7b7RSJPsEH/KA6TZ0K1TI5U04I+CQ4UQWk=\",\"HbDn4BciqtIQ5SlsNukQPoLRV2XDGBNNF3FGodn9U1g=\",\"JH+cf6YQMiU1/rBnbP9UnxwXfQ050/Hu5kLpJTqvuC0=\",\"D3Bf66XwHLJ7J8EEvJPwyXT1Yfom1WFPap2eR9A7xlU=\",\"MGCU7P5jMAsvlbyYoEBseJjYaFIzCntp+bBLVASz7vM=\",\"EFnbXpfyWCawu+/Wv6pulJbFXvWoj+/pcSaR9vvfQpg=\",\"Fb2ZjCcp2+rMwptdbk8P2WrQpgN8hKGhp4UWn7M2+24=\",\"If3lgKGYhrEzWPGKMtWv9oW0vXfZTwZ/RPbnqTNQ/So=\",\"BoI6m6pVYjcysC+icLL4h/04BKhcGn8qNV3z++/GncE=\",\"GyVmKEOwmGqxpOmnZhk+/KR8cNSTZPA9UMXttbVRfr4=\",\"ENyxH4FcfinGa+HdPF92AsmOn7FofC2CW0h4nFIfvQs=\",\"KPkB/KqGCw3EGSre+OpK5Vr2zkMsheDOTQc+UUqyQlI=\"],[\"AkDFeJcWFmbyjQALiNM1OSHZZ0IPQBzoa77kK+KHpPg=\",\"E2HSfEKntL1urrmKM5WSYWwNTY/Orf2xZGgWK9+ojUY=\",\"GeHkZTZwTOzqw+q5kb2AbjR75AoLeVbc1wNzUv28Q0c=\",\"Eh9KGNe32WUKq2JevoaVqAeUOfKrAMCQJ53nRyYjTm4=\",\"CMRfPExIb2tTeMd5xge1FyALtwtVM72s7xhRn2Jbkls=\",\"YAzyZjWy1UZDFQdYlzkBDRt1fOquYXv5W44e+phkPQ==\",\"Cu+KTkfV7HYOBWWues2r5+jpiXLeht0vRHqvIWq0zBc=\",\"KtC9n3HieFCEqguEYWt9raBTIHxBjmX0A1vmagzcjBI=\",\"KNMnocLWAS2eaemjtMEa0zbTwNzf9MXITd3fkR62RfU=\",\"Ea/syFWQVDvS34q5Ur4WRnCj8yWT6WLUvUk7zTyE+E0=\",\"CwUMiCBzpYHnZyI3Bc2VEMBMMBaMUP/gyYdaKLaTgpk=\",\"B83zMJ4TD5zt3WiK84hTafus9tikTeTUUGZ8DXZBIT8=\",\"BSMr+VgH5IrYKh60vEgemwcg6VGW3+Nh9VxNHPx5Jtc=\",\"HkGTbmvAw+1mXC4kZquSFrmXP+E22fmq2Vh4wbVgfG4=\",\"JkdjVHfuX6nnrFmD+S2zTXM2ZGxjxj4t1T1guHFL11k=\",\"ChHVh8t11IVE7sZirSfKas/smPeot5Y6KU5LsymxcN8=\",\"G9Y5h5cxgjyHH5zUcU48xWpusZiEtzZk7tJLEZKRGaA=\"],[\"Gq78Lpkl/NRTmW/agEBj/asnazfF9R39/vklW07BDMA=\",\"8ej4aGDDtceLwU37Z9Isa+uJkhI2WIQvI/da46kumQ==\",\"GcJUC7sc1OCPEFQ3BjyUXP7yiundULl+C3lfjcWuNOI=\",\"IfCPmzwj86AlGBFKlpKbbRBW600dsUfODIiC4bD3vRs=\",\"LSGTxne7zVanT8KuUKtPLMaap3zPwzx3B0UtWtrHfts=\",\"D1KPWRK+SUVdQyOyWeMM4phNgXBgHutL1wlrRzU6t/w=\",\"CMAMTls0Z/AZAfZPn4nBW7C5CRjUiLcwyswylmkekgA=\",\"D8PM7wDWpkCAq77U/tkLacXlgDE0witCzcoKYPA+wzw=\",\"G85n9NyZVH8sr/G1xtY+PuJWWkBBkGZFM8HGXdnY1TI=\",\"Gouk830jFTichWDXTaxXKkRHoCFFUWKHBT5rnt77yi0=\",\"EV5gxOKTfrU8bkpUiPgBJm6E0HVHoLHNkbGPSe/vmSA=\",\"FS1HrLmwbJ0SwhOKMUFru7uZGmXcTU+O+Ro91yjmO2o=\",\"E2AmRriLoxwNVEx1e9kYFyeDXb5pDDBYOiPzf1L+Xj0=\",\"Bldm0pgDMaVcCjnYO+eL0Se67nfVOiQmjgZMcdqvK2o=\",\"JtsuhakAbvXBHNZ1omfULv759a+QRmsqr3XuqAJLALs=\",\"HdawlctoRZ3Pa9rdQ0qoH4ClWgjmeCxlOpOv2KZfMmc=\",\"HT7oXwePvuzaJHPvwr7dG6fsb0eV+q6uOw3kjTCAxiU=\"]]],P:[[[\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"IOPpFGMZZOOU0mmuWfF+/uP+zuUSy7Fj0yzHYL5XS9Y=\"],[\"K51LQRDJrpl3guFQmx0P2yCnwCu9i+pzBUYrn4Elseg=\",\"EKRO2d2c5WhWM5RjKDPYYzaQ0ymuc3yMciCpsZfuP0Y=\"]],[[\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"Hm8goR0eMeQ/g9zt3bmgI2ID9fJK5yySWop5pmgx9R0=\",\"G9jFKEcuV73HIqFB+HhWlEhPQmclQDriQITjAn54JGc=\"],[\"Fu1B4Tu5wMZq4RlCT928vJMU3J/b3upV1sZFQ9xJA+A=\",\"LVG6gsgHPG1rrPGtXlZlW3FDYlsKnpwxkFJ6Gl8FB5o=\",\"GwfW1R5vfpfgqxD8LlHqg84GEflA/wcxtfkn/o1qd8k=\"],[\"K5C7oA/KBYn2F+fcv+guDfcGq2QM6yR7eRqTt042c20=\",\"EeEqQNJirojoN29i0Z7fQwk83vHM802YWj5T8LxXZaA=\",\"IhwXDk0Cokecbz5Htf9VeBV0+YDYkDgwij7zfM6EY70=\"]],[[\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"ArJX33CNLz1nhf85Epx/JowTrvh+6S6Qlr1r2NKYmnQ=\",\"Ikp8xw2vk6Z7p0wPLYDFsK6n7Bux9OF+oh/xR8WLChs=\",\"GM5DxC+qV3iOZrEbWcmDY7aXDE++kgagmGrHpEOLlsk=\"],[\"J3aGSU92RLvEqbGU4Qck65Z/HcWHGOWePO3IIbKnrhk=\",\"J5B99B+id9jHTDcl5bi+VPSzXT0Lbleybq083j1DGJc=\",\"G36F38/gE8RXRthw+yEUmR1DEx+tv4BJTAHVsQXUSl4=\",\"LBWX+B3JUfCydEBWdnasZOobGE5l6yUpLMTaYdi/mCQ=\"],[\"Aj22h4Tj8MwLhWGIJqmzUFEpwWR5lzsKhKRSnmawnGI=\",\"AkYKAyz4Ts0fVwlsnSH11I0bIavG1wJ316dZRpl67Rc=\",\"DHoq5DltsYOOXLHuSQp2jBd376yRkDGSSrJC0ZvpKAY=\",\"CMIUf5V6FS/8N+7HscsCnAfs+rzIRIlQKm4FKqb5Qog=\"],[\"HTWdJF8obBLVDWY7rnM/l4rwjNvWMBfFezp1ZG/zgsE=\",\"JFazxIQaq7zEvLSVDa5KD45gzwUR3suLZ6/avsoNxZA=\",\"Gi5FuSq6jzb5IRDWiUHON9Of4n0Ct5TVP3uWG37Td8U=\",\"GC2Vtj7HILOvOjvG0KYBLUiFuldU8yqh8dkroTD+V0U=\"]],[[\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"Eoc2WOzxiNKZuMzVaOsUpNQwfFyqlWM9wpbwXPyWZZg=\",\"FTz4Az2OihXN4sXmuT2kAYxZVNAKknTsXsbVEB6iJ2E=\",\"CfFaiCRGgj/cpvarFd2OJQ2QyERwUWZxr737DegPsA4=\",\"FnxlW/bPPg+2TJB1dzvIYrJLTOL2nI7BmK3SdYos4hY=\"],[\"JftQtlrPT7BHy9OxwX2Xx/4m6pyiONbjSFUEhukcd2U=\",\"J/kWCAbenvV920JD+Dnkt+i7KTrBdv3FtUGe1zoHmZ8=\",\"Fvzu3XA7u8K8bx15LlAZORBbBEsbkE07EQEQ2pg8zcI=\",\"LqqSXQa29ad8DVyyBZh0J5FJXOyEWTpX7p/EyRFa58o=\",\"J5syRzX7yIPiTxkcpwOfmYYRW55vz0lGz0XwjO2i3Iw=\"],[\"KT1hfX2nIQI1Xznr9i+RsG3rUyXzZ6RVbqHjHtV2eDM=\",\"CX1x8f1Xmg0PQ2prNhZc0jqfyrA60l54cs2wm0oOoNw=\",\"Gp/SZhESjVktWU9RwlHb9O/23M7Lzy6/MQ40vtZhM34=\",\"IeswpX5ZEqsG0YVz/FRrK/O+hA1fXt4B+R3Su7V43MI=\",\"E6uvcoibMTcrHm9IdZNx72W8V9KKwvYObSJ+sAi5bO0=\"],[\"EE0ClasAyF6WARGsJdpHQ2ZZnldam37fYUXxS6bTwcQ=\",\"GbuKv2oBLMe4uXQDnGvm3zFEalFwKzmo2Qrkvn7DPsk=\",\"EQdYibwNzJ1vBq8wEvBKrc+QSd4E/Hdfj6CRcC5wubs=\",\"LkyyVZmj2/B94ziCeyjRa5yPyrj//o8qFhYb5qUho1g=\",\"DHpwCzP7I/xkLg6Gcd64TQXe2My8lo0VFxGC4VhoToU=\"],[\"Cqo14shLrxF96j4zbNlqOXkrOBOVT+m/PtW5Dy9pyXc=\",\"K10o6NZIv/4Pq1njx9mDpAmfoKTFSN8ABubQ9OICBsE=\",\"GpbDfEYauKOO4VvCeExQltMNFILlfC+GG6uVWEuQ2Eo=\",\"Db3TFxMIv808uLimdlkoWLhlLpAhQr64/kFFAC+6jg8=\",\"F6xIVfKVo7j7jO3tf0s5KQZHoBRa9WsDsB6VeAjWb6c=\"]],[[\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"GM51o19yl8rSvMJfDtG7T3xZLuqMaQOxmFBRHduDJ0w=\",\"E4+TNhxlRtaQFa1I71CvNPqeGcbmhEqEfrqdkIVyBS8=\",\"ATwpskwOOOZaG5QoYiukKTG9tl61l15m08SWx/5vejA=\",\"IRo4SF8enbQlN59LP+nCBHTJaKui74pLu4mKhCDQ/JA=\",\"AvpNdzgz2US+Rux5j30W6f0C9RwIYUGvXWms+X6agLI=\"],[\"EZJPAv0ZsJJVqqHPRuoFGOPXv+70dCFglJEBHbC9CwI=\",\"LAAetrN4xJ/Fs3qkHBP9ukhr8yTq4OAGP/g1UYJ/M44=\",\"BRBxGDuhuP3gVbjycwBQVvs3aEskH4iFGltVDtDLxFI=\",\"FCAQVf9UEvg012HagBeWEhNmblxE1sWoI33rTQ9zTXk=\",\"GCF320GOzamebpmZw8BJL07Ceomyq1VNyBZdqbqMl2I=\",\"ERHS1NKgE+M/ytSNV0WH49f39rSE1/78+TPcgz0Tvyg=\"],[\"JH+n8CIwShmU/1BUVsIgHvm3FzaUmNP/zkRmAe2d+EU=\",\"AW506cCTLHYYLKJf+n3GrmKyz74ZFCss4dlewIOdf6o=\",\"GhPnvu/PpVrveBVxLHs1C0ZcB4Wv59azVjQrYQR9B8E=\",\"Gtz2PoGyKtOIEbIKphdexBeE65n77g8+VqFd8MGsUXk=\",\"Lzp2rQMHt0D25ueqmJM1xgANkwApvuvug8BjGztDUSM=\",\"JN0cOOw+R89xEiHNr0ssz8CZGheM998vPRuI+Fh2PEA=\"],[\"A/17Ge8shh8i93/4EPVOJ3vJTrdsAtedmGvj3N8FHD8=\",\"JN4AjEsgxN12mvo7N34ucvCnQzn1PD9rqLhLCoX76as=\",\"J0q4GVMkfxiiba6Q2T3rHzPqJDr2qsTgXhF+IzuSK9I=\",\"AWp5bEMQ3bwsQ16l7w1jgeFjJQwzSFQm6XpWarbyuwc=\",\"G++7QDfIuEfScRzahgDZQaFYPPL+BqiuArvCbhgCWbo=\",\"A6Aat0iNbKxp9wuQEB5ci+t4v2Wnn9YGjJAQ7C4P2k4=\"],[\"GL1BI5w+cVeaZ3RD7P+9VVqB7u6mk1Kmi2fIVjwMKgY=\",\"KijyQJyzZNMbhYhEAjJ5QE4s4C04QwvneydVrrkZOlY=\",\"G45s9hrwZMmATxiIpqg/bOp8V+V0win5eKqSLdzNgNo=\",\"DKZ2nUODOY0aBNPXpvNRDYX7p/X25tKH1EeQjRHHEVM=\",\"ElQo/miawL42jIC2fosquD2BY7owtDkZJ/NSs789xbA=\",\"MFFv6IS+m62IcDKxWoPJHYQUfUT+FckJNexNQh9e0F8=\"],[\"LXjDpdKN6f81vwoldjUZblcwyn9ASTJ3B4zXXai069w=\",\"Kv6xpjs3SlAhgGgBVnSBIaaP1wAhFHM7sDn3StV2wNE=\",\"A931xh/C6uFT6Urfq5sjTQeyYa0ihUe6khjEyvbLquk=\",\"DC6MZz8n9FrBES2SzIuB70r0JlfXoRTS1rzEt0u6t8c=\",\"DaXt7d0P2smvQdWFgeWuyv7mcaUlMCMgWqmit+HfhCw=\",\"KANkYSqt8x7lsXbMxUtKX5Ycx4IWjI+D/yq1tNEq3A8=\"]],[[\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"CQ3ym3DFp4NSFQP5KkV1PIvKA6dGJ6JMRNvKbsoyrEI=\",\"EaSOn6BkEh9SKXFi/RaeBR0VSg4gNYNiShbHNTRDC5s=\",\"Fjb9mgRXznWu3ggh4DZ3PjnDet9v7cx7LN1yJU4ux8w=\",\"LmSy4L1vtHVZ9YW2Po3RW0MAWKY/IHZjYFLvzN6pjsY=\",\"LLeGOIbMTuFkAhDSmkoynZOgQO1F8nRMJXMcj80V8Pg=\",\"DzISBG75hEOJicNV2wmE+T6kv5neFwDuAYWIboHy70M=\"],[\"G0vFiF0c/I62kYdTANtaDHNirjgYmKyvi2PK0E7LNsY=\",\"LGKOIaIgCHM+FPgelTpQByrIAFYFVN+el5caVsUJIis=\",\"HLHS7KcZ3o6jUq3Mq83RAMT929OAhx4hkOMzkLi6se8=\",\"BqAXXg2Ko+G5lKF3r2mkC99t+uCcQdL7PYxZnHbn8Ho=\",\"BfxliaHR01skc8YawpPG1sviT6sSqQhsCu4fjRooqIM=\",\"JjQrixaSgygSPXJwFIIvAPT73izUUEb127a5hu3+tjI=\",\"DXVlmZ/6wSMgPuWgaZvUovTEkfz+BWdvkoaUcX5XKHg=\"],[\"CKcvu1Xd4+k8WBhXGkJKVJU2lQKe7bz5Hq6wEnUcf4M=\",\"FWfY+HEZScA2Aw74CGZTUM/ptkjxPGdTea7dg9m4N2c=\",\"DJA3sbXLNFFZW0+KHKgMPXLOuT1tWN/o66AuiNIRsoE=\",\"AYPQba4aDOUxcaoJ8l8l7jlyY9utUwbdG3QohyuqvV8=\",\"B9qWu/X8RFh0HegQF44ZqJYxqV8uDNfl8ng80jfz2RE=\",\"Hv5LO/uzIOFax5+pq9RuShmyHzm8QBQzUTIfZY9s/nw=\",\"CQBQW95e4tVfW6qTLjiAW9kUr7zz/IVCGc9B0Ue4nbk=\"],[\"D5U1mh9oRdSSGJL4PlALuxs9N2PY/HYkAK8Dmwq7g/U=\",\"J2MNMm8S7tGa2mCh9sSWaAQltFf0LomZ9JZ2rwtjemw=\",\"AmkgGUYDoRcnUlxeeyZ6tlgKvip5Enie6gd6VffsMgQ=\",\"EOXdeghixKuiTs5oTlAtPWEyqZ2QaQiyDrpPNGaBLkI=\",\"LTD243G6b6ZIU/ykWdDW4O35QcPoF3rV0zPU6uzX3Hw=\",\"B+2VL3wzcOA4gL/KY0irKtNbvfm36cJm54hbWA7dWf0=\",\"JbekOLfaxPCzYYPxh2bOUD9p1sHZzSm5htfSuLRL5DM=\"],[\"FvAXUc6YUyiv3jTYFhne+0Pmx7Xa31LQ+CRy+853cNk=\",\"N+PBbb00D/gPSe5Pfb4QmLR0F2qSt6aWSmPy+7is+g==\",\"As94EJhe1W2JgVDdy9Qu3Pq2RC8NCn9jdpP2djAMhcU=\",\"JZXfvacz0Ed6Actmk7k+tMtxG+83hLX8nhfxs0LrFdQ=\",\"B9nrgE8KmZ7FhsWBZNqEZ6SBwZdeJ7lR9vGEEadEDNg=\",\"BWuN9wvpV3+UtvwqOpT3NtnHud4pE0/zpSTkBuMUMoA=\",\"JYoNu5Yfxhv/05dk/m08aHoQYbWa0A/oXRwYWUt+cnA=\"],[\"HDkWJjKEV/yvpinz5tM+JVXo2IXjwHzsyK8fTVZZZBc=\",\"GBQjStZvFqNnEcnSd5wTWO9Y9lDKtc/ZWgZ4rzYiTJg=\",\"JZZbTblbxxBL/8xu2Zr1z1MoASo6GjXNy8rk7SRwF1o=\",\"AwkOsI4EotI1wWS3GlbdcwxrleWiYT05z9kyuQryOtA=\",\"CspeRteX4XSKpDjS4pZ1aZkt/NQZl74UPD69KoI7dmA=\",\"GObMfGulDmGTPeD2Ff1EWNOabDTC8kGky3jaud0bQoM=\",\"IW/lWm8ujaolI7Ze2lNnrTo6bFWFbFRH85iigOV9ZTU=\"],[\"lw9nG5ujXj48ZC0eC4AyAj7VuskcLBBW8DllpCxSlw==\",\"G/t5dc+pAi2b6irK+9AgyFzT8QkXlNKEE1EPLXI//bM=\",\"IMJ6ucNlxdLeZgubMdSkBpB8UGtUiHh7vi3hgbduanw=\",\"KP6z7WwZQgClef80AEC+FyFxwfeYDmMhSgs/dgPWigI=\",\"EA2KGn/zGzByUZBYTIMLFcDMWkHZ1TDtV8C6tGQ2i10=\",\"B5HSQfR0PetK/UHZmJRIIg1aHRAb2W21qylouYGq1IY=\",\"F0nDmZURXu8U4byxzNTN/FySj/FOB4s49a8ybtax4Jk=\"]],[[\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"LteVMUxWLKC21wcHEklUI65r6iGM2UZ30G4QQzJ9XRE=\",\"HHAMIZuf0KwyPGfwlgz6lOY3rsSltoyMjFedpSEjdSw=\",\"EmWH9N3AALBpMf1ruSwkl669EL99ABo/ZkxtaTQiXx0=\",\"HTIgJacfioRFt8UNgCDz11W37O9GWr6+wW4NORv5u40=\",\"HT+lFeVuwYfKdlfSee5hPg+ZOtFG7is38S0ULrgQjgc=\",\"FGrN4BZ5rZYu3hyus5g2tNgYxo21Kpoc3ncb4ksuXiA=\",\"BImXzd6bHsbzvC73CLJ5KVltArNm9EOGCTEIcD9KYQY=\"],[\"Dh9OTSbp2l+O496vSLSTYQvmHX09sdl1T+yjCHmtxkQ=\",\"F61q2zey/cNuQ7qoAPxKD8qYogov+cGEqDihv/W69TA=\",\"FFgxQ/5plU6tdmk51pOwGMnG2Z6GuiAC4pYGQPmT8Z4=\",\"CWZM5GcNuEIWF+75ekYZ2ZFARs7RdMWQfnMFQkZW1GA=\",\"BRMBdS8S9t6MI9wxdFsrGbm7fDnMHqCNCHOMNqXoWIU=\",\"ImI4ooZUrZc+GiWagmPGtK7EIJCTzo5WOz6tsPEUQXA=\",\"H9mKfO70ptOzLeixJMfgJOV8N0mPvsXkUbkvVmap5EE=\",\"H0cdJbt0SLaTELl1Z43a4qqQgO9pEkLcaHHmpoC/akQ=\"],[\"DCmMFDVqWn8ibFpUnlkYSQA4Wq/Y6kHZdGcplk73XzQ=\",\"BO8xPKiOakbrOMmrqATsQmT3nx3QwFhXu99CeobeRIM=\",\"EXv/sJlvO4eWvPYvAOk83tmz57BxgHIfLAHlPJhQL0I=\",\"A200LcqeviSO82dNE5nVywKlG2zpLv7Z3jbyrfyDfNk=\",\"AVIfH62GHu6ouwaCZNy+aKk6u2B2+uL54XBm5P9b6Hw=\",\"LWuvgszr9gsPsWMpkNm/+HbOdAeYpmEyA8sHipyhpTI=\",\"CizkvCfLJWgvhOv84EjxRonzG0XjRrcT3+NXFrlEdDE=\",\"HhucGuhuxoi9ri/neItzERFKOo1vjX/YrE15o8uzjk4=\"],[\"GeBwmC0+5nXhYiyiDROyN15Si2dnBoguuPGv4cUEXqE=\",\"FWLls9tC5OKMnDwIXPyP5lK2jovOGC5uHISrAmYajP4=\",\"Grr2N2mpqDeg0J4dxu+y3R3DErDBxKjAZmY5mK4EvaQ=\",\"Azjl6YkG9ooXyxhSu3e19C8ofLdOOv2wZv6WaInbIAw=\",\"LXTmwTsIVsDdhRiMioD0Hcoel5GxBCUh57rpS7NtSZ8=\",\"B2cvyogWkUg1zM277mKqQiqV13EY/lJES1ryAK8OALI=\",\"J2cY2EoGWiiBebI7my2P8/blXL+X2HOtH36aLMiglkk=\",\"ChvZjCJJUDaa95lB2GCRS3z8ypWWiZeG5r0IiUgmQb0=\"],[\"AzPikjmS6J3uVwplASXtp1ogpy5p4QhjoZ0Xt77qkpU=\",\"Ghl2dNQMQ0R3h+YHkni1gSzLF5lkAzFeDwYjDi2+AWo=\",\"GuSvdNRDIAAbcKCiMDJ9WGsDGdU6g59f0n+skWkIUWk=\",\"CxafrRZLx2kMut0f+2qy5nvkY3bRZinWY7C4Pqe35PU=\",\"FUuCp0Zy4UM8NBf5zRxT1OwOTvydTCZV7uPCTkRJZV0=\",\"LFTLVgWNN736xZcI1UoWwcfO+AEq5dHNg9hxQOpzres=\",\"Cu29Q5/IpgxkHlW6DxeIDgBCC7vlrjMoVee+FGoKCyQ=\",\"G4fr2/Vm/IdH0kMLPEXt+o6k+Ml3AjD/QJH1jWz2th8=\"],[\"GUSqxyv2+83sBDYSOMPE2VENXwdDmhtv9B9lKZC+ATk=\",\"AyqsJgXXcvH6bzKDecqG9DaL9nmjmTfPxQiljpgtuag=\",\"A6OLH8H2MsAniUwXu8RwLUVhZknY43WdG9QjnYnJz6M=\",\"Jkkspgy8gD2pkwv0CySrITapJ1+ospnPwmdO8II0rRE=\",\"A3o26RTlaPPeDWvoJPsksQe/yMd+12fnB/iqXwGZsgU=\",\"XeN3gFvKeZoW0HO3n9uwemcudZfRbfJzk0WTiiDFsw==\",\"Lux9dJRH098fHC2kFc/EtEiz/NRzuctYkfNtscM7XBc=\",\"BcU5vcC5j98j4sVo2KoDn41OIApto3TI52S1MOm2XS8=\"],[\"J9gCrQGaQv0EiSrRZ9noNZanMGBYkEATGWYWdXNjWfM=\",\"HoOC3PMYzQ1/WLp3weRkHtNBKkgPC3ee5sm3MUewnS0=\",\"Bf5WsufyzfBx86WI8cYEsqtizzT/wdLHLPioYHnwH9Q=\",\"F3vQRYCRl9e+25la6F8hPhnB4wGmRqjKr3yfNJIEKw==\",\"F5q5MAtproubdUDyVsCUe43uDlMontC1t9DvCf0Qgmo=\",\"LCrTVXnwHSG2HIFyHeXyeHlQ+ssXVavBLmOwrenGbk0=\",\"DnjHxaM93NKsero287UHV71+hn+eZ3W+9QyFYy+HCVk=\",\"IBDWqqKhzCFBWnJ2ChqdjhqoIRHD+R4aNfKr6LefIIU=\"],[\"K9BaBAoJh6xrwB9nJC1Ut6LFJ6lwrSgVsnNHHrliPnM=\",\"LzNwaKCrMvuZQ2K+VoSHpcmXTZ/yA/PbEyNIOMgkZGk=\",\"MF/E6TzRyCMGjlBj+pg/1xqYBIZCMeN9YQNb73X2AYg=\",\"Fw47EgRZ0Bfa7UMiTID2Ql9ZyiJgF4MhVDu1VtUBwJA=\",\"HhzuwsEJfEtHoFI/iclKQvUvLgEdo3m2oOV60Jlz4W8=\",\"AT5yuSDX3wM21kP/R/N7xEiIuY9+qAZNXJb4050Rg04=\",\"L6nYz8BNunx/gOrhFU1TVle8cBVFmj352+R+xwROwAk=\",\"KIrF440gtRWdTDc3TYynAt7LxiZbY5bTCywpWa4q+bc=\"]],[[\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"c0H92LbXyUpxDnjkeucdii0sRb9I3Nb+NG0vkmOtzg==\",\"HENQu6SM/1GrLgxWMBudOyiab8R0S2H7kN1b7DEQfr8=\",\"DGxCYhW9Eyzi76445bzXy9pcu/+CkyD5m+nb2oj6ij0=\",\"KBCwMXq9Y0WiNPvkZhBwybvRcSxk0EvIQwhH5qVDWiI=\",\"Fsz2AASGzw7p64WN5N4Vr9oCgnWuhjmLN6J/FYYlf00=\",\"F1Y4O2srHbdeSU4pGATFrX2UfWx537xecgCfEbacNQM=\",\"BV/oVoAY+C/Ufelwgo07XzD6f2cWcL8bYV+KtLXfbEs=\",\"IbjLX8q1rB5KjpaOlaE0cx+FyftIjSAJmMEVL0nTxZk=\"],[\"H406nS0xqzLZvbY3UXDbuon2+PdNFuT9AvNnXV/iuq0=\",\"A9hgJ5SFRIS66M78mW1WZZTRZsmOjbtz5wwO6CnaNdY=\",\"HGt24NYOYo/Xyg19YN5zgsjH/9q+/M6Y1FoQQrQzASE=\",\"Le7N42WcsW+uU2sqHYHdxQ2kUMHpbBAKWBV7CycHrow=\",\"Hsziw5Sld7qZmCv0A1V0d2rp+/UapLIYo2PrC9G3Q7M=\",\"C3VHmBGczSbzTeKtHK76T8WG7E1ryth4ioMTMYAr6+Q=\",\"DyRjUrKGQjKor9iQtaXBEUEn/56A5Tm12SKz1TtMLLY=\",\"HW+2t8ibuE1ff6d/zECuC9uRQ4j2V4dH9i84g0QTnOY=\",\"GqtPze7smfc6lPXoUDs3c5Tu6hPJw0XRd8e5eSOxAU0=\"],[\"IwxpQTlBb0BCLXE+E8BWxFw8Yxs0aFRSOXDq6lijffQ=\",\"IBUcZjZgoW/CbHRS1oOxrgpL/iXgHi0v9oLW+MWtkf0=\",\"ItdG4YqOtgWdaRPz0iGf4dGr/LIZNr9EYvPeq7hsojI=\",\"Er856Ph5t9/vqkvn1hVzaVeXXWs4bAzIm7gaGzgfBdw=\",\"DWOeQnaqcfl9bQYZKeCNeLaQBU15M5B8kZiYkdfgRJY=\",\"ItYhQnsrZUB/2iYhRiWqjNqrXie/mcuPiu9JIDD9QOY=\",\"H57T2B/xSUo+VV5TLOwUCFp9KJfKchz7QWJ/04fUxu4=\",\"EgLDW1N4lhto9BBBMnDGxetIYfXwFokanTEB2mfyTCQ=\",\"H8aaPoBqtQB/uTCxwOiDdSnzwYNX10Uz8UwhUhR7aog=\"],[\"IGOkYa0GMVrlmSpToUu1mDZ2JK/CgzzLuDr5LKD2ozQ=\",\"FL4snupnCLgFV4T/em6u9fJCPs08mHUH7bTVf0ImPIo=\",\"HJTjAI5/scz5s2o7JytOv1aHLp060J/H/si3Pz7cjb0=\",\"GcM6G+8mlecs0TKnjEiT12JUD6LrM8VqfktviKFf/fE=\",\"ASnNpNa3WKrn1jahE2TwgWUYe/t8/99RyQ5/b+6qRNc=\",\"FP2RN8MIYSE9kIGYLpweNicYA3G/e93mQs6CErcKWtE=\",\"GDXDjfsPFrHsijQTl8+2YxfdVDxIhS2OqHWCfi1faK0=\",\"Bwpj9NsfY0d6ckXQV304+Oy72f2KJTrfXjbIbyhVmLw=\",\"HEVG4Pan7HaSM9DsVe2zz75Si4Ru0BXkHQY7ndQr8f8=\"],[\"DFdOYo+EtrqdF7nSv9R0fgbdaM2iOD1kzjZZJwmMBG8=\",\"IeEUtQ0RMD59XjnWmrw0bYwGKzvHC1qI4NBMEEyJ5XY=\",\"FcS7UzzgVCLTIBzQShLZdt2NS0H/t328X1iQTZ/uA08=\",\"FPRfRJfEpnyQ9QvvWK4TLFRFn6z9qaav043QYRO9Cc0=\",\"FUCTskuK4+TH7LEc5/bRAyY2bEEBU87DVDuPjGlvX+U=\",\"CA7zv0zw7h1F5uZPtBXHa7kBsa6ALH3cL4/PmnxKj5E=\",\"EijCP51se3U3OhfUIfZLWJ1/SGUR+EaxnVtaekroiN0=\",\"B9TTrnAZwmrHA4uGbrXwuZE7VDFdh5BlI2wg7YfD8vw=\",\"Ad+QQhZ9uUjpwTffNliBohN7qor9zHX5mF0uKlT/KAg=\"],[\"J2Qo2IBAo+D0QkJNL/y40Zvs8/tsoCwbXGG13cU865A=\",\"LXZPP53e+gZrRJrN5060JwuBnO4QpBJavrCRzcogR1Y=\",\"EGkTvE44u2hoJHo92yP3rBK3jWiN9MtMzg4qACcxf8s=\",\"KWjeOSFvPwUQf1cVyokcjMmiOIk9fHXoaEgT+bj0ifc=\",\"IPGUuFPDua73p1HTki0XQo1ZWgL26VYvVo4s8HySiuA=\",\"MFk+UCrJtoVhMbqNGH3+jVOtINTOejuNie0ijJEEVAE=\",\"Atra9E/n/KSYjVd3+TJKsqqGBt08SrTOwxjg36nQLXY=\",\"KzCwsl/FejfLRnWQR+TBkGotZLHaa8gEjWg6Oq4QWBQ=\",\"KvYg1Jm5CxuL37/tQ31ccf/lESsi1TijPJURz+Q0z74=\"],[\"JL32EBsvIjF06GnWrsvo6lsEoUw4/fFJQ5PMb9s+QqU=\",\"GogDmGr1qE+a6rSfBIxn7m/7RonvMctR7/WZd9JQxMk=\",\"LJXqIvbfbAl1FWsI8WUWypBagoqqL641xUZbyZ69Cwc=\",\"AXqpEZTqPDkDDhdgPZuLuA/f0nH8YDGAvw7AtJIGp2s=\",\"D2iEiFo3a3W4HtIzKUNyz2XK2uMP+aZXq5NZLOuTXJU=\",\"Fqc5hZj/xBT3nW0NzBHrODC8a5eReuHZwEhvxqFiVG0=\",\"JZoqzI6H5KCKOEGZ7jvcA996OhsHyD9J//B7TaSeTuA=\",\"Gc+oN/MHSfvTOSXqvjsiJFLcT0VpyCbmAvI5cAfAqFg=\",\"Ir6aWtnzaVEpE6siE1Nu8eqSfZH0LGnDW+kHHTII3Vo=\"],[\"GA/KGEFQwONUtLOkoHWCTUto6CdJQ/Tdiwxk7KJdxo4=\",\"FUDcMKG5rtrwKeXul7Y6Y/oaR6fFkwTivR/nlHzmd0s=\",\"MC+/ZP5wXuOjTjMhGTejy0h4OPOml+D3fBc5mUhodrQ=\",\"IC8/KPeG8wR/cDBCiHi2c6MVLAUAh0JjuZ8qPzZS7vo=\",\"JBRXaOYWvfFrMJngnp5W8RTD7m+m5JUTwsTys9AAK1Q=\",\"CA7LEzYvRFECht+Y9patUb6xJAFPMfyMvZ0trf7eXlU=\",\"EKLdfGvc/8r1sANAcx4toCn4HepyccjBmCUGDL5dtts=\",\"F7sSXKutnqU1MlYpy8pNN+XzCjvDx/EtGqG2MyaXT+Y=\",\"H1V2UFq2z3atuIuKheG/99HMs1aREY1BgANP75DSqHM=\"],[\"EHJtz/hymchTIVmXZgdjPxvCrSRFPBurJrcmuC11brs=\",\"DwjUf0kXH9fWA0YUWAU/swWWASo0WspebI0wfF72gTA=\",\"Hh5Uu1aCZSmjf7a3v9avQNydpw5va99/yJeHp6LtB4U=\",\"J1wKwwRFyijHg2dlyYd+Q58LEwjluLW8ML6VgIybfAM=\",\"HT7NhiTy+8eu5Nvrkf9EKgGLmmCyPX5gfqnrL2q2wjk=\",\"I3UiRm6K1lxxVxfFJz1lgVoQGFSYyecbSPtEHZC14+Y=\",\"HyO3YFhqaU/9fLonV/k1reUrGzWTlorangJozXH27WQ=\",\"NggxJ7SpoWcZVMTsNB2rjYQZMixyIGEHWGG0HfYxqQ==\",\"I2qBP2I1VGAUrDpH0gvXW0tjV+BD4fuhigWsWamt7Zs=\"]],[[\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"I3bK6s5orH1VBMM6Ihn1x8WtJXhM6mKo3wCMT8q1DQc=\",\"EXOKoFTboZSy6CAT/rIipCV+rsigHxMfxlfudm9AjQQ=\",\"Img6w8acsRvAh56osqXIiuyyItJcaKZgovSZnN4WZlU=\",\"BxPHnZDqTwRJsBAx+2FJmU/Jt2T6SUo7C7rqUi1OSNM=\",\"DDchB0AOH4+Ok5ZMhNpG14GXqgRWFKHdcA8dzmV3lDc=\",\"BaushwvKQT2074THG0Rnb/fnx0HJtePzyO+qc+RGwCw=\",\"EcXrng5cFmnfkCNS417/RRcDPSoqlGqOX9FJKjoUEik=\",\"IMr46Hc3IyuMQp1/jpyYJ81/ypLLwVmjGVZ+ZGSAx8o=\",\"AYXr5ax4gHT0h0jItPZlZKWB5hWz35x4/F3bcLgEddM=\"],[\"L+Qp24Bo5huCYk8ldmJzzZ/mNo/wl+q5eqoJvkxjDic=\",\"Gx0dAkOF6KO4HENe+QeaUtzsPPgRJTqDMl50MkQ+wCo=\",\"Cl8vGcSdmubW2KyrOpRLkyIaB056hJOd6tglBgYxIOo=\",\"C6iQPFo26e1n0hsil/BmFnYNi+s++Wxp3JyEO/UqMBU=\",\"KoULBxYUZJ9ubqTEOC16qZgXNoSMO9wM68zzvXlcZd0=\",\"IAkMjGsuQehBeMBwDJ+BseEosV9lgGZIxhZsqHaaswo=\",\"H5xcXNWKaCphVbLbOSPKzBlENiA1rLLu8rQh/lvZH0Q=\",\"KiGQ2vnef0a1yAI1oKRoxoImwZP/hsyKb/qnAzYm0JM=\",\"LatHgYDUfhl8yR2i8f8wvA+zXak0ujjI5Vh+AFzcLwU=\",\"DDiwVk9gYQMkJoB5SWzjZicdVpPtZkamRwrO9Od5qsc=\"],[\"LnUIZ5QkOQgzZdIf52DH3+yeNZPGfeEqQlXGsBZItpA=\",\"B30hwdsN9a78SoJEIWXcDGZxv3yK5wjI+bbUSwM/ITk=\",\"G5dKGzl36L9nk5TaK3Auck0v3oqk5guDxjHeYQ0e6zA=\",\"Evd8MUGQ/2SexKYIeAw+970GWQKALyvUGpOgZm+4qQs=\",\"B2JsaYrNweTsb9JqoZK7M02WoPOTXlqIqNer+9reTwM=\",\"JpqgOlr4pI4gujFHlDwH4dGsd2DtrVjZ0D0PRRV5NdE=\",\"BF9ceU2XBrQ71x8qTU83a8u3bHJ22o+pQut2aVXFPvo=\",\"Bv93xMRkMw3u2RED1lIzCAnRcEXHXMok6LGwph1XKvE=\",\"Ap5Sk4HM8/gPxdVLfDmt//jC67XfuGdFy5dKIelGdFU=\",\"BrUPSQElrgvCh9AY1gxNZ1LqP2GtPpOWIsF3PfZ6f0o=\"],[\"IyN5halrF3/3wBSGqw1gPSmZG4Mkq9awfbuW9cIboX8=\",\"K5xA6X9Ofm6vTTQrQg/K57/evDRgwSC3pLmSQOoNtTI=\",\"Dd+hYJeHHbsTN7XteujSvKHlukTkgt8T3HrVk+8npbs=\",\"Fl4goqjqA4L1bfOa3grMqrCP2duKdle3TuVLEUOTru8=\",\"F0ub6PNZhjmT5X4h5Mb71LSk0znZQ+3h2FJV7kiz/6A=\",\"MEuH/N1nPqCuWLunXCkkn5ZJE7IXCqnyPU0DiUII7Yc=\",\"J47DREmtHFGCOVpE8oJjFNufr6Uz5RilvwgglsJISRg=\",\"MBy+bkTpA6sZNTEmF3CSXazHG4ggfhj3k/WfaaQ0d3E=\",\"IDNDKEkP2Ggr1HBmIAt3+VCacqEfLZHUViIMYpKAqkQ=\",\"IwHTr0LUe0PIqAUmRsBp4EbufRgMYqXTblLdbyFb830=\"],[\"FczshXslk0/9Qpr5LJENsx0A3Bw/uDdFox2BMepbqoU=\",\"JlXJ/SlNQLnbuVZmCcJkyeYCx3fIcBsbK1QqXwjPl20=\",\"KYmK1BcTDEcuDB2jsBf3Fm46PrgEge+jJQPoGjdy5ec=\",\"FoHtKRc4HNEhegyaL2dTU5gqQ4yz6RCPpbIEjmt+Mt4=\",\"DcB1CS+PgwCe5zzTXlEawT7t9eOZn5v1tB7z4aFaj80=\",\"CDf9dVwp3CwpA2xJf838I/lce/+5CmLbXMQ6JeIAVMI=\",\"GdSJ+h+h7GRBuCtzXb8LhHiMVCJj1MGuUzXkkpftS80=\",\"DrJdGwMiYkGQ22ZnWds8gryXGKmQKI2GURZ4foxSc1E=\",\"GQhM7OSUVIKUfP5Rofb04uIW9bVHQrnXHMOEC9y7qr0=\",\"A6mb4sdZidzLJGvzGlj4jfxJTOJWnF2LGKmodjF+zvA=\"],[\"FxAq0tmAQ+VQnnbDMeayLV+2LQdHYIBqpnV2RmDrVtI=\",\"B5XVkU2HwNyPuu39Rq/dZFElj4B3kRLt/N8acdI69N8=\",\"LCAlSKMmytw+5ZWhaiwtVK2neTkPe91MT8lBfT5GPQM=\",\"GB22RzaYQetYzrehue+EGn8zWMxvIkFS3HrTwdOxweg=\",\"JueqLvTJHuP3BISfTBgfuDuGDaFfYvIlDHkuDuZsCuY=\",\"AXGJJJU3Yw6UL1rDnBSYvOOZlsFUANBS3LbLg5qkUyI=\",\"I7tKdvebd/n2tJQO8lOMfWDWnx/pki1mz7kq+dzQhno=\",\"GrgKi1+9eSPwz3lwfVb3Z30Qcekky0l0hnZqTEvX9tA=\",\"H49MQKDP4NBWA0M6DtLUJMf9BAB3sKFkLCV5fCDSLRY=\",\"KRd/aYvFqJfvmqa5FRifaJ78/Yjz2o5guEubzMKuM7c=\"],[\"Ck7Kq96dHqEcgdr6jV1Iab7nrQv063g5e3G4+YnPmBI=\",\"DAZveh4Q0A/T6XzYxnISwotDQjsDykrAPvtNijdq4Jg=\",\"GmlHxOh8oMMO2fRwBOU7ekVFWxTaQfeQRcJAXS48uFk=\",\"JIH/Se1iWd75+mRsFnyIZAYcBM/AIgUfg++KPvjbWBk=\",\"DBNpKty4ZDeoYNYpbXS0JT55DK5vQWg7mcF2DQmSHTc=\",\"J6a+NcReX0ay7KCu3Zj2dji2ZFrOz1A1HFqfPEKLDic=\",\"BGYK9OY9HJ/28Fm3Xdhw35OJgOQ5hcVgejjcCsjSc/I=\",\"LrgwLxOB2RGNnHE9UOEX+Sg33KioYQ6d51nnbo7ph/k=\",\"6fkx3ZI9xDmKwSsQGqe14qIvCcqkFv+HRYIf8WWwfA==\",\"IJlF/kdfZ2f2aKvAReDEeubLJc2x79VYbabE5lXWjoI=\"],[\"DsGCFkj93ESKFRKuzIrDdxSSOYGUD1VCc3pGjU2IfI8=\",\"EEkHbY3UP/xvTqEKgtzWDc9NYKISWhtNjE/5VOfaM4A=\",\"GSobyOfdYgMRagxA1YERhQ7dW1D51uiC0W+V+mp22A0=\",\"G+ri2qKml6/ZsTiNvNbJNzH7tOqg+kOfkr93d2kFUpM=\",\"GjG4dpqDjfAzSOAUYrVk4IhJlV77lo0fQTQvAv1ifeA=\",\"EvG9kFhZDKRaduGbWJH1v9yV1lM5SttPMgkMYFBd5Ag=\",\"Cqw8ggKAx2WDId96r2knQDL8zSG+lhdFgqjAyd5YAGg=\",\"B8IWGD8DpLfHcHDGizeQsxtfptHfWuQkN7aiKD1biJE=\",\"DanSEKQ6rk0TYleCNB7OHQIhvW7g3Epjm38TptqjyT8=\",\"DA2O4KCAIbrKeleZ7XsDc05Lm9NUMCedP3su1HPEjG4=\"],[\"JVpJOqS+zZ0TfrdpQcQSB4TBIz9sX99dZcCDKvVD5BU=\",\"GaBdxb3xJDtXR0UZs3W6Z72D4SKwleQnLBT5ZG5zNmY=\",\"DdMTRxNrLron8FKOrhwlpxDDcHvenf89duy+M/GIuwI=\",\"JIzfJll+B0bQHYt6sOn4iqRS2Q7rA5269YZWOUWXL64=\",\"JXGM7FEvoTf4pYUVEMruDdLAAK9Vrwne52fiCEeWpxs=\",\"I2iLu5zxO7e7ly0NGNDgXFG/+WulMUvvCvLZEtxejR0=\",\"HujFRmnm8KsftqVMgJ0frSE+j/t6e0A4fvWUt89Q9PU=\",\"KC5XitJ5nKNhkbN4NYibym4ui99+RBJii+1eOYhdaI4=\",\"CDFhaYkWjVFMD6FR/Dh0uM7c+I0nGF5+A3y+kzkQIuc=\",\"C8U4DzSQF1so8B61zqORSSTfKx90XTOp45q4crGcT7U=\"],[\"Eg9EZwMBsUNSSSlNmDPVngFoKvTIZYcZcnZ4/Zq37y4=\",\"KiW6xmDZDYXyL+gavcgMQDqG511PFDS6LtoxhNxfKDM=\",\"LRkzTT61qXgfO4EFsLETHuldQBLn+qz3GGR2K2/McBE=\",\"JntlXyaJY0FJKs2J7ceultvMJBYdHnOsZS6lXWHvw+M=\",\"HZyK2XP+rN2tFtor4u1+yiNbO9oBUh2pVvHIp9ZepYw=\",\"Fbn/xmr1rCqvvy3LGZpXu9M0yflx2QPX2n/WXpIMybw=\",\"JYFKgXQS6GG0MYmF/zy3BttuVt7OCMLG3CBYTtb6bHo=\",\"BBkOLhz2E2ArozHQGFtDyWD/XFe8L4b1yLzYS5XHiaQ=\",\"DjmZ9S7Q7H9Ib/FQrMhMJmru5yUpI0oBCYj5WhtYhf0=\",\"H8/bQ8vXmS8AiKmoXJXkYhhzZmEFUQ8lrldrwI1/IIQ=\"]],[[\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"JUooJ5pYyDj3OSA0qiHVGuROFElDPZCCS4F+RLkM0is=\",\"KB0szVIbwGDRUiI9RhlvJ7BI8zzm/7u7CITz1cZKYGE=\",\"ELOIzgx4YMinDE6QPmGzv5e4fjJMkVDOV2qt6LLQah0=\",\"A+0dRrOe1lUS4+TI1TzB0s8RDMZeHWWzfx5eeFpv5uA=\",\"C7rEcAVz+Vc6EjrGonNbY8SN+Sp8kc/R6IGGoGGhAtY=\",\"BAg+I/lIeDwy9nHK0DlXlKLPqKocHLagwBBVkJBLJZM=\",\"H6gDR+G7JOCFmXWMiVpaE/vGPfFN2QY/XuI+XKwWO2E=\",\"HkZceksSOYSTdgWqB8uMuDBZHiLiW02U0u/vLyXBfz4=\",\"El/r46cg7ZVvH991ZIJg5W5n0y0OeFeI0c+X72H2/2k=\",\"Cj59NnGiE7MYSsROp04SCFz1OAxoitI+gwDmkzPBI6c=\"],[\"ARoTGjd4w3dCM7xUCWQZ1GPTq7rhgyKn53pRGIFmX5M=\",\"EfPu/nYp5lXqkK9wYbd1vf+/Jt/LD2elV4d05LI3N20=\",\"AR+JagjwOcP+SBoD4LjIgO2/cbeD0Wn0v/FL7V4bXxU=\",\"EnJwzmeaEKm5NkUmTtJw2W8Qnj9lpDckDWKeWe/xss0=\",\"DoGr7bz3fQcGtqSnQ4tanEIlexIz8EJiJcjUEN5YBvU=\",\"G9QOSxPA63useNJlBYalnyi37ia+AfoqZ35zQHi9whA=\",\"IiAu4+LfZ4JprDgzuH/SedHQRfxC6zrnUQcYitDjm8U=\",\"GWMBt2gf0ogu4Ib2GoPbR1oDABf5L3Lc8+vq7bxXFSA=\",\"DLUX2TN3CaVN2VjGSvxsithPyi9Z/jCY90p1N96+DS4=\",\"DZvkLOi7dr0knTa6LYxacLUtIMnIaGt8/jRtXHK9wVo=\",\"IkDi9ktvW6zbLWqgtESIepHRzg6xu8vdWOpxSZt6hdU=\"],[\"KhirTcR3fhPLg1jBxCMVNXDRy5CVRCQ6vazUVHyOw6o=\",\"Hxn5uRabSXE7++WRVM2TqsGdA7RmhzNHP++sbs6vmmM=\",\"HmQlvqnbjuRmd37HXTEDzRGtbtJCg6CxiLWq3n1JbNQ=\",\"IuLWS8RIQblruShpcEORUNcMVfjWX6efGkqzS+/fPBU=\",\"IupxKpcFnf2K9gTHUuR4uNiDMz5nSbKs5ThfC6hpf2c=\",\"DBn8U9bZRq89f7edjyLEbfLhsNDyz8mDNF2zKHxEhT4=\",\"F3gA6JLN5tz2bcscM3tvf29s21Tb5+Lid2q7/aH8Z68=\",\"Ez9wagmelQIeRreefw//2yENh6TbHRKb1vpfYhE87iM=\",\"LFQKxFO8lfthrYeaVhJtX+x+2TANVFk4vNgML+7no+c=\",\"JXUGHJoGllShlf5BVUrA9AgNyPfoCNZ28/M8YVl41ZM=\",\"KD10h6o7XQ7enHQf51SIJ3Zwj5v2jHRavdOCUM5wwog=\"],[\"FuvXgsvPbWPDi4eyfbKkpa9YR6mmCInEz2qjGNaGax4=\",\"FbP+MoIWgn6TWY4VQll56dxNm5q0IfJa7j5JvGBn1rw=\",\"EcuWoJS+QJ7KBbxC9titD2zwnO8rKG/llF1YfMNoYuo=\",\"Hlxs6lWYPJkXYc9wynf8F8N4moAj0nUlVLSdC4/Rvn8=\",\"JX1FiiiDx2CyleWyeJ5qlCuNUPpv0+sJOpargamqaT0=\",\"BGA8NcmMHjebI1ckuzCYhem1YoSmzbHNDTlTJwEJvtc=\",\"GylX8MCF9Xi0obWKIRQ8VR5UUexGufv2/90M9uWGoAo=\",\"AXu6qLDqgyRpv5M+xu5ZQaG/l/C3sfawzj9wjUN5U2U=\",\"DKDHdLG9HCsA/o9mmMsIAi5KP87PE9eZU0hckFt2+Kc=\",\"GwJlckoA39ugAch9zXHlwEc2phghsZ8w4CpLU+tZoSw=\",\"Kd3HNrHX/c4b9qL2hHAnA+hXs76BWZ5IWTKhwD9PoW0=\"],[\"ArftR/rCddNPhC8JsB75QhAU3gQMJqWRWVsie6e8b7I=\",\"FaGvFfH3p3pebnYEcOe3zE2kjz/TWxsB8Bk4Q4HjcTU=\",\"FYELqibLqAnCknXeuv4oWc8jUBma8jK/kgSWxTFZR6E=\",\"ChyJmDGItSMBAsITzjWp+kl0PFSQNW+jBahXjHFvcgI=\",\"KpJDxqYbK3Rk8i4WAwCea295RvMctxz9TSkWAUWOw54=\",\"FLIW2Hm2GUnIuy/21DvH/DxjSpC3ZvInawpcawmTjLI=\",\"Kyt525tb3GoYRMTlx/M4BtRK2GRPoBF/W7/XGDdUuvw=\",\"IPVoQ6tm+GYVJ093Aw1mLh9s7CEgFeFIlhOf9tKBFtU=\",\"Dyox1GEldszAywA8V60ttyMAgAewZgVNEUqa4y2OYE4=\",\"GiZauWKjeW0stO4pgP87z6A+jWc41ZyM+4mct3H5ph8=\",\"BffKQk8CM46BknqJKMDwL8eOsdGgjDv7iWXMe0PY4FY=\"],[\"DF5J4xn7lTUHPwf54FWsyvPj8ko13LRsq2ffxkjvrzA=\",\"HSK1WgtxMp7gOtvXnAoefTLvxNdl5uWB7LNJ4pQPOUs=\",\"CCWm2ozwITsYH7pJSZXvH+3x2Gf4x3fduT0Qtk8fO6w=\",\"GJZC2QB0tu+J4QLu/v1p1NaeEGzG13KBuXExX+yj9sQ=\",\"GXa//hBWIIWGLMWGo8v/jSYAVeHKOCp0MyMowOrOyvY=\",\"JRldY/O8MMKJbK/LzKH1tz70t0kpNZWU5EIcfJocj40=\",\"H1I6AVJvG3g8LjdgpOfpzPit5OMrVgAtFbruTreURlo=\",\"F8tnd+ZTKefFEBQqhc83gboz3jzrmKS6Ah14PSEudJI=\",\"EwjCubpEFjq3GQxMFRx/RPLhnrGG3IKiRDRGly1mfsI=\",\"MAb9mOoNnbKzMUT4heIBU07c9MO6bpbYoi2yvP6M7Ug=\",\"FPJB7NzKabAlEI79D78A7TREjnvYBNXoWoNWGXkUaKQ=\"],[\"AWHkrlstJM1ji6XDK8Ixe/kNQE434APxBV2aluQG0w0=\",\"KwTtn0IijwaALAtTfdAUIX88REZwoMb4iztc4AGwGXs=\",\"DaSOuDAEZh0B30iegVa3XZtmHGGp7hMp+tA+90Uh3vc=\",\"G6HLXfD5sjbp98T2N90ecHhKKwf44GIIi3LDo5LUSy0=\",\"LCK+jlt/fJFJDEbCegnpGHLjYcHmYoeTuWdFaas8Cx8=\",\"CDUR+ZbJ9BXb5WeG947Jf9jIT11P+9pFSzxNWQHskqY=\",\"DD4TugcHVnNVIgl6QakTj1pEy1hWZI2vcLyhANI0axo=\",\"CxQzkwaxsuMRTlCwYHIV0/krpoRpDXjSpu5BenOTPGU=\",\"JcIEW+fZqRVWLHi8HqLZVBVaAon5AMdXtxOFlu3Z22s=\",\"G5CbIN1S1RGEtY0SOWK3+yLL5UiBEXJw0nlALEBW3Dk=\",\"Gv74SXUA89iTRZdMZ6IfHhj6kw99eKHKaRveJYxeLH4=\"],[\"Ijx/xtJPxT0bQo7bjxxS0gzuxZIYfSx6awsUe2KSuB4=\",\"CL1ghimxMrDXQaMFugACuewUcEmfXArojibyae8AMg8=\",\"I4tGFA7uy5oyxyiWJraS3OE81RvDgS8bDYZpRcDgjkE=\",\"ClyiYxqDeaFj/UCTbmkTr6YMGFC54EtiLytuEJ0Xns8=\",\"FlZzfOtjotQ9Ri/9kCgE0RKDggNWABlh8SOaHnzSMQg=\",\"Fo33QznMXGElU9kc40tE9gEjqkDoSG4xd874SERSm/4=\",\"HRzqY5ObIZQPeE93wPee1SO+tt9UMpEZMIeLWfksf2M=\",\"Cido7g7fC35eaac05N6BKRNrkm5a0YkebPV6XDmhTaY=\",\"IsV+VomCK12THnSN7EbF5kwEBn9XnZa4m2CKtetaHjg=\",\"HU7pDMPO27mXNgk4LFe7sbdin8U5i6YuL496nFVJbKY=\",\"D5xw1u5bojfwRZenEnjboDFRo+/MWUz+Yd3xa1zxciw=\"],[\"GuBg45szjQmEXi6evrcL+3TNSvkmIX9XMr4rbLf+cqY=\",\"CB5RIXnCe2MpT9yVisNbkcphyz/Nvk5mHORl6zsGCts=\",\"BkvZUgh+o/ck7Kq3q4kccWQUgkez2VNFCFWfKQqyxFU=\",\"D0imq6GBCetBUJ0WDStuK7dbc/LTYLFC4iU+mShaYT0=\",\"IUR2UFOQL7wVd1eOzPP8GZDP+8RkuNWVXjh2U+Qn7KA=\",\"FJF4824qg0ginU5fgppTYghkt/jDgprbHOL0+PYZipU=\",\"CeZR4Q7B/pi6K9I6oFaWxLxazSM3F7cGkGmiBjAffhY=\",\"AvmV+y/ppFfpcAMEFreBGpOzGz8u18cwADTPlYV1s+8=\",\"CY7MwRB4BtkFE59arYfE3+n/DR7swd4w6MakzqjFHc8=\",\"FyD0DWH6wPZkCAmbseNOOkiymtBbiRCnvCV+Ad4g2+U=\",\"GPzlDm9RZE4JaMRK3toy5ovCTCXoHsN85eh3E4PLduY=\"],[\"BGGRq0HpOSnqUfGQ/U53OsjVCDMo1LLwSCjco+aQmMM=\",\"BmLyEiOkHTdmhASnWyeLhoq2AuMT6MQjeYtHxH8fVqs=\",\"DrrwAq0xeCdXpY3KGylbLg7A/zEVqMkx6/dP3c+3NM0=\",\"HhVnu4Y2YmNXUVpAsNXr6zUUIuGazJu1t+39qRZJhBw=\",\"D9zrOuLYpV8Hgi17kgJu+D7ovDJuOos1Il1Ye93iUgU=\",\"ATDgyYPeCtbRXYdwaY45+kVp84hI7gV1eVHP76HzOP0=\",\"L3viFhn9X3wF4x2QYHrMVeNvy1tsVflwFw5mDy2Bj+0=\",\"BTOOmEfU4paS8i+TiHXcxWEEZNc5PG2H3Xmbs7v4ENo=\",\"DcClyb8NWzh4XfWPsi7eBnCerIXyMGOQVrvxMzuaLSE=\",\"EM550DC8EqQ/C2//DYhMFcJjETs6bOOyQxjwpgFk9qc=\",\"IykmB3qvmm5C6IUpDGrXNvKc7cmw7VxaBTDkBdV3VrM=\"],[\"FLobU4Pjczxj0Awywrv/2OVFB+0zv3VEyGOIGR7KPkA=\",\"Det4HjDs7ZE8IDI6o/hr5YXUzOf1VqvSwqCBW96Ht3U=\",\"qHfYaKwpPM7A9VnUjj3O1gyB/vgN3/yPcJBWZLO8Dw==\",\"HWNdEmelE8eL5yiOWEJU9TASs/eVUUfscVNTJ2DGydU=\",\"EgqVZJzPiZ/DqASOxK21moTT/1wpIyj2zzLuDBTYIno=\",\"C89uba6gcqU5+hAwphvQxvQl6Zgihu5GiuKre/G40RQ=\",\"HEpkZMhn1D61/c6Kcxhn4blzCrII++d7ycp8oBCnQZI=\",\"BWLmMJmnYwMj9wHS+jEsZUqJHmgqfgklQpwDIfYVViE=\",\"G7KspEWUR2DrAuVzYObT+ukwVtw1f/DdiILQiYO+MyU=\",\"IQ8Xqdko609CzI2/jWp4ZatTvQOBgMmhyaUGotuwYCo=\",\"J3QlpZcN45Kt4T9u43UmAAUIMNO76jVmQ4kkrVFZ30o=\"]],[[\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"DIlKFQtwFU7Tx3wXDflHdprG/Y9BcNNBYT562u/GBcE=\",\"D3hMJdNJf7fwWNk6964aGCvqAOvCgGwZN36hmnfbNGo=\",\"Gk9I29oiCJUAtAJUWGfjQba28UvO3WarWaHxSC5PLYw=\",\"D2GwvH3FkRun01PiAaH0gM/xFqsG2ec14BiJtogHg0c=\",\"FfX47QlZSMWPLLYwubiSsSiUKcPGFp8m1FActLJOfXI=\",\"JkTIAf+823lqvxA246JAUUxFcI8LsGFtyfVHWrfd+Aw=\",\"FVgNLYC68Y3TELvOQOBEfHhRiuq9Avw9Zr0PVzwbe0s=\",\"IQOncEth7O9CPHT8hk9XB3rp5o/t+TxMJLMZHAVVLo4=\",\"JUMQ3zU7LRxyB2802zrYI6o1t/zqcSRxS9UkPZDHiK8=\",\"I8KlSmRYjTZy4eEeBEn8o3NJAT6zBHKYLfiTWnJ4CNc=\",\"DiVUbXr0JbWVQYWmacY8n6JdPSaeA24ncEUdLLrriHw=\"],[\"D9VHhA86MKUzqZTR/bP2CuUHP0SE80vpUe4Wonb965o=\",\"A59eO6c2RY1mpydqP3/BQ/TS4QzOd5oCiPoEJHf6gRE=\",\"AoNMaks6cGiylZIEvZ31+eshWC2zAKxsybwGGIgU4YU=\",\"A2Whg20MlwrOpqZbNLQBj/v9IzS/wp6gUDAPvKWS2ns=\",\"B7L+fLJhKkuM5FqtsZJRRJCtmFsxaGt1y4lZOKmcNek=\",\"BMcsPpK888lFAUaSGVIFHde5MuBFxW0rjRIlxVegL6Q=\",\"GNRZZVSE3qSvXeiSLrZvrmm/C3Qq5njmrF75N/0j8UU=\",\"KNV1vwl4jmyfQExPKkeUxROTyf0mPOvCqrT1daiMHd8=\",\"FaeMXx1uAXbtTpMeJapCV259FyvCY7tbIvviod0Ja3Y=\",\"JTr5bcGRsd3MfaOZz3UfBTHi21z7rM4+/M8j6a7gY10=\",\"C9ZHek6Y7RtqBSp/5qPREfwkeLOBe9fC2tixqBPdlEU=\",\"HDcfQpF2Of1ZmS5t7bWhRLB5ol8kJXiyG6o/1v6YtRo=\"],[\"BQGWcb2gJmcMf/qQgXlRBZY/Vs4yf894RR+6K9s6wcY=\",\"HJgH2biWjY9iBkDVkPFR4JFEBq8hNvkCUhuPTaGc32Q=\",\"EMvsrDMDZnmSxTfFTersWKNFKKL+BBWRqY5kqNbaVYg=\",\"AbwyMErUmBKgUYhviQThrwp2FJIj/nLpZSOTfzOaXZo=\",\"FdyR1vuYe73KmceN2QpXs4bpuf9+Sk+vcNWuGPQx7c4=\",\"IrJqdtstr+/M6nvnbw4TmgxWjpKkR60oglfvMQeU3yg=\",\"HHZlCgUn/pKb5Up+ikfvxlS1FVR/nNzVjBRqC9EYcvY=\",\"I9O53uy6JIKxB4MkV/u+X/ZwphBpzcNKZHDSKTRxIx0=\",\"K5prFw/5ziIkaqC1CRp/M6xaGzmQS2HwpzYMQ1/qpZM=\",\"AxYlgnHFwr5l1eQbC/b5kXyMYJRNG+f2CJEjbN5MJnY=\",\"AcZ8tNyY1fAuuW0g8RNBdzls6g9P5MBPhWsOLa2OG1Y=\",\"Jaj0SQpd9OHrE+LhRuDetN49Yz0RvEpUDFpqIZNLlMk=\"],[\"KVLBjBVVjymyrnf8OeUaOV8XOpCX20BNt2WrApBrJ9w=\",\"Hn/PUUdoq7GAD/T0iE/1u2rx7nWBuW4phMKyxAMzec0=\",\"IYKNYD7gx2UcCjv2sYIX4f4z8oO/6qH6nvnuo7LDL7o=\",\"DecS/KnX314PZ9PrcxpT38fRp8vcw0QR9hONbeYPo2k=\",\"DFijN0ZI3jDtgqnuD0KU1JNxD+gT7fpGsJqvRLPObYY=\",\"FL5VmCISrlTLjwzkKhYqfstECkwMTXMYlSjksS005cg=\",\"CdpweeP/YyMp7XaswovNKT1p+SmPoludUjH5YR7OLCI=\",\"LYZfd6OSVa6hspxIPrSjrL5/3ZCc8X2RoBABQ5eaGLw=\",\"KjmjCCMVgtCh0AO1JE+7hViN4d86yGbbwv7m0dgkjA8=\",\"BHTFgsWe9myym5hPbkvZe/61pBxkhaymfcBVXtHupho=\",\"ZcxQWmka79I05XJkD2xzGZOq39tSmpq6S/Y3euKLaQ==\",\"Kq7xUsQTtO+ZG8IoJCgi4qY3eq6tx6wi5QLe89g58tA=\"],[\"I1OmCva9YeXqwsmkJj1FH60HOAZU1HkjeNr3UuXMM/o=\",\"KNCZeULDs7CkrjsXujgsj6ThgJvg7HAdAVAfFCqkAfM=\",\"Ds8A9xsYFM7U9lJcR2WEZECqPTnnug5ORhC3C1o4IJs=\",\"EljVpNSVvUvmxwSZLdw+ifeuXGy9dDABRJH9I0von8Y=\",\"MFE83DFJZjmZA2uHrxDEoYP3FyJXK02VjP6p49ymGMQ=\",\"DGWKupDeFVOEzU1j4oWsLQBM2VouldoVQO9/EjfYUa8=\",\"E79QmMwFsQNeLyK9R6tAQditvrU8QKugSnX8XSQ130Y=\",\"IznGgrcITQTTybYHKyC2OxIAPlxSBDxjNroiI5cmmlo=\",\"LNNsS9glfPdINGY/zB44viw/7WT3tWjh8OsMJpsOFP8=\",\"A3tb7uzwYMtz1uCOu5hOtdkHWzGxKPo+UjTpaQNqtcA=\",\"EY/FHuo3VAs1vCrXfZGvFNrMFS+G2xV/9MSNtY4yUiU=\",\"Ke/NeL9ba3yYEbboOPVWOzSWBqGVl1HWPSj6TBEktb0=\"],[\"DtajvUgXTjcLTyZLN0iLA6Xj9MD2HPMtMVetPjuG9r0=\",\"KHzYVblId6OW05wzbazbE0Uu/1kXqHftzhQSt6sk67g=\",\"BPBrf9zDGWBdA4iBy0f2F0jx6fFNR9z4JKv61Hpzu8o=\",\"BO7wiG45gWO58ACcggTPLZsKSjD7AZs8xGzKarP/5mY=\",\"L7BFZ60npCpMouqQoPJ2YOHhCs7+Yt6WYHqiZYNpWTI=\",\"Hxx8a7vey3rYosipG5g7B19JmPxiDDbijitZB3q1dwQ=\",\"B4o/0YDXbuqSLkI3/WW7g+1FYbJodRog7JfT4NdGDSc=\",\"Ec6NZVQpR3fhYc/ZHKhqwvz3G+pCKPiuqFcYfVebYG0=\",\"F2B7M6EEO88DTEL+q3lQeoJIiAj5iP0OE/LimCzlXgo=\",\"LJBBjHdc5E402d5y0Gp8LJywclGL2neCix6C/R0ZUl8=\",\"HPzttThG0JDnJSORTrM9bSeBuxj/GnyIXqwTJuk/ekY=\",\"Kk2EZDWAhIAMifb7uYv2nViRZPmmSPSNOkKqyMXL8Xc=\"],[\"IRA6eqIMjRVQG+jCNQTGqRLGEAxdiAhcwuQqUjAvRIM=\",\"DHg9umkDi9FnO8O+1Rr79R7N54OvlQZ8FN4S9J5JVw8=\",\"HPgL8G81JaqFQW1srNDoJRvxs6dxvkklO2DKg/SbI2k=\",\"G25mOqEocJ2Dx+WoYoSSeSAEOSbPVWeLrNjuAyIXhJU=\",\"BhRvYrFMJcFawI0XVvIwI5VQUTik7hGEAAo49Mf1OQU=\",\"HF7qeGP8pb37L0o9rX4qFlcpmDKatpWt7NE2+6T0Bj0=\",\"GXsT+K9w9kLoeAY67G4huol47yMi8tZLtRLr/HvCx8I=\",\"Dfzixl4iCZTdLequ9uBFN7Ne5H65LNu9fGHMYYmtP14=\",\"D0tx83Y2ZqPfznUXtnRqwDOyOS73QkcP9zZe5Zdrz8w=\",\"Bvp7YwjkSFc/P90Roq6ORNM8PTzw2f+GAd8gxVxqr6Q=\",\"I5DRY8LAtdRhvlrh8tz0w4wqpRTLIrS14QTbtoifips=\",\"IckSD5CYjP/QMv6xqsFDkB3pz0LqPL6DAV6SdctnkH0=\"],[\"L7IyVz6F1oxTbRAMOm6pFyiERR5new0c0PtNxMJ1Nrc=\",\"JmkT2lOfQN9RI+Aft0iyQXlfGu7a8feuPO8OVyjSOq8=\",\"L2kQ5QzIoU3dmbZnxiVb9m37M4bmK84NdMu0dBnDFXI=\",\"JP4FiT9eequ0TXBf6D+zGdKbUR66ALJwVWHGuwr9ezc=\",\"HvUnW0amX2ntzLOfUPuQzFeM5OUZ1UyOYcMeauBxCkU=\",\"E3VpUm7aZaMf78NSoAW9CxD/9SzFaS7cv0bMXwNTjqA=\",\"CFUndKiTxNw3XuTvyk27dCJ38H2JgMVFgbXU0Nwbdog=\",\"LZsHUHqd8qWHBW+YjHyqRGk6EY2q5mYOFgVh0nbINII=\",\"LJC0rXniMW55hrdXMEGP5dKx8lLneBc4XXjr+jRxCv0=\",\"J1++F8Zm9h9s9UhNsuUgg+hWxxj/K49NThfxMNKYnp0=\",\"F/V8gTdk5yjdJAOYaQQIznHcit+D5T9SV6w0tkOj7BU=\",\"JwD/AdzgkoB8PxQ0GMEaL522vub0eO3PcUXWmvZuE+8=\"],[\"MCoIW+BA/5pwmtDHMjiw0eEeHRdAmrqjT8Rd4ptUFTU=\",\"DyWaO34YrdkSzc2GdLD4+pEP27+tlnvYFrM8d4/to7g=\",\"HkPwqJZ2TELrk755H+JpKPkce90ni3yBCi9YgmgxS5U=\",\"JoCUq9Y47gFFJ5kA+HVeVeGt6vLcIi9ALR8I6klTq7I=\",\"Lhv6Ghrqe0TIS4ZtnnRF5KysdfguDqirAzJiFMhPqg8=\",\"Lh4uLyBllhBWu2PwTBdcFoLv872Qc/1/12598OjxLUc=\",\"A6KtvKeUW5pjZ3maIMN5RFlzMzIM2BXQVKV5T2hGDIM=\",\"K6M4MIgg0jLN0BkVT8SXdLDIhMf4K5rrzm6iEdspSZE=\",\"DPyy43RCee+shm4CKMGzRkpASPSRDRcEK6GmuM0SyOg=\",\"JMs4ETVXdb+bvmQxMF/+rGHH3nxinZpe+E2WDMy5QN8=\",\"JXVA5XGnT74+xST/WPGD7gVg1Qao0Qlz135UydkGEWE=\",\"JlLh4De//sDXvhNV3hEXC3+RbRSKfD7juo+kSBfUj+o=\"],[\"BoPmQOYVTvc8PNax0PD9huv34pLmP6hM8KiDwvH6qLo=\",\"AQAXGI/0ouDpsFU2yNB+J9DxlM8Gidg0ryviuT7PIKs=\",\"Kv08QCiyraXRlMWTu15OJxDMXDLtzVhltZ1MfsA34lE=\",\"Dr/hx060nMc7D2w/MvCWwvpiiLCgSCPikM0C37Xl28E=\",\"K+lrbca13A946/hEpS9sHVBWIjjb57lcR6K6TrwOHBc=\",\"Lusn8MWiBerXbJLu0KyKESwXFxGx0S0eBm/jUnF09rs=\",\"ExVgt3nICtjN0iqcO6gCkMdt52Gx3G54j3+Uk/hNQT8=\",\"BwOdXcdLTdL2oHAaMXm1ArISw6RQNVfm6K8Bk/B6Vmk=\",\"FrH6c2OWVJo4B2zdnfNswzhVQKwdfkLHmqDJzvxmpl8=\",\"D1AIyqW9/aNAFEZIKzzokcpJfPrEokyiVxoCqOzW54s=\",\"BCeUZHXARgsP/0rZletKnGCOJgAHWJ1xlbXPuJK65PU=\",\"CtLDwIOggJGpVmvynrdQaVLS7SftovwPUYlLXS4ortw=\"],[\"Hwnz+wf39kdvrJiUa3N1CV4BSyjyOgesn8cHcUSsOXk=\",\"K7AH65aFv6Nz5oi+U/XW2v1vh0E8mAXSDFeZM8arESQ=\",\"KyKt7i7e3UDD3MjhsV04CB7fWQqafsLrYwy/xSkvI4o=\",\"BqyCN8UBFq0zaF2EAFrnJMxS4P9K3g1HsZT3kjIx1n8=\",\"IXzvnhHAEXjaQn4rn3/L5MHxUl1207p8iFAZFUXlgpU=\",\"BG59iJWDekoCiU5dbz6o1RrbCtSJdDSrDQ6AeSU/L8w=\",\"H0eJhvGCAgPpkkeyP5rgZSaghchM0xZV+CwXA3sd5f8=\",\"A6H+5PXvFKUK8nigtiJHpmaVcIWKybIHTfKLCk6TA6s=\",\"GIojwrRI55rzS5tIZslU5pimFjq5Mm8l8t10bNE0fTU=\",\"HLCfrGdjI2RdMiwTxnbrRkVEZjjYP63LN8TxeIrMElI=\",\"Jj2ZgWHwYK7g5r+5Xxl07+Rm9zlxXpLCeBKMfxitXn8=\",\"JIi4mvnYVuvC+QU7434T+eHlRhRhmLdk4ODteEEV2Uo=\"],[\"BZjDjS4seN/kkHx06CMlyxkdUmCJVbWD5YJuvr0YV7U=\",\"J/56OHlyf0TaXQNcHuMP0StKbTekiJgbSQPZNAtnt9w=\",\"EQM5OTQcQVzzEyEhHjUXRMCDFAP1OmWDJpSzWt/qScs=\",\"D0e88Yno5LobSGKQ0MnuierRgYUNL/Kbl7ypFRjYwvM=\",\"BTCQNwzBDq36CdWGgQzQ2l7XBwgJmfEhHwCUEI4bPVc=\",\"AuLIAUBO69MCl/PsDd9eDdnB4KqwVSaOZHw/1HEt/IQ=\",\"ID8S/hnwb66qd7yLr0mDx2MIGnr0PcXnu4P3ieru5bk=\",\"GIN7ySqK89NyFMsnJLTIuQTmQWYOWkj3muSkmnvDf/k=\",\"CfBwbqtX8VGyPkuWi6C2u9T8gnAKzWATMzgnV6Fd4u0=\",\"Hn1twV60Zp+RSJmQHn3qqR0QKk5NVptAuaEdEkEWfvE=\",\"C8jQksXTjQh/nzT6rs7DpV7pFkaf9eI+YZtzRo7o61c=\",\"K/uW9473/gRzc9EYwKqgFA/0Pl3KvaJXzeI4VqZUtvs=\"]],[[\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"BdqYfxehdjIKghM5GJ0k/3g74H9aatuoTqcvoNf6qaE=\",\"FCtBD9+B0kibR3AnCEIrNanGw1gBROfz6UuXG/B5WF4=\",\"C5hDejEhUNgXG4GxiR88/HW50URzMZp3xwQ9jS7DIL8=\",\"AviMrIK3d8HHt1ESngvB0DhIESnFRugAB6amtzxSx/Q=\",\"KzevHbKdRRE+voiSvUG6Q+gtBF7u/KlTkPSn+BZjlBY=\",\"Dg/P7lvWEZ6hlpkrxY38/7pjLLIOB9m9fx9MBzjt92c=\",\"H4AfScxys8sa1tg0dLPpjMmrQnrJ0YB94VH/WRwtmPk=\",\"BauoHQSWiOxQn78SqiQCl+Ckz765HIfk0dcrrIrLM64=\",\"HvrtCii62XElccD3IA7TMuwTQsCKknB3TthIF//olD0=\",\"J2X3oKvnRlTJGCeHp9JS+WTD44yUah9FlXmSOwYbIG8=\",\"BUA4Ou4vd3l0LKUY7U1NdSmA8rXf9IM5wSist52viOE=\",\"GY0WDx+A54/R6TxSRNY21yGFlm6T5i3ND6jK0bdy94E=\"],[\"Ky/18nUxtvPWqF114+CPOi8NrDaApsJtVey/gDyoBWk=\",\"INyzlWY2IgbUs47QQid9lm8DCStpEPOgXlscMHH0oHA=\",\"LjxdW5MbpJyZ7d7TLk9ATuvvfrCMqWaNgskSy11ChYU=\",\"EckA87HHcyCBB00KWAkd5/gmpPEGqTCJnTeYxrAtdzU=\",\"LPxMTzV1pfi/Xy72tRikf6yf6FNVjVhO3jQLXjLv9hw=\",\"B7ptLs5BnXWzfIfamwD9J3JZtCMlQuqsPWx9hchneiE=\",\"KtGGlxerTFOdrB+VCZjFN9EBUEsAi0a0fSOe7QcC+Kk=\",\"BrIbboZpPeS0PyZ3GqNHMHvnj8lYWpH8KLbw+AKFBXY=\",\"AeVOoQ1rfPBge1IkeX6vw7ZRtJKqdMkq6acKaSoZZeI=\",\"AjtHJEu9AL4ZscgEYUVia6x5W0uiK+tpKBC9/0eUrpc=\",\"FrobD/VNrMnYj4X6a7aZiKBjOjmY7/QDvVXzUqGVGSw=\",\"AvyhY1R1aSgOlTqUEzBH8/koGyILDGM0ZF5DIUPtuqQ=\",\"JizCncdDmHPoYulLGUjq7xBo2lLYvUk/5EqeSLR7iN4=\"],[\"C2WISc5iC77v8jO30SJYAV6p+HpTkPVhSYHrbky0pfo=\",\"KBb65vzTkFPAnfdbxi91h15jVHLnkOKVqu4MgViWEXQ=\",\"BYSVYgBklrOjKWahpT0p8cZnqA5p5EmTEzGERW7MV6M=\",\"I720DcKlByx9DN6J4brKg8U7lj9BKUh8Gmj/o2z8Rts=\",\"IoN2fvIe476Q2sWqNeLVw5972uAUvWO2MDnRmwQvtXU=\",\"Gi3DWzwpx2OJXme3yj67nDRIRDHNLRCAVEzunQMZTBM=\",\"3yO1TJ7i/VC1iuEEPMfg3DoR8YPuD4Ff6al8rxhgMw==\",\"Fgpl29oLbxGJBtxQ4NWo5kzndl9DJ3AOEedT1zhuc5I=\",\"JLOcqyqBVR1dUp7VeYa47N7QKnZQ7t9nkl65761g3CA=\",\"Im+Oi//33NzRmA7tb4iiVmzZl9T3vsSE7yW/juhuuns=\",\"KqosEgK3Ty2rP1jb3JXq/S6knV46u0fzszy9TqE0dMY=\",\"D6oG+6lCHAIcYTO6+QFp9l3LRsxH7lMpidXO1UFV808=\",\"F68fi3HDZW7H0yYkBjmYZtkUcOS5EgQBMrkj+JHmNyA=\"],[\"EYEy+8HNg/lRZ8tEc9VMa9LEF+J4Ll7+oW5y1HtItw8=\",\"HfakxDvFxpdjGD02wmtrN/vV5CUt5LXDwNprgdK8AOk=\",\"L81ZU7Svmkn9kLIyKRmNCfyPyM6v27U1mbEz0BAj73Y=\",\"JMZreFbJpdeIGXcrNe7w3oiuiCwZrzYDn3haSKdfRQs=\",\"FpI5TBRK7OMFp/AnSaY6NV7W/gJL5TKvIVKg1T1ZCjA=\",\"Lg8q+AbEw3qc7gudMb5iYWp9xuul5R7ZhUwb4dnrue0=\",\"D9qP7XQcQ4LGm8P2PEjAUu94S49nrVc0UaQY8vZAESc=\",\"AXNKAzjAplLRR+psJv6qN4WArJHQyIAbOwak9QtYDQE=\",\"I5ECqnNIXSopFjlhK1PBDIpynwnb9FmE6AaIMyGZmQ0=\",\"FcgQP8MeruH9zOr1f/GYzqbuulI3lpsDYTUITNFeG1c=\",\"HOi6nlNTvFDsinytofsjimQ9bRwDRJpa0baCaAeCF0c=\",\"E8xUZzbIWXVrWWus7f2INE5M/harzUTfq/EjTfGft+A=\",\"Hc7LLcV708uO2a6uT7rk9A5//I3tty40yEqTGNmGNng=\"],[\"C1lEdo1hwbNWKldJ9PBsTdCFu1Yrg41+LvFKIf31JMA=\",\"JR4YBvGVHCoz62rjmv35vmuXHakkrpkgJG2YvENdnFk=\",\"KZUhLPfasNn+YJq55EEhjFGB2R4+L2xbageADIaY/t4=\",\"I/ENYjV0Z8fnHqzLc+x81cRNaav7kYSVWQCVBPgapX8=\",\"DUNeRWTTNwS7F27gG1lJnfhRq8DdW71ks+vfljXKOaU=\",\"/7QWWxueESzXfADqgfdR6aLUbjBx5b0wB/w6mH6ELg==\",\"DFU5Tw+6z4kjeLv89EuOlHWvfl1+I3O2XCBdqbG4GI0=\",\"FWPtJPRafmC2WgN5343IcaqrG1y9sk+fZ12utvoThCM=\",\"Jw3UL3MDTrv7zpGCpuQfuAzap4wGYF2zw0LA7cwi5Xc=\",\"ESk7rzZsB1489myfFKSJnh2YB0YPMK+UjkTAbUPTdlM=\",\"Db6S8dX2NeGCNUoGZ1a8EZwUBgVD54pGdQeYOnT5cHo=\",\"IrjZPXaom8NvC11qHsPGBTUQYicT4rgzSZunc9zAwhc=\",\"I7R40uTiHkeOp8hZ2j36cin2ovogou8fQG2fsKf2Lyg=\"],[\"KwTW/7r3FEAS2SxcYhKAPAtbzA17GVC4idH6bz5WRFo=\",\"D9rvCB/6QbKjxvj0wjpZgPhbMwG/w8NCyTgZnPca62Q=\",\"AzoTXzi3YAKPvUsicHkZErDjAIwgB6ibMGIQhvmUh50=\",\"Lh6x6noWhEhs/Pz//4ySa+JnDyJr2IPRFZGt2+p1rdo=\",\"KL9HO+ydiEK4TN9HSkNdpBCCBLCco1Etbvc8GdC+QLM=\",\"Lts5euR4KRufSO3VBmD7wbXX2QaUf93cJVunh9ArA2Y=\",\"D6FXggpgDUp4OQuL6sgar26NFgfX9Oqwr6XX7mq8YFs=\",\"KD+mnQawcuuLJ8fGVbccrsBXEkqhZpJAlxwdBPqIHDo=\",\"Dq9bpAJixf62RsTzLr580qGuOKg8SKBODB1FJzDWMFg=\",\"IwZXdXijrLanwHDvBkm262fFgiRmKJXUcFQv/5hPVXA=\",\"LyBGFJlBZtCp+r9r9dtfw9rwvBZkXw8gKYnenfl8EWE=\",\"KpPpaOr+LvVrbl74I+KdlrVRIh6ZTwiAbxSMjTGOeSA=\",\"L09oTR9pizrvNKk53asrgGlvIkahMlD4l41Zemog4gI=\"],[\"Kb4qQoNK4y3jMg+w7ka0wQKj0a5ExdzhUv3qtUUMnEQ=\",\"AuwxfUAv02M4CmPCBd2Wbgqf2t14uLlIUnO2kCsX7Uk=\",\"GsIe5MOvX41g+3jQx2Stz+DCBGOz0KvNO2AkCfJ3B0M=\",\"CILoXRWHXso1DE58TlmoIOR6g4EyHcXH+PeKo+GqaMU=\",\"KQB1u51I6g24noBfJpUrzbb5axUHWAtFz1bhjCGHHLY=\",\"DcKcQTqjLCGZot5elgXhEpseaBFjuA+Cz4RuxfVDd/0=\",\"Lc7ZNfgsky56KoN+KBbKxwv1DaOq2vt/gTa/lzsNOYc=\",\"EE3l+OWfmEif+kKSaoqpcBxCLk8Tq+kFBxBvKlpg8Os=\",\"I7ewXJlslj6ux8WBfq5tC/x4wB2cXahO9KzeUgTEmX0=\",\"F3p66bxY5kobO6oZdcaCTMgdMjAnQHCbDG+sDtn8GVg=\",\"FVK/APaWsew53r26UE956hbJrHVFhYjrioeZCMgMIsc=\",\"C8SoFww2igPED9tlEjvKrN7B+asFd0fVolYtKPR4XM8=\",\"JZMTL0RLNzFGl1X5p2uSuyny6J4mTOseKIGkru7CdR4=\"],[\"GUb+neCpQ9WnFurAhWHNkfkDH+yC2pq3KIPHshixHrc=\",\"C1z8KiiVpvn1zpe/BbzV+sAS1nN9k74A3xT5HQ5ujUQ=\",\"EXbrQGyCcJsA5siut0N67iDQ4Us0yRttR1nUJc6kcvE=\",\"FR8VF59WLm+0PIU8kDDH2V2pu8yTULQIYjULQzn3QyA=\",\"HYPb1VEbbNnlU+guvOWpHdn0I7yeMRohHWUJ4348goM=\",\"Bi7bTOwlngB8Jqlb5Xb8klCIzUhyYLy2f+iNu6mTFgo=\",\"CjkOJ65gajUwdZyHcYbvJf2pd2QFKt4wy1Uz8K6HiSc=\",\"F6lhxMfwIRBeT6zOIBG6H29+TBjGUiqIebNxvFPuwW8=\",\"+6kKMYDon0m5gdfy02nxSzVPWGymldW+UdViuyTwHw==\",\"Gxewb5cnVQr/qRQW3KZeaUCuYmbEJvRqWypyIByb9I8=\",\"JKq43/aQpZ96FoY9KYft/50kDEaIWl/jnOFADBxmOOU=\",\"BI7SEy7e5HLZs53m7dqi7NfBJZr3xk6jaOZogtPOyxU=\",\"A+44knXGT2SODved1++NfEA02LD/kag0cFrTgyePH30=\"],[\"GvPKYkClWrpV345Jg1uS+hfjmtVwHvcPgUQQn4lL8dA=\",\"JWbbuoURDMcIcAdDqqXHBhsXQ2Wo77WTi0vNgup5kpo=\",\"IFGXCY1oFBAMz2yQjrN5KwKUKQr+R5SchbDMBUpgvtc=\",\"DM7R+aNk93/kSzBsRTlXX4scpFdYxPy/7iNOjc2XO6Y=\",\"MF4g6huTwPxzMH9IJegEcdohHJgyPyO3J5GbY+QlAeI=\",\"Hkc7NXN3rrbJ7spK2s8Ou+ct9yC7UzBV8FbrnywT1TY=\",\"BW1wOvLxmCpILMVgwvTy2jLvA1bHPONfe2Z7j4JbJFE=\",\"Rr6t79HHNTRpeU64H1dNOJEPctgUMRWdTFMu7MGNZw==\",\"KtbONJiGTwrniGZSYvi5l1aZfsy+UNcDOOzWjdHpJSI=\",\"CLOXZOOY4p/+Oag8BFoSGANmU/6AcezTd5zG555kP+c=\",\"D/sHqd1JV4gYz5eBvq+JQHZNzS8HqrQSP0yfAwUT9iI=\",\"LntGr+9SYvYEQ2adUmuZmDZ4I2yPVDPNEw3vsGo5Ajo=\",\"E8cXkG5oJ5/Z5X5kGZhu4s/flrINIA5K2zE1OxmpFHA=\"],[\"CB9YqRpODRAOA2n92BoZADU0L9BnfuG/UhXkf45YwsM=\",\"DZQoPliXjOGH1GPFCnJ3zTyA4EThVymm+OwEIvLvi4Q=\",\"BECm4S/vwevbgrXmnEYePjMvvSl0dMGKZTkPyGSaPVU=\",\"EhRu+wJJjBOs6sf+1oWw3Yj77+j1mTwMshsLS7hbEbc=\",\"BksHEvoVkQSCCsB+DScjo7vB0Slas5oQji7ugjATH2o=\",\"Hg9i94VzQZTnbPztLpFgBxbrRvpNkjXyjkfjZhEK+Y0=\",\"CCBGkCFtHS74Ud7l5O3Z+/5m8Jj7YcIxoOibu9npR14=\",\"ILrFiamVk3CGy3J/wlYe0FJInu+1jPzCYO79WFArGsY=\",\"H0vSUJP6/qeKnbkZZuYUXEZHKk7UavcQgmrMrCA0/nE=\",\"J4yFzuoj5MBAtm5BrZzQmn0KxtNFem5ZbfFFBfBx3i4=\",\"BF7mnwvN4T3Ml/WRDYIoEksWlFy9842zPP05M9LBXJc=\",\"Be8MCAPOYx6B/PhqfCcN7ZDoEnSF1CSr/Pp8Sp2n2PI=\",\"ErWERp+MuLXCAL1yG7LCmcXmNCLXMKO6pSJ0CT+fwIU=\"],[\"IqhSr5BoCoypaItx7SfBV9ArQGvWx/2BIdfHeTrSMF0=\",\"I5o2KsTwfNiI+s3F4y8LQufOZIXpaX0U+0CJu2B06tE=\",\"EBGFsKjH0UK7IhxQ/JhA6cWgvxEQ6dxxezVPEAtRRCI=\",\"JxmqnDiKuX4IQkERD0KHIsj3LeI6buM/cEDHgfpa5HY=\",\"GKrL1K+d20JBhkgxSlOsysSvRzy1Tj2tkGoCELmLzfc=\",\"Ao0KwRFwz5rWYqLzHQBjOvF7nw40WInOmXgpdHEgrvY=\",\"HHbMqOc3Ltxzf+F1X3WYakZYY6ZlORQ6XyH4/5sPiXA=\",\"Cvp6fwIgBEfA6UPdYMRo6m0c0eABUFzhbrvMlyl9bNA=\",\"KO+5KkS35CG8pzsnS8KLz3T5THIS1yq2kTwXCThsXj8=\",\"GgOvAAzcRszBIGfFYLvaKpgRkEG/mtPM2QUyIv0utMI=\",\"JAn2w8w3iWb/rijrSt72f4woLYqQLbO6Rx2VQMADlFE=\",\"CtWQJaoefUoCbR+BlpWz94kLPZYx3Qb32gCr0OzZSrY=\",\"B1kdaaoo+/tbZdu29EIBBvCwkGFRMHuXb2uuzP/ixIg=\"],[\"Cye6gqD/uYNomBc2rpJ6IngomFwAw+XfjBJ2sQAQiaE=\",\"LOsXgJV4J/nU+sOSFKToLomoKnYKn92FOTsoXe29gRQ=\",\"GCWSchJTgvEHoEq9wNlo7+5SfSJC4mMBXhIfxLCQtYI=\",\"EMl/WLnKWEJr2JpZFzzoST0uqNPGzIJ+ziRT7xk77a4=\",\"D9sHEP+OxZnnrVCGop1TqdGDThpMcfC2hGhJ6w38R7w=\",\"IAjGfiNl0uc6iC/j/+QW6ODt9KPEkNuwXW2vVrTaBUY=\",\"CHTb/cbXA1ZVmB+TV5i1i3Vcep2Ch2NSzSYkRRjWcGI=\",\"KdKUrn0C8jcaFrSDshAuAFUICVa1MzGqFx9Q3l2Xmcs=\",\"KqEO3TZ5i/RsPLe9dJAXhnwCmlTg6tVW4vFc/v+02d0=\",\"K0V6Xd/BBfID6uqv+a9RSeAsbPgKkyftUCsp9MNgJwQ=\",\"KczI5r54Uje42ZAJ3/4DeXnH2nmrIvsGLW/B9Z1Ipwg=\",\"DYKeo8EKvlPwFTtERvbiolDb15+e98RXRVcoJlSRCeg=\",\"DLNoCtJaNONRCJR0yK45tgkeVTvktnwr0fx6YqBCh+U=\"],[\"BLRlJiB+3HCg0jyEOLxJo2VjVVLe4kBmGize75ZvIPY=\",\"HOce31uTWiMbDqYEArp1aku0XWUSDMCEX2wu4roy56s=\",\"DqhTcyNMgVziaTpzT+KHBdxv0/spys0Ln07baUwVZyw=\",\"EOYLAuXAq7ja5H76F7BYLflKO668UrzOiCD4WDQdcYg=\",\"BnrJa3rhYuXQtDcV9MJLkDHAgrqmisdjigD4WUvDsSc=\",\"KT3EULDlxWChWFMSniOLBGpBmsbwyOwZppv4xAmnPKs=\",\"B6Lc0U+wF2dJZeghdKNd7NqtdeQqzz1awaHiNSV9H7k=\",\"Bc+LDzgNKb76XrdaDAMre36vqJXZjgvA6G8D7QZsmHY=\",\"LQDd6XtBUBB/2b2FnFgyhE5r4NWpnMZ1LZdYW1YMSyw=\",\"BvKyEHM/oGBaDNdT+2rICg2JOyvvLVRT5fbPy8ahQwI=\",\"FYjokvny08an3OifEys9vsFCv0heIUKuBdt/tdfOIR0=\",\"FMkt+qOh+DCyAVAJP6Zw2+88DIB/UjIeX80ogHF5zKY=\",\"G7RVXYxfi7smg2HV4cIvlVX3yfT6uqJDVclj7cJjr2o=\"]],[[\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"AlJdok4dE02emJg4MEr2UmC8no8xIlymA0IMbyJ4KjE=\",\"E49C0wrgGYLtaXvlbakjAhyl7An9n96v7K8bgVqOtE0=\",\"C2jq7WYM0sr9KsRH5rX0SkrMCsxZN5+h4dbWwj4p/Rg=\",\"I6h+/32sJnVgSLipnO8Wu9Ttk/CFF32hXHY7+91BOnI=\",\"KYsiS1NdDTLpcZd7n8Kz+D3wmrVQr4C4OMLhMIo4iv8=\",\"Ah/X72bE/zdOhbVS8MEWKDGvfy4f6qMOTULJ/+WF5zA=\",\"KnXsD0O/AklFbvXLHli0cW4TXhAzeRtwbBGY43DPWRI=\",\"IXAFMW/5g6mIq7QVDVuJ/Vj15++V0nUgevq5vHNtz3k=\",\"DSAPusZQCJklMpTsM5T1/CN0yj4yQ8NM2XxfjzH3jts=\",\"Ilgp8XMM/rl8zbWx30GLrA92HVcpOjnV7CkwFMePOMw=\",\"F7CWJas6sgt749pnQOrGRQly1Sl+9V/0vuR4V4QWheE=\",\"C5jZzLXNGXmgxFqf+Ph76PFboct1jGAnddKlcR2rj3A=\",\"Jsalltz6sR8F3ahhIgNLbyBGxRwAJMTGc92Txj7Mpug=\"],[\"EhhrsiAArYS2vykXmt4tTn6U/wflFifglYBXEGH6jOg=\",\"CUXAWU2WBS9wLRwMjUI8xfBUvKEeVKk5Ux5cZhZpaoo=\",\"GomTQAuv26UytC/mD6cZ7iu3B0TJaEyHQxrUYrafYjQ=\",\"JxaE7E7SVkaU3Y/X985S9XPCLHLoJo7P/bPzJWz5TYY=\",\"AZnV9E35LELN7bddqueJSL0bgS72PnLG0B13ydUTvDI=\",\"FVTHp46XAhLbAqDHR4wCND3erzUNUq1GCWbCGYR15dU=\",\"Iiq3vlIJchBjj3DRvPOtaEIjDgVh4a5VZRntbkSrVqk=\",\"A5HnTZzpREgS9Cz74VbnQD7ADBCIi3FhMsgZVCmC2jo=\",\"FF9I/eUaTH8EacyiogvVxXlMWUwI6gY0ErguTCH7Z6w=\",\"HDRtxHEGtqnA408ralmqB8DiOn8NzXL5hpi2u+JECp4=\",\"HYgfm8bApprYxM+K4IVPXjnX8SBUPucvx3YVam3EHiU=\",\"HWQFx7vvKbZSbfdbmzpDdJ9Vp81gwpVuYc41RGoUBV4=\",\"Dh9uB/GnMQ7Qr2sI+6V7k63xesQK1bM0p7W40rIYIrY=\",\"HcARGZh9KgJYmL3bHXk4W5mWDpfBACCLXpktncdO5gg=\"],[\"I5n6pkiu35Akxqw86v6iSCFuJKnlbK9azSnOJUap9rI=\",\"FKD56Jp70vnpOigRMlb1kJ4YvY8tTGpLkfp2T11umBM=\",\"IjzzdE+oAu7LbjO7XTRaTi5JTi4IaClqB1AQ2JFZbPM=\",\"HK4zKWllde2xyY3xaiDpeg26mYhgH+JKasMnIz7b1+8=\",\"LS0tee7bRz/AUnBavQe119E6qaUr+go0spvMsnaM6BI=\",\"AT2V+UnIPgnv7HRk3xj5Ww9Wn7Q6rPLisrDRuNakrV4=\",\"DbNntQyWxa1xQQTlNfzeXMLZinNY3YW9mM1Oc5iYWHQ=\",\"JNVlODlpsYjykA7id0HkhQDfqrRhllzPasxykMXAezg=\",\"LAjTOqB0UuyNMP7ZrF+CGIhcGN5ohXOVtzYdBtXVDGQ=\",\"Lrlp1ZYBBEMtvsTJJPgpQRvNTrJYJQiET7RsV+S5cd4=\",\"AYmdPvamZlGycDX0egAw13CFuYi/sllTktRqCeymaOk=\",\"Dc0Bi1QutRRy72NWZXMZLxZ7ikGyQ9L5z37+BCe9x2k=\",\"Aedqv+DgwJB5g9SbwHzSI5LJqfuhytdz+Hh32FFOQQM=\",\"Jwd1tXNiqW8ULPBWCjwfKPi4+EsWlc+iCycSF8uUYLg=\"],[\"A63Sn+OY7S1E8jMSXs0VCePO3nfmvgi5SvT+yH6z5I4=\",\"KS5IXCV3lO+OH+xdrN1spp8WhAgkmm4gOFNhUIDNLNU=\",\"IqJsJeNjHxVMZEe6LoVDsdD4RUvQJxaOcV8hyG0J05k=\",\"IBPv5d0sBU9UfVMv1vONY7883AfBs76uC4MMU2k238I=\",\"ELmbBNeo4JBZ4oxyPbFst1UolXhYw/mYjwBQ0Yow5mA=\",\"F+NTKcmqp1TDRdbrMXw2h4iwk+0dLRNnFOobL3k9pYA=\",\"KOx9qOpDsordZp7AXAhmwkmP/pm/377IlrvXDQhyD2Q=\",\"FFEVUY9N3HqHjEpMOgzaNTFCtCDL/K8vLrfWfGgX7Rs=\",\"IclqItYPRMNPVDtQhqtPzewDaygLn1pko6IAOip56QY=\",\"L+Z6N5K/pGVFujYzwtUE2XNefQO1j5II9YSj/7PwSoI=\",\"DCfAsvhoVrI1AAeoUBIi18fYnAKRnSoxADLE7enabVs=\",\"B26wZ5o7xZAavxIE6SRi3QBJyLgPDQsRDqEsptnaWAg=\",\"KLbKXXJ4yiU3sxZ70OjICUoG/zRT4GCh9S8HfOPA+cs=\",\"D3A2QlyfS8CHV2QZ0FNGmK3vaKDe0P2pCyEb3NpuBdU=\"],[\"Ehr2H03FuySJCr65JR5c6pR3CrBi3Awou4mV3Y8YNjU=\",\"G3W/bMMmVRH3hmCRefGLWCobYmHp5qnwWsfppLsBWjo=\",\"JrkL68KVJTx5u8jQMkzsmAXzcwp8fjyM/nIgzJCy6pE=\",\"DKNIkut/o9e7SXBDvoRiyzh+0FX4NWaxZafavHW8xiM=\",\"HOD36jUb5qp4497Qo9adad44kMq8G/z0BYMibezDLVQ=\",\"G1ufmsJqLgVN7KMkyckr9NZLC3vnKWMfI1DE2zIjJ2g=\",\"CUcHFJ3FY9t6RcXN2ACRw5cr9Spu4/jq8Oa8xqwOOXY=\",\"Jc7qLsn+EZlNXWwuKvGWlj376BEs+820nFuAYVy93ss=\",\"KVLzLYRqLP8VyfAo8C+2C/zYp7NO0SCrbjk6HsJ5Sks=\",\"CTAmQ0Pn9a8rflpPfyXQvoWCVmamjVwCxagT6VjDJTw=\",\"A/KJ2yCXbB7BqvzQ2rqcOG3Y7bjldzEd2proCCNpiRo=\",\"GD4YbCxy9KNcT7se74I34aqiN53Y1h+sxZ1uX0TaCoM=\",\"HJIcRTa+QqqKk+wKsRo3Ix3LwMqat3SePVz5kTre+os=\",\"COyqV+VdIQ9W2cgUH3A5TlkYViXfV0Ne4sySRgIhIgM=\"],[\"LKj/7i1Y8pRSl7AM0LUR2hZwgNU5SbPx/OrKlha2FD0=\",\"I4lOAlpy5P/RWAv8R0iiclq28hSo+E5A0mblGDxtuO0=\",\"JgDVbp9yi5gvI3Rtp6KZO85XjnIEue3R9HRAW9dZMQM=\",\"I+OzVoeYr0OlYWFK8siu5A0iSdn1hFKEfEU1lNyPONQ=\",\"IUWglZpGs8Q7xVm4gR0wnUikUkIwJbhcuz/ryyT0Bm4=\",\"Lxcqz0/NJvb5ORV9DaFby/+pge9rIvdSXGn56/gBGS0=\",\"KPUpk0zp/s5kNWrPUj8yRDF4Zp/3egrW57hgIOQTyk4=\",\"CThczdAy6HhL3kQSiG6aWQ7IX/XL/uAqbF2vyuuQJQ4=\",\"KkueuLL55MTy/TNBhaRdDSNJFjvNe4CIFbLolUPAlBI=\",\"A7sqW2WfH1wsgrvlgkrWSiYOIeaI9f4BxhYy/No0its=\",\"KeDCKg20RlUkA6GEc6Ll2SPw0qgbI/WTh33kZX+x6Hc=\",\"C7hfNSrVjY5ZmMrFeg+6HUk0mq5HFk+6M0OuMsy+QgY=\",\"JOnHHFYHUZFpAVzKXwvo5BbyEZT8fWEKONPkjfVt1A8=\",\"CgmLZ8wjHtaityvuKfgjcCtn3QvKePcxZUMJeFa0eMw=\"],[\"LJnvXgZBR9qXgrkUopS2wU0h6n7sH3LodhZxBp2CoTQ=\",\"FgWwvZamCvbTzk/uq6dJhXG2k1lvecCaNIXLbjexSA8=\",\"GzIvSpLTNvsrkuE0fg9zA3ZVs0T6bOsSde2luqv2HdY=\",\"DeRJdOkd+BUdON2zN9vvt7JCP4wtszyVJJZkJWBJRH4=\",\"HL8uMuSDCP1SVLyEZu4bRIglutzQ0DgXHTnXe9YcEis=\",\"HiWu+CiuG3U3TRgGBTODo6/rTCR7s/T8YCoxJYEpCI8=\",\"KHlq8rRuRIHIxodn11Wy8owiKYksCT+qhuptrM9PQDs=\",\"K5wogb27yrYMopgcKLQij4rUjmSns5PvTtCAkH5qF3Q=\",\"DQDUAMiAnhbbJfLxWT26QDzqu+PQuGg5m/EsHOKmKE0=\",\"F3ZxaefRY24M2rXSlYjpA+HUNDAA1bVPPlI+lWr2/Vg=\",\"EuSz1xB+i79zwifD/gTdySd6roz4sVp2nHA50oJmGGY=\",\"D1O6zenJAFOB7XvQ06NQSPmwTZm1TK1Bu//JcEpXSrw=\",\"JB4LtIv2MAP4WK34E0v+yQIUp4NvevG90mP1rJGQaAM=\",\"EG9wtcgrakHkAfs8Be0NSlwdarZqsEjSqSijI1VmMvA=\"],[\"DX0HzTeY9E2DKmVxwhcGdYaT5ek2hM4tGl6KU+DMZwk=\",\"C26kWaPuqZEsAQBawCTNy2DXffA79tV/nekneFX1Zpw=\",\"JvdJ4DmxtY6f1xTgte263SuiPw+uzig0irjrNhJuSns=\",\"GoB3szcPfmXUUODlNuHnPJzjNZYCPeHLLU8TIYlvUYQ=\",\"L2eE+gY2NI5bc9UjB8Cdx94o2sEiVplbfS2AFL4VEdQ=\",\"G059dt2Mu0LB6QV0tPgyoHpTkS3HSy8Zg0QCUsIyqwo=\",\"CTZ+zVM2NDJ0NfuwMXv9TecgJhvWx38jSPBUfU3NFV8=\",\"KQ5/36eWyaahs8Lm10ZgH0n+vaKvDS5+3oBLgiQA6Bw=\",\"DVMsRCnXfAhnnstUGGX3IweHOBeG99mNYqBuin8z86g=\",\"B47GsZwdiQSaAeoalZ30Ul4forXG2cf+AOzYma9bhpM=\",\"J5MuqASIXZAcCokQPCmZXvIH51NXSn7WebFiNCxU8n8=\",\"Ag/dJQ/UNKX7kHLFl7lAzJb+wphv1gNSayvsxY5DHIo=\",\"IR3TI/+2vx96DHR1l1k8RAU8PVrUKLEUXQTwpyj0GZo=\",\"BDe5Surv/45jaBbR90hOEt5g3pGZ/imMOoRmA2/ekFM=\"],[\"KRlRFxBmI///sK9SXIOGhtDZcln8c6UZRgmse3sXExM=\",\"Fr5KFHQU/4CAsqdEc17oXiMnw2ReJqTSGEa72g9fasE=\",\"FTAgBCQvQYtwxwG4njWFrB0s7ycEa1Esf6hB4cf+Vk0=\",\"EDCZ95RSzmyISOULsEtQcjr/XvkV0tf/oLj3K/u2qQY=\",\"HN3IR9L42ebCD/VWKMxOnO/Fmig6OIQkYsvmCpodAzY=\",\"KbtVeqSHac/4qdCrDnFJ+DXFVS5eWufmOEBDeQ5Fwe0=\",\"HLL3/amKGKb9IN5vv0EtB/D0H83yCI380OC4Uv37Gq0=\",\"DN36ltsCtA1490BxbWqibCxs8SV3Kpg1yaNKkEZwLbg=\",\"Hw9zTpWkXPB7cLhYRrZf/TwerBCpXguRfyfOJcDuSv0=\",\"FOwiK0uVw7YCwiJkDY1tyuIdq78egFY37Dv9iYRXfAg=\",\"GPMdpCdCGLJpGrqWEaeYy8npQF8REmfL9CSmd5nvZ+4=\",\"GKOPvAT06FpocWFUSi4zI7x79QSlzjToukM1dny07t0=\",\"IYuPZ5tvL2BwUZZj9J1p/ZBDum0bzXt7heglq/i/7Nw=\",\"Gj1XDVozGuQck46B6BVd7TRdGArVukm04btw7qtGejY=\"],[\"AbYtSxfeZzdbWPJIqI2/cHzJ0UkbzgCVZEygIZoB5Ao=\",\"I9/LQVXjeO99EnOD1meFszgIoyI+IqImo+Og97xSAKg=\",\"G7ol75DCdC1rq5MJdH/BTMc+QCTIA9teWMfSUlg5sq4=\",\"BLPDaHEREHtrOf3h9eq7DeXi+vtIHAhF8Onj5fkAV7c=\",\"GJrrRU9gch7t4BCgBcTOVVCfFS5tDpPoxfmpptOtu9M=\",\"GFcgkUZcq+uWdI9UgtN9OSa/fB1mgNyTL0X1WnBCsC0=\",\"GlzPfvRRoUs/3FMaUoMXKPXsJrhrp3yVJwHbKROmmN8=\",\"FS84y5gI1clCwjYkq+iIUqWfKBM5IDD9t7F1MCWCmZE=\",\"CeVDpi6TqjAFvpESpJxTCPW295WRtIJPY1WuEjAJiOg=\",\"GhRfSa448zKtZ72Qc0uL+dl9vFkSy6yPV0F+M08UIw8=\",\"CIV8iz8LmnZJgFNxwBp0yExnV12aF74OVZCqtSFDN34=\",\"Jf2jV82rTKEwMUoB04H+v4EsFEc+S8mxPOiEnu8cv5Y=\",\"J7gx/ScngC9qhzEJrbQZbs5In7W0gRNWXYETQnqtQtc=\",\"DrjG63sqAMtF22P1jlXXjxEw2SpWCVtIXGYr5pJkRzM=\"],[\"LhaBvHwi0kxDP4HdOjJv0CQr/H4r3rYwfk0qyjKt2h0=\",\"IkFcoQtlyDoDnxp0nmSfvaDP4v40A0d6QMEGia1a8Vg=\",\"IcktI5wTe5ooCnKKy9BYqMdfMh4NJUw0au8rDzOQsH4=\",\"BB/ECeE6Yo2WMrhzhdJL9PKnEuNkKjbJh1y7XpACgGU=\",\"BoUK5WCtmn6Jv0VPQwDKxfUYRFOv5J/TVS5j5E5yrFU=\",\"KR9LeHCK8ubSAhvGe4tDF358BTOuHYkodhLYXL0WpKM=\",\"IquipvgOkbK0kSJAxymD8CekwViRDAPMHP9mxUX4dQw=\",\"IuMxFtoiKDFr89aLLxUGu1tbh+1Vaq/k8cFjj3I7Cl0=\",\"J4hfzWbmob2h9VWZMovaU/Dbv4/jnY4CX9UA5E/9zuI=\",\"KN+2bfCJlBwbZMQvAeAVtfO/h2RFKt2bJPQGW30nYkQ=\",\"Ll/7STz+6e6q4SAPNggp0MLAndtZLTfQghNjr/bs4pk=\",\"IRV6KfR2E6gL38d00cgnirw/duFZN86bJBduG0yeO34=\",\"HMkBRQYhFzCvoenkXJ84tuYhjsZG5539OK4MuNlsz/w=\",\"IQOWwb5yJASBPcoPBS4yHhg8AN0WcQRLGL3xVgsE7W8=\"],[\"ZYUNEdDsqHw2l7b15X94yoaVK60ckEfb0utr6enbMA==\",\"CFT+wcRk4vutntZzf0UfTqJ7ah2XNJlBkotZEbW347k=\",\"LCQK8sztGm0NWu3cNsh106jnQyV3J0jOHL1eAYAbGI8=\",\"CASSFoR5Yzn0AlmFXrUfEYJi2lTB6tA2Ttc7e28yjc4=\",\"D+pWpZpoqdMTH5ZnK+BPB4k3z64BuxhcB0vl90o3siY=\",\"EfYaOGBBExbu5C37c1sF4KtakFokeLnURqzQ+xQD0A0=\",\"CoD+40WB+uMYisXyxarJST5tsS7nongqA2qmXtifOCU=\",\"B1yGI8REYuSVrEtiU2x5ComHXp+1WeKftRwy1mAe8pc=\",\"DU7nQWP+OJAx4B95OzzX92lxZJNy7wdd0/JZYzPFpvg=\",\"Kga94TfrD+xYTP4vEcLKQ74luo3DHgUiGRy7Y//FC20=\",\"I3J3RnUAplifII/ld6Dta72AX1ux/AVDoi8hy5i0YQg=\",\"DiDNk9hVx/FJebzbMV0vmJHgnkCZyrT4K2ZIHQE+rJQ=\",\"Et+vKgWMCJC8oLyJty60pXXxC0OgCcauIiBxSYhLRjg=\",\"KZKYMkt7Hnz7Bfp8YsLEcbWo3LIz+Mnhvs9n2L3LRBY=\"],[\"Glmza5T51yNXflBNYAxJPygQ8OZxEmcsdDq7sTq/Q7g=\",\"JY4J5AjW9mLzU5pkmqFW8Yy0YwL9D+NPAHtzHbBoJaw=\",\"IEn5zxLQ4hCn2CpWaU5Yx20vHFrFcqr5tvt3DAn4364=\",\"LUaH3irUNgD2hSwqGRz3TQw+SnygUG+XRhCDP6IBpys=\",\"KAPgVTBeRfm6LRVCBkOcAqN+ilw/qOs42IPHUTfZYhY=\",\"B+wblqBNTrHwco8foEkwGcbxqVRWmXulADvCv9z0O6A=\",\"HezivZtRWHXBFCRtBV+9VUkqfSaqgCIicZJgD7F8jII=\",\"ChlzYZz0NLd0IlNkd2g9CS1xDGijZElG4R38Xa9MPjU=\",\"Hkosg2CQpclgkx8CC9YWYp6Tywk+4CKF+LnYUKdPi1c=\",\"KhLLt1+s2FSPDUZNhclhrLFmtzrrNCLtzRw8BACCRnM=\",\"K6JSWIkZBmSDcjcGc/i5cBp6F/UVnCb4Os0D293stoM=\",\"GecP5L3d29GiAQ3X81rYAgBLhIamoSlrdf6HwsUkaQg=\",\"J9GZG2vleEDIbHZ5L9nDtEzJvFZWnY9deAEsF8nQGyA=\",\"Jqa4HV1MPk316TrrOSZrVqU2wVMhC59N7BDs424/ng==\"],[\"GksYa3fNU/lhyMy3gV2Xgc73pSr2TQv3RstSJRLT0K8=\",\"CLOfcClJoKGlkGM56D5mNRmyZMMDmrpGiL8uN4iz7LY=\",\"FSh3xZ4HNQqp8LNtsAxDYjTHYkndAJlgewNWe05/BW8=\",\"ARVqVf68dw0+cjN7TbG9L9aAWUqcna0Id3ql2JhRDlw=\",\"Hizb0QzX4pk8CkH7BzQA/5OPWQ4ws9toVfEsEp1oHxI=\",\"BPCJyHy3urrwMaTQ0PXAjgC/yZzHvvzbIuVSVhcM/qU=\",\"Lrw+bGGuaQHTBHr7UJXV+GBxooAmpzUZRdb8RibC8fk=\",\"IwlZeRCAstJiEx7ntDwt6UIqmzpZ7hJB52L/DaOAhWw=\",\"EL8ucovsN0Azwx4WurZ3IFahrOQ7tMMzOghiVuDtnY4=\",\"z2oDF9yYun+8sNzvU9gEJxu5MiJc88L7jAVkuJjBOw==\",\"EwbkNxcVb7TiGsZBZdxf0Es/Xcv1IxT8DITQm6W2V48=\",\"CabgBjwFZR1j6DZfThdBXwq1nQffSRbp88b2ScTxAlA=\",\"IRo7TpPeMghS8GZowZIHnD1loA3ip8+rlmzg+/kyLsA=\",\"BjeB57tk5A71SkrBfUd4W4+uXaDEs73+TejtvacCm+8=\"]],[[\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"AxLjKYKXzpthPnVSIBOKYfb8tEnp8pe9KrN/pLBgxPg=\",\"I37kbUj8RxnzsMdNHOMtJe4aQGyGImsUljWX1307Jtc=\",\"DmQ9PU7ngSi2UkRFHlDap2k1PWdbcM2fNkISfHCvwJY=\",\"J2JSrcX5rdBdgNTZdapshQbl82Fa0E3Rm2qP30RVSBY=\",\"BA5FlsqV/ECRMsFJfM55zhKTv0Wcvy4LHO2hdNDlPmU=\",\"Bu+/fJv0xyHLDr/2dzCkHrDUSYJRaBWT9U0W2lzy4k8=\",\"BGDlxZ1ikvqk/+pcTw9bYYwwKR72JZ0tW/dW34el348=\",\"E2tynyLRynTbD2exJRKSWrhZdGfO31Lm0olAdWPLJTs=\",\"KKqhUohO3zGUTXLcMYQkwNo0ksn3FU3I+8tlN81+Brw=\",\"I/2sN/cfl3Obmsa5hivku0B1ox6dIRjH9KxQdL1/JpI=\",\"B2eqH7xOowOkdvBEI0WKw/bkVATJ8iww4u5dvXyTSKE=\",\"DMBFLE5c2VbvGjtK5bvKp756zUwvctItZQd1h6kcCwE=\",\"HOuIwzw17R5nOLntA55KtQa/erDwinqvfasMrxPrDmg=\",\"EqmYuvM9b79vr88DxGLIpe93BLGBq/JBS2ifnrCFZtE=\"],[\"Gakqxgh6uJmC/lZQ5eeZ+RAD/YtFQAdI0sJeQPBMV40=\",\"J9yFeRNsDnH3Wxz29Qg92DVNEVv0FN0fpUDl8596/HI=\",\"IEKMBE0i7gvNej5vq0JOi4CvUCd2LbHpb2WAE54rwJM=\",\"DReq07b71P2LrhRRWeuiphrBJEs/tGAiIWe3cTnJ2m0=\",\"GA0+EU4JOYErkfsO/z4LYQkEPB1AGNHS+cvHnjhGGOk=\",\"DPITsdP2/gsTfkUkuWO+1AmTQW+PGxdP5pf9VQefM0M=\",\"GQs36Mm3vV7mDQqFN9R6Gjd/elZ0x1qZVAuu5gj9jyU=\",\"MDSwHC+0ephnTXMIGEGYKUgDlN840zGt4nANOROKQ9w=\",\"BrHdKl/Sfvw80azqsZafaOSVmzag2lyltCwQq/DSMKg=\",\"BIijWct8PNQGOtxv/pGuRhP3KmgVNeNbe5a8Jghr2ik=\",\"FToa6fANAmwxs0YgAaB6EUtCdkl8gUTEKvk9Ebs4PQo=\",\"FsSZwkP7XOxgp2wykuBaYhdHHqz9OrK5W0CaNn9ad/4=\",\"DsFxxHYmXEh32zVU+p9IKo1rZHI5uJ5IqQl/F01cW1Y=\",\"BEX02fSdTcsa6GaVbDdOGjy0VBngD1g2uI5a0W1jnus=\",\"DZ0GWlPsnqHy8Iwywwo3zyt60WFOYKrzuRUIo/+zswE=\"],[\"MCYI11DxZJHfWihfX39qXOa1VPXazwtp1FCyS7tJZ9c=\",\"KYqQ2k9Lzp3oG+aRLG/7eW0EwUQyyMQKEFoosTWuJzU=\",\"FgZWBKYM8tfkBjEKUU5CinNLJ6huLe9v7bP3FMFnnFg=\",\"G428qFDoSZQLFU1Qxu5XDDJETRLIR8IBazUUkjA5UGA=\",\"LpOv6xs1IAWCRb6+DSaWZLEucw/EW79Gy2YETVe1urg=\",\"Lu0E7y6X7rRzgYdxDTw9WY5gp7nmSE1LSi8Jg9KXCUU=\",\"G3bzd2Igctqj0WGbG9xpIzPVNFtn829DDPUW7xbtqTY=\",\"CiCw/JEHCYV4Eiru9N0bu37zU+QA/3DTgu6Ku3xIHgE=\",\"CONKDM03ntHGN/gnKjpMrWSTdDgEP0un9eX1sK32h6E=\",\"HUi27+NyZm/IUZ3g8BqOXTYHCOR9rc4fwBAA591FJ8Q=\",\"Jg+KYnZvDiWar1N1d7GpnVC8AgdOEPYk6Rw287rVSRs=\",\"An/8pXTCbNpaoJ0HHFiU4O2VzZMDbiGT6EtOXqffBrA=\",\"LXI+cRhKusiVB3+EyBH0E19Nes9aso9TKZAYKkOHODM=\",\"J449/CNeewTK6xBqFEYN1qdHG28Z1EHB9ziqYlxF8o0=\",\"IP0M2sRMW1wizqR6wrDXVlgZoOgRCTLw4EwwDrMrIj8=\"],[\"Gjx9qmtK9WYtDYQHsodnTYPq5bdWNAX0je9JmByYxCQ=\",\"L/UING3w1AjT0RCbJhI73lxFWL2rJtnPPGN0pvkpGGQ=\",\"E2dLXQ10nK8tk3JNI0yaOnuaqM7U+FS4U8B6bVdbf/I=\",\"BSbmnHMHBkfNXUVgnm9Ve7s7TNTO0445gv6Pohelwiw=\",\"JupqeTLemOhdrzjGqadcxsAWqp6zHnjXta8e85Ns31Q=\",\"LqfIMN6ArDBPSkNCgYysQI++J8gRslqebBws16OmPsQ=\",\"ITsXeqytqCEjHGvCCQ/zVNYpzIlhfVKjQGc0l7DJspQ=\",\"F4zfAV2LyO1SlLsxtimTRc1aM+XqMOTwP0truyqrsuM=\",\"KFSMi7eG9HeRyYwg1pIdOdgqLJhoHNEPGAXUszhGBcU=\",\"Kn2a4qkVVhpiyIT1rHHvEYFfpzRfYUZquq6bsXI4JGI=\",\"ExEFxDgbX1d6YWKaU+B0rmahINfvm7XCesZ1v5BnYVY=\",\"GFwVICTE/Wr9X39vlRNNoHnOFhSp9OA/IEORQoEEE4Q=\",\"HKnwRfcV0pRYyx+9yNhKZok4t4m7Tpg3zHotzPkMxWk=\",\"HyK+JtUWfvS7ABF/jm6h8oZuYCqYYom7pIS6Lx6HVZE=\",\"BLv/YYEduHC0K8zpvhFkLVOogkPy+CcbYIl1ZbpqamA=\"],[\"LbHJhVrCmsxnk2fb9w8I2YiUB33yQR+R72jdkBd8Hps=\",\"E0ev5VKfYP56c4SURVE5mU75diEtrrAolzf8F9Z73DA=\",\"F4MqV0g6tGgI6URJVAfYS0J6JQ0vTYre2w2iv4sA8hw=\",\"GK/4/loXmLqUYykXrT4Z1Njsy4EZU5XYm31jHPKWJmM=\",\"Cj683m/OsSWu5wKEBksvNSS6gWwVH7YkXgfMM8E9l/U=\",\"FyMGZu1np3QL3Xapaz680p7KQwHoJ7IY6iSkpWzxHq4=\",\"Lvr2oOYi8Q5U4I4OCs0eQmPM3mFk2AX8Uxf564NBjA8=\",\"LxJA5FKHQk3ZSmYeVrifDloRueFfz4ltBLdkBO5TFI0=\",\"K6tQZWnlW10Eznr6JDSgldO0PwMpt0UZ+IwdY8cF7EE=\",\"KAxyVr1ndfSXyVhJ/1alOozZsBpgIF/UFwKhBTKnzrE=\",\"A952jPaSI0l/0uoYFwh1G8tCoOjPP4WAun0Khv/xKIE=\",\"Cs6z8DBFBzjizV8bAXeHKmMszgR86YYduDVVSxvZ3oM=\",\"FLcR0cq7pGddF38X1iOCSzooIppVHzILM1Wp4/lgjJ8=\",\"JLsJ6Q5k9cY9U1gLUxB5eE5NWdKHyTPWE67q9ZrdBr4=\",\"ITsipEdJKnnTFS8O1/817X9YBZHLLfuNke6dvWe6ZK0=\"],[\"DwbuR1WPGC2BC7yyFKJdp/cKVnoEZLNI4bMOyn3pnSc=\",\"D80v9cjwvSlHtvvwDQuB6/t2BkzVG+u839tiCeZjS7k=\",\"MCs0TxOzDKBXi9brUq+2bAMbM6IpsYphqYOVqVzEp30=\",\"AitFGsVvOCRQFO7kAVaOXMUIvewiI1WrH3GUSTrX8IM=\",\"Gzv3NcyPTTjXN/f7bYfXBka88v2qqioC+9DnWF0k83s=\",\"HfDh1zvuVq1YQhE1Lnyrt8dI7fEHzYxXUMYpPvf6HYc=\",\"CZSw+tmL1A3mLGojn9IWJKGW/5XSu/oi4EFr5WlNZ+o=\",\"BM12HzFuzBsDZo9VtqapqCui/Xl+y9VwExdqyF2FF+w=\",\"I5ivoZcJaUfVZ/Fqyr7SlWu2Ks2aXYmL5ffhVLXOMxo=\",\"H2MBhEnG+YLRNktHNzfgCdAASDfptBfRAK6u9T5Vcb8=\",\"G1MXAf1rAraArJYSU5br9N9/g6zy7f6DOJPutfLDqEg=\",\"FBLvFgJFAGuo/+2uTgoar/t9pX5wEolZpbXhUDtOQIc=\",\"A+pR0NPq5vgUJR1kiJL+WYUBlkWi05u01JKOa03Z1wI=\",\"GBqCkrCDZEsDV+XFsP3TFih3zRTZjDro5OAfo5sZ9Gg=\",\"Gq7KjACcBYjSX1a7lFeiyyYLFOiMjoE4lHntvRdNc84=\"],[\"IWbXjZSNr6ljOBzxVg0AvzoKHCiKdDNEyGQ6WNr4y7M=\",\"L9hlVQWZHXMZ6spMS3Nu6Bl2t7MlxJSrgMadsTLlUZY=\",\"FLHEGPPBI9keCE84Z91iucc4ZqSUwGRgVPfRUoJMsLc=\",\"KecYOkDxgS/Z5pDMaZH0ZRbGoRttY9+ydb30XC6DDa8=\",\"LW4HHJqMElkoJLJGvFAk9o1/FXgLjoHLkXAy6jRIx3w=\",\"K81uzSHQKKiveCaGtCOlSRvgnTEei4sxGnbG+jtuhGs=\",\"Aple2pbwKPDYI9OQo5oIzsiETrnObI4IHFcyY1Bdvhw=\",\"AZDCOCzrd+c9ckiO//ekc5TJ6rqlXpE7OHb1x0JeUHI=\",\"HLaNC1p9Hl7AHQYE6a2k6LDl1lfgw6S5gdmolYW1seQ=\",\"AXJYJU2ODW+SXnwBhfIJjVNK+wdgcGVXwRzJNIHdNNw=\",\"BVnyN95iFDzljD8//G/UXLpcLMA9elsAQySiZz/21bY=\",\"LRuujAx7ZeYJElyZAO0BtP7gskbh1bQPJqMhz+liBEw=\",\"C7B8RgHtoV/6DH7T6bWnMx3q6SYJFckw05dF2mlN7ZY=\",\"KaMyj+9T4mCkP4/eiEIoDRt07ZbDIzxQWPz1dIRZ/CY=\",\"JpShnkr3wrh6lNvM3Rs6xhGxNzExzVqdcLx4N9j4IKI=\"],[\"KSm+m/4/k800/OrmZdlrHeGvsmvK7qL07cRUxQy8RAE=\",\"Ge27epg/zXaPsmfZxKH+o84LKiubRD8KqkbwblidFLY=\",\"LB3bQ5sQoJKzlxMYytWwjevo3/YDvvRTJXfElb4ack4=\",\"KESXGP0TdHC5z5e4FcIUDdHJcrqZji/kgit8CzO739w=\",\"HwZVVgsjNFR8uUjZ1rm1kHx4ijjvhkrgZzp4CU/n7ns=\",\"E2+kq3nCjgvpu0dejQL+mRpMPhlj+PAr2Z/Aj+uK8Gg=\",\"ARRdxnygZ/VA0HH+8Jy7keHT3rggJTC+OCn0p0uXyDo=\",\"K++itt7lFHkFT9jdGFiKR6QC3Vw8TtygxsX+PKwwWKU=\",\"FYmWPxrZaFA3pQkOCnJrRvDWjgG0H/9OUden7jygOE4=\",\"LiPK6xRocIkIVcbjUBbo+8VHVzM9hNmGSHGTNBppQrY=\",\"BXScOa/raH+/VrZ0mm0kIsqjtKSpi3AqSVi35Oyy038=\",\"F4iA0fb/L5uOGsM4ySoMj5KAPn9MJ3xYnY9NlhAr19g=\",\"JFjttjF3zUa1H/P1BUN2p2ZAtJXVmORyh31O+2R6Yp8=\",\"FaxMUG8ORRaDQZGjpqqM2jCis4gt3I0GPsepw4xNwBQ=\",\"JKX4sW0VCpaD5pw65gOTEZJWAHnrJdFB/3wsuqtNycM=\"],[\"EHbUOcZ5l8N8bB/amjfcL3Yt1XeUbzb8/czXiY7GfNQ=\",\"LZwWULUoOY6NUtvCMzU4TlSu4kMtY1xwoC2WJDygsm8=\",\"GyxSBtUL4ERZjFiX4LSwIhvTe1EKQ3/lobTBxpxgG20=\",\"Lt0fp3iWpk27/O0Jd+CDN+5L9hP3boos4mQUVIsjFlM=\",\"DLuQh2JRe0HjBraQmDPVoQdjRCbyKXP+g/ALDhfxMpY=\",\"JMuzyUoCanbAReTG7fuxNn0las8m0CzAlBLtp/Wafss=\",\"oL0OoFkWLbSdsAyyqUDVe0oXTeDzqpVQe7+L3f4XsQ==\",\"GysEfp5BPXSFU/md2K+bJe/MXiLUX+iR3Sj4+8L7UwE=\",\"DLlqzoontD+eYif2cS2hPh/c+PP5kIo6HCajWgWxSSI=\",\"KawBrjZWknEZX+B13o3ftDgMOgLUPXNCoftRF7jeKlM=\",\"BC6++cakzb18bLBNRdLgwqqoDer3i8H1jvQJBs89AhA=\",\"AuOL8HwWsyA728d0b+X5F5J3zKg2PIYBVdFA7GNnN5E=\",\"AgfpFXxUrOpO9Gr3Ic2bL1dEftToe+iTPx0LbYFNb/I=\",\"Fn/ahgMnYP5pa0kgyB9T2EP5PW3VNvIw0gBOtBS/+t8=\",\"D91d2toLBFpEWqNEvGGxrAUULhtWQa6352feFau8m/U=\"],[\"GFya0NqHz4JGJNAr7DukZlgioPazsl3v86/MaHzhMh0=\",\"CZ/mCdzpGkHxcgF74nVP6Z6/bBXMV/MbtvW32Aex96s=\",\"DYuGNtRZj99TJiNdF2yUYo5htOfILni05WSFDKKyN1o=\",\"DWWrikKJLb9gWHxwHU7nmIUwGGcEWpVOcJoLOaluNDI=\",\"Af+VK+vzDXBidpEBcqPN/K+wmUgAAt0PqMaCiBiP+0c=\",\"GzF72J1P8TP3WrTT0Ldqea4BsN/5ls80pyUZbOcDwX4=\",\"EkeU14iF1ZNr0D/3NLXBrayKSllq2fghAsANOmhN18g=\",\"JP/WI9qrn+E1iKHAC3+MjxyoyqUwoccTG0ZtlQ8lGMo=\",\"KzitGntlLp+L8O8yvii3RcCZki63VaNBhqyQkFZ9i9I=\",\"Gbq8c0CRo76TNCfmbDdxRCRefbEQxqK6qYYAOUeiQMo=\",\"DQKJpAzwKSbLyydHoOHBUY6cT3BN9q6hQnYhHCQIYIA=\",\"KL1mxeEzj5cE/wcAO/x0S8zDn3zmyKtaV33JA80mQBY=\",\"Fw93p7O5yur1ZZ/OReraMu2rhDUQ8MHBkY540PbyUPM=\",\"BL98UOuAg6GxrtLy6x4+asbayUCIxSZkPUP8T/1nUL0=\",\"LKyvgOjbKbqAgHg4lUpZpYe4Odrnf64mw3ZhRK8cFzE=\"],[\"JwKxvjnpEET7c5JsEQRxn0wDeqQVGCPOqyTwzsSfRkg=\",\"E7TeyDa9nM84pQPmJe2OI2xU5pbHRjeuajaGqAVpWRI=\",\"FxX3Ps9z42+OUTscyattgsOO3CAAh29dG64De+XJlxU=\",\"EzEFtV5siA3f3yh0dHi5zuX9qYx+uw3adQGieYOG+fI=\",\"LHKNAq0RyZmyubnqnlfUllcoced0MxrlY3TyOAgrJ60=\",\"I+8nffocDg2UvGHLLou9zqMPTUAkUxORpMPpyrRUOzs=\",\"FkMa1YcbyuQWjCuGHvSwsBk10Rl1jbmq4GwAvTDbTfg=\",\"KNuTsSMH9b7opsC3vMqLIwW2iAIHQNQ0X64tBO0lBd0=\",\"IbDvHlJNjZ67/GwsdJ0OyQ+ucI3lIDheqL8EKFCMXVs=\",\"GdE8Yz4mAwWnFSivTqqQbKRCeXfcDHR8impFA/70Pow=\",\"I9gJ3hSwLBBpw+FN/1OLkQ5ISv7/QAssHST7DgCZy+8=\",\"E/zy+rS0tmol2sDNUX/sWPWsGFDYZ7475K65hU6zDvs=\",\"FhlnrvGn95B4F+EK2tN0aT09H5gexEQ4TE20OBldTa8=\",\"FpTVq0c/neNwGiVCQKAqR0PtUpG5IIr0lWQE3bMKQ4A=\",\"HHEMAzMY3LMhdwMgdFgKNQTySGaMfFPeVntIMPdMnqg=\"],[\"CvcaUc1GO5+u2pOAPNwDGGx3gYRSUv304BVXCdk903U=\",\"Bfw7F5nlsZElfHo7x16fqXsWTz9O3abqZknIMme+UaU=\",\"HESXUhJ1zYbJGFUXYPTTW+zvqO0IA2ycGNg4Fan8f4w=\",\"HGXBuRIobFsidDh/p5ZdayhDtbAbgGu/zrWQ2lMcaOs=\",\"KdQgLkVYUDsESSQklf2a0jgXBSVq/7uoARe0wihxdfM=\",\"KTMSTO2ElCxwd7KsOT0URk1RfH2PHjQGlO1fGsvf8Sk=\",\"C9WA+A6nkTaptSDOoERh2oRtnyPmInfxPWs6pqsQitE=\",\"BXuI2DgI02dboZm/xXgGM636pEybHjJGPWa3nhxt/zo=\",\"A6bIfuNM2uHd15gs0xg2LhonjcnN8c0d0DtsNq/4Ng==\",\"ImkvtoBRF5m4zuyW58oOHNId6Q+UhWrPM0/74vwmIFM=\",\"HYUDO6DF3YBMUjfDGriwloTGNbi3V4xQwkaxUxSSaHE=\",\"K1LpoKmlNa4F15uLVV1GHxSNsmn0njjdjsb4uNoQaqM=\",\"J3P82c2Zbzgpe5XaqyLB558Xn0x5/Uv29Kv4cl7NUDI=\",\"GK1zEa1jrxAICPZL3GM5K/qgo4gasDwxV8qBQIaKcOE=\",\"GbiDcsVEppMhsnPMYqlbAGkxpkIiyrRTbnl+V4pWMF8=\"],[\"KGZ/nHMyBz4pPIC5jt/64Br09ntMUqtF5J24sw8YLSg=\",\"HQzqhJ3HQJs7Jt41cVsy22GGkbwSPNnExeb0C0oeSb8=\",\"FhVW4D6UxxVmB8umTAu3+gC8qhJt+K+11Cl2wDt9Xg0=\",\"BBnCCi751w6TBilZHq5MYydsXXnWlI6Y8sN6zCnxpKo=\",\"HUo1hOOTOr/+CXcXm4wRLyzwjkCdMzYt9HddE3P002Y=\",\"EEvRtMAosoesP+oezcur36agZel3J5HD3oTZRVQvwgY=\",\"Jn74TmKL/4qahd9yTkwyy9MjfZG9ZcQ2GNhlAgMqNpQ=\",\"LTYe+o/GWwPUVQfPtTVJs7JqhKxQs1k9vAUoBuz1n+w=\",\"EoXEhBANcMmS9raVOplV9WlX6aF2QWeb39OItr9g6kI=\",\"DhpGpSc5RTnDnp8eRCbTGIwNkHcCF5BzTsASbQgo+8c=\",\"DvIG8hZY2wP8jV1r5bGDdCR67kOz8ptDCm/tf6UQKoQ=\",\"KsPbB9gxtGHzggSqBFSx7fwaDeW3puFeScY7xxQMMyc=\",\"Durfm1/YX5QFmRr39Msr2oFuWsp2EDs0uJFQL5IdYJY=\",\"KTHTh5Kjdp2lJJE0bHxvjxBsJzXvKhygNyU5aYOgBJs=\",\"ExFUzW3LubRpzWhguGFpmEWrzEH0KDMbHSvuu6jOt2c=\"],[\"J2PDP1ste8OiMECvvNr5mLsTJUwnKl+GNaEmBqWcLlw=\",\"J63oEKsWscnZs2PUjjl638ea86SDbtY8ZQBTygV6A8A=\",\"F309RN1UmUT/V3LUdCYD4WMSRYPPpLZzzPGiVFTqO+I=\",\"AsDeL/bEPB0DRFnchFgjfYCPsO1EXq4s9+lyyD8AaZU=\",\"AnrEeEYXX8qmBNaHzS7UHyylKQWy7vp56qhYPrrnYpE=\",\"Flo3eLicx9p5JUL0yabbqSuFF1pg02Yb63eFKyOGKbM=\",\"J+CKgNxEig6gjHnJGY5XUSlo30DUXwjCasgkLRJq7cA=\",\"H9gEymtdKjzHauHxJaC+5FZ2TbelU/SLtH9GjzxXqVo=\",\"F03nyg6+ahKQrGqAdtUbhf6PtAItqVpZpunx/C+7Lvs=\",\"Dz3q/i/m+66UF+trFEiFBR5dFkLkmzdGnTmmvWy727s=\",\"Ds//R2hgsQQQCrTQ3JLZO5kwJKHA1tULM5JD6a5nzLs=\",\"LO4u+vkKDnT+vNUhy1/GEwStpfh2CtwETLaE80G2Rsc=\",\"FAIUGJv5pAATEfs2ueXSej8866MqRXE1o8ZtduhANVM=\",\"KpD1rQdPPiOTRcPXW3CBgEs0/fwvufcgpkSIGJRu6XY=\",\"HDc3EIVikGYPOLlq2bqrpIehAYMmDh0G+bmTXTbpsLk=\"],[\"D4Go2OCHWOijKqgpJmbEy2uj9fBsTc9PxQL/l/A6haY=\",\"DDv4sEKg/JsBjmTVAEhO7MyAhuyREBLuGajpTJex+Lo=\",\"EFOeO63L4DhrWDJ/pexQ6S1IO8uBm0GyHdfFTtp2qZw=\",\"Awij+goterLvdGUJ8vt20aXbmUWGpU6dEJRI8YsoGzE=\",\"A64E9QB5QDp8bxPALQ7LvOdjHu6y+fKE3HwqUvv/R3A=\",\"Br9BBa63g5ud63GTQWnMl1RR+Ndvg0SZsoHrbNacBx8=\",\"AozVtSIDFfMqQEv5GanNAaMIL1zx7W6S3XmjI7/GLfU=\",\"DbJCEoXqf1l5EiAixi51LhsVxJHMpGK05xt7sGYZkMs=\",\"IA0mpdAKLBVKp1A2/E4kiF99jj7N+hm+t8wVdn6y3os=\",\"GhxkO40FEGdsiv6npMSvmEMkBnMQRsqIKkl7KafGF3c=\",\"HoDG23Yy9tZHZszhC1bQdiYi66DeMbYnHpWslM7G7zI=\",\"Fsj32F5BHQ+bpoXw+4Fcb/UXq1Rjx0u5mE396rgplHc=\",\"IIMOmTOrnIKx2ZNpIHOZ6zR/7NjYukMLWSUDjMMpUFU=\",\"JWpNgWfA9gL587Zj295KfNPUc1NYewF/TwNidlC4E/8=\",\"EROfemiE0MLvwymXJI2zB7vAy6SAN/xRhHjpY0/MdF4=\"]],[[\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"IU6GXi6r25/l1WOhQc4YuyVAKeDgTlnC/ssIULX/Vy8=\",\"Hg41iDsPF5TbAj+ANUqDlRODtiKC2rQSnbHRnmBcMW4=\",\"BcUQgKdLjSi1CxQijGpt6K1Tl8uaS5xs+Gu4B8rXYHQ=\",\"JE4IV7AefXqg6y7zNP3lHxaiQRq/7Cw762xi96cDYhc=\",\"KgSFKpC3QUPzgIoVDp8TceAXehtucsvLD7jx3c6KjQI=\",\"MFoxlyWgt7897z9xUXzCu644a2UVUP6UBc7Jje4hsdY=\",\"DZKnsAlGaYX+84jKPXDH4sDCZw0iYN+DZZ13YAKEMQc=\",\"Kmfu/Akw+CyLxm/61awJwQdAeBQTHNZFvBjNpv/09S4=\",\"mWdHNJGM6TKUCeUPLpBBvQcvnYJ3N95gHwnHreGdNQ==\",\"BEkRISWz8QpTssRl8r8Rg/A8E4JedtQK912gS4E3eA4=\",\"AsHuOHqMFefb6SAyokKAHR97QRp+Wja/xPonSaIsrMo=\",\"HWh6TjHGs8keZ9ydndnEdJPIObXhPKGpMQ5roBFCHPc=\",\"HceaXZ3kQ9tETeDwisZ75IJtAY/YYTnunup4H030iTk=\",\"LVz4FyxYfAUT8mEFQZ9WMZdjxctCz57LXifZqIxdFsk=\",\"JbrKvkiz8DDIBqqHnyUkH7uxdTTWhr2o9dR4ZisqWrU=\"],[\"BpsXed7D6t7T8H0MPmzs1s/+eNdH+u2tnJBmWqLZLLM=\",\"Kfsk/P3akovBj1TVWUoMI7uCLCd/4ruZngSjeDDHWVs=\",\"DAXC2O4CLFlSG9RBqhX6Ld9D5u+YEbEP6WQO5eiIw4g=\",\"EiygSNfG1LkFO1mrZ2UNENIlFfE2WyJnwIbcehaN5lc=\",\"L7t0191KsZDmJEI2WAMUyCC7/jQEX0POFNHsAEmvoYc=\",\"LK26hv9mYAzygAXwrEhwkUEYxi4RDjrgUT3t872EbSk=\",\"Aw1DaxAfz8KdZ9f8RHMhg2DxpSu3MWxKCApVwNAacJ4=\",\"EEGoiRo3RS2ufFg5bSJah+8ZhflEhbw7uUWI3QATKys=\",\"IOhlbLXWjPX1qr0MvCOEsAzRtl6nexwElaZfMnDk2IE=\",\"FxBwlmFLrO3xR+yLqN2/8dmdXsJN9UlSeacgFErQDdI=\",\"JhUGD5uLeXKq08BvgAeXAO3FkdDnAaxCQgOmp761kx8=\",\"FAbYb59u1ScyiZSI4GLyk8aBdnZFpjbY8HjdQGcuYy8=\",\"BH2+Vfd4yBXNjHnax9WVJtx2Vw/vIiSpNkDJh3DAVs8=\",\"Lc2wqXHFqhIMPYc8vQcgg6ZJ6QMUXgCCmqggLvCb6Ts=\",\"K/cSRSoRsGdloNjH8K95BSemZYYylKMs+j12KlrKOww=\",\"EqaKwzVJ9pArEoyzdsL1LP8H8SeRBjhrJv3o/EneMes=\"],[\"H6Tv/INJjRmqpZi3dx+IoFVN3dqJ0y3Pim9M93bRO5k=\",\"GbFXep5f5n9x5zNzL/a6A127GNEp9wGlZgaMSq0yFl8=\",\"CC82dKOGDYA07uL3BZM8Lr8jpevHo9d8RsknnfiTApg=\",\"EBGWO1576V+7+ihI1W2gXWIpo/ApLFB2ACfPuYV3ovs=\",\"KrhmNfRH1m6l715TOQMRl66Ohrc1B0QGkoDeWdclZIY=\",\"FPw/4kRb74VHsCOhztO6nhN+FvsONkXeyBPN1+WE68g=\",\"E2r+mlOs1eHWjPx1xWMNOXAcrjdErVqiqjT3NeqDBwM=\",\"GL73As0xeOtLpYm4R4MHHO8mjtaCj3DJYON5UIuf8eI=\",\"LFxHSmPBcuptah+ovpLkvGiR506HxaZcQrYapCqark4=\",\"An45Q6yZF0soKf2P+rF7FoN/24igxgYOIMPlxy+0IPg=\",\"KIpE0a+2qSpcfcdm1M3kh0sPScw+eY/CUpLNE8/E69o=\",\"LSVdTyi1bbNWdzKTy8o59vnAa8TLUnWDlVXbdyqWm6Y=\",\"JiZQ6bFmezGHfI15pYFsroDiIt+X5ItXS6kebLUJ6TE=\",\"Ir80/AKqLiFcmTmUx8/yYm3LchKXX3/88RzZCweAjnA=\",\"FAeO9jwqEGyIlRQ3Y4JP/seoaOgLia1q6oImOymBMu0=\",\"HRbegGlYG2KUnz5b/BGI4hy99dZ6W9QDkn2jpm9JxrU=\"],[\"AWdvXAdBerVMN+yK4agxS97rCZZHaYgVkgQ9/8smv0E=\",\"KGQVrLzIq6PluFSmo1fzALpAN+uLfF72u6yGjRtKVjU=\",\"Gu8dM3ylHKXSxcEWonWoGiH5DYmDS9GvYbOqa+1lx8A=\",\"AX6GSwwOutvS/U91F3uef9gBvzwGZGQHDGUn8JawtOk=\",\"JYfC/7g3/MW+G1oNUg8PIUUAC2eXqaUgWuMCQK9px6M=\",\"KtWze4L5rDWEjemnsL7UJiswdMgEfYpHNpWaIZRvfbI=\",\"CjLknszJDXE1yMZvuxlTvtnaBEACIcxgZBbw2wsGkw0=\",\"JOLIYXCltKjJUGbV9VPqrt5lXbqQwy5IWttTw9ufZd8=\",\"LpCVWmXBGqdA6FkslKmDtUK/lb7dm8JGc2R2h8V6QZs=\",\"Ec7R3DUfC2e43jHWeNp0DloMS7HprbBLEZ6N556QgoM=\",\"Cd6Le958KqKFOfw/MbHyhTinZsU8pukqFjm/FwY2lII=\",\"ElUMQ9jZsVLAOYaMpMUvB04C8x4YNJeMi1VNr0NjLYg=\",\"BA38ZfMTOsxlqWHfxLNl0h1Buegs19ZaoqMjijrFuS0=\",\"EvcSS+tiyuNcCT7ZaXWrXfyOAPJmjG3bo1H0WBJ+lqY=\",\"BTCuMFx8ipzmGUO6ob/AsuFhmamURp9BrsF829fQdKU=\",\"JD7+F+Rhe8DCDstfm9dvSKjdeW+hBYNm9VgmuAqml5Q=\"],[\"H057vI1Cd55Yqge/VP8yS4FP5oe0yOuBubfnREjuJ/8=\",\"I48Lh/IyIppcdInhx+3J0xn4FsIeb+QD/2XGDByksXg=\",\"HfkGvXVcapZeLs19MnaK4v2MUi3Q3cuwAjiekPXGpwc=\",\"LaR9e1OJMYmQ49brn56T63QEQ5s2Kg2E2iTYxxX6i/E=\",\"F8Yj3vLSYQWIs8XdI2rDECahY1Tymy+KGwlVw5FwH1o=\",\"HGw3uMryUZikqcyTxVnnO3yQym32rHIaL1LO4D9XIhs=\",\"An/q9btX20fsMXAYlp5udn9I12j7E4aYzrSq1HTxD7M=\",\"BOOSEXOQx3euk+4p21OXn08OFoWV2dxf7E7tGOoOM8g=\",\"Chv53e4HI0f0ZSRGH2bGVYLFUzvhg8OevFMlwuER61U=\",\"IzgsdWIO2nfBjj0Wb+57dOMCAq6DCYkAEISeGnnLkNs=\",\"I0wz3HwWSxh3RpGTAUA9dcWCN5ZWJ3ONn0jTk6RIKa8=\",\"IW/7bn5TFt24UkBvETMcJPcXQ58n1XyhXeBllY6kRGI=\",\"ISaYAMa1PfBIYQ810bNE4DoP4V8KWyG3PHmaSOTQch8=\",\"CG7HIjDNX8bHhCzV60/Wt1wwUakV3qrrYemyJ4BXmnA=\",\"L1QWHEzNk2riw+3CBGN9wRTU09bZi9m22L32A71LfnI=\",\"DscRgawr1yJklf9grbIKPJp2Nt2frxTbUzXYxMG6OgY=\"],[\"D2sYyY/In7+pmgTIyWrl2zXClkefSEtoDfkF1MvR36k=\",\"ElZ+Z6vJs1r0/7OB7TrPJEovkBmDn1+NLwtEL1G+iA==\",\"F4ORz4+RoeOwD1RaOkpTMf6v0qDRDZAnxWlUyKP468Y=\",\"Kr84ssBZiUAsdexSY+Osdb2+mvDB65KIPVzaVk7L3Dc=\",\"KixeWyR1HkoQ6JPsL3q5b4OpcM3zpUOyCkg1fMfshXA=\",\"DffUuDI3NYL9T7zffzxJdJ9u+1n9mfTo++28gZCg2N4=\",\"ByARz7ivy9i0MSad1ddKqZ55XGYo3B3PbC2NsAO/tDY=\",\"LjabLclmCfjBelkvLOBjaD0UggTCkSsOU6cKPEa/qbU=\",\"BZsnAotPCUk0XtSLPnmdEIE1B4TgBCyZQkMpd0Ti4iY=\",\"Ii3dulxyzC0S8Ko36UCglCT249Z5z3Jb0Fm0GCOTwI0=\",\"HU8kJ2iaHcXx18aDEc5bClapYbPUKnRvNW3YH6FHaAs=\",\"Kyn4+083aR05geP8SV7ljCXs11jW4kw/QeXFYiGmT9Q=\",\"Jnuxe7oNobRX4vxxST99e52k710Tpi5SXe+j0IC3Zr8=\",\"LmUw3oM8Ox0fW9oMb2okStgoh1CGUTbcIrt1LI4EQDk=\",\"HwuQxSNYqKFNoRJjnH0uov8d9Te0Eif008nr9wFMdeY=\",\"DZrNcXgkKRS4Ehm5pg73oNbdD7VxYJ5DNfjUGf+YLRI=\"],[\"5s0QiD4eEcbBkdNjKfMOsARa8GwthtDEOfXB9P71Sw==\",\"K7+tReWpLS/M7MUUZIupRNNavKP2VwlY7alqsuA9gJU=\",\"H4u7erB4DVv0Bw3b0bme7N41d1fzdzzmqKM8ttPWBgo=\",\"JXiGOnULI25Zdd6D/OuRcntPWIxFOpTkAyehg5ToNeo=\",\"KChPLrTvOO9yn4Y33yMFMuOkEBhtu+WuVJfGmnyvrHg=\",\"HFNf3HER7XNN75B0ckiZvqhSXCVxM1FZrzOvVzEKjbQ=\",\"KQN6gSbT2B/Kra/xmVoV+eUROyBcL3wtC8A2HwapZ40=\",\"AcxTGAornPtJeDOdCG7VTHSKX3cZDjDcKHmnahB1U+Y=\",\"L9bQECTNrE8nnt2ftSGbQUgVFjs4T1ArYVU34Dz/KyU=\",\"IFiFGQxtAMFCAHThpKMWPDgvcZN1T6X4fduYo5PQMvA=\",\"I8+JlAtkGP2+1vhLv+DF+FCpuojEHpmFVKSkEj0K5ek=\",\"lo02/yo45q7KMG/ihFhxnmm6Gw/Ha7Vh/tD4IlXLqA==\",\"AsmBTJanL7MkQtvakkmkEvmKIzBKhrqYSFZ8WwdUVU0=\",\"DBGrlim8k1Rpuf2zP0jyLbiV9d1eGCV1ssu7IhEF/Gk=\",\"K5jrZLhkK/T1KR/85BYQIIi0carD0vgNpYW1/h8kWIY=\",\"K6n37+DWHIRgCFzcpsG7eKp7wIZTPyDzAeAQ1Qme55A=\"],[\"BCWpZB+wFVi8cXCi/8JOtqUUGYspahYpzChNmDvKh1c=\",\"DZZNomKH8JvBkOgjVBG7m8kGgAP6bW7gMind5l2wf88=\",\"KJwMt/hNYmOMKi838Q8wpY2L2LTFvY9aPKRI6cZo9hU=\",\"BmIr8opfyzYeC3vf1/oIcXtRZA0F0fb2upS1DSbdyrY=\",\"KsqPestZIzvE1N9lucbzBHnppy9eaCGGCzm6ncTQP4I=\",\"EzD+KIvLStJ94270jwY7qoqzC+ZZQFkv2XYjx/rtTlA=\",\"Ce/MaSVFcDvL62QezmJIgPc6EMDSwuYTL5Yk619BsbY=\",\"KujYE2NKh7AxuwhXO98jerNwEhW3fumk5qLAHBwdT/w=\",\"DCubs26KtpOGayiFvUSC7VyJ8Gmz5kRWVdcPTWaH+MA=\",\"GmBjcnJWmOfX86coBhf9ht6ayvmLvYlx2O5TkywutqM=\",\"CmYyYTv8qK/Ik5sz5JEt3xiwNL5iEQataV69UGWv4Aw=\",\"JHl2nNYIOMwUCmSeiTe+KKySxxmA8UnKqvAQDR8QI3Q=\",\"H5JboAAUKf5JP0jqQEqO0oOrLMLzJ17P4yCv6QQm9GI=\",\"EjH+B0t3GsZD1uGI9XMsIJxxt2hzmyJEfmtdz0mbSIc=\",\"DtogT0NKNHy8Ve9piu+yPfBkxX/NTNTN2BDgXs5lFTU=\",\"Azv4YxQbK5rqLlnPbE+vEUZnAKpcODr0UdQDycUxYL0=\"],[\"OXp9dDSwqpQTSN5FrsRCzVytLDmIhJUOgjPFjdUDNQ==\",\"FJXpkIZfVZ30x71vIScrgQbiyRy7Gp4giZIsYrKnbKc=\",\"ElSWh4Eg2f+J1wL1gVS6ghWOgY25Dj0S1qCMVUNTY2g=\",\"D4ulRE3hjRmaq7xUQsHXwByvr8ef4JXaMZKNd2v5hA==\",\"HuqjHavWtqnvp05DFZF9kCsCdgoEsE7ttX4mH6LGYyo=\",\"A3dqfWkQYRik0i+GBg6n2wycjzzjzNbIitpD7hdcyBE=\",\"zvdyNMQlR5V+lQ5FrTtyNzXAEe9Hzu6LpCK9FnWb4g==\",\"Ac6+rFV9IzfkaHUB+fcfrX7LFK0JVQtSQXrDPC6LyiE=\",\"BlIbcAykfyIuouKA8xk99n4aWWa4zr/7AYkKo6h7syg=\",\"EAqF5tpKC5KoHxUScQyIminI7T4GlbwoWnHKVhdwX78=\",\"GmKIJV56VNQ5fKQLO+csBGm8SJ5m+RbBqQR2gWoveRw=\",\"AzEluc92ZROo6CoNBDdP8YG/qBj2esHH3UKYzzK4XnY=\",\"D36CcgE1s1J3/FTr3YigJq9UW3RfwgRJtwaMaGXqwf0=\",\"qfKOYhFy2RG/+tO16ktzpJqVneXIborFJ0XVWKb1iA==\",\"AYqTtdvd4umcI0JT1KSTSDEuWPAz6H1ERpRXJ9qDPFQ=\",\"IjcyTeaNGNQH2z/OKkAeivR+qMW8Cdhi0SuNv9OvXzs=\"],[\"HWbyCPwEQRoThcIuID3AjwusL3zZ36zN7CDTuTJSrQQ=\",\"EBS1QNpFlVu+dZ38nsS98yqZ1WzSdC0mn/hpHZFc8kc=\",\"FyAXRgYiRminBnw+jFOx7mg0kUSvbWly04yQv6a8pjk=\",\"Bmk4k7RaQLxzZpJf55eLuA+9W5o+onydy0VrKwRnDE8=\",\"JJyHUedEPpbG47a3jX8ojooAwF8SWXyYT48Os/nA1PY=\",\"Ga/m2BAx/hy9/ysk631pGlC9a9jamO9ljXUXFIDNZkw=\",\"IDSVfj/Dc+lNd+CgUKioS6SQlf/G6zp3dt2GlA2Q8B0=\",\"HWXy81dMH+AG3y1Q/tJXu5NfkClwx6rhMaQfLeS0i7c=\",\"FWO7YWKeg5IkOM8HI3Fs1NrtNq6UjnTFyF27fpiT1kU=\",\"LxC3j3RBBKVKgUkgDK5Z5EPnTtqxzDy8LYwXDM8veIk=\",\"BzltUdGdlMs0swSsYGtUOZ6JJzq7Iv97trQz5HLOHo4=\",\"HLuPpL5On98Oyepn343ywbeWKR51209CfIQyFv5Ig0o=\",\"FOOmkgpBLagdkX57nZi7qEnMFl5Ab7PEOsQh+a3gwig=\",\"Ko5IavqgGqju2lcVQdIZm1XI9fcwylw4efJGwieAnJw=\",\"erw4FnoBtrxYMVh95NeQ3kPmjmyp6ry2S4r2iVrZaA==\",\"AeglSDqfhQgVkMC6QAWf6nhhcZ4rfaETI0NzE7d7ao0=\"],[\"DsHtOuO+rE3dH9sXucfGSOfsgYhaB6W8vZZ+ajZ281Y=\",\"HYOF6Xh9FFa9o5mqTX9cZDz68l1u1g4b6a6LmPvt6R0=\",\"L1dLhSlgRaKxMo9IKj7GdHk+owDggXcg5pEtRn3wZ6U=\",\"KR+xdOXud8BgYVp/WnN6V9VuIGCESu3QqoYym5s2FJY=\",\"AjYsOOpTjuiYoSxkWMOZ0ocL3YgmMH1W8Duyjg4w0J8=\",\"IxcTQQrpqNoIKEwpuLl1QQ2rb4T1ZHXaN3ETReaNXi0=\",\"Lvafwac32zq8iV9laBHlnn2HM1Wy4TQqpRNNi/cCrJA=\",\"Dvtg+xhYT8htiO5WnacQRvdlUmsR9sIAmabc3+68T3A=\",\"CwROxtFIY3pH+ReUT4HpyLg7DAxcob00YqTg2qdwPaw=\",\"ICZ45DFkgXJxOvqr4sjqFIBhIFxjn2ObXkXUmL4VUNc=\",\"Kh4ZVOWwEEQMFnlxnloNsnwKp5V7dV7PLJs1caiqCg0=\",\"FU2eew3I+mfIIBb8aHg29hKEQx/J1oFAXt+zjM8opvw=\",\"KnBNHZMlPLEJYHD78m1N8rr02SBX2HWWyt0GMXYmeRc=\",\"KiTU39bp1kNeTKGZTKEa1626KSS2q3z3xqnvXn75riE=\",\"Foi5qcvDpj3zoqNcaSOqCUmBbLV/76bpXXYnt2Y6Yxc=\",\"AdHKqESdpyH3yUnM3DjsjGE02X17vN9Y+jxHHFGmcqw=\"],[\"Cz5gHjal2C4CFDYshBlHTcHMLA7YEmU01po/eQsnxgM=\",\"DmuTbsuKWSdGJFM9A3Rs1dJm5sVJDTyVraIvSiLoDjI=\",\"DVbN1zDhQB2df5PaiNbzv7jrH7pEDFUrB4uziny6VbI=\",\"EsC5PYKf9blkHZ9vLdtPksensUe3lBObzpith9aA1xc=\",\"LeB0deGXYutbrMrj6IqhST010nbE0FxnBpe0OCSkFkA=\",\"LqCUoi7kdV5d+DUrKsZx4jHCR4XbNDuRRfnkQpezYaw=\",\"KrRoLjL+ulU3CzpHetg/MMiNs4e7IMapsuVn9dYKSnM=\",\"GnDuT9HkXEmOdx6dAhDdFBRcwnQMNgfgROPGi2pgF9Q=\",\"IKgV4ZphmOOi+Ki8JjHFUlIRgvY+ElR3z3ZaJ3BwNaE=\",\"Amb+BcYxt0rhzOskFDqW4On/9ZME8E/tz02z2hNQhXg=\",\"GQ3Vioj92IegyoMGgayllJ6okFD6uEtmKX19FNy5GnQ=\",\"GuaG7s12I2VcVRVKqMXIITbrVgIPuNEZmv9ci8EesMA=\",\"IK1GeO6BLZblRP+OXmXU+3vxXMalJObxneavmDyZewM=\",\"LK9nDIT5i2jQX07mcqE4gwY3bniG4wvSsWO/p/wVtEM=\",\"GjNqht0LMyWTMjilO/aPIf816Vaf7xLLth2KucH1CuY=\",\"Dl/HwdF4VKBnNHnUWJ2oXm5h9IzJULPMUxVkzl/Kh08=\"],[\"Fjy046XskuV7JbCVo6qoz9xM5ZJncYzGCQoH4UrxCw0=\",\"GYU7FmlTS4L+5lbwN8M69zO+14WrcmsIJd7nm2KblwY=\",\"GxZKIjjF4QdpaDSsWN4bIeSaNm/2MHFZ3UYaPdQML1M=\",\"KSPCpUZNyZFzPkYSTbdMQF4ys/2d+yrLfYibGaNAzpw=\",\"L6GmsMaw6daGrWCAHHKVXBrCVtI8VFFS76gdym/hSA4=\",\"J8+HUBl2MAIu+tkgPmOuovGVMVodBlo2iUpb7TK8iUE=\",\"I/nIP4jOfHjQxsuAWfuGwhEMfCZneLqBabZl2v2d4YQ=\",\"HTzlHRGIWqzJp6O5/SgT5+1gKzPTM5+9kbuGnGiBrXM=\",\"KT8YqnfYNyvJylNmiphw3mOKcGc0Yxwh7a3bIMSmuF4=\",\"GXudBpVkRUt/JhZu4WFIlvFT7RH2IV8GlRuDTE2jgEU=\",\"ExxczmQ9K42dKUsyq/LJAQ7GIrrW8RgeTa26lUVoS/M=\",\"JVa2G3cppSfywBVEq8WFrW2pySs9+RIfN7sP0MA9LNE=\",\"BaDYk4CioqFKy4YMO/MqtrPJc9hLDWGjCMpzJXwZzbE=\",\"JHhcgfY0BLRhJkNq+yf9I0ASLpqYpYxGf/FKu1qQJB4=\",\"Cf3G9s6vJWbuOmGKxNd+hjJ+8ni5aAE+M/CBMZBHKzE=\",\"Aq/IMWYYwVM1D0uiKeM4IkXBOZsu5KyiVYAin8I3+U4=\"],[\"LcqQ8+WhWymJX0jXoSkNejNka4liDdCozN46o6UdQcs=\",\"GsERlfdNf95lfQk6MTFx8Lw8/i+5ZeXDUpAPqsJTBeU=\",\"KPrm79Vdlkiw2d07jG6SjBGllB3W7CNakBTG3TWtMVo=\",\"EuSWuyaAt9FOur+4eX6ca7rGikDIuP1ltd+xjjjJloA=\",\"GQSJ7060GC7KUTMriVh11sy33QYKo2TB0oni4ad0ERk=\",\"FXdlg9fSYcboszjDs/pDI6veZu0PR30DVRGcn/VILrg=\",\"E3DAF4n3EihCkO8c/8XTMoj7UExXY9KAGFK5YKuYr+A=\",\"B4brtx6SC9FuPd/et0jgQLfxsaDwSWf1UhC64vdrzPI=\",\"FdTSxxPPWPSAUAxuWRb1K26hrAcHcbDIOm+hfPbJuQQ=\",\"D6suqOUArtZGMKUfi/nr8EAHPiOjzxiWOGVtbdGvhrs=\",\"EzihpEep3y/eUKoJdF7TvwnjLk/yyuobO3NqZmxxUBQ=\",\"BZ3xseZh0xfQGlE/x9+72AyRktM63GBgKwsLnUXghTU=\",\"L4QLSsXJInwKZIaTh4zzfpVaA3h3vV5cy9jvz6OEZsU=\",\"CES1dT/WEQj9f7inB+dwr4keyZ2p1d9osBOjqHWZ/34=\",\"AgSe43Epkm7Nb/OgjgYyoAfMqtr9DUAqQJVhos4JW1I=\",\"H2Vw+zkkdEL8A6UTmURWfqRvb1NKAhS2Ef07LTuHg2k=\"],[\"LHjuXqFtOPC+udwHM8S7GJPLM/9nG3N6ESLWT3Kc/yI=\",\"A1Do0u7YSALf0U14eLC3fNkHd3jEH/dzPSzmiJYaSzA=\",\"Aq7nydhq64dEudO9fOxcKS4cZctjPeCvwQHp1v0qNtU=\",\"FrpnljMvtWBQ4/xBEfMgzAUlXCkvNNtx6BZED8xFK68=\",\"FK5GUpqh8redqAh4OCqGM4Mj9qKTrb2RzVgnBRP0tpM=\",\"DPM+3fxz4pu9eFA1KD9ugFEzvx40u548wvkV4GsnLic=\",\"Ao9wQWLDvVId+EfUqKT3VDnmaO94FqkRAxWGGf1S5e4=\",\"HCB9epCB2pO3N1MS5Op1RSPZGYxQH2Vjj1r4hXCNI64=\",\"HMKbqO7UOqL3GDG2LspxwaRqtoAHd3Z5qqjWEh+qW1U=\",\"s5WW7GXkU4MGUPjdh9D+iryWy1ljYlLid5eSDga2og==\",\"FizrRgCLBz2oyBGiWmi1baARgvuJOuHGsD0xCsiUT7U=\",\"HyUmrprfzNIjq1fp3n5Q9dPugyhKjWKl5AFI9Nzq+rg=\",\"KP8xHUpEJR/u4FFRHKxIMuF37cigMFPhM9IG6fZwT5o=\",\"HDYgeKEExzi/bF/aDt+c4srDsh6yd55zTRTXJ2qOUmc=\",\"BEWLiLE68PnUXCtD33Kr5T1um1b6+x0MFc1FoT0zsF4=\",\"I4l+spSl+k8wARD7luwjb4wOBJ8p2lB40SJDN+JW5wM=\"],[\"KvMk7E+ed4bc8AQ5x1opS/91PjKSu/YuZkcfpzDxnHk=\",\"EZMMqKiEFEHdeZoOPnjhqUnwW/mWA7OC/3cQIXcPktM=\",\"G9IQtubCB02U2fMQ1pBugYkBdeZ1zI3WWcKHQ4oIzEo=\",\"FLuJH/3/K6ayIjMnZKcgWUBOWB8ygmXq/OT67gY3xs8=\",\"D6g5m6d1qemOo/wpIx4a5xd92PY8YW7U9IGfDbmCquM=\",\"F3SWJ62vPqHzHxScsP2wMrnC8XwmKu+jXsHVFuV35tM=\",\"F6FMu8bD5w5QFF2qtYzNogQW+noLBWQFbgNmvhTZdUo=\",\"H/JzdHJ5zOVChPv7thu9BPQDr7oQdQf3aBKmRfqft3Q=\",\"IO26dbNpWg+TTGjJDU7xnM8dix4wQtMjYrUjixDesnQ=\",\"JoUv4/2tBLBeqrYqt/4V/PpV4DQFNOKOLYo9gYGxyFk=\",\"C7cWesDDSswdPguDIS9Q4zYOtOlnAE2lMoYai7Unq2Y=\",\"CVdAG7ZA0V0E2T4843VrXwb5hp5RB2sT1CpTviija1o=\",\"BNS3LGx6WSKjyasLAVTXsSxF5Q+KI3qTCALkxkzHFjw=\",\"A4/TyXLY7XcF/7+dRiOBYoq2VLdq7fT0uymi/GySLLw=\",\"CY/y+0a/qbSEOSlM6FrSV2jN5VEMhRdeBz8UFKZeTqA=\",\"DIcvEOJMC5kpRIYqvVIVLA+qCqUIr7mabpo9LTY6XB4=\"]],[[\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"GX/J+yEwkhjrcCuTUEQUbNM0B+0zKRzFmTQLJxw5lmg=\",\"Doq5ct907sSR5LjEFrSpfD/mWjjU52CT6+0F/z59dQ8=\",\"F69xAiOFMcmI3GZTI9PjNIyhPv99AGvhgc/KVzvXfnk=\",\"GwteNdZZgeg2Zjq0k3lYCmWeHdoNjEnBibgHi8/dPw0=\",\"GqMDxtBVLW+gE98n9/SqkH0Q2py54Ige8tt+wadKu/U=\",\"D07qgf4RqjIyKLQwovkCHiY51mWWs4IeExzY/V+voKc=\",\"G0cJeoY0YFHS1C1oEO6PP6O5krkMAJBACV/oNXtr4k8=\",\"B3zfl+IEnhdk5xaapOwR7TFLrd6ehCGLz/OA/+vkU4I=\",\"C01oeaVOvEt0Qi9weJwbekdpT2vA+IYkrQFBchqJ9zs=\",\"FLqR8p+1mHodPcq1XjXt0Q3jrPQZnYd7XGYjtabvjZs=\",\"H6vAG/EJG4gAHoMrfsruJuXrhn+FuPHAg4MrHbV1N6A=\",\"tNTCkg7AMYfR/1MbTMG4eccyExXXrqwJtTutlDnskw==\",\"IZF5Ltbd1sPqiuAJz9EXT7nvwBSCSIwQFQLjTblTgV8=\",\"FisFoSBK5myoDQqJ4QQm7k11f5s0zPCMGqxpfFUkWYA=\",\"JRV1UAzjUm9LGQBhNh6yV2WR+e8vCn/5pwBe/DxxJjw=\",\"BDhFkuQqzoyAFPcocErZNpXlChbFGZ1YFeAM6BjtgIE=\"],[\"FEDcJXj0RpTRjCX4ktmMI8/bh6dyIAAg6JeCPUvITTs=\",\"L/FTUbFNG4Uu39AajvEIqwAaEMjWboh9rxgXoxUoklk=\",\"L9zewQ0zVJU/qcqHaaN5nQAWJrtxXxmpfncvK6GrxCE=\",\"FG3uwHc/B1F1oghGmvuHGZ0bBjyZS5gSXbIuhYRPtFU=\",\"IPAIgftTO+ibkkZ4DfcqJuyxA8VUubb7F4RP3cyyNfc=\",\"C0Geb8k0jXxp3BW0n6FIIydAY1zy45kEy1v35OHIUpI=\",\"xjIdnwTf2RpPyFCrfR9/pm3jjWf6rCZZmsYsgHhDGQ==\",\"ASeErjqnYfOOA15+5fISQuKN9lI12oWZ2AqTZG39y+k=\",\"Hgnd0Y/cPEbHsqr2z9lCxicgzRYwtj3KcrQrSmQJxaI=\",\"KnGjpl5JlCuCUkWqEnusjd4qb8pXDINl0yUbFG3NB4w=\",\"GX0Xiw+R0Sv67xj0AmNVVO+6faWb9F9tqvPuukRMO8E=\",\"DPaSexWxud8WVlgcq9CQm37i8dygJY4YOwewMLXbMyA=\",\"KEFRGRsjAxIpjKDRzG+/EitDX36N4l2dGScyKwtahPc=\",\"DLj1MzCZcAxtN8eHxnv3+mrV41wy/BpTmo31e5ECV8o=\",\"AV1aYduOBml98doPBpFusy2Q6G3cU9F3q7x8zIbxQYg=\",\"Kptg5K4Wnz1fy0vdcF2J4Kk2HiObw0F8MKQs5kXnbWs=\",\"CIOwtgZpWwyWpnzPIhqwFp66iVNj5myohCXONwDA59Q=\"],[\"I67rDGSZuEv8Mq48Qt+XKHmP0u93TxUYuHC8V9E4WQA=\",\"EB5+NYCJkejNsGJ3lvMxuJ8mRs8CY5JKpgA0YLNRqUA=\",\"K7VoqZ9VvqhLv3bb8PVNXxMx/6H2LWhvNwmlZmLlGTE=\",\"DO7Rt1svbvFDi3UeitTeok8aIPHZojWJdy20m6+ZMvU=\",\"KvUBMS4bZTFV7H+ODllkmy0Hj1zlEhvoP6cW4bXasr4=\",\"FS/bq/4aDe1uK6VJfhQOzR28n6jfZwUjf8jHZDF6x1E=\",\"DfZsQ3y8zSaL3ESMu3BvSxeboiO2u4epIQlCV7rytp0=\",\"FeVSHFgLn6ozfZugZRSsllw3Oi5gQwW477Cq2ALnKiE=\",\"CaCakDzk9pq5ndR8Fgh/7Kb8ISbrxM/Y3vegJTMD+GY=\",\"K7UtwgKOmIeyqCJxrEb3gA3RR+cGNw7l7bNblVDPcbI=\",\"Cb89Afl+ImRlBfdv3TlrAmvIvLoOBSLtK6MHnTAf3Yg=\",\"JrcsNosL0BA8t9zKCOaLREbueI72EU9rqJkgLx8ZtbE=\",\"K8uujVRx1WLohbSxhbVq4P4Rylv1RhoeCkEgVWhSX0M=\",\"CAXWhiyvz1AwqzAmKgHyxlsrcxKsknm67VDBd1Fr0N0=\",\"K4saqZS1TuVhd2bcgS0V08q/GH2NtKuNqFEw9z8B50Y=\",\"H+1bdbAen0rwHr0wpvNV6LLNiPGeSYkqGUA6iV/PKE0=\",\"F+4ANL73fLsRX911vpiAAIr1aO1jPreyq9+DYcQ1dQA=\"],[\"HtnT6Sdqy3tNrlProUiAb9m7B7LdBhhyEvq33L5j1yw=\",\"LAVjiuL4PnOsmxusIgUJ4w/1dXNCzK0XJhpMMOO8Y0s=\",\"Dx+gjkJORpHGa/ClJLgeiG2iNLpbv3jMFoyKEzU8llQ=\",\"HuMqlvjT6P3o/7oPzXKFmEeGG4FDBS4hK7VrED9vdC0=\",\"IBktit+EHl3BEJlCOBgCZ5VN4pyJU3OK4ZZEessYKno=\",\"JBmmCaOAFX2fbG5kriz7bks54NbsBmG1RsFVKmIPGcg=\",\"A85Y8UfGgXKPKir1hhRNRw4iMegBYflyALeqbWJLi/k=\",\"EqupY+QV+bvJXF8cqK/9WbbGsD/Mzcy0F6nYmk7r+zI=\",\"Fn8m7trimfDlYVfIx/3aHstI+Q5VPs29TvNbku+fOfk=\",\"BIahOVYN1w6QVDIRlt25c+fbCTUM2s3jwceBf9K4pG0=\",\"HkpjLDTa1BhzxUHFyu2gK/WPISeZS8oLB4C86uQJJW0=\",\"CkceYG4lbjh9XkTY3lXc3YM7NkuvAKaUtS48EPIfgUw=\",\"DFLxIkBmwhKjZnuyvu2hgeoAKUxaq5NI5acdaWyPzSA=\",\"Gy5Rvwr8FhiLfsYzJI6svcVQ9ZLHQu3JGyBNSd+sQqE=\",\"JdqR6b5Q43Yu23epBwbfgCRhw3SnuQ+yrAGJMPOyNRg=\",\"Kdub2fOUA4Txd9djRyFFHd0MaoaP0EcWHCNY6cMFrSQ=\",\"cGLeNPXHStWCKUj7fEdiVf0DoT2dh4EmJxKUbbIhVg==\"],[\"L/V/P36VsDQR23kKhmR0Z1gRlxJNIXUg7y5jMqWzUYU=\",\"J8p7jDMgfnWkLLoSN+DFaNOzH0dUJNI6n9C6bvGI35w=\",\"G2ruxJ5ZNqI9IYLeXKeMpW1P/oWJ0+d9B6NGkqfFtEw=\",\"BelMG4G74W53x/0tslSUkEbLhYNMNODYmGv/cu0i9vA=\",\"JKAbiAGyhlw6PSC28x35U1D1yqnqFYs6wkDOuByPbNo=\",\"GMZH6rxvtF3sYb35AH+Dhj+2t4J7I0N+EOSbr46DXKU=\",\"BSPL3FeHwiDaJ7zVF9V787Mc/55OLpcpnUTZ+DjZZGU=\",\"F5mYnrxPvLhOSHtOQvDkUAwwnC2Q50DQP4+bztoghhY=\",\"JU2Q8hySPjD8tHFoj2SmEV8PQ0C3RMXXMqB39f1rRqo=\",\"ENjxyQqU2xCntzDYwhxp55PMmF4e8sYriBXmXF+pGWI=\",\"EDLM0g1O1FAt9/quCy2b8sU2gwSiRhFZfXZRczBTzkY=\",\"A5vtIVLBzDj9igrd0ibCtdUwl/g9gm9+m5o1VqMsgAE=\",\"Jh1ow2iu7vwWfWs+LSK+SEIxtbgAtROUEzx7ru8vh5o=\",\"AoiTMFJUGXvvYDB44zPbNh3sGnd1gTvZXTnjhnKcxmU=\",\"L1cMgNmepJu9dsGZ6WHba/WbpuCkdoOSNxb54Q6RMiE=\",\"IxjzofnvXGMmlgAU5iLbVtit/IhePQvC0G6G7AexVsQ=\",\"B5RveV+2JRu+BBE4YH8O5uEkPcpx1ZLK1T9jTf/ZHM8=\"],[\"Ffrvv4WEo4lptKcZ/+XwLCGRqMztoLd1FiID0wuAIIs=\",\"HdjFL7zW4Gzt28Ei/8xlbkwori6IuU2nnzona/X+Ks8=\",\"KRVAizt8LPEnmZ7zqEoKXC3nDnW8sG66xnxzrTbNcVM=\",\"LmVffmJ38hR2ZaQUYy6zpBis2Q9qKXSOQkn2cT1UAH4=\",\"Dg3ty4mEBuw24a0uOZK5nItFfMq6IQW0Q2uoQOib8NA=\",\"JwqF3PycjyAs3KNVJG/ZiVUUlexX+LZTM0Ljr4oebYU=\",\"BJS0xicxuvjzM48swN2TT4JgbnaPVjp1XMUBUEpQqcY=\",\"AXBh/aoDIJfgbAA9nXGdKd9MMBCdb7ht7zJENegXa74=\",\"D55Wpa9ThsSITKfQ53kqItO5aoAfPo55pqxleMHuCnU=\",\"JKdGgZu4V07tROIzGc790JwOjC3Rzmkkpj/65Z6xqQU=\",\"BwO/7HtTK5E19yp5TZ46PG/2ZcCNWQZ3AmoGzaZgVek=\",\"Ib8egmo+IUGtLNDGsoYUa1MJJ/Ddyln6eNBqNlZLej8=\",\"L2eAcMg9cZRQOFAcdLpZaLExk5pq9u2yl95fNF5mkuU=\",\"HDCruIs/t//46X2mEHIJ1gj72fLbl+YddN/xnT42870=\",\"KhT6v5439El5FN5YaNqmKO8zR6YR9nXZTvZ/wxfigyg=\",\"CeqNggxObuR6T8v7oZzZTpFd6d2iWv0TmckhsbdmaFQ=\",\"EG17Le1GlFs5Ae9lEkXVGa6TuNLuqBYJcO0H/Lb1gBU=\"],[\"Hm6qsRkVk94NicuyOZq4qpVdgprZWUKM1Tm+MLcv3pw=\",\"EvF8KA76QN8Pr9txSNeuhrZAH4I+R4VLfxHAqH/wC/U=\",\"L9l8fU4zHjKNPtoEemimT3yshntr03leKTLzUGRDdKQ=\",\"LByPYLY+jLugFtR1ugSD0AHHBlPB68JWxR4Yl1Nxzwg=\",\"D7LWRrUFxh3FT1b+neZmQcZ5flnoYFKK61KGequvwv4=\",\"GkSDXj6WIKE/3AcsEhLpQu6V5oPWwH7wl1J7wQYWxiI=\",\"GS5JxiZTDVllxT3G5CCYVtcSJqpQIbnqqheEBEyLqqs=\",\"gPqd3fmFE3vP6WUGhEnLbrNrHdsXBthjKGTpVPWsWQ==\",\"D/E1XZY4n3x0snSVCz9wo9dLv+mShgx7ptkGblkmDDA=\",\"I39PPXlL06I8xSx04O4Q3KHU7dkKOlGa9UlErJHerMU=\",\"HJSYVQcVnTZ/KqWhoEhXvUTSBe+EObhEOGsCWXZka9I=\",\"KG+xXpq0IkwDGa3ToWuMgtxxkx/jvi9LP/AomlMZxKw=\",\"I2JiQ47TrLv0vVbDnRK+Zf3AEmVivNVGiknaa6M/yao=\",\"D2lYeSldYQ0e2w2nw/pDw2M+LQLS5q9nmaLaQeQcNoc=\",\"IpSdJ8Nz5ER+mBTW8YnQZLOwkrRID40hyMEjQqlWzaY=\",\"C+Cl8FtvLesvtr+DaAXVLZrSJOi7ivbg/7GUpJzgJvM=\",\"AwcIiKYu3t+uDXLxRLirNw+KVMUll9sz2Ywk7fHaug0=\"],[\"KjuwIMilDTEO9bXHfMQIsHf+JIFFR1TEVo/2aP5fCXQ=\",\"E5mCDd9IKaJL+svkf1a3kxF/WZ79/PngQr1XgPq8KcQ=\",\"IwPC6JoUgooZqfddl/F/4ItigvvAkObdaaTXgAMmJLY=\",\"H3pfj9MLH51/WFXAhOiZU2eImhoHbaF4Wc27/IMBr8k=\",\"FPeenpxZmOjL9aLx3hjKdwf1YntWN9zZYnJfjqGATTw=\",\"AQGZz9SxzKHwytrPy0KbRLz4PhPMwJjZCBY66qHPWpo=\",\"A0RZN2/kJGx8pvKYGAwhUDZ+wF7eDa/cSAbTTkTBgPw=\",\"KTPrNCeWp1r34dwVwEkEtfaLtWrAR4qFIzpYhQntrg4=\",\"DtSU9vtVmKsKCnxlWJDd9KfAaE8kUi0q+Y2+sCBHkeM=\",\"Io4x35BVZeznJGwmGqW3APYPbd1dfCSSZHSKs+Uhog0=\",\"0292aaUiYNpSOziMYI3Cg/EH6VeOC8vh49QgG21b/A==\",\"LuY+o4zCzuDgh4lYHLMe7psRLdYeQDKovuvtzraqr+M=\",\"K+E3RtSxm3cP44K8fnpW6AXBreDJI24+KPkKX6h0KW4=\",\"CRYkn7u3UOQc5vlHXmz2M3ykrOY/eko3fBT9qceyBa0=\",\"F4Vd9jX+jn/HkZQSEG6YUuzFeqC3WbSQz8R3MHgBb1M=\",\"DrtI9TeHc+wEisPrXITUTLJYVYPORf8wqTch1w8onQw=\",\"AzEGu959An2y9yiyVjpi09b4oCrhFL+4olk8ai/BVSQ=\"],[\"BR+BXEVLYBXH6/kMKXuQ6WBM02rMavB/mbXlH96zIjQ=\",\"CkQAR5T73c7qx4AQ2IshRphMdVU87CYWR1TXJZg1izc=\",\"IkI6rFoLURkj10cUjgkdGUXCUqd+UbzGLuFzxUg/gKs=\",\"HhTAoX8j6UrENbt/YpxsCrZvyoxNsIX8Vr4K2dpUWCc=\",\"GVjWVHrM+4hNUCKaT9WyNKN39cZx+4ZRcNCjk2gLo94=\",\"FLzG1Lgybma0U2keXJSKgKYYtPfs3Do4BHjUPdQHWrg=\",\"GTAlJWuYceKv68lm7WjzjS+QakhwZSgF5CRjU/Vnxbs=\",\"HkIAv/ucpOR7snCgno/ZlAk9vUgFxMwVGFztKP+HLhA=\",\"HR+lqDdC65u4Uxl/VqRzJiWyR056rbkxHfvcD0GsYb4=\",\"LWUNqofH4cCbU7EFlbqx4UwypnFCCSh2xXtLpo76/VE=\",\"AzMZvVtSR6PLf2Pa5G29gTbz86m0qgojIwkHDXGPfUc=\",\"JuVrGeVcm7XfQ2wT623v+rUFmARVJEI3C+U6lRsKniI=\",\"Gg8JMLvqZa0JUXTtiq6qhGKNNUcb2tN73WJNLu22vxQ=\",\"KXkhCIqUv+7qIzyRSDohvFmYIDTgyHOMZSbNRPmhEwY=\",\"EIKw8mTGHze3H61ATLwCB/gJz4ACp+OcApDYikgSA1Y=\",\"JcxSkBrryzX5zkdFe7xFB7uiGciKW9Ein23EbFA8dp4=\",\"KuG1s+iRF+CLtzheC3Ed4zTo/cu1DqS7NxjV4aC8gHU=\"],[\"KLdcKsFn/fGEclMXx7u4CD5axbupN7z6bO/LaeQEi/A=\",\"BOsv+sHeFiiPUqS3QQHLc9U63dVrvtMmvsGA7SNjwiQ=\",\"K9UqNg8zKNXJimst4V3xUemXzJLCxy5UKBnjF8DuHSw=\",\"D/FHgpBv2GZYS7XpPNGGeMIuMg3cZtb+DpF+GN4QlPc=\",\"CkoFP/tB+EryFAfGFR3FSWqWUaUZ4xdmTs3tsBfjxQo=\",\"Gd/PU15yMyet2V025ydq+0ckCGmdchLzSr4y+Ai00pI=\",\"FV3ZyniYsFWbPkBxSebdZL7W+YEdWbHOynSGoRDsmao=\",\"LZxbzYTJd1nijb/b6fzms8HMfLyaLjXyzoqL3ICjFUs=\",\"H/PQHTKnD6CRERnrvLS8/BtPwwsuwimIMvXaTc49ek4=\",\"BEzilXRd7Rc3vgv2hynWae/Bjn6bVebvZfiV4vnpUFY=\",\"EXN3Qp4ThzYijYdiyMZWepNpgLfAQ4gq2tOVG5mGhZo=\",\"A5wX1QYFJh2rx2Z2EgsriJrlBBOLpyKXbY3IIr0a+XQ=\",\"Km8GfPydxAhQ9VKrQtbAltoEX4A5RT16ngKMOfLxN3w=\",\"HX6WEVH4odH2CS8QKnyREZRhijuunveN40mpnuBe9HY=\",\"IEMeXTvP9L2QNyoetjfARTYxeoGwK0i1o65FpOg4BSc=\",\"EWsNy8NfrnZpFPwJz8NZBR9iYQAVHusqdi16BzgTKjA=\",\"CrNAYE6B6zel3L8efV/96PIiHWCzgtQ891oPE2DqXHI=\"],[\"AjrzJFmWg9m3G2HQk9Y9y72X5ElXMz0ml/3QYMHktYU=\",\"CxFmAFbgLX+EW3nUm/u2hVVf67VOqlA9mHylKZUh0W0=\",\"HyCTguP8tE6xscA9wr4ZWz+S+qnBrhoLV8TfaeelPVE=\",\"IuJa/PI+wYo2Rx1ZPryNkzcjFc1mbbZr85j3cwKF+a4=\",\"GOr/TJ1dANNIPXsMdFUaRIfEUs9nLmp0yjl7449deT8=\",\"Hrufe19/DFU7A1UtEEaTUVzMF1KcbBpGLAwkRzYw9ng=\",\"EhK6GsO/4MCAlsUDvjUbuuqSqj0/bCZLc8fO2n+L1yE=\",\"LwJW+bRyaXkPPytGp+8lNthmHa5g1QphurWDRug4hcA=\",\"G2qEQuSLcJeXpRTjbB+GsTpBPrH3/vRYiHgz70tIISQ=\",\"DJbmF/NjkcxRbrNjHrihjU3RDRcTW9k/RQ72riqUURc=\",\"DtncFcn0pg+BUONnunGko3qctQyQMRlPVYUKHl4yWRE=\",\"K4sgHhOQDmOGhc200HwRCo+OjVAM7oNWaqczYhzCAjU=\",\"I79OBE9ni6H+9izgcIl9Y3ORTuk2+SovTV4JiQ4jjjQ=\",\"Isk9RZrF21TytqTyZ7XwSbl2qT0Aa4ipil/A6jn1OnI=\",\"GlSwtH2Y/oOsxN+vg7i/fZcmhJI9XH3OqYlLagfZNKs=\",\"IsyzhCstdaM7ZUZaXc7OaHCvq7PjQB+utlBN5AY0iiM=\",\"Hpq+rN0v91zKCTttiCakbY0sBeMNHTmV2nakqMqdKCQ=\"],[\"BaB4aKfJX1CgFYef583x62wxfk1InUUVII3fQKMjKeo=\",\"KMU8pdtc7Mq1SNFU6mBx5HynO2zU/afkI0A8toTTBw4=\",\"BlGkh+nvkdnE/XUXjcV6ofdu31bExcK6bqfG2RnpFEA=\",\"FtIW+XveqfiwECXLR6zV0D6EadxrVYojWiPSuodzxx4=\",\"LIpcfzlLBx0PMp1R5FHIc4+JaiuPh8brPqrscc4c9xw=\",\"EyF1zNqVSI80i6N7bDZB37yp5CR+xDl34nn4RDMMtpQ=\",\"KOunhDm6KEIp3iscYST93jYyP8goBZiFATN6O0iuoEA=\",\"FA9VCxz+QHn3xE78ymUV9wqeoZDSy0os8RZxlzexViE=\",\"H6CBQsTPSc6xNTL/bxxFP5rEA12OxVFPTztSw96puw4=\",\"BZLPReWi3TgvHG7LBZyZIy4rUrrFR1wQtmaWmMroiCc=\",\"KJfM9Pdd8iWrWxx53kd5RbJPLqEnxcuzeVQ3BQWVejE=\",\"KI7EMJyBoNLs8WwDdwbqTVJtcXKFrgLaAI0Uy46iPsI=\",\"Er2IKw2K+AGuJXmohLEfgPG6FfSHQfYWCUZr8E9ozvs=\",\"K7rKQx4dRkKBoeb0g8tOmyAC0KC6H6cLYMG+zs3bHnk=\",\"FzCHysEj4HoDJOo8IjHMqFnX5NESyOL03JJJVRyUEAc=\",\"C6vBqmqg17I0/oFlH3ttYWYH+nZlNNW67m9jvwKZX+0=\",\"Iz9SdKqx0QevS/fyt/TVfY7gk2AFo1JVScv8dWl8pkA=\"],[\"LFtKZbxVrF++695Tzl+miIL67SqSp7P1cygyxy9/LDA=\",\"F9Xn4YYrNwjLo9QcVWsHDaYLc/w+8Zgify2tWyAtXJo=\",\"HX74Vkqax9zpRUd9UprOY0gazkY6hsvcEUBkXtV9Czs=\",\"HtyklgWW1BVIGZruYEDTnYFORWJJKgcHMJgvl1VhURc=\",\"JYZVrplq5uTeum/s8RkMKvv8Hb6CRUVYoYvcmBlELwU=\",\"J5pCshjMVWEy7K9WZsBOiZhPX/ukIlKB0yYaSL7G6rk=\",\"AkYFzkqqM6C7wI1YbK/XC89MY1vtz5ivw/sN0ykJ6P8=\",\"KSSBp5Ly3Ul5sEgi1z7sAukMHk6kLKVBSYm6BMMVKcA=\",\"Gfjv/NQXt5AWtXOYp7q3L5Ruddhij1afMn31xoMpB6E=\",\"J5xx23zBa5xya5NFRcL9t12VbRb4khCu39fbtPHZ7P4=\",\"FvSvxHph3zN0pwLygAo6OftEUKn5LhHiQMxtdsJS3kE=\",\"G6fYsIPrDoPPkXjv6FFOYSpdOQXLnkJ5scCa5T6M8jo=\",\"Ch4uEqUXIrbgrLlwXEQ9FIsTNN2JcYXu3UxOhxcOQsM=\",\"Ada3u1Hrm6cZeZCW5eDBqqWURWy/CLK/mkeSefdSTT8=\",\"ARKfuWk1UlPnyzH6lCl42zS3zNO8DQzQK6aknhWdHMc=\",\"I+PzFHlVDLGXI1rxB0HDdtMm+FiB0fEHaILJKCEvi5o=\",\"GsWiehouoNcDX3TTqbVLZx5YcR15yHtW0y5AmDtiyNU=\"],[\"Fz+JXkcsTrFqKv87jgQX+zK4PrHjIzRxx2oFUFBdBgc=\",\"BQCmdsXNFZ5jUe+NK1Z2RvtNTGHTwLgo7CAdT0JZkc4=\",\"GrpCITqh8V51UMqUHZvEheGVrCBMUDav7pkqln+txQE=\",\"IOvAXmINLHw2L415Fu1+PhKALN9ByHsGeQxA9e/fckw=\",\"GRUxwPosVHoetRywJuec1mOr9Fii6GMOg8HxGHauzOo=\",\"Af8Xv/R2BH/ZpGaELI+9cRwbPBhB4QnGh7pGIOvEmWk=\",\"F9fvH091KVz+IU3Of8Id//E/+KPHu4YiTIp5VmA3F5s=\",\"C8RJTj1YzWhB0KqwZEAOauhZTDX36WcsVfKDhp4PP5M=\",\"F0pCGcSq3sWSGuc4t8tAoyGe9d7I2zvf7zmzc7Ik04w=\",\"DpidNil64jl9hbgCW7ME/kK/uL+TEImW0roTlou6mHQ=\",\"GthOahVjPrqJBQzBXZTkWabC1CglmG+cWAPGbwiXYyk=\",\"BvDu4BraQJBYqBi6g2lJj7qVbnE6fpNytCIO8V+VSpk=\",\"B0oIpxp+NLEDG2OXjjKb0OEq5jEQDyT87LWmC+9cPdw=\",\"IYXkoNJVcMQ1FiJmtWXB2w8jzk5huFuLihhyUXdUtjI=\",\"K82OPPmIiR5Yv4uNOiWc5S+G3gG7jmxNSdyQP0s+zAc=\",\"AgJ/512HgEWZ+2bA1lsofE4FgqTo2Eu7yFxkIs+17rk=\",\"Hi294jVaTZxhrAwNuHRHxn4IVQrJG/BNlnkBQtiM3QA=\"],[\"IGywOMwyhSbQw9xa8ZQ32DIZdRxe6PYbDp4vWIE2a+M=\",\"JV+9JQ5mKMXrVAwxGTaygsUiBPVv6B73XDmNnwrevhI=\",\"DhTZjehGU+Iu+rKSYcmjbCB/yfVlDsGlvc5q6ZIjnoQ=\",\"E0L0bJ4kCqjrLx3Wxh0Lx5+mzcPdj6Z9eXKbAjQ7bfc=\",\"DkHNwNuVrV1nlG8P8Ciq2MOjyIrPEFGec2+SZc4Zoto=\",\"HMbTd5Slv5ATQdtoXnkM1/dCe2aQaeTTIO+uHVW9cVc=\",\"EXw55Goa48kLJrDfhQeOvctmNiUVx01RzbGS94nJz8A=\",\"K0x30YZ365mpZpE/e6e0eMzaFZ0PYaWHAugPSVKzcHc=\",\"JQ01+r4x+3/RcZrgwTyvtk5waTL+z+R+R1A0KJRD8kA=\",\"LHEgdeiEiy0m98jG96zLqBpJgA7TUVIh8D2EVAex4do=\",\"HQTSJWO96L/xtCXpvxE8/i/RXcpma5Ew5WURRi6XFGU=\",\"E1zOA1l90jWRqm+ziy5wykHvkcoFmXrbwRNUzYMdV/E=\",\"AkcWrSlCwiaN9QfiW+JV5FwA1dupYJPfbGPIpN9zPw4=\",\"Ec3u4bqHPcYYiK/3vlT+UOA+OkpeoPMsasrn0V2feXk=\",\"GuWIYn6i4MBG7U9sII8pgDolybLAw4W+KUucJaMofkc=\",\"CODfInyloXqQgcYMrttUNaiv+ZNxpwIZcVsFgA74EdQ=\",\"ChyzV4JhLHmYr6QNxGf9OciC5rPaurB55jwzC7yOXxw=\"],[\"AkDFeJcWFmbyjQALiNM1OSHZZ0IPQBzoa77kK+KHpPg=\",\"B8n4NslO706DGzEmwGqbS6GcEcfohvZcDWJn4HiC3Fc=\",\"FW9a/Rk6EdhySfNCKRKYDarLj+0iXGClvd58TZPVoBk=\",\"IDpzg31XfZENO84bFf75bBu1ItTwLMQDK+y5B4ELyF8=\",\"AhesGi8oy3vSUJ2Q7kwDqrQJTj/vR0HPQBXh6CP3HA4=\",\"DC5BvgDZio3/izD137zicIQS4gBoK9WWshYnAKZydN4=\",\"H9VnCylM7XgYjP2BakE1jKMrvo4CSiogD+EdBg+MXho=\",\"KIT9V7cKIwW/W5TDJbAdA/PMLokBAU4L49q7mEUUhj4=\",\"I+dy4HJe9zqhj1n5NNwRvb9frpzGf6GKIxnqE6abnE4=\",\"EiNmrgZCQRrykVcaiQTwtsb7EdHOdQszFqw18xDl3O8=\",\"HQsMM9g6QEEs2vQst+6OUELZpz6xeg1YZ6MZGurqYdc=\",\"CO77qywcUiNn9UPDNADPJU/gdxH5TpA2p1WFZecwXA0=\",\"IJ7V+u7vTR0Bv3U3BFdNNP68ev0pmgRDC8D48Lqv7cQ=\",\"HLdToPTv5hsF6V4JnktVZ3CzZIc9meH3fjilPpwmJnM=\",\"KjLXcW66HPk8mOm7+AWw5NJ81+PybFYL6yrqQcF4LYo=\",\"KTbTaoabiyMYEJQSvvPBoEB6jguYtJWe4LYkwRYEBJQ=\",\"KBrUrecmI5S8VbcaiutBNa87DCQzBwyw69nsjiDccoA=\"],[\"Gq78Lpkl/NRTmW/agEBj/asnazfF9R39/vklW07BDMA=\",\"Lq4X3FYcNwhOmQ/RvFBX2W5zZ8S4AdJ/amrY4NDAh1w=\",\"JH7lIDGsBzqB9WqVeQjCAEd1E/y5hTlCpisG+27qO8Q=\",\"J1YC6KwRNrJF9VHLBT1+qtff9IjfP2RZB6XLFRxVNSM=\",\"BhQ6fJepGDiwrWgGU3C8lQPT4MjRHyqECywyw/4uebQ=\",\"HzrtA9N/exRimqLl8Ia9+6yGIyWYjE2pQ/iPQxNkffE=\",\"GPwKyh1KRZePbj+8SjWiV5pMEutupwD3m6VnJ7q4cRc=\",\"CXxPDKbfwHPITpf9Syw0HsPEW29xZwDP12R+Qj9eY04=\",\"3ldlWTKAoyu7FjAhbljR1mm6V1t9J2okMtnG7jAqXQ==\",\"B0dcK3Iji4ew2M3JKJDwN9rQvWejx0HlZyvIZ3o1wgY=\",\"JE6YTG8vITPvqdXbvBxgRj0m93SGUGWDlSAbNno59VQ=\",\"J6VfUQOtCFRxKHJObCCkrnrza+A1Z+Tv3sqYgCFNQqk=\",\"FLLJrh7HoMFZPvKeeCsGPtSOWA3cMlXAofCB5ptjREg=\",\"Dq9w6xC+J/vNz6fOXhsom2b+aKMRQDhSLWG0NfF+8gk=\",\"C/QLyHo5HAUqVuQ6rdMH33UdvEfvfGxa8+e8TODclC4=\",\"A6+5YvjqLNGv+1KlDPWc1bHwjwh1N4WeinNSTDx3WOI=\",\"JAARwn2lgbfpHv776PN6v6PG5FasWm2gXUr0iEKHvqM=\"]]],S:[[\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"H9INy1hQOJb9UpmNalvm8S7DOzy9WQx5PkXegl/4y18=\",\"CMgpXfC6EYYel/DN3o8gKnCWweZFLTPWShG1vk4KHvs=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"JFjubXxSYHPRZdKwi5XPiUfiDgWna8ErQBuZZCHomDU=\",\"GMI15ucjOQqmW68G/6VXgp94ov4fv7RO74TpOCCckvk=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"GGjhBmifjqLpxWG0sZKJnQe1LlhZXDk0NsN98kl2pYQ=\",\"LVFhgE8OxkRcuJBK0+jp7CEVM1DfQHXJy+hAt7YJypI=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"A1EFUN32KSNVxpDwO5uBWqstw/SRRhLafst53c97C5A=\",\"CaLnuzsnih1fJkomNFrYNl7+AFhAPYpSkJzy1fbuYXA=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"E91BSMSRoWawFaekIz9OSIrpSg5kOb5m/hSbULVXWcA=\",\"HS07Jh9b6z/AEPQuw4JWSdkBUO7kzlXcn4bd8RApVVA=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"IhtEd2eNrU4qvKu0frXnpBKRkLOFWuTuzYumhkP/d+U=\",\"FrdkSOmFXxZfIEP18Jvt8YMKSZj/RevCXx1A6Oj81uQ=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"KhC2osuulXgULPZhBLaeRI6ubTvVOshgI2NGDiKGyS0=\",\"LbhNukqdls6+lN+x1Z7fpYzPqHG5wGfFIuMZSbafK+w=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"HKm78mQCI4KWrYl+waVbT8JzzyDB9o8D1cFJvokOe2A=\",\"KD03+l410lyD0bnTTssAzQOEjKcwrOUvNn4Ne1/eMNY=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"A0kFeUGxQc7qWgY6D/irIhJx5hihdOXYAJq1+ceR2WA=\",\"GvLh2Yw8CZCFA4g9O57VD+iVjrHl1lOAFsNE1ABw78I=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"Bbe92s9FIrCqMILiwFRIlidD0AI7tkAikfWS5sHaRnk=\",\"H87szzN+ipA89qDCGmRF2n/4xKC8eJCcfnBBMcijUkE=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"LzCiX02EPiiv3YUPMdGSDuBY37bZHDIvyWBHPpF6Z2g=\",\"GlUWC/SaSTa8xZFiYXAmGUV0qJ5YV3UbaPPAj3wHzoc=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"GcZu6IerR2OxdXO2rRkrffGvJPVHYZmLA7NCuVcJBB4=\",\"GoKCi3+H66f1+GJLMeERVQarPnIyZnd7N4nJEE+ceB4=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"D1BtMZnZYIPen8TnGyUIJehKJC2BrjqB2Z3rx/rtM4U=\",\"HKx0gtkfrvZX25ByqXVn/xcjdNmZh6iySywERyqrn4M=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"JJsmsdTjM7I/MZLw5PUohO5j1InuFT7MMhaTmnKEgVA=\",\"E9GusQsiXiqLlxMRVEB9G/FFly3NOgBzM53KM2GA37E=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"C5D3K3/Phn6y4PlAB4fR3VJyDLwUpwlXhOQRZiTRbfM=\",\"Al40bt2N1VFCq9ITWVE5gjDwyNCLxcNlxabNcAEajzk=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"JjADuO1QJXfGQnsLRYnvbOuHtOIbfEJOWH8mMKe4aKI=\",\"LZLva4vcU90bbFsckuWoJI65wSJVuRD/icCZYewS6tc=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"LrNrbQv8WTqNbZRZp68E8LFbyuQYG7sSNUOHDBExZoE=\",\"Hki7WRFG9GHB0vCF85eROeN/SlwjVJUsgzsnkfWQNOA=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"DnWZE3UUGIcfA1HuGAykZs+KA/VBB5wbUbsAFVDYFio=\",\"HkXhlLFpNsWx+Bxy6w/oxi6FnEZhsUt+MnUDz0nspVs=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"KMi1jJ5M+4MKUa9FKTGLYmnE9qwYZ+0RdM5K78V/vrM=\",\"JVspP8sb4n2eWq/UzSjCZ0b8NSCIk2fu0TVcLEG5MBY=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"HbE2eo43xVl4NTZbv6Zvbs9A2ndaVMNdXJTacEFVRP4=\",\"DN2XlRwvC4he3Gg7nbdPCN9hKGV4ppmJqf7XyjTFtM4=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"Dk1OQsrLn6Z0XG3TYw7FpMyoqRK37ChXarO6KcVzBsk=\",\"IUGpJcJ55MTjUWQXRHUNRwLZDvITfRkF2toLrjx7OvY=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"CPn5s6vHnticIFl8+/5JAhEZzFBkjOQB3FDLBCpU0Wc=\",\"Bq9sByMT2GjNlFyfDrfU6tskyNR2P6BClSuZNT3ysjY=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"CLQ8l79KQLTzdtH6DF5uaVXL+bowH4eO0+rkrIEredE=\",\"EeDmB6xngco0pxTmxbek+DmFI3dEZSADJCDiq+FhFac=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"Ldfw4bMD9CXLfmscMMpCizv/dR57ZRFS603gCLLADaY=\",\"EH1/ktHGokBouRcSD5k64+6ENJqq23HqpBKLNJgS3ag=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"EKuejk7JrV/bEWbGTtL8MiPH4W3ZgvZtzYIKeGGuFGM=\",\"MADTs92z+4ZMzHKZhEaKcxc5dxMwNUSoTX3h0gnSXLE=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"F2EDWeYk5/6z7t6AmaHcRcSgxrLevC3I8gD6J6Dabr0=\",\"Kv/OW3p9jFqsBPbCcIeUzQGoQ5tl1031mC0krSqUTrg=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"LUOfvv6NK2XtMmWL0h/FYEQI1ftp4fZJZeWJXKYcbgk=\",\"C1HMKhscMp/XKihtSThUDbPPxDIN42Oj9op5Nc0ZOrk=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"FGjqKGjTH366/nivjCRlajGFljJy80xR1eJpXEO9Mkc=\",\"KVU5STJPJ/T6e9c0kg6b57ZioOxXl/3U7T/hlGSHm5U=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"DZeA7n05X3yXf9S4Yyn2zXIAR6f50WctGNLPtCg0Ovo=\",\"IQoJiv1FH8o5l4YOIgEGx0h/RxaDHf/3gDbeGPF8sx0=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"HO3P4nUbNg5z1u9a+IzVt1orLZfFcYiaDdqHoN2QrYE=\",\"InGfJuFnI8G9RaYZ6Rg2w0CjBPNkhnL5DeKwR4gK7gM=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"CuDOyVnEx4WfZw8Zx0kPju9q1mNG4EYTwTUFl74AC+I=\",\"F3Vg3nMUgr23MWwji8OPIKFs0D7douA5OxxRXsZLByc=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"HxmiZ9oLj8K0hQpPRYrdVRTt8KrW96fxda7wuY6BakA=\",\"Had83v+c+CK1RQkDHqKIj285gFGuGHCv03cOdyTAnzE=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"AtHheqqpZ0NmWoaZcCVcJnujOM/UPsmzPsqnZPSPF6g=\",\"DDdqj/HaOd7JgDFuom72b65chod6j4ImbBRnACQynRI=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"u4VgSO9Dp3s5Vgres8epp4PbXK2OP0IklaacVmgKeQ==\",\"HYGAijxzvhuyyZtkA/OsSlMsiNKa1lLLsgBhZWAGwZo=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"FeUq6Dqds2PSTMWQDfj/C4HkRdRAmg4qr9MiPDVK3WI=\",\"KqL8A8tfcuI399iO9m92WhWb5TM1T/uIdRq7iIUgOtQ=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"EK/trYgaHafazlxpVG0IkLw19BmSsQYqfHeJsDrJMsA=\",\"HRgZNwGXmtJAQkRulH3+360ipufU9r3odf4tjIgshYo=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"AvC4RXaQ5Nl3C+sDAKCfxwAc1BcGHoJrxFDdlteyTzY=\",\"DcMYl9YdcOFocOCwK5d2vFO4uYSL4wYvjaGP+dmB7/s=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"AgPJS7dpT5za06FKdgPjy2nBQSAP1GvcnrsNXXNmNSU=\",\"K3eKIx8h+KbNqjyENykz5hDrmF3Mga+ZJv6LCfGvyB8=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"LIoDdsdmBV5qnVJyokZqKPqn41nbER6E2YshOMjJ1dI=\",\"L/2jP1uFpP3ha6WQrgzUn85K0B4JX5T0kTj+RKqox3g=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"AxivU8/YIuwqf01AYU9y/Gyyf0QGf7WNFXibvhVESEQ=\",\"DSSZdGXFsj1OdDak7O8vkc6fiRC2+opKO6b4hL1yBsw=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"Aeo55Nnt6/ZdZI5CiAs5amvs+mazxeR/+aM1d6PSplg=\",\"FeTgFslKAm/Z7em9zxEmj3c1z169vdSgkv2h7otQ8v8=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"LvGFxLHNtwcqgv1D/kuxRcTb0Elz+z73bnV7ADkurJ0=\",\"Fc7cik729wF9HdPZIlW+tU8dfR47sCBMsHq4HHFDWQI=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"Db8UjuiYPbDBF7ERJw8cLIIZVlczaESU6vXOBkXldJo=\",\"KEL0TdwF29WzGbHv5rPqvO04C5n/xC37CIBeorTEiqs=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"GqB+f/pKA28bfvsuEk51AoQm/fXx5PuLti4evzKYryw=\",\"Hloqve2McCKoupfqaDtgXQnwF/1D6SKWZWVh65bSXTI=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"Cs86sCwBhXO8PTawy3PebfEejMHeoiPpiioM+8Ao0q8=\",\"G6tIrSwx3OxfzG3x8C3EFk+UkgISJnOwYQX3/xvquyk=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"AaNq860cYc3cBqKkxpZ9wAS1iaSos1je0Ro4zOan8xw=\",\"El4OgiUUz0lTb6ZDpm4dL6Z4jLW0gFyc08tppYTg2NI=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"CFvoSG7LPb9x1jlA2NaJ+bFCQ0oU1dT4yT19Dxe/y9M=\",\"J1ZRNg2IBjsv7q2LxxrpwALV25giq2OwWPEeDVBrF+M=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"D36yRVltmsXswhRG7ZTIAonbHh+fYgwY94FbJHsiim8=\",\"IhhioEoA9Aa8Z/dnerRZydiHyLuICRUT8PwvsQOtVJw=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"G9V1YDtwha/PCliKX634cFzafrHUq35wE329R/wm46I=\",\"FG0dF2JF/3ctuFddmGqC6TEHneYeZxhMQVim9i20RvE=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"AiAuwef9hcR0k5NmTwJNV405LVnLEqQuLvT6co2kzTo=\",\"AcDnJpOg4Sv/CrPhKhIDyEa139ud1bompzCcaXA3FCE=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"Kz2HM7tIcrbLsL2DN4FjqxSlhdv1rZdYwHlI3gVgceA=\",\"GF0SqjCu0aBXW509zuYzL0+jRkOkKc/djeD9yHopZA4=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"GzlCJzAfKL7im9Pfw138yOHGDsbdlE3TNZOpp3Z19kE=\",\"FbHP1SK9xBj2wIo96xFKT/SIVLSkllN9Qes6Ml8iZec=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"C8o670aDPoowqdsKFrWavGGYANLaFdoB3VoHE/9Mu7g=\",\"BSkGJZblG4yiwvjHz0rf8IUxUAFeLmtM568hJQD15so=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"Av2lF/QmEyWnNmpF2h6EfNFQ0CK+KYLrYQXc/DH972A=\",\"H+xaCc6k0l5bf/nS+6tk0mTbmT6Nhim3FUoVOdEt0c8=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"LYd3bu9d+rvlYFCUdRrxe4MXF/o/jgGUO3TRqaQusbs=\",\"DSV6Q3kQ85la69Cvub5YSWevpBiMRoSVj2jDn58B/xk=\",\"Bm9vhdb2ioXsEDRTUaI6Oq8H84r4yVKnvOynC9KvetU=\",\"CY8KoGCS7Sy8usAE+QeZ5uHDL8JKnwtgZvjXKJcWruQ=\",\"DMV827CFB9Yr9npEk8wmL7bAnVVwE//x9XP0MSIfj/k=\"],[\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"A/CBWrRj8bdu4lqbh2izIxqJdS9Cf08GOrcY5wdXazE=\",\"FWSL9G9g2ClUx+MwKbNhc1cBKj07HTTI4AiFnx2/sxc=\",\"En4AwiU94HgYyn8ur911ZNBeqFDPYfHaoM/vv3+/uoU=\",\"BmNlr9GKQe+TgvwLHSZctNPORwqMu7h499SAUWMHR70=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"IZ0U+CNRMUDcaalvf+fghvT6JMhOV9zysJlxXEQEquc=\",\"A6ML+78suG1KamOoBQ2R+fFPTTNpbTfrrvqawjAhMtU=\",\"ISG7zeqjOjWwJw+31cn5TtrVqE10sG4zhRBLC0GTW8w=\",\"GWtUT76wp5LPu4LCieV5t81VgMLjOKOJ0FPviz0Q5w4=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"KAnDoVR8DO6JwdsnDvR5wmlz7HPttL1OfZB+oCAvVg8=\",\"EcNERrCD75LKFXWFoCuLNCpMZxdbMfS11A1Olt/FyPE=\",\"JT6gszqL87I2fAMOMonL4PYkKtdwnZC4bZ2AJuLjmSU=\",\"MEZ9wZMPav6QyJ1AB60p/E9aGcAG0QMEOMFt+FY3vV8=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"L51LVUlffjd+IOb1o6iK96pqU2RYs4u+E8jr+7ulT0Q=\",\"HZ6dXHNuMVHxHTbUmefgk9juI1O+GKrVTP0D/w/qxLg=\",\"Ekthe0PlmPnr9iL3gjo959G/7bh+CXwxXzQ94wHlSEE=\",\"GY58/GauRXdAVc8HO+3JRaX5xbGcrgjXicxXSP/hmbI=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"Lqwls0mN+t/9EkqzqtV3ieuUW6V0QwmcW7bCftl3/iQ=\",\"HuAsF1zf4YcbN4MFwbuckE6K8dRFTtNVCzxqtfT5ASY=\",\"Bhb4w0xgcmaynqj50t+kf/b7sdl0XEhgn6mDAdD2edU=\",\"GB1osKGIUElYufGcu9uXKoU+Ue04XkiDpDpCgygDNws=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"LVOXzoY0ZKJda39bAV1XkYHRzi8ky6v2BZ6TJ/W6cAQ=\",\"Fb+BdJG5TXHokSlAzAuAJ3cT59MtorZZFyTY29S8Jhg=\",\"Kny9EUYLF3q3b+qyi2lIWsjMaHdAvJEJlKOCfSnAhxQ=\",\"D3zV/6RmFzCrVuRH+uXMF2PLRi2oCoVhTCN7KQ3p1QI=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"DgdmAEtMQXbrEyc1COtldfdoE32G0wW+ZEzgRTEAgQA=\",\"BiX6cUWBNIH20Ui+a5yLt7VO48GvrAAQTh92MAC5kkw=\",\"fFRyUItFmRbuD1RhqtLgsZzZx7GE9RW2UTYxjOLGpQ==\",\"BWc3VHDRibaTrHerP7dVcjHVMHOVHUPFRoWHnLeon8s=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"HQQGvL7IP41RZfVsBj5CEIrSH1HqS/xxYBF0ulx7i8w=\",\"DAKxju8iMy0oCoqh+GQF8zdfBjQvhpbufHO0bGMnLLc=\",\"F8H8F0zZpuvqp63S+AGmZII1Ca1P0bFarQU6Va1tpM8=\",\"BfhDwjAk6x2rfrvIZwmgIaqmyvQz9+0lighjjpWEsy0=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"It8kIGl8ootcxRxTFl4AJye0XM2QpVyHWJ95LwrYyzc=\",\"LxQ4MDp7SdRzQAqu3w9IAJ/Tr4BLdr6GQXWI78TXMCo=\",\"IyPV/PLaiWXGsre0+/miS7qn9NzNNdXKYVXFRjCTsjs=\",\"AmyFud+75I/oO3U6XnM2ufQPe5YenFT5TjdwAHPU0m4=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"AxURAAJR7Ib+s4tatOM18HCycd9MIJeVKOQdZThMMY8=\",\"GOWIMkqbuqy0L6aeXZCgwOJ80WuUHjSmD/XfmibAOvE=\",\"JkK12OFrlTsHBjV3XI08lJg1fWrZvvLn2Z8DwQ6h+V8=\",\"IfwxO6EcYOjoT/YNuQag8DEYmwtIM1xCIfkJrvg2wTM=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"LTVi49S0K8aJC2mMxquJ9zESmLy6xuTp8vTZPQba4VE=\",\"CnTvVB02DoQuPgtv9+XHx3k0pfZ2FvAcGJ2Ibf0uCAg=\",\"FAVktT4KgSrDmD1uO0M6+kP0NAh9nnVJZ8LJsbAsr4o=\",\"FHCeMtmK5M0YtAAYHnGrl1nENsjoP6aZOttvLba7qdA=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"BzSyNmxZ45RCPxeeEmbdOSNy208tumUfSmGaS1K9wBA=\",\"EfstcFyUsI1a0+PF+2Ypq+lj7ZKRNkLH0C1+cQiP0tQ=\",\"J9A6v1wfKQ5dcV66GTcQUO9ut/eP2EvoNOTMNhgFlIQ=\",\"E+2enmtFLfJ/szU8/CzWPr6BfyEqOcaou5tEGsE5WGE=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"ExnFHPN6qhAkbNqqBKEuiHld5EUmBCY6fFt5q5nL0jw=\",\"C8olWI0Ye3+drYOfLIy1JqTPRE7rvQ5xW2zqAZrD8g==\",\"HYN+oDQcWWQYEiaHS5I80BoGm0k/AvejwBviPPUdWT8=\",\"G0HOntNjTL1CxCfOTFyDd0FJ4qbb0l8kASCQ233k5/k=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"BnHw47Z0rnzdx5DsxOlG9LynS5i3ihJ8e1a9ZnPxzh8=\",\"AZ/Ac3l6ObJy5AzTBhX1X+/raCwawUFDBx0ESaVCbk4=\",\"AXvuR9JipJf9H3xcbVp8cPpCCUgL9dlzEcUJZhnp/RM=\",\"IHPP+S0xQbSAdjU5z/KXikx5RHIcyTe6AMyFJydEceM=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"A717PiwYhYd/QxgqVakdSPnFjRUucw/ix6pGsfpmO6o=\",\"Im68mlOLW7r/Eo7fubv1+gzrEAcZoUyN/tn/u7rZtrc=\",\"DTlfCwi5/t4Dc6BuFVLA5jSklXKvHYMNxuOU6KXTsho=\",\"KCQkObUkVAow1Jto4Z4xulKEvTvPHg8vQfd9UzH5n/o=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"A3DW+hnqrBQtLeA0gBq4XgtFfhKekfkpdUtIxhVNTfY=\",\"CaFvVzsygPOQdiq/JpV56qN5ObwMdT/rCisuC8veFlk=\",\"IijjYPtbFitJasRD+YEn7jwAIaaQtxsmjZmYE2gjHZc=\",\"B+QsLKYz0sSfq/g5kUdtIJQx402AMrahuXZ188Vn+UQ=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"LOEtcmlmN3DDyrhaYhWjLu01/aHY6ddTpQ/pYJdySp8=\",\"A9dCdwTGHiAJ7rmxtFoBJQhLxNr3CXOnugsiMYFbFd4=\",\"EPir8HZBhYYcEmf89LSzPKCW+03cRiZzLYaSHlU+acY=\",\"F8yvbyb3JnoCXXy0VuOuslGhpiCq9laKXJVkTHxZFMw=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"BjuzBrljEAUThcPOAMqCCtDjZRpuVXVNWd5t8ozqTVE=\",\"H3Ye5VU8XobywwShgJWrdAMkLgtl5gi8kgz5k6QWmXQ=\",\"DcXwC7/XwdmiPA5maFm6ZWS83odhtFcXzWvfwJ3k6PI=\",\"Bt5RFSDid7ffB8NTY4HBPrRM95CiMKvDkQiXYL/EDvI=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"KhNDSMhmDvz571SGPnBSih/USBtQof4h8kqMBuEMygM=\",\"CutQI7u5pkxL2ACJ6Z7fjtX28f+2On27obM1ILz843s=\",\"FBptCBA2auIl7LXwv9yZlUBsWWCrJhVYNvxR+3y5M9E=\",\"CdLqBe9U2tu+d29ATcpmJswLJTmZC8C4v+h0l/Hixbc=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"HlbSRKjkG+XRBNX473CJHSLUpUMkQb/o/xoW6RcZzd4=\",\"HU8CDFfE8UrskIsvmbXE/V4JRH+oXC/Wi6TVxfUMe0k=\",\"B2ORGjqSpPDgn04UzQM5jY2CoeCduA+w7h6DN2TBj9M=\",\"EoVydb4v5rm6LsaPkGFkPx/F2aLF5H5VaENm5UswKUY=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"LtEczS4uI3ZlX/6alsS4GtwKYDU8XYPU0Ov1DRu/h8A=\",\"A+Md6JWOgmRbMg1ePpZu9HJtWxws+7Ss0oiiFUPG1ZQ=\",\"EeiA3+/b0IhYrokARlM9WNoopgjX6QU2bsLKSjbnGWM=\",\"GDWydd6u0tAHBKnDzCGrekSjRmKXjVPBkNwl6WmlB7I=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"Bot1MV4l7UrOWkqUgOHYLOXUT3bxMkJAQZ83L/jTw/U=\",\"G3730Ersc9YrBS0q0SuSpCaPzNeVyDnWmK07IoIydNE=\",\"KMDISAIqkGBvYZP/VQG1cha2cHJ/S478wkDTC7qp8D8=\",\"E72kkpbLzFFoanv7HDnz8lQ3CYWhZmDv1uXYLU8Gjhs=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"LnmH6oIEOJ0R6xCzQmXjeKlFcp+Gw+Di/ThJDTpZQUE=\",\"CCbUojJK06pLK0XBChkP7e9wKu/9oyJs5UFf/9A5Ncg=\",\"Lb7uherqqfo2de9UHJ33u5ZKhUNcO1loX5O0NANt7Q==\",\"In7nqUXtruaRlBjssyebEeb6RPX1xav7lmpL5ZnLhsc=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"HQptGpUZh3gFrJDWlvrypf+twjmG3oxpjVQUccckQiA=\",\"IgiqulCK6BbaTzM7eFT7vNEO6h2yhOw+n03gKyX26dQ=\",\"KKWJAQNbLJnjan0ptYeiFcnlkmji+OAaF1cglxzPBOw=\",\"ARL22NQrCg0SOgeGXKE3bfMXoqFP/AGRIm84qK39Yjg=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"CMbrGcAW0YMxdN2hgtJm1ccn+X+00B8dr5BrbTxuIwg=\",\"E1nS1si1oRbQs4uV+cZC33WxvppIyGmOz+qRA/c/GHk=\",\"EMUFLsZ6ubakZ8HMGHjZGqoHqs93Jfil7UK2mcSvPKc=\",\"BYPE0pLVTzzbcIgD5jOPxq/bGI1dTp8GAZOCNoTJbHU=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"LZShxVvjghUaQFTFuWMi57zR/is+B24W7iwYv8BvV7Q=\",\"FeNAL93odw+5lzaVecGxcD73fGcZJ+rYDbxk3SIRw+w=\",\"GFvph4SBfyL3sh5rhn1acbUAC++LuQLrMCZ34gpye+M=\",\"GNtDIcchwDZm7YknyJiQqoqtGwDAVFR7XKFM2U3kZ7Y=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"KoUrYkf11h8MOQs/PXmRiFKISbzSzQr/TrITSgObUSY=\",\"JRCu7VG39QbmX7mhjuASSqUnb23hzXcbFlkwIE2ljyI=\",\"DyB0oy64Jg+1vTojbwOke0e3+1TcrR15d9ZIZRO6tfI=\",\"L0xpKXhmvUWoJw4ZlBkmzsNTHJ4SxMLISXFAS/oEQJA=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"FUZocn0tut8F0IOmUJPA0Okt9f1fP9dem3ksVio3Rz8=\",\"Hm/8XWof9dxP13/Fq1yMTo0+LjdbzRGUqR5bD3sTyt8=\",\"LPGh18RDCRCdday8k5XLg5jIstQoU4Vx+vo4naKZkMY=\",\"FA+zmonyb22Hz3bNXOjaR6pdigI+JM8Bbs9kz3k8mIA=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"EonRPVihe1vwcSsgH7PN384sFtrBWZkLgpipOoWJ+eg=\",\"D0XPl00snttXgejT0getyDcM9WvFIYdJYQkg/piy2y4=\",\"EZCcgaFlGARree39JPWrzFhagdGzM1aLhoehyezrRNQ=\",\"KZCyPIGIL3cJ87iRoOPaTWkXZy8tWhBB/Xu9Z5IzDRY=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"BglVGxRxbKPNVWDggh5yheCgg+qaFtwQLs9GHkrvcnc=\",\"DIwavfq5nQP9k9ztJGc1S2F13hdV9Pk9wIgOqgjQP3c=\",\"E4vQmMSSO5+9AvM/i+xscw2z/tKY7An3inpV0I8uCxA=\",\"LmHkvAIWMBFGc/D3cWGuVdzQtFzgfZrj8hu1oxkPFMA=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"ASSGCRPj349lqcQGDOMpfGJqvRwiQByQXdtAgmDY6RA=\",\"ATgH+Jw5ShM+wQSATZVcvhJfJMVwHZgobGrIt+0FLsg=\",\"LojRppOPB4gTKqnursCNL1mqREBQyPTE6FV4q7D8L+U=\",\"AfPSTxfPxgUKDL9k4fF4fiJXvjw7pgfC6PzB8mq/MQQ=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"H+HLDirhafg7nU8TPUH7Wz/mx2qCqRa/2bYvgvD40L8=\",\"DveTUSKUCc01MykiEimCfhmUbz2NHEi/XjN3+RdwcfM=\",\"GPsuRvwbkP4cSJPvd6nREVB1UYgxJ4YOiQiGCDc77ak=\",\"B3r+JXn0LsFMMu8HYeI6PMCtYmOmjFy2GRa9VxINGGg=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"B5dpCS2qWnUmQsBMz4pupU4qyYNv3WXSSLGG8UkLe5k=\",\"HYvyKcGZaPAlTrbgnFyL/WfrlzRga2drZjx2z3a6tKU=\",\"KjO32FXn/lX5NVbknks3c3Zk8UI28XJWQo8p9uwb3a0=\",\"JbAzHX4rFa9OwWHIboS6arIFYHfnqnU2NA3DGHzMqLI=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"B2IJj1/iZZjMv0XkgQIRsP/PjMu5LBbi9PE/IjQkdOI=\",\"DiNNcg1wsohtDaTAB7G9pCNi4UQYXHBxbezithcsJRQ=\",\"HYK+3M0ryKBuN0LnILf+wupyGC8RwMYNE1yBEVKqS2A=\",\"BIAGTUs+sK2l6aPn0Fkwt8M5f9a5TUgTFL0caQoXyXk=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"EKiSdjs8yp73WT+7EUDtyMjkWAVoVgz0GGf3Rk+wwRo=\",\"C17GRUjqhBrJIfmyVTaAeFl4sxVmeuRxTd5M1/Tei5E=\",\"EFVKyk40jllJdhvXEx3669eAEO3QMOGpzjxlyduTHUY=\",\"Fb5m842GsJmLk2VUYrH0dbm+neMG4VDUrGSPqz2wz/Y=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"F2rTYA/TSRGC0YKVf/rQG/bCbp1KsMI8qvMI5CfT2+g=\",\"K281Wz2/ZfCTNQAdcFrBJeO+sg9PwRvTzoK1zwry5vI=\",\"AchcBqbV1A2B18ie3vsy0ahEjFEoj6KWtt6f94jHdFE=\",\"IOHodsR0agy9mlHXay4l+CNhw4nkP30fUacKqsJGDXk=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"IORiGfaEGG0qAktje8NaKe47CM5zdwE5LZh92pIX+gg=\",\"Lqcnnbnyqg9lTph5Byd8JEgHZjZ6i9kOKL4PLtYJE2c=\",\"E2vip/GJJMk2IJbUcrx1yglp3Ad8kXGxZBvpUJF4D3Q=\",\"HKIDNQG6o/cwZ8QwD7D1ERntVzb7yPH2ySS68N9aDp4=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"CoLxmcJQUnfsqnXklfNONSWCT3pKnZ+h2oEIMrSKUMc=\",\"Ds8QSFMHtLrpL++w1/d4Kp83onIuftnreSWi3qWAt9U=\",\"B7ZCE439am3RKqIvCKgpbWhhXIR48Trxauu7szmjk2s=\",\"HZ3aQ6JVk//SJW00kh+4btcOdgunbWHpy8O23Q8aIVA=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"LxryKFIMi3UdyRE2yRxrzNU2frCCE9OSlYzi/T19L84=\",\"H+z+gzrVQEVcbWwas95KuuYa2mJaGitrGFUaRabN4SM=\",\"GPyOYIxzWys7DXWDRgInV1ZX/4p3q+Y3vdOtKOSiPIg=\",\"KPdAvBGC6XBuvwPLP1OrqKQ84LYYeDpVhjiKdUf6qBU=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"BHmYzAr1omuUrTAeS5mNKelgpIUc/ROCK+01txRpZqQ=\",\"G18VJbMduRHdpD5BXhuaOpclx7UuiA7hMKFKaSt3e3A=\",\"J1qD+l0ZtFNfZellqQ6sm/dwrpvR17GvlF+lftXI3m4=\",\"LoeJJX7Sy8zLQwVo5JvJ3CpWM1mAjJiXzj5Apvaieqg=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"CSf0bP6A/u/rJyGkwJ6dF/YMNFANzW5B4pJaOcjix8E=\",\"H4aK4EgypdvDdhm/5qtql/2Pss+8Hs+eDkhLv+dpgQE=\",\"CdehHifS9TEJtz90Wy3v7WXZS6gPMI+xnObVbJtF7/Q=\",\"KC2FfP6No7UQThwoI/t8W5p7JZJP2lmVsMNRqiuHnf8=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"ILqKn87IFbE/NJ/4MK5mOydXbhNcB0T2mH+w9v9Jwhc=\",\"EbavyR4y8cpFifuhLmV9Im1XtHHd0qsbZqiuTcv7E24=\",\"LmZkAqycxYgxbjNcfZPbNEeI7sLHLd8/kIFBc2zrw74=\",\"F1IuDp5k95WiAqEQ4oP6rXBXrsXJ7ZoadJIPJ5TxhZU=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"LS7Rf3ofPuniC0cMrUzHMZ5q20Di/yS3h4y5h47b07k=\",\"GoHvsZ1+Htqpb6J26J6F0I915UqBNvTXPJN9oWx7+fQ=\",\"J/9XwcqEflchCntE5S5WMPKZxfRRx6DVFaFrs70z4jc=\",\"HBqOIiMKvNE8W+lgMb+hZ4QNEXs8aloKEb4mp/X7GpQ=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"AqHD8V1JJ8hDYnqc1TPkJQ2B53dNLDK1nVg2+cGaVlc=\",\"Ldu3I565BNgcUkmbN8tL4a8Dc6EKwRLhhayyGYmTV+Q=\",\"Df8Zg5MIWnVODW+uxUvoHY7fi8Je2tq0iob61toK+2A=\",\"ENUMJHMUa7x2J1/MWJ0DjeyNsocoeJ8ottX1BL0WRco=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"Bh6DKPtVk/kqU9/UDhAi5iMbpFlIUGKCU2sItEdsFTg=\",\"G1iSQ4RxmN7ZC2RL7jGsWAZ96/PwfTxRz6Wg3Z9tl4Q=\",\"BLAMDaH4UeWYY7BTvUxghxkPC9zO2Z1c5vZ6Qgo70fc=\",\"I5lBpGwrk9kSanAWMAmnrCf4qNQuNQGLO+yM3LXd/Wc=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"IE8mynmTsDrCw1N3ywo3Er/JvD7Av+y06H72gUrPLqI=\",\"CFr/nH/a26A52DLYvhZaHldHz3MI1RXjSO8RfpJtchw=\",\"JJBCqNwRHyfErp2wRMCws/EOV9BeCTFY79N13wDqIGg=\",\"BueZvN8rSnRUKFTzApgD4vhFUGZSAzJ7Pggll3QT6Ws=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"HLPK7Uv/tqyp9NLAApIbw//+0zPK4SCFxhJJYYO4eZY=\",\"C0fpdV+uSAEooSi/1Pqmo91uoDyrVmiJ3NmehNMQ1Rw=\",\"DH5M6jZcIGGSCgyf0sNgplBik7wCT9HKPwu3MNqIak8=\",\"IdofcBusd7y7qjDZZNb29j2+GyDZ1piMjc17pBhyFd8=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"Ca5hLouhyhNwkF+2eJnRDbhrR70Zlltu3RqUhuPGzFU=\",\"Ji4eC1bKxH/BUPKESRGQ5qq3VEWwyZNz/h96DjuVzz0=\",\"I0v0p9znWHwsh8KT47t8nip7+l8p/U3eql0/Z0kdNL0=\",\"L2y6xpTIhrAtClJ8rHRPtljSaQ4hPXQy7uZ/bLafcMI=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"IqzLGLfEm0t7uMn994t63tUqoYQv/4GNmjMAh23sOtk=\",\"CB4vBlL4mMbWWfItLHe+MC6r2RgqCz08v2I6Hff48vw=\",\"EsCiXnDQBuzOo62nXWabjFNLliiQ8//AFrMYatZ1uTU=\",\"EO+cI4SBKMwv1vyGnfJNerVu/TSe3Vb0n41PI4HfMlk=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"IWHNKAdygZ3UqBJitx3xvMLB1BuUkeBiC9o0eWKyQPA=\",\"LOuwrlEIMY60BlkAQbUkgpJTM2T3mbxBt/T90Sy404o=\",\"KyCS+GtZeaf+T3wi2VYfO/KFIoOmVogPt1nghwmgpi8=\",\"FWazQC13S4wIFGGIQlpEJFDPyQDPZD5zgrLYUHoGX+0=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"EaMWqjFgfyaPtMVtbFe6AWJ8NjX8z409GhY+YB0aAXM=\",\"DefuBpyTQla3gmSLVg5ZVAil6ENGRGCRUuNT2cKHTkQ=\",\"AtNvQCkkVwTMhN8Cl3CMXlhFw2rnBscuZxKLiUnqsa8=\",\"AbjMMmte4WD1MZjCF/s06Jm95GzYLavcKE15UdVG+Fg=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"J2JdoPc+oHEQaJ+yGHtxaUy/kgP9Td+KluzoVAdVDrs=\",\"HNgzij5bGtfNwNpYGmlQ9t6jScPt2gbLmboCW5TkeQ0=\",\"BeoC1lsgn22nY4VslLZDjHiortjT5n6HehCoQHJ0GlY=\",\"CffLaNTjiPhTZs/PKEqJXYtiUM7WJ+gQgXdDzgMzClU=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"GMYjDdwPiWgnsEP15Y29GuwTmVogLk683+uWnp1cEhI=\",\"BzphFLmXKF4akcCg/czaqEUuTwe/0uGhBXgjIJbbbc0=\",\"Lnh0Y0CyptIixqH8CDit9f4BPzmxZgzno+d0Ky83vn8=\",\"B6on5xULrd0GMDrY5eS/Qkm36oRlU97yjmdSWdPlyFE=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"C2b97CEOpOq/Yj0nEs9Nn6kCc8y0ZD9oDLyYNFcV6tg=\",\"L7ainZ85SlibYzuKTWvlHJwGAc4LFAvmQazqQcSapeM=\",\"KQJcxm/QQcT8hF6cHCzRKIVp+yQ9BJvWdaadyImyzio=\",\"FQlj8KypvL5BJiFKucYnpvftcxz6aVFouF1TSxe+P0g=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"DtWXgDAiV2Y/csG/xmVut7W8ouR77A1XmKCKMqYaimU=\",\"B+GcuKiTNps9MK4YjHZ/ORwRiIowAN6/yNMMBhQ8wIQ=\",\"BgDH0raUY0Xl8e7q+1647Ctuz+Uo0sBSzYYK+0o6onI=\",\"BZYIO2yXK8EwIqHzPWUjtHc/LNCkgOGeoBJRGfA4VwU=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"IQtcNvJ6B9l/mLnYZj2F2y5kUTCZqOHvbbIQQ2MeJMQ=\",\"E7snZL8Udc/Hu589VjxcwgHCSJh06RWTJqj0kwt4g/k=\",\"ICz1V9YlwmCA6wgoYqdnVyh4crGB6JmXIZ5LdXbiTTA=\",\"DlYcP4vU92521J6XFC0iBgH7xaA9kFpHKOoflf2IJLI=\",\"EJt/QRug5MmytwyvXDansZS+fBGtJDeL/ttoWSuoEYs=\",\"DeIAl0gOdVVHF4XeB72YCdV92Fm76CcwfDOunteJBZc=\",\"By8qYof7mEu4EN+MV4juvP0oJWE8tyu4DN6O3XbS6X0=\",\"KWnyfu0xpIC5w2x2Q3nbyizI/dFBXD3e1ilAvN4L13E=\",\"FDAh7GhqPzMNX55lRjgGXObNeeKMWzdTMmJE7mWhsac=\"],[\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"LKe5EepPahHaC9XnKrPMYhxZCLWf89dsYJ6pwvuo+kE=\",\"LeXzpbvlsg13umpvj/4tsB/1AAkBuc4BQN8TM4X9lQY=\",\"ChUM2//jxgx6Us76kDu+5NOEbSQzn5JsNlXN+fgfZ/s=\",\"ICatfgNjbe70eTTdDV3SnYcFbRcumTv16W1qO7MtLpw=\",\"IyUHo9SMoWPF4bb1vzkRQVJHM9nO+A1AT994OTyQFR0=\",\"Gxa5bmrsidMmpabBgzbsPFbnGJ+MH+dMXEYHS4ZaHYM=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"D99dFUJkmKyCQR/4p6OISJTwLFJC6rHdf9/KHP2r01s=\",\"CXz6Ehj+ALTt+M5hzSC0+IdepcgoLZD29xU8lGO/vZU=\",\"D9Hr1nlo0eSZJsOVKq+W01WKqFasv+SOWp/bQoWtm9o=\",\"J9XcR/Z4MWaV1UjTtP0bACRKEdTLdT7dkX2EnPoC+4w=\",\"JgLd1+o6KAhgMhpwqoBlYqV76/paD10ncPOhabiK4kQ=\",\"L6/TC3+semaZd2iSsHNmtA+jh7xBQeAJ7kIHAzcIiok=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"AbKsLJ+X6zJWDO4LjoMg9ShmsXBC0sfBMXjb2WOTZRc=\",\"DG2xkRjoN2i84k4VVqudODrbD08rY8P1QNW15N7rsfQ=\",\"D5TK/BRAOEXqV0mXv3XKumsgFu5aEN5XrjWSPJxqImE=\",\"CRRcM3k4rD9xt4AiyA/NzkwXQvR90hkMMcPMWkGYD10=\",\"CgykYtiuIY4jW28k9MF3R4hlJK3tfk86WWMUl6T5iGM=\",\"GFEojMzivezjp/aP8zsAy5YeYpLyrynHdc32zj/gd3s=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"Ca0zmS23kSTtrHkcgOgods86YKBD7fzXv7WpPuP+qwg=\",\"CzINEADFBDmpiYhsTBHnEb0mZn5hxQr7qdNHy9SzEvM=\",\"JhI0iKTwN7p7KlE5HyX5FkKuUrrhQ13+MsX0fOY/aKU=\",\"DXpEA8NAfWT/X2MnWt2GwWEYOy8eiNq4QmB6jz/KonA=\",\"LK1o+0vmnKE12bN+LTCEVX76ZCOpZi8fskFQsxDHFyc=\",\"LhIt6yArDixqJeFSJsCblWTMV6j8DTZFvnfDb48n1P0=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"I+CQhFsXwYzBL/g8596y5Yz/Lzd3HDnNC2i6FPTNZaw=\",\"CLBBtA5H7xiDowpeYxyx4FllQ/XCQHAQAr6dSV1Zp3U=\",\"GdCtYXbNh+YQm5Lf8bhjEEGC4shbuqxTMLK3pLVvmm4=\",\"ESluH/Z6mN/3WNAj6nTF+r43Knl/hqYhusS7zfMYeL0=\",\"GwlDwEzEw4hTNWJKTfVV/4nkOaQOZpHV20RzKuobNqs=\",\"DCy0VwOlWgUOV8o+Ub84ayy6TV2t6xdJ+KbgR8XprB0=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"IMBhoPcGknSKsvYbflLl3dXnBOUd4WXrGTEnAO72BKk=\",\"Kust9qEsCZtCwD2sFVdoHwOUfs12Qm1suKdJ37n5ZPA=\",\"ER+oT4mWd3UlkqddUwg8MYjZenLYqhvjg1toG8aBMnA=\",\"Gq037WohAsuJK5ineD+wGXUsyMAycZC+VErXYWUlH5A=\",\"G+bSYqWAsQlWzWFj7yIfPZsNw+XLx6sEs/jyoP/oa+k=\",\"GftEkH6TaG9ZufF8AmbIE5+PTYpdISUDvsHG73JAn8o=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"DMvQfxLwB9jzDGFQ45Xaz/3k6uj6Ub9r6h1qfEIaWG0=\",\"CaNCiwEIFD3Jx4YzqjuzeAe82WA0Br4hG7KG5CtYy1I=\",\"Knq2ypCk5m9S6GPEsPUVFIeYrI+SZhsrgWkC6RXYInw=\",\"F5I5y22WEx7xLwmlj5U1tmsjxDZ7z6tofpp8PIgKBA8=\",\"B/nv+M1ikHtdYHFAvQsJRNF18Xq+Ky7tgUtkY60puM4=\",\"L0TNZnQJnq6M7lxvhOmyXP18gB4LRXJ46D/ktRFFjI4=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"JB1Ky1PlHO6Hi30jIj/TMxH/Cq6B9PqgeBZUbrcy2Nk=\",\"EwFraU9jJFqKmy8JqEvvfAcRu4g4s61J4LeDj29kRWA=\",\"JAo/9HwuczJTRkelov4niv8GnMR5+gANfDGnjOKSm9E=\",\"GlELaD7SlbGb6BrOPfv3zxBhsHoYV5Ml980AHTgUbDA=\",\"IMTs66QZsFdaleKV2E5xvRqSjVzMpdeagJBZ3jNCyc8=\",\"C6+YmaUXI6Vs2kPBrs1sCWpJm1euGJPhaiiQi8Xc/2o=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"FiMVw7MaTVt2ZRD0aXT/iQcUJDZP1pyb+6G24L7Ojqw=\",\"L2pPlImtThQ5yAbXV3mf1u5Yyl0FYNFaj2WMbrhvR9Y=\",\"D2eZmgHPZg4ZGAET93AEHMFHozXhn1RePzGmG7a076k=\",\"CRRtfwNdN5eJRWVC09cntZOm/GclKmMexAcFNjVHj6A=\",\"LkSm6y7+3gpXaNhJHkyGv81jsO4vODt01irzEc+R3lo=\",\"FgYxvZxUdJGBgWyayl/gBCYO56Vv01+1aXfvBJEdXnE=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"JvfxUeN83kBdqU1bfol+l2iGKvKFkCtZC2NuErtDx68=\",\"Du/9GDJfh1TRXbit+Y0pCsgWyrDkMVMGskGAaOeN0C8=\",\"KEJ3tdKw/WbfNR/3A0GdprGupe5AW7oJvUo2nm6upJo=\",\"E1hMUWjPL8d/iE0RHgX6hRLnz/7GDdOhBVAxltaCyhI=\",\"Hr1VGQu7quDp3Rr5kerzrhOvDnH6aGMSIkyIbJfp4vk=\",\"E6RJrOGWAorqA1rwzZ1bdj0p+NKSRDp2LYvgax4Tbfs=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"IfpCTPkL8LcVZWrrPQKswybLVogLzZFgLvrPZhZL0Hs=\",\"JGlLW6kgBgO8qPUtc9Dz/qJsDuGTnSzsipvF+WHNaMc=\",\"Gm2Y90T8pZyRDfsZrYnXwl8scZMy7buvtsyFwZDk4XA=\",\"CrkEsSJEJGwt2Vxpooq5HSw05kH2l7U2G9kdFiXJN9w=\",\"D9h8iSNmjM6SGvaYzaZxA8BIhkEplUgARgN03tW4Z3A=\",\"IJjOBRLKE76hFB5I8UvGkbQQz4Hef1l9BiRl4UMcTCo=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"BNlOvacxPOJc0N/NHd55kkOdquYwwFTXz9bWkKhcJ+k=\",\"CvL6J03VseFlaPxGE+dsmrT6mdCdEBBemL2bkrgupFU=\",\"GRU7dEHEjNJwtJF2LpbkcIWHFOllCqxlFpV30vx1WvQ=\",\"Klxp0DAkjXj3BnSvZdkqkIp8J8NPMvn9JBdFDgWFJUs=\",\"BDbYbxOTgv+2EIVWDiWSKQUY7O1SMIlLSovN6+BqiPs=\",\"I7QOfxvQt/rozy6gYIrOkpm5A6yNmZT3RIvC5GCQr5k=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"IUJ4Mjcf0c4O/r6QSj/66UEULU81znfgZOJWq1k3ZTo=\",\"G1J6FfNtTwMBWm/0g8+1wY+LMxp8r3kjeZj7kU3UYUk=\",\"E9hH4ltx01eJxs3oGtmtnBr6as557PNjkg3CM+VkYzg=\",\"I4sTNlprj81lgP+fS/JnsBNmpB18MmyCa+ff7HUb1IA=\",\"L9wasiXfGHqP3s4uFBFMtx8B7Yhwhe7SJzHe0ZiClms=\",\"L8n6AIMOJnGzbo7uxcNpprP8J72WkFtfwiD88EWNHD4=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"EBtw3QS+ZCqgc3dhDj7n1jC9sS47JilYBrkun0ghUcs=\",\"EieHIjHxkvHIFEDHn96+WXzorQOJTLB6ybNCPk25DRA=\",\"HQHXNLcJBgMXSVH+bTOPs8zMAMCszyrI1FhZ9FFmMFw=\",\"Dlk+nAF3l29MqpkeVPx+6uiX+3I6n60IqBGylvPnsQ4=\",\"L+m3Y39U1wYP92ggX54WGkyzvZ3PFKi7yzd0O2/GDBY=\",\"JqwXm2fbLDk3OaRQVzAiFCkF5fqn6O/dHHF+tgOm2cI=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"LibxmXL/i+3vt4A+MoRpD0/HgoywvPO11Wl7gnFKFxo=\",\"B/R5CjAlT2VPsKRlxCIXQhmYhDaT4sIyDljN8xp3zuo=\",\"Fq29WVuZWbi5A9t98VGH5mt/b9Qz/S7Tyg2rjUX40DE=\",\"E0E5lVj2l+njtJ5QrTiJp6asG3oWn/4VdaMXKk8zx1o=\",\"AsjnFOyZ44cU4dAbmE+GPA2OBbjDt/9vvKIMqs+/O/Q=\",\"CutBIsqWKFxetbUv4sJjVdtBdAbFZ6psNd7H/Fi6YXY=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"JPXmHKwAG3jEZkzcdc2Ndb3mAuRcbaxpjzso3tWnVgQ=\",\"FY2ri4X0QS/a797k1PH+yyL0M2cpZNLudzCwNmM2Hx0=\",\"IQp/2JTkg74DLI5odpV5aPIVKp8e3tEcPNJlOasSohM=\",\"J92D4XiBf+IuAiwi5iCvuI4C+xU0YyK49wuyZIW4E+0=\",\"KLYMO83UaTsB8RHauWnuXfpKiEDe/b8rvzhgTOTiPnA=\",\"BcVvaD6i0dUHZ28DxBGinJklIVyl2Ofyij2nPNe1E94=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"HvkT0zsY9codAAwiCWRngMRYCGkWPyh8T75TficMMIs=\",\"L3d2dDe5Jictze7NRUFqqliFUaeb/rFfw8dtk40Sr8s=\",\"LaYsUPktjcwPb92QkFFwiwyPIflmrVe6MDNw8AIJ7SE=\",\"EYwZJLaH1SaEJK8jhi+V62KeHGmafCfeJ8WBxJXvFZ8=\",\"HCDyC2AfidZqvI4YVNPylInemlWVhLnfhC+5iJgBM8Q=\",\"GQeLpQNw7vdqAPbIkhcYO7qdpY/hXYoHxWXKoBkUd3I=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"CQ1pfDK+ANi3H3NNH5AjzdEaWHtRWB52O6xbPHZsUEM=\",\"KDCakSr8hoSLZ/fYW+lgPzTdzqxDhecC82YrPCvc+eU=\",\"CxAPNqwlTqY6a5KZZEUxj3BTYD4YEmHQcFFADzAtw7w=\",\"GTFZf2361oGTGZohZnNsDH6HQYnKTU0lVe+dlksGyT4=\",\"CyaXaZX82zVOxcbFDhspE5/DwKZHCcv8L6mS7/qDOAA=\",\"LdkZwu3DAuVuDs57hTeQX+qoxt+mxhMPlNaPc4C8oBk=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"J4sCMc/4W97uSX9idP2l4HzvqsGrBc6J+GPbP85e6yk=\",\"Ce4dyuedyQ5M8ND7Xmve6W+mt1Gt3oItMOOoCxpbtQY=\",\"F2n1D7lhulDfi54DoS/De8llJl/Ok/l2KydDKP0Er70=\",\"IKmdpDI1orswsO9Y1wjQd0BRD1F7Lu22eKlKqk7b3u4=\",\"EbcYHsD5oUhdhM2Rw0L3Dhkkx6hfSKM+e/i126K4t6k=\",\"I0U+saXkTiizEQfyncanv0gYp84VbSx+gd/3XMAuk3o=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"KryRJB4ydeICjWgTD1Uz1sjj0ewpQmMvpLkaSfx2KIA=\",\"IWU6iHv2J8ugtaNeuzMp9GAq/YRAraAFDDGySdli+G4=\",\"L/7lJUQMuS6vxRixYTXKAN8szYE78fm8RYJS1+5Hje8=\",\"AQS85zT7AyLempEFj/s0DjXCEqivXFts4YFzRNghN9U=\",\"Ets080FFGV5kRVopj+WXzot1dCZ4TMU5de1aQ5uRwSo=\",\"E6mmHKAAjBuRF0j1WTu+r2MzCEKOToU3ghS+BK74ixw=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"FK3nzviKdybVHrABNX2L/OjR2Ox5Ry9vJTHZR5LUcHo=\",\"JLrukhorgn/paDU0a4Wj6Uq3W065/KtCNcucVNCgd6Y=\",\"BN+0QbF5kiueLKlFjebTqgxlO+yi+nMXpdH8QTjoeCs=\",\"Lv24TDxvrOsPWP7978CeRH6iMCKR06sREB1IfzxnnuQ=\",\"JNhhZQOJ8DoNqdcg8l3256s3lqtZftY9OAVUMWVbu6U=\",\"H4smCfaZn2sVV3aX6Q6JH8e2kcMMJpUngELC0VKqwq4=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"JC/tVRnwEHB1Li43eXV+XfIQM7qquGqfvbGlTRHNTbY=\",\"Bt/445L1EwL9iGTeUGi5Q6KwT7CyOcOLZ5+vaJ1p4ak=\",\"HOXbXNJ3lLvaD3IVvZQE9GUC0rYB90/PLLGlt/1ED7w=\",\"Fq6oOOyLxui49IMJzW54PLSjN7knKPZvcB8NXvsyqAo=\",\"H9Iaj/E/DvEr5aElv71elS7x5GtPN0fz+9gZggnU6pU=\",\"ASUViyHWd2GAdoVJVNl3w1pjE6HzdWTja/bQctJQDfY=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"K7jinLMj4+KHnZPTbpMSuzw4qSLMa8wWifcnk/XUoY4=\",\"DQ4uy9COJHrnr/G84rxUrRYD/Czw7zKCJwH+7r9Ogmo=\",\"Ln3w97hCSQs/OdDYe7s1qQzyPzz+7zyKT+RxakdplHA=\",\"HZ3WCaKUSqeC7LGgistcC7hXx0iZIGRPaDnJPBCzeDc=\",\"Ea0mlHHUs2+yOqJDkEoCkGCMMnWQIPCCzai01Th1IQk=\",\"LS9UbL5gqYIuIFw/P9GHv4n23vd0w/mI3obk65FZW+o=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"KBE/06jTuV688p8t21TG2eoDSlHjvRGY5MH08dzwaNA=\",\"EU7UbUmzibFMICuhwGntTYNsEx3OwkcvS7ePgDuQAls=\",\"FKIXv4c3+zVw44t1y8l7MWuiHbij8xaspaJu01wNFCQ=\",\"FsnnpY3fFBl4IJVh2TAFgjO4rbueOuyXAv9nTCKwCdA=\",\"E4i3i57AJC5AKQbXW+QZz5Lj28KlFS35eXMY4ARjJ5M=\",\"KkWTGNP3FW2H48ZmqPdibP7Q0w/KKO95J1E7H3opSwc=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"Hz3zyhxLhUeSpp0Qe7fm574vR5vjl96DyUyzEOjoIcs=\",\"KGlEemacr8IPH5AXAo4wmLOKgv3zzuWdneLIiABLQek=\",\"JezL3K8KZ9XvFce6rvi9Kk6qGm1dcDhe13fBDbR5b/c=\",\"JMJpcOmZ8n5jUfG+CjIRwKF3zbd46tE7rqm3tL41NKU=\",\"BzGvySKtSKnwzp1jXia6ATp9SujVLU+3Xw8CQJ2DQzs=\",\"IXBEq6o8mrbFGSetEGHQwc7cY6kLAbe18cEJdOZvh50=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"Js+p/yEJQ/awfAhpHC7dsbsdIWekF5EuznJHBrXCCw4=\",\"ClUJtPpbyL5jCiynxAmAkEcTsZbjan6fg5xEdAN+BJw=\",\"HE3HiLYTH53RMsLt/8ekbsULAAOD+v9UGTkvDSkcNHU=\",\"FQvatZdnpi2ZTON+3yw81TEavQv+VB+zCWjhnuJgEFM=\",\"JTk2J6WTcw9M8loGiTLUR8FYHyUfmnt9hs+eOSrKDTE=\",\"EFmK96hM/bTEWMp2Jd2LGFCUkecQnbZb2KD4DYd4pq4=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"H9W6WSLXEJeV1dune/tXumrvG7au8LrsOND5FtNeydA=\",\"BDkCbiaMoPqFsfbe0nyFRVLu0mKd21nmpnnU766m8hg=\",\"HV1H62V85RC5+aF+mknW8AQPfzYDmdq38FP6uj8GKG4=\",\"XPB9zYMcHFEGLqJxtAKUGZb0bdnfD7sicwWlUPQmlw==\",\"JO8WFa/hiw/5mL+eH8af7fONtmsiV/S6x2rcBM6S4Ck=\",\"DOHaJsuXgoFiQlpyNsI+j0t3eL2p19UUsbj8kygIfCw=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"E1XkFbDbQAHKAVA7wgIypJ5n8OgW3JD/GKQoBDfp6bg=\",\"AR/JZpy+O/F22mXzEuQJ1jXb7j+/jz0dawVrSEc8tFE=\",\"HWwZECNniVV7TELfAZHSpGzd0oOOxqdLfDCPAj5x1MU=\",\"Fib00sx/LUbXyclwMMG0INbC1VAz977Op9N3VBsZ9X8=\",\"IQxLtD1xK0ANS65L+N3kNnhvyIv8uCVws+I13cKYIRU=\",\"IT/SOwTqnljqkVwf20YPOgrEsAQa/oD2yhup4aDhOCU=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"LqQw7+juHyxyrACSWKGtmLh3JcAPctJ6McRFBGu5qA4=\",\"LWlOI+Gz9rYytkZYTnb7ew01rtpZj6UGnXPHUTa9AnI=\",\"LtdU80oi/gT7s2NXduCJTSHNv0zG4DuL8zeHiDwaDbA=\",\"DyPmTitZ11C+O9A39N9i9/vxaJlADmlVS4k/Sv6qQa4=\",\"HNMBh41td4SA74Kyo8ubzDY2LRmORMIE5JDMUkorsrA=\",\"J215e2fIs9k1px0vg0K/fLvWjeU34yxGb5WgGlogfwQ=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"AW6Ktc7TToHf4Awkx/vQ9BiDUb4rGya21joeArhK6ms=\",\"HK87EKxYFGVuwtWFK1Q5+BDI3ApP1uvoLZ8zE09gx6c=\",\"Il+Xva62pWU3LFR+nWw1TB94+hmYzD2SwoIS7H7bY04=\",\"LYKKy6nljg863yOaNolElRWhuiRME7AYbIJ9YAt6c1g=\",\"H52kBmpi4M8pDLg5v2LJpJz3mw6hr/4DaWBiq4y505s=\",\"JAcG4rgbW2U0O0HlkzBmbStAUljEubF3SVd2wrG2gWw=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"LQ9DApdQ9YviLWbFspY6xrFbGMbp0Am3FwRIWf75YY0=\",\"FCNzkrYDUvbIqg9cCAJL64gquC29PnkM2jiYiGqj6bs=\",\"DI87A2V77ubh+UyYZitjOc+321y0MfuYE1h+4/GU0mA=\",\"GHALUV3hmzJWUTSCVmr8v0kOVWM9wLpXTC+0760e8Rg=\",\"HDsKZkXQAqnR4YchqW0eiwAhe9vqdP8TQNykfmoybiY=\",\"KXnE0h+A22EvqYqpC71l4s7MHqQxhJYSAFqQTAi/0BQ=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"JFCd/jV0cDCb4GKwfAXdPfV9fMpiyqJgAZkYIM46+X8=\",\"K+3abq+JAbeKDlPiXazZLGBnMEbIbeszPOR5i8+TV+I=\",\"Hx2YTgaCWj2lOsQGbUkQBn9uD/E++DFSzOOXfMsnNAQ=\",\"AfWSlGrBA/JE0WiALDUqfi3FK9LlPT7y9KdXGvgQYJ4=\",\"GpdcZoh0QiCsHj1SlRJvjuDbfKYoOhdlhejdW84GD/k=\",\"Gngxn7YtmSl3N+nf3M1X/m/+AykZW4/3E6LW0zWWpvY=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"AvtML0FSAFK9RJi+h/RFs8Yuhsp9hy2uj6mcZ7WXfRE=\",\"AxYrNn6fNBgPIijVBeVNu38vI6Oo/uFPMISupJD78/o=\",\"DaXLlJlfZodj58bs+W3GvBOUOr8+ScVacC038295EU4=\",\"JXXN8aYb7+n7e4PogOjMI9gmAPNVmOovga0b7BvXAbk=\",\"H4PWwgZGp+CJqP0K0nQCGvL7JOMV9ADcs9JqmataNa4=\",\"LHdM9If3lmRYAhnJ1ph4Eknke0MnZ7DLr1FppQef20I=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"IDwbWSVv9cAE5wwsUSXtUcxT6ZOQqN6QGOZH4b6NmIg=\",\"J6v7LgiUxbQnmzm5MZ+lTMur0e/FCbMdkGobX3ZJY8E=\",\"L+ov0PNf/6T4SJS2Uls/7CmcghpHZqeMgpwufmnvvws=\",\"JFHVTcSMtgjy6WaYuW/VRYFv7wncrqdcmSgXk3Omb7o=\",\"F8XUy/cT0z63wfkV3SsOQ5vrxVEMtAlZSttD+Ut6Dpo=\",\"Ann79DguSyvEbBqPcZBj3bQia7CcEM1oAIs3x/MtRpw=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"DrfBGUYA5s7T2NyIyGiXBNQYjf6Jlw3XkLuctgBlIyE=\",\"Cg53bBLNEIzFibFOhJPcdD2FBGscTKl3FexQH8sWa6M=\",\"GoqEh8uKYLzld09k9i0LzueR3DLTpvhy99xibkpzKUg=\",\"FvED/bpwjbK86LWMRnoFu4h4k5yChSkh6U5elVqgnKA=\",\"J6VzJP+BkycoM1UNgvdJ0TibST+YyNNHPxqYkAN2Mls=\",\"JuQEA3hEH+imDRpTGaq3AHbILMIDUw2C51iEQHDASGA=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"BxhGqpnq5pT6F9c+rodTTwnEU5+lw7eeprxW2IjfqcE=\",\"DPdaAya4yj4q1XGDS8g1wINVVYepKP70F3MGViF/qi4=\",\"G4BwLolNdIIb/vii2uNvcdSAKUD2OhT+ZLMIE0DE8Rs=\",\"LMSfsc6RmLknqwmOyfRU0gU0KrSWdwN/n/fwjj8HznE=\",\"Gm50vvSwpbNWb6y/dwoUutmNi2/qs+RZlaMoE1iI6SQ=\",\"LvHg8Lv/kTErLJtHEMoE9Ol4BhulNlfpvBiTvbLnx8k=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"C7d6eVEZCWgQgdoRoTx6vzEHNzukE+y6TUfuWgwoj6w=\",\"I9iy5oadfQUQHTh8G4zea4W3/oYOfu0pRMUNCZBTv6U=\",\"MCOovwOoA+2jgwxQDRwOBh+oXEwVtyRZR1494pBhauk=\",\"KyfEGpQ74NOW7TYwCY/3AYdnFh/Bok0l9Hlp8aROIOs=\",\"KnO87tnuKnJhKQyFkOL/Z5WCo6bFmIJU3fbxCPEQPhM=\",\"JXnEe3bbWcYgbvAjtZiE+uCO9qaXrPflW28TL9dzO8I=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"KlmTycKoC+D0sKb5xDLiwGBM9Z1b9b8kYJVy19CsuQA=\",\"EPrqEDqjbn1ce/dgs1Xg/TgaOT/so8BEUNf68PaiKAQ=\",\"LpjpK8mQTKksPm1o/deei+9hI61RdPAdXcBKJA2PR/E=\",\"ARmTe7XV2QKfKQI565T+hgafLba87c2ooQKOC3pDRCg=\",\"fGekjyCFD8jsjHNbc+B68qCPUue8kAhOlgnpfwcM8g==\",\"LaeFXeC9q26ZP9yezl+t8AxdOdWPZZmlZDiqJmPMNe4=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"GmmjhAdiN2w6Kuwb2KQ08qXkEKfpLSPbuyCgmRqtxGs=\",\"BX4nrZIYoxHDYnolNFyHlQj7hW1oucCsqQJ2sd+kvxU=\",\"FDB4UcawecTzsmaJ3F9iuKwraczzPzgC6a2iZxiIGDI=\",\"Jscc+1MmYvbmgd0xD+EScDt4+M4ePDkYPV1Iic4wQnE=\",\"KUywwTmhpaNFvAlNilPyHZDoLPR7uH49Xlu9dh5tgqo=\",\"CEEzuzXRzufxCi9hlTpMd+CcRmGlVlZGZU3bf+wL6QA=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"GAfR2RDPVCAIe8V1t5XPe3e1kLfRTT49IpizAsh1vBo=\",\"HfAB/TwSYjWL+hGYEWIp3BLhErzZG085YsgTbALFfpo=\",\"K0JLiN2wri/3TRSokJn4lC305zfGP2H2lezqSEL5/wc=\",\"GJsIa/u7naMIhfEf+cshPAo1NxAVPK3ZYgPH+XIDeRo=\",\"G9Ryq4HrfWySgJwHo4ex2tQ6MIP+ZYvIjRw6wWcuLsk=\",\"K8sy3jLQL0uPix0QBFn1N8sOTh8Uz+VyRCQQepkpv48=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"DPx7rtRJeiJS1Uzer4zm8jdzIJq7XzQcoqthbwUWGV4=\",\"HL+2Yp3tJkDIht1QSi7Fj5a0QYObeeVP6rBCYOuQsSg=\",\"s+GYEd8u31VUmsME+yBc2uMmq/8ef+vSDzUK+HUvKw==\",\"F+hcTG/oCFNBJLtmmV5cZj61oZWsGibYoJbbZ1yg388=\",\"AxzevvrN8rLccI/4fO4DFfNulzCDaeME6NJlTDQmIt0=\",\"F8M++sEv1Wnh/3wKAWXEy40jwnnUQue70HPK2+T2ZbI=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"CGag0hQO04VNWCL7pomFdkEmNFza+/VH69M8Oa7LiVw=\",\"ArvR6fMRRBPDR+5AN9CPkU1MtlVhfAz6q3e7Cc7TmVA=\",\"GtDV90gKeN1OBIxFlHnVYi7WX4eID2dcvSxNl+e8eEc=\",\"G4gGbpm5k/cDBs3ofqR8qz76bWmMnTsbo1WyyfNFO3Q=\",\"JfoM0N6hV/9O10Gw3HbgCVpR/DDHmVAOgNC4IarXufE=\",\"II4NA3jyx9h6bOiry9S92Xmk2dyAJoy5bYStRA/Q+Zo=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"C8snqeWQunYQL4v6bxxkcmVY9XoAJ+bdvEbVZOuLCdo=\",\"DOkZI8UZYISadbP4/Rv+HZdU3HzUgUT5ZKDJGk4I3WE=\",\"H6ySwpXHY/5rHjwPNgTwx9YY3vITPuL4adKh53S0JF0=\",\"CHloolzbuWzUceiPwszL8+W4vRA3tO5TMq2sBwqCoQk=\",\"DMjZ9T/5ju3W/dXF3vNkpF0SrOH/XjYm92B3O13g5iQ=\",\"K5UxD+YwcHDphdYTkKNRyl4cSp9eLFOWAhNvzQgPTmo=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"KMCmzNlYfUHrcyBiOUk8kVDlIlju+lmDgs9gnUVZsug=\",\"FlxsMT+qB753J1sjW8zL8wrwdAypc9asziyvqUYkkdk=\",\"DN6wR9jlCwAlPpJt/1+VtCeb4Dd2aZCNZ1lhLLcyWeY=\",\"EBQNX4Xy8ylXLCybdTV3a3aV1i1jYu8nKFSFq7+dsBg=\",\"CVATQMGW2gTbB8ixw7wUYcIo6SbJ7ib14mNk3YlLFGg=\",\"D2B4Vbf0JTD8GfZDHVMDWnTrA/clHXFWeYJFhpjJOsA=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"JVvnnY3kFoxEz4omUiOR7Gtn4w8kdL8sx8eS3SWkcEY=\",\"Hst5I5HMdGcQtYaAAjQmetzU2YQcTo8edt/F3RXq7JA=\",\"KSRwMH86INAgWhkJHLBEqPnljQFW8DZLIfO2Altl0BY=\",\"DD17A4PRN3SJhD6ISga6ciRfBJjnEEOvKs2oNTpH7O4=\",\"DGEMsZcaqkrl+H+xTtU2GYZIzch2x8bi9THX1dGtYlw=\",\"HCN9yvEkvhV8WJeWD+fyKvRNRB0tRZACige7JJcR1+I=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"Kl5YPkAD5+dHodOa1gJ6nzR8felGo8/QB1CpoQLAXjs=\",\"FszsS0lg0jMalggE7NsEQuyxvN25urQrMGxHNlEGdek=\",\"LQ2zCSsDpUvbhhwpHBofUiES+eRX46UdcxhR3VmxNl8=\",\"FvFGmTXvB0qxrhkilN1irz4UriLx4pQDIiLFrhnirb0=\",\"BnxBBtARqvUvJTm6L40f5lzprggYWK1im56+gUjMCHg=\",\"EsbqrcxprDtzRLgpbqSiUfrMHJY1bIToExtmLz1fNKM=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"KtmDEGnh8RNJXNqq8YczqkpOrh6FDVjAZmWhx4ftYEk=\",\"Gm0rX5KNnwqcQCK5Ug1wfl7KCsnO6Eknpxc3oDZij2w=\",\"HZLTaK4fQiVr/nEpCaA8aaRrzSB8F0YZhqbeAOCVKUU=\",\"EK0dNfb49JnmTa7wMqKCUbUMYiooQp0rIQerN3eE+q8=\",\"FQIlr8lfy0UPqbK3cjR57PfDFD7aDqolffTxp5jPY3U=\",\"E8VC9G8kXHkJVf0wyM/nElU0689t97HZvtvnIF7duYA=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"L+oxFiZr0wBbBWSbSMcAieVyoHftD4+XMLY8u5E0o2g=\",\"G8Tw30SFKzkrKjaEYDD0L81GLECwTQyQ5xEp5iGEKvY=\",\"CDskTuKrgZqV0MS8252RXau2gytN/5vefOBRWCfRnPs=\",\"H+kVkLaULpxJapxpbAZ7MIb9cHsBKQp3EdTzmJCMiRc=\",\"LpemOCyQB/srasdBhgcO2iabEFBujkp0uoInTRVCaMA=\",\"Gdcx6YHT3TdDYvS08Fxe6WALU5ZWdhXD7pTgqAyMxKw=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"Epnsg1A9zQxqrs6S5sLPeHG2HkMxjcgqGDpQOQRP0AA=\",\"JwWdsFj9JTtxs0HQdyRimXNEl9wx8hWZGMZKeBiLheE=\",\"D4wt7nzcjckOtX8CUHYVehgZc/Y0cxj+6wyZr+rghdA=\",\"EFPYYiGMeth82jEFrCO8sSyS6IMAbD1E+j+RZugnz9Y=\",\"FELuA0O5vCrpX4xPWcsyu0YaTHtAoS6JtotpkKS3GTM=\",\"LvFH+pCOYYb8LtVPrfIFVe8qHps7q8toY4ea34SjRys=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"KX1/n8MDoPWD+ZL3NH9otQtbvXkay5Pi2LyO/cTBq1M=\",\"K06LQM5sZKvByQapVuWq9eu9t8mBEOFxraxXO4GxYZU=\",\"Axb+BB1o44y6pdco0iXtgY8Asqqf+xrT2ewkvN/M3Lw=\",\"FoxXtyVzH+MVnXPg2UwOvzUXHjz4jhJnwrVWpUVq5sE=\",\"CQZm1lViKzdXta5Sg0MrSurs6DFIo261eCHSQbPvvT4=\",\"AskRZOh/yxvQcUOHAobsqKKd82eHaLrlCBdWn0i9e98=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"EQ+QHSRsLpUcV5u+kUZ6KVDmns8kHYtoxKTJjwUoSyY=\",\"BITn/u/umkWbKGEAnWAH6LFXIa+0o18+XJpvH3AzQJE=\",\"ETAN6ua3Pp5RKVlfCZbBDOACUGwsIHv2cmdqEwq6g2Q=\",\"DsS87Fn0P1tWU6PLBEDXERjOMbtgx1ucZ2a2peBSSWg=\",\"Dvplpms4sDRn/jjYZpIH2fu584+q9w0Tpnxr9x4eceY=\",\"J4Bog2hKAY0R7i7Ku5cd2faQzFoi/+Ns5h8XxupftKg=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"D0t/Ip4op6nnvwGbGM56NigP/yL3qZ5gvYTRuqiRzRI=\",\"ILU+9U69JdfCItQY4Be3zF4Aqa5SIRkaH/Vhse4xd7g=\",\"FO/FWgjaX1NjVSDiGJDi5erwzB+h/dys8TAtxl7gWcI=\",\"G3AYALIuV2UFn8RSW7Sqz6yN7fLtNyUxYLqoGGeO83Q=\",\"EYZI11n/2S+1vLhqz9/EvO3a3W+xZ5wxfLvPaGZRxn8=\",\"AmAVRKbmf3hBWgwqbo9GZfWRCQnFi7LrA/eFRRmvFfA=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"G/222i25RLS3n8Dvgl1soqzTUMu4f/Ehh9swoXmNDc8=\",\"CWnOYsGPlutsbj0MWnvHsrHeDLeuBHS0fRZEXy0GfLs=\",\"E9VKvjfczy7t4SDuqrxRBbmX82R4dBec/rwcmwIrghU=\",\"J7QtCjR68EgBfNbipXfpWcC2trjCrkBc2bBbeTomQ7M=\",\"Jzd1jsM1/LRJjVTSEMEbzh0s8bl7fruDXEvRexz41U8=\",\"H5aW3wu14pPcINBXnboYZq3vj25tOEb0I4CGH1tUykY=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"L6ndKJ6rSPBCSkjJorT1HS3jrmzy1eI6ELA2aThUHWU=\",\"D8dVFB1Val7r8e/MvLv3Lq1e7LWtk+mBS3FcTTiNdwk=\",\"JhJwcihpicV8ZlCQsg3IXF+pg66AxBL7LYrQIZSEOYE=\",\"IpZjrd2bmeIlUTp9DtG0PAsC3peldGY1XmcK3ZrWNrM=\",\"MBFhPb2JWlap3IHKT2GgP053wYg0xsIKUb4B1O+QYtI=\",\"BVmM13B7KEiOKg1mmsFOhGSATlFTfX07qkWnyA5InFs=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"FtwfWKLlT4941KK8Z8XdJCdE/y2w6pUzqfs94q+oMeU=\",\"KidMwe992eFgVBUj3WssFZ/LD0AZG2Oo0Kh3d3uN0GA=\",\"Ho8wePL9CwQJRgqzaaEA1ags2Ts92UdkSqa7j8L0+GM=\",\"Luga6Lm8DrfUQX4JqD3UZ8qNy26PDIdYuculVRI9rGc=\",\"A2fLS2A6In5rArpXFz/nOR6T22B4vi1W7y6RZLb9JyE=\",\"GEY3omfzKN8b0RkZH+DRFY6reZcT6lN/Ab6/pPu2QPM=\",\"I20TOT74XMSKNR3Xht16HeXjmUIpYSf9h5RyI65RCK0=\",\"J2SaOh21uoNRGy+fs3hdvfCD8fXUvtOLdv03lUXZygg=\",\"CPhPIZeBk3p71+1a7N/7ytkqHTEmL+UXYclKDxmXMoM=\",\"FPZdlfc1m4+fNSdSe6lyIZffPmmPdzzzAnwAvEFg+Yk=\",\"KnWhcVY7gH21Jb4llpmrKP6bx/sfcJQ/8Em8lw6EGgw=\",\"IHBnnnmHgu9ZKlLKnO+CDUl60u7Lqn5C82az5SHE7UI=\",\"L1ReV4ICyXMkiFQOQfeDto/wYT/Xk3X4uos9MJWOdnc=\"],[\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"A1HVgkhsOXJmI3UEleKXlwsOGXh7SRc6k4ig1bCHiKs=\",\"AQ4aO+ril6Ryoxo7UVFMZkq7EuwtFYYKKdKpNS086Lo=\",\"Ejlfq/HBRmT68+zHKoRiPB1ct7XldE5gLIhqV3Pl8G0=\",\"CbkYcxUfALKZoXOltzb3P74s5UPwtNI3VlvVh1iTXP0=\",\"AdU89hj5PJCFIXLHcyZLj0npOL8ieRz/gp6V/2lCKZs=\",\"GnjkhFB5iRjyVDlvp0F78sX/aSWSAMKo1Tr18sTYuh4=\",\"DT1MHrmCjIev7KjqEo0dUzdQz1Vca3DXCoUgzPFv6w==\",\"A68GL80cpxum3gykQ28aWgaYo/Sau+Ts89qg6i5NyEw=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"GtG6TybUAZJLJWV0FCVrWXZyhKaSiXulzVOn9TIgBfw=\",\"ETNpR0fSy0iQ9PWYJWTqxgGcpakJGzAtLBC4cpcEHV8=\",\"G0bEL/GqR1ly4m9VmogWQCQjT3s5IDn7KiFxvmMb2N4=\",\"GVSqCnnxSWjIFwAJKeLnRCYocQEfI42YYIbn2VdJNrQ=\",\"B6ztiY25mul5b8cZGhA7neTHfw4I7OpqpZOXT2UqxLo=\",\"GKWgmNkU9iIXJtQq2naDoWBeICF6CUicmy2Ew83Sw54=\",\"E+AM9Ks7HgKBZa+NQQGcogohrrQJJlkqGA+YBgg+taA=\",\"BHj3KTi1KOx53v4JIVtGMggB+3Ut3IjWOKSHkFYbTis=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"CP9DsO2iE0B3uW1+TMN6aHElSRCrTFikvMeMG8bOOTc=\",\"J9f6OrnEOLatHsWmDorZGq0C5NKQj/cZLlrAzr2R+Sg=\",\"HprIrnzytA1imZklG+UNl3E5EyamZN/CBvKr7I775W8=\",\"LWtWtISd6CtjbYHy6YR2u2w1y8iWITe2Fb/4b48mGXE=\",\"IecFZtL0u4co/bN0namaIUOg2Qu2wbDW0CElqh/mMJI=\",\"HAHAUN2bC47I5e4ersrBFxv2mo89R3637DpgWwENTqU=\",\"KC6N3nOg3HTuEIFqrMHboQwUIQnBSteVTre1bKJooW4=\",\"B2fPlrFgNaltGfzFftzZLnRtImz+hLczRUx/+aFtJcw=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"GJdLnyU7a7aB+C7Q8tPmtPcMqFhGi38b097RpYHsIdk=\",\"GBU/6JZqv8RQolIipqJ/YXX+hRmJd23NIRGlot6Zwto=\",\"AtoeLndVOUkML+LIJ+ZcAOOCpKXWxJqDdDgdOcYn82w=\",\"JghYm5zT9MErToMuBfxevctAPNZWCo1+zo0XrJTnngY=\",\"BbSwdO2xNm01vxwewUUaNs/zUbQHqNMNVjRxveSR8UY=\",\"CFbMWgC8N90CF5INpmxXZd6gZEVV41gi1/1GTZ6zgJY=\",\"ICHd4+0ZO9reRXydtat5nms/ymQGadL2KVtIUvVNRG4=\",\"EuN4XwXza7eXssnwPFpV+rUuiLBVC3FV1gE7cGV01Bs=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"EYCEx20TQLOYCt1N84eN9P/G6f4m8LXE4vlXnub+LBo=\",\"C52sroYjxRTGIshXU+97mU2RAqtGYg+VbCbpxi/lMFA=\",\"Da6m0YqCa7K6lyrhbcYhy4/fns1THuPJ+dC0AS2mdp8=\",\"CPKl32Q34lO1eZIfwyCLPBduWhjd4mek+Ft6+395zu0=\",\"BqkdfHXjT9Q9mqU7fSeT5NXXCl/sxf1WU7FiuiYxqmg=\",\"IHV54zw2ry0g11mZbDE/eNwzmHjAoonV21i2s9YGnFY=\",\"JVYlQM0SCEszksjLjNqV/8nC3W+KdQVM4WrPh7qHG58=\",\"u/R/7KYLk90FAe4PwpTCqCsQOBe0rPCvaXkYOvzchw==\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"HggUziI0U7JIBKGrTOOYFeNa7S/p91EOYoirudixVxE=\",\"GPmqJyHZWWM5muGNbZWm+Bt4tSjnUFVOsmE9bau9cqk=\",\"LqMpgirTAquIMcVZxkCA57pr9MmOoMr5zd2Sm7tYdaY=\",\"KZENhrwns4qTvKgGd6NkfAHLUmLtGc0MAIcpJaBGozg=\",\"AhwKBazkUBXqiV4B1jDOa3Qj88IR0m6LbvVNPfwGYKs=\",\"Al58RjBC9SDtL/jGi+ML3dvX6lzdepEiS8ajKj9cD8w=\",\"DfW352Yxl/kR4NzR/0I3/98IAjTpuSIBU4rn22tqfSE=\",\"CU0PzZWStHcdK5v7wr143v7ztsqSPGg4JlD51jzjfIU=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"JwNhEIln7QORpJ1LfNavm91UTovwSGWMT6s2qhJAcmM=\",\"GLv4nnyukwRMhHvqZUEBkU290WVkg+VOB64zKFeCGWE=\",\"BKpHoO3mTs36g1B6K4lHtLWHdY11I5Bx9rTT1md3vB4=\",\"GC0w7JiPyoA/997xRwwGqmpZb1ZxAYSQn9oX01TTzgI=\",\"IjwnFx5FaEbf/FnLGlPHYa/d+FWC5McOuv3fEOsfhEg=\",\"B9RtyXVUol7beOpNhixIvFoI6eoes2nFyMLgkDEUyRU=\",\"G/RzoumC5RlSO0htJklB2OMsu602K9v3NtesBMTSqWQ=\",\"Eid7F1v1TD8rClfrGJ53cUzyFjCs4fz0TTk5eq5bbaU=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"FcCiz/+sf+q4ahhQMfSJqfg+ieMzeoS1Hf5vu1f+sVs=\",\"K4MZnsWEGF3lIZD1pBXB+7nv1LuerkxOJ2Orz5k1nMw=\",\"KGAbmUCjEsZbAq3Mt2k372RdTkUclArUJBsrD0kl19o=\",\"Ghh7SHW+JKJCByngFpAblOwFZsimk2l4w/IejWEZlvc=\",\"EO0f1Eci0QvH5Egk5kl4025o1W3ipGWgIBuOMQZdXFc=\",\"LEtoZxealJ03epv9Pv5IRW9+cPAthZx4aEo1c0htwic=\",\"FcssF6q+z3qg9hZVqLs1p6/YfQ4grDj+IaB9p7OI37E=\",\"BN/wPHQhEaqz5h9BZqcz6HaZwf+oifzheTFuOffYRew=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"F7qsh06qqI3nDMktWnLgC+TsDl6Zuny6wrDZjOrTlKE=\",\"Hbozi0d5kZovsiupSaBQyFpzmD1epHUs1z9mT+BfYkc=\",\"HjPn/MQfMvkN5XcdaeWPRIYpDHuFa+zVzZZ9jnc59xk=\",\"EId6188GUqL/k5d9OGLj/7XYfQwEDwKk+YYSr6/JtgQ=\",\"EV02dYVv9Z68yREN77nWxw32r1M9Swh10OXuxDA1BZU=\",\"A9dLlhupATqHTnvNx4L0eNpgl1N1Sdt+avRwLKdJ2uU=\",\"JWNBHimGdQCo/Rjk66PJoreZLkTSY8KffgYAD3SIfN0=\",\"KFUBxODuGzw+axspFg1uwPGvTcLzakoeZUt7R4mXONc=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"IJGUSJyGiRsXnjMQOoHZacXHXpQdww5yKMBO2LpocE8=\",\"LHsoNct5wphSkmkAzBaLIxWq8DqJUy3Z/BYsL33a2EU=\",\"HfGBxCAwjFsL8A7iHBbySO3/aG6eg1hp0QItzUqKY1o=\",\"H/q9/+4kgdjMEjNQb3CNmsq8HXWLuZwykULIZu9MdHQ=\",\"CJVe1Vwr7AcCfkNVppSptq4dnVASZWOynYoHTqZVQPU=\",\"GrSySk23xXWEcYRus3UWPnWHeRQXy8NVts6Ttk/QHaI=\",\"JaNDnSg4rUWScLxjMWTzpoIV4RIX7vHWBez6ixgFxgk=\",\"BlJA1jF5roMBMpWoJR++F92YjKXIR2HMtqbssr+/AqY=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"DBqR3cGyQRO/h2ou+JXDMVzRsQnPpWm3nzFV7hKxxWQ=\",\"FG/o4oU5rjaukhBp9K+D9nXxtoOZ786xiYnKtf3Task=\",\"G6jDz6RkJUEuMHkAkJgNsTmBDv7Xvbp6OK33XhoNNkE=\",\"CDpYydiJt05mY2u4QY22JHJrDxN09Z6vtNJpuh7SNNg=\",\"K4EqdupSbOGN9gMhku8DNUGq+Z0cYYOaDt8DNhQqJfM=\",\"KV9tNfueV6UKXZE2AFOAMLqMCeAhwWqoY0SIzI7rpkU=\",\"HeaboH47n5DIfrZ7H2RmDHG+/lE4Bh2+u3UilgMlQuY=\",\"JHNPo2PlLGTuAWKoZXjKiZeW6JyqGjo1M7CWVmUgj1k=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"LV+2fv6T6DhvrAcf41Ir4drenb8dEDBBentR4xIhEfQ=\",\"GVIukij+rnRz4xf9eVigIaCwQqgbddptv3VouFevq3U=\",\"K8P28N8McwWv6D/Z7wtwjhKfvoifzkLLaVszspBHk0I=\",\"B4PlY17qDmI7uMQGkJ8Nt3rU+TAtSCi1EBXWUSgYaQ4=\",\"LWGyQ/AuIe2u1v0uSWnduVptDajbF9EVqaOw2IhbzKo=\",\"BV4aCfS9SAmobmf5knn8BsqJpEaN8eol12/grTbM6hI=\",\"F4ce7SKwzdLeYeVbpcn0432mPtA3ZCC7Hufwd6DXqF4=\",\"IP0K8TKbvdcNTYNdGMkV2YlWxfCkJSz7gcH+Av4TAJE=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"LluEDKj666bsNhPiLrewcdljPIPO9lntlrL2qPzGsmI=\",\"BfU4VwPt98SjiM5YWoH+fMkv9J6QC1YBhlo1LGHWsRE=\",\"Ieg6teldNpzNMMwcVc1YRMscx4/88Mi8kcnA2ZN6P6s=\",\"Cme37Zw3lGMGrFJVl/EnWzCl0ATKUCWMPZkihNkNck0=\",\"IU9S+fc6LC1UJclhBGEwPYOd/nGJFInDdsLqO12Giyc=\",\"JB4NJn99HYmWVpKc3r2FD3Cs4hbZrBAlOrcgv0DaDH4=\",\"IikVNHW3prKC4RCxDortH7wqBaNzUulU9A2FIF+9i+8=\",\"DzDQt82O8Q6JXN+rP6pPTBphpfTrpohjRUBhnIR4LS0=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"JlWJo0DHHUnhZg091D0YaUCBdti5EQrow2kHjej/eu8=\",\"G8rfhEvRouf09GSZHdZRufFWMMlJd9NevD6FgBJSrC4=\",\"DBErHFbqKI6FGMwDn+BQZJz0C3q5jej9vFbrfva8/d4=\",\"DwILnvda+N3VBc05R+EaBCcL4V2qy/p2+gTZAFKDqnc=\",\"CkJmAc6UFeZmrLuvKnzI73730HU42EsaU9okwZxgFog=\",\"EKGvZVA2FDgf4gAxI67pAIq5fWlzncRi5yqL4EWUYY4=\",\"LXkvn+XwrWWN3a3+OJPRWAEthLODe3QV4YgTFZWwYNI=\",\"LapC0E4LYvyzhpAxvzgsO5+KmPf1v3Qh0LY8JZj19l4=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"FEwDlRV6G/z7XMQYfycQlnhNvNv8tqKMMc6KBvkIwKw=\",\"GvjNug7MyDwWAZYiZnUnZF6Uyc5krdRBXff0BEYnegk=\",\"ITx6etYjfnIRUwwhCo1vRqJb7kM7reAQWR5q30L82QY=\",\"Ik8cokgDwBGa0ObEGmSWjgZKg/WCGXLypcnViV2k6kI=\",\"EJRNlf9aNpnv3eQerRM0STfjsbk7pzoVMSRspLmarSs=\",\"DLJQiwozlfq77uUobOXxg5wAbrvAnZT0dZJJI9gHnsI=\",\"KEoUsQB/9sXA+PfY0OSxn+LUpwlBA5EhNLD1Y6ZyrNE=\",\"K8C85D1Vv+Gifu1CaYDPkFWw29QujeUW53WAudmpBg8=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"KOmxiEpGGbOLb4o4Q2jDWLfyEPNBLESBomrilvc8XHI=\",\"ISPKHxGaNefU4bMj/SlC0S7QIMz/OnrWtlr5BFfwBhQ=\",\"BKr/sLoAj7moL8BwC+qrLOOe+olazcKAJS8B4xA1uK0=\",\"Hx4W+OySYcgkQ7mzHNkIAV4sLSMUYpoiY5rx834Qc9g=\",\"E0ko/16+XgGSFO+Te396KCSChdWDYT6ivt/Ga14q6SQ=\",\"CH/JnhHmPe7J1VBHrJgDDFek8JIoz6d0mj4cerXyEuc=\",\"CUKbzFLWxDgU31sH+hFviHUplQCjbveRtZKmTifMpIY=\",\"Imex36XSbm8KgLyLTAAm8CBL1P0Gx3JVRNd2A1TkAfQ=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"Fvs823bSHTRIyZiPQo0ZjI5aZAA1rCyv96p5ZLNP8d0=\",\"CA3Z0mOmaYR53wa8mPxkWUR4AothBH/5PEJbKbCS03w=\",\"Fl9PLTAqJO6l9Gq+7EqwPSHj0BOGUIXlFb68smhK80A=\",\"Coo/Or8o9FfGIEV4n9zTAvDfEEm27FIdsrfnLo2VFss=\",\"I0LxA1h6AFyXdXixKBA3j5AUuugxgJz3rVnvOu1Iquk=\",\"HRMI4xHnq4RuFYdpwSITAT7KN385YGGq2mIg8p6xt9g=\",\"JWOUmuq/qngr4H2tkD6/9ckTiTdht1o/hAKh4r6lqZg=\",\"DLNxiY2NLh9bvDLcIXgnBKc+QV4Mn2OHFXtIdGu/br4=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"EjHUDnxv5b1HAQ6+T2PRhjac226II67BlAk6C0y8aEU=\",\"AYlDaWpNpVF0cGglX1egQ3ug7DatflySy+2cSal3W5c=\",\"H6WPN4Fg3Ur0DjsBv+Mt/TTyzcpSeXPBlKU68wvEBnA=\",\"DJdlYe6t5TPFV5BBvPXoJy5K+V7+OvnlNyJQ/cWtiWY=\",\"DKz+6uGoNZrp/Pgx8xWkuMV21Xnq6GsbCYI2ViMdO/8=\",\"EJsGRymOrsNU5KFVMIGStfrPtYa8L+Y/BzzSIaIQb7Q=\",\"Bp1HRKyiidEjuqDmdUxSMiAtvN+t0O6NFN0Zp76jl4E=\",\"FWGV/iffI7gYT8WKMOGpuvy5zJ+pzgcRY6JtzPt8atA=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"IP7TWULL3IbfUaScomBVuyXiMqQkdu8GmXr4kRVg/BI=\",\"DPIDQ5V6VTRUI900UML9dAOfGoLGwCRG3WTEVp0xRx4=\",\"HhdxObBdvjilbED5GdwfBxJrrQMEn8QCXXe0vDTCXr8=\",\"FE0ZRKhJ/cKrqKsqQ2jVeRHpYU45VtkybKSTyDBQ6TI=\",\"Fi8I0wX+TxsKm7Gs8SI73jQFrsvyNWUIhBuF8RgMvB0=\",\"IdaIaFAqtZnHxfKlTWW+QO1crsFhOpiyqYxfgRdBXZc=\",\"CYStsMUmMZO+QCfGjG86bb9+Is8ZncQ1i1KWiwokh4k=\",\"KIPzqUCowQ9/NHqAEbDw1/bgpKgu/1aP/8dSQjXR5PM=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"DYmjQJk749O6B9L6hDLUEnMOjr8rv6y/k3jAxNPR5pI=\",\"EF5KEoNncL26skyF56Y1csd1Vv/6/I9VoOP25zg/ewI=\",\"BLCehRu227/9B4CvP5nLtwf16KBzgQsosbWXlMixF6g=\",\"LIAxkHwQ4d8r/dJYndUCoBKiKSIC5nlUCRylfSGQbUE=\",\"CIo2DPTF4m+t3LopHdJVOQar2C/ssP+v9PP1RPZy1wM=\",\"Dp6Ni6YnEuf5WEC1ZR8ykS6E8Ua71XxWbBeAhMuxVfg=\",\"A4+66n3XN8ZC7EFHWb3spCUNMdYBEUDn5F6GwSxvb+I=\",\"CW3qbg1kEd0MGOUWURsD2FBsSQHFLbwncsPUe9v0Yas=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"LWD7ZvsTOwUHtrQe1/vVJ4xLqfoGedKInalnLSHwcDc=\",\"JWf0RM/bv013mdW1DIxYLh0gOKEZabPrK2Cuuvse/Hs=\",\"JAHZQbT6/jMRvGzZ+wvvYq2bWecxwexOawyl4saFuyw=\",\"KHR3QVeSg4U+1OZSXacKQxJ2n3BA208JjrfZIU/I+uY=\",\"EQSJn94/Uwz5lQDyDE+51HnlEs1woV3vRCpOqSvLl0M=\",\"BN394bGqyzOXfUswINtRuDT2GXoYUF48z7N/qKOodkw=\",\"K/ppE9YsiuoEzMPlAikiDv47mvalaBlOzlbAZePKyKo=\",\"BcuRTse3JDbPJa3L0FUMLbPJwJqsVl1G+WrBVvpyqQ4=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"FF3Mion/2P3fTlu+N3o7dkmrb6rd9etYDO0+BCG3B3w=\",\"IfG3wWmgdE5JcYNGy9OQ2+Mof13jiXrNqvLku8Hz6As=\",\"DurjS16OSNK6a9BiyAPO0d0RZczl+PBXT/fK9Obq9rQ=\",\"KCcXDDCn9XChLzeqBDTgGkrtm1038YFQKdXeiaj/deI=\",\"DjKBYaKcA3avUmyABFl/vgGDKNbQyJUD6u429ZpM7oo=\",\"DWYX/ymslBp3n5B+dJYDyzZ3j+9mRLhoT6QAVcjZeMY=\",\"FpUG4Idwkv3vMhCcBk0lHE1qUCV6ucAyvXmAH6IwlLo=\",\"CMUWdAR54ahSKU6Mu8v4O01wlbaXWKqp8aNoAE3BdCo=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"KBvOxMvO+p4Yoayh3+rNf37FJ99d62wAL1Qe5MDyvNo=\",\"E+pYpqgr9D9tTCYZuH2gznYEELaLd/aUaF4/NP9HuGw=\",\"HtYEVpv1gcceQYDVmnjdSOIQMAasBFVm5EFiZWw2CAs=\",\"FdJdGfj7k8knLxDqUl54fHWPmMW8qITmMX7SGikqv28=\",\"FpZwEUOr9XlPNwoSL8YNr6TwwkHoYHmDIivHLR2NFDk=\",\"FHHJvqXYgGdv+1MlVIfBr1egR2t366ViBKSjeAsQm1A=\",\"HsGOlTkJ7m403L3eZP1q6LmYF//vSBFVGieSS3FMwA0=\",\"CJrZFcZescwWMyKd2X8Jii+G5+pE7m2U8/5fCGgsgH8=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"fjuyKl2PUXsStC1oq3B9gJzoNnHdmpMzE9JRiJqdVQ==\",\"FCtChct6xySZdd31nRd67tGpTgQSAC2DhhzgYePzhiE=\",\"JIOcb4+t4MLvHiSPZMTYHjJMqk70BSkWoxxdHaSE7EM=\",\"CsCHmshk3Hv0CVWj9KGc83hG/PqSia5ZyPjHwXTFpX4=\",\"BEgy6x60rEMZJAbetKN+ph4tEQRodi06MfAfPGwfggg=\",\"Kz+Uj7KJhgom6ZXRTG+KuiCJURx7pYoxDmy8tTPy3KI=\",\"EYv6fi0ThjAfGHwbHtovSMCgPeFeNwtb4PQxoLV0aB4=\",\"E5n7NSv854dNIuD8skVTuWq1m4U2TAw8mwE11JcMI0k=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"LyXQCJMA2h0obF78yc8i0JWvj2FbdsvuCbm6ZR1zcxE=\",\"CE6q96CwfPSZLH0FeQxCzHQqe+0CHEj2FLmI2Z8UHj0=\",\"DLtTUnrTTL08TVlQT6R8h+tb4HgVXlisPx5LP0XdHOw=\",\"FOjg2A0q9u/TzGB0HLwh9to6QuJCkyK8IJCXsdItJrQ=\",\"FJ3GBfOtOdS0cKEyGR0nOd8q0Z+3HgZ/bt4/naMXKSI=\",\"FTPN2k/jRvCj5TgXK41WNtO0tQIEfLJoAVsgiPErmJc=\",\"HaIatHUFse1DWBYPPNJKATMHGLuQG+7d6MyjeDmAXGI=\",\"Ew7uYinmNGCW4SG9pr04kquoXDY97aFq6MjvxrpyGxg=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"HQZpuzy4OthwKnaFVRCRjvMA3yQWzfBKgwYakVpvves=\",\"ET8PDbaZJnBVQX1JlGe3UC4jF5oMI3h7foEwlnyVCA0=\",\"KM1m9eIEZ5lAWpwUKCBw72b9QJUHlx/LrBYDJJm62mE=\",\"IwFz2BRjYtKMDMm8LHKmSvp3Qbd2U3JgF5MoIcHclQI=\",\"BLI96RHzodPzI2bDWn8pODfh5+goe4q95COys6uBwYc=\",\"DUvN1f9EFjf5d9um1SPvH2F4uiRc2nbkKakbDKmU2wQ=\",\"CTv7+qjzqHGGAwZjIc5IIZtVVY8z4PhkWpOkHm9NPi0=\",\"JOIeJfCz0OdUv9DpHmK1/NIy51arNMvta0q3Cd/KVRo=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"FGmQ//DhC41wpEEfV/nnSgPSrAEnshZAC4LIxkQDgwM=\",\"Hdrvq6d7zZxboGcbCjSkyze3xom9yhh9kCEvGIukqHw=\",\"Cnw36Oqyfl7c/D1mgrAmfj2SUP5HCYCVb14+WZPdqq8=\",\"LYH2mEtn18x0s1qp1nOHjwXVFwhYEhkHmN0kpRC41rU=\",\"B8RkWOReFc4TOLvpjtPAcmZk2K4Mllvw/HmuMa0Eo0k=\",\"Ft2DVnxyidjqDmLfhiDfdPPJh9XxYrawokqwmDe10to=\",\"IYGbnXjvXgXFNag+fXCfgPOrXo1zMUYTkBXsTjSynxs=\",\"I0Cink5NTpIPOaajIUm1Qwf5GKLheebHKIzQKDTA5Ew=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"HO14QRiqyYgMn7vuKJckU7NqvD2WeyDpsKiGr4bWQwU=\",\"I3hIxrDIf3lLMMrVo86/4sbJFz96JY9OoTklIzij6lo=\",\"J8Y2qpVnVtnuBLNVq+L62NcDsXIfz3Oxend1GBPIq7Q=\",\"G0A1g4ZpjiHUO9OVDAD4HWrjQO/5rAghohP4+r0ULQk=\",\"BpVIe5WxX+2nGIq5vYBy8O382uot++BllvjAN79SFFs=\",\"HfM2gxtnRcjyKoDCUroSsk4rsef9NhXMlhRdiY2/MiA=\",\"Jkt6ZvzUGZXBnwIbcfyxq9WZhsVTd6gq2S55oRZeWPU=\",\"II3vshItUyJKrNqYaCUMo7OfeLE8nRUKFNdaiGoaQrw=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"Fif+Ef6SylsIQc2ASiERUcpsDScGsqF+wXp/0iSkihM=\",\"DUg7gqHtDWeI7HPCV8rLqXOOrnIy42XfESsVqTRZYn4=\",\"JMSQYSoWNrQ/kCRZhRr7PPw31x216f/SRxFtXL00+fw=\",\"Ly0IyMq3SLBWMHBmFBg31c8ZUQRFmpEIR2hUg0bIWT8=\",\"BC06T4fXgjJrDAl6A94BrBaYlUyPMAr3CPp5qS6EeQ8=\",\"KwZPs/q+nesVk9JT7MehL8+uMZPo9+FuxWOHb5Lkxiw=\",\"IrgGDYvSlcOiAWVe84kaSB4hdIVU3LdhPObApTJijlo=\",\"FSYUj4XOYQZnqpavIAWfCwLIqdTUY7J/BxHbcqVFUDo=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"EtKkLSVYdb1nHTduSZzXk5PbSMQU+WfVM4j2C04YCYY=\",\"ItDyfGdntkrfLrCe1ZXi8sIRo1BKjeZqwBmRyBwOJmk=\",\"H7zfPKby4HObVxJIqamU6pEzddsGXtJVteyj/eWH3JE=\",\"BAK3ZA0Y/qwMcAy+oNj1J6fD+0ShEMTXz/Id6umnDkA=\",\"J/bHbxtRnnHDiI8eznzOTg+Z8jHdzMd5ijGw3uDGggY=\",\"L+kIzSCGmcnY47DAn1wP1YcW0OtQAXqn0S3wi1PZY/8=\",\"GSKlmsg8Highr8zxYQql+ws8+Os/4/SVe6xgTBd/z/w=\",\"Em/FYJ2zyyVKBZGQNLin+aD4XsWrveb4UGhgclDqCsA=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"KNs14XuzHlvpVNafW/j2g4ZRu29cgPdQtrcBdkO2wow=\",\"Jt1oQogBUGVyjF4JRUU1oz4VN3Ydh0ECvU7NK69As4Q=\",\"GJXTOjEr7MFwkORd90mBtPxLIg06qjRsfoSFMRyrFZ0=\",\"KL/yXrDypcbQB6kqfE2IvZwSxWItDsxaUJxAQEi3tao=\",\"EwE28Hx+CazUlVbzpr8HOcnvwKG+c4RTr2ezHoRcl24=\",\"JZxFV2HmtkINrfPWtk62VJP5ifs+VpjnMHptYHVxTt4=\",\"HJrEZPsIgo0CAGx1Kesej0Xu9UQF7Sz6oTO9aX9hiSk=\",\"Bgq+ZSB+/Q/aeyRxnTUBj3YH3XMuccBQdxSPPQRt0YA=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"KkHzR7X27r6JaWZwcZJpBaPm5SG4WokAbsL1AO9CsAA=\",\"F4QPo6GAF3cxvONA/+taO2pouU4/hwUB54ftxalNtjs=\",\"Fh7JTD9iT5KOrbDi8s9rFkMPumgKWlBZDYkAWmiNmxg=\",\"Iti+FxtFcftbdzw6VI+7KGsG4nAc6Zt2MIZuG8puLMU=\",\"BSRkycetFFJTgKrqmwbnbwPbjt0iD5CwOp/u8v7PuXg=\",\"C97oOyDZH/mgQE2LBZOHnJD3vlqVoiyOGxV9ksPPR0Y=\",\"LYQjW09OBCYtjyRhI7jmMa1RpOEFH0HxyJzEK2FxcwI=\",\"A9a2L4FrxLRk4pccxqfBpYXlGSZsRiexNnznljz5PYY=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"Fsr/b8wWUWiz7ZWNOqyNCfmPZwvbuEfsDpCDoCLSdpI=\",\"LNS+qsWcUwa/du9+Bsga3/beS+5zDNRnbpZttF/AZ9Q=\",\"GxGr2O5zaDD/7aN4L8eoJiPsxa+pLA7J7uxYF3zoYIs=\",\"LIDTQw5kv4UMnhCiL2t4H9UTryDUcFQ1vIcOyMvpPO4=\",\"LS8g0uwOUu7J/C0OSf73okVKp3pQVev8TURJ6Pg70BU=\",\"HlHFWo16BL5O2uT33+YTfpY3DuKk7UWexSSxneZG4LA=\",\"E9QyevqAnibI+X4267W+HTmS7HLUWXYLvSVll5Bzj0M=\",\"F2Ii9H2MD/noqWeSA3Z5Pb253MOnm0T9JeH0OnVea4E=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"BRk8vLWXE8eAEu3pPbgo5pM2oZf90wxrfQOxz83Wrfw=\",\"K75mD9NPasPyVFy6n3F9Lq6fjGAkKFFlf4ZhUEpFfGk=\",\"H+WcPSck9BWEg0BubNYqr6EhxFHxPkirPIV7IpMzPDs=\",\"JJyJP53iCGAd5FyXaeutBx64ZFJAA63QveMf739Pkac=\",\"DCDEoSu9dy4Nu5KbabJHUdomsPqGOQBf94aiWsGl/pY=\",\"GgdQ+x0nvLMmzrOjBlpIfPfVE9iVTzHfsXT8Xtlc5Vs=\",\"FtQMC6enqiMu6pl9RexPBWf7aBRneyYqrfrvyR1AnK0=\",\"AlzPhg/HI3zIchqvHHFxkNtAzNZb9l0Qixb4Uc68pzY=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"GiWxprgZJulo//+mOXnJAMHoJFLJhq5ZnvmRuiFOb2c=\",\"KzRLu1BADqdhUb0LaMMTmVXxAccB0yvv3c/sHKct8l4=\",\"EETmmvWU7KX5yn7ijMONFh0BA3/iI0EuLxCDi7n/0eU=\",\"EUX294OvfR4O4ziPEHzMJ2CbuDFLziewPb+NAoQ6ssc=\",\"IO1wCaYJOxYAIDGLC7+8mp0U3mSjqiWTbd/w/+OjvEs=\",\"JMxe1P+dhPzpXBUI4ceFL+YKbe9ZL0I7t5wikye+dic=\",\"H8MbDmfN+e+pwMMSr+VLUVitoVEXGcdpU1h7dy8cgww=\",\"H6+ZcDLLutwMbTD8gE0Gj67MvffMkBVTlbc54BcIElk=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"EZfEAuXwpJyPm5pBr2+80BPPmt/oZGE8G97LYgHZZR4=\",\"AwJdaYRi9M8jx9TYo+7Eqo4aIYSkMCASLbZTr8bQ3rQ=\",\"Ds0dQC+vo2AgUqtYb4BOwV8ZEFQvNcYI63okfVqWDMk=\",\"MAIWGdDAtAK0KdTpYsw8Ki0AxiwTEUT3s9f4rK5pdbg=\",\"K80F6Im/D82dxPX68hxQbN4VwxaqykdyTnG60M80sn0=\",\"G4kLQJengZALQNnB/6BqXozQWuj+UuBA2w5whcpGtGA=\",\"CAgbU6l07iZDELJ5RoCTIYzV5e3sG32mshqzViIkLkg=\",\"5mMujsl2zvylsWTmwHq0CsYR/HI+jYoUiZpM9L47Kg==\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"Bjo/jeqdAkpvaoUezbIb/7/iWawX9nk8kec4I6gvT3Y=\",\"I7LG7Jr10BiOdbqrmZD2Y/jpKbzayWzAnEwGJidGkqA=\",\"CaQcBnMP5T05XGAhE/Fgf74BQlGQ1Q1W6fIVZYrRKMw=\",\"FlcQSPqSAkqTRaD/7MFZ52YCRVpxvH6cnAHcUNiqHWw=\",\"Klp+dtx2rXiHiz07THSZXizne8Em5NF9tQcWGwSerfY=\",\"CiNzjhKcEbKF2BwcAeP4eYnIdgByfnWTr0Vgf5j7GOs=\",\"LOjW7q9NbHygkixHOOgd+6In6Y/D7STnaW6+nCcyof8=\",\"Ai47+xPRA2jO5RdfXioswgXSgCHK9fsomN4jiRIxeKU=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"BmxD5xkDxbdO6OkOwwodjL/32MhdPHuZWpdgNu74xLc=\",\"L+XfzckzXwwN09CPTng6X/bC5vt+KSiECCHm2o2RVwo=\",\"mszOAyV/lnokwRznGPIRZ9nXGhy2Ck9Q0CKEGEKDAA==\",\"Ik4qhTFrZ78txkVJxQVyGnhYQ4oA55P+drlhv7+2cpE=\",\"KfFEe0USj1wc2xKjNFCeCpkcDSyTYKXPwor0IML//+A=\",\"EwGuVmW9PofLZH9Wbrzy8utb7EslencGGhXcx7izSr8=\",\"D8ZZnqlX4C9pscpYXHE1QlpoJYZ9DN0rBgGfPJOYuk8=\",\"Ai6RowqUW5YL2H17DYKQ3NX1scqjOcQa7zI74bqcck4=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"HHw1nCbqtlWqRp4PmozD2MeoFJup6brsqSM7ft3dHSQ=\",\"Hd9lGl05a2gIKOrqHyUmJdsZiFBHZetK6uMnShnO8XU=\",\"CrSG4+c39AiY0/3WurCSE8AFbC4JCpCsx1RXRzkVk4U=\",\"DQuBe4mVkT493Qi1dpUb1HtF9TZzn8nMeC52n9F+ACg=\",\"E0cavTolFglHkoN2/Ned1apYZy+DgnReOgQMKstGSXQ=\",\"B7/2cuUP8fIClrGDjlJwIpp0dxENmn+1ZYA3HuS6OMQ=\",\"I/ke8bgYLoDIoPVMOjWtUcuaO7YbB7PjQ4bxb39LMr0=\",\"FsOQs/3wnGxC5QtmVXUyzFmYy1qMFURtMYE+e3BgfsU=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"GXbSGu5095xg1E5GAppbBPwD6/ub2wmgtdu4n2d80pY=\",\"BW583Ai/+Ni8EtxyrzyEhY3eaJGc2ZG99RNlbrCgz7I=\",\"IreZLXwO00mqt1Md4vEtpP3PlhIVugbyt1d/XUK/qF4=\",\"EPl/zHV6DW0NTi1YXqWWiz+rqdZFjRa9Nm0IGrZa6Vo=\",\"IbwEbD1ye69uZbVoZTo5iu7YyVtzVn/so4hKBRrAAaI=\",\"DnV/0LdyGadxcj4HHJiWBi7tuz2gXNol056tPN9zhJE=\",\"HtU2xJf/NvYS8ybz0D6X0wq/kWBbpoavNuoEwZzOT0o=\",\"JJE0Ds/tP5jtb9VmA0JA5koI5aOaRox4sx5HNKZ5vWc=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"FEtzxvNhpMIyZ0oIYWs2wz971mfcruw1Uwouj8tmED8=\",\"skQUNUCiSIQLpfoWHL+y+y2rlzMgcwQsv4qTIUTSew==\",\"C1vt2BIlYMr1qdvWn4L3Q5VDu605fXz7Tvd4L2TqThI=\",\"E4bH6IxcC/iAso6yc14iHCqI5/hxyl1yDJm0KHxSimc=\",\"J3FkzcUYdhOwptZFC1bKv8go8g3X0HYR7cy/w9OBybo=\",\"AWvJfuGsSxzqj5bnMd+mECEq7EoZMBW5Sw8qFlfUHxM=\",\"CzQeQ2HzFzSvmVHCCmqs4Io9yA9XN5rdlpO1awR7NIA=\",\"JjoGC6Sf5IYt+ZeZQmHmZcBAZkLGacMt7krnoVP+Hb8=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"DfgRtwyrMsCtCqy1dv2VsjQk02hteeNv7v8h0aoEfrg=\",\"r66XnkHAz31mK0zwnpPcpwwJRcZ1nE+NLJNaYITs7Q==\",\"Ia4S8duxUsMyE+/pzbYERXSz34I2vpI0ETFDUVIRXl8=\",\"Jy/YlVp1JKCfd8KM6J1YyvfYg/nkUDrWo3wOq2vL5Gg=\",\"A3Esq/qw9vPSOse+uBUiaIP0CdYNeYJCxtXp2ugXj6Y=\",\"FbxB10axSIW6k9x9AFlOovF0s7PbwazXdDNUBcGLFU8=\",\"Cd3tbXXDN1S+HB69Lb7Qd8Hxy4CTjweYuy4lsFSlKWI=\",\"HZ/X8nPhQeSNeuglptd1jjUdgMTtUBOaZZ1S7f9g0ic=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"yiy/7WJmcdbg8uPRtrLrtekEjC8ScyI8NP5ZlCnh8g==\",\"Hpuy76wAQBSFgWZxDaXXZKs2uA5Ol1ANeE/lzCMm/KE=\",\"I/ivgbd9LwbVZusNkJbEsmf0mPkrrGnWItvthbyKito=\",\"EVRoEWQpZccbOGXYMICbf0AuAtGYDDIZxLvkjovTeBE=\",\"K4csQ0MgrFIaweFIZ8BdiGkt5u4GP0AsKMugKt6vnFE=\",\"H4Do0JoE/7IGE82D6jX8FZP5pdjbbIRtgNylPNS6WpQ=\",\"EXxOFwcVZbUaK5eQjzdcoBlN1ZXp6HPowKFYtZaErHA=\",\"FNqUub462zxffNBN1cWPY+dCRdWh5vzl3j0JPUdvCKQ=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"KsliZHcd1bF2IHjVEy2yP+uw0u2xnHskhI1LZU6c5nA=\",\"BaI+i+X+jgGxHQx6HchckJYCYEsV1iDHpR4rAX3WODA=\",\"FyYjZ209OLLGi6KzDBLFgY2HTYOphHjL7AsdJ/Xdfs4=\",\"C2Mu4ehzDVCWkVgIBbiQNxyi1RvOCD+u0WFahFSB3ns=\",\"KiIO9Wbk1UNz4aCVIxwQkFovXnLt0rYlm0bqRXSSA84=\",\"Lr9DQO4FRg2CmNUiYLTrrjiTV72FfLY4xBsnCMwzPcg=\",\"J+hzsXUJFjZtLnkG/+T0Lm3XVFv1NK3HOgK3QQ9/gnU=\",\"HucMtRrW2kUTzkL/IA5G36OZkqkER/EAR2VxHz9a1S4=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"ECEoLvyEZp5KmJVuMK0AQ8bBnf65jW0UvwJ7z6VV+K8=\",\"HxwuQkverdJ3Fi1w+us5jWYSJUFKl1pZvmE+RydLc8M=\",\"GnHkFavFzNW/JoEwBw6JseYZgc1U9uWGS4zE4dULshs=\",\"KXmYIOKLucCnvQosbWEF5ckfj4iygj2nxXglBnIU27Y=\",\"AXN3ywGVuVtHNgbIGmvVyAeyKHCvpssjChBI6VFeMds=\",\"L3PPnyLgQx1ee72Qfr64VTtBF/8fxQ0J/Ht1k170ElE=\",\"Gc1X53qZMoJgvTH7mT57s/0n/cIbIYf+OkusCtZkcZw=\",\"DV/xtrXzPW1WjZGX0N9A0Hq+3iCuOpSgKSwBwwQBJxM=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"JsdhXgS+I1WvB3P8DgJfhrqrX1nYNLoAXgmdlTMdYbA=\",\"Fw6mcyxtGyzjJ58tSZCSb7jSeeSGTZZs5u5sMZc5wvU=\",\"L4cCaaUG81H7C5qdZ3utG7xearQP8K/Bdy8Cujlf3Iw=\",\"EZhnkKHMI5ySvUuNihubqnbh5J+Efxbt5fY5iqg+l8I=\",\"JRDC5aOc1sJD/1kGIZQbIh0qLFp57W5buQ6xAIIZI58=\",\"G6XAWoKGCbk6fhUTOGma8LiwqpbT1cyefTeFMz+gPc0=\",\"CGSMA70DtfTcOGisHEc2PZABC5yxmTNVT8dYa5e1+9o=\",\"adDHLFiAYY9mrVjWXwnl/EiGl8cdkhNb4pH1XUlstw==\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"CRrLNKoNA6/Q6kfB1WllqQUbBe6/+a9x4HxFVBhPRio=\",\"Kz916MpxGHdtlnb+BYVl65m26ZvSNQWo/vySfhfPUzY=\",\"FtmugsAHP+Hc81OEwNzodJSyQA+QJ84eZO5ECkOfy6o=\",\"KhG+zZMz60jzAnrY88JPoaDqZxoQICeK2EyGPDIugFc=\",\"DVab4pXV5EzP/Z07qEqvagwXjoY5aJqmxXIU8ApqnZA=\",\"CmYCXkUED9ResTbszGPi1/0jeq6bYuIzCqqgu0Tb70g=\",\"LNpoI0x+Itj9cl2VLTxSm2mXto3AIGX2oEe2yr3SnkI=\",\"H5qz6AKa/HL1avAs7VprFF68gURO0S6Cx+pUfprSNlA=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"GKLjK7aSd+D16CwqYKAIs9tcrzxTpmkhXAs0k7c8cTg=\",\"IkxPLpi0+hDU3cg/Jq2kYeW09BL5Sh6xU75wdHB0b78=\",\"GyqHh+lU2YGt0bEjpvbBAKYJ6BNcB4Gsmh5+MmxLD04=\",\"LaKIw08y2G1d/AstyYkQkdOW023p9wWJt77udpoFhiI=\",\"LiTTUbDQ6U8+D4PrYPLUdri2TctHZ0KQ6Hsn7afyAYA=\",\"FK8Bb52i+YLoKuwf9u6AlEXbLG2FOC+VlQijGDDc6dc=\",\"CRrqyb3pzmSlTLrVIwMhgMITW1HsRUfrzaCIJLyc354=\",\"DKoH6sYtnwfBf2P3SbcEfqoa3al/VxbXbyOv/W2EXdM=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"BVTwbjGxZNnXraPgHEu/RS/cysEhynh7CK1Q3Sko7UI=\",\"C/j413ArHogwvxJtxCAVimJDWQZ6D2OFBoOQsB0XZgE=\",\"FgTRgbr0iNzk+Zv2PAZe2TTuKfBkmvTcyawqKIfoaQw=\",\"CslR4pRPdTLU3c5y0xyOkcB5XN+rgt8zjxct2b/9rkM=\",\"JNU9n2ZTSMEr3DQlwrg+JPvqO2awydEZFG7V1aHR6fM=\",\"HuAaiafrxrjpPyrC5guZCePj2FWFLg4ROnKhGPVuLaM=\",\"K3jDFxo8jsYjG7fCCOW3wskKhZVqfyofdjy2yIMFmTg=\",\"B8oeMG2QeHRhaW/H5KOThxIxJJQym+dsjitALMDWF+E=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"H+vCX4iquSF5rDzv7qZj9RVi9vxjG7I2wE9e+FtGR4Q=\",\"GxsGXrYNvTmjTalEFP36RBWTOmvbpcLeRwrYzO8bKP0=\",\"YPzr0kzAhQOsT4DA/7h9CJjzS9zkFCDoTZQbX301Kg==\",\"KnsW0oJEc1embYP8Wq+rfT7byz8BEF8ZOVTF7Ulq4WU=\",\"CsOfWedrnilu9TkhrgQ2qwEhdJP5SL9uyhKxHORmeLU=\",\"CQs4qq4d8Yc3hKiWbx9itou9k9NLD0xjfiCPmurt/CY=\",\"G6YBuvgTyy1A7VZ0dHuePVdgFDUB4PIeMafdRLcTXrg=\",\"F2lexiBPEAWa5cpywTMryILLe04WGszRup73YLc2XV0=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"q1kwoGu2uaeOZk3FMI2gtk0eCebGn6WDvHNyRcWkaQ==\",\"FquaXeSL8In7pgDccNJ5DODo95wUMFZoAvl/7kO8Tis=\",\"B1331c23zMF1Ri361zknv1pfRl4VrSZ5MMXshG9Crl4=\",\"I+SnvnTQ8JMCeVha6qQytcKKSish45kKpFtQkvCNSO0=\",\"KYeVqK+XuLPTeCeeYLJ2uVIn5m104txmz/ocSVr5jCU=\",\"Ez0UVbbqJ49KzZHGWQa/dfLJDkHNvvwnIbHpatxe7ac=\",\"JLcirxlnzdrGoXRbcaynusctQ27UZOK4zlWqKtX/NQI=\",\"J2y25Zz0oG/2d1pTeksExrQngMnJilH/Y0gEsjrPrCs=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"EESw7Ws5CWwP9NKSwYYyyQnRUZFJE5sc0ZLeAUhdzj4=\",\"LckYq///zus0yxeoy1MviJ196pjprSaG744wk27NsDo=\",\"KlAwk37FaQ0JCtiz2JdUHs0YfS7hJvrFvmooD71KpGU=\",\"AWlhwQX4WSUBDg/dRF7oQNvTNwqrkzzPy25LJKiCYDc=\",\"FyYtoPjkG2xCcH37q+wdn3ns390loywqZA08Wko+h3A=\",\"BZk1kDoTXP/HxejLBt56CtvG/k9msHp0Fy62WVHGo0U=\",\"HqIii8Xwna36vwJePRnbPMpORI5g8pc2BdJVmiezv/g=\",\"HjXEc38Z3i3r03YN3IHh9YV6AcQshvTiZLoyP0Fl1e0=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"BZWIdc+xcJEFin4py/4g0NJC7N+9NjUnnNHgw6EUTdg=\",\"Gf0WWydBMp3BjSpbA9e1jrPc3ywrCHBzGpJDhxOQM90=\",\"Ec6jdThoASA8YVd1BM3GhJNxbQI9EWNW3vmtmCW+WIc=\",\"LpEUCCMa2Dq0DkTijuCwF6gvfggKDUvBtCxS6SBe0To=\",\"CdPwjB0s1N45O3A6fdlN8FQMkbWbKI32wa2LoOUfF5o=\",\"DYusksEoB6P7SyDsEeCDqIuVMHDAjBrpvijIDN2ymlA=\",\"IoKbd0SRwOOt2OfS3oCWy1WhAJrpzpg7gMFJcrxouE4=\",\"KuyRqHoXMfay9TSVWu89Ccp+LuLb216aDRXbIyVXxiE=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"KB7FA1UuZ3j7r9cnCVHP7xU/z+ygUXQQ5JXGK4FlX54=\",\"CYoxg/LuGJc5Q4VsKODc60OSrxR8qLUo6+6XV3F4vPE=\",\"B5SnjlG1GvB4CLZD7Te60x5tbGjl7zFx3NBt5ZjGwp4=\",\"IUoZNIzXzIsfmFKH5jfnmHo77fojP5ja6XdNqupC/Ok=\",\"EwrMWElUqQSFl72mOVvSW6AvzlYQKSjOp9Wm9SBoPKQ=\",\"AdCeEidDSkvPctjpH1QZ/9baISodHMsqUbA+gKolgkM=\",\"EnOX8rFWugDYOEfwPdJCAH+vMmJx0OLNT23ITJYbGaY=\",\"CXGj03PTXbjxgeDXsmwzz/F+Uz6PVg2ERpT4U+cZfkc=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"JByLzEY6yW48HMJAzoPETtz5x4HiWKLa0J0ZdtncbdY=\",\"GgtIm68KGCWZ9FiJeqNA5XmG3N57/TRziFEJKnWubg4=\",\"ECyIbOY4Enb+UtFcUdvVcelJBKjsTURF1FfVlkQuRD4=\",\"KJ+KRtZ5JpHKrADNQ93nSUDxIsDlrCAliDScLu5HP2s=\",\"LtFyESMkLDPyP4CfbkMVEVlMELBTOv3jMEumKvxV9ew=\",\"DHMKm+t7ZPCQo5kpr0kBkA53Kw+BcJitrOKHzCDdnoQ=\",\"BIDrL0hSH0b1BJ+NnWgtb0Bg/2xBkLKiLEDCfQdUuRI=\",\"Ih0wu8y7Obwj/+LIVxqM0XY81I3m3+IdfY8oBdseUGY=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"Ai7/C61Uz0+P2p4Hv9rjZxNSd1bP8lWqSBtzC9KGzJA=\",\"IgxvTCPsknLq+1IgVUlKGvTeb+dFaznF24UeEpm3qG4=\",\"GNZrQ/0BqcyI3RSxtdbA0jsprCh3X/YNPM82A53gljo=\",\"H2KQFTfBxW9nH6u7T8Mfp0PzI2wm+fXJjsvzMu2oF98=\",\"EwvuzmKUUSAKPeIuq0xFu1kqrWZ/n8ZymEKXHUqAL8w=\",\"JEEayyycSBxZrcQbxU/bD6xljtbgs2Ns2t/RLDhvjJg=\",\"I3AFmSOTijVSgZFVqLOBb7kMveRYcfbBIsGQon5/3EM=\",\"IXzLgjWCv37b9KamRpLjeSjysC15tDd1q/MEUA3S2kY=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"Divl0/nuc1V6HEIf5Cyym9+PSlhnmmFJa/ilpPm7o74=\",\"J2OdfkYXMvO66xchA94rxKJnCGI5GXg/5Ud0FTvbWb8=\",\"FZwAW2YMf7NVHL9iSq3OwEfOcmJWc8hmxfson4yGX/8=\",\"Ew04c0tUnoM7UMVQqQWAxTJIu5ZzHAkhrWNzMW39qow=\",\"E+5K/RQzRgK2eRp7j0nE9JedSFuNGxEZy0oqfDGnTzk=\",\"LSZHt0xjV56BpicK/HPmNuWImWdFrASZ2+tqfPgKiJ4=\",\"G4hAhvo8QXO+D9XLHIZsh+D5rkw9nx499jDLTC+lmvU=\",\"Iokyi121srLQDnb/eIFWlud+sZrNy2yEJ55l/M4p0V0=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"C70pMwDHD2Esj1t7zGxBBiRtL3E98Cd0opdCwx7+tK4=\",\"J44ok/u11ZD+YjZS5QCG1YqxjTAVpZ1qYWArQJJS7Cs=\",\"L8xB9z3wyDWwtRTL3Uaa8eK0lPBSadFaY0OvNGaLGMk=\",\"A3gJf1dSVnS5YdQqL1epN8H+yrpMZzvc40UFDZgbj+A=\",\"FaZyfm8YGl2nlc4XPxiJ4H8SiS4T+InE+PbHFyWrn2I=\",\"Htw6WGc9NkulkGw7Of9/ZUxdQvT/lObnXSxQCEKEZHc=\",\"Aa7dvnQ8h+wQ/kR6XQirXHODbrIU75WgjOkRMbjhp/g=\",\"KG5URFbxFM5gnWuAWzEGSrZUglhWmckbmz6Dp1yjhrM=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"FHfoja+TSOpflcsIQm9ChcZUqJeixIlTMwUv4s26NMs=\",\"DJkYu9CJvCbJN64uCpKh2Mh89EgLBV5DgxpeajrL5bU=\",\"KDwk977feJ8xRlaCNH/4a0wPu3+arL5WMAIbQVMveTE=\",\"Cx5fDKaLr68CZDikaCpVwd9dOHxMXz4RHq0xY+tbJ1Q=\",\"LZ2h3yHxTOQB/4S5n7oHMRqdo81+/CAGlatVsSM7kEM=\",\"C7YeUN3Agh8MA7O+2UdvWAoCFXtqaaF/KvsO/18eKjc=\",\"IdwTWPYv89wkz8iW/fuuiLAHQyPfx7NtaA7bqJxHDks=\",\"DcdYaLb35uycJiIWN+t4m55MK4ks6BtSfH2gVifsLcg=\",\"JR5/35lZEIAICwrxM7nkNp8i5XrOPNf2T8b9vPONfaE=\",\"CGBuKKzYsu5MI6dXiG1+meQH0Xelj7MbQQ6tf74e8nI=\",\"L3DTeVE85FgjGo7mswKby7tIYO9IwQTdz/5lYD2BWS0=\",\"FTFbo4ueTHpkoIRJhee0XbOersTGO0kM7PsZ8C4QJmk=\",\"KhUp5LHKDO6XzeWK8VNsSCP35Vi9wT93Tk7z7IRUZ1s=\",\"KnC58dS7zNvAPhfB0dzbAgUpA9xmCeppafZhsut0yDk=\",\"L2mnGY4fvMfepDJlMGo37VW5G/9lKtaapPqEeJcNQB0=\",\"DD8FCmv1rxUZgeVePhopoTw/+kVQvSUU8a/Wxfch+DA=\",\"KiDjpKDlfZL5fJ1hhsbD6nxeVcIBRiWb4veMLMwuNZU=\"],[\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"b6xhoTxxOaN2l6ZX+v2cEmEfGWtgqrI0Lrboad5waQ==\",\"J7S06iq3C7GnkbQ8BXEynubkTaSA2PC/7U60MSW9/cQ=\",\"D84lMcDdmxkGUT2iHMZEJhEiL4wFtbtc7QxdOSobQlQ=\",\"AieK+6iIsHxlm31TfvTy2knwPkLm/U9rqQlmsr2JKR8=\",\"BFaowBvNzJG9qAt8l/fpAZAJFjvCYTRGpApJ+6PHD/E=\",\"AuTEa48+vklBczTKdvPa14LLFdQL1PwUPfmTeq5f3Zw=\",\"LBPw98QhyWtHdD3wW6CoTTAoI6cvoBnCUcxlO/n86Ms=\",\"BXtrxAXFrX9tulVhme+tML8zOAz0v3TsIyFO3RI2dqM=\",\"LRJ8ejRs38yCIHbI32eetc9r0Lah//cPdT8TF6yq+K8=\",\"Gk3GlZ1l/aYEdTKld5ChQmSZZy1nsQ6jYGA7zavaBuE=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"GrU5JCuxbLLKSYS8ggAtB8b8Kb0NmnHjSGaexPkJ5Wc=\",\"FEvYtLolzrvMRMCEeET12UXjie+2HOvO2Kx3QBBOLak=\",\"CDJRBtr2knoYLE2D4LvgOf05DiUHo1l0epjTW0G/Vw==\",\"FGnFNlwTugyxCxTxCdaJProyOXOelw68ULY6mHDaDt4=\",\"ER6Cvx+z1EWIKcsdhStm98LOQHntIQyIN02suIxpwlI=\",\"K9Z3gFnCH41d8+glRkMZuo2fD9eyvcRSWseIBhAx6rU=\",\"IS08xsIBLJIv2Tcva+WKoFGMOSqeJTOAcUAdqiZ+NsA=\",\"JnVH8LAMMuhZV6Ql3QWWGgJiasebLu5BevDEUGRv+Zw=\",\"FfEBLrGKMsaaw5JpbMl0Uw9xEQmhl1AbQ9m0nERdnb8=\",\"JOWRZzjv4gtVSW467LypI5BjRYwsVi88DCrUXsuaDCc=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"BTfp1h4yqRrJgeVEKDeUKDPv7UbCW0AJ1mIsHVzWcig=\",\"JAmGdnQCHBPCbbEtxGhyWMinuMOeqeXw5TjJpdedALE=\",\"Et0K0Lva1yGiu3lfS1TgiiHk5QQ+MLsf3x42m0Wru4o=\",\"GU0okgh/FIVYDb2dsEc0P3PXF0HLHWeSZNDxXyIBGhc=\",\"zh8wcFdypRty6v/jB/c8WdFs7FBeKKBjUv7ISXOYtg==\",\"C0xCv9iy7uQinca0tq6TS2iCpWDcCwVpUs6pXgToTOg=\",\"KDEnT/pJNhyprQ82h/H9hA20OxP8S9dH/LzOh37Xj+w=\",\"EcP6rqV81TL5UvVtrEKo0pxyyNGylFnsIY1SgMN04UE=\",\"DQFECv5jwotYICFaCggv4paudJo+5hFpZ9RsS51Zt34=\",\"J/13mUN1WBZbhmwbiXYqC5S/fbiGsVjOYt0roB3G/Ug=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"KqWi9D4PS7i1IEH2NeyBDn+9glSNxyJgW/LBXnsuBE4=\",\"EJ4X+tNjaP2TkXqcSRmCCshiDFuqZNgT9CDyXw6XoIc=\",\"HGF4oSwtT8gWB38OSCX8rtm23bygPWZb5iTL7z32wQw=\",\"DItUXzujAFdC14Z7QrKss4lYaGMNTRypvS59GLIvex0=\",\"HPJyz0Wjmo9HWZRHtl7Y7BabVk5las2HIFUPeLGuqek=\",\"DtgdTyuMx3R2etGEuJwC0c867xhm1LjfVxqP6sfh+yY=\",\"JcIpFtfD0DC2IH7vM5pDLS8qSFqYpj+sU75qk9kM3Mk=\",\"FAwvZYidQ3oHNqzSFkg58alRqh6e4YJYtwGxnQ+ICCA=\",\"Gbm/A8R853T/RUHWYjKjphoet2fDfsk3MMLSm0PsLQs=\",\"FGSi5ch3FLtK/BtcuQ8c1YesfzEz5/Sl5F0EJrr6OUY=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"L98Ilbbn3QgRNadEZmENAuwvXlPQZfjyj1Vib4mEWQo=\",\"ITamJUFV1TcMZUvgPV8uqDOrrIPz7iqoYIC0yBL22e4=\",\"LCUEXUrXyrwUV2Vu/jCRz/oUsqPDp0zeFhllgBXWmj4=\",\"A17fkO5e4pN6IljgKhHZlr59ImPDCoERqPRhsxth11Y=\",\"JKYYFZb+/Pa4nHmSGEZwASI+/Xs5iA4LJBusMA0go60=\",\"Kdza7XMUMNlpW0YxPYRxPm3se1ZfeblLLPo91+nk6lE=\",\"FyT0qbFpar5V2V6cDcBI0dRzOUzPmD8ZjZ6Q0sc9G4w=\",\"GvacdKrkGND6jZwDDrxowE5gjlqMwAo1sZEN28b88UM=\",\"J6B5MHawnCted1yLc49IihEXHABmJ3SDr6f9jB3FvbA=\",\"HU/2x18XeGFeMVJaV/zvffpbXYQ4K17+ePyQYl+OHhI=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"D99F8RQ8dlAXPdv0H9MrEBrBBY3LNg5PVfsELYazu+8=\",\"KGBd8yHx10qThgSTrlgfrJvV36uHVTc9i76jRmAaKhw=\",\"KJRWjbfeu0f9tC68unu0wr85HHPA6kNf9hGppyGiqwk=\",\"GTiH3pmRTJEVSc1MWkArezPmUO8ACdfJkHW+4InuUy8=\",\"DlaIykAO6naQaJWth0E245DHVFuhfQtkudpIrs/VPZE=\",\"LGDbOEOuIXGiD07t3/fmzTvSsGzY056X+TuJWkCWNxs=\",\"CPtPLZ2KEsZnYlt99nUdJdNAnfBENBHedPd56QEJ/zQ=\",\"BNfZHjZScF8BXhTu/DqkEscHqGFdfcM2+i2nLRoYAg==\",\"DGDKcL0GcZvLUcOoZktz+LkhI0ZWFo5o1P9ulVKAjVQ=\",\"HtBUq+nztOGcuKQ5OZxf9fbekMhGOgm4LaIlxWfQUJU=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"Kz14hns5Cy/bZU1oUSwxbslZxbjJrsSdX+dBiCV8O2s=\",\"GfcjCOs0HzMoVwzcn3j6ODjmKCYNbna7OwnLTlE2VFo=\",\"VMn9/GuxK9IGGxU/Qz2CjdLd8C1W5NbrKA8ZWRWX2Q==\",\"IKhYzowA/kUjWay85N+REP9siaNi/0yMzH+dpHASShw=\",\"GlXz2ufU0UxuuFHkRGPuDabmaw9WEUuPRt2p5xepsfo=\",\"Bl1S8yka8joA4tBYu2uo4XiJ99A7/LxSNCcq6GYKvzE=\",\"J4cVFR0GAmzdaPS7D+5LBBzQqMYr1fr3Gzk+qdw7zys=\",\"CcbshjGsWkF/BB7+KVEDOmIrrwG58WMMe8CTzNbz/GA=\",\"CcB4sjEOGC9AME40LF+WX4YFECkxJUlVrqIxli92L3U=\",\"IvT69O0qxpRygrkmJT2TdRqxEYoF0UZr8RfchT3DxTI=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"DyTaWXt0w2d1iabPFUJiGc0OLBpgyay0uXZLjltPtf4=\",\"DznpFwHZALx+pjt/DTt1PMMdLPZmbu94amQArQRRXJY=\",\"C0EYfGDMO/8QIPxOZHRSupQKWz2f/dG0erYTpRXfZuU=\",\"Bhn639fLqonn1VWMTSMnVmVTGSj2L7FMxKpCYF+XobU=\",\"KF7TKHNnM4vJOHyD+4mHyt8bTqfx3GsXLpJO4P0v+4c=\",\"CFPSnX4YAQ0EYH7YswiYM9VRZuv1iu9VizZC8pri6zE=\",\"Cx03N8uXxZAwIhp9XRErt1XQlth2YkIVjQutB77Vups=\",\"JytgMmNHaD++bf8rlyid/vob6COFJsgGfuChJpQspq4=\",\"LH70ILK8oYn215Ka9UQDNUkz1oRGCW88/M0S52gYsjs=\",\"EPpWBeC2gOBVF1ZkqXmuoaRcRQV/RS5bkM1hMBK3BQg=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"Ktb+ZvzI63Pi3X3GohhsMRB/iJa1+Mf567rJus/8WQ==\",\"HbI7SXYKuHwiI3CV2wBa2beSumNkcDHy9ejQxmyiyDM=\",\"K1GrONgWCeiFuNjDznmc7awf697F4nogXKgrAQs72fg=\",\"K72N+YYRQwPVm/ikCJgnltbxgJJpuYORC7b8u/pyr1M=\",\"A1Fu4oiianVV17xmvb7EID50wQVRPNi+h6mcA1oXbCI=\",\"IRYbKGngvgfYXhEFGsDYiUBEzxtHFdXe3VfL1qpIskA=\",\"D0cjwWnnh0ALIVO6yKB02g2ZL0SoVYoJVtVj5zrAPcM=\",\"CJDsGQTJi6Wzzva+2BaFD99nNJUbFD+qDCxkOhwTaLQ=\",\"FFOILr0j4s4/VlXrTy2059bc2JKhTj2mVcqqX0WidE4=\",\"Dfae1Orppv/PVKd9jYuhRUGvnSdjJ2eLcefEnI3rQcY=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"CEz6tSWuEts8MCIPl4obSLtlLC5H0fX0vxyz1epK4KE=\",\"Ig7iqsTsUM86UddupVTGlgvv4am5Rr5LWM/4tNihZWE=\",\"CdYIkcwGwoXDyjz3p4434lFuTQ/1AxeSNOoSZFhI1F0=\",\"L1EzgYPfqZYE8b4ELMHeyOluCMf697s7frhg39zdKVs=\",\"KfuCt+HqSs+dLKizLyfmjRCychQ2EVZ3C/pHMvheGwE=\",\"JNRka7ZmiLMzZ67sTP3P4Wt9IfR/G7H4iiWJblJuy4s=\",\"As2uzRxWU3acCV+asuC0Exo9xPWBlU+pESDceGSl1bU=\",\"Lkjrb1qd2DC6sR6PSfdDGoUZODNfavVHvc3juaJZWRM=\",\"DT1ynD0Ex/mWen884RwFPVpVmPCEeWbcmEDu69lnaxE=\",\"LJx9j1wRocv4mrK3lHOaNx2Bj3fMcb/8bKVdRHJkjys=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"DzMP63+iTL+7r8Lq5dEJorvp1TWOx6NANdcoxqUxsX4=\",\"G0r3K2W2aRMBMmPDfZf/rdu4qCSzTUWBkCmwhnzPtGA=\",\"Ks4f/UD1bxRc6p5nnbbFdzIxU0NCPOAmqOknXoiDB/w=\",\"HDKKUWjQTNvDFRngN/3MXEJvmmmQ/oDIddYliAx9Az8=\",\"GXCSLYHJzZfTAw1Tcz4z49BGaEIZ9JYOzdCRD1quVI0=\",\"B2/N7d/KOOa8TF6HLusWKMryPY17lm2Xlj84uLVahqs=\",\"A+Jz8fBVks4SDff/m6Mu/xwbwGWxScLCp5hsFWnkzDo=\",\"Kx+N/sBejUSV/QdZR0kyoAOxEomjRAeSpI4st3e632o=\",\"Em/YC9j5+D8AzFHN6X+eSjvVQMk5IejzYDwMsT+JzJ8=\",\"B89QB6Tsrp9M10aJEmF12KgffFGjF6LBZXz81TO0pXo=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"GHk7bvIPvgd88hLmA7Kkkbi5llUQv4HIW0zvh0+6YJM=\",\"Bbx2IXSBMcsZrl5+bPpGg0TBFt03+uAeF4A4H5sd3rw=\",\"GqhZRH86yv9cFfvCS/fBZPrsqEa1VbAmN/qEpSzJ77o=\",\"KMPQGRX4VpPgSCHk8sp5nGKx/cRzkSPY3N+9HHdjbB8=\",\"Asf4Un0q19AucEbb5pCZfwM+NR/RjTVwiemI4EEiPxU=\",\"EmtmkkTH6nPTQN7Vb17c42MqCmm5zd7eKXrPLwctucY=\",\"JPce6SDBzCeQES56jp09gkJVQgYE/jGzMemNK+9Tl4E=\",\"GC+9wk+Fma4pGz6Klr0VJROWqUFnyONO0fhgacBn8D8=\",\"Dqt/GxhyGzwVT7O3+wZ8T37BilD6OrOqWHOkCNbYy70=\",\"IBL9/U1TqtusPXq5FyqCZwXVXlhi0b5kPNREnhzGsG0=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"FASQupPUJIFjLpkkpyXGW/Wffkl16Y+99Iapdy9Lbos=\",\"Kt+04KVUSGCaBqGsMbxdBtdMRaTdI2gJI9mFuGfwVLk=\",\"IDWlJnSLaGrEYjFpfMUvtMbY5IxDFMsKHuCOrrQ5OMg=\",\"JC7GszzSxiXRyigzFZBToOm+6zfFnskOUtQMmD6GUJY=\",\"EPiAjX+IYgmY4/FEBGMnuVIqByIKYseYbevyggrMthE=\",\"BdTYpgI0AbeYobKW3ULJAQ2ggbnmBzqnPb7XqYvvRBk=\",\"IL5r5oxH3aQeCMX4WFILJcA2kjuXj6i+bocOhfzBasg=\",\"A5JA2i4UllMHvZvpr1wM3aA6QBn4bEW7vqkPQK/PxQA=\",\"BgRXJJxP/7BkgblUV+xI4reV3EFNa3E1CtCLVs26fDw=\",\"I56/lfPVkJ/xKCAGYFnxuZn57llNwDrx+tbgAV1pjnI=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"CQc4g4xwiKObRbe4Rm4APB0LhfwMlRU+hfn+6lUsvtM=\",\"DQqgfrU7x39qfHd/0z0R5O7FSvuX2nafk3MQ95ffJGk=\",\"Ai6H4zhi8Qavi/GmrDP2nZlM4G8CGtMiNvVSnrOZqO8=\",\"FqP/hg4hENmOzrD155RtIHJz/5pPHgiKAJ8arhnFsMA=\",\"E+Nc2uTG/zWmgRGOz0YSUDCBspIKWfVMv1YDxWkOrXY=\",\"Edzcu4D+Molj2IeqVEOojmAnZ6/P85OKh374tea2IIQ=\",\"FECsPPOhynhwmiqXoCVdCIgrQK4oeZRnDcfVjXuSnHE=\",\"CREquj0oUDT9eAjOXGnK8YiqIZLjFDynPOOtQExQOpo=\",\"LI6xtfIcLzIJQ7rbCXIa1o8cLzV2UxcTmBqQXa9BVFA=\",\"BpWswa/CBw6rry4ieetvEdbiTHh7N/OjEfK9rFzwsWA=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"H7VdDwf0ePjW9aWeCFatK7mk4Zh8uzbkN4lSMGhc7vU=\",\"JP+hm3FwYfKde+/mMyFfJ3EZ6omuwTJvn34vs3c/Olo=\",\"Fs9zo+s6hv50y6erK1kez1fWb/rjETEHKY4R8h1/aeU=\",\"EVxxJOSLR545+vJNhTVAcWzqG/L9wZ/ew1jR90DB+HQ=\",\"FYfBZcPVWS5yqERbq3kScc5kAyv3RtZhlLojpBMRbK0=\",\"IGd7uawCEKBhFVhvIf3NHmso6KGoZk5IaBuwd7deABw=\",\"D9yzQFbvHYkyh60HT/2OTXZ+0H+ayXtd4fNNjj3RplE=\",\"GewxMSOg2OY7hToJMcmpmxTMd18cMSu7E9XVP4gYt5w=\",\"GcDrF/cn0W3BNq+ehoiICLhwtenl2eOjw/DZQxvdVyg=\",\"KxWP0J2bsxfOQ3jPbg1XQ3RpDULMRlEArD+aa6ybaQc=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"Z4leYk9ywu5z8GQ40eOLOA8CWeagQEfcLuR01UPfdA==\",\"JNgBIzpYsgFrjGr2u4jNsX4ZT72MYZp9hEzmgbkz1fE=\",\"GLvPb6de9+aAcPOIgVNh8Cis30HI4Nnyr8Yri7uauU8=\",\"DY8WzB2sMu4kTMGDexullMMqOOGllKbxNnr1RUY9t6Y=\",\"CFsEZS9EJ+kiCXYDLOSq5+HspnbwwWn5Vwv5EBTsPWA=\",\"KbbmN6vWSqJead4byLwgYQEKUjpjGdScjZCMRsLnYRI=\",\"Boa8RQMWoSLDEv3mv+pxRvkpCRliu+MiV2n3Z+6S4fk=\",\"HH2ygROP+GFkMBjKr69WnvpPfR3V/o24EVZ5ydTkZLo=\",\"BDS5rfaU7ndmLIiP5Qo/JPmmgN8vtvUBQiWJgAwSPKw=\",\"Jr84MYEbMiKtShTzuaU1e3VnAhObfY5+K7h91gNLNS0=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"JLQrrHq+6JR0/zKLy2HkrV8Sh3PgaN6hG4j8LqarZrA=\",\"GZ7QW77hExxNu6klg6Avv56jCqWcfy/FvVwIV87bRw8=\",\"K9ZnD5Z3gedK0AZI4BWWq7URe3StuVc0reHIH9AtEAo=\",\"FxJ+EUUZCNpT9nqHhZNztMbblBCGCRJw0193QuKGu2M=\",\"KSAQw2/1VLAvVqEoBx9UFxsjdZEIf4BRia9ithYgUmE=\",\"Avava/PCTM0ESA5kkAGLSJKEqVHwZ3UPTotGEpBALjw=\",\"Ef9ngLjaNnKouezq+dWtJAvw8dkQKPOrzlFH0GCESec=\",\"Da5s786mHqUswbzVvdDJpPHPEjEJzOc1RAXdOAVKiy4=\",\"IjT+Da090N7Xo5BQ9EeKxDvc3qyZy36nXWGmbCOCw18=\",\"Fieip1X3f4PQelzFjcKq/snOSKhUJ/B/gT4hfn0+knI=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"C8lYrF+uwGTePeBw2WBRNbs7wyH3S39Hlc/EzdT2TH8=\",\"AXYZcvnw19Z+YvR2yItSHr5gz+PhqvUFgKzSD0VZBQc=\",\"A65oVJZABysbdSUbX+SyKCGR8jX/mnU/z8zJlaPtNzQ=\",\"AdOpWyRJ4dIns8uXhUvfpSSLeL+KzBX+7YcDanSCmxI=\",\"G+aI+UQDAZ6yC0ms2fIB1bdlhTMB6fMJQ2R82smKmDw=\",\"DUCix2f52ILrR4eT4uFGr5mmIK9KdubzQp1iWRSTEb8=\",\"IHXViNmW1n4Iysr6J737tv8IoNl9K2Rw9HW4fANPrUA=\",\"HbWsq6z3nu9OYHkiL1SPxIhDivTgT1+OZPN6gO/zeus=\",\"FAQv0nBEJUlYZl4PoO9+wVXJB5FH6rb8VcnYw11DOgQ=\",\"IcpzyU4kXtAOwT3LuUO/SrCuHCmw88LdJ8ftQUo5wuo=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"IN21P0FgqoYgKO+f/AyiTtyOfOMEYCvn6Nt6fqeqIqw=\",\"GC/N+nWFi4ZjHqjQ4DCPPhIC93yrZ/RIwRjS5HCAwTc=\",\"KM16F7DzNJcAJjRQ9jHYAzf29uSQ6HNrTDIvd8brlLU=\",\"BKbP/vi/DbjHae85HCXIFirSWI22jyAq3CfyPgEZn5c=\",\"HyCMIIVa/lJSI5Wqc9lx2x3BEdxTGt7xXySpH9bPcIU=\",\"EH+gxcWu6yZQVmnroRlWjE4knXwW2m+sFo3nq+EbRE0=\",\"IQ3OWaRvxUjqYDF8cySbyFBi8MLO8pRN9EhPlnxiSLk=\",\"J4zY2DMj3khpXD2lfM4CbgAVJaPdZbxXyiYSs8bxzYI=\",\"C5y35NvgNqvHywcOYQuW1ht/4r8ppK7lnV8FG98blC8=\",\"KqE/onMbKVqZdKq+grnPND0nNzzs2zqD4D4Ko68Huqo=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"EeS6Bm74psslGpcE3SOrtejvMf/CBI1wQAq0ApSG0cw=\",\"I1eLME/Xs9KNiG49cfApyEmIXIT5SI5Wh+W+f7wtLk0=\",\"FDBoxgcUux6yawmRaBqRF97PNwqeGiT/XSFj+2yLt3A=\",\"GkLTryG39y+u5DDwhb7MhZjAVxJ5Bzc84pfhwUk3Fak=\",\"Jg55yWfA1bxyD5XsensIgFHchUI/eYd28t4OjCZgYAI=\",\"IxSwFLtcV6Qhf0gRLpyRGGvNJ/6qmh84APxrL7atotU=\",\"EKtzVg8UXdYdZu3xXll8c4cagM8GRbcU5ucmi8G1m9I=\",\"LaeA9D6XKh6nhEtc/+diFfC4b3CMPQ68dYAkozKMZ88=\",\"JuX9LBNCOu5sGlQ7XU/uka9c6D1076hNzmq5Mj0WRM4=\",\"CRz4oNmu+Xw0EkGskvreBPHyHyDJr2fFWmpjYmtzvv0=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"GsLaMMnbajSZXWSXO6kTcoMUSxCLlhn2eM8/SpXAluM=\",\"ETdmYL/I/nEEyUlibTUPaw3Bs3lzgZ5HlwF0h2Gewl8=\",\"Iacr/CmvY30Kdmgel6MQ6a0dyLR6ZlmIB+iP00pGqoE=\",\"HWHtDQIhzsBavp0ujA9yy3TPTsLfPtWC1Kz8KvyXLxM=\",\"LPI3fyXxNM1SXdwKIQrh7cka3FHPvUUaeygNMyRj++A=\",\"Eo2HHMnWna2a3Fj/hD0BIQUnsuQ0+yGzdwqafmOc1V4=\",\"GA99srB571An+eUXBXthhhNrZjFVbtSXnRFXBK0wVyk=\",\"Jx9i5S5KIYqm1q89VHEXwEtMCCwklQcU3/idwMpwzr0=\",\"HDNBnstvcGZWfX/Frd/zAQhS6H5o+J1rbbzjiFBAFSY=\",\"GnWsDrP/T3tkcga5Jquba3DlSBXH0Wnenfs0tNm6+ew=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"FmJBffRkcVAFzhIoJkxYcItipU6z0DAMfi7RAXgo8bw=\",\"G8PYGJtMCZNAf1haToWf8tA4tgf2eGAuwu5a9CPa41Y=\",\"DR/ccXfic7tZYvit46pdhY7X/Zu9IrLZhWNIOC6EgeY=\",\"LoR9krSxzXGY3y0r2RuEXFK50fJdaFu1TPQ9fNwGqJ4=\",\"IRb/O74TC5sb1LdvHLS018e0cs77TZjcCHidyZOv8ok=\",\"EFelSt4kDqVFusBelwdGDX8OGTDLBORg4mGFKlrulqE=\",\"JMZpO0uvoZUA5zUUBp4njCq/qoNw1iMSrH3/LY+XMyc=\",\"LLJohQ8O2J/c4ULIUR0vWDoi5YDLs9B5DkG8fkdCAzE=\",\"CnMelvQHy9kuU11KGN2Zgc5cjkqxW/f17M0p2DGwcS4=\",\"Cfnj/QSY2GMI6kgNX/uoDjZ8GftKeLEXEturABHK5Ds=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"BGcLFG9jdWd1RhKuzuK5v8uELn1nhbeQSjseN7dA1MA=\",\"A8Xg+s/dX968AlWk94r1/BbIKJIDgTcYbbVodHXuJso=\",\"I6NNw58Le99jH5yI2v7bS63iABXIafxGOiW3xIMlS1c=\",\"IKkZ1fH7myKrzpJHl+wgTXz1NKnF6QjlcxWZLtwGBis=\",\"BB8diQIrzUDfzZeBkbIA+KK3rbIWjzICtPLczocm2SI=\",\"I8kU9Ah8Q+54m6a+nEuZ+wMre19lyp869G4U2tw4E00=\",\"LWGlWfgGpeOCBBrqsdVFbdISwwGP/craUjX9hC83rg4=\",\"LlRX2y+UmSEgxckFSmpFl0JwEJ5ca1pIMOF1yBJUmqM=\",\"CfQpLOaiJBXH+DwSC1YTubZvrhO8jRsa8phBi+QQecM=\",\"D4KilQ/n8haadutsXOJG3tZU2y8DuifogDASTZztp/A=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"DIqbRMEbQp0cuezq9/VQHp8KQA+/Tw/z+7X5d2B1Qvc=\",\"EWJ13lMetPSGGBLV26XckawCfRhwcs2aq068XDFuqg8=\",\"EPrOOfILcXB/6DVpk3+iDM1Sh5J5a6/QHcnglLpzNuE=\",\"Bsww7VOA4+V8sw8870DzxJgZ7r13hKew3oFf4sAHlWo=\",\"EeYsfQJ3PipL9eLZay4qerFyUU2t7OYbQWMvYTM2IAw=\",\"BWiLJ9SiQ1+0XI1fN0Owsc04C6bdyVq7bxF6rb3INzY=\",\"IulTg9n0vJTp4r4J7SQ9YRQEH/xynn7cwjjdgsfVrRk=\",\"Hc92IAlMIj1z2uAWJCcqdwbETqUclZ3zAvtukecPJQE=\",\"DWhtZAe6byBPuSezYoq1vsxI3iHzl59oGM8St296icE=\",\"BAWeiDXslYdR+JeYYFmsBn/sxe7wkRtxQXDnPDiRafs=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"ziKm96qRaBUNBkhXzm+JHJdcMZG7/5GUdHAr9MjYEw==\",\"GU8gGKvzRn54JD42zpcUQLnoqryDaHoIUcBI1+6nJyk=\",\"KZdLydQB8SgEn0cy1mEOufJpdD+ijbIx22rOVSFtd2Q=\",\"I62FNHUJDGFAP875HqLYo2r+KXQVaayzny5TM5IXOdI=\",\"BO/naCbzjRGnp2F0j5Yi5CEN3DhFS7UynrnNX/W/RVY=\",\"CKLkWyiEs7y0Y/WMo6fk8ufxaq2hemCbw1jjOUhupvk=\",\"HCKrJZKALI9kp2y/CDB019ct6b0/jZk0Z7AN7CfG4os=\",\"GAwYtZ8NxDwE2iH6R7S9/4/NbYRdiG9xhVwhIwdRT3s=\",\"FGNGF4yuTwv1vJ3NuOG/4hoP8NgKvzNBjHJJnnCqoiU=\",\"MB3k/srXEyYKV9Ts7IOo5JZtG4l5eAXEuPK2vpVh0d8=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"CA/xvMx4aIJTEZhh+pC0T9rC9dJwihvhIlaW1H2w2no=\",\"LoMAJDZIuIi1mRRQm6IZZJ4/KMvhkMw9/rscCDp6f+k=\",\"DNoEXAf8BVYaaGz6noLJ+gd08X80RQ3P3dwdFfiLUqM=\",\"ITNd/Vh0wjD5A6piSfZM3/ryswoZtPi55C5tx0cvNSE=\",\"Lnv9jW2QPNDSci7jP4KqgIBWKVFt5tkJGv6aFhMYPAU=\",\"BEOwmUKc0zhkc45BQ5HDfQMt/HlTeOhDmv5i7rxJ0kE=\",\"IVqBz0LycQxI+WUT8tHuDTUK5X/wHJba8+r70Ldpro8=\",\"AVahYR/5kzzPBp+yFWFZhRyP0C9/wnvVutYa0Agmxys=\",\"CQ06wluAwPaemzBjgNPMBBil3mMP+sNj7Hk6D8VPz5c=\",\"D1NFNBgJgXTjpiFMn6i1l5IEjMDJY7Zo/rS3n9/f5Nc=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"Fn3MMvxzEffF35odKVWpKPtqHOdxAZJB+kkcZVxpc4E=\",\"Khkbai+PltpLsvkc03ezL8joSqqFfpdv7LfcmL9RigM=\",\"DC/UiH2LcEZitiM5rvU4Diz8Huz96aTJwUq8UsKgqMQ=\",\"AeYwZJvDavIMc18+VaEOGPsRkutTfa0rI5MgeaXj4Dk=\",\"IQMCoC3XXy04RtoW6nwwmRHqsDT7YK3rW6acGzG4Rxo=\",\"HZ4Kxuj4ub/He3Q5s0W3cllvjNIzcIVZVuQjZtQqFy0=\",\"Kmz2HLNlhIBhe+fapAcu/kwgY7l3fB/HdIzwDrtnAGc=\",\"LG0iX6rZ9vCVkWOkJiHSbHyRlBGW3axnphizkL+Ete8=\",\"LSzqJlZvrowoU6WXYHW21z2mW2pxVqswVAqp2wXZqik=\",\"LhPDEMXoTlW/ZFPZzGR/h8kNwmJfNmpt1h9goLOMo9w=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"GPjiUIvgmDpq1N5pzXl9Xzl0xfLk7S2rTmfbexPpEZo=\",\"Eio0ytqvhx2/FKJia+d1iC7kZTvu7NktdCVBNQ+SnBA=\",\"HqqcVidu0gByZ1dzg4z39ylmpwU3vPyFh0ghtAu8t7Y=\",\"EOC4XO/FdI7snX66senOxX1YCz1m5bR3crH6omfrf9Q=\",\"CWHZbMTxIaGEp423jCF/qWwiUh74jp9FSuiKyTSDJjM=\",\"LUDrgVdJSpGpmmeVn776EJWPL5YRHUZGHTq6/fP4lzU=\",\"IYB+Loik+QapmMfZxqOVqrLBoJs4h48EfNWaLmH4+F0=\",\"Lhnqyl0WyLu274kmE6rCN+tHtlxk3rLRZ5BNcZ7ct3o=\",\"FnFCQse354nUHIKkyXItV+KU1qVm9qSM3+eRI/jB0yo=\",\"BVZtOHkvBnHOEMGtfpNTQHX0IvYZKOtsLkhX4u8fokI=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"EykPJLEF9I2sJ3NHgvB2FR8xksD0MtoI9z7glXDBQ9Y=\",\"G0uVOtqJRUyCsZ6IffzMAXhPpoCCu6mlYb60lvJn6vg=\",\"JhPuu18C/eVWDi8artvnrDIZmYP/m6LO3aetmm04Vf0=\",\"GuxXvVdFomw8AhnvlvpsaSUL+bZYTjccqyqivbeuSZA=\",\"BnOJ40jDQJtM0pnYvOcjmEtfLpWwvlYPwQEy2O+NPoU=\",\"Cw4GoefcVD+Rh6up3a8uMtMsqLil2oVZfm7l/aDJ7vY=\",\"Ch+0y3/UkTguLPM0fOSsikI0KnKv0aHmTrD/lw9U1fk=\",\"GXcAO6YU6o6BmR9vDXnWL+7DsPFdINiZuHOC/D+xOqM=\",\"KG6RL6SwGUjdexzAJRCEqpYBf0+/zcbHQ/6s6x3qdTs=\",\"IzcCMe9V9Z2PN1Fa08rXMGJeeTJfuDnh2enC0WMObss=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"Cxz2v8/rPPNE+NEDj9x7n6+UUCf/W/cQ0QKG35y9TKk=\",\"Ej2aQJ0UyZa5FMmlbFSwLCX0ozo+y2Bm/sSnfGUlrLM=\",\"CJ8hSYYwoxKT7ehyXaQXk5bjFwh1T48mk1qVk6scIH0=\",\"L1v8ZThTotdO4DVH3UkJKngXfGvBbu89RRNwkEBwUgI=\",\"ChiwiBHdvgBqyFFrGI127W6Ku2NWl7tXb0OLXrI0cp0=\",\"Hg+xhIHI2VNUEFYbTO1gJWVLdNfKrD5NSHFD10FV9+g=\",\"CTYQbjRMd6RCXQrpJFUzQCFNUmSr+Vn/XD3kzBY/rAI=\",\"AavrgxZDNl6R5yZhNWByNfzkhBSc3OFVH6RXd5H/Yvw=\",\"AiiSrzfoBkv02IMiJWu4cuDXM8Ay0fe+/yvbdJ/Ax9U=\",\"KbgwU054DXIF44yi+bpD6h8eqrfQi2BgqajlLhzs37Y=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"Aq6Y7DKOkVBnmiRiIrUSLCwuNdIET+x5UIMrl3SQC8s=\",\"FVSU83IX0DPo1YbGhS7FAcbcztUJZASHfHiPdfCcleg=\",\"GRxs27rLvfZEs7w1f6u7t5BF4yAPLRD4JNxHYa2g20E=\",\"LQ9o3FpzHjCu6yOnbC2YUzj3z3qh23RSq3wF9rlqHBI=\",\"CHYa4xsAhRk56/gfMgFhD1NwJ2XkI2fRWlpk5Px4DnU=\",\"IiWWBsxGtodu2ETENv927l3HNHVKkb+5d9Kun2IPc4w=\",\"ApADHrPvv91Wchn29ptuoJjcHH/xPbV78ixpnZBhkj4=\",\"ARoWTuMh+uz80oPCS6qsUj5gmtTdb2OHIG6Ag9i6LQg=\",\"FKakJIdrhuBviokYJsM5O/mpNV8PcF1hw5v2UgSkiKA=\",\"Dh2Ncr1MGSry1zJ58rfMiTygvpsxP5Dutkpftp56l3E=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"JyCzGws2h6k+ggOBn5/o9BWRzGe7oL1MBQM5wyfQpsk=\",\"IuoIAQIJTcwB2pfsF70cX/DmHxr8NWe6Kkx5En4W6Eg=\",\"B6B0DvRRvFFQVW0Qg7UQjrp2YLpH9c75Lfdq0M1T/dA=\",\"DBkenR0qw2SN9an6ajR8ntPAGkF2CR6R+BkUF8iFtnQ=\",\"IaZgXs4mLr9WWBUxGa2oV5PGjc7rVgeCxTPnFDxTQ1w=\",\"B7WFwA0ZdNrdhrAazBdZORQ+ZvDf9VpyY7f3BQcpT0w=\",\"MFcML1gHtWzDnO5eEWTFhQbZAqNI3UAL4/O6Hqm5GMU=\",\"JySufLfq99ObarZx351womD9FpHP+BmHRg0sGfIA+5o=\",\"ESh33On28XnqsCeIxE/J2j1kuZlmpxztv8TVzhYG7oA=\",\"MAZIUhXACQDjxCx07JxYxvygBHgn8jhDHjh3cqMP680=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"LytCPGcynMNK3HXvlV5lpuz1/s2t28zHxp3joSrkVw==\",\"KAIN98NqvKuml2KpTu6IBjtfEy78m/magoPU+jSnodk=\",\"HB5H4JWRweyRt4QKMHgZ2JwZpWfW4+svj86Bi6+96aY=\",\"GoSuFpJLUh43j222GdCglAZiCfGEkrYExqhSPZV0pL0=\",\"Dx8fT+FvY2uPt9GqTOzRhGuzf3OICgnrloDvLcSdzko=\",\"IDOxm3GVHn0YCFHEwLVMuOPR30StVeCN48EFVf9DTAs=\",\"KYSX26S1LVDFKLCJz59RuYx5e1+fGJPfi9cdZCeVfKc=\",\"B5eVCbxCsL0YVcL+60iQxaLlz29suth1WLEbguQ+urU=\",\"DAJ9gGW0IqXQWvaVMRnNFFHs3zscK0kEi6yf+hmilXE=\",\"HNoDGPVtoI5CtglzLyOnYoMe4ivYc6hWWikjrevYjnY=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"EJ9Gfa7a0rvGuYSQK+ApqgfnJBpj7yQpZtucW1hMOdg=\",\"DfHhpDGB0hAJyYc8sip2M3yoS4GWQyzujuyZdcPBucs=\",\"IOIgLAM776bTLxP2tEJuQBIcQK58+M5XyCceDX5fExU=\",\"CPvJIG6Co/E5yLhv1dojv4ai9xnGt7fbQsEMYqAoC/s=\",\"CvzTtB7vIQJTrj1oSh+Bb2dysvJTwuu6W0RLjtwFt3U=\",\"KtfguorPA/+y/YSzD4kDMRnT80I235LRqYXTpx+vVJI=\",\"I1uYQDBsm72n4RwS7YgF+y3jEnVVM04ha/+N79rz+lo=\",\"EIq8Q5JCrCuniaygyhf3Yaqqp/kL4TmGJ91RpbU4X1A=\",\"Bkz+4qBROGSEkZOCGPucKHA4z6Dyk5foPpFPNV4Pbvs=\",\"FptJeAE4YYpKx95uFk8fipXc6Nu2i+Nze9HR0XYBtYM=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"A3wQEBg/BdO66yQHxxBVObWTVehU7mummtDKk//jBKo=\",\"B2GfSnFt+ofEGAs3d5/BVsE4Clk89GhrkvUZ41QxoNs=\",\"AwOmFsoMAhtROznVUYd7dkskHlghQM1JxmZQ7XSHQvY=\",\"4KPGa4knkqulk20hLFEKkpVx4mD369fk2P2he71uTg==\",\"AtuHhl9WtZ5tsY6foj5Hl0ZjQeMRT3PQSneqlrBggok=\",\"FrfdFPN2g5g5sz10A1lZ42QCnLX/xKUZfPL2ZU4H+c4=\",\"EoLS3ApUGCBdOXyjt4iskLYXq0h3ej0HVPKI4QW/CqE=\",\"E3SU+91PaPCJgSMUwln51VtvLqml4B0x3zaVO8Z6bNE=\",\"J5OaiufNW4iR8e/6JgtAA8XR81iMpBtR+mahX771h6g=\",\"IJ00LtEcnGqV9766HWrmBtu5HVPHsSUylUBjKFaYCBk=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"I3TtRMK/EAYf+HIRJZiwSDlkM8DpnuYYqXjXtS7q0R0=\",\"BQN88D6OQGC2JnG2s3OMMya1dGLS33FNMS3Dz5AuNJk=\",\"G9xtcnadVtQ10mZPwAhn0IGMqQ8weR/ZsrHjl/AYh54=\",\"ASViahByXk/rwlJv6o8o7an8n6zcP4U7/zTfLYcLZ2A=\",\"BtS/8/kKFDb560z/Z2i8ldB0gQW2v60+/EaQBbdN3mo=\",\"Cn59C9PqurBq+CbnaShfRzugczZTmHLt/kKR59EPiGM=\",\"Bbfu4Sb4VMlBkl66bQLXlpR+q56841t4+UtoBouOJXc=\",\"DHh0l7iKjfV+cWIkq/uCOBSe6MsrQaMEUqxcjJ6hG8s=\",\"EuRuG4LcD8RREi8Nc8NhULvaxCZgkfbxboh8KearPmY=\",\"E/1XjAdNuB6jUssJKFtT1+jpl5v6t82+lU8uvbAUyfg=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"CdiezQ6edtU7qx0ATd25YjNljPrDhq02bGFOCycPl9Q=\",\"FmPOP9joohnpVZhSTQoU6V7C7dvqzrXJHjMl8DuBHNE=\",\"LXZDpV748ZGoOF8mt5MwaL2Gkdi/rMApjt1Utdo6gbI=\",\"EO8wTAXQZBAECSmIICvRAqG3ahVUaev0GAS4VWNwyig=\",\"IFi6pFTDX+nuiwqLbDV54A2N6kTbHwNvKG+MHFpInhA=\",\"D+KXrhmO1+b9aDa8vGBnDZ+kDYGW5IzV5pGwTMdmh0Q=\",\"HcRYnxzLvy5IOUqQzTyxIcO8VldjmOFLN/EX81iOYVY=\",\"JTGqiSWk4UaiF4RG1CE6/itL9ZU3CQh3CE4Iq7MrRvE=\",\"K41vsJ3ph8af0UI8pbpox+R/JDJpl+5uwGsnu4IC/Xk=\",\"LPpxA6TmApYpe1zrLVpZrNpbDxwzwZyUGgW5wxDyWsc=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"ECAr5DBrXsKe9XXFIUo1o+u4yOgIxXLIfr+jiLE+lHs=\",\"G1qha3aSbfYnrB7G9sEmAlIOZ8sjEGxFYGPo+qS5AqQ=\",\"GakjN0drWFbAiIUBSXcgNvMRpf+U8FRC8KFfI8XE34E=\",\"C+j8SY5kq+k6OJHdabBoogC0//aBzRrByLbA3saEibg=\",\"Gg/EKqJzRwyvMFglZBhikbjRItwDYwllYwPUipw9VUc=\",\"GNsO/Mf2DKP876mAkUG/RsNlneASdg2KEAL3ccd5cbg=\",\"EjezvY6SGJRLM/RepMnnhyvkDj1x3zVNC00iQkFSJ04=\",\"BlwJYlG9OuC6kjZ6nbR1O5C6wWnnu+LaGiOuNALkXSc=\",\"Hcg+8Gb7MG4iLbNrGzaAIO0x0rFYnLbsLoTkBiE8jgQ=\",\"LBqObl+8KNlax+eEIorBLS0ovjLE+7r78hxqsHdvRJo=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"AXygRhvOCKiohTqPSffp9Sq489iny4qSXU39g0qSAFw=\",\"HJDJd+Ha7HTB1+bT7RTH1BoX/sbRRA/LPP3klFukO38=\",\"Cfau4uQ1cP5oJUTcr27+UPJzeENJ7pB6faCM8KOJKgk=\",\"Gp6BCgc9eYKlCko66X4W7zyx4jH+Cq0ijd7/QV6HPTQ=\",\"JfrbkimHcUrBNUV6vSU0af84eEfmJaTzdqIfYMVKrPA=\",\"EbZdWk4Dk3M4SLWhj1uiLJ32Zn6bhwdd4tzKKmMi6YA=\",\"IunnAMyCCsncCA6UQHucGK3BNVNXAsNLZABYA4gdNVY=\",\"FgyIYF+tetZaW5JtwXf6l5nJUa4XsGftYrBmeaTPA/M=\",\"HcKFHfbQlH5bPJOFVE0xJ4NG1FgGMoFCttOyVwK9dRA=\",\"CKQqycZRx2HaxM0zNNj/hUHsu6ORy6BPIVBVifObTQA=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"KJ+g6M6N8MYL6TPAqzkC+YimpZrcOd1Nh0VsiJgu3HA=\",\"HnDCuR09RHd/3puGclCBhXiap699DtGz4IJzwC62MgE=\",\"JiAu/b3ZP7witZu1KwAd6iB2/0nBvZqgrA5zJAb4U2I=\",\"BmUTCxCgDMUIhRX44WkDujFW+kIoW/C50cuEUglCW+M=\",\"AgoESl4aQF4a1ddRSSUWaEFIs3VbH6xwX9a262Zv3io=\",\"JkDgIbkxPbdC5TQVizc3s1V3nrBf++Yle/OpbM0Ovv4=\",\"GTfwKp6n4XANp3cxKfMpEdmR8rhy3vDxChdgVOMy/1E=\",\"CxmODaAks9qz1uefHhoDBMYFWo6j9Pk7DOJMbt4gaHM=\",\"LAow1RRJ2NtfPf0SxNrnhXqR7ojilyCNwVHM2L5PCHA=\",\"GHxfilKRScYlAAdzCle6McfcBGHUD8wXMmcCAgoh0z4=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"IIXBvfkdZLiPonz8TAjgfvoxrt04TUZfVYw9YP+wVls=\",\"Ja8lQU/vQbx+XzMgy3ixrUUyMZRzyqfLrQzr0ad6kcY=\",\"Ghslpsr9O9KPl/MURWVmwF/xU77tgbHbEX8g/5fxMsw=\",\"LZqwWVogJfwMwIULAny/TXeN/bNrP0n66AKe+y6mPx8=\",\"LzDMmw5bhb8E2ckhwmGVx0MaUKb+3CglC62NXP2uHTk=\",\"Cjeyp0vRQHLv1iyyhe/ykBrnj9kNwX5v7EZ2ywTyRKw=\",\"HEJHiPygJd+sZskBGLEcgnLU1o4xWHmzutcrWVAWsaY=\",\"IPUkBGkzLaxAFn7jdDinW9gW3MH7TM4qx/u3etq6W+I=\",\"A4ci4GubfWuoIy7KVTsogiVFawipT4wHIhlmVEMLUiE=\",\"BW7sW3VtaUXX8eyOUUfKJ2Xqm/kVOZ1xEPFbypU8uMQ=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"J/CADdysn6Hxz6sp9Awk/H1MpbFZDyYQUg6ItRChzLQ=\",\"GmqPb35hL2N6sSM1XdodS+rZ3/ZkPDXVQHZSo5LnA4I=\",\"Gyp0TL8OcyaIWwhPkH53VvMhITbWB9B0SG/krHB6QT4=\",\"Srr3Icc1DxaWqIqJiIDFiWKBTDghsS/vCSdnf/6tOg==\",\"LxlLf7ZGF18+yBq/0QvDPF3ra09plV2ON/kNVhm7H5Y=\",\"FFfQ2XKf2ST5igq4LDednh+jScmexdQIZpYUhvnJRB8=\",\"JAIt67LisevERHVQY97QRyFq73pT7801fDO88Yq/fXg=\",\"LxqfqfotBsav37A4ZYBvrB8I1bZKSkEC3Wm4/6oW2fk=\",\"KjnIr/0sNpUfLWXOKFg83Sfo0Js8RoLZqRqObaIPAY0=\",\"Bs1KgWK0QHqQpjK8xuE9Jak1Ac0n3ziaf4JA2p0Pswg=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"AkC92HiW8Wn3hwLy/d8QRy0eVrDI3KZow76cW5/JIvg=\",\"A868jXF4hqWKLCorxXLj9YkiwZ5qgCbe4JqKqsWdkXA=\",\"DyrFwvisaB4jGmIwNHB/q8XoG3x2bBLbNZV15UApgt0=\",\"LcUMt1Uw9TxYTw2xiF1sH8AwCcyOj4q8ULXqCW2MwfM=\",\"CUyJUv3jbEEm9N+FGOw/gx/dgBKfj6j/G4fXc5794C0=\",\"GA4pQz2Nw8vCapsGMIdnjlt1ab11nCFzrQYiVX2ULA4=\",\"E3UTmV+aUqYMwI7FGqXv0fEIKFh86psqXQFniAIb0OY=\",\"ECyLkP9sMn0WlSrRi8ZdnW76fcQhRD/0FZ5ysCrizy8=\",\"KfHpTtKPcgI+ZYTbxKTAkMbF7jENi4Pw8ZHKmjgug+M=\",\"HFKSvzA0OJrdyVTTNJT0Ix7pra7lhobmMFSP8OymMZE=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"AUMNeVNXSImUWyhRJB4GbunWtc0RwQbh/SCT1pGhZOo=\",\"GzRI46OLBbhaaR4t8XK0bHUB88opK19ITatihvSiPts=\",\"DblsWFnSFjo51rO6MWlLYDcGYzrM9lKVJu1XD+AZ8AE=\",\"AhtZinsfGZAIGvEikq5thRB9MUwFU0zB7Tn3/KMoD9A=\",\"IRCZXs1PfK4X27kxF2YQQKUFm9IGUKmQ3WeB5udzeQ4=\",\"IYk7aitKZjFrN+t0nf+MpO4XyL/4Yy7jdl9/j+VysMQ=\",\"LMrzCPkS/9FLRvMNj44tRoC288ohdYekpsHBu4QPNoM=\",\"EL4ovlP6ignNqfZ2BpeAExSd1426/Dmz5OwP8ux1stA=\",\"F+gm1Le0ogQPy6gJJ4vt4M1KecCw2oE0IWMnChQikxo=\",\"CeznFzB/UtF/GLe9IEMkIJwBHa+e94mXPmn5+eCZQO8=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"IcUSuL5al15YzD3BlfKEqQqSGiZMZ/hyOlyfx5xO5ZA=\",\"GpwyXpajR0X2hu7IsmiHe6eqDUSxH1m06xGyS6MKsfY=\",\"JWxe10YTM3MygHmUVliiGSfldphcjCbEL7Diejeu7Vw=\",\"CW3QCSQcalomjVNfXqE8sfMTc1zZ/72X9YBHclEHP6c=\",\"G1aXo0kjRnU+O0G19pD07Wyue8JG6QUORhFU2mO3I0Y=\",\"IS5qz7MFBoKG7NbSu6LMukv5Ukh9fbhoQNG8NdGJCDQ=\",\"GIlXgZ7AVp0Z3FTGox+sd7daicgZDqV3IKf8P35qSRc=\",\"BVGzCqCFoBZAE3BCTY7HtylELZXCY6sHfvH3F9gF7W4=\",\"Iog7A7pGlMJgLF4MFIotixQtpzLy2uNAJzJSfxpX/NE=\",\"BTpMSyBVpYxcyw8jRk3jfMnDr4bNI0fYIWEsSwF+jiU=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"EszqkYOZPl19/Bb97ybZ+EXu0Q3i+6/mMAjinTyotQc=\",\"WCwSOB/pLODLQTktmM8L/IEallGdcXr1/9RcbKFnmw==\",\"BHUn/qDRoZQkD52fTFGYvdYg7lBB0tyl20A3X6bsEbs=\",\"CYA71SbUnjHcD6QYjjBpt62B8tY5GTTeQd9K787UsIY=\",\"IdOwAiZtCJOl58GnvHrS8q7cY7yhKwEHZwsnEBDCwXc=\",\"AY97CeBb87aAQootK6pRKYAW7yO7cayVFSv3XIKrTNI=\",\"AYvqQlLL14FeS8O9NLA5viAnwia5MOq5ywcUwu6AE5o=\",\"EA93pAVOtiWyITCDjM3mbSHGa2pL+MixDtzR1IZltw==\",\"Cci5ZQHqdlKEZTsNRkRFsBIIY2bvM9V+Op44jnQCM/Y=\",\"BsmsJ8z0faKXkjCxtvZwSgijACl1Ksv0mULBli6i+do=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"Bo3+VpxZ/hF/BMpNBN+aWc5ckyeriIlPYKhDPLO7x+c=\",\"Ap4hx9Gz/dBND4njvsbmbEE0cYP6pIeghbzxrSpEYxk=\",\"BhrAtbM7jWZyGfdmP9aMk3xUjTQrwn5fOYuPEsT9VPk=\",\"Lo6uoBUm6jYrcw+nZpfcq28CmP2R8O4UXO1QShZL+8Q=\",\"G7pmOexZhTDeJwbKQmT1tC5u1TdJk/VRfUB/Oih7KQI=\",\"HadKI+sf19sbMM1ZQqxUDDebx0o9HlHVsL3dIIftEAw=\",\"Kg4xAER8gYcXvK3N0LfRICJNIDyNnvSAZNe5f2qr5ZM=\",\"J3U5JaNKJrijAchTG6iIFal24YNoWOBU+Q1lYcQ3MzA=\",\"I3DYYnwn7NMbK2qTwzrUCaLnhch5i8RE82HWZ8WUF+k=\",\"JER+mEyugZAbjBZo6KEdlFV7Od3yrsdO9FdwHgDVHms=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"rAhH496OXwB610J/JVVRXkB5va8LDjS0vl5UH0gvMw==\",\"CyxHVLAZJSctG6Q1n6AsOZvauoBrMvUcIoXiwWvzMW4=\",\"DTP7TKGgE+tl/wnchQmJaXRwg9269OAJPYbynvOUj9c=\",\"DwaqQNASzSdjeMNW7dQUwCp3q+xru+hSDZC4q5a+cwQ=\",\"EWILo7WengJAGxAj0ONnXBom2JaQiTH4isj0h81AjSY=\",\"LReD4x88JCR2MYQD24Ufsaa4JmUa4QqiyMbO6Lcem7o=\",\"LJidkzKVqBnjiMu3NvHfwAioE7EVANel11w95FRDx98=\",\"GF1kXzGGJJrWsg0u/rauYep63SITnAbw+xQ9SzZCimo=\",\"KVOQ5DAf9Sy0zCZWhZAHGc94X+Qvs/x2Bu6oQC0sO+I=\",\"LP9ZF2b47QM90QBKIWyVRcsb5cI19ZrAGJhFo/D7Yj8=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"HS9WFwJIe0PZ9/ZYP7ijQsgvFQU7U8KVKn3S0ySR2IA=\",\"FDG2U37HbcLDDudHYwHoMnAM5/Y4VT6EzW/OfW8U1+g=\",\"CfaOlRLPQ2igtSaq4a8r+4GGVcUOiofcFX+D15tAmgA=\",\"AuBwFeOfX4rxfNLQ0Ep2kXwbbDDws7s8NaJNCZJJsX0=\",\"ItOTZXneGxU8aCWPNqFXR3x8dG+9xPnz2NCrB9ZRwo4=\",\"HBURN1Eo6jS4dv3xephMKPn19VG49QCKVZh11ifK7mI=\",\"FCiCF3sI21KNPjCsYtMyXOzrWFxMwJHlBwp5q8MQX+o=\",\"GhaNGYKEyxOGh5omQr/6unu3ZyyRvNbFYr4D46tjYXk=\",\"FyIdUMebBoEdHWbmN1fAY85i3s6LE1nDiTK1PgwZlAE=\",\"DR1Oci/HXD9JMXAc2awkChcqjjtji6+6HJn+mHSSgJo=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"An2wc0h6Ek4u73Cdz7tBpi8H7jKqlS9pr1CsSGtsqn0=\",\"JoyLvaruE3IN9hdQdRgoPhdYeIvZFvpUgCZIXHqpoLI=\",\"H94Yl5BywCJQlcc9znXJnnwOoxZM7axO6YX03QKbnpU=\",\"JTHwd8CnfGzgynAkxbFQpBSJ4GGAaIkEmXhVd3uqhPE=\",\"KUpb2M+TvGh8BWjE4p5RbZCs3fpcosffgesJKGWD/LY=\",\"KU4yIXDJ/yBpcEgH5kyu0KDp8xaDZBowEuhn9ekTVZw=\",\"Kzrd1ssPI9sA1s153IhWmS2jbmSOO/DuCycV14XVtLQ=\",\"AxNeeTFKdqE9+cv6Iqfuqqal0kQewy7brSOWwnDrYAM=\",\"FzpWLZ7d+vj/pofDYuK9w52jbbSoVXptyFEFWixIorw=\",\"BhLYZMH/c/ey14ByXP+tUpQmpuGqWTaHW9mqRy54Kbw=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"K6iTAev8EjtCIMbHRIgAXLdSxy90h7yO9jC+u9Qb9tk=\",\"EP0pCfn38ndHIM4ZOkwAm8krq38n+VmleEKzyy8Q5iI=\",\"JJwbM83jFE+5ub3zDkVUTLmLuTBO+s8q2/EnHVm8AOs=\",\"B1cn1rhNjkJ7t0LOp+iACcKG6DvWbh1pUd15Kdy+NiE=\",\"G93X5TeZJDjxAJGyWlIl+wYTLexN7Zy/7rRRoDSsxnA=\",\"B+9ejlX69dkSnwEkeeEuCINLXho47SiupYPnym67poA=\",\"FLcUF4/IAx2EfbLgVVPd7UcRFFVnRZg0fc4c6LjOTl8=\",\"EZ4csqfkzGiFaem4eVLUsim+ImWljtbmGaqpPzDDjww=\",\"IVdcmK+w/Y3HXOiKBCAcNq7GIPcz1s5xvd1sTa4YnAs=\",\"LmkYhZSsq96ojiV8GbCqv8co0ZGpMdel9Oftg3DCT8Q=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"DTCw97RjSRuT75ogVi+vNbTu4bDcqvhJZLhQw/qfUg==\",\"EE9uwo6sT3cVdqfsQQmAsv3GPDnRuQw/DnIYRyCeICU=\",\"IBdTugoKiItm7FFlhPMztM0fV8Fkt12iJRmomBHc8Hc=\",\"Fvx28fX3ZE3mvHnMSE4BDdHaPQYx70JxTPXdIfWev/I=\",\"EIkvxe7F7QD8bV0JdSIdPYcGhTZ/IRyldnBs+wg7Sfc=\",\"HFnJtoRN4pWErJOnMCK2dhsZbgBB4/oy9Ug3OoQwetg=\",\"GIowZMcu5uO1Vc41MT9zyRoVS9tZ5X/byV0obfQp+2Q=\",\"JadHqROWmPawkHQaxVyYuj5VyEXcivJa2D1uSMlF4kk=\",\"Gc8O94x3AG+p9IScz8wsUt0yamRqV4nNJfee2E9czAk=\",\"EUUYcifeYy096x1iWk5f44hvUQOuRmFajwfmA19lOXs=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"EmBvUUHLwbmjSakSHlQpXRf/afL5Anus2w68im3S0Kc=\",\"LR7IByY9eDc8prOqj0xRrpRIeuBMufX6bLemFV1Ez+A=\",\"K4P/1y+DzNTBjdFr0dQGruMI/Udb9wbwDMKH2dzZcoM=\",\"I3jDWgQoJks6+voLeCMSRjtySk0oGgtWumA2q7nYTEY=\",\"Ddun/uooVWeez+E0MrQghYq12TvINcmgrVm4wBH8BYo=\",\"BgoAkbWlClFuMbtq4wI9kCoj5X79tMVxwUOtYyEwRnM=\",\"DQhCHYFfkoEJSXcjfGqn5iQ6tc12442d8Z3StKYiEdA=\",\"Flo+61R68Va0viiFDCRYbAczdnNkQpoKG33NLn+Zgi8=\",\"I2dkMkLzKkBXRIk0UpRgQTVGmjYuj2+HF8OB2+9dQOI=\",\"MDoJQfGKoxZmEZdhEeQ6lNkvUfb72qB1V7R7RoCiGvQ=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"Guz13vCbpb4szZaJlsVWQUXzj2CqtBkZeNuAif2zHN0=\",\"ME68b7UlKti0LKWDVnmejGlhrIRwj4tGUicQMlmRMkM=\",\"JqsSiQOqSLZdEoaahWl9pN19u6sJrtUIuDOjmIVeqik=\",\"JFVnpAh6VYK7Nt04A/cAhZasJRSh1zgNZu3inieCOUI=\",\"BGWF2n6NbGzw/5K14zlLwEmYCEQs3jKNE2RrRKacrao=\",\"Er6YvAolcW4lRXCv3gjbReluFZqG19HGheHrKkWks+4=\",\"GFM3nBZYBnXXc8gIQbi259sOiiuXY3IEYZRyFF48p2A=\",\"E4zHeBk2T9mDo06xCcUyld5lPx2QX9Lee2+AgU/ozAs=\",\"LbL+4tSWiRMyIYputwmEioGfYrhyVILFkbzuq8Hj/UM=\",\"IulcOuTbHP5eTPtpeBVpfNnDQhHGURG4/oUO0llYBX0=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"FPDwaZqpvYMmu+xd3QvMvjp8rqtoXZzniD5RcWS9WZQ=\",\"AYFXdGddV2gX24SEC7n6FrcTRy1y9Lwkws68Ca7wwgM=\",\"KoIRekMDBBjlK3COtparAcmrBDlutTo+pBlLmhmCQjg=\",\"HwLVFSBvPZo8IIay18axkATMhVOneQjVNK0K+DpjcJc=\",\"PdUkDOHFUw/aSZPa4TvAe+5MeZTB9l8mOiuKL3vJ2w==\",\"DEFMoe0vcYBgh2oh3iAdh7dvb6Ik+vJ3XsmcwTxTQRc=\",\"CrSAQ7GAFNeIRawHprlyfP4LKDtEQE4gxdpGKqok980=\",\"A/rFMDT8dIznz5Zqofa/FURctPbzpKkpyyft55KGZ88=\",\"H5Fzcmbpe2M/xj5bDhyoK0hmgM9nexMqt6a0rHX3BII=\",\"JVbhFw0k2NqYBGQ3aFCTizYeFpmfL2KOEoH11qsLE/g=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"DSWMrRCXQlD22jqeBo9oMNfGXxJTriUDJL+3K1DulOg=\",\"FeK95u7pafu7It3lMKjmEX/WQJcnErZE6+W0vwhB/JA=\",\"Ix3SpY/CSiAkO5O27Vz4uIt6lKQTeWGFL7haIHtuhJo=\",\"BPz0i6hkk6btev270bdPqRtxWgyrLhyyfUFtHP0iAlg=\",\"AnMTwvjU5d1nZNZy4ab5UdUAg+TkBLnBzSIzTn7tEvQ=\",\"HozDb8p5oaMxnTTbIwVHjOWHF+NvlxCHNSixbU8MGiI=\",\"Jm4/NVDu7h0eKTH/O+M+0ULfQTEfZQ4HBNGjM7C//1I=\",\"CIrMV2t7sf0AuOF4P3pItytIpSnhMPtvL2VQ9BxnrmU=\",\"FFU3FyyzBt8CD5EdRu7sgq+BNLmC8A3K2DnDwQBzsfE=\",\"CJfq2ipR5MwuVb4rq5HGig0TeKqkplvZheIsxnX66NU=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"H+3oRisH0KMF0CA1aDzym+VypT7P68KMd9F/9TGg6HM=\",\"BkzdsmMFx591MCzu8WI5GBP/tXWyFSaiqZ1NBf3ZBLw=\",\"BBaI3f4l5vYn02X8GNdO/kFlnZIT8lgIyB2kFo9GXvs=\",\"AmMGXKvVA5XvQJQ6+T31NwrS9tF7tt5Zs+jnEV7Fa4I=\",\"G+z7lDuJhZkaZsB1gyLkw/ImMsGZwXN/g6fcJRFkpzA=\",\"DgFFGx75LJl+2sgmdmphUlvJo0Xc1mlV+f+ZEbZT5zc=\",\"C58BBi1CaQQWjPcJLVfiyG9mYBEUdfmXj2sGCK0vIng=\",\"L53I6zhTRlLT7qXhuN5/CIw+qPkBWuE0cATDEiJW79o=\",\"LZfpRA8fylfyJ78HaXKdPbp/5s/3+93OvkkuGx+hVXw=\",\"GwVT0u6Rw6Y3MNaG/xpToEeGgqc2Pd1Ofs5Cug/gyy4=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"DoMYT/bkNYL6u01iw0bJV6NlNYEjhhtAYWcHIHA1d6c=\",\"DOTLJfWU/ZlsKNRXikqOOwWBKZpvFliC+9HdsthbLdw=\",\"BYX1gnmX74aRB42KtjXPEzNYISNAWZxR4b+iDJMiYFY=\",\"Kbun5MKDFtcLr8XQW6Wpe9VFGhJ+112e8hNqAvsOdfg=\",\"BejOcU2F7KtwJ9xK0Sw6XnWiEedx2yOd97P2YWWNTQg=\",\"HSQ/K6t3EvXRL8x+Qjmzm8Uzum1+H+mHeaXO2H3PD2Q=\",\"GSB/JxHWW9XMfR9a/HcNdO+63wV4ZeJ+/m5h2yqD8e0=\",\"BUU4v7C4TnB+AA7Feb+415YQbaGl5Kv6iicxQdb27Q==\",\"DLq4WV7ua5PfDZ8lRdYUFq9a4txVpPMyZTr4zhH7QtA=\",\"HcbKSr1U8lTB9AG4cVAeAixCAGiOZhYTkmpjzhn3iUU=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"FksYPJJR4/EDoIxE/5vf3uSn+LhghQ/DsN2sERviwks=\",\"CAQ15x82h3RGbrJ2t8+l+aekuQqkw04ZhPxJmIFqn9M=\",\"JKglMpAs+YkXMZ7zkuScvRx5BuvHjSSkZ34QFM65jIM=\",\"CflhMi/7C1zoRgVMTG3HWFJ3bcjfoML4tmIps/ti/Oc=\",\"ua8Hb4k9k5pIkC8hB5duioh1qlNpgG5X6MH2/B9VJw==\",\"BsQCOe2uPnYA39AObP6Tnbiml5moJqtekfA16XEjLNk=\",\"JHAcZ1BSySXyuvEPZh1PcZvxRYkzYmMmBa3PvfWsqrI=\",\"EQANiSyzf7645BXAHhz8Jcs6JdKHrrZ7JH0O/OVsPCk=\",\"LKrM11ejFGMAAhBQNF7/0anltkGC4cu2dlOZew45EIY=\",\"ENm1GzoIa0ErHNylzhca2mU5UDa63Mee8z+Eqv6Qi/4=\",\"EkZm+AVh7VkW8vBwsb0kjG1T9E0nPZVqDIe5F2kqTRg=\",\"FHw53drthjC/G5IklgABb93cXp9fCCkcoWYzWKQdPd4=\",\"LSXTlmFAb6+TXTQPsVNb6QhlmBIdlthfhMtYaIBRf8E=\",\"GiZDycxvfnTyfs3C4wFYtKZRB3Olrt9S/p/vWiJhwmM=\",\"LV1wEMpn50yaTVTFAYjeJsgCouAggNbTUv09W1aCyDo=\",\"MGASG/doKk9RKSkzAxgYRo0FC4TCgJroFvFDQKY1vBA=\",\"ClFKXCJ/TOyV36Ap6N0STDSJWqRrsnwJEfN4DVAVVAo=\",\"J4u0mntORK6kbrD4gstpKAGm5g/dW1wjxjzWXMzk/go=\",\"DDmen2eqQHB6ID/u+wuVi72tzsXKNJAdJT0CaiQZ9qI=\",\"HWs9X26jacJvgl0jYpM+qjHqNewKd8H72eAcoVI+RDI=\",\"JL5RAJVDYgbdCr0LDLuVyIOrMEqlJZixppMG7JgaaI0=\"],[\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"J3rIoxeKNWuQcrt7RpzNV6CmPb8I/Q3XNWAI1TB7s+Y=\",\"JJA73105aKjknGv6/A4o1TnsHidW5pMBqOONq4fGxAI=\",\"FOAlpxMcO8i9LUhQiqT3kcjr0QaI1+VWakH6DBSbhgI=\",\"LkHH4yDs/B2G33Zf179D7Str8nq4t8dBdO1h1XkFxVU=\",\"Ebs83oLom7AEGQfWbekQKbNanIyQ6kTeFmHqKs6RdFE=\",\"CnRgsoCCivfQpb9AZbK5ZAqc+D0ZiZzKAXH/ary0l1E=\",\"I0vma1mhajI8s11lFsWpL0mXt24U5laoxB8p/JSSWw4=\",\"J8USzYVOSDZneS14XtHtfjBWnb4S/D/LDIBBEMk3rf8=\",\"FTKCG4Qt86TmRXe3yJFyGchvqC5ohXoaW+QFbodjqGQ=\",\"HsFfHOjDzWSPMl2SrOkDUh17D2aKAcbSuStD41taxYs=\",\"I0dIpeQV17XNC3W3EmdeculbHgLOb0jSmdWjpImQXqU=\",\"FAN/7tNboJHOPbtOYDMJjQejzFEumBpJPAeI44J6ZpQ=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"CnxJoytaBabXT6re1Q0wPAZuyEOhDsWdyQy9N7pLG2s=\",\"B/4qSraLlPAGvB7TavRFkFyNI00wjVcBHcHTk+a8zoo=\",\"FbJvYdUa4XAXsbnRyQNKUQg/JbM/R0yWvKW/R+imWPA=\",\"Gpw+1bj1JOji3hZ4AC5zxj6+s2Bv/8Ka5Sf7lMYPX3g=\",\"FTqvz0kjdCcI7+FpxJBRRRaiI1NyRayj6iBd8guLXM8=\",\"I5y+xMhK/CGXWkDilhDYPB1xo3jMWJleUF3vAcxryHI=\",\"Htsr8c52pJxIRLflaSAYtSSzDBZgouADtXaHh9evbTI=\",\"Iid43Fv4NPkyDwN/SEfOYqKuY76MuEal4Qo8LrL/Iu4=\",\"F8LvRoRKU2WCiQSsc+URT5vCgzzzX2Wt3hFkkbyG4MA=\",\"L/+clChyfFHGvWxlfjExRwYjdjPly3iuJE1dTDrOSDk=\",\"HRiBgupEOlpc6pgj8+7nCiweGEWeQwXvhiZm0WI2sLg=\",\"GU3+Izn3qgQoGKQ/TG07Wy+t9ki6DcIZ5W7H+Ensfl0=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"HHqm1koSDWV/vrBMhAFxZkJ9DwLwQGwGdImRGK6zocg=\",\"HcGIh8/0VFsH0SK5CG+AucRk7lqvmOu+6KZI3zt0VR0=\",\"J8KDKdn4UZoa2Zc8vHEGNeXNAf+IThwRPMp7NXQleNk=\",\"KJzhVLsCqzOO3jvfey7+jeH+IiWUd0dZhzhlRPPrXLg=\",\"IlfjaLJml8muG+17XK4R77nUgTja5bezxJmjfN4obQM=\",\"G8nV54IKE/nwRfe1RKuy5LlUqNm2048Zjv4yddnX7dk=\",\"GNESxTBaBsFfr1VtWLhN3EkpElBdonvIUA+9MuTfnDk=\",\"LGPoAIf5JJGdIAZ/BQt9ftvari8wGP72+M2s6XaPqnU=\",\"CHezlfr1DV0QgSHim3ymTGQI28CPFzJ46/bei5aF4RM=\",\"BAzfLngo5mqZEhJiszcBzJZpaEnlUy9JJIbWmyd56eQ=\",\"AW6AofP+m4KEk+g9GjFCixxYaz3VTXNe7dJXkwovU5s=\",\"CZSpI+7l5v1qTKoxfGkm/0vrgsPf4DPzdDPTGJimDyA=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"IGCUaAPxjAhbb95aPYdQ2A+bIe05Hifhx77RgNcI6H4=\",\"JPpcBoPC64OwhkhTze2dV9OPM/rkloGEUOL2xJlo3Nc=\",\"AWKCTiAL9StzkUIZ8C3cWXhUB8VY603XL/mxGSGjUes=\",\"Hts3KEqsoAjBcD3eotpOt5UhzEzct2kq40S+K4gPV08=\",\"IYmtrOHFpwHfqcU1TO/NggTGAJX1uFaCMt0BrLPAlog=\",\"GfGy1k483c8o5xh/FvOpDJOXXiVpYlrGieOHiy3nx3g=\",\"DGLPmGaOUXi7m2smHzbhyPF28ZDTcpIcm0b4JNuMYZA=\",\"Fu9pXDLQXIxDQx8oSjOgE4RV2TQIyi90KUTXHu6Fq6Y=\",\"GRan/weVbbadcSRJ0CTYJy4tn76UKNZWLFA7mTN7HBQ=\",\"FVMD15pJ4olHdE8zQ2as2UVPyiEmHTK93HbOYIbo8ao=\",\"Id1HVtIhe9u5tDm8EuXa9ahmGx7/2InGQstJxIOc1TM=\",\"GXIy5Sz+mt8VOU443DBUjXz0lcdJm83Zk8LfWZk9cqU=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"LxeG5PfYGHeIrm/CXGgY0uf7NKiJZBSsn2uVjeSB6w0=\",\"B7kUyxbYFzh9ee4j/pl17JH+0k0OFj28tUGNlrUEwv8=\",\"GVhFJwWvkdSzvlu6uoVgZ8rgCXc1OJfFrA0HD5DjS6g=\",\"IPR+0P/T+i3Y2/2dDapRSw1y0nDRMn4zhAzxeLJ2N+U=\",\"K9zCKA/lCsqoUVNudDLzfIiKZQcWikt54leNc3L124I=\",\"EAyiP42OvPZW0fpcsiWTK2J3L+U+LFZQEJ5xIxw6mws=\",\"AdNZuu81RxE2N+0djkTIkWbrQVTRkNOKLG1Hr+XMEuE=\",\"CniuRzJGHrobkPwYsQDK03Eti2hDJN1XNDzBJ7AFo7s=\",\"GoQ86R4mXkts+KyQw0VFhNTUgYEyR98REkHLRAmyay0=\",\"AUDE7hx4v4VVYCp07Mw8P3HgUKXeqwPM3h2EMcFRvDs=\",\"B2loWa5svNQT6KA1qRkc2nnz0E5sPRhlhDTQVVgk5Pw=\",\"Ln+QBNwJFXzrtOQohGIuAwf4X+LDf6etJnSwmBssDTI=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"F2B/67mIUy5secMH2QMFaiJmc1t0I9qDhD9wcj8Jpb8=\",\"LAJXlHKHeHDIw0V7bTsoTu1srA1D6Tw4ryGJYansPuU=\",\"KyTusmF4YBiegytaUL0Xk4sniIWOWNnqm7y36hdeoBI=\",\"GMN1oSWFT4+/MLChOMy0x3Hbz/ZMd9HGK3nXChPjB/c=\",\"ByUdPoYxgzM/2+nbpPOrshd3VV7H+ZbbljUjEc2fx4Q=\",\"Kts0EwGzlI3HAOSVOE3MEk1TcexhY2Fe5yYwCfv+8do=\",\"FHLMQhvY+pp++5keoGXsHIIrRP5gFkD0aZXD8Q8TI8M=\",\"LDqRkS3CwqeS315DE0vG1+WC+CKZSlwqY1LniZl/klg=\",\"AV6MEG5uo4mKCedmDsh8X7IXJw7pqOux0FLmTz37FV0=\",\"GWtoIVND4iB4GlK7CjJOTKdlOU0vMgGnab672THb0u0=\",\"LqSi1RiOmOxXDlC3DQMD7eUge+52LuiTKkZr34kaMz8=\",\"D79lqkKw2QDseLaN5LIEEUD8hfo0WDAydtmYJul6J4M=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"LZPSOHBL7NdsAiD8la+geD+WlQdcXZizY/kc0knEeiI=\",\"EBFgjsd6EaDOi4sbNs4I3k+Tr4aC+gJrh9iieVtxORs=\",\"EIwECV+Vqfy70DjAeYQpQNgQXFCccpEp986hxelo4ZQ=\",\"J7qybuq7zhU91SSJ2y+t43OpNqxSODA0q4Kp4lI4HnM=\",\"DSYR5z4n7Rc0ndUuE6kK3smDCl4scRXYgj0jaIuk5XA=\",\"HLTmeAzXCgvLRmLt/ou4KeFGpixEYcJx/xoNjbXBl00=\",\"HUKbElflFPrlRhS0ZI1icWmSjdOklqPQIdjdeyocv7Y=\",\"CRnVV6gs1ylNZmE3CQxzSNpTw7kr+jNGvxSQOhLl/8A=\",\"G5nBTLCJcrWPHnIWkz4x4uZ8ryn45umY/iscMOy8lHM=\",\"DwQ1q/qwxOD/saaH3lzAzj/tdM+bsrVZtWmlUujshtk=\",\"CZNmorcn4VPE4zjHz/hO++3699v0x5BIVFdPdfPY6Eg=\",\"GHtB19oIV1m3HCAo41mQdAgxnoxq2ELHm7IC7LQZvl8=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"D4ravhRaV0Yf6aWDZVBGp1oDeFoKKUIiGuIABmSTbjs=\",\"IbiHjHW0I8sfgOC1dLP2LSh4VmOqa04MqjBDppO+9sI=\",\"HeyZ2+kz/20cS2KF+MaHcbPuKXr7tck0qih0dl9k1gI=\",\"LSPtlsUevJxRSJ98h95PoVHNg3jLvHAVQvVL1PTYCA==\",\"Cr/vn7AWEdhuauHBzi0/6/QTeLqQo48RFmsJcYcnLog=\",\"KPYCOdlFmRuDfq60aT1Ja+UgJByLc50/Ice4OO4PlG0=\",\"GK0f6R1FMO8V7nfp/wbi07BVZKpEYTvvOxkfaxLhvYM=\",\"BThE/dmQcRFZCfxRj5LH0Nfukb6xYYDPm9FY0zyGecw=\",\"KPmXE0rpo75refbzJXr/JJh3TRuxj1U7Ip9wB2yXnd8=\",\"Bd1XSR8JbPRDmeR3vXjCD9hy01f10dIQhz0B06AUv78=\",\"HxqFnnzRzCBboaGzzCvwTgsk0ypi2+2J5Z4hE9VOCzc=\",\"B1+YryEvEeHeiGGXIWvXgli7dyh5N/CvjkZPkW185fI=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"Eo1a16CIWKLtjBYZl+1VyMqP9JXNJ+pHWYPRcVzGAtM=\",\"B1xJncDfsM4gBefRPBhh5fN14DvPBpUd4yOdS1b3ho4=\",\"KRf67CLATYuHnUSQqK56nZz38/zdM2NKq+GJtQcQ+H0=\",\"Gobu9Owbdaddl+YheGY/mVz2/fORNZVjIQUoS858w0Y=\",\"BlvgLZTkQX7cuktraGdbEHolRiCS6Q5+qIeveHDA/8A=\",\"Kh15na8eMAq+t/WmYmQ2DHmE71LJsVPxVBH5xirITYc=\",\"F8A2wZ74CFRJ92CmNl6BSCPycLpKXkHSzkrhxlPwh90=\",\"IVHLYX2fMjyjfOcdXHeug8hJAFe5y+jBfxUJRYkzgrw=\",\"JGJKjEv5bPUEAfc2H3TOFixHrIA+2UJLe75NdGXZ8g0=\",\"LAESKmPb3lhlB4d3Y7VyzP21nyBV/xXvIF+oSH+Co6E=\",\"F6iHZOZg6RlAmTte/H0xfKTQ4o19wWT2q26MD9K9ERs=\",\"Ioe16SnpisOBmYc7FChFwBW7IIgM2aHZMWpwJ6my0gg=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"JVJ/CB6rKzJY7Tbgpy67+82HToHEmDb6ohi5TAozC4c=\",\"GGFp3g43wB8xgh4JCbxMe+whKaz5o0lIz3qMpYybV/k=\",\"BtXSh6eo0JZQl5/XJ2RhTgOEoily2G0ZHRJVyZnT2qU=\",\"LB92KOiqruJhxYyJZvXMkOeusd2mTVkCKOYd4Jjk7Pg=\",\"HDdhyMeh7h+Yhx6/r4GwuJpb1TpplmaBaBuxNS8dT6E=\",\"FNF3QpPYuyFCH7pZKVRWyY4+mv0MmFjWrvMFMYcH42U=\",\"HfLSxhTk/ipsrgWL4dyeVs4SFxx8O8S50edrGRZFj3I=\",\"Dyf9kyKtx0hZ2LWOS8JZWydgYbYGrM4wPyqQrkBL6ys=\",\"CirrmSQ5tuNypga0bpW9S1LCBy5vsowGiehLX0RPepk=\",\"I+Cxd5IUSwAiUrwEkOdkCj1HeE5321OvCd4vPdZQ6bc=\",\"KuyWMUkwgthE53IyzSICIk/Diy6w2H5+XmLBHFr10AY=\",\"ExhHzyeWN6WjN4FfpPQNUSUfbgF05Zxf9KxMs14vIfo=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"HI9afr9S5FBNIFsrku9Kh8mb9V/tg/5C7fAWRTMtzsg=\",\"Hu2WKjkayqilnZDTJKmthEfYmPS1FttKKJpLwMVl/cs=\",\"K3xl8CtgDUy2Skm0hIQOuxHtfpmkPbkRPtkrwH0qxOc=\",\"KyHoIcNMJfb+OwJ7P5h30JZu405yJMc48OH0VK4+bVE=\",\"IzGEPsgVZTLl/BKbldEpVG/l/5kovOCxeWSp+k2NFqs=\",\"It/a1cvtwBWCn6FN9jVsYAN3YaAY0M944T04BUZCc6w=\",\"KSxwGtCjv0J6M+G/zQc+3Sy4tebpSZBubvqTVrRxzWI=\",\"JT1/Hw0W1KIbDRTQS5J/CtltNI54p+NhB6nCSB9RxYc=\",\"EvicDYCPcpwZbCX1cNICeSX6N6F/B9nNhrNmeTtbico=\",\"KHOf7FznM423/rmymWh34AxMXW8Vh/JNXRZWctcn1Lc=\",\"KudJLEqYZN4xMwwTHAb53l1Qu/pLbuIRMgaNQ+ANh9Y=\",\"ItJMbFsN38Fi/gK2mFkTjyQopU7gTVG30o2z3R3l/nU=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"DOVW09VyfU5i4nFliPhzvVlbHBoxSZ2s2WtyTEt6CEg=\",\"Lp5zDKS+GdGAvJRckoSgrBmi0bZSO7HAukwQViXkKPI=\",\"BmLQP2rlkojf4gXKVMJPfzNhXEIhLp51m9xRmjdXMhQ=\",\"Ew+33445//3sUoTKY7S/otRQdX7uvIikh29FOL05jQM=\",\"FqiCzlFyNK4JMkBNNP1zBw4nqCTjN+HpnrcavVNqlnM=\",\"KcCAKsNJuCO1tjJnqwf7SsQ3F7/dNEoizk6zR9/xC40=\",\"AmoE6nQGBYvBsIks46hJyk1GktsT4e++0i64hG9icA0=\",\"GQQBaU7WR67cIsXdz6flwGkBgtWQHGzRfnLQU6y83RY=\",\"IQ1RSHrBU70V/ZXnDOYcF2DSyk7TyJBKhae+ch3CWT0=\",\"CwsvG3sBuWklRTjn408xyZq7CTRj30gXF1bLAFZBtkE=\",\"KMIc+TIh5A4Iije36MTk9rTso87aQO5LcwfJlAB2IG8=\",\"YTGs+yNx6tS0ffmm9ueudEkxIk146lXMZ8qvDlgErg==\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"K+vfySSyigTq/aGDR2oaWt0jB1ydArZ54QZOYelIIhA=\",\"H6+Y6I9TBmY7Mf1OHjRu6/bjocsfIRQuLCI0TyrbctU=\",\"IstIjaQk1WuYeGNKx2bEijBjcasjq6uwaI6fvCvS8wU=\",\"HrwPT1kBrnSBWxWdsQlW1Y2PrvCZKiws7GiRnRMaDGI=\",\"KcTs8tjJ1pPa2grsnnQ7soOw8Cv0zPsKuPw/1/6jgbg=\",\"LEoJK0VmDweSd8gd+fjzp8t002A7yDnusvv9eYOYkZo=\",\"FFxWq0cg9q1AEcqD56Kag/sR9vGl+fvCeC9/9Pfxhhg=\",\"AoCcTXpqpiz4Sc1lbJ92x+voFdUfGA4d7kXN6XFCYbY=\",\"FIgdToZZAU9tvbnBpF8nP/hv1kkacpwbTPX6qtg8Exk=\",\"LhAQSlS03uKFsYbSzuuzxSCm8IsPLcPvBxqsGJ/5Cmo=\",\"GqbZGFJWp9p4PpZz9HpXpPGlOe858/fxaGmV5/bekBE=\",\"FDOnjt4kQvKeHJCjXHWUUHm6RyoHpf/yLdYyYR8FFNk=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"AhEyNemDslNTTTNz1CWy5lrXWNmFAQmQ4MxMjAlx/dw=\",\"K75WacrH0JBQwEedO3frnZHyKhl3bZ45akx5uQzbbIA=\",\"AlHc4VulPy/N/TlEjjzkj3S84dlswrTKwjg6QPRZGMU=\",\"Ja87MVecLAInzh++qAhdJ9EwEjbkpGnxVEIsDACjtH8=\",\"EB8kANHoFNAZpHrZvW2AC4IcLeX+wDkUJ2/XQTBxqj0=\",\"GXa/43k2VBNUodZhl+angYMTyv3C9Iifdkf4CPpKezY=\",\"IjrHbe/wamMHYszY25ORAjp4Pihlnrf51XIjgStqvSw=\",\"Ksg7ZDWsRnOE0/538G00nGbRMnTUDDdibA4Ybtc9o6U=\",\"EHXnRL1x2EzSBORlKvqyNvdfpgT4M9AuKsFfBuE++So=\",\"CWhGhdBjGyFw2q6w6Cr0y9XClF9o3HWPBdoUg8JjMBU=\",\"KS4KeozBAiH2fQKccArAvBqeQdw3b9H37lKxrO2Qjyo=\",\"FZLdj97SewSZxde3cGno6y0n7U0BWZVduQL/R87FDRs=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"EWUw9HgpkFQskRVrg7UoP0ils7lvTMml7M/o24lEY5c=\",\"IHkqfAfiNcCNLMnVtO8qk7erh22fZG0PRTjHwf81T74=\",\"HJNCk/IovHP6S41a+dk7wht9s45lTA9pqC5tU6O6u8w=\",\"CtrA0aDriC8yW81Jxhd3gXgYdUHD8rh3yabi4gCxXCk=\",\"I3iERqtY0Q5IVy5SV3EIzw2f4zU5vQ6LqNY1wNE1tAk=\",\"J0W9bQqV/lviv5iLhv3H0XvdYyN3f/7UsO8A5pKlkfg=\",\"F82qOXj32SQ6zZ1m3oatChvFonZyBtUGtD+o33ae4Xg=\",\"HKz6OohQ3s3WWn3mD+PUsGO56vqoWORFXWsNpRjGsiE=\",\"IpHOEwh3uqzs3h4ZMhQ/l9pnpcOyv6meoJmJOTL9Pm8=\",\"Fa26L8OxTSCFLSF74HRNYzY6xb3Irvpr49lOvKgyw+0=\",\"FQYZsJH1MEzMfTZ81I1Lh4ot4G3OXZ1xN61u4wfpyt4=\",\"BrzUgrQKVGPQWknPrkkHwFhyOIaUxFSDd+8r6TwrFJk=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"DGeL97Q2E90sNlRraMoN04kPeJJ8W3iYp58AUaq3GZ0=\",\"BNVeHvhEb9/dllnQYYDddyutMXOGVIKeP2ilRiU0K2w=\",\"F0UUdNCgQ/Ls2xwRMR54SGN8rTErrbSWZHdtmUeiVXg=\",\"Fm8hFs9oRshbvh5MeLyquygj4NTAwnprzsPxwcOksAE=\",\"HS0ARj2Gt2R0rFbPvQ+7f1Bxx5L2EUXx/9FWhkXoPzk=\",\"BS+mgzkG+sY2z3obvjttNl8W2RfleGzNHzA+/4Q5RH4=\",\"Gu4uBttdTi698WOo0e+JtwUQw3rLtHtaFNDGSW5mZp8=\",\"Hk0KcdynSy1MDEA6jJnNlYJhFBJ0OUTSW5fuQQgCb7k=\",\"GjHqAQKzE7yWy+VY8PxmJCXiX8X5OVpCoFHpJ64/ovM=\",\"Ln2Z/EYxaD1ntir8IUyOib68kbStxGJccPxYE4QLm8E=\",\"C6AuZteItNssEOS2M0TlZM0kwaPn5/O1yMC8UPKqgFE=\",\"AZOObO4JFn/k8bYlaSnsiTB/6mI/8ApMFZk/1EubmuI=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"JOqeKyXB0Qlz/CdYEUrATWIpLXVjPlqY2H1CJF0whd0=\",\"C389rfgMW+Sp/nJNjH755LRibZ6K1hKV+UgqW9wcZhU=\",\"BtmiX176++BzjpwdjikdfcxucENJc5cWNvv5VzU1Rd8=\",\"BX0I2hlMZB0cGVem/26lA3ZA9rKRD4VGU8HRSQmnO5I=\",\"Gxw/tccWDYfK5W71qAgwilGIq/lLTxJ0EbNjalCYpig=\",\"BOD5soHwDiRry38+UlnkVU66EUi5Kx1GRyclkme1mdE=\",\"HzGluu/wN+3WkSd5x5tWbGiRtVvwI5jCovH0CkGyqsk=\",\"JOyqxNYCP7J8tYNnlOH4IfamGSTRSBDsiC51e7UVBwk=\",\"FR8Tg3mkNBz7Gh+gm7P8TqT1jwwCE70iE5cf3PF5E5Q=\",\"H4/8lWtfpfbFcAOU6GM0He1Fy/ZBmRhUJWUeklZML+k=\",\"F+yEt+yT/HIEkV588WN5dFaZLItb0c44ef9yONYGJ+0=\",\"A6Z+ch2iQTnGID7fZe5W3r0ttRArLBk6yhDJjnDMI1Q=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"GZqMTGMEj4ySuW4v5zw+8b4eKuMSvFBM1u3K0L+Wlns=\",\"INXVMVYUKRxDGh8n7mN9CYxrJFXgGYcqBr+psTIrvFg=\",\"IE6HzaROUNcrNsmgvviQarsUcctPrqEmK74fFI7ttg8=\",\"Aa4NxM+GFe/Nvmm/fmWGO5iEKX1zILPSyausgK7fUZo=\",\"Gd3LbnA1IDl/VmyJabR2BfkH/XM6dTEzAyn9B9Daq2M=\",\"Ik+HFJCxInFUnlvxIFrBY2T4xvnL/aghQGi2nztYylc=\",\"MFiI+bcWwKrVTwzk7hx0BSvMQiYSMs2pbq/SwX+u5cU=\",\"B5dha246MbpAkPxGvzcIVEg4RkKOUu1Pu94W7NtAft8=\",\"ENDJwZJnLeGpq4a0acbJvfR0/UwHf6KyfnAmESleBrY=\",\"G75MBh6Iq5MUTwzfeHOs3N9pWr4BcSQJ+UJRe/J3XCk=\",\"PzfFKU9YGvDgtAfh8WkazMybLw+rBPxo2WhifOOPzA==\",\"EP0crANRKEkx3xiwbW2Lqq4Sh5ME5lZ+luAkJYpj2Ew=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"L0zpP6b2kXlZhTAHXC3+2SSA5AtQgsHk0IhKblqXDJU=\",\"BIqh44pmw9ZWumcSSYbyf79B4W0a6l1mtW1/94alQR8=\",\"BpMotsl2EJm7lOH7r/RqRkOm1SwoJgOL+60rlqqAClU=\",\"GMXfu5YR30wXYDT1OLszVcTqmjRCi1aLPVSEJk/i7H4=\",\"JQlkxucW8YjxoGC7/MIL9snFda7Y7uepUog4deNGnl8=\",\"HK/ED3G06lX3RJmB2VLiACQqN1BWs+vuxUL3QwKdNoA=\",\"HjRf0nt12p9ztm19Ef5Tv019mQcZT//5Jrb9c2UOqwA=\",\"H4bBmk5BYixc9tKX8/sJZtHd8owUwu8pbYEdzXJWVrs=\",\"BnqcoxTBuYmiWPUwbwIBd1ZnbIVV4V4zFnTf4t6WCu0=\",\"GowsOTxZQO5mqfy3dFxxEYPd2NUzbNK3KIDRU0+9lU8=\",\"LQ/k486nbYsz8pz4XrQmjgCXJwuVU2l4Kt9vO1aidiw=\",\"CD9xwWV/RgNgrOCItWgjV+fVkbMxvso53nDnwFesrs0=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"AQKbRljuXQPJR24d97fsVEfcqRDd9n5hAkdpUUD3rms=\",\"LS++i0qip45tFbRx0DSjHAcQqMsjzWS/ihBbD19sUIg=\",\"LGjROgOPfMIdQDXy+uPOLkSwYHZ1XmTbyVpI74/TLsg=\",\"JVQz5EEBPyi2RcQ5q9ADzyFhlc1qyJ6cyjomBeKvr+k=\",\"K2Ex79ZvoESVTxss8HmMRIQLmsX5H3O8HWpDXRksBgY=\",\"DFDPPUerxNUJTk+qRe+JUOnzD2EllTyqvhJAxw2sVMQ=\",\"Gax7sCxGbBT5V6hoPy3HoPiI8LufIzrK4FaEk/NTtDg=\",\"E0kyeAhVyk5w2xidVDkZLSV6hWDaqwC+esK7BaX0PUk=\",\"FGUuPwGfGJWPboxSH7WzdfdVaRzbTPfMXeTqflRDhFo=\",\"Du5Ls8emKP44vRTfpY96d0ABJh4sGwATuKvBFeQFloU=\",\"GtEJZ6j6O9NthmIdAhxG26cJ/yhTh8Bkrm8wXLsNx34=\",\"Bvw4M3GKTok38RUc7We9EFmrOG/8pjWWEpmA/+DOuUM=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"FtdRpnx5+ZFIURVdOG4TsAWLRoIoPaLSB4cEx1V2x+E=\",\"Le0u3e5Yk70n6FoD1lAaKWiz7xiiDs9QZC1SAf1AJS8=\",\"GsdnC6VffuHC7lboJegO4tqBHvj6CLkNi+7tvuEEkps=\",\"Bkz7ZYq9ZnBqAS8Q4/J+DYybg7Po5SNHdN/sXhICcS0=\",\"CAbRaWOulrrcFixFlfSE/GqM33U9GNM2r/WyTOEwPds=\",\"FIzQafV49qhkySyjj61TQjyah5KWfkQ3gwVznDnDlRs=\",\"FROYTQwcoLJKt5TthqS5T0dQo6W/GXf7b+rJr8hfRdM=\",\"BR+ZgJPk27Tn+OQQE5pl6kR2Tw0q9qtUYbNHF6lWG/Y=\",\"H4ffTYTs17Vb0Dco3lB6fFQJiGgRFSY04WzS01oY2ws=\",\"CVbzdVRvCxn20vMcW+QnlbF5BDQVlNql+YiGutRCEIw=\",\"DxewP2l69lZiwl89xD8fXgUPHs8AmrAE8/xjKTgTAzk=\",\"LUAybpTT3RPAU02wOw9rpu5UuygK+Z/dBdHMfJTJU20=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"Kw7uQESTnv7SmwpQArFqsOAvddHhk6IXh9an+ToBhQg=\",\"G1nQVe2EW0wwT8HnE8Yi0d/MfsqP2qV/ONcYLVKxtKk=\",\"HS1K3+i/c86+/gegiFB0Eu71oe/AIMfjyB/JxqEQNqY=\",\"KFcSXRmukmhWo8z8r3Cs8rJY+frXD+JC9xaP+i0C0uA=\",\"Lx2grU1M29hoaRplSVAG6zcoxuQQpX24L4dGcfddfIE=\",\"KU00NQqbv3Jpkr7mKzzX0qMzACNApL/tdPYgnEthc84=\",\"FuXzdAZrIjylokAfEC1l9ef71neQWy4X5WhhL/lrYCw=\",\"F8G8RNcHBkFyJcedzJ21acefvqZsAY8ogTIcSHe3/DE=\",\"JkzRMFezY1UY7kQl+I7bqYakl3bpR2Ck1zsXkCzA01k=\",\"K4+h5l/bRZiXAaDyMRFMDveo/TclxiBwqddI5arpWCc=\",\"B58W5276o8qn4vJmrns/G7tUpu5XFohGPJ1isXrP1ug=\",\"HFpv8IkwU8Q8VSz0G2i0indZ5j0PxgadLuJHwXD3HSU=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"J33LH4KBDQkbfb0C66bo7fXJewhAekacStmewKeTiiY=\",\"FQc1fOM4pvHF8BkHqRxiCC5uUYLNi4xH+QUbLLrNUjg=\",\"ENn7TcYLcGTo1uxkNyfDlNpzGCRMV2lru0c+K/wnPLA=\",\"BRzbevVa8Ug4Fs8C20d8XCGi4WdgrBc5VBevySzHiXk=\",\"BX10kZUdv1HwsbBUBuWOo31hUYpnVG/UMBeKR+XDTcA=\",\"GlEgOZksDSG9fyQ2utMVo5VbOAl1aMMG+pLmA9QSnsE=\",\"MEf3UdiBQIofWD32d6cxPzQdDZAVCwAxv9r1oXwacaY=\",\"GC2V1kfF8nNjgYA5Unu7vPI/TBQ/a7mLBk2qXwnRJ9Y=\",\"JZc8hYE8fseLJr1jOV9SLg+M+w+mqCN1ubZe8OJMKv8=\",\"MAFuTpSvogTVxCCQjxqhj7vihqlRKg991JKyaOK9TQo=\",\"Deh1mRXnqxugNH59POrWZjRJzz5W37yHsjH3hKahb2w=\",\"Kz59Y/KGq0m7PMsw+ajTN8KocXmQIGgefB5RcFabtrY=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"IvbcUV8qbYRKSU08MH7HFctKxDmrq3ut2fAITOF4Vxg=\",\"HshD73/U1AeNPGjz9pkZfRgYozIfZNFdlA6mgW2y1O0=\",\"J0iDVbxA47SBdeIVu3k3QT6x/ilvUSZuQtQh0ddEhZw=\",\"Lly3hs374MdLBfzHAO6Vk2ZYY01ruRUiUeGtOPPKZmY=\",\"CS9LizDolUQu4/SBEhoEVCywHppFjz5hx3MyjhuIf1E=\",\"KUNSX3tjAty9q/v3rFwnwBh7sBYGnDOzlHvsxowAqHM=\",\"IqYWUfaeJjYBlBHULt+8sM28w7HA9bvuism69msbhIc=\",\"DNQ+pkPBnm7sREj7rh6mxA3ZZl2TsECZZY9OIWsNeSU=\",\"Dm+5rHKjxHVN5Y1bTrzg8yqmUds9FNWturDt9510ZkQ=\",\"Dhi/NlfOWQAvV+iiUTHjlTSt4Q10IxPYHwK+yjy+8E0=\",\"JNMcpGLZ9Z3+bxFLr7vWe7yfsV4mC+01UuBuVZvASfI=\",\"FmPsdM9n27jmaNfqxci/UcV0LAkPenB+KX1EoOMAsJM=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"FZ7Km5I9fL5b2Mp7Pe0Rw85iJhMKY8uQUong8CpTUcs=\",\"KrvDO0NbrtY/PDGqWD6/gGEjbUIzIebKZm0zoBWbEZM=\",\"InmJdClPrvHjFL64t9/65GtQJ2IwsGyYBpt0LVvHic4=\",\"BWhBvLHBinDdKYraFCxXeiSbfKMB0QgKa+WmIdYE8V8=\",\"GCOlWIesr5aWY5nTgb3HuKeS1A1x5cXcJKUdAvmUbNI=\",\"J7uahniwosvZEeYbaPSmko7G89uQ/CiISvjiDvcRhCs=\",\"E5HrNeENsX2EsOfdRRRadUl3xMu5DtG+zpZquJ3nHxA=\",\"HdqtSTD7nP8Br/4Ma8IDSsvCDfCf77T+p8NG363Pmdg=\",\"CWemRntIZFC1HKjVKdauoe+xAe3zHzZG7+HpaVNaaow=\",\"Ju2tkbysIgJgbVedNoLucUF682WlvTze2hYVjQBZ8y0=\",\"Ccji/YccNfNEjuSdfnUx3LUwGm50iAnuY5sVKJZ3OHg=\",\"At4lQ0Dzlon7PF43QMHRzu4m6O+HxkyLPvXuricSov0=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"IprUxxNUxLKuLwEeN03gX3JUiqx/QH2PUvAN23TyRWw=\",\"FdGunj1hX4Mhvhbbmb1DuSMdxR/KeunvLB/1DMlI1eU=\",\"GtWV62DkS9oVkaSn6m+ssD7Rjo5Mf+RKpJScF2s/3ZM=\",\"Ica5WOiiTd/VaG4YobHJOEPqPvuhOGkwL0Y4LmpX5Wc=\",\"G0ZDxHvjapYIryF+2/myE4BF4pWwYt1LcgiWxVwZgOY=\",\"BEQV3x27rzQtEdkF9WmmilPN71jOK/GVA+0NAyrTy1g=\",\"KxsmbUEK16iZDTUOW+WxvnCCL1zwWRz7wAMCxqFQT60=\",\"A8+Aamjp7iXqALV6veufS1yhmfmvNCiotcyH2x7+ga0=\",\"EBPJySNS39CcPmrKr/osRJI7NUksVpG8fp5zQHL+6CI=\",\"GK/JI0Bkng2WCKpSbS+Ghm1LxSgMP0Wt3GVnuDOSht4=\",\"Jlz/Rpgy/yDjXS2k5QUFuOF6TurM21FvNvOnH8kWqC0=\",\"DIPCud86pKh0SU4ykgaWi4myOwLzUlh4jpuvtDxHyXM=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"EL/AD+UmnSgwGyAHVuJs8Sgb4nHRMAsR2Yip68BisQo=\",\"MDweQexGFFObTt67zkBWUkdcEoLupwjPL/ObqK/0pN8=\",\"DLj5y+lCD2rfCemHqLtEFY/7qJq9enOO1UrGqV8XUAo=\",\"LwyzARx2H4TcWwG6eokZSRnQb5QwT7mdy8Ctenv695Y=\",\"EBUabYwuTU3SZbPrzA53iq8FagITn/+cLvJZaN0qutk=\",\"HlCDi7TcT/IWq/hFW4WFAQEH4tZNH6YA9vNAhlXTb8A=\",\"BSiFD/LHzMzQdLqoXgmJ5XznbqYLaXuP8ZyX8fm1dxs=\",\"2oO+DhauTt69H7vVswA0hvV4O9eRZOocak+9lFooWw==\",\"G/gJqvYQBaomKVLhrCFB5aCqWW+52CjPLuJjm1kQHmU=\",\"IxpR7IVlu3LWeRu3WPirvlOSzgimVfK9A/dZOgJu03E=\",\"InqjvQhmQzYp88/SKOIL5X+EmfSlWX00KcQOrbI48fA=\",\"JytadvRc9u7jIQym30drJVX9ef0GGAs/frVGvfLp5Og=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"Cro5ORHAAbbnAbRHJqF2vNsnbQLT7/XnCwzBaqdXCVg=\",\"KCwVf2zHYUIy+XTrEQIS94YTSpZYcv+e6UMM8Fp4JqY=\",\"Fss7BmVOSZelQyhOp9Eu+nuCHpaImw3+uquetwXYKbc=\",\"I2TD90o7GLwq9fiRJlUvy1jIDs7pwFwPy045My3tsgU=\",\"JnsRE6ofIPRdW9HgQikMjR5+e0tWKBhHBLgfiU0H/Q8=\",\"vRh8M36tSLaImz4gAm2/YEcp+ydGD8G1G3s6A+mBLg==\",\"JpE1GjJmGpCASA5R11jPDju7nbxD4QgpNXbBU9u5JlQ=\",\"E8SRUtlB02ZO9iCkfykim4tBBgua5YgGWHcqxhX2xIs=\",\"CsXmiziBDVND3MwJkHa3rJOIwlzWorLRgoABVq0YtDg=\",\"GKfl5uL22SxAn89rwZeNlj+oCTvYNmepXxmEHxqCYCI=\",\"Hudvven/gz2GCr/gn0TM5YTO3lpqIKp2WXV2TZfDw48=\",\"KROeGNFmZmh+lQx/QXrKFFiDVtZze7ctBERP4x4VwpI=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"J/9GF2mOazlc7W0OQLsyek3aVGeuAB5O2ChxPFjkz3I=\",\"H66qJrnUAWp7BgoRJbW4PiIXSsYTHIYNd8NM82jU1fo=\",\"EWuWGS9UO4UDEwsb9oSpvygrQfQAqtAEF3f3Qfl9Qq8=\",\"Gs5A81elJIh8vAdI6cwr0vloqH75RGg1nEj90zPq/9E=\",\"DrkOdPM+U3VjxML4Yz5tj40jBCZnQatbDAyXqJxPdrM=\",\"FfaStlsOSicp0dB6coApoi5qry2AE6JtgOovTtcjCy0=\",\"GZwljxJl9B8DjSNCSdeanXzQ9DU1X5yfnWcdErPYE2A=\",\"KqSHDcE7xIsZ89erXfKC+FV4PVyxU5zzWNI1hZzDgyg=\",\"L6luCNRhPreAY3dIRrYIvgtwFBZd9CB7gyFyKdRSM2s=\",\"HkXfZQirtBt07vOR/mA0ZeFC5zMcGhHm0abc47WvRZ4=\",\"FXMm3j/CeKOrSVJ8O71m5pRAZaBor9qzQmrOzaL87To=\",\"E8uxhGhuToAMA9Mrm7DoYyLAVH/3C9zWtt1iL+nPdyw=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"IZW/Jk149ZBVEelG+iv4/Rwx4lFAXyTtxnn9wuKMSTU=\",\"KJGgTIyTM8P4bLnCfbDNRZC5FXTyg9mNh1iMUykHD/g=\",\"JXdMpH+4HpgNYCS8t4SeEL+Ql0cS8cFbPF5C1IqZCzI=\",\"Ga/Bv8pE+rbdjPNH0TvZ1nmmY6uGTddHTAlYVaaUiao=\",\"KoVfNHFTUDORr1zdjzO6hNm38zDF1xo9TRMIqjbuH14=\",\"IWmpF7VYaizR9E/Dms7ooK8hwLBVH+KCNmIIe1DT4YM=\",\"Flw4ObRvK42clM/RrNqf5MtLN7ZPdTAyTkSoWbgsCD8=\",\"Er+az5fF0bLCNyNUFFX7+medNTmHlDQBCEPleP4zuiY=\",\"CXPUmQq9UB0kalvqK11GeuB/jxQZaLxwSajX0QC42Ao=\",\"KBoPEBgEnOVWCu0RkZ336Tw0F5XJ+x6hfKf25h9WRQs=\",\"AWB9x3ZkBMUThQ/e/J8+JdK59ukLT1ZkGPoUK3h7odI=\",\"EAAQMop3bR4MU/VceVVvEr7p8vyQiwsZshUlO5HAca8=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"D+bjNMAEs29qmqehaVMluEE8w6Un/XcJOWDW2h2meL8=\",\"GSx6VWbbqwTWHc+vlnXMiIM0d0c/B0LH30WNwMckkvY=\",\"Ftn3n04uMolem306E8uj+QVcIu4A+vr5TPGiI3J5wos=\",\"CzyXDDq8gaXGTfgXfWnOYqqrr+THl+rab4ck7VmSSWM=\",\"HjSAtrQxZfLp6YzcaxdQyfhVI3XHRv2TGPbpjd4YgUY=\",\"A+2ZeNaYAg4WJ/veePg9/XJnpSUxXQPCf5NKBJAdcX8=\",\"FPli5PF4aITn7FK9pjRCEVVQp1I+mEDtYOjOHZfoHCc=\",\"A1Lvm7k6xT+/DK1EpMnzWdi+I52nyNpRLDuPM58euMo=\",\"HX2vPVFpk83yq1GZ9/oDjsGLe8HXZDGR3KSQc0tBFio=\",\"GcT7nHMwKSuYWcRHHAVYaS7wFcvVjH1rn49qYXAQVb8=\",\"IiYcLKeY2+oqmJtJWabOWaMnoaWBfvTQyZFH154RnWY=\",\"HIqCKnzJSbyR8yYkKCwLkYNa7OvMgFrdk38sM+8rE+A=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"JB6vyi/9GolQHfuO6fa5HCcNLt+yK3f12WtkwHSXKGY=\",\"Hr/UTTKMEg4lMxNZuVDpb6o7JNgDz+v8P721rsfT8h4=\",\"HUX56VW+Ob4ptyQ15gzLgs7KTdHxuyQspARh+ZZtuhg=\",\"A+aOmCtvmhMXqMctFRnI2ZJ0cQfNFkf1XPhvEnSSGTQ=\",\"JNWDEMI/qI4SdnjP2txpztQ0SqYt/9pdF7+1zGz5IWQ=\",\"J3FZ4xmW3NtxLJoDCxS0DkVwTJ3rv2yDOB0juYJ3Vk0=\",\"A/yf8Aumt7FYTspfubwkeSieBb6Pf64ISElCTLCKFBI=\",\"ECcxztPFHxO58MVxoDJ9WxaYQVGsOIrnEAjgYrEDx+0=\",\"KuxiT2ENlJt+BQ+SQL3GfrALF5gGN3Mak0ARKbq8UcU=\",\"A0i9CCL6Dlcz5Z03xsJTVKiZKGIQ3RGwBrRQhriTbmQ=\",\"D3tGhd405F6OiEcmgJIC1xcACSbcYtM3Ps3I9tYQWjs=\",\"Ipq/JPwzPSZDz1FOyHfDFVufXUVjl13e+heeaecorgo=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"HpqIJwP5/BfgubDhPBM2G+t/N8BNAKs5HVm/9Oqcxzg=\",\"GK6B3l1WGSbElQC0ocgX4Sf/Nb2S73E7i+zYypNOGO4=\",\"D2kcQkFkCHHczAPjhqWRyQaHEbaeNcYYroITp7l2tGc=\",\"HdOngZY+rLdiPxpTmWt5scXb3u9julCdJkF518fFg2c=\",\"4wuBUcWRKfdKhoWD8to29/Ms8H2Toh3LikGJKaO6tA==\",\"F2pKf2v4A6Oy17Nm01Ro1EkhD0jzF1P7Y9TFClIvBO4=\",\"LQE4oKX2AJZNS6TOg5HKr2EOe5y0bs5rrEOGWOcoRgY=\",\"EggEnsZt2LNc3XSMa35Uw9/UzmOTeo5fXXu1XHC8MlY=\",\"HJ88Nt/iFmSvrrDx0pFm8olkVf40o+OpN3Z6Peb7kro=\",\"IDyohVVN3aNcTKWO0hUIZ/Z3yZoa+keW++xMPqU0t7s=\",\"Ag4o9dkBxCXrbUiYDp+GshKRH9lN6FBmPkvEBCzy+44=\",\"ju5A2s07qMqJU+t3E7+cZCMnu5b1WnIA9/GYUaJRRw==\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"LeLKwE0j6PhEeAGOQWChzzTWbs1rTLjKZzebDf7RcH0=\",\"De4QS+KLqaRJPgXRQHIiNhCnfvZV9kao7B8lQUawc50=\",\"GYVG2x+bMHPFcM9JN709cWM2uCZ67/2pXeuq0nZMkbA=\",\"LfEMeFR3zPKq1UhzoJn3pSRbeheX1LdpLfNaAaQmXgw=\",\"A45rgDtysi0H88TU2oXVg9GVLavm9Mv62K4W/+Wq7VU=\",\"IP9mrZ+QVuigxRN4X38aoa0LU+4wVCnF0pnss7fT/5U=\",\"JmLkzm7wFM+VrhBB6O6PJesC0YiiNL28/ypP3NIi+g4=\",\"F0KZsn0YDQrFnjH/sQGmjr7lteF+juJRthzcLXO12Ws=\",\"LNc8bORsZkurdgxNc6fwUTLh3fwOwRPps3+RRPehoko=\",\"HJUaUBXr5FiTqSrxtbUWiCmPu7pHSHX3ub+X+qppzfs=\",\"EpKoLsNI/GOfYcG51PSOGnKfjk0pconEXeudeSRafGo=\",\"Cg6xZJiVtwKOeyhvFHzUdlX9k4CtlrEvJdTVATTxtiQ=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"FTh5Jn/lheQSd6RwlcLnGlVq7MibiAVJo+ZZiitnmIg=\",\"IFZHFe0XYB7eRLDd6qt4wHsk18OEsqJ4rlkCrk1TrCE=\",\"JEp2PhCw6/3qStbhFb/GKUq4WSUVoPEDdQ8j/0dF1Ls=\",\"IxPeXTUKCPg6BvYDAWJ7UhcGeOxAidleMahc5jnU0/o=\",\"L2HHo1dWQnKmwx8dSiw31o+Ufrrl7wbwAD9Huq+LJVE=\",\"K6VhggIr/KqUsoxLrHT9e6s2ji8XsSOsp8rTwHN3un0=\",\"CQPpe4awPWO9qdAVz6xOHfDH61UxFNZgPh2cxt71or8=\",\"F+8TallQeIfuN2ydAxVdVjj3NpWCm991PyAnyT9uD/Q=\",\"DSz5eA07hmXwe0hfm2HJetQ1I7UriaIWF1+0eVlrQpw=\",\"LLEMZxPJwEH5iOHRbhl02zu/ZPpqDdcWZU0vPX7j+gg=\",\"Kn+sD3zOFnflNGUgNHjrKof0paz9CsaxCyQmGWfyZcE=\",\"FQ8aMlHqFCzpyIY62t+Qj5i29Oyk+ox/YINOvagF784=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"H1+fCp5yJiQqumhUWbotCHMF280VI44NYVN/vLTo6lQ=\",\"D+x3g4i9KfH9wBcZqirPu9B4c6TGKMqt8E7UYaSbVzA=\",\"CPu4DYrWflIDDFJRLzlH6w+iV+emvJfbwYhI7WhD/bA=\",\"Igrm/EoUEfkipnw9IZHRb6cuRIWIH1xE0HrRsw/3JTQ=\",\"DCTbFE/tdz2/SihfaykvCX5zxCELZPYNBHEJlSYSUgc=\",\"FT4z2l+Tk/sU3l+Nn/Jf7GP5woRWPJt1SFuMWWVxYCI=\",\"KBkO7IkO1PtRF2ohZDyov4pMbR3c372nC67phC53Hg0=\",\"DTUtMU+KZJvtrJet6cvlHLtMHXYSS8t1P/RhJK4sZx8=\",\"BYlFQiL4gP9ns7Z3GslXkRXvmLSlKRrR9GbDffWfegw=\",\"BweWizYyfre/QtiBkyIl0eapy64+mp6xo1c1dbCBUl8=\",\"JNFbkHWEgi2U7Tz7B2RKHZz5hblKwI+6u79QcMo7os8=\",\"AtUcSLY9l2JWKPwanCZaKfS1rBodC6gH8/HWpyno0Nc=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"DF0+FoGvjHMWNaZtguj/pS1v6a5FUcMdnOXH6fFILzw=\",\"GfVzx7uvSvV6sRnZw0qXbHoncOmWD4Mkv5OOZ6QLtiE=\",\"DdU9k6FYgypjrgI0bPsFD0qr2T0sN2ppQyK3ACCvc5o=\",\"EiFoRxvkUeH+I4OhqCeVZoCE1GAuE2w1MxVq5OtE5f4=\",\"GBFx5q95IeJo+OTKAqad8C+Z43TwhkM+LYQ4RluHj6Q=\",\"IP3kJK+xcVFr26WroTAvPECtvG32AJlBzgl44QBfFXA=\",\"DJmaPAdpfNbkYyEQhioOPNbyrn6tWgxi+D5X43UnJqw=\",\"GB5DNQ1kt133xXgIBgqKRnMEqbEHZkJll/tIUBZkLRw=\",\"IvlBQ4+2OND24QE9gWchSekb3XlIFqFJQmgwoUC6VSA=\",\"J7yW3woD+lQDSd8qRmMzCbjg0pNaYkx6pRzYWTc7HTo=\",\"DaZXSjHLCwEEgN+2rTMBVwjnHEILjzZkGGh2r7i0i2k=\",\"KpMto9ST9dIpoA8YvcaxOgB4PvEFEO8C04NqlyjnVlM=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"GqhA7HkF++1LImdchMvVJyGNtr3SHpVY/vmIYLwzdgc=\",\"LFEHNTwO3I4FrTayd0d8nTqy0m/UPdIlKHjKgUxIRZ0=\",\"Gs7SHK53HQKUoWML5nV52BJFCT0nMYmKcrgi+Bhe8/g=\",\"AaJKf6TW1UmK8d8vhspmRxo0DEdHoeJPWSqnZnNGqqg=\",\"KJyvN9xMZP2MZnGAE/w/FJKzx2zRynExlq7z2VKB46k=\",\"AoTENQXfj6fd1vnqdGTzysqKOztV05USo4svN7dDeAI=\",\"BQFInnyRoTCGyFCnF0hI3Te8t+ai+FccowhkFeIqJJo=\",\"HZEecJy6lBHPIhOSsdjo8pLTiV5c8lCXf3vfckY356U=\",\"Jux1VUK9RcLElo/MmBksrCW7U5z+y3wWySbt/rwN1Kk=\",\"IRs9gS+Wh0Z9YjhhkJkJ6KV55mwTXQrQ02A4EW6FjOs=\",\"GDX1xEx77Hv/HIFMONEJVycC7oWGDCl3ZQ25EN1VXbU=\",\"IrsIAQzddErOhcdYxYV21rNTymMm6d6MpZTFe0Cna0g=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"F4vb2GPf0kjbfMYIgbF5lvqMsPWoBro36BjUk91NBNU=\",\"LC/uvCXD6ZEfvNfHfd/I/toONrMEXoYFnrJQfbhLINw=\",\"HY8JJOL+k7eG6hyjLNfdJoCX4RROXzhoE+QNfeY4VBQ=\",\"HXtCl9W1g7wA2UbqLUXnm8o7hp84iaPvi2mG7oBRVgM=\",\"BrKeimzYJXEwZSPleoiuLxxidoivalerSt7EgHHYZK0=\",\"I/cIAmoHOFEiSMBaWlHcDwtky9UMmPLAATAaja2hVkk=\",\"D7m2dgbRtwpZr++ZzBW1HM2s2KxBKFjjf9CltoWqEYc=\",\"LlB7gIcgCnsU18hGUOVoPveNflKBtInUNSQgbO0xTNI=\",\"G+wJjSEOBqprgARpclu302HajxBuPfBv1XiLO0I7/s8=\",\"Bu8reEVO5fQziKfqRyiZb8rLjAHGRFNPpZDeHahkIXI=\",\"DVZi8lVpuqoLENZhQjePD/MCo2VNoxi/o3CBK60qZvw=\",\"K/d7bAqhSaecaV1n1kAFyQ6Sa0SJAIWz/mMbSo2mR2A=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"G9iXXJDKTjVvHDfxL87A717PSEc283X3hWa6iqnoZCc=\",\"K+u0YEPGddjUsT6dPCQ/SdpkZAlU/V4ZQCLIRtac3Wk=\",\"H7flTADjgjQ0ggaxNuF9tIdDoeiDOkFG+QUROWAxS+E=\",\"D6UNVE8ENN9I09/c/dFkuevY5X16YL5muHkpSkCpw5Y=\",\"KD6mE5tlMmZmrwTZkT8yAPm5MGeGe+HyQxeW6a3Vvaw=\",\"B1isKjBrsywQMFeJIf4JpdQNg9lo7BCq0xoVp8VtqLQ=\",\"D0EwiNQQbopGv3y6BG0fR7f4p0FAB2iDXYU4MOoA7zo=\",\"BGY1gGnVj0eGssp4LcT3pnhvzoiYP8+SdbmlhQ+BTyg=\",\"E4XyOALWvui3Z0NWTdVRDtEgDwlK5sFvA/+LTO+gcEc=\",\"EIBy0ZfMebQYhDagxQhF0kXMv9FICkiCryzIg1HVQZ4=\",\"C20pf37GZ8aNXX/3rvSCWd3mLa6sJLeGjg+tkKs/Onk=\",\"DIJBj69AO96OVRVU9Mi+lFz80feGFclSXTxgeTCwq6k=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"KXsaHG+xmp8EkCJtI5NnlsqoxHo5DOXjQU2RJDrf/fU=\",\"HY3gXdM/tlE5Yva/FAbT2kAgZOLTIADc+6Gq4dOaLZc=\",\"GawKGKKXYf5JaLqi+NTU16jSQcX8XLVKE5l4c6S/jw0=\",\"EwCaLhvlCzU7q/v6DJ/Eg0ESXJAoqT2ZsWwxg14hkc0=\",\"DWYJlYQs4ZFHatBkpVmeLFQV9Izlc5LmbmcaUDowsRk=\",\"5Vh65M/UFu30NKJjybq7RdeTobUi/JbnhFAF9RaUSw==\",\"EPu8QgQ0kWJh9s6V0cp0l7gjcUN1cIneLIEziKzDBw0=\",\"GQ0VUHdIs47F2Nlsu0DLzNPNAE8fUA86j9+dndBc/8g=\",\"Bw6Bxc+VErhQh/7EsES8rN8OvDaTng4z8SCVkpsVP6c=\",\"IFdxcazMFx3hKCzvgnpbP3YgwpVmWYBmA3lH2hPcCfw=\",\"EFwC6r81nJ+xgMERLlYLyJS8LEU5QfKeG1LCjA2MbDE=\",\"BwGYYjKyRx+btwxwlB8HMsWbnRwdes198rXJo9EGM5c=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"C9DPrqy1NDvHGBjuxLqj6x9z5czfTU+x5YW5MmeU2Ow=\",\"CrbOn+mtE77u7bU1+cx73VGp7dQmpUqbhbbyORHby44=\",\"IPUCPR5S/v7hJKtC9esooMGM6oh+Ogu3xGJu5pSUaYQ=\",\"GA8O5yNDszzXCYmQqb8zq7UJ1FRwD2AtIwZ/AxoxSrI=\",\"CeAG8+hYhjcLwRosktaxkF2i4dc4n7v6jOKww3l7MgQ=\",\"DNgooXM/f+hOtWSCsMNzt7+f/unHCTOnB4LEYQSnq+8=\",\"FK5QQ9lLjyNtdw5UNdNw4HvkcFN/qHNKpiRT7y26g+8=\",\"DPxG3tyPFTXOq8dQfLW8fcJ6RLaeuNeZ6gN7ncDLSb8=\",\"E9EM05RH5l8DvMJ2V85GuPS58NbQ2QUuqnAKqsTlYgQ=\",\"AdGdQQZQOhE4OWhd6FL336HM0hMVUuGPnmJ5m/29OU4=\",\"HB5X1i92+IU5q3/XO9dXfDWKrIv9vgwJU8zszvVbHHw=\",\"GfLax2I5IyjDelpU1MuYA4ORgpcHjKL8z4YFxS827kg=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"ERBAltUfEfjbgGhTpHDh8oOO7Cq+9XCgGnvIM6J1JvM=\",\"IDhGFR10OU0yLs79giAsspNhGS/GaS+N5MB4jlNkv/M=\",\"KjIU3InYeUzDCPCy/tEkBCbpCVh5k19Iife86bBtEiM=\",\"KWyqOvq1ev8M6sFuzwW2iHrmmBwmO2C0nqrbvfUzKnY=\",\"LKYzsowTQ7fDyojDtvT52hE9qpMoBibpizx51pMtOTI=\",\"LGJzK2k5OkSVFUIFqbY2ZQogEnHaYLZUM0Ga6PRUPyw=\",\"BUog8bzhdLIGP1WBqGkT2e21trMN52NIqIHzIK/NTA0=\",\"EtvI9MFm7cJxbFdiSK9oG2ntlP+h5bO0hFnJeHzjlWk=\",\"E9cz0BjtfG9KHkcde4pvNgR6ycqTFn1/CqZ08XBP57Q=\",\"K6obdSoJXA11Ut+2XPL1aLR6Ey/9UADLonILqKxMGKE=\",\"Dcl8+s1HcbQAujXTPL67pzfHDoTwfQyjfboJOiRgyUQ=\",\"LrcbonZKclAoG301Bt6vBBZZPsNCjfGp/iMS5mVB8xs=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"JKay9jKC7Pm+CYj5nQsReYyjPyyLzE5Wabx6JWqzWUs=\",\"E7B0tU3ljp+hfOY1bTpto9gAQZ2acXDjuxMQ2qT0+W4=\",\"JxECOuLwPAOZOZd1qMoBjnuR5Q+0x1KbuwnVzIjcnZA=\",\"Cfvx8Mn8KOkvIED7exMjc6Vb3vB/kAnDrv0T7g97Npo=\",\"K1oboKRwIINCSwRYaa/4aAOIKQ9LFkzC8CKxbrDpblg=\",\"EpLHYq1qOr119erWCLjy+Q+MUot3KkLXUM0kTXTbLoY=\",\"CZKC2En/rJg7xs2ZgnodNo3sQuf7vt+1amlHhU9Bd7M=\",\"F26sfdJixD//PZNcDBHbPSOwVCpuXgdQLbzqYzrkMQY=\",\"D6ojKh0M6ygcOkKPPmeq/g+xon+9WMibMUP0ht3l2yc=\",\"IMyow5FWvp07fzyqBBr1LqU48+wXPMzAs0l6oGi44aM=\",\"FGeZvuFOlsuTFl4wMG54vjItEbT/AIrzFihpidZI69Q=\",\"Kx16j/wiJpPqDVOYAo1gQry/vOaJSq5secAtM5j+Q/A=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"E6FY+dZ9SzXoGH90FRPoGMMqFenOPXrRfl4P92hhBzs=\",\"K2SiHZEado7Y9CQJLYW63qChQWmdQbsxtE0FynZ39iI=\",\"BnIfwFFDamBN8KzXaUdCbdlGQDTHnQL0NOvq4nC48RM=\",\"H/7urk9Udde4z7cj19rtCU4YlJUyu39HY16nKQ0nt1s=\",\"CU1GXEE9jza4bxodLPJj7IGiWI/jeErWx+er7LLlmFM=\",\"IF9f3q1c6D3IAAsDIHQdQcnSxyn/Wn8M+KzCyHXNMlc=\",\"GXjZkIwRzeX0VuIObrvstNBvzX4x5ecKwO+rxyGqio8=\",\"DbUQkvtWVNBOJNvKJn+67lN3a95hb0+Hl1uXWc2DMgc=\",\"CpPAK/2+TBeiBQaxpcVsrzda7G3uOwsqCISkixBMAMo=\",\"JtS9AEf71yNpyPSDTtgUTF/yikKuFrVoGLhCubTWudw=\",\"F8icmA0hShJziik5zH/EJUBq7ZvpqTLgxCeZFhDAz3M=\",\"BJoj7pGmwHb+WxNctvkqgIHGBK3MIcjWRWMy3oBCAmM=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"E/llWl8VMiRNTgMOeCyj+dI2+NMCryibnAqUY3a0Xz8=\",\"Jx2K7kilqNxr2/KaSRsx8kxx4CNVSpJpPq8LxopvAnI=\",\"JQ9L9mVyxNCJxz+Q4f/tdjiuD5JlIylYkc98dlq8wOY=\",\"FVwg0A6EtjTUiExCNZyR3y++HeL3UAZncEHA5wvCOsw=\",\"FMLGogmnvGqm2Xj7mU2VZGYTro5rDg5fXMj1cHdmx7c=\",\"DxK+JhGe3g/dtjk68i24OPJYE28gMf3SI9zY4b6iQ9k=\",\"Lv2w7cgrTc4DIwiwR0XdHx+7u1ZAvyixiAMeDLLhwd0=\",\"H/NIQlhbhNK7jJFRs/bGX0i4Sk40sH9gGSwTps4Ip9Q=\",\"LZ/DfUoiwfGVg4gDlB0vYp5p7u/FZpkJGZdNjnqpaLs=\",\"Ibd4EgwOsJdJcfWiTinCBAQvi1CmG3hbdhG4wOzGvYw=\",\"H9Nv+betzxs8+mqzF73+kRVoPalbKfhMThE/puVca5A=\",\"FRz0fMLoLz7qCbjWqoYDfKr90M1DqF7PX8PTFDgOmdg=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"GcjimVKrTQmEvx2pIuJEj6mRDAEjqZmlkty0c/KWVk4=\",\"IzMfZc9opzO16BQtr0G7LLxAssM0t4gg6ShSY38eh6s=\",\"Kn+TimzcZb5sBxyIB/9t9MSKNr+9kvVf0GwFeki8iv8=\",\"LBIdQLlFhVQ8uziYCqPjIPW7Rg0WX+2Q42fyeZzB6K0=\",\"IIJCfui2UIdi0I34L4RJxH1LSxFxZf9Pof+UTWO3TX8=\",\"C782RzcVpr/rK9RrRlCy5ItPq7kFnB1BZ1+nbYgO3wg=\",\"D8xFCV7Vo2FmzkAz6RyqJEbZWUkFtlK3tWv8vn/gP/Y=\",\"JwyOneAl9EYDY3MNeJwfPe3qM0NFeEHbUW4Sm2cMJa0=\",\"Hpz7Ww8d/SRl710nMajV0mtUecxrbkOHgyMeWw6AX68=\",\"GIT0755yPMQF/kmANHPr2lCAcxtIeOHTpRCPsgiW0Us=\",\"GCuJMvuihbklt0VDJ64qGu9zmwiL+0fc1nVzC9Gq/k8=\",\"Ii8gdb9X/AWaJH1eczs4KP7BqsaFCaLA5KjKH9rakPw=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"DvTHbkLffm1OcbU2hy72gW1i1kwGMivarEquZc5tWf4=\",\"BOKMWSE8woz7eyEJG8mBaYdeRIgYi3CjhRl1iAJax3g=\",\"LWnBpIwb4reY3XchigZT977Ea977f1XN4+bSj1ZScmA=\",\"GY0r9EGW+B10dhVU+AzBaero6Bf0TstYi8ZPYnfx1iU=\",\"E8i7tWH+EQlhKGXuAIeGxdUBWOQtnpG29SsCUItnh00=\",\"HrN2Ba8mLONohMA5Z7/DjY9iXggMe760v8oH4lRY0S4=\",\"Jc2YaXX0y3ZeSo8XcGzEQ4Z1v4q3sRBHDYjeoaZPZq0=\",\"Bx0CJosImZKo1iJA2U/hcb7gg7Gi2bvvzjzHyM/1pXc=\",\"Eu5Tz2nJoL47495ReJ0Wy+81lhxhFOSwEkTYFKXO06A=\",\"CUrMZF3C5pKQIvS0uUbo9RrFlfsyAAdM3iS4ZkO7/EM=\",\"Iq9BsqVMz1WzAws0TbyC64SZyoxnwZHUtoc7zbdjn50=\",\"FMhzUv6U2Sniau7cJCHFgSt/u8sAp7IKeYd+4IZBZ3g=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"Ic3RUq91ERImfKWF+YsqvZv3jq57xATf2ejTQBCvfD4=\",\"INOdu5xRiGQLbzCr7WDvp8YUM+b/7q981zu9LXE/Vbk=\",\"JkLJi7m8926ztuP4bDCbQA55Bx8Sv0YsGfxhKolyK2U=\",\"LCViwpS2VQXw/7ZHbe9pwD5tEyT9Ltcxk2imHH/Gctc=\",\"JlpWeYXqIhQmMokZw+wbzPRiUW5lJb7gHR2BDBcuiOI=\",\"B/56LlYJCnV1elSiehVxHJt7NFFTa2HmpVGaOgc6Wp4=\",\"DqY/G3JYgxpPCHxTgnmI8KUDMXAYZhnlE61HCslpEIg=\",\"HQCCseKro113tB4/ykakUmNg6uLR1J175qRJjzFb5sg=\",\"F8exjY5TJIZ2U9RKdl809mU6Q9J5WwQJAKLgtMA7ryw=\",\"KeDKjcc8ovJbTdXHVr9TFrJb5sCBHmLC9EN/25p+J4s=\",\"Hx5+JiAeYZYp9mrlo8Lgms3nAENsIrH/UFKApi2w4kI=\",\"L714kwWVBXn3ArqHd1NMJwgCinhFFz8T4Yd1LNxdmMQ=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"KojGwDk/Vvpj6ONA9wjvr0CsS4Wy7mgdOe4aoN/jluU=\",\"IKMhSXqp548WpZV0kuPqBCjSJEIFZkneUtEVscc7EHk=\",\"HwDV2ioEmKLBNB8WmN8aB4DFFpERp7Av73mw+vMtZJg=\",\"FfGUoYfLpQGJGGSYSm9Sz6LUvGO6KjX2FInHDNZR6bk=\",\"Bc2F/g/Ax1wCf04/G8YochU5iOqgssogsMtef6Omh+g=\",\"HtIerxaz1mG0TfQAPLNjYYQ1PSXe8ZuwS6ypM6MULng=\",\"Kze16IzKINK7Q/FxgJG0D8GrDqc1D3eloM6QVwi88t8=\",\"Iyx/LeEc/n7jxNyTOgvQNLMsmXm0jiypZsamy864L/w=\",\"CXS7cFIzATYNwYH6/6SjHanImhWNRGz58dDdB41oGl4=\",\"BiMcF63N5ost9VEtUTfkIHtasSe5ieVRcQp8yHVi/o8=\",\"JpTa9dZ+Z1HDhRHVlfarUgyimdxS7qR4OhxvuvhehDo=\",\"LrVZYOyrq/RVpJueqduYAaR/+Bghc4G3kbVGsmLfWDY=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"AuN1yk3QYjWEwL4geGUsfg8Zmer4T4Dob2Fh0SnOdvg=\",\"IG9xYvXXcAt8zmmB8HSLoIaV3PpUTrGpAyByIP66vGc=\",\"F2qLabEqWjJp7n75ggRLmJW6rrhZOJANfvNaifk7h5w=\",\"DFix0zGSYOUozHEuLypsYG1xHMoLKFajDy675X1fxzM=\",\"AZsT4W3a14I+lwch6/x+SnxlY6fj2S3iE1hz4OYOdQo=\",\"Ck6P1EREit2hgLDGo//TICbwZEkRp/T/hXl9foNPs4M=\",\"GL4qwmbj2Yg55e+vfvXxer39a2/HKeHxjYNOmjg7q4M=\",\"DFZYMHS9bDpn/dyU+EDPe5ezUlbgCmR73X+ZLnMeth4=\",\"KKscgPjYIh3M2IGHhbmVqv8F4X1P2PVWZLNylxX2dxU=\",\"C4hrL/BtbT21cLIGCpW3XjoIXXTG7Z3YxPlgZat3xbA=\",\"CEHXRz1F53mDponIvzhAFfMjg40y/mXLmZF4TbMj4l0=\",\"HB7jsTRq0sKYt659g32M+Yrxz7eir14dBvDJqCarG8g=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"Eeemjx3vtHNpp1etHUfqxP0S7FTqpMLzqE4rl+Vml/Y=\",\"I4a0LMCY8ngZcWPqIbn2dYx78eipf8mdDUizKckIaYs=\",\"LR6PERZ6OImxlMeU6FZruS0cYigH/FGURbsJqSwQ0Rs=\",\"HpmHB70TYlyVyVmbrjJh5n8tUX94gFqlA1a4peZ5JCc=\",\"HGty+nxHFovAwTtwryGLXzftmXfxkDxkxrAxfNG19zg=\",\"L1D3nCyJahJli6FEkCPwTE26LGjjJ+5Xlug7bMe8chg=\",\"BLFdvBgLhjRpH3Y6Ahh5FrIfapsjAwLNsibJwgsfVr8=\",\"I8CMd8wO1ZfFN60SMlJOf5zekiqjuay3qODuyz8J3KM=\",\"JGtVy5tATnEPVDASkgj9L30cO3G41dGjyVTKMm/T5+A=\",\"Kjx9y3+Ppgl+XAD3gfJ/iEx2xreuhb0Kcc5Tf9UDiNg=\",\"Jo5ut5V4bsqvA3dS0hSiQi6tdPSNgA7X8U9LF0xT920=\",\"Baw5UmGK8zlGbLhCjDCs/ZN+diV2CdKZ8TRtcvh+2Cw=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"AbK3qswluUHkoD8IWgmncxVPkIueXC0g0/Z3ecpEiJY=\",\"Is3KgeMj2xJu7cLTMWl99fIVfQUuxPZuacFzB73RVpI=\",\"Jn+WYe5s+u0v1OTIFAw+Fo0WIy+yajwqJRe2pImdxRI=\",\"EM6GPZOkeqhbQh4XyW3QsFUQQY5BxXazMXcKEL1NC6o=\",\"DiajXmQtViCLyBMZHnmAvJuM8ARMpWS0/32S9KBBCUI=\",\"Iw9ulfFwg2yJMy5o9FItwm9Wvm+3B5lYyxdXcKrDT+g=\",\"GDizb9bw1IjZ1wKaUKhSBRGuqXULppyKfwjHEaxfnKk=\",\"BPGb8Aroi3yep4dC//dZOGd2D61G1lPqQHcmtFLNxAM=\",\"EzYZ/VJoocA7JIbgp6GrTouD6yVAwrnwIVnD5IfRlgI=\",\"DWJoQBzCUJpjPc6RdAf5obVpxvnlYGMCIYPkvnZRoAY=\",\"A2XXlA4cU+3qCCUe75pVKckzekCJJs4n811WOJ8tDWM=\",\"El+IA5/34N9/Jl0JAYgJBY0+OMd5B5hcTIfHXYp29RU=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"D6If4+AxTS50hqleb+742B/V/RtuNKRWBUeH/YVFPmg=\",\"KVGYTHr70D2yIkWjfR3wVesQnkrHNEEn8sNdz77Y5zs=\",\"FWv1MQ5rdqPMZfdMWFk/8UqwUt2dD8CavutKlf3w3hk=\",\"B3T+Qgw6sQX237uOsMxu1PWhMpnLy/qabiDQHKX4NOs=\",\"E6fx9PqB2eXiTWI2EQ/TlSj9PCFvDchqDHmyxDhHBkk=\",\"EBnS6GRu1/7tz8dxafXp/C3XGNrOX2+LmmdjfZM6MEE=\",\"DGNlP8Xu98UM3n0MOFb5DisOD8ycWxb83dHpdA+vmwA=\",\"E0P34o7ekMmZ9zElQtD8OdG8DTxlZEC24XCm87w1sPU=\",\"G8zKK9CIBZGyDVUByg5BNMkmxdDZe8cNokxMcNzGFwI=\",\"InAGB48AFCHTSI8b7D5wpp2KUUgO6HjPz6JqjKr+mts=\",\"K63ZuTNJV9QbKICMzuvj48VYB7v059GZfYt6cRIXBLY=\",\"Ffyg0ZA14WT4/ss2gi8msH7+Ev+y2DHEjl6pzIJYt1U=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"IxbDKJhOOo0l8qJvpcjSn3YvcLZv1kjH3xJIxu3rzdg=\",\"FPhqRINHGWClBeQAua24dJYVgsQK1PMG7mHKFfdp22A=\",\"IkSMxrWBAcJmuUhJwnbAtGn0QMxWmQmCKP4pOj4VYTo=\",\"CemM4CiRyX+vZWIM5jqSefxcCsS3rQBzoDuK6JUWIKs=\",\"A9gNFOhfCevmhA9axPRnVoaGz8VqzvQlUNjYwzZ3vzo=\",\"A9hXppimSAFzCzwRRn0Xy4Vo/bYmy9zVpVhpEuVYwCI=\",\"F5PHs/dfkR0Mf0xkt056HTRKUkOHdNQpIqJF/VXPEOY=\",\"Du/amPxWsLLyRnq0KajlE7XU/8ork1Xei472RbFHMqY=\",\"C378QwL2gmOsaClNyJYGKDFyXkvbHSpujaJXKqT/hHE=\",\"LEs3CgUGJ7ymCyZ+4xVPBwaXW2zZ3w+1vnYWLczSk8I=\",\"FLNfUMTpEDo0Us3Gj9TbAmd7/p3MnXYZ72IZeHgXZYg=\",\"LlmBVfo0rKPssOZuKQ2ZuaoIBTn0YelzS7rOjHK/LGA=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"L4POh73neYZbTMxe/znZvS6L0OzJws3qSex0cpdtkj0=\",\"CTOhkxnuolxS8JYgf22KLqkfpTEpH8+AQ2rm67Ktoy4=\",\"JjQ5ox5ROoK9n8jOngdN9OJ+WWgzggGbdnnKvlVhgzg=\",\"FYTsu2Sk243S1cRgjtJr2g4MOMETCyjMbBtDCNz0DkQ=\",\"BJ55BEatcmI8rvm8UDlSmdAiHCeBaGoEQVGQ9StRQ6M=\",\"ELN3dfGO2VjcXa5AtEWyiyxEE7X/1nJJEzS8c0cCdLA=\",\"JHAdTOPTIGBnfgfxJn2fflXUMytWN5cAzPZO6dV9HhE=\",\"ICuPsiHN7EoJKgNdTkVFKOrwsxnWceYKBj9MByTNjBU=\",\"HUN2i/rlUokUhdY86OHD7thlr55gizGpJfSjGphnWGY=\",\"AyuUc2EXJW12tvhaAfOv8eTZVOqryaNnthyg2LvULDc=\",\"AyMbRDTfhJNqgmt2Z6oz8WGoZgchlzC9eBQuukvqDdQ=\",\"D0XeXqkBZePaERr0p3dSBNSsg9ur5OrEGr8xhIex6ZY=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"LKLbZa0iS1Gosk6AQs24dWk4l/1VA7x1HYiPaV2WB+w=\",\"BEko9VKFQ8f0UOup1Mtdt+WLgIG5jH91IWIwOhavHtM=\",\"JzMmC1eAo9t8tj5PyCOGSRohfUMSx6k+VHB4lOOyDaM=\",\"JPcm+xk+YnyxDe5km04+IkK5SiUkl0JCg12z6Wvv/xE=\",\"AeOPbY9jBq6t6AJUUACz2kWrkMm/0kBdvHZdGEuR3wg=\",\"CK0ajjfqThUqB81p3mtg5B3kmtEEf62RlKoyhJBSuOU=\",\"I11LQljcmC2tnLmkepYwiKWfrl9zAJPx6c44er6Ddlw=\",\"KwHakZn6QiD5XgDJjKyZbWURP1rxmRLLMxxT+cUjNPs=\",\"HtpFt/jt8kys05jnREQ34wZwu95hP6y58eRnaw0/PTI=\",\"EZ+BXDB2KId9XiIru7/saINPexM4v6doitr4xujBMqg=\",\"Bflr8FMte5BlUw1Hd/qYsEEOVWa2sEi4XK4CnLDkl+c=\",\"A0Cmw3iKJudJK50gdU2WqhDshG8HrtfMpJ8jTUWYjWM=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"JRX7ZvgXktE/+LvdXAOK6JWgKP1VJ2RflklqyRDUTgM=\",\"GN7oIdCtUt1mQfoCibTKdVpwpgPGv6W9SR7FW6evE+I=\",\"MBXGiLKUqWV8bKEsZbM4ZbG3lVaDi74/S8Gvg8HhzI0=\",\"FP0k6Bqg7tiKCLTKlcCK3b5O6GHRc9zlKJqmiX2CgSg=\",\"GdAstxEM1h3BmRuSUyAgiYXg9k+hRdMBdTdHDHeBPes=\",\"BJbMOXK9E8nw3ScVqcxmt3BpmwgyqCSDNP9dITxaexI=\",\"BSizQeNTHZ1IsKZcXWMW0v0hzYgBrfvwBQ4M9vD3RVM=\",\"A4jNlc9NBJaNNEPOrcf6JCq69OylmWHPPIUO+xMZpN4=\",\"HmWIx+5Ju0VHUEpiVQME7U0+Wv+lrI8IuMDNDuxE3UY=\",\"I9YRrhTbWiY4YJyCEtKfMnzglWA4A58nDv4aEFNzY/s=\",\"K4bZKKVLP3yYfc9a6J196ZQzHyADgd0J0S7LhGp6mxI=\",\"EwVbeWl1274eWpE6WcEa4parYLvmQgLBXU1hCNCG9GI=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"FPONH/pRDysDMkdnM/n8XHnfmBtVrOpKjw47TMYd11k=\",\"HzEtTW2aPKNo49yJErqzI2bXIEvQ+90+vFd9Pya8QHw=\",\"DQ9xLoVwWF4ZbKE+ix8aLJYwY/J9YkJ6+er2qtQ45yM=\",\"LcvE6EkgAd2Z3YAXV3HVvbswhDb6oI458ZtNwhgowTE=\",\"C7/VCGszovDlr9m+RPfuMmfWKDOuMBmTjEQNdWokWIo=\",\"LhHHACIC3s1DQ0yXMEUrjs+1Q82JJCn8iNszxjxAQ4c=\",\"CgTKC06zpnv597aZsXnQM5iDeS1L9IAIAq6hUxi3wNA=\",\"GQBL4zTdg4w8/sBSi/sfkdstENfT00VKXPNbf0Mdn5k=\",\"Dw21UrcEiUQnqzraGp64gVBuWSMltz18pL0EAC77wlk=\",\"Gh5xOxr181q0+n+b+hmwmA7iGCGv0as0RTUs94S40n8=\",\"F5+OkiRqeiTVUEW0O1FSACJ8S+ngCH2zZUo020RdifA=\",\"DfVmYmlIEowVAQLmjHHmzGDVIRK5aZOh0VxD8qotDV8=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"JC07FwISkV2DXpdLjyTGTIZmEYMs31muoPnpJp3Y9hU=\",\"B4CrPLe/PP4ctP10LvHeodr3JdRQX0gckIn5pqGq2xA=\",\"Ik8c0lMiPNh5d75BvneTC/ZRrHRNOzYrMC+jbtD2w38=\",\"BGN+KH3y2UeG0HWApFcBPY1UpsMUGNPz7Uz8WC71cVQ=\",\"LXA6rWe9z8mFXmX0KagSDqk9pm2Hfr7KGsOxU48t2W8=\",\"Ecnprsj7e9q782ls3UQSB+F0ng2P37IVNe+UD2jpBOc=\",\"K+KqqZD2ONzYvtGNm3ZGWx8yarzeGsHzu5B7NMYCnCc=\",\"Fqb/NHjkAIdjZtzyxBZx9MpsriG8mF8Ek7TOopSOg/o=\",\"LVwa0zWHILSG/yH27Aljd/hWSlRPVNs26fy1QJMwIvU=\",\"JwaIPDSQOyb8IJ1ZoTzxLqdROZXyJsgObrj7aa4gvGc=\",\"HAz9tCkPvDxTvhvtKn4nHtG6WqXzcq32cTKo5T0s2ig=\",\"BdALbkstCi0AZ+DRrTB4nC2uZXE11idIWm54LIuc7ZI=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"Cs0RdfOYSp588Iu/XBd3zqHnJW3vuVsZGtPYaNgJJTQ=\",\"Cr/6Xo0/NFVyBp0R8lrU5lToAGEC+NR1kYigcgG0O5U=\",\"A8CgE42s/2AcnQYx6DuJcNsUyjlfg8wYx6ZNs162Mo8=\",\"JsyhdLp9buP87NHhb4aLzUIoeFJSsrfelv7+pxMG1dk=\",\"FUYdBEZkmfoTfFJG18Ze8lTiT81QtdQ+ydXgEviaSEA=\",\"C6YWhvKsHMrnlGokMWwliEioZllZFGhQeHDJmDwnJ1k=\",\"BAF99K/LG6MRY4W/RjDpz/SVObHM68H0lCtfQ843Edk=\",\"FCTXDLudp6ugvmv+YMbtQxDv22wKc4nsDBfUpuOQ71M=\",\"G0rf6zqB/8kIirDMUyBhptPoiDAXjzdx3PegJTRTLo8=\",\"ChIkTinLvFbSj0m62PGMO82+lWgae4SInBuPNW22nBc=\",\"HSeYzxeYwn2J3l8HqdpeRVU64nc3Ag5R1/bTZbrQSR4=\",\"CZkhzCdvmgDkWPCRg7NZNZdAvNRT9lL8Dm9smhc+5aE=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"H/FhfhQBEgAkLZbJdqm3NYXMwRAxRc8j0eK5ItA9XWo=\",\"LCCipdw78KqwuHCT+cDprlEY2xFzrfT1EXszdjvse2g=\",\"Gl+dRNDTDK5gD1WSSS7E0RLpwKJGMdS0n24UzmmDaFk=\",\"JQZUn7Tx/bKQvGH2l3GbQY8UavHPjWHaFjLikyMOMC8=\",\"GXYagLBluzgg6kZtum81hjfzopjZhumlAkqHARSewLA=\",\"I/a6LK+s/2pif2Dxzm3FswpMr2T0+yHCJtTC2Ee4QcA=\",\"Lm8cqgYiSAZfAqrXEgz5HTqcKf9WgM1GOBRNfyypXpc=\",\"KLO3TLmK94Gw9TRMfYUmqzFygGl+JthQPv9nTO5XWaE=\",\"JxhY2BId7uA/xFckWimDhLmlWzqDWacZDOi9I95Q64Q=\",\"LdWClgW453vXLcS6KhLriprsRsHSU+Oo2vvOr/Us/gM=\",\"AtMCBKC+3iNqi0FyHsA3ZinrVY9rzppp5qk6ia8KY38=\",\"Km6GJTL8WYth7YxJCs5wLl6S70AxEfSpiI5x8Fi5iDo=\",\"Kr2eFre0gomqGc3+xyb6P6FcwWJRAq5RG8pF850zfp0=\",\"CEluhmolFn9cYfOIVQxJv2Y51jlCdMxJ0Tao6krvjwQ=\",\"FOjaf+7+PXFuuUC+38t6P2z/HvSeRZw9HQ342aQD4d4=\",\"DbvR1zRZo5XdszwSABjZaSiXV437Z61mDWKOOkbNOYo=\",\"E0JlXfY/rETUONb0obEojmk8w7UwzXOz7rWI6PIjbLk=\",\"AxoUG54sty26p5K1spyKfHSMXLTxzW9cBWiGEmVQT2w=\",\"KPl5aEKLipRDKGHX/RIxOghNPHUUiG+m7TBSHliAiLA=\",\"H+n+tcf3x6Qmv/AyzWoxWCeLbGssxXqHEhP8r9ZCeYk=\",\"zbLbnk+dcy0hfF4xFIIRZdSeWi1BVWvNU9DE1DMiTA==\",\"CWZCFspWXBpE/CuYNH6os2kEs4d/IVncyZmJWt601ws=\",\"FGP1HUpMseuhbbwRVWaqSP53tDwkTJmIo8ZY0vVkk9Y=\",\"IU5BeIvSuZA0fH8qj0dhLU386xoebaOBZYc99mzlH1k=\",\"BUhUFyT2TiASgmCJmr6PvN/xhKGVepOF+3FZI78Px50=\"],[\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"Gqrgi4kfWyBGwOaX9IHHDzSwxx6Bytx2A8fl0xE50ZY=\",\"JpO8KyN39E99jCkfMypr8YTZkyiURaeU/T+BWCTHpKo=\",\"D6S4v1iXSCTts/stJgOJdfScLPhAUMggjqejCuwc3wI=\",\"F0YCJVWDHBQHZe6usIoGvbt+LmX1pfcJd9QfDyoYt1c=\",\"MARDDMF2y75/M6p+rr0BhWsAnykd8FZ9T87YNTgvaMo=\",\"BkBsc9qa7yR1cYo0B1lw3zUTEsUgNSbQ5VuwCqyQxvY=\",\"J9txzHHIoi1hMxcvGbi7rw43/wdypYrsrNJehpZ1w9I=\",\"JanLcA5d7NbcRUS5xeO0nA4EqNH4VX4jHaUdi8IoCC4=\",\"H4spN2jQULZ9tf1QvkFOpjf2rFGZiXG1fs9OTbly/bM=\",\"BTf9B7OsB1frRxonRe+8yzJ/4A352ktLN84nmNVEE0M=\",\"Dz0gjkL9PUXcC/cacmIaOh9zXKqC+vDDgp5maIkhHM8=\",\"Ibbsh2/ttcq//Oj0OGlm6PG/0LusSI7Xw6nMc6/jY40=\",\"CVEACRJB27v3RGrks9HMLgD9RcclRW7fuu10ERFo2xM=\",\"Dxz5EvDZ6L4Yjz0ZOqkbCU55eAURw6OFO28gx3GhBR8=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"HAs1JVa2KbHmTG46usSzScBYAen6Q0Of1hqDks8YZQk=\",\"Epj7946JZzWRIGcHWPOCqMlRqNIYa5bjZOmyIdexIaA=\",\"AyUp5Js3IbpZO9BZ2zT8TAG10DbSSVttMiFFbtsC+j0=\",\"Lb037WMN0jSuEvTD3U0Qbid0l/ecsWpxtO2HHXCHKdU=\",\"DpobnO8gyTe9NpZH+E4qMQvV2D6NF3ypx+pFcWl0W3c=\",\"LyWxZMBhC1zBov/D6WKlSrAeBjKwYuh6C/JJ+PelHPU=\",\"J7c2lLg+CxwGBpycwfwg26HQN+SB7yFhow9N50xJefU=\",\"GsqYFjlhqms7S7tA+oEshoIpSL+R045ga79eHbtzLyw=\",\"I/Z7h+211IEmvUK38qn4vn2y7OAgb5fYQNKNw6SWfA8=\",\"AtcQT6qRozAOPsk0hiKPNlewqqcnfwr/R2DQrtAsoHw=\",\"L5SJVc8VlHfHtBGwqGi5rppWokDMIOQM4aCXpHSUZ6E=\",\"EFFRqtbU15YP+vygXU+KtKwZMLIi+5HrnqrgfdwYuoQ=\",\"A8szedBFANGZbO/WHFAyhS1D5B6HFI2SMpvZgAP+XYo=\",\"Esxhd1fIV2eOxxbtlAUL/hkiFdn9dr47+YtlQB6NEqQ=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"DIcW2N7QqMUh2gGcJFlKG4WeU+hTEe+udI7JMSoGl9Y=\",\"Lggr5Zf84h5+1kHCpQ/qtqSybGBQy3czl5ZW2acZiPI=\",\"F3WEn770Us56CGPnFaZ61DYbmityoFVGkzOwuLgXWyE=\",\"H8jrrJpcq7EOzU+2Yzmi/sHuivlR5p9YN3dc30q9Pgw=\",\"DJLcFsZeX8dNFiEDdjrDnyynrWkqqdu/kTK4169AJa8=\",\"Hlt5Y/edK98fhX8T5mfp16l7RgWEbbTwomuuyNr2kaM=\",\"GRctfkSsWxs4HCyJPdMM/aCMRvxid904z+GxzE2qqLk=\",\"GEFU1IpsbL+WE9VKYErr1YIMUwSXSfUzwO/RaOToPmA=\",\"HOCT2qKrcbEy3C07wf2/uRKSw18IPTUO2gJin2bq4sQ=\",\"ASsHhH6nmC4ObfsbKGSsLo8E3ffXZsM77nV0kBWpE0I=\",\"G5bAI5ybZkOFC4plNIbg3x1Mf2Z6We3jBk5LUGi0QgA=\",\"CwUzZYFtnMYbfoV1MepBbqM9YMTYpSkxfimnOjqtQi4=\",\"H7myxQqZzXiHF7NonUbAXg19+hPFj3JaVIUbEXTCJ4o=\",\"LDStM0W/9FXA5GFYe3My4Z4KkWU3UiV2no27IIc5Hv8=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"BgcY83qUgMCDf1pefBPrdcB/YKjYwc+f8wrhMiUSA/Y=\",\"T0u+o16bkAHpLWz2kLKOnApGM4LLdsW05qzvYiwENg==\",\"MEo7MNIwDHvNWit+zqUZQrebfQS/NG+Vlh033M36ojg=\",\"BibeMSTCyPBO9VVmlC/9Okbyt7/ImO6cUxPlCjgQo5c=\",\"CuuZRdBr+2ROMQsxCSl/A/KsACwx3qQwsqBmZvTZPgk=\",\"C5Jk+1e+VimM29IITTeXIDddOX710Jo+yQ8pmD8KFTg=\",\"F9vveHSY7lQcytV1FmMzDjeexjIwbmics92JSArfWCw=\",\"FeNqOCn8qibOyWVScwF+g+YhuEoerHvpp2RjggKhcks=\",\"JDqGdmc0Bor+dlnweNc4TirnpzwuK22+3hLdCsK3GnY=\",\"GfFxRh+0vKdxrbElxom99RlRncK3lgtafK8HwXAPCSE=\",\"H1opdOq0C3h7X/tt4k6TnsBLW8MUdc2AO7L+A5Wm7Fs=\",\"CW7gbodYlo8b4Gf7RYLIEGlKcgXTmsciR8O8TnT8AqA=\",\"C5YDYQYhAYY7YAxnckZm9x/1rMZ0Yo9G2EAynuwqINs=\",\"VPcrGq8fBTHq6pXQFIsFJa84H1mLB19W+GrA9+2tmQ==\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"FdXeHowPDRi3qtF5J5cn7s6dL/c17knjY0Fn1NRASRo=\",\"Ft9o4200KZj6SBjgZcUNV1AS9CA6Duc+FV+2+cTrwEk=\",\"AoPiAVJehroP/iALtphoOjXVGBC3IzmqN3MhdBGvHq0=\",\"KJ3dTHY1KHurpR6+4lt+QvmMrVMuL1cHPdfoRlrOQJ8=\",\"FsOv2FlthRXu2CyhAknSaqA2xqvfqibvt8mIQbJxnTM=\",\"BNdgFvYSaY+ROobcB0lka39FF9PmaJA/du/6qVNR6Q8=\",\"DQIdu4aa/z9P4Yn+MBXZ1YSDk6pvduzv9/nZpypzaEM=\",\"DnaSSMkt0D1G6easWDUyny1fevXPxdG9kg8Jc3lEPpg=\",\"GJ1u5KW0RZR+DvoRaQ8YbpilTT5kBtiAt3Bvfe/hZ9g=\",\"LZvKxG98qUFbE3Wcm0ytQqETvBlWWgHLiJ4dLWmMdtE=\",\"BoTC5UK04MWafwOm02E2ml9kIakbmLH88KwbcUTmMbg=\",\"H2YIvaIJ8p6i2cffOpJLZhqmFOH+A09v8ewYu6ehTzg=\",\"IDxx+51PGIGEXyWL8S3mFT35nTX6PajNoe9OGN3Apl0=\",\"K92sVyDKXGmnJ8Ap5O38OT5BFfiYudqFbwZDIe6ON/c=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"D0FWUKI67XgpNqMcwzGzhWtkdo3JspyaaKiQSgiiNmw=\",\"KjJyiWli59P7ehx4PiStFBeB/NWI9M3DGbPerKIfee0=\",\"GqcpSQ9pdWj6jMdYfJ2SvRlhDYcS6z0xoD7pplvUQ9g=\",\"ECrvo8o+FyKYDa5WQSLqxu1LFTS2XW7/5VA7YV17dvw=\",\"CP7GFt8JtHfELUTKzqRcGGRKaMWRg5M/H7Z+yMRSAIw=\",\"BrWyZvH75OqSN6Ix+MKOoZcjrbR3KbaRO3r5RU8j3aU=\",\"LUomTnSLSZ2XszIM/7VmSK9oYW/XO9KeEiXixFwRY7Y=\",\"IiTmWdHX9VqAQG0nDevwkvcT7sZ6oAHrUM2LFzp2aYg=\",\"ICYOwloY9JIl86zPECCAX1mC80tljFU/X3RNNg1Q1XE=\",\"GmkskzGauq7AZmFvl+FMHVEehpZVF0llQMwDkUkLG1c=\",\"IYnSVdnKgorebO+G9d5ib8JomQTbQCphMQZrQWFsI8g=\",\"BDBZtoV6/6hbkNhl6xqakfA2qr5aEsmgPorYeTSZGgk=\",\"KjJDfNqmoyoKPAYMKGWrzYzCp5utfvusHLjN7OQSvnU=\",\"F0YEbtv0+uIQo/AnO9fPWL6rukwhCzYXsDD3tR5vj0Q=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"FmNx7obAjX04pZTNcAEeoezQEVQAfVVfzOV5bf7DnjU=\",\"IviSE6BYDlZWnHMSjIpBNRtCEG0R8ItvkA+MYeiePt0=\",\"GzvPYyLeQIU7Vkf5TOr6SxCd7FHIHNeji1GtbZbs+o0=\",\"L+15x4KLX4/vx8c/MS3gc5yaIIHkMs8vYnMaXwL6Fso=\",\"JD20Zd9dbTSt5Y8jOCnO3TjftXEB2ihNQiB+tN9px+o=\",\"HUnBC+4HmYxk+sw3rlDc2RoXlmuHMfLRo0s/eFWb+xQ=\",\"LXxKdQtwAKKW2lmficTqdynPuFiDA3Mz4bRSau05fOo=\",\"DU9NLdB220vWesJ5u1GCaoJ3QpGNNapSpcHfejrF0zk=\",\"IokB5TiKXBBTHUEi9+B3J1nR5NAmN57BZnb0WmS4GO0=\",\"ER5/WnRtBG9NfBny+0nDElW6BF25iM3ez6DkFy/LLW4=\",\"FZXwL6578rMoaAvAroBRlP6e6D9P303Q016EqymhIuw=\",\"LSLJ/oH+LbZPO6XLrElX+tofDGpqTMiD203ZItNZBu0=\",\"IVh9SFsmJNBUmm9d4GwAntBsW0ggHY+adQxeWpj/Ga4=\",\"JMM+IS5+nT+vDORKPLIRPnT/t8KLRce0zrpcHWlEpk0=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"GH9dtSZXXBgOityr3aNOcBRjv4sVlhMMDGuBXfteeiQ=\",\"B17M+LDW7LGE4PFoxkQE5Q4BPODfBr8xy87yQh7XsOk=\",\"C/L4KhsU+IjEiCLhR+Myoryvd+uzLXyzzd6BPwsaNz4=\",\"H1h6G+NhUi+FaNIQngmE8FmocxejX3zNc2XF2X1EfmI=\",\"JKae/9qFLH0g+0/Yw/QT2xtv85eUCeg5InicyllKRi0=\",\"LOZ866xrwSrOhr7OcK56WlmpcCPKtts1oPjLcRBVKtQ=\",\"LvSFL0+nOwxAw3EY7iaQaS8ecQGnijh3GoaG7NNwI6E=\",\"BOpJtPIiWly+U8FXxW9ilz85T9swdpVLu98weG3r7f4=\",\"LodNA86/SVeC3tME0fN5A7BsP4NPFw6W0mgSvg/1JGY=\",\"I6ze+6nlz/NEshJina5h524DqKjuzvTmwFiCd/U9gfo=\",\"EXOAjic1S0v6dta9kgz8gwnx6emfmX93MZUHCEPtoYM=\",\"Ka6jEIRbSlBeo0ky57wqjyuTbEf+xfImmjyZlBPQSPY=\",\"D1U25EILiR9MyCxQqDOhfwyruJw65Mukwo/dXLAuPSs=\",\"ejV28Ch7KhwNgyvheNQ7aFikyJieMAQcwUPwniAS+w==\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"CiYNzZjiILYcIBLcY4D1Kt75ahHTjnNxxXbVRWP3v7k=\",\"AiQCjBWLS0rcU66RPP2epC5EVmkL5d2NTEWXeZRRV+Q=\",\"FmFRxD5DNzRniIou1L2vMUjY6iQy2ZgWL2L4FZzsaQo=\",\"BVb57Dm6S8d7GDz/AGoKWCrbVdUt0PSowfFWsziYsos=\",\"AgFnC/bx+mIFARB1S1Oz0GcQhhVtmJCshfQMaapKopc=\",\"GKeO/HppS26VeyCcQtYESvMZ8ZTcFkUcbaJ4AufxyFw=\",\"KO+sqnmgr1+p3dccxqcRYpeIZkhJuW/wtCph4uQ8h98=\",\"HQf5CLKsd4Pw1zTocaQL57LhZK/ohdtv0xK87PTL6as=\",\"CPl/s8xkDQeK89F8Vp83qev6b0nEjbdLPZSKhnXbluQ=\",\"JxjnKelA3S0mxqb8feQLiZJ/jJ3wMs3MBu1OvhlP1ZY=\",\"LGjqQSDlq74R87YoARmc3YaG2+zcUsqKlFi6SLGapqY=\",\"Lzn/r1Sky/AICf9QBHKJUwcyJ56klgfud5+xSbh+EMY=\",\"Ew+zB8bOxgmrfF+b1ZEKntmVj8EeRDcFYJ7zBmGXqac=\",\"EpocZtHrXoQhHEgryvcHiebVzEc+EAHfvaBZN597WOE=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"HP+XOvIdiGNeya+//YWxzFlXA65b1fT6purUideu6iA=\",\"J6wNthYj8DPdEC4RjUfYR/NP4RgmvJ0j1+PkM4atFqk=\",\"Je0rIrWe1Lrtj1yVfK7R+1JjCXEJLQrzrI/+X+OhOQQ=\",\"C2NMOr2a2OGy2oShRCB8Td62LI9IYPZaoiCcHA0NfnU=\",\"IVjqzaRQw01i/m7V48niEcFw9MO/QkfFyvC54jQOQJ0=\",\"HA5xWsZNZFNfyX5NhrlcYSBAH1wmlzMrHtap6DcQr8o=\",\"GkkaB+4d+auwKqMAZU5ZvTT1k6FbdDBrQcBOi5UwmGo=\",\"FSPMZIGTHoVhGxhEgyq7+HY/q5yFEw9QqzB1+k9gdi8=\",\"KBaSbBKfXJmpcHM1cdXAG+HMGOwPRbxeRgaPDRiLyeU=\",\"LZTIHicfuYANMzIjoUHJ6QRHbewfjx5tIk7UlGfhih8=\",\"G/irC4zv3u2sQXOFmdOMyu58A5FDZOthe1Qh6aUaCyc=\",\"If1sWbD0F0U/Kk1mmFE2T1FWtq3xBGJfhXaBQRvQTGQ=\",\"Cuo8UK/AgGsReqmMEESZtNhL7pZqlIZYlqObn468uRc=\",\"Kah5Xh+PHifn4EsjeIrEDhAlNtVrV6qF/RAVzCGXD1U=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"F+Ssfkift9phBQZTW84EGGQmci/iSiYaPiht8vNRmzQ=\",\"EK5JAeRD73ZyavzPHJCZ/BgAH7v10UTtchGWrJ8swTA=\",\"DmD1iIS8JSCEyToYtP7/JFF1cnwDAD8CUQDUNaDeu2A=\",\"F94W2jaSvTSsQGmYKh+xY9oxGcwB0SxvHr9k23h97Kc=\",\"B40U829jSdGvbZKvyN2YrnMi88EZk8WaIlsHnHrL1P4=\",\"LPw1bE9geB48yDR02nRge5Vn7ToIzdckL/7Hb302zsw=\",\"FTFEDbVu3VIcaP0t/7YnFVEw5vOitH/eZb+Hhc7qEE8=\",\"DJ0lsTdyzaEWEH3AxP6YGLdPJKUfS7ylpjvE/GRBmWs=\",\"KKR1F1VxKz0z+e7oUMzs6kfrvDKh/Rmfwla2nARFZQA=\",\"HrAM/2gUPPrTdqqOyDIWutzWZNVemQyy1hH83aUuRAc=\",\"G7zVKMxm63aBYTVwawkOo7RtRfDbCK+WLxffTrmW3uU=\",\"GaQd99rgUrtYIapPMukQPf91K6okuftR/L5DWYJ/jNs=\",\"BvNP5JCt9KB/7mOYo56EoMMsBCWclpHaulTKS/aWrF8=\",\"EM69nJxLlBQlYZqs8kQZOA3/3Mf1Mm52bTjnKDi+MSA=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"IUrqKFD+1yI6+ApZBgUhWcv9B6MHNq5dlea2DLSYnRQ=\",\"FVla6kWvvKsdTS5zwKNsrp0vtQ02zf1cDBJ/lYYq3Tg=\",\"DEBVuUjEqf55r/GRkNqJleqnxTeiDN0Y9bylNx0MiV8=\",\"IC3FbWTNTdFrouUHgfv5N4A7zK8It7qHM+rbQnwTmJw=\",\"LvQZG33rN+ku3Ub5Zb/MZrxahTmVfzGZWNkQZsP+Fdo=\",\"L2lC6RituxkWAKUX7bSGzJbjVXN5YcheDYWV7PV5VSo=\",\"LNYLWhXzeHG1UtgJXNim/68DO1Ode/GuX2ceL/y58s4=\",\"LgXERUnBypmoqp5cz0cmJA91pAYK2KcQEt6yrVVIavs=\",\"KbUvs9V+4FY0soZOeyl39zk5BsEukDkxUx+VxfSuCPg=\",\"GlZb5U070SvJpGoeKFOhjtJtZ0TJjlz1PIPmYAzFamA=\",\"DIBvmsICJeVOov+CxzxoCUl7RthdUaSwXEb2Z7s+1ZI=\",\"KqyLEnIIXHmGASvFx2EtW361kzqRQEmDWbJgEWKQBI0=\",\"HvG5Pl4MS97tjUDXToT7DsXovVKvPs/qpUEF5nRhGjo=\",\"Gh/jE2haJHsDzJq/DwyhM+oRmtAe9qCQuvd0SRoAEpY=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"BpQoel1sL4x+atiZ95YOoavTqngpQipmvo6KGta6/As=\",\"KqG9SHji74JS/0LVldLQtZ13SpjjQ50FaCzShGPhUQQ=\",\"DsuWiFbZyKExfHVtDkjVscNl5ur5gJidPPd9EQI3MU0=\",\"CKlQ8QeSVKokP70R+7TSX7DLigw5vqcaOqHA34CUOQc=\",\"LKRBqGfkDKB7UwpAuJkFJCe6/RfHox1IQYj5bqIcrcA=\",\"BgEX+UBr3mtS4K86VERP6ctpvJ7yJAXiuF0iMFGFLCM=\",\"GM+/EbbCC9fLj6Z/9MAyw5/Cs2EM2PkLyj5hNsawT04=\",\"FK3fLAo4xgHTC/lqgtP8ui7jabDS8jKt9do+K9KXCkM=\",\"JnfYfymiqUjKfo9aU0G1aUdWO+SsyXxG5Vf1xg64REI=\",\"L0IxAMLpmIts9em8sbKqwJ2SZFi58Rd/hBl385EJwew=\",\"JUkJA2m8yiV9omBpQmW5UcFWQ8gQPJzHP7trBl25eag=\",\"IFwOZ4nvH607jxNnz06xmbQAsWSZhB4f6sHPt3RBLZc=\",\"EWoessr1as9zCLW3p8prmCJMk6ZV14ynhno+4XCzP7o=\",\"AxmHHgg6biz6amn0gBIXh6cYU8TG93L6ud6i4mfzV2s=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"BbmKU0qkBBuwx+ea5rL1wWQFO0wKZdun+jGKWuqNIrY=\",\"DdW7zc8Nb+memrR3SRGjBJV7Rh4+LYCXddptnGb/LPg=\",\"DV4T53si7DRHrbJIfBWkztZxB28NDA6OvJBy8djje4c=\",\"IEaLbcOEsTSkU4wlaDtGjId88wsTIdx8OeD8lC3GRFA=\",\"Div8E6wGXiUcqnA6vVNieDlB7QBg3Z0bgfUMYw3Kg3Y=\",\"DzAPJ3FloC/xI7MHjofmJR3g3pPdgeduj4GXuUmWDg0=\",\"GezJjDMdi0QEAOWnHhyi+DBTaxkAWAszSPO3zpP3Wlw=\",\"K2DiAStnCUTOtQvhx4gI7EVox8RCkzsh8SXpzfp+y6g=\",\"LD40dtEo23CrqJKkbCBh7yTfCsdNsATncxsWfzJpdFk=\",\"LroHAcyrwKsphjx0yA8es/amrnl5Ikn05PvsY7YoLgw=\",\"G4IeIDHM/vV4h46+NIHJtdueffkpdVuYBZroR7eHGh0=\",\"EkJORbiFBgAC9mEY5Iepe7sQypfuBBRxL4XyFUpjlaA=\",\"It1VZwyRNEAXVYti8yxTDvDzOHc2UUr0TNQ4EsPDgw0=\",\"GMYHZ18KmflPLnsWHGk0cspZY/cYI6Yry0VFJJ7RFt8=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"LRajLVyWYxOXCfBUFZzXz2+TxfkTMAe07I3jmDIxvjI=\",\"GvLEF1/xOkwnzfb5Hm7i2B5WpNQtbBP14bQdj3Gphfw=\",\"JEEA/J8xrbTljvPlbC+jK1tTTUKiJogNeOs74gLJ3Qc=\",\"Jfq9I94iAJuXigiUFN2AWDfMDh0taPkZpQt+F0GPIVE=\",\"IvMtQ8NfXLM6hXrAbV2Xd6QrkiaPDAaybWj3VCprUOg=\",\"ILRHiPUEeBqZUeCbSX8cHC0vcjuGS4TnTBUjUn9I+ZY=\",\"Fxkt24pnvSzLuUBTKttuN2dZgA33QpxF5aCTFOZM97A=\",\"EWtmGbQMYXL1cmUKlWbtK4CRZLmU44i2/EZ2N7Ycwq4=\",\"HgEz8uStvwiTipzMgvo9NpMxaq2jsFL7Au05AOHXMK4=\",\"FmTH4l5afS8oUVbe6Je0rwwURqMuV1/OTVajyrI960Q=\",\"JRLI49fVJe271LsDOUvErnrte6te1Vzj/Erq/DKbf0k=\",\"D1gAFkrLZ+0PbvxSe7zbhR5mmVyd0+oYzdm1Qln2S7o=\",\"Hk2txcpy6DpvVNwJfwwvctUG7XfVdqvOgAhY1IzbnMc=\",\"A5iyrYeplq7I25gBI+/+v8We8dNb4Oan/ay/OSlVG7w=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"LjUf5YtfNjid9sU6zhpTZtnAEqLOLgxKncswz3X1mGk=\",\"KQx7XnScFTK6NkBhq7veIicrYu6Q/xm+WBxOpo9YxfM=\",\"ExP9PHYTBzENMPWqY8sHMyRHljUanGB3q16jQ+mWp3g=\",\"LDG/037RarsVg8QD8J3SoGTk0D+Uh6B29JbgyMXbs6w=\",\"EMq60r7/7NHXNbcoQDd1OoWEXm/VtyR/O0V7qcyaMj8=\",\"DgKpbi+uxz6RZFj5QJGYWaFhtrhYlKvlrhRupNNzbRA=\",\"HW4JDwrNTaFDsj88zFZVZ730k1OzQWIHryCWOJt5GwY=\",\"BF9/FofWLqru2/4/1PclyFF2loBpr9gV3aV3hWOuGpM=\",\"KHStLV/zTYVEkNL0HreSldC9m+/dVFgLJX+08tocubM=\",\"IBiU4PQdLz8hpmQf+eOVlYSnSWSPmMbGs8PcboKFI5w=\",\"HlFAnc+BvGYWV7bwysJ+3qogm6/7DIYv3nwNBhBQa3M=\",\"LPP1SallHbmRp5jHOSr8uM//MHrzOM7ipQHcG+dAWYo=\",\"G3qo81okiL2h1u5BaovgUDWHL927lvpWZF0PY7rQS2k=\",\"GCEy6tSwX54aROdCLak7Hg6U1ZBqePY0ac+hsP/QagI=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"CGO/ge1WIVn8kVtii7duO65mPcEFVtrpzUMu+N5Qtvk=\",\"Fuuas2ySwZfJnD0R720UaanE+Xedrtvpmo5fJMj1wPs=\",\"Kg8XKOing2MDeNgfFQnpS7mAOkehEtmfeljGCUPFyX0=\",\"Ags5Hv6CN5cBoPhq9W5dIs2IH5jQrEM98U7ZkIgctaw=\",\"BYalLL4MWooMRUQPgNx/xSRR6BXFsPeEuyXwzjGaHAE=\",\"BK8mATYMu870kWJojxNAny+2Am9BN6C5+F1OInIQZ2Y=\",\"Ca1S9L4T7meFNtxk0k6wGdoPXPs21MNbZnx+9Mhe2AA=\",\"F3oNMYtcCyJsFa+g69sPPVgsr5Nz1F5zwl6m29HvDo4=\",\"GtnZnedBfOw6XYMeiozE1jO6dwEE128ZdA+Eg0EbyDc=\",\"Bp8k1ZxNvCNR7e83poxeATPaYOr07IXMF09VCeRnbyw=\",\"L4eoqKQhCB0XSA8DYwiOZgR4BWLsLZeqF4Cnvh14CPE=\",\"LCMYdF0Unfu3lqrtUASCJ8sBwYhasu7smJdCPYJOZbw=\",\"Eo7FhqmOSf+7KpjgeOsStMUERI9Tp8WafilEzmY2rAI=\",\"KrfeCu1eYwKHPWzw9kLsvPS4TSY8X2AxbqDkNPUY4nA=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"BkLnhoON21Obi0gdUJIs9qy6gMu4zXTZFVi096Wc/kE=\",\"HgK+wlvVP8xr7O+iNKt6WR4U1+G53e2Qob+L397hrnI=\",\"Jhorr0tlVnX63FftKTaegxo6I2dod5wmNAAH0Ejav7Y=\",\"ELVtXM3QvlORxizah+ympw8S+EZatABMZ0K+r6aa+tM=\",\"DR4TcQ2zkjDldgE+WzObZpc0m2ECqRWZNkiyCXrSFtY=\",\"LQvQddYiqf+u/GmY4dOoRawH6IJ86yfaHref82OGvpE=\",\"AX+EC8Vm24o96+rAh+TJ1dsH5OzNCHHAnFMU+pNSQ/E=\",\"KZ9L7shvIQ+ifXGPePrk8tlKfQseApySuw4zRWxXJQY=\",\"Bqp9sADz9NkVw1CQrJsakLJpyNkOdiaQU779NLdsQaU=\",\"ENyJzg4+ExpZTzvZChJYZimvg40t182VZqZnhc/HuN4=\",\"FOSxzBctI+DV/H8hn6Q/wwG+jYcC3BMR/Zf3hNDR13M=\",\"JjkJeKZbkX7K4CQq/8RQ+RxGSRObEyqusUBrd6dRIW0=\",\"Ga6/o/orTPg289n1tnKmgrIPgu+cv48JJgjCIyfxZj4=\",\"KRfWy8d7unOI2MQyeKV7r4bB/FT79X0NyYUjhnjEBKQ=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"KWIGG+86C1V/YKOvjKC05rRDNjWbv8nTAUlDXe7s4TA=\",\"GrLjvYwDxW0wNyhnoppQF/yV6GjCKMRW4xjrsqfC3nY=\",\"Dc4wce4hZNRl6ILB8xmqidFp1CFqKzop3KDXQkTDal4=\",\"HH/3doNYnbHADlMD2VaIlMJAIBdhtUbSqjjmxjgxpMk=\",\"DaOtkBbRQTIO33j7JC/DhmYvyRg6JQJC++cpl2Ru3oo=\",\"AQjIWFBoAvl8CooAW289DnPlat6D0+HvkpF4POvrAQQ=\",\"GKBBrZlBV2ZTXnNdNeJAbZn1AFB9RMEhGUq11iuz3HM=\",\"CATXiOzKZPzR3G65WU+46RtfyQJ8LgVCNp8qElsc05c=\",\"B3MdFllGgbeS8UOuLvE2XpTH8P4VpHKinXGu8XYJYeo=\",\"K/o8uQ8TERFGyJOFr4LZBRxOAvc48vmW0qXx23Euxrs=\",\"H93NSxQpE0V0tPZsICzWOkIUWA5lTnOez7+j/Dv4tB0=\",\"CIbCWN8CMYS9fJQsLycxQINNhnuN70mPsQIYr4DWZCU=\",\"GcyuHbGpMAeF8TRwLTscjRPZrIe5wgE+UoUgnLgE4cI=\",\"B6S4FV63Y2PgXl8A/5Xe/L03uUr9kBwTBFl53LY9atk=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"EVJqyDMcD7bdTjQjPBYwc9gzAGKSiGNHEzWbLc+vz/A=\",\"LuW3zcth9ZmI4nlDEhkriv3dj4+hz4g8mY96eCiR3Hs=\",\"AriMNen13CXdyBvCCSFriPtSatlMGJ1TAMlHbQRFQmo=\",\"GUf/68OsSsPM0dV8769hkPHBA1vFuoRwbczkTZcG8bw=\",\"CZ+Mxk4FAzVOoStaZ4FD/XTxtNaWVMmourodWBAaMUc=\",\"Gv/9jQFweZ0WJGJUmSHzxzRNiifupVtPk5fFCfWfDoM=\",\"L81SOZVJNUhvaFFLxMuzAoKyUXG7kiesls5eyeZIZzI=\",\"LKKhArZWGuZduFLaIsO0hvx3xqL1WDUGcgoyijrtjiA=\",\"EALcWL/sD9hTM/uAWkTqqhtHiuJTo9SldoFZDQtS3fs=\",\"E5VX9f9mTbVNa+TkLgtPerkrR9nYHaEwckA4UgB1kgU=\",\"LInFyT6Q0KcDnKY456HqXLwjWOYQRLagnRA8/JrE2cQ=\",\"DNDXnFtMbnh1tY8sYZ/HJ6umPfmRyZ0lrS8kvsoN8UE=\",\"GEs4VmlZXdj6d0MR5ZsqvgT1lUZob3T+xwyVFImYlMY=\",\"HPPlKSr9EKkEFHQe0yhyY/SvlRW4yuf0HUXkEJqw/wY=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"Audk7Zx7zRtPemTxr9PvrVR27s4MvFZmF8xSvFGIXP0=\",\"Lm6xi3W0kIwGOpIEFH6h6XB3kfLG/SAdCBcDtM3Jfds=\",\"FyuZ2EGf4IWDgMIpXRVscRzPhfFQ7UkX68CUKrpK6WE=\",\"CGTuoEmh+VEJSaEtmm50U3s6rJ9nDFDU9Lt3p7aNc/A=\",\"H5p3LS+W3tBmEVbbGsC7t4Ka083gw+Y7uVpaR9SiyiM=\",\"DnLOAHZQDEmJlKeIeXBHQ97xO4ehx4u2BVdZhlLoQFE=\",\"GDypwzHULhWBjg3Z/kzqmQeODLVAE+tZb3mMPcIsTlI=\",\"DPTaV7mpwH7NFCeytDdmS1ouiF524esI4jTHsSdhvro=\",\"DHrrGVcjnOvrjD81+Uqy/kQyNNiLmfoad8xmlxdBCjA=\",\"EgIY7AawcEXtawecL6kbaMq5yvcv/vWBbEu3fLPcoSQ=\",\"KQq0rLsgyTz5yZ0Hyf0xid2KOVkoz5vpOFfzvnpNz84=\",\"HaJK9EZRGuUpcvbLlJDfX7XvbwQUtRQ4D5xkWnjIUR8=\",\"COrfUckF6Cn5NqKmh4akXAkpawZO8HZLWeBTmPdgHWU=\",\"GbclI/Awv7MR/ZTGbLINEFui8f8ki+psO8MUzUVYAF8=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"F38LgKHeOrVuJL9PjmO0WzFoXh3B2l4wVT1r5IK60a0=\",\"BbB+2YbC32ipekDhwifC9y1VICcWZs1BMmOUciuZMsI=\",\"JNLD+JVbegaM+ae/HNPMH32t2/Kpm1gfOvSYD7HReJI=\",\"JYOCmKDMS3dLa8idySP50zBZmp0SJimqlu0lG1vxC/U=\",\"Kv091eD8IfDZopJq5odF6Me9swel55DqCIcuh4zTvcw=\",\"CA8vzjurYobhnZUPM3LnjUr+ItKydXNzJTtCSFizfm4=\",\"Ka0V6ggJPYHXTG/vnxiu+hppFe6wXkf0d5yMRLsXyOg=\",\"DgBEUQhQdeQE89qsNIGNuIeM0C8TRZKtvtDMCBhRWZo=\",\"LBeT9ngtODeeHh44Z9tXv1FDIMDjf8KWHlDOLNOmHII=\",\"C/PdRr6IAOwLdFLGExnCqjZTB8m36dlVqnqhBX6R2tM=\",\"LcdP9T1heZKVlQs06j2vcGoKzW1c0qt0YexwbboIJAI=\",\"EtC/i4/p7Lq9yUZIVPnff8mVA4ip9ov3kgrrtfAoWiw=\",\"HpOWdjR+7uqpbjwL1R4UYE7NlzNvcusFTGH6cTCeQ8s=\",\"Clw9sGLr8shMOEWIsOl6DSQx9zNOqQBkNvZ5WrpkI6c=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"BBt1wVhvBmSmGKvC4ZIx9CMHYfu/kHRvp+wG1KUXMR8=\",\"IC6wDt2ttMB2GVMlUZXuVa8yygYh5AinPuyW8IDwfR8=\",\"8MvQImfWAbkaGmLl1UJG8HszfoRmHJp/QN55+FJ+lA==\",\"FPLCSBOQWd/p9NlwxmH9F75U6Pyzp+LPwRYCiKAdOQQ=\",\"G6LF+V368t8YmF9JsL4cGJK1nfzeevz1U/veQcI5cYM=\",\"DgsEDowEN09P+cVOauHL15z05GpaMtZErjX5W2ySRUA=\",\"A9AX2GsbYtppmSCwjgvK3nxsNl7bO5su0o4cxcNzUes=\",\"I7eF1pBeFC3F+VWi7TtPV8DxjHm5WZ0fIanTcNMjKDw=\",\"CGCxzLmAJmtcmADVY5QGHko5uysx1QPpFcjk8meKZsk=\",\"AeMJWITo4+gqQoLTniAgzT9N1MFN75ihuz5N+6Tzcs0=\",\"HABj/fIyx8rK6q8yQ7Ss2FEfi3hBKcjWp/uspFR3w3c=\",\"LeI0Vx1FUCO95ou64ftptiuAuInIyAmb6yWt742p+Hk=\",\"MF5gl7GpzQdh4IolCYlfLW6/RTqn84Qb2XgJz6mkZjU=\",\"K8x7c+VniOP3BWW0FoJIsDIfZdlBhA8ZnKhJQCvVKXE=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"HUN4grVwKMiMaeq2RQeyZJ4XBes5ekBpeBrBAVHrIlg=\",\"GvGjaq57GB333b+zTjSlOuQOhSnCJOyUCQf9vPl1IuI=\",\"J4VRYSMyZlhIfO0qnoZNKpNy30pIDZaoEPOuEkaEClA=\",\"J9R24sF04u7LeQ6dlqyvGxfGdf2F+Ekj8L0XRKD3AM8=\",\"HrCQSZ43AERkpe3y7u3uxA4sK+zbMUJpkvOCoeEZd1M=\",\"CS/oSq9sG3c8Hpr6h3XbAoSKhb7URNQTPh/KYBxsaMo=\",\"EE0Wy4Fuu8dgxLPij+jBiu2XLa3rlIlqIxD/nWHUTjs=\",\"L6OH9rsG8dnNLni+hChqfVjP2HDFwegxUjI2HytEzQ8=\",\"F2tk6sQdreqkA/ntWRDxGkGTcv2Q35O+0kDI95rlxVA=\",\"KtdroB6U97uEEvJxuS0krS1+/l7tBrCFLY9Tp3AAIrM=\",\"Goky8bTPrJKGzifeP66t36BzPQcmEpejjM5jmdlvw44=\",\"HqpVpjVFhtAIfh0EKFn2OSfPJ970SDCvOJBePYdv/RU=\",\"A0x4F0IfK8IT/Wys7ZXxz5sXZHPochoQCxtu70NIt4Y=\",\"Ax78Mj2D1N7O7wZ3Tf55jazExZRmZLBDHVTmesu4QP4=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"njiGyQAp/iYPSi/sfS4cmg0Hq+eeo1mKdYrWPCDoBw==\",\"FSXJWuCL1ZLi5CiAPU5qSTAWpHlDSIsCp48tVS0WxKc=\",\"CxARqQpFLuOmutiqnkiFpiRy2il3HruYzucRe6Hw53s=\",\"L6XKD40sUvsrRXjh77bhp3//0bxSWAlibTU1gzxQAbs=\",\"HbA5fk3dAsUJzy7SXfe4Hfxa5Im7lBXMtxJ6IF0+h24=\",\"J6MBL6bufBk+zm/XaS7pa45MiXl3kiYtuNbR79dV2+A=\",\"J04jwsCXNz6aDZUvNLcAIOIz/S4KZ8TiByml/Bf4jA==\",\"Cu9TSC5+HCX7ZkdW32rmlQa15673GLOxSGrsZMQHirk=\",\"BFc2XLaN9zlBo7qA7a6fJaoiUOY83To7hrAxzKITTYw=\",\"HKJioZe1QCrQZA6RlQgXajmIUZ07z5G1WTD+0fyJ6iA=\",\"ITHCrk32tHnc8m7YGh7P1H41HX3HkO6Qbbr72AOZHEw=\",\"Fiv4hkORsSorHa/LZY+5TL/JDgvd8ZnLvGZWRVADaCc=\",\"DHovBjmfh2a7wxOi8fvaBC7KS6hXNLQEDbJ89KwejvI=\",\"L5+g4zIOmsPPcC+HULW9HHHGl6WDw0z0F3BnODFO6tE=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"CfkzcmcVYTUE583IcA+sZK/2HNGJm0dUJJt+Yb26GfQ=\",\"DrzAOwwSP0cb8uV0JiEWRPAJiqw0fIH9EmIccYe7eH0=\",\"JGrtDoX/ymUn158uIjw3tdffApxS04s0C6w7LT4iV7w=\",\"7tHgCrWw7L8zftxj0nz8+RNZl/hg+WvvxBmMVuWccg==\",\"BN8aSqVZkiRc6VXTJcHAioQfcnuenOEcvlSDXVdcVv0=\",\"DV5Zv5/ndVAjqvNEKYRAmHeGVoqgaqnQP4oz9wsif94=\",\"L/5W7QeMvgdmf35I4aNg1HENBG8LtREw+bkk7uAdwzI=\",\"DRPtQHUVmymk1P9Pn9fXaPvSjdRIeivfKoE1QL+5mQc=\",\"FzUSR3y9bSppgBFD0ef846bOec/jvCouvu0ku35mcqQ=\",\"DL1Cd71zchnYc55OgYzs+2ZONpeC4palYpACCHd3gyk=\",\"FFiCZP19H91tSuPjckF/wevX+kNPuUX63FXugFuB0+A=\",\"FKzQzGYFwMciodOZrVQz1UUGFPwyMdWvdC7Fkmw153w=\",\"FDINjLE9zAlnDW6TgZtp1+ZlBAZvkJXtT/JVZtOgZqA=\",\"Gz5HU3qJcCapieQz+3xOumIUShB4FUhXfePzcENLZXg=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"AmPUJMiGQX+basHeDiwbsuMrhw/mcbEeghl2DRrkrQs=\",\"AVRdLDLd0eHjcQOt7rEW4JJ1Yk6WT277piZ4fqCxCJ0=\",\"KHGD0kb1QmXSKDtbrVxNxP8+V2UCXvtkPtkwFcHeinE=\",\"C8JKNoM7ZMyqMj92ItG5vtzCBL8Zt/g75MYrh3Gi7O4=\",\"KsX2Z9NM/DzICjeIQCaWAJ3Of2GtNIO1TeMkbPvb4WQ=\",\"AmnslZc7ANP5YSXn2soiD369a8tvCN8tOTAbo2xupPs=\",\"G9px1ukA55GW8SbN2wQlks4bbAwLks19hru4YTwu4O8=\",\"LdUfogRadPEOhrgwEhD1rPe8+39AuNmE7SOgDjJoIZ4=\",\"CB+LfAUDCzEOxa3+f27g78DES2+suHAfsao4UqqinbI=\",\"Es18krfvx7UIEK1BDe5RHhN/PJleS4CA6YkCxchiRS8=\",\"IiuZFndoaGbyBZ+01mvRa58//1tl33x4J0fcC8ff77k=\",\"Fx8+PCVi8SCYLH3ZA9e3RmXz6NCF45jfxNf3OoN8Cuk=\",\"G3tL08VuF1GLhQ8G8VNB9uYQJUtCDb1IcwMMDzCcPHI=\",\"FshLpsSWI1LTBz+++pA09dfRA1dz6E6kenC1z2FccUc=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"A5KLfB9SNKPvTK99GbgVwM5kqOiQby3KxDpa1Zwk8Uw=\",\"JU7Ity9S5EyDc0tnKzO2MOiTHRUi9bJcaSc3hLmXu0Y=\",\"FwhMHrDgzm5LrylM5A1bJMpEsGzmVRuQ2fDvelyvQzk=\",\"DFfKkKzuFiT5MVJmxIxlO9REALlCThcpU/BEM4p3sn4=\",\"BceqFYSLUlDv7PLu+4tnWHUfDmntHs5Cb+b4Vma2pac=\",\"Fe19NzOr5cAbyUkeCBbRGuwQsNv6qG+0cnnXoUSOILY=\",\"L8yjPngHB9uEEC9qjx6aZSh0hFdpkYdU212Tb729xdU=\",\"LSO5DJlbOylW+9tkSBle1EHnF6eJXcHkM4FbmoB30xU=\",\"E403xczf7+BE7iiJS7Qi8p6fOGAVSsLd79yQC9Wx4u4=\",\"CAFYf1Y3vfJTKYvbjI+lVrulH0DGxHE9c+MaDw5yzm8=\",\"I89AcVwmCHaiTkO1wxTCoczhbh9BLrywkW8v6hjliT0=\",\"JzPVPfLM/xbIfvx0ERTjnruu/58SugN2uTG0AmKcUlw=\",\"I+gB1fY16a8CLwd7GkP4d9tyQQVdPHG3cf+nXPbu5K0=\",\"DQlP6T8r9M1K9h0Qp7/isUVpLLlDN+y/+ckaqI/8+JA=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"CTtA7+bAaL/eTAwZgXGmDkluHYNMKHZcmv2gkEBeSlY=\",\"IwWVAVCgucLK5xBhZhwYHBprPVyHmAuRypWUUOXK0wo=\",\"IQe6ZL5ed5fe8pvXK3K4vwsUKAYu6JAqqljwZ27QOu0=\",\"DtS5GwDLW/pZTtXLV9cDQkqPLdna9fVPb/905csBmNk=\",\"LH3wGmpwERXG0HdW5OA1n/UZG1gwDbWKqYzfPJhSUtE=\",\"BdVNI/LWhODGCar1bOgW3p1YcZJLpH6nAliFZ08r1BE=\",\"JI82fGagWpOtwn02rMns2s6sYzhcxTidAajXvtk4hSU=\",\"DvcXsUjiiRlLMy3sftKsgkMX5AvrQNdKx7/dsj0rPMk=\",\"AVWavlmBewokSScpUGytuH52+1T5IUrIc0b4ATwwMrM=\",\"A71c1vAIBhocCy2glwE+2I0oyqEN4ANpBMoDpLz63nU=\",\"K6nau+D5/cjv/3BgFC/iRM2i2P7/6Qf/I8xhwIthnag=\",\"E58K3VRD375kL09gpXqyUCovrq4bbxLh5eCbGQkFD70=\",\"CJZUhP9VnR5oZOOrrbXY3UAq0YAFlHO3bpv4J7dUJGM=\",\"JAwh+59s9/AuczxmCfl3OXAJitx+IbBB90hhVrT3jjw=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"FRkjpQXxO+5NNo6fRxt5tJmXWwCqvviWKoYefIWPKZk=\",\"IPY3Tj8o5WZbQojHIlUciY60H9ZPKHi0f/yRiIEsHjw=\",\"Hyb+BcDs+ZhDzIjCi/XHuw90QVP8tAXDfUyeXGDf80k=\",\"EBo9aIcuKiF04ec8xTwwNFMsy/yGRbqb0XdEoKm3x6s=\",\"EBXLwxLTVsDOlhMbWVhLB5SqcX6hIO/JlFEsHf3rQiY=\",\"GntT0H6/aWP+hxZsJvXAQQGfIhD060g4PJq+mKNcPHc=\",\"j9ig4qHfguRNqD2Ra4cJYPYhqmKlM2uc0LsSS9MO2A==\",\"LEPO5mQJrCFXQLyLH2hJmWebXiQDAfgDCtP+9kDgXFE=\",\"LCnb8iNJ/7FjWwGC6n07pBwHSP5L8GtEpAHNFesO8zA=\",\"HBO2tWUabX85KasJRiRvc2b1rdydNgvF3c41mWOKCQw=\",\"EBcbkW2KFAdav+fEaLAdI5xwQ6j5ffEDcB5xa/WnPyk=\",\"DFfD1saMnS2oQ6ybN63PHEaj4OrHxC/aTf4M5ceZrl0=\",\"Ex42HlqHJdAeV8PHe/on0fMylTO4LvSwGhqz3a0JiFY=\",\"D9ngdv9PXcca+7J0PHTwgKQ4U3k/j22AqT883TkBL6g=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"FXPZptF8+K+UfBJdpfn2RRY0QwfRW+AoYA1/u/OpkIA=\",\"K2ZFaV9xTIV0L3OIIsIaJsiQbBvBn5jgw0zR60Y9pIo=\",\"L+x3CuY+dZr4bQdCsEnrdugdRfaAdyjmaTDQDLnhpAQ=\",\"JO0CluBmVgyNyyOefn853csYmOWDZUP46Yrsy29hRPw=\",\"Gs6EhMDZbQUK3gkdvPDGzZvvhohLvsb47lbKX/RrkyU=\",\"EQp/rtUYksc+VMZU8vo15H/SZH2Q1uXlqK/vbdpNpz0=\",\"FJGqfzbYmsEz+pmSmQrykTtxGWyw0MNRHDSqUq99T+Q=\",\"IMsMHNGt7voWSYtGc8RZazfzT9/oOkEGXB+rZsQvNLU=\",\"G6KSU50VaOxqPiYVE027UTTHPmsU3spMGxqZP5RByDA=\",\"IbvnXXyFislIYj0N6MNZJPKPRm72KnpHPWobT1kqAH0=\",\"HJb5+0xrwz1GiS2IJr0MLyTX27842dvs8J539pvXAfI=\",\"EtM+zdZIKSj4qsCYeRC7w3K6LxB9biol/uNOgvEL4tU=\",\"LBthDOmHrL/Noyj9QLVsIJtqlEv1eB46d9Gvn6MLqm8=\",\"LXfD9CCjHVncDPg8RRhyHsoD9MiRP6w3G1U7lmz+pG4=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"Hggcuekf8+sNER8r5Z9Ow/69lAemnssHeNc1XtMEjO0=\",\"LgiIuVfg/P7MoqEVfddMsBodhUXRXKJfk3xVQZXaPJ0=\",\"FENEh+Ygie12WYcDRvtKyr4Pn56tKhlleojKw593O74=\",\"CSmYIcD0cMxZ+2iLbldSLX9Xr/HlidwVcihp7edgqeE=\",\"Hxziy6m0yarWvK878D9pDiZ6z34zWGOlTmmHY0J5udI=\",\"GZ+rlHm3s0Lftt/NitzbXvjNnKzYl/8Vo0RTedhv2CY=\",\"K8/06ACK9OBPAsM3P7NyR6qHPOe3yqNQMPunNgR5ptY=\",\"A7KzfiiAkP8RzYMcALn77fbYLpdUDFYHtZoaWrTjBcI=\",\"08OeuIDN5j2aT+yCpoMTyRKiXUY4ofYXet+dhB09hA==\",\"Eh2jgVfhE6Oz5AYKyrfhtAs2zi4qZ35b71q+vW1MlLE=\",\"Glkjc2wAfN0xMRsm1WBhX63H4B6GJAAz4fJGXpPfI0o=\",\"CQ9WjYBsXEsbXmFUK6Eizx9dSu05ZsJlCNgkwyKOl6A=\",\"INK3mHwyamhhC6POzQtNxUyQOQ3wErfZYXDZaTwpzQE=\",\"AwILFLjhUpzdkoloDFrUQWJ2MsqwiyBnWdKOdqD7/pc=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"Gu0WJ2+JynZtRQL+IczOBGpjzS99RKCqh3B3Hi8BLu4=\",\"KaYbcbWjMjeJnspOf05A0AjJejK76wx8CdjyTWyldMY=\",\"MB2rv9S7ypFNFpQ8u/w+vwBpiMhrBU1rYT8Hrh0JKvw=\",\"KjxtEmPkcMyjrlMxBzObjf7XcAyRADmytFsrxnV1+fQ=\",\"IP8qa4ISc1zLgv9ZeYhihU4yRCRMsFZvXT1Z40GqNtI=\",\"AuXat1/2nUpC50UofJgQfKnD5CPcb0EJbAOeuXJLglI=\",\"Lw+GkMfNRzfpE2U+vYT1HV9ye7bscpx4xClyqjTW5M0=\",\"K+bEpe/kg/4Kc363ffeBWmWZ8JHwIRMe83/RkjBcTFM=\",\"AvGEOXhred80YPQ3uf7XT/pdiZ4vx3dKx4r9HHXX2Ys=\",\"JX6y6KeTm+a/xZ0/xvunXaNQSaNid8N1E94D9srpFTg=\",\"EvgpjEpoBw8Vyq9QCHllnQLDqpt3EQYkGRfLZjhggTM=\",\"IqomMYLxnIq+cn6Hoikf3Wr3AU9e5axsGYoQjc8C9Tk=\",\"FM7icVoGG8cIM3UHuI0Jkmf/19cZYuuhv30qEXEGsRE=\",\"C+oJsDteA9JWXptPfEOpHtgTfebfpB9w7Hsk1Y63sbQ=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"HAERQBPi0swPRS737ysgImzGnlewKEZOlSKOlR0c2FU=\",\"JcfgQS0gcgYmhOlrZWxEEN1dd/ZExksbHIStXogs3mA=\",\"EjHp43XIXEJMX6x5YA6RkE+Em4+3HHq0w3p65YwX1eA=\",\"B6CmPWtUQzgkOunIRrVCshPGclYDanGaRKRRuOYh2EY=\",\"KJTTg77MpaR3Jj4YjTDdgdekHlbvXIXBDZejCbjazP4=\",\"EBwOa8hoyS+ZYI2YOftiYzE8Kubv5NnvxkLVd1dwZrM=\",\"HSqE90dbplvzGRBqtXHnNGEeCqdC30ngPJiBTCFVgvE=\",\"LSkT5h2EI9VXkg0KTOIwo15vRd8AkuGvOJ1CCQIpXis=\",\"Ae7QGUECCjCZZo36gbKlfBY56mxh/9LPzon2lueAI98=\",\"JUFzBu9CHY0KBlFcJBti26LxY2i1bAoJ+HaFDE0AhiE=\",\"C9CVPWQFUiB7DfN/SrAM/uL0WFKG4AjVPrASRGT9VQY=\",\"Kb6zHdSvRaWZ29p+MBTIi0sBc7Np6WdDEwIuw8OdGHU=\",\"JTBbqCHU7MpoJ1+9/lTwaKjjtUNbzva3vEqNpn+RKRc=\",\"G/7Jpdihxe2GxOf9u2uW4wJgLRT1VIixuYZE5hIggIg=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"F38xcBxc2GwhNcWC+iLR+hAFrRSOElyABGpS+Zonigc=\",\"CEtEA3yoRtw2OmRzftJeroHkdSeq1CyLhg0vFn/IYpk=\",\"Bds7RL28QrG08myZ/hos9kXyjmznElPZKkBt2Gpge88=\",\"GHjqlDMh63ZEoSYV6oKGD/rU4oQoI5kCp/T7L9M0ZL8=\",\"Ek30co9kJwlovaWu80JDk7UehLzGctt1mDzMpubvsS0=\",\"I2UOHa2dIeO1oRQLF4+dV+g4oJOL3IitfCMlawliT+M=\",\"IBpS48KzZTKklutCBgxhUP19w6wtty34UMOi4/JUZUs=\",\"AfSXjKB2MIOvCVhIrxdXdQ6oHXgtljhWZd8LYBIe3mA=\",\"C5j9uwB4mluVkO8VfBkHo+m9PLZ4h7unolG1jNRYZ7w=\",\"Ckl9/wMoybY5v7H0QVhrPbEcCXc2I728EsQM5UTZBQQ=\",\"DrAW3TnIeMCwm2xuhsZSf5y98JkucdkphV8NRSV3UAg=\",\"GO/cBCWcyhEwrtxxZwl9Ju6pjDjbktaZ9xQNMUi3gqE=\",\"Em837yWMqs8UZixuH2353E/G0XkqF74a8oQ5trfJjeI=\",\"KIkoIDsCDZ5qV+6eFawp1k4nd+4IBJMHBRfBozOMu/k=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"KW6k43YO49HL+r+ctzpQbXzXi5oo6pWel30FbLBxhdw=\",\"CadUIDNxOrmMrns1BSgEaoGNwbxNrywhGdOKuy4Id6M=\",\"MDRwaukkUpLSrvJBtzi9OwshF1fkwuATfixlwePGfRc=\",\"EEyiEa8stEuu4VJenEiHwcqW8tFHFI1vjXCD75dbT9c=\",\"G1I/iGfsFFwZ/1DUvbVgbCD/Aas7zgwHaPwopKPVlaY=\",\"DV7er4TB514NT2cMCd+qBw2zNkDnRDNsYLGNG5uQSWo=\",\"BRJLQHyPtABn/4FjrziKyZsWgDHswiqnQj51b+9sliw=\",\"CMop6lCzY1SvzpUHB5oG8GdTo+ITYlmcO3LVQgUMSdw=\",\"BMNibOLbxNZParaVxZ+PUfODoYPlAzcAr4P4PDGJwek=\",\"FL9m/kbx8RgMJPFq633sP0rQDBtumYjFZCtUlgmzdXM=\",\"Bnsr/nvOLfv+uQ7u26ABIe0mIsONQETqbec539X3XRY=\",\"CSh+ufs02f9D6/NzRmQneVOTgj+NcMiOp229esmJvW0=\",\"Fv9Z8NZ5ro50rq/M0HFNlmxP4ZNqoMf7r4goFohQUks=\",\"IFHYzmxdzrwtf/4REwdXvPfNFCgxA9P95T5/eogKhRk=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"HTYO4xFvB0QobaQ0BgSb0bghz6TD6CN1LADwRRyUIlQ=\",\"H2zNx3Q7pyMFoEkaMGqs9OOwNrDwYC2qiP64/YzGLKw=\",\"D4UHGXFh+iZ9DGjNOB1CPziAylbr0Nfs7Groj6aNei8=\",\"GLSleGCuX2tawtT4ySSyuzhy3KPbeDuuAto2b8hLehQ=\",\"CvcW5vEobP392T8UF6BkzXaxp+I0fWHZsYIeuKTd7rw=\",\"FPEor0cIDbXRIq4ai64nR1wZM/5zz+KoDYk4CyFHkV4=\",\"Hy+XzYHP6vmrgDIOaI8q9Fyd/Ep09yJ8cgX7BWl84vI=\",\"B6mF/KYcM0agjo/DEWdjZQexOIWFC5y8ZHmN6bdsxXo=\",\"KA59mKlbnj684aTYMl1p9Crox/cyWgS/381TGnDQgWs=\",\"Aczhy2krjGwCx7ai4g0fw28DG8xE/2v/DEq7Wxx0OvU=\",\"Ksn9kC9La8X5FyKFB7QDhZy2cHfsK+roTKGGd4WOVoY=\",\"Abacv29rzsUOcVl8Y6YqglOmNBJhLOTnmyYnU4Mblw4=\",\"CYHstnTE+ZlqD48BnWRSDJ2TOtDGN18XpkNDA1URPKw=\",\"FPqo+BhMispGNjgm+GSHdyICADWXDb8QkNTTkR25qes=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"GmkG/aGbCUsr1N70sl6vTXmc+RnQ4Ug9k4AYAGQRbPE=\",\"GrbclFF/GiNdEQeQK2wDS1U1z76UypCWv3IzC+BLF54=\",\"FWabXk3NZs8ptsBqkwj4Zy+I0Gnn6OrHyxGAi4KRMDg=\",\"Ey8Crr7n239p/baMqPvVfzh2ZOZCD+IAYJQTRP5bY/w=\",\"BG9S/s9ud6lbMSJtNJVPKLnQ4ugAjeWz0RwnTX5E/hs=\",\"K2nt4k1ON/GowdWO3zXQp/mgcWw/cJz+XPpvBp/H3NY=\",\"DcLMqPDT7/TSh3IrocULkGIjDVtsdIqk1wAzhexUJLI=\",\"DRsD0AmmoClc28nyPvMrwpM/MKi68jYCA6sGS2k4gzk=\",\"GhlyQ4zyn5m2gC2aGyTvxQFznG1yeKXzCxZnwre/xdY=\",\"ID3ZLzBXk2Ho7P6eCEy0HLr3uT+tbX96vJ0Pc/ukQHU=\",\"Cdb4at/65eT6bV36ZE6XpbOCocfpBRS+qOzR2kJ3M4A=\",\"EtQFcuHb5HM0oWxzki58TalnWnbV/gmQJ7oAPO6PK44=\",\"DDw05zFYkYtyZTFH0ePQWbJWwWV/5QQwp3jmP2FAVQ4=\",\"BpcwYPcl365hrLzzFx8XrpV82GLob5/GpH/HrOJKiGc=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"GzpVErGEKIk7SML+kVdW58x66qjKNsLv9tq4FWgmTeE=\",\"KrlnDBj/jtwchMGrNspoaZDwfha1Z7+WQhZe2qWmNG4=\",\"EGYNUIK4/Lf19OsFH5JumaX+29cG/hkbsYwm00vjB2M=\",\"Guy6Gvm3AoG8JyLA2CoJcwXCCKODxoMwoWM/47WclKc=\",\"DSOgbnl2GQKm7zB0nIaZjD0gvIJ8++LyK7oPSE3MBNc=\",\"KCtr/7Bi++uqR3L4CHgLALd9ocUvpki9dK4K1J/GLZ8=\",\"J9SLFbFRN4oec4l3q8TOLYvKuBbcMnl8oGDuAJrHREQ=\",\"JVLvuezr6eF6gldIhzWfrPXNYasupkvNYMUOBTEkN20=\",\"LlBWMNtEY/HSJtDh/MW+TORXfjkRvTJiMXpPsy1/jqc=\",\"HYXvk9nwUkwNV5QA9i2Pp/YjXIYxutB1CdeeINthStc=\",\"JLrGO/FmB/syxI6ULQy+yLf7GFVPNC1pc6b+OjCcYkg=\",\"JAOjNwWFXZ1EVneQM+6xk46cm87cTxso+Qx/zj5POdw=\",\"DmYZCJBPXlMKFuPBGEqs1D7Lv67+a1WJkCa5/JlA2xs=\",\"DuYzbmb82zpk2GuXm6qwvSNSkb37IT7VMq76CnLlw6g=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"C8Y/QWUehExmAHQhtUfWnWlFc7E0O4WDqt6485ucWvc=\",\"DlzbNGXxJ0P3HvX1BOalkn64JCZqgr0C3wNe/gjpIfA=\",\"Ggr2lzSqsuQwTRXnppsuZJVrQhTDMNk1ZHsrEn9q/ZQ=\",\"IUSRX25vgp5xecXABf/mye46eW4y3lV3IlaWp358OB0=\",\"JLYnTS+UW9pgWMM2a22R4zdAiXxubxMzBEh7Y78LpDU=\",\"EO/ER1H2ukkUUrhKkllDNsb/QBIJj5/oVCAkLN8IK68=\",\"A268am/LmO7V0Nz4cjlDOHnZms9vvcVwUQ7WyCUFXeo=\",\"F6GyN4/qlNCxqW6nAFBbtFxDGMm5EZSacQdBT2Nqkcw=\",\"LkVadRjlTsLg/c3Sgh5IiHfFlPhUEx5qmu5zLblWZtY=\",\"HnOXZE7U9Mu46TGw20kE8pECtQo8qDnEOsTAw5nJqK4=\",\"34jvHxpno5/rclMWcmyXsISYEwCklmGaONP++202Lw==\",\"JOEfycTHdjgp2AHdOiBTWbs3ktou+LJ0GrOyxUrOyK0=\",\"BJILPoAPd9fMmdjuTQFBpF0nkp5uSn17xBk64lroIDM=\",\"IKt7ar1DqI9oQhfvkxwTzBGQhWTIYD4BmTsOJ3qyn44=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"EPiln4Jz6s25FUpzRlPk/3/ODaQE82sv0AGz8He6aLA=\",\"FlIVPjdezSN8IazcP5bTkIj9ZW3/jWb4Z96HhHD7OR8=\",\"EqR1YRHsBo47nEoUJ7CfmjE+AY2DH3rl7+nz9sYcE/Q=\",\"ESQ7GfETJBR35HkPibjqeWZnluuqMcws43AP9R7Ty/A=\",\"CT1qtAqaSjvXTwlxIGVMgv7Pvv0QZ/c7parwMbHBjDU=\",\"LyaRGyNGbCO9/7uKuoFXUrbQvePRIIi+ytCwj9HcSXY=\",\"GgPavmajA3gy2TocPDNXTFsoeH+mQ+xRSYMPgezJK9o=\",\"IjsQwsVH4aK6QfuRi7WrYCqf8hoZw3wVf/rryVusSHA=\",\"HycYdvF9fM67Iiqj2kzAlAeqtN/dRT8d3PJIYx7sEIg=\",\"GttYrdcOIt5RAMPxhwV+kwydEi4SjD0RWYdMME3MEJA=\",\"J7P36h40Nz2Bg75eRi8OxR1dDIvwSaK0jTDKghs2ivw=\",\"AeWraabwBu9f845J/DS1jRAa6QusyKY4w1OmNqxuDMY=\",\"FOu9CtHyPix68YuMQ6QehkkhifOCmXg8Pt+On6iiBz8=\",\"CTnI90zzF1UrdPetKtXQrM8+Aqw7nmepGWRTm88JKVw=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"GlXN9mJctkXNYJDD9SX24peGSlAQQdy82ze28Vr342o=\",\"J69flsvDLyF//iF9TUeKMV8glShtZYmuNRDoR6d0EAk=\",\"IhCk8eZgfiO5CkU0XMxWmEvIpiVsZh8EKSt4Ujvcx+g=\",\"Ifn7D8fqYc1tD/LTV4XW59FcepzafL0+OcRBZvSxdbQ=\",\"HuXRRWfJQccNB637bdUEZ+sGaLe90fzhh5vc7rBZ+U8=\",\"JG7Zfk6t6+UMigr969ZZgDDyfoe4nwv3MJDaTZXxLGM=\",\"FvRN2QDdnydGF+LWFHMyRIOBcb8MiawwJW7qvVyO6UU=\",\"HkXkLD3OpjsgUYB1wWdFr14gU2mDsW9jLTwVyRs9fRY=\",\"GfrFzgAoZ0zou0AFgWLlD5+fi4kFVA+3cikwy7IBEqE=\",\"EZCZfc2w9Xcso96Lh2pL5i+O4LOdbCM8lYSNBzqO1qA=\",\"CWx9t9AIVzeTTe0mMXGRcV+mx4nePffmjwDor1KFMPM=\",\"HCHXcc0DOPDAwA/3HkrywdfbgZIs7QmP5pia/n0eTRk=\",\"LdQ9PEC3aPViV1jcNWaO+zunRzR9X/yYDsCwy6twnIs=\",\"EDAFn5bXXgS8X4G4n7e1sP/wNhrfBMTwzt6JYw0vA3o=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"FjUBkpW2WwGQ/dcYkn2v5MDJZXcmZYAM/VOdVZ8JAKk=\",\"LBfIkLcVs7vsFM/I8GDqhNfBLfLlHMHopumH9FwBZ0o=\",\"DI/+pC3XsgYDNCelEjd9MFT+T4+GNXqsWAMvot/nx+0=\",\"EvpV39ZwMJry2YyN53wwKl7kyj6wi5DycjDwX/QofH8=\",\"CQCWYqWiiomunW2ps5gXZ9LM7RhnfkJ3P9QzQpfW76k=\",\"JcrrtVAed/FzGlS+Dgb4wAUXYSfzVW3cviT7WATgggY=\",\"AZXgBnNHhuWRrNkv0jP3hFA/P9tdsYKZWS3lbXcAKKk=\",\"BHiFuYb00Qq0RGMEKgv8Ot+ju5tVO6yW7UD2FikbziY=\",\"CTDzqhxUEDlfmxeiChdTtyGgKR/abzK+6Kqm7eKY1yA=\",\"JK9jgDEE6DGMPnpBz4AnrTamMeoR1WVSvttfACOfkCo=\",\"Anxj5yXRfZpE9H/HPwLXuyFQug9gMfAE5gDOAIRArvU=\",\"FXJwp05OzIu2+XbFvc5wkSz2T+nIgW1i1CsOrNlRTas=\",\"IZDn6CLAUIxx46txNP2JpAd1vpmhs4wnZ/YxODXu+LA=\",\"I0881eDPcx2lB8ka4Y0oBhCCrpqlgHRhSdGkj2qNsqY=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"FDP8a/QqJUHkDBBKJNXLnUYvtxvwlL2ZjIWTOHTu4vM=\",\"EKhEXYPzt+xlEoCDo59cdZufUruM5cAkvo4tMA4MxlI=\",\"Gh2EgdOadykR+bzuAl15BJdk3OtIioJ18Do5hw+0yQk=\",\"CC3qKBqhFDWnQpRjs/rao7xoCq9J8C7lxA0RD2NzGkc=\",\"E1VpR/0HFK7SUeD8+RzQ6ND+8trD20/587bFNl7pui0=\",\"KVCHlCJufLBrwXADLTd+3CENq+vTolTs1N95TWX4z0c=\",\"A89P7MVLUpskfkgEipY3CbImMM5xmsip6dH450tz5wI=\",\"FswXMFs9MzJ2qctD1RCJ6tBNwvHhl//wAS1MfE21gpo=\",\"DDbwMYhEU/zngkvXJPJej+cdPmQLrt2TmKcZ2PAcVgo=\",\"BQ/0AQeq+pouMOoaJLZBKf5V2oSilMqNCvy5lWqwl5c=\",\"KLGAOYhKbWna/qZrcjBy4MVbH9q2skfoAdbN1Sx/gbk=\",\"C+GPsnSVc8W3t1NO88sK1WUagBs8a7h1/fMM+LFV2OY=\",\"LtO6JD+1YeMIp9ojTlgYmJgxcuWM6Y2alK7ltt6SW18=\",\"JI6x7hKdUVq92fZab6dxG3CDdBh/qmGsu7bSGy4m3Hw=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"CJ+4sIN+C3yVmMO7XvxA5i/zHmbqT15RuTMKIPnV5VM=\",\"LBcyTsjYDvIgAWZB8Yu47zrQ0Y5N6N7CyoEhVZHa574=\",\"I8CJM5Q51mVQfA6VarMgiyfWQ1JgRfSvy+Y2TES/EJM=\",\"Ayr26bZw7exHRNm+FsL7Bd/9d0KwNcXV40WJ9crjguQ=\",\"E8uF50h4EytqIHhOO/Yd8YGMTWFBZR0drR76zVh3QXQ=\",\"LbB8G/8u7sjFuduuWG1qnn3/EpNAUS7pLCf+OsunjBs=\",\"CYKYeKrRnaGCR7buaAtdP42UwLBGwk+lZBzAeBMDGDA=\",\"HrANUOOww+zaC1adlhWDujukmj/fYuq0E3q07NFlFec=\",\"HJLXsquJyVTTal2kRm1M6P40dsqxC8dnFub6FGnTyIE=\",\"KUEuT3mVe1qkhPiWuqlZd4CNLqds1h4L5ucFqpwxxBk=\",\"C6ZmjaXVveEM3JrtpaBQ2GTuL3L4TKYAowOqLzgM/vI=\",\"DjBBxf4Nq/lU5tmrVRnlOJyz7QIwF1XyS+TEAIRKAZo=\",\"BG+AvFRVqsMiiYb/GRDZiKhgjMjuoYargh5bjLiKip0=\",\"CIYDclLfSEs7LpCfee9p4kwrDwqbkS1mbPYkuIjXlY4=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"Hl2y5ABBrZ2ET8COSTLCqJPxThB6aFNML3D+1IC+7b8=\",\"LQ5ZRc8f8RuGS4ZlnmApLB124pqI014tJQB8Ov9XSDc=\",\"Be2hyd4Gsp6QG0P02+75V0a63pUz0HoisI7iz5SL+Cc=\",\"CSFWvGCRm+sOLCYtm0ypyIgiGxI2g5olqUV7TUdXVKk=\",\"IDRqZO8nSAECaFw5gzYA8DJ25eQJTrogd0VyRrtbCSA=\",\"EIB9hHkBwreukLKBv4SvFkWrvPsi/sdiZBgnOlxAYdg=\",\"GgLlYeTmx+XDO57tR3F2wpJ80jMfB9nq3W7IDS13w88=\",\"GiA2VIaui7/+Q3//aWx4yzRGIq4NJci2sbHeti/QO7c=\",\"EPa8GYgTlD2iMA0m8IHKvI2v2SqVMHdXXo4q5LW2D7M=\",\"HX1arqi/rhmYCzxSn6sI5xh81xpwbzkRWtHPC39X9VY=\",\"HfHdRa1JTxqHKogkDBqayGwYJliQ029bV/hKbbOIs1w=\",\"HCnYjFp+RLhRHIeHIPjtvS7AmVbSpHElrQjNeRpyp4Y=\",\"Ku6bVaL2Fbb7/8zoTGUqP0E1H82huDD/O+r7B10EcrQ=\",\"HJyhuqDz0kLTmjq3JYCHfBduKKXIh8AEJ5pZsLzx5m8=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"HitrC/eztO1RJrjovmtrBw78KNBi+JFLobX8aO0U7gY=\",\"KwCogvyv6NQ+faQkNmpz2gt8qxlHhEb1baeim78kq9U=\",\"BEEHDcllwauxXMTc1maM+lbxEikDMY662+Uq9klcTp4=\",\"GAQ1Djq6pCbPMB6wJB0vFyY4fvvw328MMDzQ+YOZfVc=\",\"Hq/tfWTR3quKGz74DYM7Oq6U78n4koalV4nGuH1jex8=\",\"DAi4lKza4Kuz4cH2U6FQ2W4GZqkuim9zLYtDji/35jE=\",\"AjF0CFF+yIvXeLrnsm77und6obRGDDr3HKyIqh1NLXs=\",\"F9zL5z9aewNug/YjPGUciDp5V4YervuzhUaHhbVZLTs=\",\"qa1wuZRc36c226wh5LRCZRXtMv3wR2IXQVyk7c3sHw==\",\"ErITAlcgRaoTcotluebaLdagC0nJrPdBjQNDG2Y+wxY=\",\"L3PmBhvnTQ2+FH/D3hkc9UZX41FqYKbaZQ3KU8bUuA==\",\"C5B+diibIUc8DmSRdEQR5SCJaqYU2VX6O35z0l1PVg4=\",\"I8b3jrHzWOTzTXodWFd82K82LI16ZQyccLfO8oyLd7A=\",\"Af5TcFTf+sfvT/+YpJ8lOhdWLTLusZA/8xcugIn4ilw=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"IkIKVWpACazLVMKyJmumV3bVRVp5ROzjdAXyu7hJ41I=\",\"GtGWj5khV1p1Rw8i6x8uLjprlzxY4i/zDHMflwZL0FU=\",\"LXCemdT8TVnp2rS6rRe7110jMeikSMJZXINeluzlkws=\",\"Dh3x2CnJIOBjzf8yNC8iPntIUd94/8uhgN9GCYjoVwo=\",\"I8T7vhsN4+i1emE3wzHjsoRQS7ufIPvp3CswQZTMsmQ=\",\"LsuyrVmCOJgnhHPYp2hZiiLSvnkiwpKpZMlTCArYppA=\",\"BdupXQT/8GJF0PTO1AephXG7UiVHv7umxhcxiExNTjA=\",\"G2tHYdGJ0eLbBOE/FwL0oVMV4bQGExJjP70vfZyUOwE=\",\"HubF8HoAPn988FymPsLFy4XwE39V4eYsgcm0pA2b3Ck=\",\"CAK0VI2j+Q6opJwmz1g3JINdit1InagZF8F/92hsl+A=\",\"GjCJhU5F3v6elTgI5Y8UzQ8O251lMCcyzlRQySynmIU=\",\"ITN3n7A5EsHx2yK1nzqOltOWFzznxavumPBRGbkUtwA=\",\"GNzCP9reJ25cG6T5akfLpXzLzREC+40GNyNSPi2Bmzk=\",\"KhuHAg87kFlA91fO5/C0WSF+pCm3ep7SQEz5ZVdj4QU=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"R7vcSDaj/9lArrLIYIp1+zfU4O0ZKfqJMSSocEYzPw==\",\"L+GIzr7z34CQ8n/UDU4fVXsqE6r829NtU825nsSPoT4=\",\"Hu/qL0LtV9GLi/dZHd/Q9UpOdDRkboTnx5oV0vh5qqw=\",\"E5TACatcxD2OoIkoakPTDJBNIn6aFRVJu7f00M+TCqI=\",\"Kgu5IsWjb0KBnQC+xj2ljVC23Ub/INKjspwcLh4P+Dc=\",\"JwslJgCP2lFXiLTjjqhsnJ3E1lD/zpY4+RuFRT3t7U0=\",\"K6Hi0uvmWed5MB1j7N6YjVVDLVvX+KT3agPiD6Mf3dc=\",\"D1aDK38GqKOhwoe4SXrhDcBfIWkXRQgT8h/9pMDv+tA=\",\"GVmgljuXSs4dvvjdsJycz/nsv036EMLBdNQtUjCYz9w=\",\"FI2gTwrrA86ngAni0RkoZfW5nWMGgbcc5x+ewF7VW2k=\",\"BRpAr0FvT7X58PUfruCua+IQ+bk8Tq0W8smpaoVcQaw=\",\"IJc/H6uYkO1IcjryNBUNHsygZmKdwdBwMcbKteYKPv4=\",\"KiiiTvG911p+UBpPA1wbQx9NdVTfX6zYAOzT8CTsgVI=\",\"HS7k4Y+hV1+z/3I7P5rTXLCZe0NvhXRsaFeIIGgzMUg=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"JimZn7UlFBlxmWhqpMCwlh2KpIQEJBF34TG8I5b9pzI=\",\"H5k2nXCmO60LdmUupp84j6kroWWINvo67TZnROzs3sA=\",\"BFEfQWSb6F5FXOdDOOu0JciV+IVAJEpVTJlHvOiObtw=\",\"C2lvdTYVRih2ue/i7h/tecSb7Nz6Oi0NBKKQUTNMoRA=\",\"IU8JtVV4RmYmNt5GedzZZWEcPXjo1QossFicPskMmSQ=\",\"C/WDW0wLxLE6Pb4PvWj6vW6mdJtwRQVH8MLjtljAEwE=\",\"DEjGQOiKZEKuWsV0Ih1/EOsuZ8ow+wvxac3gBPTe1QQ=\",\"AaWTV1a1e/4Co+/tuuJuWhMgC+4JlHEgBVid38GrW4w=\",\"A4a6hqBlZq45tWzaeVgK7QZHuWNolqR6fg6aqZGdnAI=\",\"8Ad15AC9w+hoWyBPB5ZOKBY+yzxjFl1Gw/Rj57r/6A==\",\"GmYti6B9kVz3UEzbwB7CpnbtdjR93U4H83DiSae46lw=\",\"HwYTMoOteTFx+ZpOjL0s+0ZdnWr5/7RZLZApNCF1D6o=\",\"D4MFlQfIUsl1DVKAxECvSdqbsyjuY9Hazu/QvsshT9o=\",\"FNHr+8TChPAWE01qtW2t205kdZPKoTJOyzAqd+8LO9E=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"BdTEJwwelANI31Ravx55v2R2WNLnnqzV3L+X1o0F8+w=\",\"J1223fNw0vfiECDfwRBiVPHGD7t94H7+7D1nIrBLxU4=\",\"DY4ENkxaI6YPRrRUhFnH58ACtz76YwvRZas7aof5ZIk=\",\"AX8d6Z/1uWFJO+9n8WLkZMQkgeRIEi+luuzsjK4LIZI=\",\"I9pQqqJbdvDa2fUNsj0S9kpIGfVHAntr9SdoeZNi6D0=\",\"bUq4ftsPoOoDek9eoVg8QZgSnwZ4KRacBudEDzVEmQ==\",\"GP9XbqwWVBzqFzxhrrVB4HYc3b77SpDxRIGJR9FgE6o=\",\"FAjWRJc9ZQL5P90vaacQk6n+UNf4BhrLR0oKFLowT0Q=\",\"Kej1VpKOCWNP0LlQ5b9OkEcNRePBaxOGTVmMVV5XseY=\",\"FjetwOK8UTQC86i1MUAX164ZLICcQfM0gibdUO2CVC4=\",\"BzI10KnpbPhuCXaVOYij2aJgzrWbp2M6QMvX/t54pRo=\",\"Bt1em6h1v+b2WWujzzXsI0K9A0IvE0q5mrfd25d4uDA=\",\"GPSRxsOxKs0GoRdWPwZ0QKx1PsRopd8MEjSY+98PFD0=\",\"LQn64SbRWVLCuR0xGTLJPP+M2itEznTF0dbdEy9M8Lw=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"ECK1f07BNKj35XT7Ygk9QVuHavY4Ez0y02apsa32IPA=\",\"FNUaJf2NHcXHcgu3k6J12D2BKYOWW8mwXTBnlM8dzfM=\",\"LGp7MVdfMnAJ7tBfJflKTxc6VEoNj6xnNHQXezuaFBM=\",\"ME0qRwHEMzOCfbcZddnCxOZ1BWouoem3Kg6vEnsl77A=\",\"EffGx2RBpnvFlGaHpAoops3L0K3oTDiRFbdEEVxif7A=\",\"CaG6rNi1V/Cfw15kNOz+kYKgRTcXHuHSvWA/U3ggaAQ=\",\"CJJqabLVpCAO4294Z3ATl4HrYKfSctMUBrdRBO/L06E=\",\"IRNd4zNyVmAPq/WQ4EwpxeCHWZGmfRfu1fUTHFZ79Ng=\",\"FLJI+r277Q/WbImeCoAbu+9OGvyb0Kv+9HGIS/oWCEE=\",\"CG4g0o9TMyueCcWvgVaU/4PxDzeZN/CRBemFKf1LSwE=\",\"EnHzC4LLeYZW5EZcRKn/IEMl9f0tLiBPK1Zz94/vpLc=\",\"IiSo0JY/GsTz6FaV4mkuOGo8FJKqWBJwhuE4W5ws3oA=\",\"D65QQ0sb8m95DKoW7yViytXSOBMFIts6l8GJOwyB/8M=\",\"A/KhQuQIQWTs+mMApL5qvvvhVfWthKaE92HnUnWSYFI=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"J01NgzcA7rtc98j0+4HBdKEIkyoOmH0oidm5OpXRh/Q=\",\"Dpu4yfkwZ5G3dYKhbFOUfhLg3+0MKtwe0hFt1FFZiCE=\",\"AmoJjpETDg0QYDvgUH3ZdUMZI7M4tsCjiQ+7gVryj3s=\",\"JtZTzgjv+PFiwQM7Uup+Z7oPaoA2vGTVVqdYF1eWmKA=\",\"Co71SbkLvzr22ftNuGVrfenPFCEpiUIneMUmkaDKg/k=\",\"CsOfT84Gon9ZtfQ0564oCNpULRzV/Ri7S5Dk0VWYZ24=\",\"IErtHeOzFPOa/iezsb1YmoURg67TnLMATmfeymRiZro=\",\"FYyy5zxK7EwFTxdZ6fMpO2KuX98Y9pvk9s4cZcwcFVw=\",\"EwQKyi++fAAcFK04bHVrpGV5a5ymd3NdlYYWALPOa1M=\",\"JnSpqN/7ltOClfbt0cXACOkyCsHplnK50FKJzkX8Zzo=\",\"BXviNNeKhqtH42kbZ6YyZlGbtimFcB8gcklNY0MyKkE=\",\"Erv6xq7Z+72BJUdT6L9L1MVi5K9iVI5XfryXP3fZr3c=\",\"AQOz4mu8R2euuW3qzXcbW2lLTVcznjUcEFB/Yb9V2RU=\",\"BfkY3ITL1qCjKmWxiOPxxuNBK3YjD8f25bF2EsGr6Lk=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"KOa3NuIzfcQ47mQwmO8itpyGklJQnWBdZ5nOrNKNbPA=\",\"FzJiZHFHYd/q1c9SBY4lWbTFfTD6aLQWKrYW1N33BEg=\",\"Am0LmtYXyHtgDjsny3l/Sw3tllUAplSLVU0kRfScthQ=\",\"GldQXXOK/1mNUbosJaTti0H5R5Myv5XEoolTfdIqNm4=\",\"C8lGP2Laog8PJFN5ybNsSMJrjy59OT4po6teMFOXZPs=\",\"DS3ixeIhqSfR6QYX6L4wjYOpBbrSxaWyn/oGGGvWLJY=\",\"Ks+mkXwlbK7N/BNRO0BDZxYwF/ksaDFOTO58RlwBa+8=\",\"IwClXZTDTsxHeFeQ1M67PuFPQ/Nu0muKabHnZB9XA90=\",\"Gxg4bNlO3MU7X8BKT2RjutsLbxkIxTdl6ylTRJ07w9s=\",\"AWhSP82N5OUfIf+utRlMWII1Dikm9212tJCNPgkyteo=\",\"Iwg2I2mBJD817KDiXXxzxKrXuLA3XrxTIAxaFp0bpbg=\",\"FkSTHrPhWsJ+F2ukoO+iOozSzQpJXg/xRZulYsOfdKQ=\",\"C9ukf2SBBGeGlNHcPkhfh4ITh9Y7QLZDaB9pIO4VPa4=\",\"KTTudU+Uuc2ktBk8Laer+IVChr03zh0Q+v8lBGZmNyk=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"FbynNoJ/4ELXvWT3eCG/uYrHdl7/x4f9pkJ6nBo9eBc=\",\"FwKqvaOFdcYDSzUOS4iipu9qW8yvBLyfmTIXU9wSsfk=\",\"D8aUl69xJorjsjJUD4yeWxb+NR53lkb1zzS/fUGJMHg=\",\"E89jmRw+osQj8Aae72HUHTC3ptkHpsw/cjskH2dhMaw=\",\"CCEjFjRIA0AnNcZjsj/9FyYXKPn709kbL4biJ6NM8rk=\",\"HXbvWtg8yl1FLevl3RGip1aSTCa1RngimefJuef2gCw=\",\"D/R2Phy8dV67cwgJSHfzzrTLDTk+AFReyhadoPgsbBs=\",\"LuF9I5H14q2mdFsKVsWykVq7aUN+KJdeRm0hjv5DRvI=\",\"zfzRz1+29ATXaGcxqaMm3Lq2YnNlVevilk2B15Kchg==\",\"Dfo1yF8jMY+gGIzYzPehdOibMkuUSE6fHv7TviXu4ro=\",\"MCDnGJqgOShQ+WrbRshHap1ilRCTQ4qUiFiovcNAC4s=\",\"D309w6HjP1to4rhNnaBecWO0DockxGvvtAMPqIdo5TY=\",\"IzGz5ffxJ37LbvPoYvUwR6fPv7zQARJNlkN6dVnk2VQ=\",\"IFM00qAD8p4uukoPEV9JHhWa950YcWFCUqI+wsge4yE=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"BciLJkICOFpIuTmwBmacGGa8/yzpvpf6weK3+xPr2M4=\",\"A0k40i0CBmDQoAmsal7Ui7AJfN5Hu8DYzpQvsxxGRYQ=\",\"IhYszqe98reGxjWwvHEyoE92ZFtGffgVzFIel3zE+Ao=\",\"J7nsnCfA+GiiH/Vc9FXCs6OS3V5XzmhwuQwhftBRt5I=\",\"HUCgFzK1m8coBNW+Pbov0r6CCPwvH/uaRPvrMIlda3g=\",\"JaPBa7KWNRMmhO5JZOT3Nkye23P/XUHGEzR/kFGQmLI=\",\"ImTbXysCBuC5fOuu+a5XjVNMmLiiCJTZn/TMUt1PNeo=\",\"CFmadmJJ88g2yrVGI4M6+NpzReD5dvxoPQRpnDPeAJc=\",\"I6TnacQdVsmK9I2dPrTmXVw8uPHcUNysCJX3AXbGWWY=\",\"BoYzGfmED+ile9dUtYt/7SRm6GNl725njb58SVBUVRo=\",\"Ek+LDv4RAJyKFceDDawAdDphd5i7q9o99qyHdiXzWQ0=\",\"DDmSdajT6D6DKqtt+LCEm50TeDdukLiiQIQHToXMTjI=\",\"EZ5IobSnejpvfGH/tguTyQQoaCg1W2Oz+h9++ly6V80=\",\"KW4U/GvuO8LZ2/ifJIL5iRzx99+d27f5gpLyvH/ZpQs=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"Jqaa+JWgWjSTBA9zW3VOFt4G+iwEx9mQ+l/1dH+DtBM=\",\"CdOP1hIQKXNKzMwmo0tsCpxUctkh7x2wVF6g0u5Y38A=\",\"CSWFJcQgyRWK5KW3L3PPA22YjH3VBwCx7TeWpZXFttk=\",\"JAtIROGjnUys2qjLlt8XDMMGvTK0ZTmhVakdPexy0zA=\",\"L3v9eAh2KTGdZIVkf4JnhWrFl0IA2U0WXaNcE90PHCs=\",\"EMPJ2qm5F1Ivt8a8bBiipwlo7ROaNJgFoiQthYe5gWA=\",\"BC6DCJL9CaAWqlmYkwoIXyCHHnMFs2HTBpAGToaArS8=\",\"G9IppDIHqOtnD4eiWRAle01umbpiww6vksQciHuS7rA=\",\"F5JZrumASQKlklEtaR/DH+c2kDblDfUvF4menzEK2Mw=\",\"DJSGS8oO+QbOD1ZYanHr+cshkHYQ9V0NWXyRDxgy8Eo=\",\"G4EpqptU+t7YtuRZSsnGYmj3YbRXm6t15LhFZexhUfk=\",\"E4/EX+DpTS9W2RPu5vTcg2IBnUi0i8EdVm+xNqA05/0=\",\"Ed335flX9DSL04zGwreyHbbmiEJoQv4nkN7j5ceXA1A=\",\"AnPjqZNH2LtEQ/iAPzFEsceQgXYvDImZboym9B4s6es=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"IuFhlAtZd5hwnVcys1t6SmtXONYJQ0UMD88AFfdKl40=\",\"LcUnC0frAO0KGXiHVShuUVNIYHHYZ23le/HcwMlbgmk=\",\"GnDM2mCde/3NBCJ6HHs7XcUe2DKzIJrQXP/3+UvRfXg=\",\"GssuPIhyFxzwTo4SvfSu2YkD8wQnk4/yzirCygfomzY=\",\"KtrxJqD1+wIYXnQdaUSxlJWRePhL/PJMZsqnBZDQCfI=\",\"HTJE/SqWo8VHy8tWl02KYobnGt5eAmVEz6aiOeMqShQ=\",\"G9mYjzq/M0epMfVi1MJrLGx8OxV5KfHTUpQ4aH3cl0g=\",\"GrLVkrHEU4AoPpIDTJPlouSv3YCCUl8ycoyL72KT2wM=\",\"Jcsevl741/4gfNFZz3lc7aZVP2gZ8HzPyUMjRGSAk+U=\",\"MDN3CQkMlust1jVp3wgVadfLCcvfSnyMGpgrGlAr0x8=\",\"JnZ/5bRPgC0axZC0r1WkzSj0pFZaA/pBLaxUotlT1ts=\",\"IGoFWZJmO6FAg5+0jd5To3UJ113jz/4F5UOtEOKmqIA=\",\"JvY6FBCS2XtDGGlDj29PLq/TWH0XWeuNxREpvlfRyeE=\",\"BlEZD5cO/QToXOtH9rtJGyOR5+TAIpNUvdN3Q13s3wI=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"FvnMZPZEQz5opgKUQw+iy1kycS+88dhnYoVh+QV7cUs=\",\"JxvQivXsknFmP5h+bSbJG0lpdc31osanxUkLYslAQdY=\",\"Ap8/+4xvFCUdTk5kea/CLoS1wwZ5gGfrLKhTDAHvjwA=\",\"MBH5tnk8+OWUz/1JCyJV7sLXyEyvH863J2/FDVmMRjE=\",\"FZKwMBvHoiW+IF1GT68PJiDJh50Gt8l2MsSZayVeixs=\",\"Gmy1qnkJc71E/7TtKYHGM3UNnfjmoSJjlkjgowWHDYs=\",\"MAb4j8coM7g8V4l3Q7va3hq2n1K9h4i0QG4X7EK9rj8=\",\"JzhlTFFb+03VRRKu2ADmwES9sdT3fNQ4lFV5oD/6FBY=\",\"CzIfUeZ5PLJdzVJh9EJgo7fJ+cRMX/P/ZCYKgdaOuXc=\",\"FHe0bXG4aE9kSCAzEKrw+JSMEjLLumTy5jcrJtO5b1k=\",\"LhGXgnjyanZMLGHGbttvKWSHbRierW/cdnMQRDVdkIY=\",\"CrIxKg3+xfVtcO/eSBwSIvCHUNl/DzeOMkFtiRE0fzI=\",\"KTtFW2fvg/uYsJmU1DwwzinfubSZyhfGd07shEEurng=\",\"CVtjXIZ5wnV6Apn7pDjsVQKYGOPeC7ZnIQBNT940Kls=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"IwKRMgqvgXyb2vYvrcg8jp1VaQ3dxqtCiEEC+7jBMTs=\",\"Dr+dmDFF/kJ6nJjYRnxkmmtv0GZvgM3D7d4tYQOgvLk=\",\"G4ovBxrPRWSUkbWM9VdqhixFl47BIauky8KzRPatzKI=\",\"JCh/Q7gvSoTzolAIKWV+SJCXToMhc2sHQkHW1MZxTMQ=\",\"As4fFie2QsjfqtA/tGSY1/heuoW3eO+uuyusFNPUwvA=\",\"Ee4VKpmloN6HdRqrmBgNBdseZPNiFJi+9agh2BP8euY=\",\"DOYtkethYTE+p+SCcxItahd0+W5XEncQkwK2jFPa2ww=\",\"GYJLzqbkzO+LI9UBhAvE89QIN9xgtDcBRqS2j2+Im5E=\",\"LR/HDhmac2aLTQw3NW9XUmnSWKrnGZombmPIirbrTO8=\",\"AyHCtfiTjfHiyzBIjmFSGplwbFj0I35MYVAL3+R/ViY=\",\"19oGtN7J/F4d/xQBcuCoSp0UcVR0XyZ4qYqrw/eYnQ==\",\"L8QfZ80y1+xO5RfItmfJoO4jCPdZ69iJ9qwEPYqoL0A=\",\"H71VsHpXJbPeGpc502EUyTQKmHseZqwhKxJ5Ukm9gQI=\",\"Cum52fIQHJcvhI8KK3qJFqOimHvL3PodMA4LeB0toGI=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"GfRdt67HbfG4n+6Ekst2Do9tKYysFn0qq6RwLTDzEF4=\",\"DrPeOqYKHkPfgTeQp7ArV3S7k7ZUu09pC7v9iy4ZwVU=\",\"C1Bqu2Xb5VVT+mW8Q9FZO+RAucUif9yE4ULuk2V0L/g=\",\"FyXPQM2r3aJODLNdEjFbsLz2Gmgas/O2yizQa7b52Jk=\",\"BbLg3xcnSC/GWXx62gYkgZRx5MTy2+71jO0MLlooRPs=\",\"LLF9PYpReQ78+u6XHKkVXwB0sudiKrt017jJhP7/p/Y=\",\"BXy+libBa7Z9fwAAnx54gbU2Q+q/ar8/S/rbbPlng4g=\",\"AdWhdd9tzaqTddlUxd+Lpbz7OUBwlnojHN91PiJ3JX0=\",\"J0U9RFpGS+3S+UMSMGTPDWZ1yJRvB3lXdy8y4CoPzyk=\",\"Dy4qfxQMOMXZMtLW+2lJFKBg7+nmv/4U/B3LuEC7tGY=\",\"JA88KFvBoccXzAjvIJF1zh770Kr4lFmcYpEU+wUCT3c=\",\"LcYr6DNiGOuRUuxlPF8tDtoQ/7B6l0uujuWjcKpJe1U=\",\"FURUlELnVYB6Ofqhmp6Iy+Jv4fX0zSf+aPqVKAam5yw=\",\"JthTEeW7Q24QXC7szXaO4yrLzSdbIsE1vOth9vzJlpY=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"LVwG/7PSt8+aDceXGTz9qFUGDCHeYili3HPei8flMJo=\",\"EULcPdi8/P/OANyHJTzhZHXfEact6LNQcOKpR+jfib0=\",\"HvnV63KTTFEJlATvUvhGVk+dWVamH6aQwaR07G3UrS8=\",\"H4dfvIpL4BgXCigbP5wNq16RNx7jEB5u7s4V/5uipZU=\",\"DH6kRVtOnqeVjQVJ8JjszCLnP4mwSfSFWJELuXIm2zE=\",\"F4HJW1uwC/wMUoDam7wtFq6x3crrLEVkQEE2bAxXuA==\",\"B9RvSXDwrxvdsLqitF6njD4EPEArNP5EYAkZ67O8Y44=\",\"C5fZBOVYCOjT2EcxV2YGmxXk6vbkhTNnng0dwAxw5sQ=\",\"CkJM/JrBYw+BXhhnsjUbyKegV3oGobPuv44cASiDMTo=\",\"CrSXbEC7yf6RBqdhDj5hH4jkaDnkhO0hYAhuDoPC5Mg=\",\"K9ROIXubG9fFxoetdlNzDGqcvHOrLj7KZTPOP7Voozk=\",\"DM6JH86DBhm8X+/qIljfP1ZTw8pgUP2O+zplNkMzTtA=\",\"Bswmnec5t/daUFOSEiBp9G6tI2yf4U2tS4ntO+dlq0Y=\",\"LOXa1vjHBqHkjrzZic2255FhBw1Wt/SIsd2usgfYGAU=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"LnfPWrUT4brepcPIkZJflji9FFh/bjQsWpJFLLIhbRA=\",\"HwoqPI8Rn/XcIhzSHPRQzP0qE6UZkuInoEApTHjQW/c=\",\"CK9QinvqQ5PXQN3ODm8PuBn24zPxInNzn4IWp94owZw=\",\"C3sLWtyOW4AijdxaO9kKEaalj6h6sh+va17mtHhtO60=\",\"KbJyDVcMZI4j4SxwxdkDwIiX7Djo95497J+JJCnfP2M=\",\"K10BFOFemlJJgeouOOBpdmFkE6lmFyo2XnAq64Gj6Pw=\",\"AvBOM4CKgA7VAcQ6HMaq/57QskMfERg27MNtufyvlU0=\",\"B1r95RTqltTd8x4CwuPFm4V+ErvvkYhwNBf9/ytz8Ow=\",\"KUxqlQ/PVpOoJByVfvc3yw6aKsO362GKG9FoTbQ1Ppk=\",\"K1z9RdiVqwn7A+5iPP8iMhAYAxyDX0vZRG0TmV68JwI=\",\"DJzEjE2Xmx1SZ6SSSBNP7cjBjmZ4xS+C4OrULflLw9k=\",\"Grgcqw0JElNInuWbNiWOfwftkiI5iN4q309DF5C3/nM=\",\"JYbL4kW2+Y055S05RM9uzX9rAv5RJfwGZ3+jrbXEs94=\",\"E7I1Kjjb/689Bt4/o3bt9bLuTlOle+ASKdushymk/gE=\",\"GqTUcKvqojVweRKdEUurEXCUT5KfwXghathH1EMPPyc=\",\"A9h3BWKRxBlCgqECizO72lTIxWU50l04E/CZLVY/s0Q=\",\"BwiBgyfkIkfziVvQr5mYp/OrJ1gxobf/osAmYJD4a3U=\",\"L230kl3iyO7feg3TbeDoO/C6DmZJRH1v0qjax9SxuBk=\",\"EzPJ4NtoSd0vweVt6UL45Z5s5w+YFfdOx17npxD/zXc=\",\"EqvInlFk6MGiDkDLpikg33jNDTHGQao1JrU4eqSZ2GQ=\",\"C5dsY5TQqf8Yw84jSlbPjZYlwR0PzoYyeEV8sI4cSYM=\",\"JosKTP9/ZxGTWBlrz7RjSMozLhry76dYtZ6SKhNdfmE=\",\"JUuBJvRSQ/FN2CEd9B/lUWs1lS1WxiZ4wUjnPNutNxg=\",\"JwcS8YsVGPr+CTZg9JLNvC+3D/qzHYpNihk0vmh5I2k=\",\"K/w5gaJJrqrsSrkAFyfTLU5v51WY7pZPyFzzDVDfWEs=\",\"FgYKF+GxH4Uc6rIEZFcrPXjVguoFABSEMQFIX2Wrcj0=\",\"5zIXoQbEAuTGwWbNnvH9KgsWrBy0Nka8HHJvgxd3cA==\",\"BLlZygfnGCygjyNRoDVFvXq2dvdAsCMxY36hQ0yFRew=\",\"D8nMlSIvknFc90dgECJeFMw48xQHHlDg87yexnSoqsw=\"],[\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"FS+mdfM3IWM5qSdLl7CNdOug8xEQaIWJuqxd9z0Gupk=\",\"CmBWDBRbdxIRcfMtxtL6IvuJR0nSaGR1AB4LRWPd9o4=\",\"JAK8Icv8I6gBFudTUkBAOz562jJtP18o5wcWgNG1ffE=\",\"JncMXNoaFNQAPLVaySfWioQ7CoGsvfTRhxpmIB4zeOg=\",\"BO9uNCPstL1BN7K3/ngQC4Sh/0Wc0KH3ISZou5bd8P0=\",\"FsbU/hDAjGTyuxT8bY1lCwXFb8aJqT0MTAp5q/z5aIc=\",\"EGnP+b4yRfYGBvlMHyFKOsQ9IknnJdxX1FcW0G2QX/I=\",\"CsqXTmOUK/4jBpQWWk9y0YTUt/uKFnSnDLGc/WEynxM=\",\"FepmVDXCjSh739SXi9EnOSzNSGya+plFTpVh+pkgQLc=\",\"JUXyyyTHp8eva+rHXjTe7qnVMsAwgYf3vTtHsTOnRPs=\",\"KbNPpWU7OsXz7t15DHuUvhq/JL7rJO5Qo07hIVnpSxU=\",\"A9XVVjUIW00FtX94CUoTBADktgVI2pz1m5C6q45mQjU=\",\"K0doWS4Y3uDWILS7PsHwiSOQqRdxCDRvn8YR4c9ZLcY=\",\"GY6Q4rbwZvmb27IBJYBU6HWNr905ekBEr3/nPr0LBbw=\",\"IJwlgG/UAG2me4DF96P7A5kNz+CHN1FDp6CcyZrvFD0=\",\"Elz/cM4WoQ/1O+iyZoNCDIldNm+p03Y/FNN2y61FO3k=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"L8wehzwkYMGaqOoxh2pjwGtrFsVr9F6iOyl5NRZhwGY=\",\"JlWWIovGxDTSEaY0DEozHfK+Ox5DOu4mh1h2q4OEDjs=\",\"E81dhNRFj9+ZZmtPVn7pvCZjIj/qmDg9KWaAhKZ++gc=\",\"DkVGiYI04smYHQb76EYw2S1oVJeUcmlaKu1aocL8AY0=\",\"FerZ8b6TR2yiqTyDElkYQDuDXrlUfTzjGFbRGa6N8Ps=\",\"IgmgMBdpbjpzr8uXjFNzGuMYb0ujFe1dyO1leLPZ5Cg=\",\"BbNY1Gu/Cf+wfwavdwtMP2leNa9fMvRJqRIxDGkWVlI=\",\"DU7BSshBifHhFK2JnH3/jaUAD7Nya6iLbtgoRR6aQCc=\",\"ISonOR8azMfn4B4Fho5Bpiogdu/cbulPJsMOXrXGM1k=\",\"HPP+3wFjBrC75l/aUCNbwWy8sVWcPzTqbudS9LcLSEg=\",\"BS0+DVZr1Y2Al6jROJ0crzOi8mYt6Y8GUYZwdz90IV4=\",\"KFK7c3lfVMatycY11ecLA9zQPMEikEb+IXPDGxDv7FM=\",\"I7af6QL0LDSJBh3oRlEtNGrVTL3h1UmE4mtVGynP3Yk=\",\"CKUB5NEQ4FnqagYh0YvUNGrydarr7x9AJEnJ9nX+qrY=\",\"F/ZpdYPUNSBWLQCCk6cJgOLGVkEx+qtW/XHChTkvW8Q=\",\"G36OgHOatU+wHSY3ljqRYiuklAH9W5YeiS8AEHeBeIw=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"HK0HuCh4uMFTsCePuy6QlzMngmoJ/nINNxZrunxTrOo=\",\"CYhyTV9CR4WUkGKlUTOkM+J9jImn7HgBbbXwZM94aUg=\",\"LYGSHfVFc2FBZzMVW4E1tT9kEKQRcGcOP8ggSgvsLVk=\",\"Exz2Uw4xs1QbgxLq6YSVubVDWo0y015SR8U/MXClgRA=\",\"JspN8nCFbX2JUhuFDjdvRshGheuDL/CryDvi5G0AhpI=\",\"FIgy0UZ0tb1h9FuILQjOELZe7aSo2Qyu2jkhBSaikw4=\",\"GTlbFwEx5Llp4B2LzRpv1jEbM3XA29HjG4efpoNbncw=\",\"Jhex9K0v32Fbv4i0761EtqfNXsbixGmpRHHVo63Vd7w=\",\"DgUHrKYzyqdAUYxu1v+coIS7WafQ2X3s8lMPtq488kw=\",\"F27VLIqfP3vvPghMLlI1SWohd/NBg2TD7aKP6n8qZiQ=\",\"Gx3dPtPIJTbU4sxHgg83t3IzW/RTA1blkMaZOMGtnrU=\",\"E8gwDivFLI1MEvLNlELNutOCNaHjRUG0KidL4BRkVc4=\",\"L1I5vfDo9EH8Af4IGDJhi/G5YozIDvUI3NQnNCDK0fI=\",\"AhpB4eLG5JIt4styPWTLuUliFkKaOlo8DGwAGbu92pM=\",\"A4Jcye1PdSo6Yb5w8/K64KIkFocKj2kiBq7PRXC011E=\",\"AW4/Zoy37Ywr1stGh9Ed+9AqgmX2cctYp7szoDpSOKE=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"DZRZa+LLJYfkHdWsOHB/SnGN2pB2t0olZ5SaYnvMqC4=\",\"DaVuf+9lOnUo68sSp6AQgvfiMFS7+UjaZL8uwkUtCYs=\",\"Iu1EnpdSZgcZuNNPSWJ3LXx7COSIJEIETHOoqtq3LEo=\",\"DKnT5JhjBPf/KJTBBSGNq3IjkCc8QsQnxNro8p1myl8=\",\"ELASNb+HSlsuGEqEEKsBEHy/BkgEDtZjPReVCfUEEZE=\",\"EmIGFl2NlkVl0yIMvITN7CanZDxo98xCrGDR+GGKYgA=\",\"BIeNUk82LaPjqm3TV/C7fVYV8my3WHR82zBJBwchiFQ=\",\"IRJxA8YbiTaqFX63OFXvRtWwFYeqihmUeEJPPITZrc0=\",\"FdVDmrZ+hFofVa8s7U4Gzi1Xein+JQ8egRZQDRFoGZk=\",\"FqcxghLxdRq+G1xCL/gw8Ykt/XZzfHtJQz54dzWOLbk=\",\"JFV53nXlCJtPXw3hHVuIvF45X/mgdHotM7jLPjOUqpE=\",\"LuPXSeA4iJ93wN3IC7fNVd8JNmRxanXwJ0sZVahxKgY=\",\"J3tk7ZE315FPlEWWnDPbLw25WTjfPNrUbmyNSsmWeW0=\",\"KMkYHzWd+h7P5R7IMxuZnEvmEDAFduB9hGHUaGculXE=\",\"GKHsb5BaSQRKSSDQpKH3SpB9t1XR8G0tdVUcbptbtSA=\",\"JpWH/Enbi5M6MbxmeLQIehL/diwaGcNpngcDo5+CKQY=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"HEI/72LX7TsgY2E1vtEvVsM7btOGa03u+Vk1tP2z/Mc=\",\"LDnpyf/T8azcI4Ia+taAwZneaMclALqa/6CR/DXYsjA=\",\"IAvkJ61dZEJVF4/7oCKlTluoEaoKDNumFZkYl9MSkz0=\",\"Bbw671UJud9TgNw/8YBqtolChiakQpOvWivDPf2YVB0=\",\"GdOnvn9CdVxJMnwIZfffAV33k9c8WgNvO+rfFgItG8c=\",\"H85ftRJWpN8+mUJS1HnIAGVHv6Jkm5/LrB53aZ8x6Rc=\",\"JNWygByAjHQwUoD+wdFvCiGF9PfqJwlidFR5fh1pSqk=\",\"G0p0SnYC8WVlHgYEQjWRApXVvkL15cuQLPG9CkSfRMs=\",\"Ihqg06EX8xPioqIMaSdhi6/w/HcYiAG5YYithRi0Ge4=\",\"LP9hXRLgh+fZARn8nBhMeQOr5EbiBqAtGt6ZZDHg8oI=\",\"DLxe8JQZp1W1mLFRehlrK6FVIcVeS5QLQQ5keldxMxA=\",\"JD5jjEakEL7wM1tlpeLfrvY+MDDZwgiU1D3VgPs2rrY=\",\"Ea50D5Ozy7EmLRpiMqTYwyqbTi/M5xYg38tUGmvzCD4=\",\"AU7lhlInfmDPnVwmkNyDuDPGbbD4o1JNnXO0t4hGsUU=\",\"G9pENnPbALpNu+CdFUILdy7iLZIaQ9I2NoKF1CvO1tc=\",\"LehqQ4TWfF5Eg3v0aQkTBKted9LupEIe32S6MyGhJxg=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"G5F7hA7zHrfgpii8hffCwgDaosU+1Lp/ap4bJLHd6jU=\",\"DFT0+XR78jVSeYESrsZdTp6kJcJeT/u/u8PeSQCfiFg=\",\"Lr3sipLN+j1pCkQZ0ZKLS02T1fkRUhzwYUA0CRNGJzE=\",\"G3RpnMXrY3EVlgtfcJmDI8nD24JoRGgs+46kPDdWc64=\",\"DgmnXU295A1OGLiPY6zzqxzlDIAlKjASFSrDj7vapho=\",\"D3wOUsas/jVu9cdfCHiO3T51y/sglDb3pdDDrJslDFs=\",\"JQ+rUA8Vn+QRg446wD0lh/fjWMtsWEffK0J6bAdN9io=\",\"DcyCQdVtiAAKi3qpD2rzpP3/qA2xi/gV/3oLAgMrKuo=\",\"GjS3iUmF9NayFq8V3tw5jUujk1G9MlZRly3ipk/YEPQ=\",\"J3vb/HphRBImKvk2qL5wtH5+XTFTfYXs8VWsPuSCuSA=\",\"DTouc9GZh7uo1yJWAo6nBS+qfpmsoJ2aCL8ANeQCwD8=\",\"HABxj3bHt7tQbAm24VlsE3EXZoAi/KtZaYSv+XyFgVU=\",\"Db1fHDJ65bd17stxAJogcgNlwOSC/edeG8E3HlwR/LM=\",\"CGfCtP6oWkyrKUgk4idr2op0BvvNXaQbbg/di2mi8dc=\",\"HTk69SUDwKmv+fwdpBZiz5p2rX0yQIkL1FakdzGjW00=\",\"DE7+9spFYz1OzocV299Lmr5BIaYIYG2XGEXkfHCqXbQ=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"KA4uTZg2/W9DqQ+mipIgoOVnmtRfshyOOW3Xwmfl06k=\",\"BQ3PlaeztTWojvcFBMyKRE54+LXvSKNIYRJAjRqrO4c=\",\"He2Qq9rIQ+l3q+vBftA9WOrMlhzILf8DLfHmA3GsvRs=\",\"DIMRSGL6pLBT7NPfALx7thDY93cxnaZpUhFpbKzHwto=\",\"LzhTX8odD8tmVqe8n41vsJUcrCgecgQZHRJO4flZcFY=\",\"FaiifM338x6cm96wqhIYmmJCCz/Dr0wMzVJ7zN+zEmE=\",\"CFOMqRAHtK8XdHRQ8tBIrfu6atpJMA1GFjphQdDWCiM=\",\"IZNYoR8pn+YCuDNtbHTI7UXgrzQ37j29c8dBXdlU8ik=\",\"Gnrmf9K5X6SC5oz7at96X3AxcO9TbgwHyPReISMxiR4=\",\"LYoz3IWbQh0D60Me9w6ZVYY+S/qadlDLEfjP5FUhkpo=\",\"I+aGhqTmqwouJLBMX4nC25tokIFucwXKLJKpEmNncro=\",\"DCeYaEjvVXyGRXVLle2e3CFeUm1S3TacB3fU83hGXQM=\",\"BuLM6qIVqqv1jy5syzqgYuJOUG84GWRRMaH4Rs/CR0k=\",\"BMpFXiQqkcohQ64T0x0K0CRVKr45Y2xCFdd3JRKGi5c=\",\"IBB9Xvorqv3BnNt4dQviUHTVBS13MJIJ2D/q92TvRJM=\",\"KEqMW4QFqCXYrN0hXBa8UXD7TFRg1ud1IHBHsQn8PmM=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"Jhe0s5WSy36wCDTftDCsN+eZ2nTo6mwsusO/908ygsM=\",\"JgVV/tGHZ54llGMk/xF/H0h9ddiBGq62r7KeAr+em3c=\",\"KdZrqh20gPoJdsInuL4rHf9iBpgLVDMZq45uRr8a8ns=\",\"DNa6JAXvnjMwNsdWfg42gQlIm+V5FjPBIEIQbrDdQ7Q=\",\"C7bvN0oQtFOO8c48DPbvbIhdvC9EmJK/0X6C5/6YkPU=\",\"KU52stD8O3Muw+2Pc7jhxhbuABK2nWFBekzV8Y+JPAA=\",\"Ki1HNJev22CnAIx9x87Voz/tfFQku2oSmcJPNz5/Fq4=\",\"BgUzZ26Wxzo+GD3Y9YXHhCfAy+mel/is2wmIid8UOe4=\",\"BNOtMxUGMIU52E3nfWL2y2YchwvAZP0zWcxxGga69OU=\",\"I0RMUw4xiyJBj7ylJ/v5//DCyS1iPzZSd9Zax6uQBYs=\",\"CEoHNQbaY/ro7pCJZdY02ip4kWDx/3P69YtnblyRS1I=\",\"BsEBivKrG2KUQNUTpJceYrLdpCIz2t7tEORin7HhXEg=\",\"/q4Syeo0u/OTc6o8FZ5VPc90Esrxcmmmybfp3FlK2w==\",\"IfXyOw4/RPh2iqHKNe3PXpGe78nZ3UfkTvzJlpTlG1Q=\",\"BiCeIDBtX/KuREO//tCUiyurZUh2UPHh+VbJ5UE7Fo0=\",\"DpgXR9r23m5r5g9+zCjoS+Dkt+jAetISj7zBLgxwlrk=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"IIAvi6SpIkV6Gu/czIBKnDS4haHp8P2URzR5x05q4C8=\",\"AZysKtp2D6FK0DjSSC3IZmF3KuFd4OvmoadnCCQyv9s=\",\"LEhEZKgjxDBTETdVhpYQsW5RFvK7Hz4CTWXZIGw8Y/M=\",\"IK78nNhj+Xbn5fYBECFYtXg1fjByrSLmgChkDlUTtHE=\",\"ExCmuQLTc2sKUKMgSMgf65jgKUO9sScAxxS/ayVfP2w=\",\"KKLkewh+mCjqUmglrviotNWjYCD4e0Zyw2oLO+oS0wg=\",\"LtrMCqaWYaZRAORobkZ6uk8sQw9hx3cH4K08L6xmwJY=\",\"I7gR6K9OZxub/Swtg6AIgxCOcE39zXlE+kDCDnLjWa0=\",\"A2z0hgEVIpzGGHB5a/tVq22kWj3SBOHmavOXAY80GHs=\",\"HtCX/2UmKDWQ7OcxtyW59zSn9RbWqLHqvUEgyND85l0=\",\"IkLZqMk0vQ8rCX43/uoJi7UACRpJa/aJpZt5XI10abY=\",\"Lh2/MRnqYiSSwfFdzlrdzeyz7ARQKOmtaovMyFpFbvU=\",\"LQNPtVJjX6a9Y/XpHujXv7ii8bo5UZChd7K/GqdmQrk=\",\"ASyOb2Ie2YDAfMpL7xevIy0ywv18s/y/yXGUfmbs/y8=\",\"BUi0oxurRpKoWKzTD+UjxC6PLc4Eby8SGwyCz1vTBrY=\",\"BJhdO3/BpLX7xw/TcgWr4x4zxL628Td3lnrF/Aej3xg=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"F2rV532/nv9HEwkG2fKVvxE5088A+lq0K9PhDTV7zaE=\",\"A3/DwwI5X8qXv7299f8U0fcTAAV+fZlP7dGfLXeeQbQ=\",\"Bnt/pfW2QO6lwRc6pACEwok/C2bE2O7fnkhETeSMvYE=\",\"HvUKmFEURVI3S4sXXxoGm5knEzfCmpSUUUDrfhqVYNA=\",\"BKj0EerpuW/O7jGKPYLoOTVLCZnoNUyma/fxEoHIZbo=\",\"F8kMRHzYPvfVRyCcRkSslcwQF71lNg+vWKjPtSELyJE=\",\"KzJMWmkUagsdUCk3yfF2R1fUMGX3w8fQp5eVUjVLP5g=\",\"DNCmJrhg/ME0ZRNPAVM2dAzvhaqRu3yRnU8ShdvklTw=\",\"Hyuq3nIEN/Wvcb2CbofhVVUqldoRwGQCx2yMV0cH3os=\",\"HOLM16QVMErA5vGyZVkDWflwVToQv434WlXu6/XNq+U=\",\"FJjKMfiIfM5kfuUvtLOhd6PYJWNUz7yD7wNJ/jaF0ds=\",\"Dm4hDxj6yhZ789gr+fnljW4JTAO1bcvSQ/pzfg75O7M=\",\"Es9FC1Io4beCNmWljBBas3+wZNKHso8RXM0SjK5+RAs=\",\"H94amn86lYg0gdJe2mAiXz3W9nsSf9LbaQqsaLtT/PI=\",\"FrLEsaQnb9kNCAMRP9qWvQF0kdWSEY7XIbJmClV2sZI=\",\"MBriS/0RaypairnAj+JsuyDREew0t/e2KtSpXJVTFDY=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"CIfylw83gJm9gSljb4RwZbgbPMV+Ip0tAKFfMU8bcFs=\",\"GbOwHLaquxOQH4+13BSQyjYChPJiZy5/DTnbv+DPXg==\",\"GzpuMov5fEort7YkUdjSHaIh2fed3h0glhpXMBkUmeA=\",\"Fwky5j2O0F1rZkmfMuYmG4ABvdwMoXYIG3/TX5wqAZw=\",\"GJlFdVXrVYH921E0BIhWnCtK2w5+bhtZo2KTs674NeA=\",\"AWT3pG0Bs+0mz3koDWdVhK8D71Mv/Kmwqh+kwEarlyk=\",\"DqL/3KvpcnWIUmu/1WASSV8dVrBqVzdyYHPrmqcFKqo=\",\"B+y1gJcZPKY32JzXCKZhDpv/BW1dR38PC6/y/JItAzQ=\",\"D0fmAegu0XS3FVVM09VSloJRGsjf5Iz38szBCTqJLV8=\",\"F0955CRUKw408Pug1kUVOapWxW9y/BsAYVb0any3wuw=\",\"FgmFARbf3iTXy1UQkS7B9LxBb5peV8u6jeY6JVavZi0=\",\"EKtWW7nPQ2kU8hQ1K0i9t0V+ytoH8JIVyVIvx5cB6+0=\",\"JZA1OcVscsht/w0yDkuJkh8Xe5vmmuzKnlLagRdetcI=\",\"JL4rwHJt7I5+Evo6GICCEbMtByX01kFJEcJQIj/eIbw=\",\"BVIklEcuzjXoDKPvNWNujlJlVjy+Q+UKFNd+0Nn4lNc=\",\"Kp032bm+wi7v/+waz2otva9QVP1FXDAKZ2MWnUxMJQU=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"D7eEJDw3ICsWSKeEAQ1nTyzMZi4+ctyXwedvD4FZSKE=\",\"CZPmqtJMTSUqxTkFkHyjYQ7ypebkjrPadSvMpdypc6Q=\",\"FfqyULY1Bu8Lb75WWxXKM3UEpZYXdR8+kedYkejy+go=\",\"AiuFG6LXTMB6Nvc87D9U8uJPel6lS7U1blVwpOVe0fg=\",\"DMKNVX/L458tpagx+XqzHUyXSKMMHAJyhvR2YPyp/Cc=\",\"A5LLKKL28+i9b4ad7jTYP9hGJfZY0sawKmrOxJlA02k=\",\"IjIy7ZGFH3Anp0E/I7iJ9z8Y8g6pGzCDYLB0JQ61sTM=\",\"JHUCE5/lpPzOr8R6sINfqzd4hmoDh/Z8DBFzC3CGtCM=\",\"BXTneWMEAxqhV2a+W0GUhtty8sxDeY6Kjuat4V6mTLM=\",\"HRg5KGSFh4XRNLKEjX/DLPkdpgRh78AXMa1Ju7mc5/A=\",\"K5J/HR6s8O5dMkb+yX8T3bm6LjRBmn8P4VH402bfSKY=\",\"ApyhlTSHZMJgAHbZpHVQi3+uUtapySGWJBrD8I0JBFk=\",\"ApGTDN/9CsyHO+NSYAoSpqoFbadiHPMyTnY28l702QU=\",\"E+blh3kxL9ii7ZNoWHteTCB8uMuZYh9CVKFwTEFHdlY=\",\"B0xvyVdRHnKH57YGXAPVWrGYgeLKurmIvK+ZfZa5CAI=\",\"HaAVD1pxBMJUE8g/HtzT28xJqRiBr4s4CdQCIbvozwk=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"F7Smoi+Q7FV1oxtxqlBbcMwZq8D6vtzl38cQi9VHLtQ=\",\"D7daQTIJ0epRG1ILOtTpbdClSOxtXOLemw7fr2Z78hM=\",\"ByKfoS5emuxaJYJJs2Z/paGn6b9pJF79xmoR1M+dFus=\",\"KTRFJ8zHO9auAdSrdtfYIFZD6MOWKOWXWw5orGR+fdc=\",\"LgaBX0ZhKNWw+hMlqW1vY+UTw8NZD2EtAfDvAv33TvU=\",\"I4EhnHnSLKI+m7N89/PagSVRDBqdfp4m0CitYfO6lKs=\",\"9ySHjDeLI0pbxP5vUcAAaCzpVyGvpMgCSY/19ONZnQ==\",\"KWGspMntmdzF2zOQKFeukFr5JroES5PRuMv92C3nLGw=\",\"GmYcU9h1AydpqKif8iSzcDhk/XetuogHb5UHiE6o3A4=\",\"Ag2MhKd9vxh9hz/rSSGF+TQb19INTILUxYgAkQI4mqE=\",\"JzlEpgvYHzwBTP+aXhsdmQeafbY4YKvcW4UBOMPtib8=\",\"AsNIPqnoczvC34YF2EzCkDoQpPZ1+APjMJC/G5bXtvU=\",\"LBVw+ncayH9sHH3LD17+Kui86yYoCtsR8VZb2zI0GTo=\",\"D48rytorFYB9TkAGY6u3rSpsZTvT4nNS0qoDz6zrqj0=\",\"E7NWMir3v37YkoWcNRLyGDHSPW7Ua/TDUUdiwqRozd8=\",\"Do/8RFQisDUgKutFkIUpjlw9Uq1XpODJguS/a8Qwh5o=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"Jmh4x9uz6/cluvCbrWJEHCoFqMrIONY3NxvLcffmN+w=\",\"Bpynrqb+Je6YQDHzCLSR8qVQ5BNHadMN03TAyX7hZWg=\",\"GQw73Erla5NxgG+ZxSR8f2BxzPclYxxvNDUHWInzSVY=\",\"HTJZAt2ocpCgexFfNnMgP7sgOc9HDyKYgceG4RXuars=\",\"Gyk2prsbIhqiZ86Tn5nCEbdYwhKPjVRMTQtcvGYPzVQ=\",\"D5//TrfiiEW+ang3NvKXGTKXp8wSyvXepvB7Xs6vYyM=\",\"IOmM/LZXsfSckqBpylAfieltc84Hke3TNqf14Snl6hE=\",\"AV3fOC9blFhpr4o70aAwyY2DUOc2AKoOjh1O1emom1o=\",\"CTql1OfC4Lh78RNfPw2UtA1Zuyk6WCAxrav8Koqxe+0=\",\"CD6gSKL6t67TGoCQIXT6qfGWC8JTHRjeZz+oc/5oggc=\",\"BISVZ4dK0CUzhyUkBvLYhgsmtrYF6YyHSlhbwVfFejk=\",\"EDFdBUjG/en9h6tKUj9006XHkeRV+Qw0s5lQP9lmIUk=\",\"Kbdo0MHAN+LCCxM+7u4BcWbSeXukei5kdZXl8LtDPHw=\",\"IHK13RAoCHQU02xPy4RdTk5xmIWvj0q/qzn6QE/Gjm8=\",\"FDQXVAklTup8m5/D3ZMxRAPozdVvnNSDSBmDNMcA/m0=\",\"Lamy6xSMymeQ9LEihv5WCIDXXma9TGTvjuWNdVHKVtA=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"Fr+1/dTvm4HpIzbvAT+EMHJ5YDM7drXrgdrY7yIL0oQ=\",\"D3RkOMP05hLwiKQROUBhm12W7sGAmfW5ErgW/KzQOsM=\",\"JfjYXmECvBbPy13+KgpoUMT30EWjYUkI0zJwIyDNJEU=\",\"GaIwcPivoIxKCi6KEGfbROlYR+XvUzcFdDfraLAj3b4=\",\"GedK6mV/1CBjIt4QG+VMCnDtAB61o7iXqtsXjO6YMDs=\",\"KjLp9/dmFcW8LOoBfh6TeZfTPQEcosVD3L8IZk8kdgc=\",\"LrL5eCtRA8zichDlTG12CtKK8AojsCUqYI7gU2UlmQ8=\",\"AyTLt/8WxGP9iGClxnGRInAvjwVfch98KtUSHQPMtqA=\",\"BPuSdD7tUXfnpO7BkX1Iukvy35hk9Hft2ZhLWhs32Vw=\",\"Iy6QdC1SUe5z4eVe3kiUIapNm39zHZIJ4YrncrHb8WM=\",\"KIiwKHvQUEJcMkG9fVM2cIwdJBBDTQu4oJQyBVJJl5E=\",\"Beh4puLctfthdjRfuDDK9u3wYGGkUulNHUmoYrFWNBE=\",\"BgPnFQ65sGycC5SDLVO/rMmOJjhuLeAEfSieREgzMc0=\",\"BAOSuHgLsHHSrPSSvGxJ0Dq2an19FonxakcWCSPWMD4=\",\"JwBXhujRy6lNAF+IIfVkpCUAVi2pmbTEAWP9FdIKcYg=\",\"L27mRWJW30t7RTT5fccl332eNZqK9PhANdterXLYVZQ=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"JJ0uOnLWe5/xwS8A0uLRUhOyw9U07h+n4HJiNdX4p24=\",\"Bmr4HCcf2yDw95R7p2iVZ/oKzsjodgMRsgBxOjy/KRU=\",\"LQfzPOwI13KvyKhHJFWD1g+6czsodOPxTVl3Cm7swdk=\",\"K1dSmS4ZaciO8r1M7ny3TXr1xzssQ8FI1HwAlBY7egM=\",\"F+7X8dLGxtWp6tSpOYcRloSGgrwq63E0CXaVmcb7mdk=\",\"KwRD592PpSYprLYMTZ9ImjtIX5vaowSczge5BJQUDJk=\",\"BS6SNpzEDRwM+gASTqKckouFx7ZMG1qREcB6M9KM23w=\",\"LVkK01nz9tCq+DF8w1ti2SsFsPXGhcyMOjad5tHRypk=\",\"KYNnMhejOI6m7BdG5i/QwdKy13TmNWSuJx1326MxgX0=\",\"DVzhEjs37caF6MI09hjIMOh7G5XBCKg82dUGXOACEw8=\",\"D5tpJW0NDgg7oI/fG8xzqVt7N47eNtgGbLAkuIILsAM=\",\"KQSQ9RI3zXqzgk8gV6ei63JflGRCx5h/c5LkyF6NvXc=\",\"K9HJIbJlX/uZ5aXeAl0IxpL85OV6PEAf1lXi0F2SplM=\",\"A/7Av0HuGiwKegt85zBTQxom0rfbktQqQZEeYSnj+po=\",\"LWIz4IGBo8nbCQF8AWDC7zWROVE5kIhLru5SWyWX64E=\",\"D7yYuNOwtvK46x54DbFtmO9dS/TmXKUY5i3HL2k1RKw=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"HwTPHKT22zDoQ93Kq9TMcfzaObVVM9sai2FIiq+qunQ=\",\"Gm9qeFg83apYiYMn9MqOAO1yndQcRk/JqwxeDRsum/w=\",\"A+cOgVc72lxquVO89BWBz+TGXi08BM8ez0OiyK0lDQY=\",\"E/tbbI30pSV91nt4JyfYp9kMqSxdmnVYR6HTtrcc25A=\",\"BNVFlcJbQVNtHyA+GjZ6zaj+7TNpU3yiVX9dpJ8pDoQ=\",\"E2cdjKfsuT0pyRI7ypYQPiL2j8WhaWj+kDwPMOi9C0Q=\",\"FIapqDAt83cdl0xWLhsDuW2v8eH8a+voZZXTJgioW9g=\",\"fNJ519RJMeQ39ZvvUCfxTklACwhH9BF8diziHqZndQ==\",\"I1hobeRYZH3POHPhh+qpQPylKd2TmNLrACoebwh4rIs=\",\"GW1gzY3oIRnJNg6auWsbwxAp6mvFqciRWE/r5JStXVM=\",\"Hhjl1whwKuxwhnJYKuvPLk2ta+AQCn2E9IIuFW8jcLI=\",\"GNCmEZR580xBrM6aEIbGsaNAo9TspL+lYeQgXu64Q48=\",\"BB45dV7TsSlyRjVR9B1fFzlDO5ZrdZAUvbnSFK2ab8A=\",\"G+zZjRkWy6q+oggrjn8XZfg48jNxIbqoluQ3vl1CeLw=\",\"LREwfSGXm2gRmJn8CLkeAoIs+3xJzoeKxYWEkT1siik=\",\"JLfWnq188cTCBNbT4jNo/UDbDy3wCkqDiFV7YRCRdTg=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"HEFAgBce9DU17+2cW6vSJ1uJ5bF187cTFPbFkEDJeAg=\",\"A5eIm4ARFgR1u01tM3k1G/Xs+QgAuc31e9Ou2yEFPM4=\",\"JMpU8f2mNPm/wOObDU1qc496ASiY6cK/pKQu1TPlKEU=\",\"FxWY58qiDJkOQzBtBrL71YeWGaxjkE5DlaU61dYOYMs=\",\"MF3aW4ADwjbKHXJL6wM10Hqjsq3huiHFnddj8wGbXsc=\",\"GrLtB1eBILOZ31fF8QmkDkfqqVbmamYp4Xlr3nF0vSE=\",\"KkeGLS8NBimGPIeK1/599ZK6f48/lOXlqFrKOVgin3Y=\",\"G7yVkcZkNtxc9LtWJGhYRjLMkaIAsfCOGiiuYeXDCr4=\",\"Jl6XHJrc4T3TJLyWgCCCjMoGTs9HcmirU0Jl1+Xi6iE=\",\"HfltdDaqKRjqCCVGqePhSRMPuuZ3ZZCEbgYy81cGV+E=\",\"EKjIqurqBBTYfAwVU3hLdE/y6JZZQtOCjhTEhPhNJTU=\",\"Bj5JAdLWGXgx+UperZsFiEetZ7zYUU7aRMppoLC6nBk=\",\"GvAEh96quiUR7Gu6NLjySKUQaxHWnOvib7XzXSdF/uw=\",\"DOsXkupj4rrOWzF87/RZfM8wcaZxmWEjlmUOje/qZGo=\",\"B/yWO4rDcGQ3nVplL5mQOO5KJQ4OOUjLo7iZhAoRk4c=\",\"F6pmPeMyJ6lHoA660WmZqQW7KXbQyZeppan9pmkHVOI=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"J+fwH35YUN7P88j1w+5TlR++B2ykGn4YB8v8S47t2mM=\",\"E+nAkZD3RNx1Y8V43PQy3iUit8f5lbKICVfF0sVLJ+s=\",\"KRza5yire3LhGSSMBkbRp8MFr89QydwcHqrNyWYNIaU=\",\"LfJo2gWSVbLZWfk0vCF3gRCOYXEPDjxGBBnRHxNm9F4=\",\"lZ8T8sBLF+eVCTtAj1kLhfcH5UeV9d+Au1ezXJlNvg==\",\"LYPbNp4rSISKJ7VVU6i9t34GepPx8o253mxlsUgYVY4=\",\"LKxzA88EYvIcTBVJhP7xc8QoxHIV/rLANVwV3k3GSuk=\",\"AfFsOxdJfYfGW2ESPRlUcX//GPIcz0yGtK4nREtTUiI=\",\"IRqFewbf4t9iHTqJpLwF3QJHrdbOE1Av5/o35jiI99s=\",\"G+vQuB6mz4mRnqdl6m0E0DXXPPd0Xqp1fO3+Yl0QVzs=\",\"LLZ28MrCPNgLxA8yadJhD73rfyD1p01yIkUlxuP/aek=\",\"HkeK1lNfHsxXkFbGrGrIdE+ONSCbeggfR6WwwzvxRNY=\",\"FmnHIgir1K4lFYyccxVulmUE37tqS/m2/jeh4QU7BJw=\",\"GKlHcfutviaPWMw45I7oHjy1qUuLLP+oytr3Whcd5pM=\",\"IDQRx+CLvGoQFkRRBisZ4THqUtAtwViNNZHIq9/h/eY=\",\"Bs/50j0zG+JFyj6g43NVEyo2f1zu39ZMhC3Jrvl2Ue8=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"Fnlhy522p/HiU798fQcRvu1p/HNidoIPH334z9EwW/U=\",\"JRtBPjA5zsCvVK6dDcesXM9f7rnMxIKkpOk99d/26qE=\",\"IkYbWunEk37/bdDCrVR18gq9TF0TqjiU8gzhzu8FEdQ=\",\"DTyMsMpADVLz65b25AOu5TyeIoOhmCb5t3DVJw0/IxY=\",\"AU/p6tZRn+vAEIj6tWvdeCbDWVIWnoxgeC6nRgNvzvE=\",\"Cei5MCxHC5RrtOJLE7FpIma+g8uw+DNSfhlxq8EWduU=\",\"Cqc2umgXZAs2E85ch8rI9kunTsI/j1x18Msd0u5VLwA=\",\"GVxPO/4IoGTxnW+7ZpD19yPM9oUdsB5k3OSbgmQNYk4=\",\"EL+W32N7mSapLv6RpglVAdsQsQubggfnPuzDFH374Uo=\",\"BvnqWOAul0RfcE9ovFNbHZ1uy81NFRvyv59rrOmFwUw=\",\"DbHaWcsLxwr72V5CiGGitwi5iUdJoqiOYlIKdnxObUg=\",\"BB3CzM8QK7cWgnaBP/DdKjrln0813oqhQEFgvnAdVmo=\",\"Azsh2WpX0sHUTBSCKJvGByVKA5X776O+olmD1uHXCJM=\",\"J7XfS0veMtk0NT5Y3CFNAqg1MYgE3bgSqB7/3tZwaYU=\",\"FsQ2gS3DuynGgNgbvaL8lk/Azt6iz75PnwvKdFHiwmo=\",\"EHWrAGnoAX7yuEuQNMDk6YHeAJRA9X/8cqxjNiTKq1s=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"HxWMbBBl94tfeAUg8DxYRGX/ziatGDpQ4R77lWqO5BI=\",\"C+bObK1RtrwUeR8B+8Yr8m8gvkatWDndw1avryTbshk=\",\"ImZDdGVTR3xguZCJ6q6sSuZLMIo8Vqs0PlWmF0kiMGs=\",\"LoKzQSrbiRn+pmqOLA2MX7Y3aURygiS3nuPtvlYzTi0=\",\"Ja9t6vKRj+A+2zmJ3AN6g0YQ1pvMNAnhPn/WV7bEBPI=\",\"EBaMS3ulyFAIpPh8AyXSOFYpUTZrdUJZwGQC5pQiOY8=\",\"IEQVVazZTwNzK2Bqy7Ja+g48w5x/BgIhTu+0l7SjQN4=\",\"IAZY/AjOsls+Hs7OOYm2glRtQV8+q2WW/X9jqevK86U=\",\"CNu9laf+45y4Y5h/Sp3YxA7IwblPIXNYGfqdb8UkVHo=\",\"FnmAKnDdY4BlV80tjbuHiKkd/JgsZy2cLfBO/bEsaYA=\",\"GLXuRsnvMLpGtcJCvd1oyKH4kRIuxi6woc5ODv1Agpc=\",\"F2AEJkjTyI84ALusMsr15f1rgI9Qr5HMXYNPOqm9ISg=\",\"K8JKoX7yLrUnPmgSoOWXveHLdLZfw1rgbwk1jZZrJD8=\",\"GHGhNSp0v7c9w1tyRZA8GQahLcPZRIZnIlsdYag+jMU=\",\"Ff/swJrl2rfiNWRPOMhK9apspC8tI7ZL337FNvnn1fQ=\",\"LJxNgXoTUcw/ZZ0QRTWYzdy3Np+fWXj0QCW52EeTWlU=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"JY9rcXTiYZ48lNZasQJz0hDdtG7KBqIvgRF/5fArw4w=\",\"B7ZVgKsovvrRZACEoSqxG94yWG7ThHCTeYXi6gfuvd4=\",\"IlH9HQpb2R0/lYuTd5lr+29+d387KjvsVL79mhm0KaA=\",\"Imuw9zcEY/cFuZyt5Ep2/NY6diqWhfeiVNm/Z9lxHRk=\",\"ASWx9oduLNRUjv9abqBZjr5DqgdIz9xTyDmHSJyHHQw=\",\"DWQAQ2+HSsQLxOPjkgQ2daj4vQceOKxW1jD4EKbDgrI=\",\"FSVXsPQk+RiOfIFuNvg/+b5xq/+nyuo4/kKwt9JzE5U=\",\"JBmSKi05Sxg32Gh0U+7ZqsAFphKK6DURCiBM1XZj9OU=\",\"KN6DLlXFOjdjlhhRA4isBZ+sEG0oMzEe/UUN6osRLW0=\",\"Gem8untV5WjJg9eXRgdU+tfwTDmk0Hig+qmGhVfzSuE=\",\"KDkIyLtI/uZKyVXn/LRwQP7kft14EOXqJuHZvqM34ac=\",\"Jcjqdm+uXmoaGiCvSxeIEsDj4460xcI0Cx+/RGjJvK4=\",\"GM83ziXvhtL3ya7vDnnwq7AH/uYiLplSyfc0SAv5dKs=\",\"DUEQaqucppaWquohhGIvgU/gh7EvcW4trlgGl3bhzAI=\",\"JaFGLx1aI1Phr5OGXn66pXO83SJxsmhBWwX+ETyIUdg=\",\"LZar9S8d4W1u1tTZJ5A19b9bgldU3CHRH+uU47FwDLg=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"GOVhBQLSob3KLSzTi6q8n9ZByk6atL4jetMsctyIDIU=\",\"K8KhIoYh3DZcrNfVYHuTGBtYWEMHDBKnq+mMLd8LjOI=\",\"A+V7fnuj5OPKzLZjQWvyC6ffn9X6Jdla0plwpgmLXUc=\",\"lb7uB2uN5ox5RjbBp1oPH3nmlOlHCvZVfdCnVuzsSw==\",\"IGPQ3OfA5Ny27ag8HS6dL4+30nVLKhFsgKX84X7L37g=\",\"J5NWClDLc5UwELeIFknPA0gX04A0EWScg/595sfd3SI=\",\"CSe4FhiFsSNxvtZ0Pn88/04mWW8mym4Q75tigkxtlAg=\",\"IeVwzguTEC9TxmIcgTpi3+8ERE1nFH6Gvc9tiZghdMI=\",\"TaKruCma8z5JfnYlaogpvy6Q/dbhcK6RUU3SX+8kUA==\",\"Cu1vgzhMXBs2eXIj5bmODcfjIrIF2ZRq1ZvnKlZAGZU=\",\"EEPfE3WhDKw9eTl+JXLC3lkQybDPnIo2qFlzYuLK0tc=\",\"ECtSJyhKytZlDeCUZ3pRvOclxtpvwQQ6dmjpOYKaVZM=\",\"BxuINAHCW/3Ohr5Wq0l6EIFLsZgExXg0tO77aZCwyko=\",\"7nBthZg+/hUHh0j48ZopkoNzezOjx6dPPBDS6Nk4+g==\",\"Hj6g2RRlgSCbcBisVmDiDFAzZBwQHwmCPV8wUiDamyw=\",\"ETX513L879Bzhbt8i1/Av9OMHEGrbeLajIs7s9xroJM=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"VYCTL1EEafcAlsgg2WAa2H7y9mmQyObrmNam394npw==\",\"DAcqo8E0TlU1Zhuq8IVXWbJIm0AyARbsCzBPgUAqmnM=\",\"LF5g1tnO5Q84gCNOVLORqrE4yBVQ/7nPf/yD4Rj7FhI=\",\"DqmE2wsp0M7u+esGUTETfWlrTcvpsp4S0L23Rzb6PLk=\",\"FGG7SyloUavnbvHqDfVrVVx2h5lgk1MH/Ol+ujGlhVA=\",\"IXgU8tiJtY2XKKRu6+Z5dgAi4dVkxQJPa3dmfToxg4s=\",\"LjS2OZGpiu7xFh+cAq3eiW0b5oXpiHr17Jv+hF0vvSU=\",\"C7UaUymMu1KXQFyGW27SOATJkmMZrpxcfBziR42QxZw=\",\"Dw8a0EjnuT3ylhfWJWGsIJtIj1gjTzRhKG5ZL2Sh3JA=\",\"JIVmUfbGxyzNsp/fH+CiQ4gkfF27iXPByH86kz+xo0E=\",\"ATFh7Z1xMwCL+5Pu30xmd0TA30zuDgrZA4/Qlo9yYIc=\",\"H/iPKoC0B4qQ33LXBnJe2eRQSI+XX9AGGWII45nY3sE=\",\"LDAM6SYCeaZ73tlKyvElt8mMwiCEVf3L/3/pgWXB1PA=\",\"GAFSM0oBXD59QzuS8O0jZTRbobPdBuVW62o5tFuSS6U=\",\"FGkYWUGzS1pPUpwbWnJN+sKKqYyPgw+LEEXsxlt4f00=\",\"B758O03p9T5U4/T4cc9i9MdyDToue6zLdJJPrrO+34k=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"Db2BzfW1S1NEhcJuzylijp6AcP7JDDS3gKzVu9Tn8MM=\",\"FzXtn2/S6nKAMITabX4gxHNb895oFWvauziI3VAEdrU=\",\"MChxgz0DjcYamE2njlA3I0x7LxFOSVRRvTiIebjuFTI=\",\"Bb8yaYJ24gdopU+b7UiTW2dKyFuz2SUeEHUgfB7cAGA=\",\"rpoeCu/9QxWU5XRej00+WAA2HoAo6gtLqYQZ+w+1eA==\",\"K5iy6nV2YhHZoSXbjm5/tKkTgSIWNlsfbSZj3rHwwZ0=\",\"FcDxkmvWAMlLFe4cAOD/k8fei0qTUCO7WcZk/gHzC/g=\",\"GPhgNsYTaqYF2grT1CUeZP8xzUNtcrkO5dMVevbXnkA=\",\"KFQoceQHSQIiEbJE/OC9FghnhlIGyHP2Zo7FGkKfmjk=\",\"JDIlnn9HQAJL+ytx/GlPqEYJcf+IafpG9Tn6+ZTSPUI=\",\"LNu7H3Kda6AECw/mPgqy4koe0F9MKUfypNx41Jv2hhc=\",\"H31sFw96g9YkH77JVDayBHgYSwL/f0zvPezMktpks6g=\",\"GObxaGItRnm2V5pbvmQZ2Mho1nKUlE+CRqgUFbMOYRk=\",\"CaPlKk3bmGRM9KcBdmwcpa5KNe8cEaAX3WqhGUX6U9Q=\",\"E2oDGCMwSrlMk+O/ObGJ4kCoHgpCtgYOOMfCBkuBSPs=\",\"DYLQyQxBxB+yTXFgyPFwjCWCIu8FOaJ3aiDHQtrgpiQ=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"Kw+YslW8n7r/xLCd/kI4c7q/6xbGSjHY97pw2xM+hCU=\",\"E3/8w3SuniIucz/fnQxRWUa688GurKssYhgYDuxdakg=\",\"DmoFbpLHZ80fyXCzOPpcc3ckBDLmvUWq3ZWNSPFdYDM=\",\"JkyaXG7acI2mD0Af8RccnqJ5rxfx3yArsnzFZ3OjeFM=\",\"GGJhjUq/r54Xbf8t+obxuU4pHuPgLf6oFmN3h+30838=\",\"BNDSsEK42XFhCzuUM/Nz1pOjBvEIIYajWo7Wp1jgwRw=\",\"CIVLyvxfNWUWst9G9ThqEW8U3hsZcpAxbUmGnubdAYc=\",\"BLhpbFCdlVe9jMYifKoJnwAsUQH/bVt6TkgoTjGZJWI=\",\"ElxYhI6JJhFy+a0lbvbLdVhB0pE/LuKunWj9Lu+oTZs=\",\"GB/8mBxUd4Uy193Tnt590+VNZVz+ZoGwSd9thfdkOf4=\",\"AZjxRRthGXO+d8w658dEr3GxyU4+hwVrevHpSeks7lo=\",\"BMn4hf0baXKahx62EcSp7x4AmwYFoMw777uAZwG2OFM=\",\"Cq/q3BXd3OayFOOZG6vJOvBOPG2wOuDhQIpQPh7sNDM=\",\"AiViLTWQKEDtZis9yUgNlBVF3xDy8agZkmCmUBjXr5M=\",\"IJ1NFOi5GS4GGkLxScCdDJgxofAsNUEvRWPPwDME/5w=\",\"EZKmJHgKZjPQDc/EmrbKzb49SmL2x9ir/2CUpnhxTyo=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"AjJ47OaNBUr8U8FIkgQADXIMumamOEK6cmnjXgu8bRQ=\",\"CRd+2fPzNQjbi+jxW1M2Cv7MwvIIvHFDvSJrTIhXhq4=\",\"F1p9ZxPhb9s05oBgavUAN6x4QZulzw3s4qul2EkYSXU=\",\"G9L27/PyRIndSS6qur4bDAm1Dpg2WMHa+yvNtppyQZU=\",\"FrU7o0xSFQE8Ji1iAHg3rhy/rhVbx8s9qEC/lFvszM4=\",\"LAYhg9SdL9cUBUhgfoarSHt6b02gEJ3Is3lVyGa6kck=\",\"AiRRq0ecCe7MQIFFuq+n9R+lmLP/LQVzZZA+oxerkGQ=\",\"gvfj94muZXzvDzQsmUlo9H/tKSYtQkKWTg55Pt0q+Q==\",\"EROdKZAerq4l/opriycGIEW+IYvjeEQwXKO340iwQ4w=\",\"DLsujCFs+nd56AhaGosk6hymRGpmS0jVdqzK4WwOErY=\",\"BI9//a7AohRLKKAP/rW2EwA4b77ueSvjhVK/yDY1Ybc=\",\"Dgu6JNeBFllFcN2TqTLIK1tnMM2hQXD1i3MQXin9Wc0=\",\"Ck3ANv1Nm8JWHT0MNaAiJnDFnloGJuNoEbVmRrNFoLw=\",\"Gh8vh7W0Iht2TkSmiryPVvapeTb8/sBqMCLOAKMBc3M=\",\"HdcCImtrMf7ejGuAZ/1R2oGtW5cLAjh1wa5b0tVswpw=\",\"IsQBGOAYY7WG1LybJkDE9skDQQwX9b/8cDJCDUlNUFg=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"GLQ8s5nRQ8l9T43p/pxKr/tt03hdnOXcllG5dbkFQWc=\",\"EsWZ2yYhEb49mELNOfOm805Rq+HBvAcR4S9pw8yXPn4=\",\"CLtH7no5Ycu5yUposszTz0rJXog291OK3f9V+Sa/SW4=\",\"L1aUkguWRLQ5bK7BtMQVDrRqGMyg69ccS+KM7bRWs58=\",\"Awe8lRzCydTv+TbrYJi8H7JSVHKOOQa/CJvO14JvsTc=\",\"F7z6mO+2ioI2ojpxbSezzEU5yOecqQJqm1QjpkQuLto=\",\"FHh+90CUjfwGfqT4G8E0ZFP3eAbmvDnj3v2vguuVLpY=\",\"JXogGZjlm/s0z1SU4Uxl3D8vrU/Mdqqduu/QAFRGly0=\",\"EqjZndka59yb2JK+LHLZgKtkWdOm+477lqVN1BSQYlc=\",\"IAvyCPEfekpN4IUYgiAXe1LaJw/KrdI+eenoedzjZME=\",\"Gp9TBym4yjabHV5pN642XwHd4GwkcivxEc5MpcdkywY=\",\"BlHX+fvKEGxOiztaHOSLLba8Flf3rtKNlS4ocREywOo=\",\"KjMWZIy2WgkPD66p04MjNFt9SpGpWHqejRyuYyiW3Mk=\",\"FVOtggVqjXSzu4C8ztand57rp+rpI8qLSSub2ugREO0=\",\"EwqhUugTQa5pUuZzKjFdFWfzqxLN/zhEnkLBjuVeOIo=\",\"IWLJyGiACqvVvjA7eYNX1FMPVuDYyUyZ4JV0AzeRHMk=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"ATjuNJpRJrjFn/zAXD5YBB1SD4y4C+PbLQtyr3ok0JA=\",\"Llk2TIMepZOq1f4U2nah13BbevlPMxq4U2LEtZQ7i2g=\",\"JLD1lFxUP2yoEmeC0jN++NyTCht3wOEzxvqU+ioZpGI=\",\"LY8pxkSFODSo8aYaiWWpiQ/YRgqC7SUgqfszLmoiuYM=\",\"HkCEJK1YbVjKCgSB3Ai47mP5bIOBddyKZSraiSwpPcA=\",\"HK4F4tLtAa5Qd/6mmaIRlTH8MJOKWuLFXOZWtu7zO4o=\",\"HwwXNceCpXswSev9t94yOKYI+2+p+Jvf4ZnD3xwdsV8=\",\"HJtnJWBXHpalWQxkwsW3meHjF2NNjeW3Mb16UaaNXU8=\",\"DG570gc+1C6vLbWnKLbU8SRah+YUsyLCX8UesP+qbqo=\",\"H64d/VEzZyGKIEBt3lfVc8YhlsThL1NH70hhAugJzvM=\",\"DkCObbPQFvmTpT6GQZje7g8q64MJvWbzP8+jj0AceA0=\",\"JoStc45hFvPbjczLbGHLsn/LoEC1mN7ZctZCIpngwJ8=\",\"LMxba/XPt7oeionnZAS6AGfD2Be/Pr+75GNaeJx78Gc=\",\"Lj3LoSrL8Jvhh/K01FO+XdTzzOKZTxjNEibGPeBW6Gg=\",\"Aj5w4/c3I6lN38u6cHcc4vWk4VtKj1GygowFywetKhk=\",\"FpxG7nv04UjL5ktsuKoavun7X7sEmX8Y7TFTRahZTF4=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"B83MO2SYrd4nVph+E1YNdmTx6AUYCuD7vuHc8fpBfXs=\",\"LZuFNq5SU33yV53w/woG1KmXV61xZS+R09cktOuXCss=\",\"Ch8AhcWpzUnfhVuS3TCcNoEpPlrwQXMB6eXmjRs0Eow=\",\"DRN2utwWlGpKXzJDkKTG+wC69nCCcEiAWjawY1fDnB8=\",\"EG0EJ99/xN16om3ieQc99/oVNwCEvCfhb18SqLAVUfI=\",\"AcrcpP/FvZ64YffvbnuoqiDXcJxjPJARG5jglK8p34w=\",\"D/kjs6uVz1o5V82J0DMZtLujKHgHgw4RBzVCAZlx6rI=\",\"EgKjPANZtRSR44gmzPIbsMVF5mCz2pFquRsOAuMEhKo=\",\"EWCKpkzD3GNcEZ0GkfRrCkeeFC4FMvklbTQUNp9eMBA=\",\"En04qSC9ePK1/rqUNGboUQDq0h/7C9BIaDx+e6RXRD8=\",\"IfeSw9BoJ20QZQpO+MjmEB12OZCUXwROv8b1ESYzLQc=\",\"G9vXB9VdxHCbWGaVxXCOmXPrp5oZ1lBBgc+Gkvf2Nr4=\",\"Ej7SUt6fGphjBfuZBmFUTR8LstEuPlq/NhMNaA1hRQw=\",\"Dq1qutlOeXKbXnCMYNyidDVsPlFCNJxDOCmE1N8JZlA=\",\"IetQSvlZ8h+cemtQpYv1J4IJomMd1iv99hda+PIrPAo=\",\"J6fu1NRK3jWD++fd1v5DeWqzImaqP07jgsILmd68bh0=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"FGIjjFhX2ZWqLHzNvniMsGJxU36hopnyjDB6gl6M39I=\",\"IML/G5m3qUlznqEI9fRioK7qB3MDy9UVvHWRrgKg1Dw=\",\"KqqZKs6/Z8WsUPzngky/Qeblqfh89Ckm+5ZFBbpgwZg=\",\"J5f9Nzc1iVwxkq6E7TkAdHiks0Ndikl1Se3aPVWYM8A=\",\"E1650BAcKnjKGwPKU7xVaoya9TfXe6yvv/f5vGa+m5g=\",\"L1lGaXidG4BbYRwnyjOloQLKOFSTg2mhcseN5aQIOFE=\",\"C4+TAZJQKFe1NGJbtq0v9z6U7025Vlp95cUT9G+8PoM=\",\"ClILftRjMRqoq457j+2y/icSFBJyZMs6D3oy0PuHFzU=\",\"FxmHIb6R3pWtZOZElbB9LfrkXqZ7LIJN6+/s4wTSWFg=\",\"ErWRhE7u6wbu1GaRun4b1NZhXSrubxwEDmM0WW7gbQ0=\",\"Lh2BqqSiLSlKT1fKEZm90XHGvcDOuenk9zcbUL8/yWk=\",\"DRjkPjudVnHn+AgNG0UVI+ZVy/GDzMy9WHk2KKpokFc=\",\"CspWzUIERtD1d1HesGkGzKLIjFusbTWi9yFwKxu1bFM=\",\"AYNwRQIE7gcMqz4lJTW9J5Ajya3ja5cZhun0qCG7DKA=\",\"EHF8GvIwip1K5SfGNyV5dNcb82HXQszP2cvu+wQSDlY=\",\"Ipr0itAYQPracp3mTZrGxOLO2NFoIPRktglpMQmYvno=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"H2An0YBvPbNrDikYMF6igAdiK2IoLQqn0tHDi8OhRYA=\",\"DQI8NGn1M363rT9qGpo8yHdBXxrrt+nlqVXOk/+3hto=\",\"K3Q2vrHiBaTnI983DyxmmFfv9tp/yFdx59yCVvURxUc=\",\"LPT1vQOJqNILnPl9Cy51pCnzbQHhoeap6uvGAC5tfyc=\",\"LGiTFt7n4j0jyzEHC/YiXZzFYvtX4/vc7D3vMUPQc9s=\",\"Hb5o3/MIjwywKZDgwDADnhFtAZbu0kEKMOkcCMvePc0=\",\"FqP8wwgOKEY/pNpm0wXVi3SIXcCZ3TKxWSCTYf2kkfY=\",\"L4TqiTbm8OmFKbzV1mbofYx+aKqheH+mc7iSBmmxCm8=\",\"D2f1QeMm38NVW1SlqAiQEwhfPO8F3NrgZmy+TRR2wc4=\",\"IsaKXNQZtDmjZ7dCcVaXzg0uCaSB2uh1HXx3JoNyEao=\",\"IGMyjAmsImUig9kaUtmFG5GQUYFbta0HDuAVBAg1sVc=\",\"DnhSekZY9Y2sQEMNTdyQQ+08yRCooOMLA+qQSngbqLY=\",\"GTX+O86uC8W4oTsHOyZ4BIJS532F85P4Shu/GRG0G/0=\",\"3HbKDfaB/lw7nM66+GSuSVyPkrSLs9nUAnQVTalyhg==\",\"EZqoF5F6c9Rt7D5Y/qDrjr90BBwbBpsag61IVrGAnvc=\",\"AqpG0E8SOMZGdG6N9b0M+dvsr9V9XeT3Q/21kzef8Tg=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"EAFII44Ophxba4H7oyGT1VWXkE1LEiBQDtysga1S9ow=\",\"CCQ8cuROARQVH9mxAuqqVp+tXfQN+DobUqzO4T/kn6s=\",\"FWseWDbw9ZvnXH8Zil0VPKMPC3mIIDZImTf6jDttgyM=\",\"LA4mS0PtbEsMNv72qvGq7ZCR81qDBVCsQ2TWAryenko=\",\"BTS03jDfWBY+lw/6Ds7wc4qf7IwOxOfZ0Vpmahb0XAc=\",\"BN/D6GEFlwysQQWcc9XyzlWxb0DPY4qFUh/ycMbhHik=\",\"GDcg2UQ8alk2Sv5TEgUAleM1shFZhHjHsAUknonO2RQ=\",\"HdRh/O+zVJupoVHfQBOzI7EYPr35ExJrUwA+hsCNme8=\",\"Jlbv26zR1YzqyaDnnTUER1P/m39t7bvG2KSPpIAo+10=\",\"LvMZsTNirE6CiWwIKm/Upkucsl7+Hg9QaN62/d+V0C0=\",\"E+l2uJGUnLGLRv4RMNT6GxY0LpVHef2vmCWNpxkrnJE=\",\"CMgEktDMYJ4YHD+dji2pD2g5D6zH5GjSnUmtklf1XCg=\",\"GqPHx6CNCCr6f7kcbxyfmJuY+WGbVtxix/8eGMa3LIY=\",\"HRFe0kAzHsKtvQo5jfDU27vy9jkr2wMIXgiNYNfwK6k=\",\"FETg/UZ7oJ75wcbOmoC05751XQ6fgakPdPCrfREAFdo=\",\"A86Z1L2QB6/04TwmedFKMdZGezKCfmjyNDFNMBMmYhc=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"ESm5FM7kiQFvw/+NIOK+TJq8hzBBuoK7fneB6XaWGyQ=\",\"IdvVCvWb3zUjENwBgBWmBf4t/g6OZc4f63LylyuYVkA=\",\"JaUpG+sB2fE+0xxYh1Xlbl5hWLL0Y0HIbt3YauzVLX8=\",\"CN4XLFbuu/+wKe6HO/8TFjyy0GyqRhCLrh27LEDSIhY=\",\"Ad0tVfI4MIY5Fp26YGbgkirWIGeBBqx6EJG3964NMJA=\",\"GJGRpkyeTZYKfygeN4ZpA053m+esDNxuT+5NoGWbBP8=\",\"FB/XNsgjr/d6wvKGMjQsJdFKZJsCbvA/NpYb9OuF1Ls=\",\"ETok0bydEOR/kPMIeB3cybkknZW7rNET2I1abqM3IbI=\",\"CPC3s4sTNoS3PQH8cx+JW8sw6hQ2RxXqkpIFAXItgaI=\",\"G/FM6Cqv/sMfRr3OjSLzuv8Plri/oASZWB+tmeYfYHY=\",\"FLe+M6QeANAzOgkXpylTn9uQukLxJFHGPeZv1BH243k=\",\"IQfp4oEdaslo363TrgFeP3H4fQxdXFzk+ffGa8kqOTE=\",\"CeE5fF8512MEC4L8K+GmQmLNWk2fMkka2kNs5De8++o=\",\"HRoBmGVGoIEtOk2uNKszq+nO3yBgpPZUx8sF0SmKA88=\",\"2j8i/0mKnP74D2PiyS29lZKOhUY3dwGKDTIE0eUPOA==\",\"JbdLkK+YGP4P2PvzPlOdwDekWtn0M7rI3TcXtkYAtiI=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"Dz1Y3GkibJlK2jEd3U8RF0tRxJDPP92TBHVAvkN8/Iw=\",\"HZSOfx+kcFta4+XwMKWe+Wb6N08da7h/t01Xt28rYfw=\",\"IkF27YnMtYG0X2r6xDXZsv3wig8mIqWiDCukyoc4+88=\",\"D1z+gUfuuUUblmzAh9KpknOWqDzUB9fyKvvqbtYxOtU=\",\"G3PpVEbVvqrQuywySifdD9xUReqKVTKJqIzVQKeopjM=\",\"Gw9LdUcqsuWtRIJ0K87fO0XZAXfdUmgLx4F4bqPpa+M=\",\"AuGJ/ScDd0J/mK34o/SZF+vd/+dxatCNt4dh2iDmcfo=\",\"B8CiA2Rlwzbw/Dl2Zchqh8oBc+4ZaWuP5+YHUoPl8P4=\",\"L7VJfWBBLIu8FLlh2WvNnSz4KiXaJQ14YEU9wMNtN2A=\",\"JaoyTIvayxHoHWEuJYgUvrE90Bp94H1XtyGmyDEBIzo=\",\"KSZrn8HMp+QdPFhEM2LM53yBVX9W47KpoOMWXzj7KN0=\",\"FVfjy8+n+ggAFPbOrfLdwizBxt663h62BdDMJ1Umjdg=\",\"AorT2LqXiW3yazKBtz3lnZ06BVz4TiS/S3z8pKbxjhw=\",\"J2kr4ioxAHWJI7Swm+PA4co0xi6yh11MoulRme9X4T8=\",\"JstSOGnpdjVbiy6tZJPDsa87JLn2GWSJdqkl2/ucJSA=\",\"KpQ7XYMXHtG6Wy0BUfdw0FzxF+KMii0L0HkBEkt6eOw=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"JJF0IcFjAI5Gi1mZDOnJZZcjx6FD7t3wCyK+qRGiP68=\",\"IDR/m4YMcxjYq7WSSXOmAyeQ7RRt1RwrF1iQ5nx8FOs=\",\"DHtLPWPzmF4H0V9Gv/VMfxOCx/zq0vxNJzI2ns9iMSo=\",\"FsPBW/sJDTwytng7jzW1a/HtF8r6tGISPrhy4Y9AvIQ=\",\"D0vw15s6TxV6d8t1now6lQwr8I07N+biJS/toRjf62w=\",\"IHvCgg6SaKxFKelBXXCU9sSj3TLCH7bzSmchgG5gpm4=\",\"BG1uSUL8c99aXCTlChOQ/NOXH4FBbsMDONmIQh1HHmI=\",\"Jdhst6sjt9eCnVL7PTwtxC7LdFvHTm4pwA+vLs7aYOY=\",\"KR4n1laXdIhWgkX31g5dMfeZOzUwtuel0uzF7Yv8q54=\",\"Dd6NgCMSMsAoO3rYSqNWu/ej52BduiHym1P9lJzTeM0=\",\"Frm8o/R1fuW9iEwIZC0pRzDbE/kBgpcKliyVbV3tBrw=\",\"FI4UNKd9War9Jsdt/NDZ3Vhwm0PJkXPOrm3ciZ452BA=\",\"I+OOP6FxP7Vm4AcXwKIv5+BWBn9/RVz2fCOf7VMTxIQ=\",\"Dss4C/YHAsAGouC0E7sGCn2v3PTYxzZIPaOBMV0Sg4A=\",\"FQTgvifZcQAcnFL23avYg5+/PNo6QtwBwgF4gGPs4q0=\",\"IEzUJdT+dKofw5ZpUCCb1umWaqffH1FeX/TrUEYjcEw=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"JrA1SkbEtvhAq+9QV3rgFgxAOsKuFUzETdGz75XMmjI=\",\"B2rLoc2S5MAs7Ga5l/ITbgPIalCZlnuNLWw/pRzkcKY=\",\"G5+DXv02Ls7WaxtP6zWaWikuUXnsogU2vAX89xzosM8=\",\"FVS1dAI5oDZlDpV89UiAoF/9oTvUpAuZRtFFS25e5hk=\",\"Izfw8jUNzy0sTLLy48jL/o6sRLGKTn32q5ZZxtO9Ufg=\",\"L3A0ej4mOoKfTJUkwFKMV6rYGX109JjJZhi4LW44x1A=\",\"KuBHwB5reQlnya8V/pcAvxKjLLR0LHXsTyJkNVJRtZg=\",\"Er2tdTUlIkSI8N8kEeRbGObZnfhrZO5cLh6qomtrEWU=\",\"B+0Uqd7AMMeauJdGTJwx6JrF05jl/CMw69dH3GJwToA=\",\"JYbC8IMmUDp8zDlq2hkoTGOB9UAqHd7lkTQDbG+fTIU=\",\"DijePliBWvgWqg5EnLawtoFR/Dt0yIRLBDP7VW4TvzU=\",\"Fe2a4XtIcIQEwg4gTeIYRi9cHeemcsBACxpKl9gr4vw=\",\"KJejxhq34QltWdt9Bi01Cdu+UojoUD63I6eDZo85Nj4=\",\"GTguAQEgK8/0yBhqOeTO0Sraety8DT1TWjf9jk5l1qg=\",\"Hcz2TPEEPvyP9SXfmhEIg9twsTu2RMZWfA7VYAaXlUc=\",\"FPdTKECTpbx1Pm5FFtxfGFbDY83p7MlXRd3oL49HXf4=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"BHzgdo07lFAbaUcPYaMnmvhsztpI78CutPdVzjVajAY=\",\"CoONqU5qorfjyNJPu9Gr+f4JzagkKv/2kdV6/2SjB8c=\",\"LM9yB3FIV+G5b5ChD2ZioKFh/vb4VUrP+0VLR1ytIkk=\",\"LJZHAumYhEp2DnNddOx/wX55P2VmUxKJEOCKHEiyc5k=\",\"Jsc/zChjWPioxFlA4y2iGs7NJyOj5sAAA7h1ly5+QhU=\",\"JQO7cWkWk8bNbARdP0C0zSiFpxrfU0hkLYC0S0J0Fks=\",\"Iauw86oJ3gVp4kqa33hjvZZc5lbk7jBhHQ8GPBtrHUk=\",\"HmwYo8ooGFK5c4h2Eox9FtL9J3iQQ5B81iRHHRNW0Qw=\",\"C7MjeXB5vmB4jowlfKoeHptSuPWBKOtJ39jXWV+oJ1w=\",\"Fu1NUWR0X92iMoqyjQ7wNQo7tQWJ1yZV0ODVqPHbq4E=\",\"FxnmYm6gPZREHt3P+wDcjnZ2ciSYbEX1+L90b3LjOAU=\",\"IN0kRNGzCn5FoHZ3a0Nm8E6cXRsypDsmDXBvZGoJjbc=\",\"InYAbKh9lzwfWEGjtjqp5qT4RGqKDuA+Bo/aI6ii4LE=\",\"LT59b+6q1/PIcA5ik6DYlgKNQUnVfCGZNUY2Ifp3mY4=\",\"JvFdS6RzbHN1Ddv/Sn2YZfBtVnbkSenSSdPcnqYgU8E=\",\"A2NoAyQpc6uR/vhapG3xPLpKyfZTeqNzDA2oi50Fx1E=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"LvAbyiOOpDVR5YV+QSQnrx2q6BuNmqDDO/OSu55x8SM=\",\"MDAzNkgFfR1Gp6OXMDGoZjfWzew1WbwS+jvsbAqrAcw=\",\"JNzpG8PfUF8Fk3FZh9PmurjxhH5e6pE0Gp0eg7/Dmr4=\",\"J6Kqlc572HD9o4X8lF12JpqcttZLhflDQwx5YxHQOGg=\",\"8y4e1mVmiLQAxC2lL/qPrC0l7od2EuVl+SccHNshbg==\",\"DWnX2ZpYr4YDV63Lq3Y6ltBIgGuxszUsPdzAeV5r/A8=\",\"D8oBFYwK7N3EBNdWGm1O58bnuvVO75PxtMcr2UaNgUA=\",\"JPZd0WIvWZPxcseoA6ca9tmTakX88vEcZaIpFpPECcA=\",\"I7bBxKlpeDRSYITMVui1OrPMsg4G7XvZTnUsrhPgRlA=\",\"BrCwZ0+ecMoxuGWN9akYtqqQ7k2oJy161QEJq3OvI3I=\",\"EZ6jEz3r4SD+tbD/ISi3Ra3mMpwijYyT757KyTPedbs=\",\"KP4JIfPiUL0NdN+WaeziETMBEbzaZf8Z/ovQJ3nadoY=\",\"EhvDIsN7OoTPozQHvKCEIcdld/TtUAkVHuYd6VOJBvA=\",\"DGxtEzxk30o/FI0DBkq2gfZ1QZICP5blxmAYG/Zwjno=\",\"HzV7AAyOwQYULAXX/LRb7jyoYCrO7YPDJU0VloVNjpw=\",\"LGNfu4pHXSLMk4jzMpjKMobVXlKdgWfQNsyX4otcEQk=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"AUFuRmaemfY3btnxtgtMHL4sE/NqwaCWGyjApN7WIr4=\",\"CDuZOgHAaRT643SYBn0cx1ddTWaS6QWnbAEBKCmEjjU=\",\"B9Zu/5Yuxt2usjqEy4/FP7JDX7B3n9xt4EKvjL9lPg==\",\"JDSTyi6a78qTtvcpzUjonFtpd9yLnxKOgPIYGgyTIfk=\",\"JTFc2NW18JNd860pDhjI+7GqiiAK8bO3rLeE8rHrZfQ=\",\"IZ6fJzduvaNqnaakBqbCNG5ttsNeNjkFAP+90kx1QBM=\",\"J4T3cNNjwIgTlhTcr+ToL+xK/2DLuUILLe+h5c6vUv8=\",\"LvCXL3YkosccczmJCzUPcWx/w8uITEjfc3iMs46O/j0=\",\"JjgAXxv6lR8E0+aWehm6aOeXJh0BX7C0ogAITaBSBCA=\",\"GZUr/CsVobekTlmk8AcHalaqYcnLT+xF9CMB75FXoJU=\",\"Ib/r1/Db+pUvYvldRHXAefYj9W9n7BPynlH+pLFCvv0=\",\"Cr4Mu9rXUunDDGZVRvG2jN0tVW9lnJjJ0MQEjL8LpNQ=\",\"IMTywpHF8LFeVPrUTVSb36BuhAUUHQdEbs6imb3tWNQ=\",\"DHA6WvIr6nehY+6Y43mHf8J2ouYKE0v6az4PNnSq2DA=\",\"I4mKQ/uXBSn0wSvRbpj4ka7WT8tZc4vVwu8df1ub1Kc=\",\"An3iBeO095iBGHOvDcOfkcRJuuFo6issomjw//Qhlp0=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"A04CF6qjEz/7iP0JutWeRNjw504aZMhvPpqkWHAARk0=\",\"Dw0pVKNCXU72KRruyo0eGSclD45WZoi/AfdyBrag4No=\",\"A4rmyVOwX96OwZlxUdYhBsOFYaZWO3xcQsPKPyVOu6g=\",\"Ep2uPmq8mz7vhBkFSXfo67NZVrXaRzH4ehVYuT1bZ2o=\",\"BDMxzlvxPiEsNrtgKOpe3JCdaAdjBIOWD/0eRyMz3oo=\",\"Bu3SvKZZZRXHv6f4LBI5RzZu/JIwckQs0NbLPLlbZZA=\",\"IY055cskqY/3eIM+ycyclxVKLw3PV242hB5h8qnVPBA=\",\"B7q9tflp3xBW3NGk0l7Nqrkxvc1BD1FEMiH0PumtYNc=\",\"BR9Rxu3KetIPlcvQfOnFxRkY3WY57LWOLbRPnakqxFs=\",\"GNDLkRDtLBPKaXxRcxJlRhqkDL/z7saXcMRxv6uFR7U=\",\"FRwNEAdQ/T/GSsfKFIxBvyY0wWF0bmZLZAPh1f+Z7bY=\",\"G63OBz25FWvGvAsFpfmtMoJv+Awg27kJkcWbhPGIdjE=\",\"HQlhGxHyDDV9pptkt/I16nl0FYPPF3pDFByu45KLyIo=\",\"FZA8z4vSCq+G3HoMGRmiCyvu+hDuk3O6YqddpdtQzVQ=\",\"Cj7Yn0IpWUIn6NNcD3ddgdrvg89Q9tr2ySWE28hrvX8=\",\"FcWm/dm2ugbsLN659GX7Kag6k0Xa7UngwnBksqdF+DI=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"KcR7IcPBOZ3N5GRznNlywq592FEe9NxKsGLeQJBM0EE=\",\"BdIMPhGPfhY4A4dENeuMT5OfrWaWBqD4gjFVtGY2tA0=\",\"Korfe2Trr2u65DY7jeE5sEfknMJY2GknzbF/ZNenY2U=\",\"DPq0lkS7JHNTCRNNjxFgOXthwjdmwTr6L2c1BwDqGEw=\",\"CXjB4kpW6fSOBKAOus+EqXG/UkqU/4LJ+mzypBReoyM=\",\"Hn/rCK0HWfFjJ1H9osgDRylqGB8zVTv9EchOO5nk3KE=\",\"FjbxxMa+mxZkf9VuQYtDLYHe4sCcANFN9SakkdA98IM=\",\"HQlBx2eKo4FMSZYvgPBqO2/0jEVjy1Y5Jch7YhOSlo8=\",\"G6eS8Od3DSlJeaOW4sVbIbrumNC+SHBbMvgx8tCfRw0=\",\"Gt+5C+WZPoqOgkZv2U0hQuBcUHw4oAlVNYlDaQeeKFg=\",\"FwFBetzHpjUV9Y0/5IQPlte4dka+klq/WDHH2faDnpo=\",\"AWZpwHEp3voCjUaIhO7EglwYUuauYPWsxKendU+Tg+4=\",\"DAMNtmG/ZgMrngq/6IzEgvE0tfObE+iqILVA0jpctNY=\",\"BsKbUAMLn5ZTyM/oCSinbmuh/lOFEJt+YG7wdjTVMTA=\",\"FY7/cVtjfqLhxDEs/PwVTT3K5tLiQIJueR3GYdQSKg4=\",\"C3QUv52s/w2HtGE9m7RI7wWD8HlIyybYaWOwRCpHiGU=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"L8WBaoqdVPE5ftbcxwVQXKKKUNYI8tawNR0TPqZc+Ko=\",\"JNBNK1P5+UtR4DAMa/l+ZVq2uyX3kDZcZJSYdvyOQAo=\",\"EsLThccG94to0TLRZ38cQ/5VXT2b1mIt6NzmoBrtcCo=\",\"As/AewS3rGvW/2fMbTKs5HF8vFaXSnC5492lSxdBzj4=\",\"Db7J6S0UUS86lfG9brh+doT9CZ10dkHhaVbigYNPy94=\",\"EREMrI2tRTYkdvUFNuA9E5B2ly9eA9uUZ1PtADTtMFA=\",\"F74IWhlmBfKwIa3YKi/v5sBivyBCU34FRkLFId2m5GI=\",\"LTBDTAzvX7XdYPa1LAFVaBm+3Qj4fwwZGUH5W4M4U9A=\",\"KXgEEhmGIxxy1fPbK7I8/EHZCRt/CF7r8JBfWYVK1kA=\",\"Jjz74oQzcOjyNSu0G1HVmo+d1KOVUpIgIdrpvXd9ZPM=\",\"GtobV1R7oLRM7BjpSyc8Aq82m+WLpMpd3fwMVMbZUs0=\",\"GgIuPH8YGlr0ymto6h6GNq16UesuSXef6iq9oIBYzio=\",\"GlGnQrXiqMsCGU/lRC/oFg+IfXGoxiQJfMdR5vyeEGw=\",\"Azo8T7KjNoYlKP5FbksoQX8M1bjXAvpZhkhZPLJ/+Vs=\",\"J1KX6IEVmx/xFb65dB/v/yRfzr8iZ/t3iLz9txDuEew=\",\"DEMwzwVF/g1NVtzr/2nMdWQjKwupTljoefmoOPpDtQ0=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"B7YT2Mvnx+EE4xRNiDJwUw5rMZBgai35J5H+4vPw2zA=\",\"Ayi7hgf4mVLHoOGZqRSr/mea/TZvVxYFE3CKV7C8BmU=\",\"J5fSpCvyw/hggY+SeD7lt36lyO86w0M6S6j4k0/kDn8=\",\"AjPm9SKhTKJAZ8XAmv/HtTr2yHd2UluyHZBY0B/BBq8=\",\"A5BWLAlcFgqnhjlAJ0BLvWo4gswRGMyO2CMHxujYAIQ=\",\"FxBuGsDPzzbp119ko5gHyBLMhbd+PFraSRYp9x2Xj24=\",\"GqKOSBItCkRzOjcOUDE3WoycZIzEbc8zRGIebNTKXHY=\",\"GPbnaLm88l03+Q+ui5pMXKwYG5sFxrzrki1Q2ERLt54=\",\"D6k0Dwed3EdrEAYL+4Uq+Cf/cSxcn+oD9i0T0MZw2Yg=\",\"HbmfKVsFq0KpRsLDpcc7IlupnuU9yQbq82BnWGfvr+s=\",\"CXV4rrQ6fWsbECQMCmubdx1lt8WjpVVSJuPORd49NHc=\",\"GXTDTYiTjWat5VRqcm3Lqb12wx8bTudjrwP41WmPSoc=\",\"DiWoKKrubxFou9nKLBd5c6jyD02L867AagwkUS3yIs4=\",\"LhPuc5TmJv/r6qCXEpNvhAJACXGYZVaHFRbyoOypBX4=\",\"IL5UeH0+bX6R3koFIXLemaJRy4O+b61H7FpWsFNxclQ=\",\"IBk4bb8VlY7S76vA+BGEpnEOD4I56JMuJYJ8yqu3UA==\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"EZXbRSNeCyhnF7uw5/t/S9XxNGqNbUfd5FUTuqSQIHw=\",\"Ale+YrWdb1TAIcJ/DDwKfKMiLcXs+ymL7ZhvG2y3T3k=\",\"L8YejGnxtqiaaY1L05DxrZYe8cl5wxX8Bp0dM2RjCCk=\",\"BO1t2W3Uunm5R0v+EFF8k861ptxblUl6caOMQsQXHbs=\",\"EMjX1IRgFNHTfXqicxHc6SV+od4XAKcXWgOzWPEsDdE=\",\"B/gzQYaX9D1oxnku0bakJ0UA2WwolDE/Q9kYUSntAbg=\",\"CqH7FBVvnbWXN7I+/azMQNj2CbNGgJ9m2WQC5fmiwQI=\",\"GjtjWwWgIod6vybFN42nVnUogtMBUqdedQlaSZKSbeI=\",\"Bf9oUu8seAffjGjMH7hC/gfvCIkuZwb0zLMFnx2AcUw=\",\"GOk65LTAkrJxziGIHxM7s2nQnjcmlnzrBIRpimywI3Q=\",\"BfHXH8mf1ujdGk/xxvtNFqrTRFssWyaYqMqZWz7DL90=\",\"JgssZlz4YySKXJoD/F7HE8HTLdO7F/Om26evFpAxdRQ=\",\"GZ3CaDHRuB4zPqeX5qouduoubP3YiDk2ggds53+9TPM=\",\"H8eEHDdiVJGFzxl/dlxQ9NqXNYxAy2nPdJQO6xZUF+g=\",\"A92Ns8MwddxyTat0FvlD5FrcOeFHRD/8vz++2AaAif0=\",\"FBXYfy7OJd1tqKm1alvc708jWhtnasT+Ds6L6lTw1iA=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"Fz6XPZKwPo981Utdy9SeXJMEYojFvYrJX3EeOEgHpAo=\",\"Hp6ejwh/5+riG4Q4UBfWMGxz7k3MWwnv4fkbnfY5Y1M=\",\"LNOeb9p7CnWSYlTRtL0nrWAY6lWSkNIEGmoc1IUCbO4=\",\"K6vjLGrRxGbAkj6JJC/weZetkSgZcsqWkK13gGx5+ag=\",\"FnHjrv6tEMHqsFdXfO8tADZTJ16hg/lWWD2rXmcXrvY=\",\"BjgEC04GjWMw4gc7kELiV2OHLEVktBPR2N89xScc3p0=\",\"E6G+CGscEw/JsDd79fTHq0Fms03BRCrxW9mtoLMWSJ8=\",\"6SoIxnpkx+JnrPKKBIA12NcCvA5JtxVxMngfP5EsBA==\",\"JPzyG7ZgqUZbalDqHg/2yI1GPlwUzILn8zO9jNnp2lc=\",\"GcNADCJ3itJgjMM9ED11WLkJ8r/+ESiUUCHPo5lrkM4=\",\"GATd9zNB+rITvRWsT7CziyEAOKswl982PfFUScoJKVU=\",\"LQMOEE62lfFYIW8tF7r1ica36zF0cCrP//NFn6o2kgk=\",\"KsKLUnNTbVUg28Dy0cpiJTclafLB+BXrDZjqI73j4Kk=\",\"EyNp5E+ltJ8wm9tR4/dkgbxxUREsKO58YFjUQE0yaqs=\",\"EDDY3WNV7w6LO9ITCD8FQBWKE9wFkzWwpoRxwdj5lc8=\",\"EHVL5mZ9DIjajSfI2IXGjC7FPmaHnvyGZKMThGyNt/Q=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"JF/fJO18rG2Yel8QmKPcIJToRF6oo01AnKoN6e6IM60=\",\"LdzUse8oQp77U3E0PXwao0OUshS6TTeGpy/0omD4A0E=\",\"CXltocVOlGWJiOHkfyqyoY+1S9EsD2l2GhFCjSv4Bgs=\",\"K4IAeYKVcuRzf9hLVeANabmEJoF2LWFMTMn0yD3HyIo=\",\"KiyPLdftcEkCmsWOJIO7ySyp3rl5WYF5lig0CZogbQs=\",\"LlEx7ZlgEjMwGlhUTrWzkK3CrtL3u4l19OMIm6WY4D0=\",\"BvgApw1HnIkxjOFKzgwffe2RPLMYaqZ6zHKQs1+UHIA=\",\"CEjt8nEi6MiX7Oj/Mcdujj2k7CRkgOdpgJvrzbRoAUY=\",\"MDKn1xHxF4Owz6EtCpu6/2L7nXXL5Qqm5oT5KF1VhAo=\",\"FWu0uJoVgnNw7VMmvFFvkOgNorM7+pdrTJom9MC8tdQ=\",\"EEuACq2E8t4BklJT3hMARHlE/wJ5mb86ET3+KCNucH4=\",\"DuJGNOE3TlBtMYahD2AxW+uKMRymnVlcCvoOTfrV7CI=\",\"CIb2yGGNRWVN55b/sKcY62XlI23v+ErcST5qSTCFCb8=\",\"MD95K3feBWM0v0uVxTWyJO3MwdZbKOUtVpaV/gqG9+c=\",\"LOX5vcZKtIsy5e1BG+EHsoARklXZdmc8FMoucMdvpoo=\",\"JvAlLwsLb2OKoE2rA/ao/nh1qE/lxnY6qUQ/qr021q8=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"CJXqp0IdXJLbcxEYdf8Ol9HxzxNFTI0O5lrgyGy58MY=\",\"BaN+U9PF27+c2XK2N7+wGO/Pof1cvotdv583YIeDOSo=\",\"IVGr+lXoAaXdVfgrcR8Fs+Yf2clNx3IBqeYsiQkdqMA=\",\"HfcEC99jmL+8XcC8/VLiy2rMHjLqnuxA4cFKFzYVqQE=\",\"CC2cCZOuShKgOcEarRJ0PF9dKGxkiom0NCFpqkEAuao=\",\"KV+fj6BZ1U1LWCITll6rxe1veF5KpxGW9iOL4sURvRE=\",\"ARSJB1GUR08GOZN0EnnOpc6oELzgJ+ZK2QAiXO2Bs14=\",\"DDCK3JsN6lPhw34G0FdvTtOcKupmv0KawAV1qRBRErA=\",\"HIrpUh1lebQ1IMPLzXErPfu9KxVD0VZPfZGMbjMOCKY=\",\"DGmtZElXWZuz7aHZ+DHKZ7Ahsz9kB/8uVocOerPVpWk=\",\"F95PdIFfs6D0VyizgeLd98EVfl1lmJ695H+Ly4jzaDY=\",\"H8E7djRBCPEq9o8LyAyZV38JomY2jw4nR5Sjz2W0jRc=\",\"L60ExKG/RA/lYHbfdOXDClim4m+p2ghlvQN0tq439KI=\",\"IHZrzH81m/52XOh5mAl6dQHXkkcw/nMlqszqoFTi6ls=\",\"FOsiGrZdDbxe32ogZRiOqQV/k10Cj37RRynr3WbtX9c=\",\"AcregcTVYq/4TardYwOStzW5SBdcBkrOlY4MeJydk78=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"GbZJFDdJELrMMzJscL4KhRjnHya04arl0z/V3Ou7H0Q=\",\"DsCHvDnlBY4MXBQysgxhJTdEG+AQftdZ06lGitqXXdo=\",\"Jfat5umDNpbE28GcdlyiztCfR/B0XfyFDv0m46i/xfY=\",\"CEL2dPZaSVk426Ag8ipHaEDgWR8Xl4DXLAAVPd71qa4=\",\"JLMjLwW+V+88TCKvnMN6c/CuQCifsPqIBjD349AJl6o=\",\"L0sjDYJaaCUgrAtTJtEwoku4k2MxiWHvX2U5G45/a8M=\",\"DxZEAg2KbA3eUGjxirGW00gXKq3P1jkcMf8bVPUTUJ0=\",\"c/2FDKlWH4pkXJ5K+UPTcqS4Ygt4u7w1epfRT1MXlw==\",\"KE+GuczhP7tv1mDY5Szyf3vycjpJQnjzyww7rQV00QQ=\",\"Fr7lLR1tNiuUMMz00vGv6v41cq5OqgO+avbxvMBd6FU=\",\"JUzsEXjoB0DMoxjRtds3td0j+ixEq7fxU1IAYYuboMU=\",\"ETBpz3Z+1K/GHlkumKY+2u+YJ4ws5Z2xCclO9t6pzw==\",\"KCnhUytPzbLfkQTMI7MzGh1Rx9Dam2RaSkPb6up30ik=\",\"JKA8D3tRtuJKiJaQozQfVd6srdr8H/hxr2/Wp23Oi+4=\",\"JKfCwSQTGrN+1ioBghFKXc5Kt+YrFP9jJwOyOnjzkaA=\",\"GVKelD5Gbagua66PF1DehiDgYDBtnfWp0gqDpLaPwJw=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"J0wPaPZ52lO9zfnBE5PDTvj+Wc3u7PhZ1K1TBpqIeJw=\",\"HJAMpYgrEHo7iok4FAsSfNP/v1OckUXzhc6l59xpePU=\",\"BVoyZLEwu0MW9FA68Tfw2WS3U7pXVFanRYG2jGeJ3zM=\",\"KQAzQkUDBVqy5rgJOnWNsPAtz8StryajD0Z7DoqhrxM=\",\"G0FdbseJN3S/mlmKhJb4OlQihhoEQhHg1SVJP3XHvKE=\",\"LV5qkmUHhuarNfOmLFaJoCiISdHux+v4m5pt91za/Tk=\",\"FbHGx1cX046UJlUj8PZJHiLYt5p5GxCyETnwCGUeMDc=\",\"H5KTSftSIsSm8X/efwqspkMLZ4XMX2XD4beELDONweM=\",\"IwNLuLhhjejIiQ/I/uZCIUdUXRHUXkHtYya3Z/8JnLo=\",\"KrcGxtIeiHtZBtTbNQ5BsXYyPtOfiKdbgPHrJoAWn2k=\",\"BMEDHdpeQ+8yWzOoDmzTLLIrFq0yT72QzPecH36e4GI=\",\"HWY9MXBe78ol0puIlCI6fa8Gv+z06OC7hFaC/OCxpB4=\",\"GMl7xtwu4cPWa9rXBGAZttSrplkoI6Ua4qgFKCTG4zI=\",\"Dd5BBymTLcr/BJCt7HUvqt5YLi7/nQWJbaQ/rDLhrTo=\",\"CxLeEnDXiNq+wUVmEUhaaEHN/kEaCfgMDhMoKFaNjqs=\",\"BRlAiMsbDznFsVJ70KOsTRbIRcI4jNIt7nVUTs6rZAw=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"KikE+SvcA180fG+231Ssa0gqJkLdjnmPnfCRX8yGhys=\",\"CLwPIrWX+hLNgYnF/Q95srENbGWUayh4kNxfWUdh1mU=\",\"K7VaVU+bzF6o29TVRT4YgSLGbFB/3QjQWJcGwTNWGdQ=\",\"JHHpEHit0zX1xIRXeF7xtGlITtaX4un4DQ/HOFJJJQg=\",\"LM9ytzJMvdShuYDYg1Mu8oh8eY70RkCOiF+MvRSsQqw=\",\"HDt1qtp4wbIEo1OG9o4JqO1wC9iGhdDjjO2t+9iKWD0=\",\"ERZOqWI3BOr++Gu8/srVkllwOPwbCXOA7/ykUCV3xzM=\",\"BLlhw2gnAZasKtouZuRKRECQXv9bWDQTAs6t36IV9pE=\",\"A53NHdP/jX/gGd2mQQTpu/ocYPq9VAZchecnMC2DNds=\",\"CQ8n/v/idrbB139qgNLCVoD7hUr5rRvhEmgGTnNQYLg=\",\"ICkidpoibh3qPDnXkb8o7JNjnHk363viwQkS7olv0+I=\",\"AWO7GxFZYgGeQb0cfPDYeD1LqhY9y/biXTaMVD+VYKU=\",\"JV3STqG0mXIAfDt0/ZjDzMaC/eWIWKIHO+S5CznlfPg=\",\"K+WuzHDon9f9PiaDvqDOYAz0J1nsWUHwdG8SaxG+zNw=\",\"FYRYfJH1e73EHoXqOsjqZ+0mHNjVAUtCSh3AG6xHi5E=\",\"ITG+W0OH0ibCK80QKXN1bNf/lVRS6erkKRB6skQpSxQ=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"JUsOkb9xShtFdI11ZykQL9q4kwH8idAp1VN/kibgQvc=\",\"MDwhqi8XPCkK+eqOChD3hY/6t1GRhYQ9IEmiKUYCaxE=\",\"BB5uz8ihPN9S+cIWYpBvOVrhcvlEx1dQc8Du6ZYpQfk=\",\"Ges14nlQmPr/7571usoz2p7PlNWXPA7NJeaJljCvenY=\",\"EULSLsARqUqUD+ID3rGZe2T3gL810GJ2ZE+Y5I4sn/g=\",\"D93Dbd6E4WpcL2MUcJQ84x5L5jBbym5cdTxhhvEFn2I=\",\"BbFLplJr49zBe/fWCaQqrBrf4PRJo9k3Tgwi4mssI2I=\",\"FhUqsKAMOR1FApCuglz1yidp+78ufrafh2QCX2jp/1s=\",\"KMyQh35Mzjj9CMGvlcw/iFpcUyj6DuC8icoZBpTY5IQ=\",\"LfWrmkgLugAHLEAbquQgwYABVbn30aubMel2rYAJKdE=\",\"EmQKAdm2BWApAGWj/YEq/Aem55VAj5iAca7t8iq3XmY=\",\"GyeS2Af1Xrq19CdNQ8zbnSPBVbi59t+GlOzG9n4gAos=\",\"FsLqaHR50lfiamVbXGwnvB9FXu6sKMOzzmVLx2ysOPM=\",\"JtqP1fxHh1HgZFOw7LbNqr8jGljmA6xK0UcX1w2y8n0=\",\"FPOj40c518cnsBClAi2fDz4DXpHbOqlH4+vjNm7tJ8M=\",\"A2YUHREVqvsITPqGbFLvQKX6V/3I4G/C8eRrlnycZhU=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"FWWK/ZssE9S8DGN875cX6UPFD4O2fIZ21n0XBQSU5cw=\",\"HzGNw+J3vYlaiNvZ48T+vUPNuQZGg/+/G+nm+bKnFmk=\",\"FBzdXywY1j7sboIkiTXq6sTvBE7nbLfvDpJZq2+T2qo=\",\"DkslS8Z9OFf0mWgoY6D5W3bp1cyft8LFlynbIDBQKZ8=\",\"LMK5Cnv582Y7D0Ht409g1jqZhgdg7WAn/hfU+p6xs5Y=\",\"LggZcT33x6lCwIs+pQrdkuOSFBBBIIA6WAaq0QI0q8E=\",\"JBZKQzhAoo0mFccZxxby98AffDhUoyfabF23UJf+8e4=\",\"JyVD8ihJITkXKa5Y2x2dsIB2KdkhF3iwdW6n5PiCl7E=\",\"GUryeYf1DthzDSZ9z9mKmihKNYLPtzVuPcRrvKHu7Wo=\",\"IES6VfXkTHBpWQvSq/yyt7Fj1H4OG/LiUkwJSNpLGjc=\",\"GdN/yhtnt6xiY0nL8pKLlFeGNje6omE7SU2doYzDhPA=\",\"EjDqIxCE42QYF7dGYsr1cyVWw9lKAdIJ/qH2d3rmzKE=\",\"L5JKQtTZRGy0iClYg/2tzo3r2lrHJ5Aeq/LYYn3G1pg=\",\"LadFeFrg0+/xoygddTc4Or/fuiAxqICs2Nq7M4ikzpU=\",\"cvpjVBTRZz+rjQVxB3krMDnAM9kkzAsVMEl8LIEEKA==\",\"GdsynwhqUHgbDG6yVSukVNsvy7wSWl7EHtLA6EC9Z3Q=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"HqTz/ptKv86eZVsFxPZKCEkAP5s0m9vzSeoqJJvclF0=\",\"I8h4VBM7XTknQtzliqAc83bjmD3ZOWNMT+5jJtsh20w=\",\"C8R3Th6ANJuacEwBcJ3oQ/OyCnW+Yw0bbGVVrfO9oEI=\",\"FD/9Ct3cecUe3PrG/8GqPZnr8tVTSd9TpUhCyUWoL1U=\",\"K4ExRrnnD1PjyyVJqR5oljkoxA4CwIcp4P0/WUGz1gI=\",\"E96e8VO9IvUGPLQqvAYcCe7FEOS2lKTpub9t5WzC8gY=\",\"MAFd0UPIDRE8KQv5TunXsQy/uTlZ6EZ1HDs++fjQdJA=\",\"JRXuuQPWU3Z05Ps87gs6TFBR7zz8Gj0d0qJfTd+W4Fo=\",\"IOxexstfkdhgklpjQa9csV/PSyaUCDI168fqeMz2Qh8=\",\"B3Fg07mZICIPpZGkn3nFaigrbjaM0UGe8JYy6GlZnxQ=\",\"LcAfYUJ4iMstWunYoEmcr8A5RdvxEXJ7Giy65zu0Gw0=\",\"HfO4Bdo7WDzI9zY3LnsW09BAfmNLbLfr7ysWiTIZQUc=\",\"Ikpst/TpZOYWylsPI8d4WSMmdHRdMgcglrufEhMfAHU=\",\"B/dPDeU1Ixd1MHAXoJMox0kb8Pt86GrV+1iVlBVJg/0=\",\"KBbRGPWdPOrRzt9cx2oah4KbLYwfoQrbsv1O68A3OyY=\",\"FpjA3ySUUWQGfl0NmwMhp1eBigy/rpaeKMdtxHCXREA=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"LYeNARlIVHe+jb8Bo676knojAGXO+haeNM3Njpfv7kg=\",\"KvN34f/LaQmgf7nQOTfOSo/q0hkMq9prrr1ZQ0RdwOQ=\",\"EQ/6rodyrHeg/ibzaEhDRP9oGEPvYWxtc+DdldXx8+g=\",\"CSzeR3Q40aEzW3ldWlrhXQlJh3xzSg7KJJhlrjCkzi0=\",\"LLHcx4FErfyh5T3CUcLkCElwyUGFXuanctMN+7GmRIs=\",\"HoDzZpM/AFYtP6y1QBXnL8TPRol71x8/MBW7P4iVIx0=\",\"IMXZsuFT9Hh6dlCWqnwfR/mQ6BAATudzfCERUMQLee0=\",\"Eugey371W4aJMnjON8QpQArzCzTBCwrNeG+9eyXDRp0=\",\"HLvqvgKJ7VlC9QUxpkdTDxBectH5EusRU50fxViM4fc=\",\"ITxJcHYKWIJmHg6Bj0NFC4z54C29AEbyfqTWZAPtDuc=\",\"KG9z4U9ySV+7KA1xOwFh/2laIQkRUO5smulu3fNuISs=\",\"DWSiHOvR9ZgBVRIWxpOxgaqWO84Yp/RDnxeecQWDYpY=\",\"FLs5yDbADzPqmQPbo9PUNOwz3q7DUHbq/BpMWgGkF8M=\",\"LKW4jmuxH2Hl3MKk72ZLSaOAEAnx63QggxO3sE1Z7dg=\",\"LESvBBrIkkKovXUdls4Phu3fjDEuazEnxT5gF8DSLnc=\",\"FGbSH4SIUPvqVZpMdrGgB4f5l8Gkpb1AZDA2q2hFU9c=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"IgzsvCRxUbwgKoGkVz+SO8kqIgixfhwL8t+6DeT9Jto=\",\"C3HZObVG9gnMsYncvu2Co02PL6osWXo7Nng2mkcdgXo=\",\"LPuohyKtN/2ht+yUialuCeiLv2ZJyLcBS93jTvGKZOA=\",\"DQ3rwPDV3N908hktoGj4djEhOlKq9Z6toL1Zu5m6lRA=\",\"HSAlBNV6YcTNa/AH5HjZWI2OZYXrxgIic3mq8lu/atc=\",\"JRJTNno+KKaR07b/8SCfbPDgNzaShyXeoPnwgkrnDcI=\",\"JgxV6cBvZT2SAtA/HBhPtw3y+TetFXcZaFhj5DOPtL4=\",\"IAsiRiOYRDRMzohUwkyamxTkON5qPqRFFRiC8jFo/SA=\",\"Lj5HvkDHIW2dt1RwvYGTw1WLo8YcVSvFbasnE69iUGw=\",\"J4TCsUK/PoY54JA1iho8geJfI+3KsYABUUxhfNCRilw=\",\"El3iT0+8boebQDmvOKHQQebDiicLO5UC4QwJ8UlEXWY=\",\"KXQK2s+dNonkQ2OcJeNnsj0H1pDJ6o2m4S+mRDUC+QM=\",\"K7nTbDahB9ty3rQmJ3aWeSb5I9+cls8HcI1WWcwErIE=\",\"Cz2YJ9iY6DMzyDxlgY9/wXYfz2MtG18D7pUIW1GN+2c=\",\"EKboYHFfdpadc5vTw5PxryxtJ/P4wh4QHcjPelFe734=\",\"LYsKi/iUt9YH2aSdxvhyVDH2nvBUHevZpBzOxLfBhT4=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"LxJ/vX9Q0T4e0UR2DTejdaUHrB8Edf0focq0Aeyvx/s=\",\"FXfSekqJg9VKNkmU2yIygG3Go/GuAFlgrby0NSqIueI=\",\"BSkUzKE78cjde4roMpOTzLJNy7MsRiXqK6bPk1vk8jE=\",\"A648uGwSW6fiLGj8YS8pKKlhuklnpa/GYe0sMt6T/TA=\",\"KXeX3vgiRKyHPGTB47BYZyWt/zJO65sVqbR2gj5heeE=\",\"ASSnqMbkTnE1tY/Ct2BiFxtQVK8N72BE2ZY3rf21tAM=\",\"ESLNRorlqBF5G7/ZkPXvQw6x4fHG90aeV0bbfsBCaJI=\",\"JAm+B29rv+h6Zg+GX+WutKvwZMEr2tqTPu14JLonHN8=\",\"MAyrki+JKSkV4Bp43veuMjUBaU8SJze57Gc58SMnizs=\",\"DXQ1R70yH70bJ+v8fVJ5ey+XMj0l8aN0r+wZoWMKtjs=\",\"CVY1UL2sxVIYmE6EE6EibCKzjBLWmsFr9uP5UqeHpQQ=\",\"GYXIVT7o54vRxls/N1/pnLDBTWDmn8bSBcxUvRc/UgQ=\",\"G9eziiftvxFRQ3ZNJb2sfpIeg7KZZBAbSU+AdaeAB2M=\",\"AnZoUHUSVPRPTpPbViGDm/Ds7XKKbSuM/wWw/NqUXg==\",\"E1uSx2tSrwExGf30Pp/3nLQCCLLHjMzXJ3gf8fRWA54=\",\"GdoiagPOvqNFyaVs87TH5pgNYTRxuXiUp9X+1vPhx0M=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"CS9KzKLg7eW6kBkW2p4fZ79EWPhJXuojjRczLaY6pxo=\",\"AWQdLYIPFqfj9I3vEWts0HjeR663gtgpXF9QXYmp5Lo=\",\"CFIBotdxAsPQxjNTATxHwq3qFGEg6Naz4jGdjmO6DMo=\",\"ClPXWNAQjr8i2s57u7cK+ib0AEhd7p5Of096t9kplnc=\",\"Ji2UI80ghSvGjEb+Xq5ZqB0dgUpmpjjIwAEn/i3Zh2E=\",\"Kt6GeOHE5aiAAfcIc+nCi7i4a8d8FxJzEFe0EEaMjzA=\",\"Duj/P8JLzTBj6ZWky8009GFCyfOr/w+ORqhnlbW0ZVI=\",\"K4JfnNRYXvRqXaUCIJwSRkyCSt+xgDJxi7N+RzjLMpI=\",\"AayBAdpt3sVSI4/P85Mv8utAujjtDDnrWQPjrcz/eR0=\",\"GrlfIO8NqlzrhfghQTsEbp+4pwth53+PVGlxH1CPF48=\",\"WA2LeRid4EUAqldJkJh0+LWWjJIE1lEeBboaOVM2LA==\",\"J1h1qXnzGxyNtH9tukxVPIcyqjfEx01/6fl5J03CfJU=\",\"E9hHMrs7m8lxYlM2RKdRXZHwjZcFhFENtWyrpi36DWY=\",\"BNR/lO1ZHDlp/uCeI/OS3NCDESbWIf9aB3hLu1F46HY=\",\"JovlABWl9GdvIC7O8V4JQTC6tYItY9d3N0yKC59PODI=\",\"DESnXVAg1K7ROa1ylPJ3YzkfK+a9M0NpHqbhIsQ1b8s=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"IS5+Ls/OeJInCPyvJ2u73tPA4tiATWahP6AgdJxI7MA=\",\"FY+oYLgme0AReA7reCxNK4eK4mFeMXt5iWG+KKfKJGI=\",\"He92IuVGOf1AgTzxv4FiGYrxngfYig1C1DY2h0XjzKY=\",\"FFrUmU1Cymlmnkx4742wZGEEf0l228WtSmzyw/94v1c=\",\"GX0EY7EKIWSfJWcM3SUEulhiGrkStkMpOzKlFfUK/fw=\",\"IzmNGAAGBppox3Qsr0xmm4d0K2A9XsdcE9KoNRA6D9Q=\",\"HgJYvWNofXsXxPo3ifn9ghCKPTjtRFjlCgccS2IoZsg=\",\"BCP2dEtbla81u5yqcgCIsF5/6JF2VpAQ6WeS4P0Goow=\",\"DFBDbbbZnlqJM67ymsg/ooFzlcV30Lo+AVL9ODVCCIo=\",\"EKInJLeDpO116SICphIa127siMP2ttKwzVovgp18qjc=\",\"D0nxrZ3k8FfrOsrb4iedYXOEwPWUUDxhbIoffAX8yIY=\",\"IUHAmzDqrJ81X0npiQVDVHa/pS+lM56jD8SL6r7OD0s=\",\"AVwcK1nEXfwnTBEfvMK3m9dEDXONC0M1GK08jOjQZO0=\",\"HbO9HWT+CMLa4t2t3CwznKBAK+yLQbdNdJmKq/37e/w=\",\"KaWiAVw8MXkAAIUhkUccYkQnIYgTEPAeL7C5IVemra8=\",\"yNwB0/gtQb1gD9B1m/4KpnSgt9CJsO0OqRJ/0IR4Mg==\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"Aqgkzh/SqMR2Ej46mJvy1nCdsa4ltgA7NfTppjtBSlg=\",\"EuvJYjz47fblGfC2eZObdLLktAl5ktLtOCr6fcCLSE8=\",\"Fr4uWOfHkdGp7esn1kjWl6xZLQhcUEUXysBtzMybgLk=\",\"EfEOG7+ynvglez8TrdI1UFdrrnH3I2E/+tvaFvduZ94=\",\"GtSFhRT+pjPRHvi4RgpVy7/yYrkKdwT8Kun03lHUMyg=\",\"IV9LJJtcXmX6vktIVlanRtVk1EUVaMGUnSjjViTNXWA=\",\"H7rR0uoY8vd3I7Pc9KzeJnUbBWFcCvnWB0ga5BVbCzE=\",\"IWYocdaV92vjcLN7MhSlEfpqGGxchWr0+DCVDKYBqeA=\",\"I++IDv45Z2yoG5D/Ylg3FBX+/+FRSjP7O5RDYM66tSc=\",\"KCHCQfyuvToAOVAeuTDPmoR2Chd76CdUC6Dzx67G41Q=\",\"FGviIopi8LJnjRE8HpvGjsmE+8mDWEQYgsMiPF0I3aw=\",\"C4i/RWQ8ygexDUwtIp2fT4GG5dobSnkhvbgQgtUl/yI=\",\"CPycvqw4bhShEhoJ8LoBl3xqS0RFKL9nX/pTgin9Cx4=\",\"G1BDGnSm+7NlOwfLk7QbMfS46PAGkTJjDYXWJHx1SgU=\",\"HkBr6Ff3+DTjTkNmpkIDpFh+PRXj+2j8580WSL8oHZs=\",\"FI66dyJR7TUVEY1LHNNdHa1ny0SekwU67t9skHJd7sQ=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"LgQ2BxD1cxWYGQndko5ixExEA0ZHhC36MVJvg/TgJnE=\",\"Kq/PwKZ4KG+Hm6/582ABj2QvXcD83STv7eb0KrQfOHY=\",\"DAVtcfvgNnNi7hLUd3nbrGeE0Due/8/euXuRxX9l5DM=\",\"EVUkqrmRfUSP71NC03c/EMe8M7D+AV/DmFG7avtUL9c=\",\"EX5q3l4FvF770h3UKtvscBWcQnvauvpd87r+jUgkCVg=\",\"A4EzSg3fXbZocfi9lD5KVN/R+bfRPFKUT6D/JWIlD8g=\",\"BD6MQAmrutpqM1C+4+klVjaCRaWqwMG1LyM44c4RIcQ=\",\"LogWfYmVREh6HP844ZbcJbO469AaIomzgsll4REoy3w=\",\"HDCNj70E4eNJtODOYps/usMiRg+qOjcxES1Ew6TbJ64=\",\"A0735OCsDT2F9K21vvIUyWUSrMwcDzoRRwtJPUpueUY=\",\"K29+xOZvreAUARwneVKycJU5Zun8ne9LzSEFL2IxWnY=\",\"KoUQWFrkwWKyaTda9b821Igksc1NMjEl8GHckPBv4xg=\",\"GQCLmbPh2liLEJTzEQ+QMjVNGq+ck8qfHdABD5dMP94=\",\"JWCSbbRUOsmz7ErWSxICHSMpRLqN3Ee9xJT1ugUfZeM=\",\"ApzOoh2O3s9jWQWMNgGZYLjgzW4IePg1h5R3+jugmWU=\",\"IiAMLeh9dVJgTh7MR8Y57Jg1Jf6EhKPSRlXV3sGkujM=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"Kteg0tqS4Q6m62gmS6UC2poKWzW6uWmcvCn9j+LjCrE=\",\"IFkAI1BRF67MBm1Bwa29WtTL8Om43+r5+eh5nwdTRAg=\",\"IixG4mLKUBEwF/z5N8aLxaLOZiFuzkJUrD0H/ay/9E0=\",\"GOdCCkTqWx4T9HeYGLl6IIG+IUuutiZx4NrobEAjrhM=\",\"Iup8oGjFm2XMBWN0qEisZUF6bwLYyqBEB9E5TqG6glY=\",\"DToHt05lMYyeGHnDNwV8xxLA9TO6ScHGJtG3qxVZNts=\",\"Bh1SkqwdjcWKtzoKSPb2MSYsZgH7fAtIwaFkUrVG220=\",\"BYMwEpYLBVEzybpXKCi5FBTNe6MdaO9G9fdgeMPKGEE=\",\"LydkxJ0bwUJ+UZ92kOMBpiCmKom9RN12bWyhgdAutAY=\",\"C4qNe63g2yxiuwm3O/dETAh/9egu9N8lzQ+eyqEr//k=\",\"G9K0sVBNjERqUSX6l3VLNFzOWWam4OzjWGkzUQBxKDw=\",\"CHwLi3ue0af5FwZvBJJ0grcbABIBFPbrV8JyyyarCrA=\",\"IP1weozGHSoDFwnatK5Yv1AyoJtXDnSXw0FVltPV/SQ=\",\"GjOy6ACuKX417q9OO9BV3FblM/REG7JL/RMLkk1xz3I=\",\"GEFc1SqVkoDWQVTfLFOEac6FT3Vh4Zt9BSNcn6R4zgw=\",\"LmoxDtPyTYNZaeQB/x34VAgBq2+vqQ5w5QqCMPM0rmY=\",\"AZD5Itl8in3PChQqO+J3SdHGS8IvHFVqqiSSXRWMrFY=\",\"L8S6Ox94caLfGoAbKdHrSU46TQcrZjjakF1fzu/ZPFE=\",\"ARYsdlsYfiDweaQXq+yAw2m24e/r3ZprrXV3wXIrWXs=\",\"CaNXEICricQdLFMnnJq5ztUu+5zRUm0k3VizF3GnVgY=\",\"L9+fgcKtmY8iKeZOCE+RSeo/CUjNkoE2CGEgtormllE=\",\"F46D1/L57ZLT14MofyX+jQ0ovvDL8jFcoD2jFKrrlL8=\",\"J41oH2A9oYYxm++l0sVWep+1Lu1gYXh876krJ8KKZO4=\",\"EI/YvFDcxDr01zaGq/j9cLQiRcGvLtzxEJB4SiSqX7k=\",\"BP92XDDU4DW8+8GWxkZUH6HSfAXV0IfgHAPvESJLePM=\",\"BgfNj/m4iXc8nraLikNmRp1HDNfGAEEGyq6VwQxCRBk=\",\"HaUkz/YLZIVtwfXd4P9i2nsYLaJpCPa6blkK3r+RtAw=\",\"IvM+ruPEgeZYAbdhpygykI8Gb+Idq1+l7B1Mbpndbfw=\",\"B1+E6ccZu43o5hCDKQ2v8ZqqQzdFTluoBCV3h0cPL1Q=\",\"IIS+mlfprbgDA6jcr/1Lt3rbaBUWizah02OzhCVDcTU=\",\"CzA0SfG/S5LSy8Jqs0tCFbbdevAQdHpwWypuM5iIKSI=\",\"DAmbxoJDU3ID+XJU8I37fvwJ3o+W1y87Pgqt7UXhi0o=\",\"HF/ZBg1ODZmSZEKaUATBZVcL0WdbCfl3cIscpI5hY4g=\"],[\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"GZWT7syFNnAEF35xfYra4JIGqsKFBigUA3SPhevpmF8=\",\"jdlOGwnYuYI/3k1PxKN5TWMWFqLBkqR/4le/vbzLfQ==\",\"CgzQG9ezwhVS7nwLqHg60jGAKqT4R9AN6CDpF24id0Q=\",\"KH6qs+WcHN/OMLYVFUO270mjvnIG886mLbToD+HKFSk=\",\"KoIw9+0F9+M0+RzyFMe/EoUplgg8RWpQbrMWwknPtMg=\",\"CjjwiWAHR6a241NCwuMhBC6/aQcmqpQxAxNRy67ftao=\",\"HVMBFop9rGiRt6n2281QX791Ivh1phJUFJRJhp0xbgU=\",\"E6uvx2X7LkX3k2QL1/HqL4jSAvDXtCAEEM2WEo0+9HI=\",\"DafiRKQgI3+9hzDr6gP/9FFWpSrIe5/2Bf8bog9+g/4=\",\"Jx0xVTJ1Wx1IgUaZrxhlS7MQu5TRJY3eDlibzCpeKLs=\",\"Evtvkv8EtdXeQclQiEJ5iouUVKmfDMSakq/q1ILoS7o=\",\"JMv5KAtxP5VXGxd3maduI/VV2ykKEYeqWrfbaaLdorY=\",\"AY9DyZobcufL1v14GkbBPDggK0sLp+51zTb8t5tepn4=\",\"HGlSiz35TG9+inlOoDCPwWXxvBwePvCQx6r0QF9887w=\",\"HLDYqmUSp1Q72Oi64cDw0tsbNFfhvMD/03LU7uPG+vo=\",\"Lh/OFZdZG7d27xY0Cu3a/9rwOUh8tCv6Z1Kj6gz+GPc=\",\"Dkhqe3zfD9uIMG2W5yFh1FSbKBFSxs/JjYSwMelcoWY=\",\"EUHiaoBpi3QtkA/R5zSDnVHk1Q4BdjA6Z1gJrEcgF4I=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"Dj+N2t5UYnhkgJXMg16UBjlysdVcZBRQZZKrV+VMgEI=\",\"IZM6O8SYk0ewcD183t3q9liKFm5qP5hOMY3mPOZ06Po=\",\"LKb5RfX3VQOcjhvDCTXeGtMzEqfPMlsGX5EIPPsAGng=\",\"Epqa2HaBXZZWZgCpfUH5WNffnvlykd5hHSjX2bKvRvw=\",\"JrjyAMDQNxVYdVCBIh3Fl2evxaTdvm99QDxcy0A1KJs=\",\"DHxzk3ewrS/507Co+lPjnHAW8Enqhg6BE7BV7JbuPWQ=\",\"DRejZ0n4+dSToKV72HYYyWnLz4PttLIHyJqlzLP+sg0=\",\"C8/hJm11dQOIHVbH5kz7vDy2pH705lVWWGTgG5vT+HI=\",\"AT+J2wbKRxsHrArR9ESMsiWGi2MTFwDR3d3aFubV/Mc=\",\"JNNE6gVQ13IIJ7a+bAmwJ8jkrRBNV9V3ccJYF3owK48=\",\"AgjOiZE+YzrqOoVahU59rsQK+hk53B9yjd5rNJ45ujA=\",\"H8RWUEHYEKdQ4wahTSFpUHTjHtorrwghd0rdFcDi/D0=\",\"L6IvgNQwm+Iaspi6S8FqWyDyzo8+17w0UxNWVdomlkk=\",\"JvOiOQPR59g123DzAFs9WmcEP8p+tiqo14lCoMHMit0=\",\"HOA0P66KEuJfI5HrA4sjd+fAwhqmAQCBhTnWCS7ur7A=\",\"JEoruHDx5vS6XiDxwiVyPzBYQb0KuTK3M0mQywVywz4=\",\"HsYekSb0yP1vDQCyjF8CM0wHfpnss1jSU2stMhzACq0=\",\"GLKrCH4/Cn+oprwWh5AKVIHqmR/93wF/9Sp/Nxwi24c=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"FAuRyg5TEQ6Jime6iFPQSCGVLnYOVt6YUYCXWtI36lI=\",\"AzhfUEEsxtTKrquarxCZ6MPGEpV1Q0VTShR2FEqcJng=\",\"DMOW8LgOJjhhW7SiUPhOVN/jPOdjhu3yLaLbsjNUasE=\",\"KBDY71DehuBM2KB/ZYWgbqvErF79xEEJBNepBuzRctw=\",\"H4uFAenbZ4zCdLMyRuOeuVY1rErS/3WakgGsDD8WwSs=\",\"CbEOUNwHA7ZRmcbP+FEKnvIXJUXzZuwqrtuy9a1OOR0=\",\"FYpumuRNHrx/uZtbOOUTklfGjw3eqWWT/3qH3+ecu+I=\",\"Bo26PrnxuQlwfmZsHnx0UZL27C2EOcGG+vbTu5eLQqg=\",\"EAvph3VnXLCGTLVvo/grZrIWBx0QzfhzWMfka+BVxyM=\",\"FoTEsRYGO14Fy/TrmzprptaM4fMK45eOG76npxvSDPo=\",\"BnjPTkVfg1n0mKIrh6Pb/FDOIzy72ZmVzCWeQZiZ5T0=\",\"MF0RG+rz9RChBO2TqiVPIKTFOe7KlXVq4Dvb3wyO68E=\",\"GXsFUOjgnDdfSxl2OVrmBRZJ1seow5t4Z25F0zqGMNI=\",\"GQcSko/GrIjyTNkXk0i0ooMnSNz3COAcUO/NMuK4PeY=\",\"Cne/pBE+mLR+jXBan2AWC6FEujRMJ0dE8TXyB7JJKe8=\",\"KWKnCD54MNKH3go0NswJPg/XwtljG0k3rBJNWP4/uQE=\",\"CRpxWXa9meQHd8EZ9o6+xwHjd3zJueUmAliKX/iVg+s=\",\"Bh40iMySiSUgRJUYr09BM7UkEqGfuLmNPQgS3qJjbjw=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"GXzlm8h/Yk6WKbc4NFK5hYNidUunbKvQ49MWHrjKdtY=\",\"J24uYnKrKFgULw3aoDj0Nun0xT601d/YgSzxDKW6saw=\",\"CcSYManhxFPQcs6D5QiGZrVt/RrQl3sqvLKqnsg+LKY=\",\"KkqtvzGhxYomYm753jQfImi8okPrhZpGWRHaGK8Bc+c=\",\"IbBGDfyGRYUb6I6W7V9nzC6l7gD08wJexLUlNJQQWkc=\",\"EgqCiHRfncNgyx1YCwErUlQwMLU7m5eskyTfefxG3wY=\",\"CfDZEfXrG770ye6Wwv7AsMAJRd5HBrTL9k9ioCAV18U=\",\"DdASTYyde3wgI3mgASY+BSLOSdEIH2OBYTStFrs0J30=\",\"K9gD4gyzQd68y615sFPfblP1Z4dKUt3rlCJ1jnPPbsg=\",\"GbK0sOJL7nkPughnhH+Uf5dd3fvjwRtMVm7UZzaEwM8=\",\"Gs2pfHWSmsEcIcsIHxd6blUDMbJnDmpmwnk+TKS8w+E=\",\"JRxwqTuBJ26jQ4cJuWNR/YAE2+4KvA33kynKpNkyvWI=\",\"AokYmE/9/AETjfP7pSIahgTJVLfuQN5wcPsONOcDjqM=\",\"LqHP8k8giu1vTafPg3gX6/tvVFUo2FoyQwq6NX7vd28=\",\"FbYa2mgd996AFUe8mTexwudaT5coz7VYb3ZbBYc1zL8=\",\"AWpK0rRTAG2fzvMZGdr33tbe3/PFs7pP7WkuI1CJkWc=\",\"DozdfD0zknB3VDvaWxd39jadBodrhjbLlakGDHk2vpA=\",\"JhUnYOXf6fCi/pAb7V4N/zBJgn5DoQkeJK7k1FdJCmM=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"HOVuFfQcmaKgBazH94tzXoMw26TbTMlsUktGOAEJN6w=\",\"KzPvEfwmdQ0Ul98Poblp8cAcVVZSIVD/l2kSZJrwapk=\",\"BH4rVIMMy3rIk+Oa/omx1+rDXH7A8os0PgJJuSTxXTc=\",\"LoIDMscmavKlndy1IG1ASCfpVjyixd3l0tNL4mnIJhI=\",\"KPwSP3ms45g4t6+Phr6Mv4mjVAAVvtBZ+3pVho7e5iM=\",\"EhrnEski5+9V67c4CfMDbbQoUsUvpjv/MiI3vYg91VU=\",\"MALyWn744DXA6CWXlToQf8c6WkBncN1HypOjTN+AQKc=\",\"I+os8VnKG4oXymG3O8hLM8pyBMQSDOwIdCRHDdBiB24=\",\"F55yFGF2vRUFHfeJ3cPQ9IQ3yXMjKEbkIj2vBVKSSP4=\",\"Je3FKyzXu2aQaS11w/G5mfKuB0nF0nQdK1MoS1ZV1G0=\",\"HNvqdshldQzrhewX8gyVXy7dRt8J8K2Q0Ez0FrEPyq4=\",\"Lt0prgVZEkThEk7cGVAzpASqmKhjZ403ad21eXoqdI0=\",\"LZ0qNCR1zBZi2lsmRT77kvFUnvuscqEiY3NBSkmhNZA=\",\"BHgzSJBLvYhL48YI+jSSh9Lk1ChLqqybb/7RkqZBQG4=\",\"FYjtSQuESM+4g9eQuw+XovGWLRQonJRrjuSaTdz3o+s=\",\"C/EH38M/x+ZhU8fl1r7t0lLRe4yhvx9kmana/qVw+wc=\",\"IB0PFa7wGh4LQB+Ub3sp5vARR7YlfX7iNcbTGcRHQyY=\",\"EBWAQANQNmix2/m7yY7qME3N7qTrfa/Ge0GmRGrxA4U=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"C+4+Eo2udQBc6wldnm4OVShf9+3ZbciWVPW4NXBZNQM=\",\"GFPPPr1HsTsvIYmQ6z6iY3nB0hPnD+6luEiC12JBzq4=\",\"AsJeUNNjzAh3S+59nmIyhV9tiXerFp44/G/HbemmPm8=\",\"IczB6Pi1rTm0AfecUe2IHsiS0qfuu4/72EjvFYr8r2g=\",\"IZOqlOzVfpYmBKtCiqColxZEcHxuhWY++bNyCmhdcbA=\",\"HTtc0xM6BTPrFc2QjLu13Oduz1txHyU16FKqRy7kydE=\",\"EfKdNY3nbvONMdbXJHtk1BxC693H715ERceJf1etCLM=\",\"D8wphNHSt2LW+hajpAf00+7EhKkSl2OGQmWt18kAg20=\",\"L3nQPnMjF1hf+au2KjcYAFU/HrcXpxQ34iWyBMGPnps=\",\"AvTxTu5jgt0MVNEHObNUq/EEzxNLq63y3/m4zyhvlzM=\",\"DQxapLxPd00D71svlhn2GO3Zr7N978xCCwqk9P0UXoU=\",\"CbFQ+NyTQsh6i36HE0XlmYwIRmLIl4md9F1zFXxP0PA=\",\"KBSIYENigM2KX9ZkX9HrhqvbctvLAujvRwZaSmgenrk=\",\"LPYZ/jc17ZvM7fvfPeZAMc0gMjGg4XhBe7zer2nIXRU=\",\"Ay8WTE9OUSLUOKngMJRZFBUFYhNDqxwZq7Y858A2rQM=\",\"Kj7971UiCM40QWN+LNYQOG9B9AK+xFLWdL0v4WwnNYE=\",\"Gp56E+TVfNGrPjjwmR/KpMrFQvZvwqRvnPfSACnKx5I=\",\"IIcZCKDsBD4eQ+4fUgWE8Vs6fySi0Dqh3lDifKWZ2HI=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"R2fvQjQdOTDX5SGfq7/2L0ThA7OgkFz/rqWi3uc8GQ==\",\"DEoXhuUVzZvKsrfJcjxZfnMMUyVVADyuTjYTGnIfb/k=\",\"FH9GjFjer9z0flcRTfDq0sd0UqRQIOc5VcsVDhAVNSA=\",\"HRMJ+WEQxw2e+IQ3Rna5zDpZn950OI72jZnlS1gCx2A=\",\"E0KBw4ft3otvgH0lO8Cs56Yl+zwfZbiORTf+v/UuHWI=\",\"L+wtlyrEuLoUu8lc7irGy4xmmrw153ri99yWLcza1Zs=\",\"F4LJ5FHL3iYdqLStOhXiPvf02ve0BnMt4FVwxzBAxmM=\",\"Jhv2qfaOMTCI2LIBbT53Y6b27s2bUG/SuqjY81k7TEs=\",\"EzMVzKNK9Abq4IDt984nV0+5hHEOTo7Dmutkkbl/mLc=\",\"IWdjF03bA5UYLr5X5P65G+jxN0bomUlVfgI985fLZ5s=\",\"Cdu0K/JkWdP5ui7V9JG08B//YiLGvdt3dkUO22xlLOU=\",\"DqgyqWmtHZT1XLNPNccyf2LyT6FAgXsji8Z27fH3e2w=\",\"DafcOVl46O4A6lulEDo5kw4oRTOxpR+809fapUIULdo=\",\"GDz1UFO3mBrFBv4cVv7nP+OjmuBCFx4hVBsrcxJhhyI=\",\"Fuq/pCNrm2G6GzNs5V/r8cyEND8ESaVIc8zPzg/5OJ4=\",\"K2LBCD+8I/WP1pRkZJm8uQNoouY3lLHTnbqja/eC42M=\",\"EezbxHpyE4qv5EJjNW0B6TFUGtSawowEhCjs0jP+PG0=\",\"DrDhx8rnw/SRz/chbdzlCuuYk15AUxbG2v8cIQRq+Z8=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"IyPImMow9+j86bMdISg9NUVwWnHQzpV3xQEv3myqoR8=\",\"I3P5scTfbFAHaN2xPu3s8Kgr2mApwKv5Dz8V8uep+Ho=\",\"K0oeWaUrG4Jfb43KXvZrkpAy2rMqnTpY67RIh/hMGMo=\",\"MDSumE8VOOIWMUhhd2D2JWkjGmGaDitiDSBiEbIy7yk=\",\"Dx+xb4PI3daVnQGpV2qNcMImoaQi/66J7guu6zfpqL4=\",\"BY1YPc+XX5fb8x4y6/sIQSmPdlR2suSDMmCtm7gvLy0=\",\"KxBgqW6KbeWeLerIGxfUDsqqQIcna31amsK0dZjC+ss=\",\"BwV58YaRVKbvy1n4W0O5Cv/nVe/V1OYmhq/0ZkbggI8=\",\"IURNJvneO5/SLv6pXWL1GTw+sLLhprOT6FmWQ5qkOZI=\",\"E4Zx+S+e2agTH/TH2mgG28M/bALP09lGqpIojfL/nZo=\",\"HmKde49h+gKl+y+xY6Wlelk7FY33BBP+hoszgwekSdY=\",\"AQ8PiEGG6ZbBnOSTm/MXs9Es0ku4e7oNO7djq3Fu1Bs=\",\"Di8GumWix8hQCFC6akiYeSUtDbKvad0j+j7RBsknOcE=\",\"GYI7Cvn+sz6gdWZJXw3gXn6/pSqon1pdfGb5atYMgo4=\",\"FrBSf8aqxLRIXd7Qr9iQXmtT4Fbv0z33uPwtPUtUzQ==\",\"CKWE9RCvSVcu6Gz3IzRgZgAuXnYh5QLpRvjzUAO3k/w=\",\"CKY0ZsC7vf55N18YHtAmbJfmBXZT0LKFaWpe8+k8J8c=\",\"KK5pyHSjqx7mNgux/1YPuraVkeg3pLxNgP+00lPiMsU=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"AmdRqikHkqT7OSHZ/4tZZ+/faLH9hZgbTZZAG8Yhs4E=\",\"HLIV2Q9AFcxZNCk+JIstaspOCv1GzKIZqJ609nYZlIE=\",\"C48Sy+cVLW8+X7vpeIhKW3vm81/aTAD1xZdRWN8vM44=\",\"F9bY/l7eG6UxkYwz31xsnv77wgMEsvvuGcAa74Epl3Q=\",\"C1OtWYpOFESP0ES4zhW2M2r2uRz7gcDagn591o6Y5Z0=\",\"FeIO6PxXMzD6Uv1C7HtjbijO3lQ3vjcbGZCJh1Gt63Q=\",\"FU+o2cfwnB/8f9/LWP57kebYGwOt+4+eL+BSL298JUE=\",\"DBflm0dQ10Q/gDDybr2C0lYj4rjlVAy6HzEIKOXmaYg=\",\"B9++VuaudJkXuTRxUlJVhT+6JiItReBQTY90eEsahvM=\",\"CuTNUJdahq/yVjLoybfA6RW8OBWckN/ZRZ4p6pQy5Gc=\",\"H9nMYbZ9cA7IkqjAmvZ3yeKAl0YwEBJoI8ty0HWDdUw=\",\"G7NoVrqJkjNOeVYmSGpGCMXZoHbNk8iqDhqTSuTo87Q=\",\"L5zOUFD2b0k8yVIT20M2U2o6DioXMRzswnz9nYjjOdg=\",\"FIOe1p/uq0nvEQVW2WtPF5P4yV86ON6ADpyg32kPlY8=\",\"B7XFr7aoJszxt0DPyKpvAnmrUMPeipj2aSv/jO2+Xw4=\",\"FC93iLcsX9WpBl6+9Z9ujTLu10WIz8Iq0JYq6ySnvQ4=\",\"HQfWLuttq+nfT6AK1kK/p9Nmh9bKnI8COkC10EvHiug=\",\"E+Vcq8C/u57UG/IFvgZ06GaKiQjEEa6CHSU52MxYf8o=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"JitEcZdj7ypIblkjHZYkvPHsuV9Xa94ecIjdWn5KX4k=\",\"Lf3p5epUnVDESX0ltKTOzQliJiU7PHw4dAV/piuHQ+I=\",\"IaVn9CjXRbTP3acQAWOHGlOD5djrvaZvejBaTGvgq90=\",\"Hdpj7ttjZLXaH9GswotqV7mkAz7ndJqMKsFSoelNS08=\",\"BoXiont+w/28vj4BeVM3SXb/hTca6pEJwtdvCuHO7Nc=\",\"C63UxlQWE0IqPCtxYmrw3384DW8/baZ2t+bdpGP2P/w=\",\"DicDEeBaZP40+rMBi2hhbwiiv0wGpHykV976TBmfuWw=\",\"IHgqv3IW9sXngajwNQCZVRxemho9Sz7S2YXlp/Vmsk0=\",\"ArGmmfJrH8S+sDHfTze41cur94BXL9xkpW3gB0imXAc=\",\"B5Hk/THryF3y4GquKe3YCPEpST+Fg3MkkvvXBW6T3uU=\",\"LNo1vokXMr7WI5LN3QBVe29LGV4ADBvU/PtgX442nWQ=\",\"BrF3EISdJyEK+z7Mp+fHrTv6Ngdd3xtG178KVXx6+6Q=\",\"KhrYZSnackhw2/O9b8IMzMGZgQLPDXAHprImOZnk/NI=\",\"LKemkfF21wnIeZtQlNKKaNtgH/tdEzzfy/rp5WXx7YQ=\",\"CS7kfNWNMDi/gMcNeYUWwNw3Huf8dxXalczdWh6CA0c=\",\"Lwo/OrkDPoZA6cG3ESsxJCt+tJODe4S73Jz1bOWFh1I=\",\"K6+kR7T1uHjoEup7JGfHKJDBGZkr0fbjymD5JugS0sY=\",\"BvmA3sXWs2ZfHPn+pyXs2th0xcnLY+eYf7QedDCj41I=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"LWlJC6LuQ+hBki6aQmpbvCZPF+03n4vJGuPSdeckwho=\",\"BVxreJx8lYbkyI+/TrYHg8346eWNNWu6HvkvjsNRSqw=\",\"Fg81amoFppGdx9LgOHjG61UqFJle3KsF9iMnPAzSmhw=\",\"KheOHY5ORglxBJkkXckeZvN5W1wCJ6K6jMip+IMKohI=\",\"Lf8kmLUSTjvCWH87HP7028EWjCFy3EPx2AHLdcfhj/c=\",\"MGLf+DXqHvj2lg0F9XNo+0g1fs6C/X7xLLUlSlXj0QI=\",\"f4Patq1EkAo74uBJusRPxer93A4mHtXReV/VE/EnIg==\",\"GgN8LrhfHdgryZiMZ2Ru/taXRE6ic5toANIU6PxSyNU=\",\"F8ySqzRkoInk93R/y+5QQ7Wb+dfLdENGzC2IkFFGMGE=\",\"NuxjTBEnQB+aIgZyDibnGYcCuF3rIxSjfB8GIXz61w==\",\"E+fnSkntlMKnFKRrEsGePtZ5M2SyJ2OuLCi1MxhmlRA=\",\"ME/s0TMBEyn5iVQEeZVpHGmR6uunFBSUUG/Dh2z4Jos=\",\"BOhgyiBeTXjw2T07dD4tgtd3N/qvJwTlVA4WOu/nW1E=\",\"EozWSU7LqRNHNwOxEPvWbWJ0QDhKYYesqAiN4dUaqmA=\",\"LHERuSWfT8pj4hitNU6RB+gKQ2o+gtYvGAwP8ccFV0M=\",\"CzkB7Jbqhkd4ppiGaoUhcOrFPsXAXAJDc8s4WFl3/Mo=\",\"Caon5/0UDf9qIPdpbIVwLD9grljmAjMBK+OZbYOfjW4=\",\"Hj1RVVr0wzIWMKodETT/YxziWhK3fTwvMGikqYH3lJE=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"GbmjdJDJsFB0I2NelfEKDyei3Ui4QDk0MutBw/uaomU=\",\"B3g/rK+pWyduUqTmlXthRYBsZPXAMF+sEcFAleZ3Dns=\",\"HdF0k2rTC6c+o3IgnKI9UYaLIeUzy9Ff/UOMUclRXIk=\",\"H6a9ujg5+v4O9nu49Q8r/MqV/zTM3Qcrz0RR4bOo8Jg=\",\"KjEW9/BQhpvUsBgSRftBYT9ILPgdCblYmPn4E8r3yX8=\",\"LBaQfp2C/go3md0H78EGv2DRFN75WSYUcGIyINnZIkw=\",\"A8NzoGZPA4lwL5ZsEkNVeWo4Geb8vylYO0oziRlhv/c=\",\"LmcZXFRb+G5XN+TSjb8HXBHNIZZRJ9pK6sE7Sfutwt4=\",\"Dg2BbNg9/QU1qXBqqNciU0LNdrgtLD3wQlhX2SrsOPY=\",\"AdYjwFfM6vafRDjVTpVOWffwQGWrchMtp4iyj+CK5AM=\",\"DX8wEH71fHWXXlpIndLjkFPRLPX/n3S60+ZH1rQnhlk=\",\"Ay90ZtYubJ3YwCBkrBEgQrkILH6i6MqiZtBKaPnZsVs=\",\"KkvGLSfnIKnlPALmUZ7NxoTtQiIsBjxpip+gJMG9Bmk=\",\"LxHa0WI/V760jx94G92c9XdS2rb6dbZELbODTOv21a4=\",\"B0SLV2Jn3Z10L/en/IMk3fPzQN9XWRfRWDJWuKJsAB4=\",\"EMBuDoG7pROThygsOIPFln0eutftFk+XDdaX3gNttcQ=\",\"Awx+FZWhEQEUP4mXt7n2PSZbtp77Sv/+NutHrE4XCWA=\",\"IIGt2aafiAEQRJ+IPfGBaxQcEbxS/uTDVYIVAeP88F0=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"KIlJ18KbyitS3mepcBks0ZU5DH7QeI+B2F22TJjHiqs=\",\"JYnu/onuZqZQoncA162e487RT1B1NkBcIakIV7ajyOg=\",\"KP8AiqCzp3Ms1AWWIKdqnRz4KGpe+E7k31S0NWVvFNo=\",\"IVXfRnEwQc3mehDYLHwTkh8OOUvGbrePkEd4LNF+pkM=\",\"LBb7hQWkqUp7XHdXksq/pi4BSzOlR5qBwvyKUugETTY=\",\"Kx4xQ2K636+EtNJypLZQlpgwUQTif9MX+70BeBN8xwg=\",\"LCfG2JS6Sec2Wa5mhmd5ahVHM4zc88NZFLPT4AT5NcE=\",\"JMTXCmLXeegxo4pRAULIiyBxJR8nN9vaEE3DzVWFBB0=\",\"FyzWxM/KoAhdtZ/6YFGXH++pk0RYpQteO5i+9gU/f6k=\",\"EGh3b2bW8E7c38bmy5Rz7i9X1nCUHkoZH29p57ymGg==\",\"C1+9UyCZ3tJdF6i6TbkwoMllUFb6agHFboJYQ9djeQo=\",\"INYrjfKLnVZ3vU86yAlXcr7+6LK3Yfmkp9m5qnGSCaw=\",\"q58zLg0MTduZj81tpmio90QmDj6olHtvYYnKgsXbAQ==\",\"KVNjmqhMbA/u28ceOvTkoVvECPXPO6K8uYulvAHJh1o=\",\"Gvw7YhhxkOkBhMbx8YeAIPDvz6OCNfWYDsNywtm0pW0=\",\"AsZ9EuvM0FmzZXNjAvAdqQiPKkCuSdiOWMfsq4BiHbQ=\",\"I6MpLkBXi1/jKwx8oViymPx9Y5fKPUalAVelKKatppo=\",\"LVqSzjh41z6J1kXzXqKxefrepkMQ/3UqSKlKq5V82mY=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"D7PPPYL3RC7c565Ywvy96YOpmRv6jFg8yehnUXb19QA=\",\"FEG5LO6vPpO7dNhIdbezL2YhjSPMJbdH1SI0TIU+ac4=\",\"DGZQAwiw+/75nY3aPuIZ7n+u62rHyZNXLBOpOxcsCaQ=\",\"EEKBFA18ZLW9QVwlCDCuxonlhoxYojlsj0r4fAbAphc=\",\"KX1EYtuXhkdSSLObzcQLoOxmLl53L20HwxeJZMhrtrA=\",\"CILNafXxsMFPGl8Uc/RJUuBC2BE0olxFoB5NmXdhtr4=\",\"CmY8EoCl9NKFUk5hY674+DpCrEqP1tPES/AcX3Y5PnU=\",\"Bk/33Eat/vRLQGRsea+pnQwUymvb99paoyLzRvFpv0E=\",\"CQHJWUGQuE7nm3KCpqW/gs2m0o0cUT/MZ5tCxdqFcP4=\",\"ISV7dc3R+snFo4q8FSdN8qoxit+tM6UmPqPNsaGZBXc=\",\"JVzwqCP6fL+c3mcWHfc3iWlzATjzurObW+NXXdYui1E=\",\"HUsfurouBk9Z242KbnKrhNSajYL2ovn9Uyyqw1MLvbc=\",\"A+Xs96OU60U95s/T/o2jb4JqvglrFa3XvCKtptLsg60=\",\"HwaO8d1I+JNAN6lclLN0CrPTmaDjbN+Mka2zntkMUVE=\",\"E7W0g1Kbrc0+pQtJG2oEL/6cOPJ2HoNn6sThGoUhCXE=\",\"KJVYRDgcqoHskDJUGr3z8At3uagLn242PPQ2ngsbZkI=\",\"Kj/jTQ5ecgRKWvETJVsSnXj90vzMKA89a4HJhdFs0og=\",\"CHV4JWhakNlHa1vPN27slVbEGBGpwBf819asRPu7ig8=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"BUVNN7qjovmZpT+1lQSqv+4FEIYoN4o6n+tYdmPSdKQ=\",\"Epp7ivg2QSVy4Gd0OUxpva5AM7FdzCpO/BDVtNhQ+wU=\",\"DLvhIapgyZeblB+U6GEh+YTmczRwjrBYUHdxhHNKCLw=\",\"GSWsd4PDCLtapTdp1DTETeb67aYBWEhpPFD9/H9GXYY=\",\"HiQgazX2c5Px1hkzrt4CwB7L2c0Skp5IMA434d73sfU=\",\"BCdnN7UZ7eFNsbZS/FYWlAjUzBq/BD2KnOkKFkR6Bv0=\",\"J7lG2R5EU6SFTCnNJI4M2jKdZ6LqZkUNUbV/ixWd9f0=\",\"LN7AVK0IyMXjFYiVnmBatbBRhRf9gJ1Dftwn8z2nWAs=\",\"JuQ0GQ1TEl/HcYv66fNPISTUG7UbssI8N97qhAfaNSM=\",\"BRnQ5LbBIoNo9CCSbGn/N+59z449xFxOlcghR30HXto=\",\"Kq4fXqYBXkrPIvlQ9mIM9059e7ejPsCbNyz+Vi5fLhI=\",\"L/ucYYeZu/A+BxvKJtEwqTajgPdPbkdfVnrf2a3Caas=\",\"IqYJExf0dPeA0sThHXjm64dWhveX+CqLp7MhKHndY+o=\",\"B5sJP4DYkWJVamU9vnFJdZKLoQz9Xx0L1HwP6mjwNJM=\",\"J0G0I0g07KPf061KMGQkbESW3v2Bl+RQuEFuSFICjEQ=\",\"Fa3A7yrAm6Fom8O/IeT6UBQcAInQCoAiXzmo7mPvADI=\",\"FoAX/hk0O119hHbAk2oIcKyHvrjvLvmwLLdz2tctJAE=\",\"LcXWSvq98Im//jFS+ispBybLu01S4+CKtSsYdgcKiwM=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"JjExLiptlzRC1d1+/qKOUHPFzBfIeMxZTiw53qelGVA=\",\"GuL5bfmhpxvill6x9QT/51dC/3+BpF35CGgi6k/4P5o=\",\"F6S7SKJHxWNJn0txou1HY8V5ujgAkYTzYH2bS1sllMU=\",\"DJoOvjYQhj8NppkvGaVlkR4U5yaH95jZC5jywrJL2mM=\",\"LycxIRCQkp00ns/yFJDvM3R9SkAsjBmVuCcpKtKZIBo=\",\"CbenjtjQYq99DvVeRkN2+mpO8N4ODP3bYJUVY1mCVIA=\",\"KKux0+G/1o32M9GUCLZuw0pYBUDrknlPuqAz+OsOAbM=\",\"HiAUu9XS2y+XdERI8tV9Hie2395IYIWl2MEoBY+g5lY=\",\"JfnvEdT/SFNbkwGjGlQTI2+7UFaHRdRK+W1dMHSQ62I=\",\"JBtDDFLTIrsJceEn5OaP0/rQqEXyNbPoC7UUoAt169I=\",\"IbZgOJbS/SPPqbjbj9DlUN7PKe7AFbXP1mUxPZEBS98=\",\"IGaiIu04X/fZYg/dA0O8Z9P+kCfEUJF960wSarnFhDs=\",\"FIqyJ3hmudDHLquN8wo6u2+rFhDhZKnyQA6jl+Dekqc=\",\"IrUUzauOBdWxKJl4v/I+KqdjVl/lBMfju8hgaeA1Ijk=\",\"Fa2zL9UxlfzlgfktrRklsUxic9Aqc86KIemIlEZF6Ck=\",\"JlFO0CZpUcNcoO+M4d5Gh07BMv/+xigH4BgxZk60J80=\",\"JKFAH//jyGRRNVrdf/4k21Zy2GVs9RN3w4NR8f7wmm8=\",\"U9oU5eeiWJSgsO/bBWF9TwkiOYAi1laxPSSsMcZoOA==\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"I9TV9CsZxzAVwMSBRGQW2SlGnfoF7EbfAWO4NbMNCNA=\",\"DDQULH2Q+WZ3CSTem9AikPKiXX5ifsgLs9e6M50OiCk=\",\"FWk6yCUBjlKg1MOu90DJdDfk3DMx1VKhyOS4o8nhdvQ=\",\"DB13AdKxlXgdLsacnJG1MqMmFj7E+i8NxK/MWFQKzVc=\",\"KfVXBrgQXgJ3DhIVjzTr9H+n7zXyymLeaZUkvlhKF+o=\",\"FZSAeK0cnwjAP6zD2uvLqEagLNkplNcJrgR74BrhxnY=\",\"H/+YX9HbDgRdCsmD5gJZK9qtx+41xpb1XaC8rXXiCho=\",\"FrNwMS4gEsFfoMa5YZ8M4k/wWGwQtL0CWJ0rey2uTv8=\",\"AjWBIKYKAWKK6/ZfxyGB/5oOy+6a4UjrtKtL3JshbnY=\",\"LxoXEtWn7u+GR8ejLCyUkcEOyHL7eoKAvV82CjQRz8c=\",\"I7jQIqjoZtQJXKxHx7pxEUKfbAiVChneR2ui/YNrbPE=\",\"E5rZbBQypTtv7jXs1m8rnajOS+o+vfvSxKdZYe/g2JI=\",\"0aN2KQPPMv/7AWgQ6xHazL/y19vWsqRHrTL4ENiIkw==\",\"Hi/K7PqqMpJPlksCHdVSysQg+CKgpx43woZUIh1HK38=\",\"EhAplGaPl9iHgS8BURRBEa6xnnSOsZjDp1qZZRdvjwc=\",\"Astot+Y0NHVCcR45PRiLb8LrD2qrenzJF3VDs+xtfQ==\",\"IVqJUiKQ5MvBQt6xWE8zatQBqnbQWNpYa67a20wLe50=\",\"BQjHDegGy3imIlDblX/l7WnkwzW4ZjW+dKBo8gB2ig==\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"A/XRDT4t/cqq9dIlG6pufe73/mAW4OM/Z0E7V254Q54=\",\"BRYLOCiPd/6GbDU+P8S9+vObVPsiwDYca9qmRRMdzTI=\",\"Gh9TWF53IH3pP/B3QRROkLb4hY9saNUrYslu/jGariM=\",\"LEirJQFeC90s69GN9+33dmoo11eCeBjChPFTAt89AoU=\",\"MAHYxrLAqcTn+AyyaI+Qnbsbzpa3q7iE9AUVisqQrZw=\",\"FLp1m4G4EV0iCzu14Hfll/gF4w2WHQKxMu1tbd5BbY0=\",\"Ljs9loA6cchG9WVNO8Q/ae3WaIUiSkb2xbZ5Z82bBHY=\",\"FRWATTlyp5dUW/1RQ809PCuFsYtzT7+mDiin2AJMuMo=\",\"AhIrFAoX6Eoc6FSg+SSru3lB7riviDHe3uIo5O1GLjg=\",\"Hv7/uZiuVRCzhv4Wh6BLGEEeI/UwDiaw2ucaHaahbvU=\",\"CuvgiQyrGo04mtmKxOVrdOEXbd4IzZCwtpA3Fn0iHAc=\",\"E5KBDhNVAqONEmoNvCz40ZdzV9vvpNhEhNNqSm5Md5k=\",\"Cv5I8CSK99LzUFdmfnmgjCwr/9giW2IZ2U54XEGnluk=\",\"GY6zI9WxAOiR6TJ/Zh0VhI358uO8LjRpKwxkT/CRtiw=\",\"KcYkVqQwUX/K7PGnUqVdvyRaiMzWZOHIJNphAAkZxF4=\",\"KBemhuWhWokhLf3Paf0V+nO4vwpcXNiTNyp96xjRp/c=\",\"EtQBRAuwMVODDprbNJ2JGuT9gMu+QUJQ2fPC1xRI2T4=\",\"D6GxYMYhKQcVUc/cDThLgYZr2gNBWUdc1RB7kgRLgVc=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"AwRtHZNMylovcDmQfnjNjc27UMXoyrE6eNr87ye6VZc=\",\"LXJKLOln8RFaMqdO589jdgFl/EBWIQCEdts7tls0a0c=\",\"BmhP+8PppyD3rJvpyGfyUyJA/J7SDCFDDiaFq7rmPKA=\",\"HkyqL+D1hekb8BHBdVOW053Lww6Uqkrjzu/Tgf78DUM=\",\"JKlQmQj2sKSu3ERGR9HeFzB42QDSPidwtBBiRHK8/nA=\",\"CkROszHjqdT5gDn22aekVIKthdbp0JF0hrroKlBH9yk=\",\"DKrFUNc5p2mdXavqvTvbXjdEnofwe5XMuC+nQkcbjvQ=\",\"BODGepEfgPk3IM4n1M4oFffE8uXSNMJZ/sv1YvhjEh4=\",\"H/j0dn2uRxwMKkwu9EJ1qvB+HhVZiaXM8eEFN/hg9y0=\",\"L2hj2wbJre7bhHCOO3wJHPRLQlECP+j2vvctYVGedlE=\",\"LniOu1r4cbntXp+rB9p7WBJhCYB+WRXm9U1899x5GZ8=\",\"LNr+WZ5CkJvAR1q9308QpPFN9aLA9Cm++RPO0xXRFvY=\",\"GwpyIl2HlmQLFv7BWljhHUvlqaRz0TN/u0la2TtDL2w=\",\"HLOHopozRbv2zEB6gZWOYf6Y93CPQLuLlnQfcwx+cIE=\",\"Fe+IuiJlJ4DrFLOrJ2wd6nmDYfdjE0TKw+dxoWkQF58=\",\"Jok9EkiVxDoaJx5ypfmcT6n85v+nv2wx5JJqTvuIjmc=\",\"CdxYGSshr49gM72E6fXWlsYC4LtMkk95CyfffbZ1BJo=\",\"HWWfZ+pHIojpQrqoU4ieR0NQVqLaQ5isucoojCQEx/g=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"F4Es5H7UewnPn+0IbndkAQ5wr+9jqAbZiQoMMRP90V0=\",\"BbxEjhdElkTUHvOLdioYPR+cC9b2AItMkCyj/aRdnks=\",\"uPFLrGfs6LH5qWD0Nr/Gp1rlQZRWib94uJ4tdo0bHA==\",\"BuhDrFcR/l51Ua4lUGh1up7vyTVj0V4D8Vu11uMHspQ=\",\"A3xZSKb23N1DePTmIgqW5PwnyP2xAsby/gmIsZmtKGA=\",\"CbtV5ZCLEMynjdrD56iAz0afxBjIsOwOL5YiD83dmD8=\",\"BUmTjuxO8WrZ2JCB8nviosSvSa6RiYiuVXSWW1BvASY=\",\"E7QhW4mvBlLVWY6ymzTKmAyxoetE6v8Og+2LbvXFy3M=\",\"LY9DV3+yZyim8jBeL4aKQpisX0vr+EGfByz3Cbm/aXk=\",\"BYeCqeiGDLG2AxTSsY5DfzbBabU2LgdXWsqAw7vPgkI=\",\"D27ZyowZ6rDFEA59/yoeTQmzwuyeGamqvd+k3kkDy94=\",\"EcO6c0zGB8+qvHPyIMwh8kIqteMdBIGBN3kwkgFaEVA=\",\"HsvleV4PkvVcl4TXaHJxx/HZlHSkyfZvpBYY0XNCZmo=\",\"Ltb6Vag7AUUsnjC5iI3qlUTBDbFDVsrOjc3c2wov0iM=\",\"B5KHrZ22zlTokCli9TQDc1p2+36vL7kuj8fmzsiQiFs=\",\"LiaqXOVsCBUebIRX4MooChzYEX57T+aJUFi5ZIWdc6Q=\",\"Coiah1hKhxeK1LjuIjDrwGMBwIz4QH5jHnHWRnB5rDo=\",\"CcKJEAHyoRnREmZZww9hI/Zb4HG/k3KdKnbZvdQXmM4=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"BR/OJBg9dcTdUGyZt74F8NMmqXJkVzDCp2ur3Yx5kvg=\",\"EJTM9Nv/OQwC33YLeK6DYDSPnOsYcFmv99zBo7XZ6Ms=\",\"LUlmZnuDBmm1/NYyxvPO6QaHNB9RZTrsnwIUq120qEc=\",\"G2558LAD4xO+X8YRFV1DItHFbyKVe9IBpFtThUKRASw=\",\"DJ1+9weEzBU/GjJQMdu426xYYl3HYQ/UU8F8+N7jtIk=\",\"LqujHSrUsClI6nbtTZMdWkJoOtue3rVk0GU2MZDnZuo=\",\"Ova/nH6u3qvgc0h1CZN81zsAqPpa7szY1Km5zMoWZg==\",\"JNTCEW+vabmchOOJQT9xDO8Q3lzYfAQWacpRwh87Yxg=\",\"H1yr1L0ilI4sXNl1+S/QhQcxMB5ikfzjZNf12VEVews=\",\"Ayqq28Hez27PM7B062P1/XW8+UryYe07deBJ1j28Zu4=\",\"GUgweZRk+O5wLXLkGsOso8SrQZsCQoYFsAgplIogF1I=\",\"Goi/dbVcCXaBtsB/6uyupafnqEwtm1STgcUcmwy2RTI=\",\"LHlpBj0fyXqNBjBJY3ymumOmzdkgC5XB/xyUHDkLieE=\",\"B5oKvZuklcWFn/bhDOOTtQyfBL2SqSYewe9/mfd+Rs0=\",\"Cvj36fPqyeboK8lW3XxTvfkScsx66VXXNMj5xqTnOF8=\",\"AfRdaHIjQzRELwjJm84pLAidPzT0djQZ0CyhTyTEsbg=\",\"A6Sp2ZKGsXUtbLc1uc0Pon1PG48KFSHRjRUX9hSLZ3o=\",\"GUhOYRgHAOk2meoqfWSBSEHPEVNUgNveg/aTb1q2j7E=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"BoEX8Rt/jXNq95qyrjMo5XapXRK2N7lEzf+bV1hJmRU=\",\"EYpQTXfMSdIs9FSnyz2a6ASe/pRHp4IBRo6QzldtqHI=\",\"HiHs1HPD3qzyWkleu0MBCSASUpOBtS4NEob6yJjjw3A=\",\"Lji2X6sOobgVJ3MgX4055rgZdkJtDWTPSMuu6BgY7lY=\",\"GUFOtV4rJxfir/5PalIKh5d+k4MZubSdAts3NGm/bMs=\",\"AfBLMCatyfLwmVYx1O6DrTkQ+rq+TnjciyEenHIITOQ=\",\"DBzuWsgrC6SshXjJNMQVoPKlC8dSHSBYhTsKWUFfb3I=\",\"GguGvjugw35fy6T48z0K8zM8w7+3SqJi09SEy9YPv7k=\",\"Anf01GW0o/lQWSkHtlHFrabbrUP3rQ39uqS1wO2+x+Q=\",\"LLyEhfllQv4illp7t2jPz3n0zqhFzXDqrA9sOD9UL9U=\",\"E7MG/UOsrHJWc9KG+6viScuppRlKayBilTt1FJ8CzRk=\",\"GbtxWxXuEcP5c+6iZWMAwA1tlldsNySwcPOKdkzVit0=\",\"JXnBu65IqL+cQ95pVXTn1FdsLHM1ixjdFaFnNSj6TSE=\",\"KbtzJyZpjT6YdFNUvu1VraYZoNDluNBcwp8M4b7fAb8=\",\"EBuKly2o53f3TGj8SBw38LmZ7w3zyQtlBasqZSfJXXc=\",\"KNKCtKgOgHkoetYiSXMWR7NiIb6DbCRukXbG4kNiNgI=\",\"Aw9akdS9OnoAzPuTZhmknJyuB/3QLV9ygerV7HZaXGg=\",\"AjrrjWdcyFIJpPR9fOk3TG3RvcNMrt2UegWDb484gMs=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"E+/it/zyKxPd41YykCLBDK+U0KZ+RIAgzfcKKhusLeQ=\",\"IBFtigjvVYokfG9flDqYLZS2PooVgMgaBJrmLbdVDY8=\",\"LQgq5BQtnPADgwZ2ZSYRGPwgtB3V44RNldKD7pNf2c4=\",\"EDUgoM82zZdvIkMknSXXS9EbSvrXBQUbKPVnfncm1fc=\",\"HoIPfbOLJKBrvD38eMR9BAyd/32LoBYLUixjE8EHhS4=\",\"AnWDKuHxzYYQLdlop25X09+VtcHLse8o3Tj6K+90new=\",\"Ds5m7BBKOSzX0eWhHxbKx4mViO5fUjuT93m4D1buQqI=\",\"F0WG5dAS8XJDm01Dfljf2cWOfSntZZp0cfC4AVHezlw=\",\"DMF7T4ccuRvWOSQJjFS+J0SjEx2KmtIbGlUGnwBbo10=\",\"JOZhGtRBgwt/yIQU1JAr+pBD5gkzptG6bhLWeVw8Gzc=\",\"CTkvSA30AnW51jndlfih4KYvs7FitB79tWJckBVf06U=\",\"Gf0YpqadLpMn+0j8zW4FSTlbLJNirxUtnX6ZAcaBVO0=\",\"F0vUfrDQbcxfUSGwS8PGHgKiYu88d/EcVIuPJYDmZP8=\",\"G+WHcDLCDfbXmOi/Jl/lEXOdudmxBCsqmEOiYctaU8I=\",\"Jj/f8K7QJuO4ZU4nEdziqr3IG/RGlfCmaU7CkXQ5KqI=\",\"H3HHHrb2g9e4UW995bXw678KWBB3/eVoQ8Dfr/gKytA=\",\"EVuZiWN5SmxQTdZeG32Z/0zP4ksERitXiMzjKGHu7WE=\",\"F/Q9umTB64G+lu1kHPeAGzpFxhTMuF2qFKgVPU5X5to=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"HhwZ4FAhIIrD/f4tPxFsjnLd1g+1UwAFZWaD9Si65ic=\",\"JZb6KpfqaQXFmMZKJXaPpb3lBOowBHBa2hKfk27ZRuo=\",\"BCm+BjscaoXoSGJ85L22WOsUj4mIewjkaZ834cTWOIg=\",\"JXHNNnG7e9e1LMGeIpFXLk3Y+NB34pWiKQfRXOwElkM=\",\"Aj4u369x+zeW2fAL1hjUjfVFTm7bkaUJ0XPEMWaMSUw=\",\"GptNtwqnzQTjOhDF9BiLe3VG3bS0IVYRllGUyux9lhw=\",\"ARXQ8nsXfRusKWC7AP6zvkJ+TgGE+PYyTQoG+0euI2Y=\",\"JBWJWKaVh/HBVRJVIEViDx/hVpyfPjZo7Qbf+/CnNoY=\",\"HGdh3eeGONc0656xobM6mM7376QlX8NmK65wMYLAH7g=\",\"J1DY6t5NrpcyjGCmRf08hDHZaudIKoGLCuO0zEa5vcg=\",\"H9Mrgty+uMBI6SacLlMAL2t/rROqc384amzfweLFqeY=\",\"BZT8Wf4l0kslRcZlB5XO6Low0q4E3Qe11nawid2++pw=\",\"DISrd+ivC6LaYcVbU881NOdmc1dAg2qsJCdYf76lyL0=\",\"BTy5dmLzi7S0S5WNTsAvjCX8x5WWm/sHnmZLh875Pf8=\",\"FgPKCBbdq6TO+YUxhM06lNbIgbc9LW2JPbiKSMPeNEc=\",\"GOqN2aJ8pEEKQLyL7NC21CM4iBrEwxo7p8qkDNG1YTE=\",\"GlJ3SL3wBXcjyGrL5JCUkNPiQVZHqC8UYaQvMpa/TAc=\",\"FBdfkcDduCNUOgFn/6t72MUCcwkK6tgB2jCyX0VQWEo=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"Jfkyukr4SuQ7pSkeYEz4yl/SCP0Wt4w46rxXKGKY1Vc=\",\"JUddfWSfi/8mMNl4RL3A/o3277ibrsdeWrm9uid31DE=\",\"CJ8WVbadKEUNBcnfxhAwXUanfc1Q6vKAQuvIeMrzDVw=\",\"EjmAx8+FOLlpQhNZWaSvFwirqGbLoQXh9aOC6btqreQ=\",\"B4zCGa5z4uy0Al0ODZDPCfgvlIpjJD3cBihysQcLazA=\",\"DNogo2hNeaLhgHj+oyYWUKLMohP3BbVu66KUnKIDuBY=\",\"IbnGbRGQ/y3bMNsyLKJQjSMfeq+Pf19blbwXEaZy6ms=\",\"AiAWdBr8LR7pVJzkt0MYvvKTuystZJXUJM33AAYNyBM=\",\"DXIpArdVzRbHl3JHyygGimFq3qoTwAseL/YoyJK9xtQ=\",\"IXeTpT0KwodR4/2oyv8/gAOwhMR04kWM2jAzDjOOIsM=\",\"LTHgxuMR8yew54DykageJa69lmBkiw/1H+iFHSlnHP0=\",\"IW0UIR3prtdyAGAu14yqZloxDuA/r7W5k927WuIjD4M=\",\"JoHCSlZ1m3fV4Kev030oauNCJ0VWT9wV0l4N0VjJ9OQ=\",\"Hjtu2tP8vZ2ZHDT15Ng4+3bCVVQtJ/gtWJiZErW8fdI=\",\"Lu+3tesmWqYQxDVvIoLdkqA3RKG4SE3tsRUyHfdRjC8=\",\"BahIs1qOJwIkJC9SaGz3hdnxHsO60nUpwC9kSKQy7EE=\",\"Cf94IEjJ2aqGkO1wfoIWStMg4dr2RqOzBCHwPc93JCM=\",\"KylN5EZ1JvSRSvj5iVkDEk8qkSScI+jQEqBOO2/v1QQ=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"J9RPE9Zqd6ZF+JX/gh3c+MztjIr5hNu4z4K4RlOl2xA=\",\"DlDHLaNsGpaBAu3zDGuBB5XUHOQcSXgwKM0IMKzDfJg=\",\"AjQa6sgx+YmshKANEnwICfvABASVrXfh0fWJzr4SCQQ=\",\"IHH69ulvtc1EALbFjrT/XlJ799lJIYC8L0U0zQrgZ58=\",\"FNou1OF1zAlajWisbn+eLXAugrF5EgSSG8SAaxV74C8=\",\"DGIyx+hOo1QAvcD3uNDNIR+1GG3x/o6Se8Uc4CR9E80=\",\"H2XEVj6fYe1/fy6z/tzeWBrTtmDFB5wW592wU/rMU5Y=\",\"FEZ19MVLwz4b16q+hoXHQHOM8ceJHFxlmwfGKB/Geo0=\",\"FOziw8R+BDXLsBnbRwjvbJBLSvl11ymg/NdeZav3RKs=\",\"EY+THpBP/95rpOIusEKb6FeBn5/WTxJzJTs/FS+hiw4=\",\"C63k+WbVI+RlbESFSYLUVGq/4vXewgOkXMRj2hCTzgk=\",\"F4PJTzfW2QV6HC544ND3jv6xYaFNwhB6IWYYKfE10iY=\",\"Der//9D+sgnAB5Pl+AB2G1QZ2HJfTIgobqsiQWDsQ/E=\",\"CHRqcvtkws3B7xRhPLU1kROUopyALUpqlM/vhEYQxgk=\",\"BIgnEf2cVQj90KHsWioIELk6bPzkQaGSBHqCf1jdstM=\",\"8rc40+s7gDvKMlNHt6+VTMEEkoMkeRg4CLOupyQ1wg==\",\"K11eugDgniG9kgLXLlMwY2Fgjt3JUawfCKU9w7xulVw=\",\"FtlueKYHhDdAS1vyGqzVpD0j3dW8IXJBKtNjkLPORRI=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"L2/VKyWpSF3yh4WZvjSAhRfV7tbB2Dzkl+Gp6o0cOEQ=\",\"Lw3Axh8RpT1Bmz+4BfwtR2g3xTwcmQxm/RU57J0uTkQ=\",\"GwBKtR93OIxCdFMmPqYAeSpr5Zfm9zZQnC2+h9SimLE=\",\"CmkHie+RUFOi7RKqkKhiE0Aze8rlJROcnhq5c+G/iIE=\",\"DJJRccdDHazjYmt+UDbfpiK8CHR/6EnWpq5cgxFD0QQ=\",\"An4qNVvNrplAX805rCW5/+dzrlsO2ah6nkcHFf4rwnE=\",\"DUTNVvAhAigoHhFiYLyKq/ZPoHAWAemHgfvGsU+uqe0=\",\"HujZ8pUAgFcalgXHtFTDSA5kh2rSeJEkG49i1x1uv9w=\",\"E+3wmuit2/hR4A15/ouZAne0Mdcs4Nm0i1XjCVtIO/s=\",\"AdLH86RNy+0ED+X12r1JBkYiw0r2jFtK/s9jH9mY3pM=\",\"F+BPtfScEqapG+wRNwjZQ83HdOZMbsQxvb2jpsHA9Xo=\",\"Idnb1oxUzbLqi+r33jGvrRzUBMR4xi6PWWU4lZCaGLo=\",\"J2lQxfbES6yu5o/ZTxSkSgegAzUVsQp2IDqysSvWBEA=\",\"LKWxKo/27gFWZQ72czOgf/CLFWRUiXs3BzTEuYl3xtA=\",\"Ajef4/53tQX1+tWcyT9f7XYk6Z9TWcMNVu/NCRVGBmg=\",\"EOeQyz9r5RwLT9f24pUZv5vshCrG4Pb1WE1cwUMbXFY=\",\"IKlFZxWNxfeyHLA1jf1vz3Wr3YBrFQu071V1ZwHVaOw=\",\"GRpqgrd0FdmjBckLgYnpOtnZFaQRpUTQ/QkKFXET1Vc=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"LOKom0xR+XFmxq20NJGojCSjJ2EQBVoN6siPfnH5drE=\",\"6FJC7+a3gIfm92SVx774KLq3d2s7b1tK53uaPYVJMw==\",\"CSZU3Pnmn8LaOUE5uvsFkrTK4k0A40mBvdzUsIndlIo=\",\"FS01Fmo+kAyonVj72+mcrzvbH5hN6ujgLPcD3VXnim0=\",\"JQFZthxeVFvvrtYqNJzQDh/NPqWI8p6tXetnWgEB2TY=\",\"HmZEJ1PI2VGIu59ZutF6arkBjwUs6OHeWHkLWbxM18c=\",\"GpGWVYbbFWzA1P4III6nYgMOOQvEmENdOgTUG5XoVMw=\",\"IF0i/4D/0jBg7hrrUFDHCaY6TqughH/1hxcdt9nvJ/g=\",\"DpLh5UvFnmQqd7UzPduy4VWUoZVqPtDiYF2/5M0p3Z0=\",\"7LOdX7QtwtwvK3TBPiQweh875n81q3mwrJdOr0oMQQ==\",\"B3rrrhGGNdWg4BYN9JYfPFt5aIfYeN3NJoj+HWGBUOw=\",\"LQ224utDhtEKNxkUgDhSPrx7r2bcU4gYsLXYQwAuB7s=\",\"HcfjhJ3POaWap6h+8SKvsJAJru6jfb3vboUOV+o39gQ=\",\"CXVZgV07YsKAVgleOcixqONmu4qkKvhfZz5FJz0K4e4=\",\"B+CPzppRIcIYipblkbkrlY2lIHeKwLyme1naKzsG8Po=\",\"49WP20VDlJlX6jO9A+Orv7EJoWkd5mlkGdSxIH9ULA==\",\"DJkf5DgY6jBtO3doR9FPQBm8ogcNIA4Hc1xi2jGjE44=\",\"CuwWu431QZCPEd9qZMZ2GDx2v8r3dIxQPWCZrLs/Kpw=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"CFtyZTVOiDKYyuyhdhzRnixcIRmzbDfW9dZmuo7L8Z8=\",\"ENfV5nBCk5q51e7U1SDD/ggfnvl7Pqj3/+xdXhiJ4DE=\",\"HPrB8It7wWp0gt7eHWJKhjfv8sb1s45fvtpva8XOptg=\",\"BrECdDBcFemtt/f+fNu0BxweSWjkbkYcZkKoYdDuaP4=\",\"LPQBvhwyyVzeTr/GXLvqnAn5YyI5sxT1OsxjvzfYalY=\",\"L9DJ66zQMli/tomnpwDUOx/sQisiKZ1z5HiAHZUzo2o=\",\"BOwhtEwhxsNYeJ+StdEmWX4bYPBQUJdbkkzXBCCH5jA=\",\"LUITBYGhm+JIj5jERz6AURwnW+efUHfbQLdLQ4getNs=\",\"Dfc76LZOBF+ILt7k8X6dosXyWyhZ6QRZWEStzz349/M=\",\"AbBRAbMsor4oN2JL0B9DerzUPPbEtWEFLg5t89Xw7jk=\",\"CKT0Ls7G9iZCfOEWsg80BYmHWdBTEJGoeTZCepnVyRk=\",\"Bn60o1FNRdfmRo+Fp6YG64Y5W+97IwGPJeEz90Fs/mU=\",\"MDfCIRKWT289jkpgfx817lYtUF5KIv3yS0HmwD5QZ4U=\",\"I8R0XAleWXDawWYya4dd9S2U2wyUVrWvtVB32SmWqLY=\",\"EsqFsUL10tLYe0S08ZCBCwou8cu5b/tD/kCUrAu0UPQ=\",\"JiUB8+AualyVv88RdJkXsiEl/30C7N/a36N0pFFzxmI=\",\"LD7ADbnI5EqvlOqZ2uUvdojGY/C0LRhvwdAwgTpMobQ=\",\"EgqlA1bFRlPrU5mxAbrB7rjXKGJoAAA/iFihg8wTIPU=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"C2wd09La2seWcspp4nLk3t6bK8us5dEtsV/WyFW8x/M=\",\"HcXPtx+cn/CIhoZrknBQTDML/+2Afl9giDmv1JvviWE=\",\"K6nBb0lzTzu/mClmKfKhpObRsQBjGTIGUo6jmxGGnM4=\",\"IcN85hLhsNX8sCceIPJ8Bi3YHyyO+r6Sxz9U2Hrsopk=\",\"KcopxXpRb4AAYVC6VG0zKs6VhU09u7nOtXqA8iH0W3U=\",\"CWROhPcnYE1i8td8LVwYl/i5DzYnQKjG7vJe2JjhjtI=\",\"GEiKieeFBagH/8ooJVXxF7xxv7u5RD19BuMGDZeYcoo=\",\"AX+ZpJq94nx02P5Ru8CiI1kRIcucDv2zKm70u7yXYEk=\",\"EQaTb+TZHK2dwAr4uF+N/cqSmKxCB3iKR8l+vVrayao=\",\"CxkhPyTxPdQ9YgxtT+d1dOO6ZoB9YG+WBVrwY0SpU80=\",\"KE+3nUtb3rgjsKfpNWY4BznC3d5vLByxAvSROJr4hgE=\",\"K+6BIqrrUT9c1HVG8VCQzGcw450o3wip708HJtxpodQ=\",\"EJcStDhfnRlBvI7Uy+4G/s44N5+WJoH/H0nyx1d6rwE=\",\"HO6NvJ58IuqoFaq0VHBbLCthzPVrzFGB2OuazQiktwg=\",\"Ej+YaNfr09fFdqefS7Pw9vhGaqUMZCsrj7KTiyUzrLY=\",\"DA+7X5b3lfhw16Sv+pYasKgKlfmBTyIx3rvic1IIjFo=\",\"A7JozD46rSLU+OXtvXxReeIZIBumKYfjtKWqSEowxlE=\",\"Lj/1gjEPsUSTMMDf7RKRVNL4rsOHHS1ZO3OSanDY5fE=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"GLDQaf0Zp6x3dus5/WB8db2GCjsvoX+Q8cAWiB66BC8=\",\"Evded3HV0nxmzivxDMPj1tVC89OfGEfi+nJjhqyDwo4=\",\"EHsEFVp9nBiB3vBb4Xl9vIAYvrj638mTXlaeLyoqpHQ=\",\"AXMYu8lqNZQ4JibHlcyYbdd6gamDvwvNyapZ5tcaWQ==\",\"Eyl0xPr99iHx+txF2u+b/lqSobWdMwVkSKElriZU0gs=\",\"JYU46oepYnaQaAN95i/dJy6reb/WhIn7vUeKfLcuBo0=\",\"LLEgHHan+hX3m5um6iYdF+C2LCZDcJ4PmEyTfEIRXiw=\",\"LmXP6RvdScZj2HSfM1F2q69jd/WC1ISE9nSOJMyBZkc=\",\"LNPXY/6Z8bZifmNSuVq1SJ0ZHQ5dQd8HgQ/XxSudsmw=\",\"J7xKXqKmYXJlAobL6k/wLuGGnoVO1PzCcMhnmjjMjvc=\",\"CI/1eWKO+tQZ1UBwwQ9Xt+aTSK6WrQ/Wi12q8wPulto=\",\"HLQ5KOWO+yTuIUzhfSl1L9zjFgX+UXYJpg+NLts6xso=\",\"Hcv3kQmnGTt1/Ya4LBWQsxq7iZ0PxdqR5D/pzvvkWko=\",\"J1je6NwwOUu/MKQSxt/9scezwViPSpPpYg24AmXhKMM=\",\"GNHPSmyEguxzMK8Or7Zv3S5Cid37YcNvdv6Hw2SKr+M=\",\"JIVZfP31YPNOEZiciBeZzrFBQ+DVxN4g7kpAeQTPHgU=\",\"BhUfKrAzeCq8e/06rsR92cQoaBrPMtdF430L5GQqp2Q=\",\"BtLl75UPZ5wBld/aOWbtjy20zN6lc5cxYnwBKkU6nZk=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"AtMTj9y642AEtx9Hr6DsCSsyjSIF1JUrR+nJDyhnh9k=\",\"HI4XjZP5P5zFaxPENxKNqzFFY2Db4kFe3DFt0KTO9Xk=\",\"AlvqIka/lRa2/WKZQH1ze0RcxuLxWM1ZRMGUhSzDKVY=\",\"D/3Us7crs0CJ87kRcPrgplYO+9I61cdr6l6M5Gt8nzs=\",\"B8YiQY3b+ZumXY/+YpbzkHwVidTqIIcDS82h98UiGPU=\",\"Fw29vJJ9IhPfUeko0SiPG7mJy8B0U3z2RIW1/wWrjwo=\",\"BhEf07N16y/lBJh67lgM/RrPx8Oct6kXGt7aq/omVqI=\",\"JbcGqFDuFywD2YqKGgTexW0mTQfXmVp707UJlvVS+eo=\",\"ATpbK7zP7ZxcX4Rklt+DLosxZhBKGDKZuHzy4N//iWQ=\",\"JWt7VjXyX1BgCRYvCeKurJokoi0ZTbCYfp4Blr+AXuI=\",\"Cg2R/yXLwu86ZnR1+RKZ7meb/85Ozo6t864OhnE+bEw=\",\"H3maXyqf4oRtj8vp/vQATyqrLPvYOASGmFeH+egvc5w=\",\"CPil04mCyMnroa+y1GPZuHy0EgZCcabXIYI7p2sTeGs=\",\"E/L5pXH2HHW0SF2fP3TYQiLx0yWPVEbpr7nYK7zNXFs=\",\"GtoFAge/Iyt3rwRFzTrSSsKFajLfE1RiwZa3GKTigY8=\",\"InDJe/7b47VLyr9d8bYP7iDPqLHdqLpMgytYDXGTDFk=\",\"F+Qph52lE5DhJTWSE032/A5hSWVhQrqs6JGlrAs9ytM=\",\"AsoaA+hrjo0s3DL5mKmirj1gQQTa2BzkTXtwt9LBR7E=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"F56cxc6Bw7lXRplooB2PQVXR+rQ1Zoku/rSqyOcwvR8=\",\"JFQ24iLxjwqVxe39vnC+s87gu+Q1fArSfsY3uCdr4Qs=\",\"EggpleUA3eKo9ePbA8+wj+8ucXxZU2tqSKdX/ol68Lc=\",\"Ae01Gna+flYL44cp9MIh1S4bLmscmpkGkl2df8ZZryk=\",\"Is6gUgvBaRBoKS0TIKuETE/2Qb0PP4s7zk5QtTAtQpE=\",\"ENjO+iC99k9oD59l4vfxGBSFdDhJEl7lAJu1NfvWc3s=\",\"B82G8vNzOQeyiT6BL1NnZrRcdZBRa44NqCCvVj3lBT0=\",\"GPfiuO1+ocfM8GdaWIdHQJ/9xeDZob2AtUv0eDO6Q94=\",\"Ea1lqqFDV9E3Iy7j4kYKZTEL/rpEdZBYDRZagLuHusU=\",\"FJ3e/5aN0+SHOoj4KqsiUuQkk01izs6/PAXgQQEjLG0=\",\"IW5IedvrE2rc0uL5x50aiZEj7IkhUx/Rno89t2npuac=\",\"CzL/3JO6ieeYA1SWqg8OXzUXNCDZYF31wpF2ucj+qcs=\",\"EAWXh+S3uRSRytiela9kgZeqtle+8DRyJKr+ob1w8Pg=\",\"Ef6vu20wq6mQX8RrLPqL1aHNZoXDQRkk9lIAP5jOYfA=\",\"GHN/G47WRPzSAxgvn3HsYG3+VyKEgxnrBq3boIYhksI=\",\"DblkUbJbwiEcMVyUtzlggP69Ey5IiDulvnxjUkVLJTE=\",\"FKEsiGjGmYx3l1+4BYjcUBIcs/6QcBefSP8IbdtEy+w=\",\"Bk92masBXRRmzlug/YqSUxxZLrkQEeAk46kN2g0408Q=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"JzcNSOCE4TK/8uOvD5H3h6lkjr1P5828HO3sJsEc/ws=\",\"Fvk4X57fo9zHwGuU7SwNhglFFjTbWk5uGZfMFE4UFf0=\",\"FIuyy5FFUusc51W+2lnnhFQdMbC5dDwQ59bXmK/P99U=\",\"LpGBOIteuTAke7O/A2razjBJaIfD/l5RoIUBpXg013g=\",\"BF456nJ+T/JUuiWT9pj3no5LT1ONGyY5ErqfDVcqju0=\",\"EXTxE1liiCDvqjzKH18Zl09HX9mJaSkRp91ZdU34alk=\",\"LtLOZbKumrPlwzNm5Q5/miYish30Czjm8GBuu9Y5kUM=\",\"FKkC5IO3c71Z0pjDFrp5xKu2v25iUxJnL8UprS4TNK8=\",\"Hmj3vVEwzrEdBrgHWy2l/QnF4kAf2BbM9eaxTzzne04=\",\"Apgny3pw/wCVBQZ40Z8u7GmUwtuarCDCMoAps3zB2U4=\",\"GLZ64gbJGwkH3VyxRDDS0At8oQOCz8RkyUUazLZLPaE=\",\"G6ucU4tw+7JHEsnJ/LJQsnJROBMfyIh90xwO4Q14Uw==\",\"G7iIcj/gQwT/VqfBqqKhPtu4xtm4TJXDTPqjLETLGOc=\",\"Fbk4xYiNRnMPDvuS84Ke5Tr8m0ubPipYcpwx8hwHgIU=\",\"DlZmjV4YtZ7Yr7nztm8Duw2NC+SbL/DuTPBYAqaECi4=\",\"KG2JDJ4LANxaMYWzEtYfhhk19M8jAmfdFHhD0IXLmBQ=\",\"AWmzZ7G1tDLT5fEzdLtG/uh+vdrlJ0WWm02As3GlKYQ=\",\"JhYGGYGhJ/H5BRfQDGfM9TfmoeYPduLBjOyltP3Tmsk=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"JQXTxOsBqtPjdZFWQQln/LEwn5AoEz8yth/o3KBecDk=\",\"BlgtpHzYXADU4ximFmmv6OGWnSxIbnbr4BlovCEwJBg=\",\"BBuJedJp9uworBhMWy8Cr1jCY1HGzZQ87GrfI2nNseU=\",\"FEPVOr6BqyWcu+BJTpjd29goTBFFMhwv4ksP5nLPkRU=\",\"B4N3vbJXAACWXCUFmXYUuZ5q/7Y9D4rB2JCf/IwreCY=\",\"ITQ2IsuHR1Pw0sNWM+eHfG8vNSR/CAobDvcBJyFXknE=\",\"JyboZMI7q0ZqTi6cHmyQvMzmEUox9Cg7ioe+Pu+9rAI=\",\"CMPLeXnlGiUJK442Z7WraWMnzt8dsldTcHGnGNeko0c=\",\"Dq3H8HNYY65j9tOi2YDMoUPdvJQgMHWxqTQftStU57Y=\",\"MCczaY7f5HbOE2DZ3YiF4vrEjxD9m2qklMzIRmMBYHE=\",\"A5DRNew/sMxr67T/11VAYWnUtxq1We38PQPaJzn5nDU=\",\"KYFLhVrnWYX4xaZHU4O9cB5SedQwrKUdh2cWFKLuw38=\",\"HIJxvNQCyETVl0b7uMgJJlJHF3sXX8kpEB3nP3QXCdU=\",\"LqevWv9MgzWkVWseYhw/t25QcTKXGkRSY112MQwkGZA=\",\"A3WMNyLLdksO7ycPtFxsdrnQOBaw/q6HmjQ2/cm6Krw=\",\"ISLpqHophBIWocHl3MAjY+sRhe3Gj27v2zj8Q0VLWI8=\",\"LlEyoK7WSTFMZmXVGSanoVvdahpcb1E0+vltUsqt0UA=\",\"qspbeqJ4Ed6jN2r5/vDNgnXo+Y4jXbg6sTYbTEmoNA==\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"IDiYuSuz+DRPIg6fB5Crd6zWabODER4wD92U1WDrZho=\",\"HVXtz62kzeggk+MGqKhecD5w1i93+DqkFYx64GVY4sM=\",\"HFfsIRUu8b7KrEgros0orc6bzmhDSykac9r606Kkqxo=\",\"LHf3X/aFfTncXg7ebum2V0dk5M6z0iNar6+djClr0fo=\",\"JkAkxXGuJC9TClk63kd3jgTeT6/BmY0EGWs/jcRmtnI=\",\"EjoXSWvcHS7OfuCrFjK0PCeDKAVrhgnuv8dt53eA6LM=\",\"FdgGyox6fHJ+Au066xIQRT1NOcw/LRiPQhtYt/ubX+c=\",\"ApOP7yJQNHL/3no2sExLNrY5BkrrnXf96/91boLtjm8=\",\"HVvRmywFdl48S4N4G00AN/7Je9opLjFnACWHBR79BEU=\",\"BaXqdhLYLbvs0DEgLFUDq3PPWsDs7v6oHKRWl61d+64=\",\"Hf8bsgLppxKH2ZmkQ2q4EpjkTa3tkZhNZCJHcmbaT6Q=\",\"GmXwGoNcxt8I/hFo743HLgTzyEvEEp2LHFfHBV/VKNw=\",\"DGv+vvVCzXi0R4b4ZTF9OEpk/6veUvalvCn0BdPkXEk=\",\"CgalXtj1IkaUS6nhs1Gw8E6V6OPIAzf3v0xMs2gsy+E=\",\"I3rwtQbwGF/IFFEUS988zfe2bL4a134s5CEvYtYnEAY=\",\"HWtCHzFDpWDlBm7KaeaTnBPLL7Irzb+5bo1Vr3bQp/s=\",\"HqTNxI7rh73HDgNKDuHOaZ6UtbESZ3bzv6Q8L6y8rxI=\",\"DP4bgt3oxetQBAP13e32FlEGsoxwzZQfG2XklyUzW2g=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"EM1STYL+BbowfdOquWqDj2sfuY4Q4oTMyPiyuVhaZHo=\",\"KQafihAtX9XbI+HoG0KGdiD2r35ks290RBdqn+uvmho=\",\"MCHdQQBOwxVwSo13qxLJPYmjurozBmbPi5bMgELu8bY=\",\"Fz2+jyXH+n67KFeOD9MQP9qDVQfYtT2QUYl1fWY461A=\",\"Hsfctf1CEP8DYfRLSPSBjfzig9y6ujXJbXfsmIj0Nxg=\",\"DlLesNpZtfkkl+C6aio1g0Ko1zHOL4wZyN+dWOzYGNc=\",\"B3J2oqs8D61pczrR/VPKFINQundoG2vJigzFK+0+5nE=\",\"DmKYbIYNdaRQLO6NfYkyt8d6kzDEsIhM1xUjg88hMB0=\",\"GXfkq073LQYxdJaQXWzeRnpCT4L3SRreiLcCdkXAVgA=\",\"Dl/IblpKpYl6ZlN2Ck5yVV8P953nfU3p9aog21r7xlw=\",\"EzwIDFdCbFCuJPvkFF7K0gG5ZPoSq99+0WukW7dsDVY=\",\"CYCfDZQEaE6RdUVl5O1xS0hTst/inkSu1N899jL5Zkw=\",\"C56irZ63Tfie+PMTIkWu4PDQs8kZdaynZgBxqAZrn8w=\",\"K7a7tLj5AR5hZ879ZLtIdPZSen6s2qEO9ANHTjMoJOs=\",\"DnUF9ddKFok0I06Kg7L9JnvM/U5sed1k+wJCaNugPqE=\",\"CpbpqrbTfp0aTT4Ow3XtFs8gH3vwfS22bEPUj33QbS4=\",\"GRCan2y6o3hHXBrnCtedL4MQCzNlO5oWvYTM4+ZRYW8=\",\"JFXRTfxONPiy8MQRcixm7GJsFyf8aVq9HISXgL10ag0=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"JyD6NbdlAPKs7//X6/MxwX2WpAC0CEt4JT4yhPlC+FU=\",\"CvivBZBPQ4lbXpI28Xgv9DOM35C5YqOsDQhoEq5ijL4=\",\"JfV8g+TRgxgpB40X6YU31W48PKFjGPJ5K3GgcFWxH40=\",\"EiJ1kD580EGebIFZCf1rZV7w81FvnJdn73x+s9jyJGU=\",\"INoqP7Gty6KSRrsZ4W7DqfUau9WarfMHN/+SuO/GHuA=\",\"GULvUGwUXZsV7kMSEuG+e8KGG0nn5oxqydzuQDRHSaI=\",\"KchigIfPgZfIU4My1vAlO/pGSAJEujHjDSNwQCL1WhM=\",\"I+wIcMxEYPqmh1OBebu585WhcVGV6GprtSQNVHfvMZM=\",\"Ig6WSCEsYlABcGXYYYi5YS9z+QOYA70ym6cECp5T8U4=\",\"HkJDCd+xoAJA9N2g5N286PT/SlcBf+iI54eQ57zm6Sw=\",\"Itwgs5mXuhtAKIyqvZ39Pp+dxP17zZ/REHm9YCov5TU=\",\"IidRhiJZAcEaZaU+ConxmVQfwSErTpaqe9PFv4datS8=\",\"F62GjxzlFiedjVD9gJocQOeAEEGMeqTuagn5tSOipho=\",\"J9/yg5a+8oc8RJZLM7MORLJ6j8HQigkXXxzJZBWENZo=\",\"CQIuEnLpfpqjJjS8O/wQIkou7RYbm2DxAVlfjfIHz/g=\",\"EOHxYCz8MNxKs5IL5B7H2vW749ltq1aK6vvDUMXuk0o=\",\"GxqmsnnCpfyN2aYiiRv0h4qu1xIv3e7AogvPL52oaLg=\",\"KDuG2Mv9vJE//ThJpecPkrafX3kXoEAduS9vHqEe8tc=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"DSGJesPZueO+nl0YLRygRByzuSd234eYNipLtANapCQ=\",\"ILPU2xjdbePvs1nI5gyG8dIcIOep8dvmfEUF7no73Wc=\",\"J9ufSUqnjBGe+DWKixIvSu2HFS+SORrJ0Yf5zssHI30=\",\"IDpCvGhTFvY/5hyRRqdCZSX/91j8YlVA2a16VgLGzag=\",\"AnhghssHpehKe7VRaBigE5+7sziBzSiaNtVd2jNPDdU=\",\"FxlxhPiT0ZR1c3vXICRH5e84XStfCl51Uzy76mHn15E=\",\"BQXQ6DxrW9C6faUFlon49EiycyHCOrTaJz23fJVNVeA=\",\"AWc5PKdIzFPrwa4Hso7Go6Lw1BE7S9MCzsfAs5ikhxU=\",\"DUeTOKtY/IN8kZfAwcWj7FFcxSoamy1Ct6MTTy+hOFk=\",\"IcJCPdTJ/R0YPeVhlEL5H/2ogBQ+Q/Frv9QoBvpsdBc=\",\"LPSAYS21LcPLzQ+2MKB6kuLqWUMEdjUJRQvy0ZmizFU=\",\"Bx+CGkJuIrmiDPyZfyZsWnqbtSH2pzU+JdwWOjXAdSI=\",\"FGH4/jj0p2C09NCbUeahJtTF6epSnrGMfJTPrdHtRfo=\",\"E1fQJxxHm12/7ko8sU3c7djPUDZaMRZsVGKsrgtys4w=\",\"KzKMDYC46Bod5YBEIrRU8BmUf0zBZ0dq5awUhiGBq9o=\",\"LjtUCs4kl43t3lBbQsm/q4iK4I1EI2JEkBLggGiRuTs=\",\"HOTDGW6kTWoqrO+HVgzB311lJSfwCSTFmKvOs/qfrgE=\",\"KFHWiMksGEx5wY0G49gO9DkHRoY5el6/CAAATtELcV0=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"GWY39zc0E/w3s6wxi5aVkP8L4xztBRPcomomPV3ZZdk=\",\"F02TqUe0tz1oel67Wk/ax6/OHZw0r0/rf/xBviqiEK0=\",\"GoRJR2VOhox+5oarGKIiRjlzneet5QNTDxnidD82QPo=\",\"LKKQaum1KMD/Tj4yV8jTGfjBNo63OoCrJs3xzhXNSX0=\",\"CpStkuQzZsuns9uFywC3uVDx0iHwVkLLpNlRmmr8mhs=\",\"IrvAo9LBzyyFVhFneeq3EQ6okvMt+wuh217TjG/eF6k=\",\"HgSraw3RG2w/WcKbtv1iczFh10qZUnlOriPfk1RUNX0=\",\"Ip8+j2r9uiGNlIrrU5eHFw9Og2ruh0EjaYxH/PN8F1o=\",\"CZXLZBcvgiDWQgMKIfHVJcOXJHONWAVNjLashKFq7AM=\",\"ErhmO446a82eLX0zTIjA/TFRF9sgUnk6fCQ0d277g1g=\",\"DjBuR7yRf6fjjbUathAikCKMQCUHcIhAKUaYF7ESRp4=\",\"KQ2MvlIR1GxB9WHomYjeeEQipfdQiNDL8meddTr3yi0=\",\"Hgrvr5zY70JJZeisUadWLhFQbaKYhuwXAGsok3Dsd9I=\",\"BN8Y/M5gqH9QRVydVj2492MKDdY8Vd9KP1Sc6YZjZJ0=\",\"CVlz3Fj2UFsAwDOXO8yV8dBowxZxC2MmDHXjAOjyD5g=\",\"HRisq0GN4DHQJYej3wXZ3FAyHiBoeJWYccfCaB2en/4=\",\"IT1zhD29PE6Q/j/0r7VPETqUoelK58k+Biq3z9fKQqc=\",\"E4ByYeGXeI9gaRW3NtBPMSfjpTKHD2oohaCeR8epuwM=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"JQtgnOiPCYPxd6pLEpOCWs9Jy+HMwdDSIY63tU2HIOY=\",\"Kj1ziFh853rRQuF2Lv3xfYkE7daaapAWGxmoBsouU2E=\",\"GQXwD8Oxzz+t3kfLfhslv9D8UD+pCzTBOzsdZg+oR44=\",\"KNMDmbCwnXfVETh1r3J5EBYoJb33PupNw3VynIsbRBU=\",\"D2BWx8i7KfR6IzcijVvzQvvt/9UjfSM7PxUF4JsGO5Q=\",\"JebsspIRGfeDpBC30kyDpdnJF0Ye3GLQz5XSG+QkpWE=\",\"KNpIZYb6em7nolBdUb5J44EARwtO3jse56XDZMpQDPM=\",\"Hnp8ROcs1aY1u9QaVDyfRpRbeFHui0gocbMXZVeEatU=\",\"+FKWZdIVSSCLEjiNu9VRhPI/1xMljFGCSdTufzrNpg==\",\"AWMthKDTFQLOUJsBSdoaUpPfH4wRsuLxDSFKL1LkyiI=\",\"Dldui6jOvnu4Grcte/GgjJgwrUkBbpvbg3ZbxqBd088=\",\"EW+fhVbqyd3daJEA/E4n3JpCxFNDIvThg3m+4ytTrfM=\",\"JhfLP2lLnTWFLVNBwV+lGkcHZDDcQHuI3HCKV6Ta2fc=\",\"Lh2r/NwiQqqtfFYBxFqjdvi/EolUsExHeUbpGJO8wZ0=\",\"IFYdtX/aSl0YvkhGHEIJ05s/12D8vO6Th0JJ1KVt1KA=\",\"Jf8zbxtfoWV22nZSc73m0ZZtliZMxOcHZtFwz/oSNHU=\",\"Lrz+rRGgqfiCU5shKUIMjJUjYaRimHE8PtTV1q+OxgI=\",\"F/QTOuqhnpBXZRKLQ9Yz80W9NLUS8u7xah3M68HMVts=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"GzpJaHz7aSePzsnJAkwsymGj70NyjCG90R83i8IZqvM=\",\"IcL5+9jnISpXBR+OOcbmjzhJeX42aScj9E4IYSZKVnY=\",\"EV098A/TvW5UDdA5AWXu3Ig+5u/Ae0CfNnXetZjq3kI=\",\"Dlcpu16brT7lkgaOyqPp/oPeVuOGA5Jb25hipGDvRhU=\",\"KFRAVFUGrc/bJ3bHTTqqJfensN47fFXw5bh/t7bg20Y=\",\"Iz+A6TD0MkpqCxRtB6zW/I89m7SM/h8HLXX1jahOHro=\",\"IfnM0wW4vIGmshFuiDxprSfIRVBj5m4x1tqBitHnTec=\",\"KP4kc/DPwJFMk7mkmvV7gJ2bIF8mMdrhXIye/GfFqz0=\",\"LsA/Rf/nBTHWyqMLVSic/2zn+FIWB5eiuckHaMXEaSo=\",\"G20N5tsD8LrS8NSHm93EMXCKgh30ysXuicycnvcN2fY=\",\"ChHoh28I9pTtST3Tk0Dndet6akGu65SydPJL6X45o7Y=\",\"F+3pmuaOA5rPPLjTU7DbkWwvLnIfGZZaR09H8TQc3BY=\",\"GP/08+xSxDcp2ClFdfI/i8Qdhbm+qHffj9EnJtzMSQk=\",\"Id9x8samLzlF/dzm1S0qp9MmspJi70spgCfCZHO56xA=\",\"EbidoEddnwQaU4DJmScutPeHCQ0dVbmGDt6AujmDQA4=\",\"CNwWAoCLBKLzw6FVRdNkME9PfNudvdvdb2MpkdClvDQ=\",\"B/rx6kY6JKooRUYNOEWIVeu/zJ4dTndaNQoOiCddb+g=\",\"7jj0Dzwe8RAlUs/QOCTWi+pAv96VeF16TDrfrutOoQ==\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"F/vBhGeM+4i9MMexw9eyiGQgTXQTPvQt5GkYf1/97aQ=\",\"HPnVl1VWBalAzeEEUnhOhn9Goq50/gRl9JOMRqVGw+o=\",\"HAkrtJ8rQ2azPi3C9u4XFGj5VXAYjksplbkltVOejWM=\",\"EvYgUxJ+IITa4dsoptlP9i72oaRzKrBSsgOV0M1K1Hg=\",\"HutEdq0py+oSrXy0RzIRPljA/1mKtGSN+XnEdOs4NQ==\",\"LDglBkf60+7crmh7GrVPbapYK9KWMcc/6h0vXEA9230=\",\"LuyGqwJy9X3yXYRT+zjp/PDbytIo7RW55/8w3JH+uQI=\",\"JU8PRZfvysi/nueLu/zdxXgfcVZSF+968L7sbl1fBvo=\",\"EqR/zbGxnXIKQ5i2WbLHTCetvSwk/64BAcTRKb7OEwo=\",\"G8iQwBmdp+3y85NlxBGPPB0a4k1mavn/uDq0iz4AogQ=\",\"ElJyB1xIrVxB3HPC0n3gAmeW1rR5Mrvu+JvM35L7dZg=\",\"rrjnHMJLBdi0oar7Ghb4QAzduR5tQvyFiM5QoZG4xA==\",\"Bg7OFMKDs0ZUGMa5qfVs+cliGLaFdggQFBIroFZUsw==\",\"FHKL5BTNHceeQ25Ncv2TkuROx9YJOvhGpJ3rIPKCMmk=\",\"IdX2bnRe8owPcXhyLNwUvr4CQSkRQz+0YL5yQoHsg2E=\",\"BrxjEzWWGntgCuwsQzqFDvWMgRzsu3S9EkTgME7Jtu8=\",\"ASW3wnfxYqCgd81vGYHl8i29oqCwvsRlo4Q4dSfOPtM=\",\"Kiof9e3iAwDAFb52MNjxBg6orvzH7A+WBuiqjK6Zv0s=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"JHxf+XbirScTsO0MIopWGWIVXzRV/nZudHs8xhNinL8=\",\"Aoywg3mA4J2qPmlykYmLrxYp7qxORjQrwHHaZWx79f4=\",\"D6V8+GBl4CxxQC5tvcJRsbdsEgXrFNiD2VuVezdsa/M=\",\"EzPXisgJZIPOGVnZVDI4AshTpKA2n+584SYYKFAc7SA=\",\"FNXqfxRyOIdRIBpmSxX0ApdKok9s2pqRqE1Wsbbqp3Y=\",\"B3ppfZKtLAcNBYsyVkqe/H4aA3odA5YttfJxneXMbH8=\",\"J8Z5MwPz51Nhxn/la47enDsT68jRDm/3h+aarVZZUGQ=\",\"DWk0D3H74rl3JGSy8f2yXF2TzTZeJLaSZwWneokOCNU=\",\"Hi1wmokb59VBH8suq8PK/Pz9q6t5lkGJdY0a+vcKaXA=\",\"LNsSSUP8fDKHczoKPAeOuYrcOTgSDKArFKWKRqRPT6c=\",\"J68RSXy0qNIHRxBk6FW7SNh4bwsUNm+DPHEHZmEpCL0=\",\"A5LJMA0EnKMQJRcIgKR61huAsdwD8+bbMmTtEhnbWwQ=\",\"KqWMjJWpG9Mh2DziaCpLfS9uhpoKTOxjeicrCzDVhDQ=\",\"Fve16dgzOcChUbEUJCP82NLBdY1neg/30d+u3VJXYrs=\",\"JAtQ1Q/2pZMKVe2ACvVfxiHotfAzPgIqSeE4LvgCMaQ=\",\"FuQ9V/w+zuF2Efr+Xo57BTgI94DcsREtGEH0zlLBXzo=\",\"GLmJ2SDbtw1RWY+yproisYJcLz8F9/1Il1Fv10nozuQ=\",\"Dk22x3DOXWYrIeW0Y9mTcb7AG2Igr1M3W40kv3ZoXZo=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"FFVjro5uFHKt5z/3PciOwwbPVAviiUvnWMmZU4JmZPY=\",\"GJLJl5MiHR8R6cVjd1fbEsAB7O+ZZcAMaXz0m6m4gdE=\",\"H5ZfjaoBjuMFlnBvF3c9M+aDXma4qtROcZVTA/zm7aA=\",\"KTVRGsg8mQhbJHpoEZWT1EMHuVOUOS2LweQ2a1QCFEI=\",\"CQeQdpfeweGjvRefqMqahyZZl7zBvtN2u7JkdDCvzrc=\",\"AzlsJnsLqRSpxLpF/gaoaos5YKodwS7XlDzIpF/NUOQ=\",\"BnnrsFHWTfmaCyyTdEhXraqIArvMbBfPDLKXdvoinoU=\",\"L5NIPQNUnDG2BrMyJBOd4ZmMC+b55LkA2f6XKFiMmNQ=\",\"FFj750j+5T2FLYOw5+Ay3qQvwXRzPuZy+DPYyRuBGmU=\",\"GpD4zcHGPyifIs1uTrO907esnwTMpJ19fYz7D3JYBa0=\",\"EypPqC1idgUfM2ISSfTGaSzd6Zdm5SshoIluL6oc5as=\",\"HXlESTMBXtmns3tT2l81392dodzv46RU7JjaaQ7xiAs=\",\"JoqR3HeuiP8FSG/tjt3r6mecAb3nPWNPXPspur2+/Qc=\",\"HgEajxS9adZDnN7UWxVwdeXUTOUfT5/mJ5+iaemZ4do=\",\"CdTMuZLi7Wp9HglkmEkITkx68cedt4TiOcOdqrvGmmY=\",\"BL0zPvdbbiCgqVZsfwckmIaNvjjgKL6tY3QIxqpD8jI=\",\"eiL/h1ZkxNuDNIcbQ0ugHpScYKQmTockq77E2YIplA==\",\"LOfAqqfTYdp9LRcCcKpI8Kli24i8AvZ3m+WlB55AyFs=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"BcFOBBYWudRXUhwnn2YuAiRSZqErUWS/4Fp1A0QO8Vs=\",\"AwITSDLwgyvLn8b71/A8SefV0IHUVesOMmem5IZ3pBc=\",\"H/H8ClBB6Dz4wUWyJrqeTzjkLljRVHnK9hAtXwpGwbk=\",\"B0Oi+ITnzBvxa9gzUqWzMkNmzQmDjaO3r4wJqouQf/4=\",\"FgI3b0Fz2Vl0nsXa7YOUtQ+s/z+4dlqJtZtv7wp9G0E=\",\"B9LLnJSwqBgY/OP5ToK9+9EHToxRWef7D/4SKR6dgzo=\",\"C7Lxo/qSCYG3b+yhUZ2zqjwmtwP6zegkI0ebJEv9Bbw=\",\"DvFatgGNtvUYUFZodWoVHFDOYJZXrDoTkN92dZ6e7/w=\",\"Dm6Ia1NxWH7JPq3KC1TLd8ctSnCb/ZQxxeTq/bHz870=\",\"BDho95agkBnO6SjN3Ud5723krRdXjB617Z6gF2H0ajA=\",\"JEppGxLgIC/XD7KDWAcA8uJXR8UEwqDr1YmTvsr4Tro=\",\"B9uDoW2Gc7vxYLOw1dluexQEBJCstnhwUneK6rG72aQ=\",\"CjjrKFEEbSZqqKptEk8xLgC9mVmSrbFuR6YKCG1beBk=\",\"Ca/RQQL1ZB+sQvWq1+HgT9V3ncptIPIYGe8+7cd5on8=\",\"F/EFX1Z6B57rw2y0ZIjjQGLlmP+I6eQoDwRyAhiR1QA=\",\"DnQrd7jaztBGdnmHP5hDMmCOXPX1cylatv8QHIa+wlk=\",\"AeATeGHOQk5v4fgWGEfhyARSWUXbAme/VuivZMFMwtI=\",\"Jq+ZOKhcVuYK2JrJ6nrIPgT1dNM9NA8UPKXwWOKuGP8=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"DKO7/6lKJEBmDuFIFmTihymnpYHrR/sefyuNGbM6djM=\",\"BW3fKIyFMxdIAetk5G4zK6B334hVnWF7v97/6sEsk14=\",\"GPaL1gJoLRJnzlerZfJ9zhhZu78p6lykwafEfuaSHzw=\",\"MFlbfm6DusrC4bl0T5fARfgboXq5QKCT8Hhq6/EH9Mc=\",\"BjaVDy7mIRUZXVcKbEPRjpKj7a+y6wOJSCIRtIb5eb0=\",\"CHTrhVX0REuVGz4xNPltda2IZqDaB3X8rqfYDMC+DJU=\",\"FlswiU5oN2AV+Fiaus1VUS62PScs5ozn1Hi+q3ZytVo=\",\"GeS53cV6VZZI2iGak8sN2w34S4nLAZKBR0O9pY5+Al4=\",\"JezNa5bxDioNqP5wAadFjhDD5mnMbp34TksQjCCngC8=\",\"Es7n/3AgeyYBpRmKccFDD+N1SVhyHLgQuN4vpsRkSI8=\",\"H5nJ77tBc46lE68bsUDxHoTOQU8IFo4WViCjYDLoRN4=\",\"ElKdgl6B48yVDCCNLkA3XzINr5OufkAd0h8x9p7DndE=\",\"BgVw+WInWkW95GDJKe3OHJ5W1b/ep/UWWprR8zjkMng=\",\"E9EfM/TocqHX/Kj76V+ke68+VwAng/VQPGUiwoNdjCA=\",\"I1nzxET3kIoOOoCGGkIlERX2UPpOZv6/gVyrF2dv3kw=\",\"E3w9hJT6/ouBVnEhFAqJM6lX4GqGr3nyGqB4buAyBxw=\",\"A1J81jHS5m0PgiGOwaKueNWKu8F1GXUPAo4BAVO1R2o=\",\"1n3lqAnDwX7IH4fqRwVlV82aIcEuYV9otaO4sr5c6Q==\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"DgpJ0Xtf1T5Bxxbut8MXCqWWo9mUz3gLtPsJmj5ijO0=\",\"G3GAJHw1rwHVi/GM50bhk8X51stTDetwfMgfAWY8JAk=\",\"Agk8Wtbseeh7TJmvU8MrfBNVlzWsx07HRKRdoFDW1Ws=\",\"JsTQJrbaSkBf5tdCOHR/1XFWG3Jl7kmRDER0OOnA4cQ=\",\"H9O2YpWfBaXKNa5UPagJX3ikVEFZR1vh6dhFksUm93c=\",\"HYoRnaRsAezShZixhDAg8q/8/70NKrdFE5A7AnEXaRE=\",\"De+ey/xMJF0I+iABCiKIbAEjQkUEIYHMrRnsBu7MWqk=\",\"Lzieud0NszECYKCJu50IRu0CWsQ3we6lbcXHFZ6EdPs=\",\"GS0J9uH5fpWFiwndoxaQLeXguUbTBQopbob7kMCCRGA=\",\"Kr6EvceoHpIkjmKBZBlRbzG53zw2CI34sNrfokKvj5Y=\",\"DsgDatMyu7DY62MbzFX/DdHHGCO469a44GmUF7ItZNk=\",\"IS2QV0USlID2SWv/Yozbcopyk5T35d+qEwBKTdbXzgE=\",\"KLEOrhiHQVF+Jear37Y/XAuCNKRTul9z1VcxsSa4xEI=\",\"K1XnNiijFGOZycQyjnt8KwbD+cay0cLwbeOytUwsUM8=\",\"CiiPHCwue0/WZjI2BkK9GJcMpIlxRoHvo6eVlzaAAMs=\",\"KpjGryGsOObY9wqMu1mI1qqSnGzYp71B3gLWpGHgA5g=\",\"KBMXM7bw+dyrc6mX095MFLv75RcTXRqNBVnwl067ieM=\",\"GgQitEhlL4/yjECZpYV+NUdOiGTIKwcFqikQUvrbQt4=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"B1ngLdz5wC+uubFEHT4E4uJrHDwhwaad1FJ5ix7Ov/U=\",\"Hm5RABOn0mEI0WCzv88mn/D1GgdZ4eGycx98P9n2Vnk=\",\"CHsijJWa7CHRErgr6BZ3mRBPzy9qExGo+Mb/vJuRwNY=\",\"HbKo/fgEE8/LbHfpfFcK1HHavDjoyy/mgAFvDdbSxeE=\",\"LIZungAve6D/SpK/wF/VqcvSxEl62ZV6yUNKzyo9Oq0=\",\"ApAy7PkwwqQf+Twofpus/k7WQ19bs3dSf5Rd3ZDwImk=\",\"IalI1Zu7tLddfmLinyj9wa0h5nPD2JXSZPPLwLnA4PE=\",\"HcrOYjlqnF/vsxe/B3G6NeNFpOETqb6LmtO7T2piooc=\",\"KfiuXB7ni8yV2yHLqRE/McEEbEHYZqcDg84Aip5qp0g=\",\"J8XIcHtp0qsk/cFqBD0k86KqzOCZSq+8t5dU4m16PAo=\",\"LTS5a7wyWWlb3DXX3bKNiW9kuU8JI2Jxk9UNgpMKYfw=\",\"FQJU7TQeQ9Ol7fn9SCX4CUMX3+DxmPkINVyf/ASFtKM=\",\"LEypnBZ9Z+atY5QJ7PdmmwqZrOaIxsnDOjTXHdPvPJc=\",\"A5MM1W5TTFi+Ux9+niucs+/WLVQbtlgKEkbcmkBnp+A=\",\"JPaeiXNI8pLx/4htSZK2sQjxMSo7GUKW8HMUr5TCcBY=\",\"IzTDul/VU793T1PXfD9VbUBPSHrXWXq/UFYm5fw0oFQ=\",\"LXLXvVgPQZkOd2po6aElLRxdAD+8m+1kFiod2olSylo=\",\"KjEaAPbNgZam8SpyW5eRtJ9GoglVoMwFQ14TbD/68+I=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"Fe633GBpWYXMJKkBuB8sKsau4FBpWrHeeeMA1Uax8EM=\",\"EGX9QnN+xHPJajdB74EZv9lVq2BmlV1M3rr5dhrjPj0=\",\"F8PZISoJAm8SeU7uOwSEAoCxKrBr9caI8CzHcmCPrZI=\",\"Gz10JOqGZHEKAk1fV8nTs3LiwfVChoPaOCRk45FUv7A=\",\"ARIq7bmEeWFM/lknQ01ssRod3qU54zx3ccpEU1xRBCc=\",\"BV6b3tTLu6fa2YnZsSlcUjDVp5mmIRiVvEEu4kCG1ig=\",\"MCY9sCCb55E5GtCPIQhXSmqILwW2yAVbC6ngyocVIXw=\",\"BkO+w+cv5UBgx4phiLcJi7vO3VrlSfXQ+VWU0DUBwdI=\",\"Akc5rATCOa1lSWWMobfg9iBnu9U8Pwrpw6AWDciYLNQ=\",\"CDHPoBuEVU5vJrnWBMD5FEfGxawD7R0xi3lExXc4J7M=\",\"DAVwEh8pHY+3t6YsrhHqVoo5SRWpzXD2NIMKXjb5MCU=\",\"KZTQfa9xUrUCSVf3GI+rRFJxRgbFBVMIVM7BSlgrtuI=\",\"LlrRbvOPgC/HidxG7O0szKcf0lzq0dXR8UxIIGHMcDo=\",\"CfH9P9d9OZ02CJ1YnbzkPx9WPY1NknEivymBmgIkBT4=\",\"HN1dHvp3ACM0469QlzrYcAm20mgYv3g5a32JJMeqxnU=\",\"K/r5DFXWOgigrJSIdPmx+2DA+qClMJJqz4aClvhHjgo=\",\"EtPmxQCVYsFkcmnRtQcSOi8LdymAS2ZkPwgbt4K6fP4=\",\"A26b4xOpUuO3f6Qs8TlC4pKYKnVolk/yADVqHG+C5HM=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"DDTkLJdIhEfDIdI9tks5jGwl1Nn9H8/TtWJmdKQtHLo=\",\"J9gu7lMZkxbtFEpVkf2uH24r52tGn2Buf/Z1mokg3ek=\",\"CJXywphjFgkqA2bW3QGP/WQ5xHeZa00utcOu0ssMECU=\",\"Iuom40BPofdMoL4rcyN9CkQBT2A2+alqGtG2oTk2IqU=\",\"JF+cNggeAinf8caT4zhYsFKZNJySHUFjwSuKYM3f/Z8=\",\"EgcY/q8hBgZ6Pdgk3BXDY5MSgRwdjleCWqeC3oiiw+k=\",\"HNozDfTwV0f5/fUY0Ub5FgVW0y0G+MIfnyJDKuKrvw0=\",\"F8i94WQb94RZmzij7ZVoyz4qg2a87dVWcR6Fvfpx/MM=\",\"A7A5/s5hfSe7dPZPt8DiStrasSFfoHeYj8tRO3mQyro=\",\"JYX2mzt8rrCLT9RAO3JFf/OVPnCPIKKg1Ahy1Vcdxwc=\",\"HPHdcBb8cohehBy/fpLJMdmaLN3OU19ysGVIWzn948I=\",\"EfMPG7KL+6Gbgb9gYRsPJsGip/ZiOqt3T5me1ivgNEk=\",\"F59sPKP8vXqtjh73WSFtWJq1FIKm9zlck9UQWtecXgA=\",\"BRkygsS86dWBVOt16m+iloPi0jdtHiudImUQOzI8AUo=\",\"E/FEhXrxe/8MEvD9F3ptqbGzsQhC9IBWifEk1S0QY8c=\",\"KQQA8CLwmxNZvLmBLcs1NHJEn0voUKKNlJ+RQpCqWY4=\",\"JqWQ4tKD6k5L3MOf5M38+bjpdLRgPueLoM7wfgQtqSM=\",\"sLxWH7S6NG248o1B6wvMa7HEAhdhDxZcXM9PKUDKGg==\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"D8Syj1D3Sci1W7U8/Tx27ROhHhbrOBZSDXMhdLaPlpQ=\",\"HC6oaEGvopmX5JWw4c6ogVYjGdntwqrv3nsw2gEYuvU=\",\"GB8d4eYnvAIpBVssCPEq07cNVAsk/sYSjjWcuPMqig==\",\"KksKD+d8ev0msIrA7sajCFTKxeuMBw2wego8W4BiZ0c=\",\"E/Yrufoc8gnjA+dib9c0cQZo0CtO+z7FB8H1pLWeqUo=\",\"K19Ly4sMDBqvkONw6TthG9NAFdT0CDtv7/UcYPx/kNo=\",\"D2G/us/h6rFBgcC5zNodoCcnQqDGSshzMhyFr3wPQlM=\",\"Dym5hwHUhPZb3mV/FyCbsE0c3FLR1FuDV9ZBU+4GOeE=\",\"BPUPrApiJo58wkpkzn94S7HXmCvmmp3RaLDxkdozpb8=\",\"AxtnQ6b+6b5iWGLAX/xNTGVuMOF6TR6aaM2Qa6nFx4Q=\",\"AbLXofCtPc4uS3/bQ9451gRLlxO0fIIJf7cnId6Etik=\",\"DyCQ2DBW8joKhRnvYzrT90VBlqHaBttqqTu3K6uRPaw=\",\"AfNuoV4e+EqGnSPz/Hw/wL9CUwHpgCJpTlNKVk72lhA=\",\"Hn/fS27f0+jhnnP8j5OLlrsnHwqLW+ruZ++w9f4diUU=\",\"BYcn0IdeChpZBjTFJ+i2mkxuRDJl0BMADP3V8AufqsA=\",\"BlxnKXGA1Wzv0xy952kc7NNE5VF9k9NqLKALhPKsZAY=\",\"Ju/ZY6gPQQQZKx5mECFDqhjGlWtO2xTqyDOZy7lX1CY=\",\"LTb0ZpDkgNLL/g9kesmcdTywFJCteTJ6EZLnxbqzAdA=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"GuIDhkkN3xbcV52lgMRzbV4gBm5MqYDv7GxBLWxfvyA=\",\"E4VWVetT0HDWo7koMXbsh1zdBKIxCovH2jd4u6Oov2U=\",\"IWpQR/yaZCPg3OXC/H7SLheoiezX3DE+yX2lMLABLc8=\",\"DOCn/kx34NA3zjOKcnLtZ4ZPVmcF5UIrlU7/qQHBGQs=\",\"KVxLmpqX6xndm8XLxHBP1XwQAna3r1fge+OSwYqVO8I=\",\"KYnSOpRzEvqrVxxd2vnE0Jwi0YdufQB4R1EdbkLC9Ac=\",\"GF1z13oOiPmmfiwaWdZHNwbiTHm4Rc5fmVDw/ibWx5Q=\",\"GCsO1GcW9k/s6IJmF5Gim7KZhq+4PMnhlO/jlyiKrU4=\",\"Iv8hoAMKV1pMYqgrKGo3GItM3fbUKFxgtg0DDbIGscg=\",\"ExNDeqeUmkq2T+hTJ2RXSP0qWODj07hWJuiPcznXsmE=\",\"Bu/iKZSwJFG+ui9tDcv76bkggX10yyEq239zgXitL0A=\",\"AwEGMDbkaXu6jSE9NdGIaXI5u9Gzaee9KU/03/0QiF8=\",\"HJD7Okasmt500gu/6EA+8GD9qWA3cwZDadTDRL716Bc=\",\"LFLGAcwAQrRJMpwEX+qFbecPmOqNG1zjowzPD6PdilI=\",\"GQNLCwqHwlesSUTgUA6Xv+3n7S3LFIyVRuO1gaup2yE=\",\"J7CGhSZEocdz8O5sfLbljXv/oyY4t5spkL1/HdaD7tc=\",\"Fs7Bz+xdVIpwekTdw6/ufbFotemG6qqIV0ijaNH8dgc=\",\"I+DVwgWUEz3FUEO8yApCLcnVn/kvPhqek018dIa71BA=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"D8hxAUYS8PIVNYWHiQfwEcypV+sA6GvFDzGcy6IKAF4=\",\"AXnf7eqUHsKM4WrUpv8yBlZjKwdQ5mFoiehTcZv8bog=\",\"IgDu3G0ACjG6Ba9gUpKmrD24fl6FK37c2pujBhkoI+A=\",\"DgYnMItEhrmSKq/wB9LciKTLgNqdkL4b0T1j8+1+H8c=\",\"CUHs6Xdmyd03wHyuhyIBUblnLwK/9ABnADELle+/T00=\",\"AtiAZydQTnxCJFIofzeMCpuFmJclQ3LutOTKvSwDgGc=\",\"H0QTaVPDaoXYXaJ+V6bfr5Vdx+HUVnkOU1JmJfRwYk4=\",\"KtLbGjeIGx9z5a6Y1ARnLs6Uh6CMzO0Xl04cklsPAjQ=\",\"Af8nmJ9NdLUArUfvNyuPCDlkmeRGHKfMxZFGdTZcvcg=\",\"HZ5Lseu/ZUrI2BOAq0nEXGmPRVL8KzhdYfFyn5pDT+4=\",\"Jp0hJc6vSREwDatZfa4tTZdxSkirrwWfAGDCamtGJBE=\",\"CF/psXl/9IM8dvI7Da1ToBco7b/Si53VCXpydyW64/Y=\",\"Kh5beou94ZoOTj4YmlN1VDzmh5uKxslLNUGqex7l1z4=\",\"A4+bMow4+M66QdZzGaMYbs6b4bydFhQqvDCZ4qkQ4ag=\",\"A+vqe6KolpW2vgCXNzaiCUedDoNKN/XvKGMGNVLYQKc=\",\"KaHrhhqv2lyaNqxMCUzIdjtJGQKxi53Sm7G43CFr2W4=\",\"D+KKiAAcF7Kxzq7viJG/xavbk3x/xtUbLftW5TR8YpQ=\",\"Jq6D/3IPtlky6DG9sHBdeuYMAon3vP2JoCCl87MOr98=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"FJK9xhtc62/Ds9kQZfWF4NGwN77iA8qCdDRZwewAxlo=\",\"J18t0xxbebXxiK5mmSNJTm/+1DDox1vyAhMuULJcGjw=\",\"CzJ6Tr3EH1ZQIYamVsoGgZ0dKaMqbnBYj1SMT9svaJ4=\",\"LF49AQhSHIrw0DimF/Kgcl1QA6W53YJKlaWexr3iCxo=\",\"G2EcseX38qDE+8rU6dxl2lxqNBkPsnqBSDWdRlFl+fI=\",\"IjZcVcSMVzbLS32uj/9JXpxmHp4TCvYgz/X0D6EhDpY=\",\"Bz+5MiBVaiv64eB9LQdsqkTAheK6ZkS/QlYJSvSOvzo=\",\"IT+4vIwR7NlbszEesEY5jzd8PqQgjRS4Dq7IxK/yv/Y=\",\"GmF8W5mHYpCcVayTUTptGe0cHij/i3j7P1URWKnQ2Zw=\",\"LhKEpZoQIDlm1TzdUCQF3qaIlJD5vPxaM/+di2/uF8Y=\",\"J8c4l7iuocCDgNjKKNBAU1G5V7Bkq9F6/MZHtzqzSMw=\",\"K8UzWVeKJCKJp5gGwEhTq4n8oCpiMvFS0Fs9HfvraQg=\",\"qOwbop4RLPxCr/CBzNPn4BQQaWy1UQN3Byu8svlgDA==\",\"LgY08m9z8RLMXyheSiMvaUt5wFrFu5ydq4na39ARLOQ=\",\"CsmmiFQx0AXkrt7pPbzbY4zqWxfDYyia27qa6eP+dEw=\",\"IWhUvOMHeve4KUVl7CAMDEVbnV+zXMmMo2oyNiC16uE=\",\"FgPvKlgqCtu6xWVbPDICtg7Twi5Z+0QsKnliuQMaM64=\",\"LP0OtR5gwcCGn13RY2Zu6GMLsvO1J6+YYPjiOy/hqGk=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"GD802yS+txB/D1v5/UwlMgM4VcN7VGPMvWWLaNhw5rU=\",\"GlB5GQJF90beU0Xwd19eqRcS7ctPFl85HpyPCxJoKAs=\",\"JJ2kZBuPEyBtPLezlD1P9dCBNlSqXY707KOcxs3c2gk=\",\"Lpnw0a0onT14AUcoQVXzNfNCJPf409trAI2VKoShLy0=\",\"GpXIB7ZTt2KRD7C52NC0oysAD0kPvpJeDiB4QqLawMU=\",\"EnoVz72I4MEispBVcsSW316sIJh5ojWv4I6NLmMc9G0=\",\"HCLWGsNPBeq3Sq/wz8AWiRMnVNJt5iA4lktaissfs0A=\",\"LuRsD777/XXv+ILTlSlIidkVoaHoWOGKWxTEIAdU+ao=\",\"q17/NMnAvZ/JDbWwWL32j6tPJet2Auk2kGD8tt+ROQ==\",\"CpHUedy+B729pCSRiDYfeqfgDI7dget03BdvGb8F6Pc=\",\"J2pX4sIYQ74LELiHeEkwmzPRkImDh0T/wkVBmeaDP2M=\",\"Klbkd/tKKFtO21Ky8Z/RWZFOw7OE262YhQoZ3Z9Ewsw=\",\"L8M9S3Yab/5ppfTy709B9yfXExos4V909nuhcjbokmM=\",\"C57YW8PkPrDDlat9/c/12pT6gJvPXSDahmouBxLd3N4=\",\"KSGXG/sW30SsrwRHhY6uBHIL/4Ss7fV9EFkBaTLAqeM=\",\"HvT0fo2ektVUyL+TEuDID1hQ+18SRCGkoDIkNicXBCk=\",\"Cwmd09VJh4EUHOu674s8mgcdiMzKLv242XBx6Hhxj0Q=\",\"MEoIbmc173oAxtX7xqVdq6GB88qQH13jyaKfYWG6XzY=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"KGaGptU9CF1geToIFcwbd8YepF/ERR57menI5ryA3ag=\",\"Fgnh/O6myoivG8UHVYI2P/MF1fOWg+cHEPL4VQH074c=\",\"Ek8nAT4A2bjhH2VQzL1qK5Qm2l9IKuV0ZgHYL7q61lo=\",\"LEfHQ/8Qaa5xuBHuhwUOnhdqBGHY9uBHKvSn2DKAcb8=\",\"EaBYuXbcX7hCTGgZKuyrj1a2g/Xq8VWUIDSSgdhJ10Y=\",\"AiIuydbrYvX0Mesnpl95KxmBdYBWLYSCAnx+hNvuXXo=\",\"D4ZrFnrLhFsJBfwF3PmFhJzHsyp2xTL+J3Q1PqN/H/8=\",\"Bxl8AvwMXx4TvNgl4fDfRxEdFr4G5PkOHOJFLtJ1gIk=\",\"CZqqa+9i1rHzCYvTTsKRbKraGXVr+i3SIsrX/JspbGY=\",\"GiEKri3BO9C/drRRJPdxxIbNLE3tXxJWAOyWHj7/XRY=\",\"BK6T5OyW70qXEy7cYhnuQ9QdPTggMxFSqDN0s2PO/GE=\",\"IUDU9p6ELpJXlg+hSqUm821rMgSVLFdjVRYAoX6cXAY=\",\"Fvd99ylh/xVySyysD3kQbMm9srPSVTQmOIPi43lyIwM=\",\"AqZ5gTEG0tGojhlN1VZBFDpa68wiBPtOjyy7QPY35QY=\",\"ElgtK/4i+rgHm7/Ne//P36ajMiH+/jHnTtrdXg5Yo2E=\",\"A5DnH++0WyI6t30EyQcn65dUC309nKcHmL87P5fZHyE=\",\"JrRA9I0cVMgwCqpJuauK/mItb3V5hX/5hpZoMlhPgtU=\",\"HeoXUpb1uyONBL2zcbMb3+YpdLCiGfVb4sPmROgrW/0=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"Dg5u6rHa3oKffYCqUQ7UI8hr2sezncX+9t+baTLMgSo=\",\"LOu9Ww1itE0/BnKPXbg4xhfZM8CEkcI7cHIgotYGCvM=\",\"LcMet1KONqsW/k6EWxhYtEt/Trz/jF4pFrXbyTqtpCo=\",\"HrO+wCq2sqKXfImYQnOxegFWIC9iLt1633hyRszHXyw=\",\"Ig95NZvCZQnMu/xCmYDC5lsZWzyLBpXIdlBXotAlpn4=\",\"FZBJGx294AL4acZmofn+uYN3B0Dt5g5yaSbf/zHySAY=\",\"L+6hYaw3TfG9HpDD2E8LzMOe/PprNOEtrn3c0LPXJXs=\",\"GimGb8ejiMvGw8k/8+t/N+HF6DZZsFsFIrrB3LM1NNg=\",\"C4GZuj7b/X2giPF2h9p3/bzOf0cwkVzZ8YqobNA1dPY=\",\"J5G3xYoDHQONB299asQ3MJM6du9I8gP+kkANYLmNai0=\",\"L0VGJVVurMfzFDnI8rDvBv837WFvGVM/kmbyjKhGAZ8=\",\"JJNpr+PAshEdRIMDq8vBgRCu0aGkRW5LO9p+ji2+/H4=\",\"Eu3AeO4Vvrxa1FCfPUTXwlYH+9YenUZNhLoyI1gt5Uo=\",\"IlgNoTSmKdpnm+Vip6hBY6FWWvQlWKBMZFedmLuiYPw=\",\"Hdown0fkX5psw4x+wEWIxRplDI8PEBBErWwLFKWw5uk=\",\"KtSDV3Iy6zk8uUPc3mxhYoVGjUta82d52GvXicSZSCw=\",\"KOvvgbGzRmczi5go5IWPlWNJ00zJlYThYi5uZ2wiGEc=\",\"E1KjnU7Cfw5y+ZHESKFRHh5+zE9OdrcF/yVR8s0XIz8=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"Aml+yfzJMwLV9ms+HBrZsgNSHwW6mZA1lvzbj7cOTO8=\",\"CVdRkSe9GvoIJjhOzoRoEwZoMVceKqrMpElPuypijEg=\",\"Adij6zjppSB4f3s3xZ/TCePs8ZpF5OSFW1PcZw3o05U=\",\"E8okikSCWtH9UANRN4ochz/L9vpqo9pIwnTRInr8kOs=\",\"DearaumFFgFI4J1dWzWsx7D2HN0RnKZrpyoRyJ/7ma4=\",\"Bhd0NN/4SH8B1Of+XcH1ljAgQJOEJpuiS1dR2pRw/Vc=\",\"GV/2LLvWaqdUBikOp3Pw5v/swfuL6bYxO9MKTgYmtuU=\",\"AXypc3irW5X9VIvc9THaKOQzbt/9qNPFrb7UW38iSgQ=\",\"BbJY8ihP/weYxp/iS3D5YDjO86PnvuNnpRp+YpB2adw=\",\"IKONvAHVo4xpCAVvXEhiw1F1T64HUAlMk89Uvc/nWyU=\",\"J2SfS87r9tcfZYHUDgQHsCDcc+xWvxZ0jGGFTGr8bIQ=\",\"Euun32ueSlobe5K/1R0S51aDGvcTOnmmIjOMxT4Z/V8=\",\"CEh/hMzWNr/VCLVYTRzb8kzBYFx3nlMA1DKL/NTdbbE=\",\"DngNJu6Qn8dUh2cKTMBDdAr1fonQRbae5rq9gIl0a7M=\",\"ClgSii/b9QDonIuBqLiDu1AEtLKVBxWLeUcXi1hCHTA=\",\"C2gCRvius4t+Tu+AfstJPDqrrR1wVDX6K7N87dBOlpU=\",\"KQmiYW86JKtIrZ9Q5PGMdb7iwvQ0vLpc5gXB2rVyGHc=\",\"FD9Vuo7iV5Pe1DxvFMkgJRU8eclktEs1yIavWbz6wKM=\",\"Cx55fu4/FbiM46H6/siNodYymsPDRxLbVw3ohs9WkJg=\",\"IW9AW5OXHG2F1wC02ZGpg3NwBswQmfDMHGyYo2bV4oo=\",\"DvtE/x4y7dT423Suh2T2STuw92dE9B8vHzUgWXW0kCA=\",\"El5S5NWOhZgJrkOkhluCHGXmMKDeCi9M/VGIzjz6k/E=\",\"BMZS6GW2gsYMV/YL0zoXTpubIrUqHUeqxKoISxF0uSk=\",\"CcrYCl3i5uKA3Ztl1WhgdU3OCrK+z6B7MIU6Mq9bARs=\",\"CBVE48rON2GrNWO2ZmFgrselLXMx3Ps057A11G2apts=\",\"Kcn4mWYYLTx8S9scdR+r+d7Gym/Q89LEsmUfzTWRamc=\",\"Ja5lq2rXbxjTQj3SgpvAWeQyUcpUkcLhHATj4kHbDl4=\",\"GCHoi4zbFobDOtfB3NQcYfR6ZDW+sAvY1oZEuTDnwxc=\",\"GruVtuMyQ6BQ5WO1xP0FneVRPsKJlKb2DlfJjTvI9YY=\",\"EQ0hOoNkeKowG8H9Tt04hQfYd0Wzq/ulvygq/SH3JCo=\",\"GO2y0QW7U7dorgE3hQ3C0r9tEwOh+O5Krfdtj4GZBYg=\",\"HlPpLfbFPs7EwN5bB9xMmgxVRfKrzB+r9My4SgpuLCc=\",\"EPy4F+EPafcHTmTDk7gHzd3zPISotc/jP0S3P+GMDjY=\",\"Kx2MEfxlLFk1Q7b5gAu30Mk3He25bwi7vM/9xsxE25g=\",\"GfRz5AwFZ21fjVHhEzbpxlyzKCjDl8yBJfHcZntsrfc=\",\"D886TZxsM5LeG9/iXPuGgX7LgMUb4X1H95dQIB8fzQE=\",\"I7AtAP4mNIiWc6fQRzb+Fbn2JlKxwGJqGa+NYIXXCCI=\"],[\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"I5u+4L0FNlhzFPVCkYaFbZK/CTy5AqdROxE3Pby/cTQ=\",\"CsC8qMGhXVPOd0deqjmPwxb3kcqjBUA0BwVvmxT0f2Q=\",\"Ea2CgUQvzrQKTFNrco7nlzC+ZAfWAzM7oY71t0ks3RM=\",\"KSeufbI5VfhCZCZOfcT0AVsHBiCEHZA19UxQHQ1JdbE=\",\"DZRV88WcnqkwLnIcAAA/60DsgjFGO4TC1mxAPLkRDdI=\",\"FNUPF1wZkAyuPqwfRX4uAiGJKfXGVIpuYB8wOCQN9Fg=\",\"I3uSAJcNhDI5AbnXoSYmo9gor/0TLZrEOuAdWsPPYYw=\",\"AZ1m0EynhR4Musy+cxVlJGBsumvRdNlLt50/2Z2gWi4=\",\"LKXR5M2AB8Km50XOnTWBwmYdKOvPe3I7+v3qSpcAQGE=\",\"DVTOU+2BYFRsNVW0jG3BqVv8EaUp2GPvPW1j83mf1Ac=\",\"LCHG356H0JQnQM/ta2ksXkhot4EIWikvUFqfU+KWm5Q=\",\"BjUa5OzP419vovDlD69RLr873AKpth/Cuq0uGMTH4Sg=\",\"HIbocfafVo7C5HzgFfezJMaDOrn7+iATFzhX78BA+Vs=\",\"IXWBOTbDFGJ64j1k8hfQclCXiR8bHO/q5Ae7zd7uCbg=\",\"LsRBE6aJ6pbHRiJSWOv5JGCwZcJel55b/78PhZAxXqo=\",\"L6yulWCGRlxGC2eN+NGhC8glboX+Wj26Jrpjfz1O65Q=\",\"GGXV+bm5IDF6V1FZGjJ10jOv9bf25sp8D2suPx6gGEo=\",\"BBIWnFvWGiAFZyGak7jfa0OR/h2glrInVWgFNqIXNBE=\",\"C++dT0loFwLWF2yU74Vj99HNFVbvWt+YbNndZAJFZRM=\",\"EMfmdKZvslkFdRqfNVMJwKa0piK3w7Kek8YfZNldiBs=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"GTQoiDDsTW7wUEbzbH5mT8B5D+duOQ2uJlUCYk8+Z2Q=\",\"If6PT49PoIYVutdjiriKks+PCm+ePmlfNFikWfq/mo0=\",\"BOCk9IPVHdANEGIiazJm2V2lhmloxqvbch2W+Pfiuxo=\",\"LTgG8eognCbHs/qV9A6NITgp4ogRIjrv/lI83bUkbqE=\",\"Bfep+PvIEEAIvMoxiFDHaxnGJGcXgsAQSgSxsDwW15I=\",\"HEKbTxfCXgxz/KRe6PaeWv/5u8IbRkjsSXJ2pzZlaMA=\",\"Kl9JKJKziuEKBhXux20vUUyfMlEAA4PR0eE6kKnf4Fk=\",\"Hri9kgRN5Z6EuP9+KDRyQ6DPCmZdw4vgqAkkXPJjKEY=\",\"Bl7ltedNNcnkEUQzk+JGKVmhH7n8lbwbYnzQ9IQpg3w=\",\"EIKaiAYzaA5weOH+UMu7Niog16MTZHKXqZ299leLvoQ=\",\"CoPMs03IQeucyNKXTwg8YanZ8WLWFp20WeBUS+mTXT8=\",\"D48SbLODOuVm1wIOi7pffuAlJdQ3jYHTZzD5fd0sNY8=\",\"J4NVfPPGoLWZJvWAR1K/194QHB6DGkrUIbEtLsn3vyQ=\",\"CR8gCstsBDa2TEQlkX8vpMY3MTOiXKQKGaKM/amyGfw=\",\"HkooFwx6UDT3CnAPrRCIZI6XoR+0hW4ipSOThQmcqvI=\",\"Ap1jrjE94H0dxZIFxLKfi5W6r37++s44OYIlLxFz39I=\",\"GIotYsXjUZZkQY/v0P0PIUsQFXdkPvVnTLXl5Nabt/8=\",\"IwMko1+33tdKBMf9TPfuD2jNiFHh6GteTC2cGFfS284=\",\"J+EgsH1EGqKGS+rOYgHErumgaqQ1f9Zu92XG8Qs9PIg=\",\"LWoPrHAMeO9UuXvWHUPoi1IV81LcaAYgHz4y7wah3+o=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"GSFP/cML15iUCY/TgEsJLFCwTtBy02FV4gAyBOFijv0=\",\"LxW84vvBnwBoL472br79H8CmfUPkJV9y/5ztpJLJh1I=\",\"IV/sfHx3X73TvSMX1zOZhz7El7bfz0NMYG3CJgO0GwU=\",\"AollUQxSRXsrDZ5JgS2lXwgCjyP/l2RiLyrxnO0uslA=\",\"J5jVlTDR1BpqMR6QycN/C9OJo5c3OUoRgpGB0fJsSYg=\",\"ARVC0gUBG0ACARQbQPDoGAUbCpg66Th3hpBr+nHNwfU=\",\"C6q+WeYUJqf168IXSsBtJ8p4VN3GflG4u5VzkROH6zE=\",\"Jok3oPoudfecBNnyqmzFbKUvPDQ1LO5VGv8rmeuVOnk=\",\"G8PjOgPmIAaekV54ESxLObs2+fPOXXXp1RYk8L6xUoo=\",\"G8QbBUiYN5GZI2RDpDMVCIAYwwPPqHYNf2eRSe1T078=\",\"LuN5YKtc2TCAE5vnXb8C0gWtvGiH6W0nitPkMKQ8Wdw=\",\"HN3idVf6nz4lQN/n3uwuqS14YjYaSnrabkto8vO06Gc=\",\"IhWyNFfHL7TfbLBeu25pWgLAx/7owepFU9Ew6at8OiU=\",\"AsCpS64MjYEWncPBs++7VE0W/LChGxi83GjEtnVsGBY=\",\"CcQzX+elAoiZcKdnDuhTeDdSZZTZS+4QCNUVBrC6q2o=\",\"HVTH+rZ8OTqRph4OLjjVt61OQ/ZGKG5k4xcEx0i6nbE=\",\"MAtY+xeBTqgW0Pe82cOu4MQR70KBkXgkGAo1R/j0G3M=\",\"J4Vawp+ksav3TaOKTOQt44KDTJDc61BusfElmCOInw8=\",\"IlnF2j2HsKBl/7Wp/TQPi8P/xBETt3u/ZqJhOgOwSHQ=\",\"D+Xkf5CezxK8+x6W0val+W6OlfcJGpIdIl+zO6zmI4g=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"LPYkvMG1eUFmlpOm7lF/5W3PeuX43BUkVtaM1Mg5ZD8=\",\"KE/E+PEWZhud0mkL6ZeWkbM6ave1IUcqNsFUxez5S1Q=\",\"FfM20jSN1kfRfP+oUHmQxi2TVdY/sV+3txgcCqyINzM=\",\"Kwl/+TyIg+YzJ/QAn50K1VGEhK7MnrvkKrn/OGvrLQk=\",\"ArDg2bto7cyA+WCpi5SMGhciNqRGHF8T0rfR+2SNHL8=\",\"IfuGLTqplJPjA/H77LZ+L/gpqJAzjr9kKxvOvN0+66Y=\",\"HXQuVZXWVIpOXN4/oaAk/AS6lQ3nau750JTvOmqoDgE=\",\"LwDmDdvE2MvyCKrOSvvojJAl4WGls9v0lfEVIPsxRxM=\",\"CTc2fXf0HtsHjX79cxkaOOxhsvfqYzqswXL8gI5uILk=\",\"IMwh6+y+tQo+e28P/Fj5XZvZmQyODLK1G+p8+BfgUBw=\",\"IVNyLG7qxw1gq9dqpAJ55gCnOaPCSy2ZUOfg0IRormA=\",\"FwQpzv/uZSd6VYQswcYIknDWWLyGVlpWGKThFWVGlX4=\",\"KIG4YBm8YkcEQxvD7TFa5N1MZYkRj2pg2SDxxJN2lqQ=\",\"D3WsUkm84JVJByEz2A8pn14ZS9NPggQz7r614CCBcJE=\",\"CaSH1g2Md+lBsD0aTPDpqSuDKLxDK0NzGMC/CWuMleg=\",\"DEx7i+mt6ZIgS+0vupq1Qa+YCkeziczPYav1NTZAvPA=\",\"E8bymhO4CKvFfNyYvVsyMmwNN2QLKxxYqYjFDdCmbpA=\",\"Dc9319csA8Q4QsQ9kGhiy/p4tg+JeAuThaLYHjFtlqI=\",\"GvTs75Ot1tF+WJyz6TpyQPIoXhjBiC2kmwmW+mSl99I=\",\"FlAPHi6xOu9AeHJKWMhpz3rzuwqOtQI2w+JGPOVFVOw=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"Avsi98DcyPBxDfRKU4Vk+kg12Cl6Zb0DJ5PETR7Lxm4=\",\"GGw1l9LpVAmDmmV3ZlySR8YdHU457ZddfqsEB1caPP0=\",\"JoqAb/kb23hI5l/P/K6Kty53Hc2eRJGLu/lh0CTE54A=\",\"IqchNOazRCOM/eKRqcJ8jZGnzoynXvyTKjrA/Ocilhg=\",\"Lz2TJ1t+j4BIPZTctZ7LsC1XhWW281EKOzYts4uAaZA=\",\"AhiAdCJ3N/VvLtAA+wVX2g/OJHsp4/welMeCSX3+3KU=\",\"J5XLakxxa/sTP1ql5BPX7AZDkyEAvugAPjUSXpCOkuY=\",\"FoZp9YU2mg6eHhgApKZOWRmPZ9qQIiV6447S2uLz6JA=\",\"H/oyESqBvGjlzptFoIvs7JRjztdm+Z4/cMUpW7KHzwU=\",\"JDBd6S8LsPS/dD2ZByGVfGFH+XEq0SvQlw01RxND8fI=\",\"JVPWrKZQ2zgeWlz/Bk866B0Q3PYP3BuI0LShgsw7hqU=\",\"LzwbQh9tR4N2sTXJ0SAxe0KQEg3BEhgDPiSeb2YHOKA=\",\"JFtL7YEHQAQ2i78CBtaF6kqtnsLFwnQEVQsTTWAwGFg=\",\"BdGJuWCoO0zQpwOPilu5/E+GoRlQQcPVrKgCDL+SoBU=\",\"KEL9gXkLBFx0gD91abJe/2yZLC5XG7rxz5kX+d1F7qs=\",\"C7gGslP0sBTax+xLkVBjXl2rRQXpGUziBGr3TbBub7Q=\",\"ETCAK9vxzkrTG1KjszgK0nTq7DrYIXpFQp57i/n1cpE=\",\"I2sIOoF6+nEUFV3jZdcVfVxF0/8ppmWChonJjBGIh8E=\",\"KxEYyDMV7tEcqKUSjdufvfywlE438w9XrpHoE0T3brM=\",\"Jse/CgfUPBHdJGCz0zkBRmbyzMDW+SbcUyBpPOZTAhM=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"Bi2GTFEbiHMzToNtEuty91UoEPKLS5Jw6oN+kRjdkvs=\",\"JVh+sJ0s22YoxSCnER7SKH+O99W/Fef/DZQVYWwUvrk=\",\"IDRMx1yBhgUCGQqIqXU3QeuC8TVe/2JypoevFbM3CYM=\",\"DO5mirfK/gyS8SWGtzVmpZ+n2eFGJDlLypnW/p4ILFc=\",\"BBCYsgIS8EzH/tO4qictN91xnkME95MB1Leubv7+qnI=\",\"GThwu+OeYhADWKZJ+qP/b4HRkV2pMlRa1a492VFSndI=\",\"HYbaqP8iHa8sWRDhua3H0aMgV1xD7GS2+KylPKtG8Ww=\",\"JZI8fEUqWcc2eV7C1pk6LSehiwEQewGBZNww/8bH420=\",\"Fm+TOiYu/sv+/V0SGCiegwYTC5s66QNWSBKq4MNXtz4=\",\"DnEEKMlTp2S0P/vdFmcH0QpqCO1IqutWLKY6GbcMHFA=\",\"FCEswXVYZRC7fgEHt+maGt175eynRF41sjqb9em8Jrc=\",\"B5IrgX4yZTXYmtB3+ReqP1yhgOmCqJYoUCKZUVvR20s=\",\"F7GwIJhGUo7SRFC1tpEMPawNeaNcEpfC4K1Ri+8Y7Cs=\",\"H8+PTTujnhTONGt454HMuG+oCiybkbU7K5F9MiAbsOg=\",\"EyjjdDJr2V6akJaDETRDswnHXdVZx45IWJ+R09Zn/Xs=\",\"GGsLZ5U5PP1KSWHw00zQ+G1JHsiFntHzlkn0p30j0L4=\",\"IoZrQeGGoaSZ04YvkO0hOLBSdT3BX7Q/cdBx+lToyiE=\",\"GiFxK1Z06SqPzbot9WdlinjxxkCZcpEvWaP8o/4QAQo=\",\"FpwVk+8w2A+PJtTCh6eQzsjkGuU8cYtaymK66l56f2M=\",\"EM/FYf0WZId3YntvKJ+VqW+7lezYTuWe1UHnuB7bTWk=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"L0TdmzkDu+QO1PChTwamkVEPJdaDlC4/7eMix/J9tWQ=\",\"Ab5pW67L9ojWYYBguFll435QrhdeRfCXBNM/JgWuPtY=\",\"FjpD2rzi9w6g01wQWtVNhe6psJU9Ao/k4RxgToteaaY=\",\"KVbdoUVUsKt9sylo0XK3M7+Soe/exjILDDyRFNqIu38=\",\"EPQd2BonklvYN5UtrlqcSU3Shf+ppA2cyxfXG5CY260=\",\"KArT/KfP87PL32eB8pW8DucCdcEKZAm3uMmRV3UwE80=\",\"DxKCbubi9GkMNgQQrOrydybmTQxtObteuLyq/bQmauo=\",\"Dp9I3G+8RwbGN1yH0/u84/54QnJQsPyukuB4kNP9lC4=\",\"HHqWeXcSCkO/v8k1HyzMhKLhorn0QIZ+nZJXoVc8Hz8=\",\"Gdb3rHM5UZwATBiTwVuQxrUPsJQQ6c5SO93YiqPdPXU=\",\"G5Lz551/4Y3VqKfHT+aXuACSHLGBvjiOZbOcyBFLMqo=\",\"AimYYBCBBRJCvk2ZVw5gyn/4Fqzd/DYF9GOhIhsR4Jc=\",\"F/gRVINsG4ngJgkKtQW+dvLaJnSne7ZRlvKRIxBvFeQ=\",\"J7Q5SHyohloD/HaZrPnHTnWJ7BKC+7Duqfb8QhX7jV8=\",\"Lr8EmgfZKv/kh3w+T6pbsXbVjHtRTOA7hf+O6msXARw=\",\"FLVd5IS/LtpYqHTJB67VR8NeiSWSqHBOMwRXppJ+ucY=\",\"LPMAryMlOuEllEysZWWtg34bSFesO5ADlRxBTRZ+RiI=\",\"EaDN9YQXhkoDmesI468M/Kav556DHrFMLH5q6QSsFPE=\",\"E/A44WAoFNI7B3ZcvLRAM1YvfIGS/S5FrhNyzT+RAKs=\",\"CjJKpKInOvUBWZG35H3BgOwsbN06+qfKH/ukbky1p44=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"IzWliypIk947t3aiGrzGvQF0bSHWDcmUB6WOyZylOU0=\",\"A3kukyditTUwU81HiJjnBn+lngqg+Xu10HW4Pn8QaLE=\",\"Fx8Jc7r/7Z0hvkfRId53F9kgBSBXnmdMNFdB7iwMmvA=\",\"H/VYRaWH3ui5C7EbJJDlq7e6zzlj93OUIbRx4fPLWJ0=\",\"BttY2y22/mP1TQWtuK6qnLifSNgkjkXWR7kUjR/SAr8=\",\"IHp4GYqK9hcSWF+eOqj7MVMgIyYS+DUp+xtYksMFJ6s=\",\"Dala9m5uCqLxoKxx+inHTXW7n5npRYB5+8Q/zd38G+M=\",\"JE3/FmPyk1vqmMB9BBIh/0uGYoWpmaBOe623kyqR5+4=\",\"DxZmwVeZ53qriaKzW+V7KSIroLy0xpCwXxRLYcYQmfk=\",\"Lpta7X/0geeeSclJYEsdfcJBcAy/XW53SOE/dPMOWsE=\",\"FoNPsrpGSHGxgV8Ulahy1j55UE1TJOgLNK30PKemiQg=\",\"FDpZ/S8eBAyR9yML4jAQHOTmMj7sc48pBjV0ZFFSBqE=\",\"BD29hTW7Iy2Zw1Ndw9ZVqWMyS/cNGjJ05A5kOTAwRxw=\",\"B7FmwlRFT0uNb7WqgAh4VqXzr/wkjIFHAzZGY/CPt2Y=\",\"IEfUStUrtAuo6fMfUhM53j5By8fvlCRee5yC49Ujnyo=\",\"HiPq3+jNVEPxWr/elCNw9IJUzzVSFP6tTk2FoHIuNFI=\",\"E3GxoMDvcakL98MhGK5BT4HVk/lfhkzqmhtgYHsey6Q=\",\"KcmwPz8C+qPWM7Zdvwg/JFZesp427R7uS8U3aIm1oPU=\",\"ARwNSIERt+17kem+UkgZ+ut01kYZhH2els2RalDRcxE=\",\"LTicmwSnqqDrqJQCM+NjDIuY8GGnVlp9XKryij+3cwc=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"EuNR/qNIOdZSU8vBzzLTnjSxA3dn9cK5BifZDXPTuwo=\",\"LiekIYilgpnJ2ARMQQhEIp0XoRgSQF09NVN5dGUurWQ=\",\"FL3xOUbUjvWgiIPvq1Et3xBZZCHQMYIyhEJv5ylHU2c=\",\"CaBop1UFfuBu+3/WZnu2I1PsnNCPvIh89fT8ssy6CY8=\",\"BRm0QJ7I46eGDuXJCVaQP9J/ra6JhUNX+BzzP+4OjPw=\",\"LoEMzx3WB+w296tkfKONQnEOqzNBQqg5i12kAqWEAFQ=\",\"IzEIwARnLdSAvtUtbyUXTNidGgJaYP9oiKl4UD3f2Ws=\",\"Bb6KJSfRHGwZsOXFoOdaC1TF4h5owYUElOT+d4TPzcg=\",\"HE107FrUP6Pz9QcCOZGBrFGqadkmDxsy/nwcy8IyoOw=\",\"LJjIgamTsayl7p5/VZzN8wXmlhVr0K1FFa/PW9Fo3ig=\",\"rIuPNdlJiFEMg/671JJf7ttxFTgPbE4WeqqboRrnOQ==\",\"KLLSt0VkfBUq0CHZ4efoeqF5xJYmNI/NDClESu5i1x0=\",\"Iy3Shg9igkjxtVofG39CBdXYyGE54YKzFRjrT6HroHc=\",\"LUVnba+xtOTy5TJq2PLWo4LMzjlpCR1IzgY1vM2fH4Q=\",\"I8m6szyMplupV59W3b2JZ9senjUwiJdi50OjInf0pW4=\",\"Lj9RGoZQsEk5Ue/hAp6sgAa7XUTyFFCK4IcNr3lO7gQ=\",\"H63vmbh6mNBCEW3I1opuunVgncu6JP7O7cV2pfjFbsA=\",\"E7HBre5XdV0sPaFf5Q/mMy5dXFtZKcXvjqA4cEP8FWw=\",\"IqM4/hpELWr+iG+cvKwRpPf5vdd/s6i3jcg2ilYT2mM=\",\"HAaa4bEkG5NUbM+dAqAnlzfdEGXgddqMuIGQpx/S6Ic=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"DNTOrH5/LNaPKq3Xf4qJo1s55v4geVgA2iCBOdOhI5A=\",\"HC7jWVr43lG71euFZ/GNPh2zg7+jeXP4fLNucqiMgcA=\",\"Cnwvx2PaG/N1N3WJuqtNaGhafT0j8I0QblMm7ql7AzM=\",\"G1DVqdbbB90/FOtZTFHBzRGaDnNKHyRZz5iaR+VXNZo=\",\"MBYb07i3jYJL0mxKyOrr8MO/KsKkKMJ0tFhAbLpHmeQ=\",\"BydHAnNFkL/S+kgEayshzSYaImUmwSbcmEGgDFt0dH0=\",\"IwZMNeUE5ne/PEOLEgocAr1ujtvHB3jka35fANFjNZc=\",\"B7S4/PjCyr9SclbISqzLNI0Zo9jkHK7KsRDz3NVj0L0=\",\"CpXgEeaGbIVQ5C777ddu3brioTOoLt1jCPTI1inUKWQ=\",\"GAUX0x8mVtHPQl9qquB1EFTHHdnfCiNsbASaOzPLTaA=\",\"CqfB2W2Zv5XXM7rrboj0qFNsH4RnMPRgcxsgdPU0/5k=\",\"DdDf7fah0OM2jY950VnVhfGBqtuTQp4ChzJBedHjfks=\",\"BXLfNZj4eR2D00Abh7PW5rOneKmkoz4bbCR0YHCjvxg=\",\"D5y05z07bBKPYp4S1Ans1wSHgeqCWsmMVk8R+r3/jRQ=\",\"HbPHJ5/1S6obV5otAKzOJ9H4DaxdoAWsWlAFLPTqYUM=\",\"KUKhh1cUoMANOy0g3CFvRmu8RIrzpj4FrvY1MHNQOww=\",\"JSLK/38qK/nN+DbsmauDLj95JhS1zvQM0+nwDJst+S4=\",\"HMDQhGVTjei8MAd6D8qXC2vDCf7fT0jHmsfsa6H0pqc=\",\"G+htxtyp2QsVvtW/YO3qUy4VEABwVYk8zWV0EDfIFLk=\",\"Lsxz+CBiuKbZG+0NIhAiMx1VQ2BCznInl8GrJfd6nys=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"HpVKBNvHM+SthD8jp/QCu6EmMkZ0RQ7tBH4VjENC91o=\",\"Ab9pNKVQIUS5lf16Jsi+T5UHFp99KWkeRgJ3zooGiGs=\",\"EKdwZH4VercfwI1uVgv8IZVNVWR8MglsJY4kT+xIYp0=\",\"I3n9CwRbG0PVm9fMJ2DIvFBV86RB+mKIyEo8fHSIpWY=\",\"JCVX3YQWngNLnJ7OLy3Ev09LNSCy7AxidUzdphqhN1k=\",\"JNDmWGfoPPf4ZeiaRMD6TzHfjq8gGUzJ53MYgyICD74=\",\"DwjjnArKWP1myWuyFpHAsG/FZMwwAED/2YWw/9q2uok=\",\"HDEZr5s+a1v/jGkV9oRysizz+eGHqyaYG4bD6Q3HZ+U=\",\"GINubNOEsDGxpGKtjQoRw0kQ81uqipL7Plb5YVzXAsA=\",\"ELK8skYlq6vajBxxhokDgrnOg4VNe8TyRg8w1waky0g=\",\"I3/fKAnqUR7wZKfANvKcHVVcCzLf0lczT/U1/kLNgfg=\",\"IbnMTsTAgyR598xeFbStRyJHelugE9nTWdVAr8Vzf2c=\",\"JY4ms1TX6+J5PNP7fDv20XDPnbVc2jj1cVjZuGUpjY4=\",\"HUjS1ED7J6jtH9+CEuezTMIxvS2JNAJBL5b5OBZb860=\",\"E4/hED1V/AJn34OAxQd1lHSTv4j3WnPXg7IcqpIZfzw=\",\"Ht+U+1tDC3hL54P4mAY0rZJEn3PjPCXp99Y/OmLzD/8=\",\"COrhODz3mi6mSCGF+0tyNFyoaJwW5nvQolPv8ixc/94=\",\"B2HRYP7EaowG4+BV00eRcD+AWne/MAQqQ7bwTjXd5B0=\",\"LiPGEnlKf4y852SxVuArwh8iiTluMKuEZTYjnciTjvs=\",\"FTmr5NJxcuSrU4CvxZXXI/nvP7foBjcF+aB8QKZ+Ny4=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"BNgAq2Ftcq7i8c+46qGU27K9ldm8nYMnlD2k9FvvwrU=\",\"IgeuB9zLwEfMzlQVvgxJQczSqhX/5PSo4HpgwKf62b0=\",\"Bk1xHOILcNUS8coQdFa9FYWG/B4yGdCfPej97OQwiKU=\",\"BWrbBcgzxdGYTH9r11sCz8HHsh3Xv22vG1JSLJaXgVg=\",\"LvwkGqcuFv8xq8eXfaz5pt9TsmIXVExTu4eAfV1hUG4=\",\"9B/tIssypEfc8z6YkZP/8hV/MHWEjtHkahgRKOu35Q==\",\"FpKR8rsTgc47FugSxUaJDvXOMsHXaNgSZM1xnk4VAtU=\",\"L5/B5PKSTYLRfH6n07CfZ76TVgujnylTfsDB8r79Ryk=\",\"E6yN4UVW6biG3jlE7a5MYBoB94+yY3MPRPfZmRuMfi0=\",\"Kaaa+OKAUvLFbcJL2jpeYc+z6cbt4P24V6GXH6kyrts=\",\"GA6aLhYdIQE0hvuFmBE/eigGl+iWQ0AMvv1YeJN4cXI=\",\"Kf7FVbkd+lekLLNoVg1LxHHHei4jap18nGqrG20RF/I=\",\"AjHvSFRz9zPUbw4qy/5+OWHQRfMCRCRKs7txZYY8GkY=\",\"DmwbOYZ+Ie8MYwqZdU0aZqZogZIlTUBJLOiNR+X6FcM=\",\"LgomDWG61ht4keYwbfiyMQ2LjbkjL9H3IZ5/uoZZcDE=\",\"F2qn2lJyeoUTSzEzCKTGKZTUFJvWxvxZ1ubA8J6shZ8=\",\"EpIr4bf9xY5YLrGtxGiQxI4QyFUOuLmxHYVBaU7zqfE=\",\"AyJotMKYJ6ZQZuZ9ceEMyXinPgRCuxyfZ7rMiDo/T98=\",\"EL6rZTjgFB/Pv6jaTPMHDmmytJ2hgY7IqeVHV6UbPBk=\",\"A2GSqCup7qk6L0sZlEQKEaVW0NFXrl2lcZLlbCHCglY=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"A0IHOAuvM3Ca7Uvyz104ehXzDdByAoMFzc5gwXN6xic=\",\"AesJuK0o/4GnshI2ZSlg/pvNyEyqayFUnak6ctksy8g=\",\"JUUxPqQmk8yMDWMV2L8kCuYk1m9g9vCjVqEFympyIL8=\",\"Emmxtub/2ZOPi018SuPH/rdoa53gamgx/ZV8/Dw797c=\",\"KB6ExsxZnYU/z4ygpgb3Cq3Ik630pKCZNkuMBS8Wmrg=\",\"Cu7j8nmD2OnuyNaHPLHL6zjD1ZEsdAZr0NvFWe2xLGk=\",\"D9xHq4ago9jpIX+q7hjZtbhunWTeulUBjzVdO5o2tqg=\",\"LDWmJ7VUBSW+rMMT61czz5fh/z3bP5tOi08GO2htLhI=\",\"AzLIdSbkCv7IuT+XNSBLys1MZDHGCws9qrT7fxILswE=\",\"DV0A/aXXyayib+xj8lZae2T8tYpn58KaZNDkUPsrlW4=\",\"G5y0tfMvG6OKaFhw16X39ENwubDkwS7TSf3yjeX0mGU=\",\"HGPh6BQaWkmOoQcT2L2OvF1hqtbgq0krr/Jb77uyaiY=\",\"Jqs4acQrTgE5RZ8TPJliQWB/KAZy4tskRGbT5CXFD8U=\",\"DoofMFA1K0Ojn95EPkZohNCZRcygnzHwQ++HKoVRG8g=\",\"BR1P4O1wskAVbk/df7M1HVWEHE/ZfRpP3+CRCTIFJTY=\",\"CwoQFdWwtqVyGHuXpEJ/fpOEhVFcvjLgAW0R3n1rx2A=\",\"D7+jJvRF45oGvbmZgy91+AEUw+rWIGM516Xt8nbuVLQ=\",\"CcoG3lE2cuS/NiXQzr+iKGpEc3uEZH30FU1SRSjoJ1A=\",\"KB26l+ckOx00N8Ym/aN+Q8lcvjmHvqO+nRmGBnLtRxk=\",\"Jt5Xyq+GNXUh9HComdBy9SpBBD/wvyQqhFtxuLoNxq4=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"L9suGDq1CWF/6qbgdcud5A5RZWIcKkJm+4lEcenBlG0=\",\"BhiEmGkaJ/r4yPSis0JdraGofQbFOGGCMjKs7bJdbe8=\",\"C/7coN1eUGsJG6roW+mbORNYdA+afGV4xYNJ9SIyOhg=\",\"B4sjcwK9xRPJllhyED1FiMixmgAreE6kIX+wRFXTEz4=\",\"JfFRgqlVWC31o/WNNmSLXN70u73d7Kk+rmyU+vsZgwU=\",\"Cgf9Hz6KfR8CZXjlmZ7Tx9Y9W//gf/DJbPiyPi4PeCA=\",\"C9ZL2UKle4wgnXYCvyIqC6XIQlHd5DvAmOk491oLZ4s=\",\"LL5iyXnmCDdxEv9wUIcBYqlNxoVWJw7npm5lMF0bFt0=\",\"CdocXb54jv/ZAOqHfI8JmvHAPhEjANngcObG+MB7ajY=\",\"B5gas8c76qTh53XU5KvOO8hut5Fo1vFX+crbvDDKl+U=\",\"A9ztZTT9B6EQfWxUUQoH8lwKELJgxzdr3rEMTnaNkaM=\",\"CYjbEYoZdP3YtDRUnhPshlRkQpjzOIusQBt1tNVQ7XY=\",\"He/xZi31Ea/hCNUyKrEE5wcD1ltynB39wrx0NF1BcLM=\",\"A6G7GpKWXCz85BJKir+CtU48o3R0co376WX34E+uDx0=\",\"KB8Mvz4Da0rhg3lRFrZQcNFuN2Idg7PYiuaemNjETYM=\",\"FcRXbYR1pCkajbYaItuHDFawE9CEmxBmOG6Fm5ltkDU=\",\"BnWwZ/9jqWFB6tqACwrRLejqytFcf1PmJB/rlMvofzs=\",\"IBqgAonAYUfEuGpSGBiIFGn9Dk+Rvnuyca/K6xA3/VY=\",\"AdWQraWpS0mRfr8gvcVeA9A2Kz9xmquGWVfHa4SkQTo=\",\"YBHyPBPV7D31lRbHI3Hy6ijpMPcxiTN3YuPU3z9xkw==\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"KJknp2mxY91n9xZUkKGk2fw7jsGJrU/O4HNoo+dadXM=\",\"BaDKh0guHyQhV7GAzQL6l1xyvsTCXYf4K3xT46aDCUc=\",\"KzKDCc/nIdePem6GNPVFJMTqzELvmYCT4Ld8JNX/noA=\",\"Hd/h0eXpRY/7HTQuG5mnOwCDYTQG+TLXq63IRCIEwGE=\",\"LalKm0Si4mgfde4ATH2cq2Yspmwc54+y69YXzkSe5D8=\",\"HvtcPm8i9JjO0vTmPDZrnasMsGrcTpL8P4aHCc2sMw4=\",\"BGTwy/asZwwZQg55YGvER+JZ+LIDpLoV9yrCIOhTyIQ=\",\"Bn48YaleKMJrVij2eceEPh4ELXhBpnAhkZTpncxhj4I=\",\"LR7EmTnXiMhT+F2ghVLdRYpIoZfPCwIxV60EpJpyoo0=\",\"Jcacw6sJTFboYUcCTt6d2r9x3bKUqzdlnpsr4i3Z4ok=\",\"C+wX9a+0Pm+v8qawmgLu2EVb2s8WylQsz8r/sRnqLAo=\",\"BUPKrm96/nHN6bgXyadGhw0sxi0ufhxv5/7P7VqYl40=\",\"FCAlw1hFTaHhyw3plQR2b6KX0fb8Yt6xSuC+xDDVgIc=\",\"ErVl/9BnCP2Yv4NTmRvSNr3FGMf7skP7BUl+x64Ik5o=\",\"EvKH8PNoY3W6hDHesBj+nCg4LQs/bULAyL/vaLmbBjk=\",\"G5ekxuOxNA1WNRPCnXBEKQmId69mGsPRSo5cry7GdiI=\",\"ARYOGSw1kthSYlE9V4UPpfirBalYd6/KzfYWz3Qpkfw=\",\"DenNwq9bR4Cs2T6ka+kFqFMOi/ial9QQQc05+pCXWIQ=\",\"KaLHmp3Hw56K5XzAABDMKuyGbZEGqPLA3vNfvCmzBMM=\",\"Gzn+V6Vki2sZ7UDd7toC2xpqBZC8tKx11SwBa7XwBKs=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"Lqr9KpQBgRO/7Kn2+QnDgMy4yZeIZFzYFpWG5mlopuA=\",\"J/fobkecnrh6TAXoDdI3AKgcLnIL8OiJpqXV0vKjhcQ=\",\"Ff1NLU3mQfjYA+SULxmq2L9rAaG3A9/Q8LUazCY67ZI=\",\"FyqOcl3Sm8Tiisemen+GveFcWLH+L4e7IdBjSbv2qFg=\",\"EYIOytAoeMzdkBv4gBEgNTntfxTBft8VHyN7jz81e/M=\",\"AVe7DsYieBvQSF7XnOuUSiPs6xGdrE+I86pIePCC9go=\",\"GgyL6uTpjzw2MHulqOyzRcxf9NM5YwAuQrNiQsfubxE=\",\"GTmGkaFjKQiefdYIzW6hh0lZeQi5iFt6OBj+3auHN/k=\",\"LJIpfvpNaJ54TdXKIkgN5Zse6RIDMx9E3Cwzh3eJqIg=\",\"KwWtwbbK5ve2ojgsUnyeSG6CXS9robH5qjlf3Hk+m74=\",\"DqwNQg6qItNejx3PNEpb+MBVWRcfWz2EkOfMWCRLYZo=\",\"HxTExB0zc2B0jD83wuHHL4Mab4EYk9GIkCaItD/3uok=\",\"Lf9JCbQ5hqUymXu2iBl5zGi8ro4Bv5yqaTid0GSiEog=\",\"DFy12jafH0+HS6sfcGtlLvLFCyl7U0D39sD62Y9vQd4=\",\"E8LHjG4rOWkdXn2jPOFPss/4PONXfxkJ0qmxtzgQBn0=\",\"i8vsVE+zdxjaLTD711fKYxh/NCRAyAUr2VEDFPb6Ig==\",\"EthFcXwrLHnFV2mFGRMoStVvL+TKNZ7jnlacvVLES3Q=\",\"EMDEU4YE/nrZagjqUzqt9TB8iVNKUdxNlY92mg0iWWM=\",\"DSpZDj/IqiJgZW4To4NybWSQQlyoDqxkgUZ8F/EFAmU=\",\"MDDYw8rehDjWZNPrywsIifV//u+RTGVeUMtorhTC8oM=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"HslTcE9rsuNZo4uZ0jDKekyOs340eSOKKC2nafBCW+s=\",\"HrZiaxe5/hKZZtGufyclFIJqC7h31Uo6fW/qjkbJSRQ=\",\"LDGrobhzx9FNgu07Az51uHGnJk9P8b65YaUy2KO1Bpg=\",\"Dbbh1D50edRJ6o4PpC7xSkHMiA3hx2mcq0gO3Yp5rH8=\",\"IdipetMfEZLI2H8IdkxPmo9skJQKbURNkiFR3IEvQnU=\",\"Kb0UC6TJEKbSl9MWybsS86Z+8KyxT2ivev423KtjjKc=\",\"CmHS/WDFf1dOGSYaSl8VuYr1jhCDbzF11I+nw2Hpjsg=\",\"HVk6Vx1NB7a2d8fJhyY8T57NXSZAcaSeamWp++pG2oE=\",\"CnZKxCBsrjdDDH5lVPReJRvzpMg0jmhtMQPUSjpTtWU=\",\"D8TFag5X84GsxMPYzMj5vAIzI3X2pHNDiW4BnyZ5p/A=\",\"HDTfGKvivWXGix5ApjQxGu4UKbSd4Kx6CtiQ1DRmWp4=\",\"D6iQsPTkByQomeKBLc7vwujl2qjUGWRhLYYrGC+whLs=\",\"HfQmXkvLhvjfEEJ5drSWcIQE0+uDcP/gbS+16yFZerk=\",\"FLdMXVV+wXgPOgQJxtU7O5cZBzTW9Itg6kLF1UwZSrA=\",\"ES6CtwLpnSWmL3m4LV8GIGBTga4hwxHrO5tkB+9xKic=\",\"CyKmEezexUqeFamPuu+b6L/+jG9ltZT9hkfODQOxqBk=\",\"E1UhAnVOg8/2qQyt+an7nJxHBMZSAMuHFE57vvk4I/U=\",\"CQhyKC6pcfBZNYfcjg+Le73zahp2K50AA1NAcwb35zI=\",\"EB6GxkDDuxecCAWnaubzJu+1zgx7WEwK7sLdrdcnyX8=\",\"F6EjboBhj2YcawkysTMrQIAqrNX+p0yFdauHo4u33rs=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"EjmEB5SOrs1X7Znc5StAUdmn+GIkH2guJvKTZrJuisw=\",\"AYRuvxfUU9Uu5rxfIXq+ag1apDCEr1ztF4oIGuPiBPo=\",\"AgVPKZPUhyN79uSphcOrrz6o8FeK1etzH5Sg3VM+hG8=\",\"GRG5fbbxyDaSqjpEFyqvMW2GOtrPchRj6bNOk8NJnV4=\",\"AefxGIcIIEKXHCz1RsP+cDHZVep+Nxz/TScOVq6woWI=\",\"EhcOGKl6LImwRe7FJjZVxH+wj9xGIsWTbQudKqpyHPw=\",\"Agmz0DQqa7vOprPsJW2u0WBbua+5rcsKyf8NQJdR8TY=\",\"BhROeB9Bl+dAJybtHgHRqd8BgH2PZ55b/yeDeQK/S4U=\",\"EpRE/A9ICK+KZLUdlNm+SHZK3hmHgazYc2DvydzHqKU=\",\"HxK2K0KzCPoLhne9Yum1+2ZEz/1q5D6srW0Sf4Q3M0s=\",\"Kh598M5Xt6fD/L1zxoeRxar1OHJwgvdzxB6U+iRDP7o=\",\"EaxUy88OYXXDTrfjZK3Jom7qc5wir/eSCK43G/yLHPY=\",\"JjIwwRdCHu2EQ37ZJoEKd6dWeJ/Is8rOLakX7mMRl0o=\",\"EN86WefsBq5ip0m8Z5HRubLnzwu89RnzwCPlQ1FOXFs=\",\"LuQ/fLwwXWTN3/Fc2Rt/bbwEJecGsQfmsUYxao7UxDM=\",\"Fem6I2w70bjv5DkQR9beiy2OvUXKWRKmGfdmdlWht1A=\",\"HXSr7CCqlprW8ZkVhcCc97LktomYp0j8hP4wRRHGtZk=\",\"Ba5yCR6Qbn+dlOi14A9N0LQwOdDumsFZjDYWyG16sGw=\",\"K1SMeQpEmt78U3Eqd3srkL6nBh3y9X0ze59RKUC/8+w=\",\"DHnjQTFJNGz2cs529Rgd52BBY80AyaUmP+xDR3ui+t0=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"MBeglyUVTCZyvBSbS803B3GhSAeDPAadcSYY4gdTGzA=\",\"C5OrSQRQQW7Ep2EVV2jvrF0CKos3EstBC3jkOCbcB/0=\",\"D370pX6BWGVQisXni9b/N8EdvEvwdzhk6UOxTg95yHI=\",\"KNNZj8nef45kVYiIZzaiOZAgCPTAxUUl4ZJ89mvQoEc=\",\"F40t/t4C7Jc12Drm7LB9h1t4NgxF2XlnU7UhYgUPJHM=\",\"IFXojRxIc8P8dgJhtySoyMhSsFdz4D5HgeA9zUEMh4o=\",\"IBr30nlzL/JKcwDUpjoyeg0VLUgedXAb+xrmAAGAjeQ=\",\"ILnXcZURiFuOA9oI0SifoCkjJZhX+lxRpP0/a77L6OQ=\",\"DAwS2eslzzfNRy0OyfTig4MoI2B8qCPjrTDeacsQvZc=\",\"DEE1havBQv9YmB0hG+17jX+8bAU42//jYQW6ROGLOOw=\",\"GtlbzE6ydXwHDXMvfyfKRfRoWIbsGiHmIi3XuZSHrvg=\",\"DpzXUyOjfYMYJamQYfCSDmWUrj4+lNRaOjOq5iDWcKs=\",\"D+lDduGcQCY97WI0DVBC9k43CODFVqtne2SiUt5+cgE=\",\"I2vlDw/hsVRUE9Om0sYM0oy4C1zsrzAfsy1oerhjllY=\",\"AoAz7DXoVB6je4Q9fNFhPHyV3m1qPB52iMwmrFwEM90=\",\"GG7qnEM/j1ukMYCHKV+uYAOmOlJQzOJf8xJ8646mIiY=\",\"GZe+MNVRwxQk3VksLfiX3t8TYxMgv3EHXr0V3Q6yNOE=\",\"DIa25OwLdnPIHiozz6t/Xr3PdA+nI5UvVVOmDXhmwP0=\",\"AgeepYYG2H+o6y3jdgemV2gESZCgMp+HexYUHWNnXMM=\",\"F9cikBw3hHqqH3SjH5lI2RbIgNVHvsew8rmxlXrZeTQ=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"DoGkxxBzz/+bwgU+cwwi9vBHEqRLb9+j5dAxrpN7pOw=\",\"G2Q935IXpl3PWafEpA8KirFtA0zBKByYGUDSrFKMEbQ=\",\"Js0vU2TG0JIR7QyZRGAul+WCtH6T+Id5I/A2fCXst2Y=\",\"FOTzjThbV9jO9nzmblGZ8v3aP/JhoTmppCHsHyvVQLI=\",\"Fo4CqCnHT4Ik1uwPKoe5NxTWCEiSAwatUTCbXyc2yZg=\",\"L7Yaa08U5H9uxk5KzclBgppIeCCQwvOZQ1OC/2e3dHw=\",\"K4NT4h6aaVrotY6KEUYOjddjCwc9si5Z74BPVw6KVeE=\",\"KdxeM682rjSUfCnWdHeHKeyZuKtP/9XD2VfOUyrn7BA=\",\"DzbW6jfGcFx+p7zDSVCog+xlBayJtrXUHMdDUW5odg==\",\"J5nK9qJflOgdn442IJPZxUQKqb6Z3uVcVPcSBJKkDPs=\",\"K80Bx+XEXKl2TAQ4WhY24kfkc4K0Q9c6kF7OBmeQ4Iw=\",\"Dw12IjaD39pTIM2vzHEaIDj370ZfmEeowcSQTWBmrfg=\",\"KXT4NmoznmZOm0JnIBK4/66QeXlng6F46gAJF5/WV3s=\",\"FW+XPQ2deFZ047fgXpbFsRpYLHVlUIJ5YBjp3BG8W2Q=\",\"GdqRDipL6dA5RAsY1wDd4vZUVXCOfK+rthgJ5BA8h9A=\",\"LPxYsKvg3vD7Fm0RTtw9DTzqEXrD3t3m5vT+euR2hQU=\",\"LAxAxhxlmN2KukmK2RmfOL7k45/Abqdhot6JCqu12aQ=\",\"HjBUOxzhLhNvcZpZIM3jvDXhuUFCqZO1IrluqXA9TLo=\",\"AS/D4B4nTBCfNB/S+YaRZShMPHVn4mBN1jjQ8iZ9Y9s=\",\"KpaAsu2lZSOcq3a3t6qAifcy/p8BZ8m+6snKixRjh/c=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"FCHgLPgpgLaKnIGijus5fgzK+ABV1apWLZtfaLvr7kE=\",\"IXgEQx0c+81uKuZK8H736zHiG6o1K87kXHOvXwfbjTM=\",\"LRW9+zqVLfMcreIcmfKTPtr416o/afwaFqPmvvbH9b0=\",\"J/WIX53cPsfn8rQ9bLDArh4OJVXvRs27dT0TUo4jnw4=\",\"A6N6FRoKQhTHi1IhfftLwyPIM6JeDG+lssnE4cPetnQ=\",\"Eab9pGuGdFavTxlKXwVxowU63ecoj5+oR5OzUW3Brko=\",\"Ak8izeRZrMq+jrqOlgg0EIavTNTATaJECwZ89u1jsZY=\",\"BTK5yMnCYnuYIut8tOJrpzVsTIZ8QoieGdgJA75DOho=\",\"B/MJ0zpNM0yjF5BIeXGXt/ZymjUYc11ggFczA0JSCw8=\",\"CUfzarzQ+tgA+KvyPt1DVltrbCa34kSvZScDaXE0D2c=\",\"C7ScM6J1HPuISFVNJMIW3bfmuII0dpupMEygvVgMJJM=\",\"H3kdX5A3G0S5JeX+BMLplKWE/EJ+Qhn1UcNSFeAi+po=\",\"FhgpnGCI4dOpH2y8CVbGr7w8OP1pH+rcjWeHrVLZdrI=\",\"DNTIINgq504p0ZFdbu1TvnfgbDbydZjPeHc7BrNi4Ck=\",\"FYVFGB8r17ZL+kHCbj1PWRfvUoUcAEan8YwmoFRLLvU=\",\"GvkeqPwjGdtpJbmUSStl9jG0Fpkllcm/r5P/5YOdhg==\",\"JsA+rJInsL4qhV+V3gyX0zfXY6918boyep5AnNWnGMo=\",\"GJsXbNiXXTbg73jy85+HgHadTHQRpa0nJJJ5gcyxqwM=\",\"BB2cfMv4LHfgWAQAzx+bUwrvze5R3FoaS1oULUFwxvg=\",\"J0J49pmVtAYmp3luL3Cx1rUvn8/x3FCWcIDZ8DMux4I=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"Acmimj+38rlcFTUDJ2Izy4seQzZDRmHZeiU4n7q/MDc=\",\"LLVTPR1zt7OFMoJhZZEkQZqaeWdIPw46PmPjpBctFxI=\",\"LpvxOYD3O8nQP01kTndX9KJUI15lk2SweGB7FYQf8iI=\",\"FGeiYTbcfCGuHS61Mf2a+ZPJwPeSOg8XaDur94R/9cc=\",\"GIIQzRZKMwzaOh7JHHtVyCEN33Bsuzjt5di2rZgSJTk=\",\"IXiRE+eq1RwC+LODHiEz4Zl+0xI5yiZ8ZoKwA9APRqI=\",\"DWrnL0ysOK+0+V9p6a81cd8OpNenJuw7rUycPOdDVD4=\",\"KfY7t8e438GkcNlfJGwc4v0xJrqmIKviMOGBwZHLfNE=\",\"Lw/mBx1gVGnhcADinKe2GO/Ln6f1spb3MSUVtwgLoeU=\",\"LJk7YqksjOuBLK0Y3psMqW4EG+axK+249keXprJv4Wc=\",\"L6nO1zhS8EypN0dTF/HKNa38jCuJvMTOrn/kCijwWJY=\",\"EwJk6O2G3K7sCv8W9gX3/UV3eDs0h1hlUiLUtsADhV4=\",\"BRN86I63Fi8sLun6VLVrlRpEefU//mVv1qX/TJoDhT4=\",\"J1xV4kfXLOAAaNskq7eG7tcZaLImMwRy9simCfLe42w=\",\"HNE8t38MhpxEX6j51tSRiffvfsAMtMANriLbM8djGXw=\",\"Btm2sf0eJqTKB+ceP51AZHyqDvEAqZD/nMS3Ps7oG8s=\",\"Fp3WKygueP9RVI/BJzHOoYs7uV6CYtE5sZdLKTOns3M=\",\"DAZTxKp/77E6tSEMwyEzqfqkVrvKX08KT0objRRwKv0=\",\"Ld6uRqQnhM4y33ufcRiu+fE1UqysIEYAWvF3SIFcI6U=\",\"ImNkbSjTm0sP9tIkPqDmcjlTNSP4P6D09tV1vr17z6I=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"D5HHohAWs22QEBZayLG3Fp2oQrwKJ0rbWr+ZqttiuTY=\",\"Gi4KgczHygEiDy5+z5GJpfK5tG5T/5LYzSOLXRledD4=\",\"vxjzgcqO5vn/S95Yl9Y1uyfexWQTLnRO+N1DbRzZew==\",\"Eylng9CANRZIMzjH3xtfz4H3EFIsYxodbbGh/rfv5n0=\",\"IcgvRpv2YFpe4VayUR4PZ+miQuPRFy+CaGSgYG71lK0=\",\"KNwQhlIhyY8lMH7Y6y4jXifVpdQas/ugm6oJCfyTmDg=\",\"I82xTcAUz8aQmM/+Ix5NQ6IMaz5NuMbRf8NGP+lAUfw=\",\"Ie3uoJNXCBWUTWKderRC1ZW25GjOuINoe/ShrUn7KWg=\",\"CuEHWTfYQTxkcbSB8EtfbaeMSGyew6OfFm3o7b9u9ck=\",\"L84/B5L1zQR/qLwE3kzfM+H7eBP74UMgz3lLBd8x6bU=\",\"AZ0SBNOL67RUfBaKi45fkmbFyI+dMMpgl6WTnsQTZrw=\",\"DeYS4OP/HsjBDy9mgydOmMCVQ5tXwXilvAwyLZTvBao=\",\"DvoPUOGJN3AceBq3nyY8+f0yXVjdTQk2xZKGf0lwdWE=\",\"IuHnd9prPSr+Ki9vdO0khxYwhec29YcIn7Eg5cFJ+NA=\",\"GFVhBaCIWaNU2wEZUen5xZZ6cc5ki/CroV8qVZ/Tl2s=\",\"Glkx+b+CbmQ9cvHoUQTlEIyjOa9JPPWxzDZFUqMJMms=\",\"GUc/0j3L2ghnwNdlX0ormd00Fg/ZCzoS26gCtmHa0Uw=\",\"KclqLYcNsd4eNboCs3RJqUfc7F43CPxZJBSstZgSxwg=\",\"FXCXpQ/nBOH0xUpVCI7bF0ch22nHt64bc5RAPOaUt4k=\",\"IekONDAt7M2bNYjMbFvPCr25CejHW/YYu1pTNK96Fks=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"HTGkJ0DkMeIQ/BVT8gMIzQXpP8Wba/Fmrzlfmmb97zg=\",\"B9XBIN9e/lrUTUPPeWb2JgtSOpsl2mOQF+fxTf2+Iqo=\",\"Hko5zXYZC9G2VuKYJnF1iok/x9ZZhZKfDJFFU/vnkw==\",\"J2IHJiN5D8hf6nLWxkopi/sW+QykKekaHbLcokURENw=\",\"FEVU7Nv+iNxvDBHF9rEf7iqGsexM+daXUAkaeDXtPSA=\",\"GYO5WiyLb8NzTHZF67SXuULaiHw/kcBU+xpI08ih/C0=\",\"ERPRoiHe8tpMt/rzaEzrn2vS87D1Jgm/CLJzIlLpKU0=\",\"C/ZMTvExDyhlBMJaY37DFobPuv8MEN3ycqkvb6ivhEE=\",\"Egl5biY+DZmZmW6fdC3cxNkqEv1Y6jhP4KY52pM03N0=\",\"Cx7rbEzS15O/Xnwnu1XBzPSo0BDG5v1JCWGZYKsSdlU=\",\"BLBdpQ92H26LLgZcbG7HTpJ3rRbRgpMRu+vnc7wjShg=\",\"AygIaq2evHqgGQ0Cmxuf+Mib2FuQIGeZ1/C5pngG6Zs=\",\"Hd+62ZhX5LhESeEHbD/3qAWFN40hlNlE7Zpv4iexa4U=\",\"CGzJPDDpvEv5DAnf/k43VcoicqIWQ07m3xRMJBSTAhc=\",\"Jh/ftARvnwSQI1alaC2UHZjedNOd4RN0vcJPxEHXlGo=\",\"IWcsopNl4lI4nECgWNmvPNI9hOmlxMQFtxl0iAN8/Ak=\",\"LgTDzma5z+y6h5id7RPrpfr7SPtjCI5IAQ2+j6Fjjb8=\",\"LIsl18dL5bFjwE4Ty8dHhzXJZiU2d8aJ6hgZ52CyCqw=\",\"DpzUVR+0rOjmJJG35qMtasXrV/tfgB3hsncVzxx3AhY=\",\"F83CjDi0j2Gki+fR5eXFfo08rvj1kVnLgBeyHWe+g08=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"Hty/Hoya3Z85tE6ppGFvpRqQqo03biUeA0owndaTMLM=\",\"EjZz978RDvPkG4GkRQoS3SygOo4gSKp29GvnZhksaP4=\",\"DuYushlX3M2i4nbtAqzco8+D7y04HeQqCVK6Ti5xoIY=\",\"Bnwmjzt1CJjComtXpAGOO+RclFMAGmIFzLtKu5oHaWw=\",\"FadLyzb5O1WPLyFe6NQcZMR4DfIx/6G5keEW8MblRfM=\",\"D9FbcPqJcPiOaJvP50ahNXuZpbczVBKdPUlnOuQyIQw=\",\"IX6HKRDAIOnxHqVDex28D0W/+aLAULzc+itsNFrBFFE=\",\"HRKptJrMyfY4YgZLbz0KJRCqmfHYNYgMumrAiR4XJXg=\",\"LJurqSx37c2IPzLUw0/x3ShemWU+YCwz7Tpuu2XnCgs=\",\"JHbrQHzCVby2UJkS5nSM/3retMuTOZO0+MlkPAOYj+w=\",\"Bim5cXxBa+Uaa7mMNxYENFDTn8AgeOFJgSE5OglmMwI=\",\"G4qIyP6ANY0OFTL36iMvFxblYTJrUAD1OulI+j7/fng=\",\"I3OfqfHUd+lQ/01j+C1jI5BUaHkWWBm+gSGXcwBN/Ok=\",\"DnUi/NJn6PrFfIficfTL0T1Ij0wlrqZxnCoXz95KqPA=\",\"BYo2IhzzgYhHvWBCMyM+aacYzs8mK6pFfPHlzMuf9rU=\",\"CeGSqeRW1IOvyB6l/Jz5O7kaAzNOtNI5dTgCeFxsj90=\",\"dMvLc4sDPZ6b6DdWmtDf89j/wes+3kSJJWZWjLZraA==\",\"KD4Li5FVdkXBXe/S2PbiHydiGtrj/9Cn1+nzE1kRAmA=\",\"EOrecMSH7izV5D1RUlzNDzRaaa1zW2A8wQjBe0mBUuY=\",\"LwG4K4NGxCV8Fu/5V7IgKMVQJmf6aHTOlW4D+2k58hw=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"BmTnja1rItQzOh+coLpwitarh176jomXoKhUCiWZsMQ=\",\"BOH1fqsUlUvQshYZrONyuNiurYYaxV8IKqO8HYJFB04=\",\"BB0ABzqA95C+uNS04qxk+Af4BtX+kFeqGW+IDmU+bHg=\",\"LS1x8vs9ckaDQj+SZhyPRBVl0uWoeLR69of7m3bhc38=\",\"LIDx9zL9GYNlFuyufVPxRQdu3+hXps0HSbhUBuz8FPI=\",\"LExZeMvpdvgRFgA+ggEKKRoAgtvZLarLCjm8sGCo1eI=\",\"E+PIdBGLmRPYHy2L30qHoB1uUh1lSMZtfAQh23FN/6w=\",\"HAq9uAHNc2/qo/5/mFFecveo1y71a1lS5qDoB+LGhaY=\",\"C9cFxXTmmPr8LQl56S6bvw/5LssKcTeL4Wi9qIwz0NA=\",\"BJBnxSLh8Dk6MgVXtBZ28lOdeBXvKyH88xDPYm0ToTM=\",\"GYk0TEqgJd1qM8DyyliyLqP0nuXSnwFQ7AXaRKa6vS4=\",\"IFmDmmuRkud8YYLm5WQAK5MK7Z8yjSQGFwHOeEQI47c=\",\"Lin0JeMi93gN/ICOZ5SA/KoHYfdSQgpJB112oIXoDig=\",\"KzEOIuvBu/plFPve4qSM6jbB6TimknSG/KrIIB/yU6Q=\",\"AkO28z5Dp9HtGefxuBYzFsBAjkVhgNVy1SMhtiKiKWw=\",\"MCjJTlY7xlRYSz8zWwvDMS7A/w35jTx/LQLXEOHHZCw=\",\"DOWkaZqWslH+PICSSIddCx1guQyrijDsb4guXOGCP6E=\",\"K58lp/t0rNUoMeOId/lSl5cLMIbXiIpcLhwRzh+rgfM=\",\"K/tYq/7UhE+Yb+xEGd2Ng+sNigl7crhMgccqnrTk99U=\",\"I5vB5NVfxu0sHkHRglLAEfxYjjWP6DnhB1+zRP82bYw=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"CpSMpcH5x9Z5xHbWzetkg9KLj/8fSzJYrKRTEtqWx9E=\",\"DFyD19YkaZw2VLMsqYpNpHI8RgHNdgnbQGvcxaljSp0=\",\"D6o5j2/GPMNrAK3c/WkjNImo+Wysj6yNkcw8O1AtLi4=\",\"HbWIsR4Q66nFGtbU2ZDbtYDGTAv0maO0EAbbysJ34ec=\",\"HLj93K8FD+tpd+9/uCYl1j9yhuSgv6Uqn2Ad5WO82W4=\",\"IhVHSNcrDgDw8z1tSeCLh07Sxjj+TDNkit+IYnSLL3E=\",\"GL1BU6EOvtt48CsU6iZjqFf0WPJwg5TGKCiM+8gCsEM=\",\"ER3uqkl9LTLpPW14Pa36wnJvhIcJNHLsT+jDa74rtdI=\",\"Eu3WR2d6vqoNmfLkWWvWThYE9pVStpccisO0TnzRCio=\",\"Kh1Yc+SOAKveSQKWmpIXgkML7HvgGkKE0EVSGWdd+bc=\",\"FHDRwPM9LV4rIJg3bRbLoHOMT+J4zPw7gkh5U1RIM40=\",\"FomUYzZrGT8N+zmzXfYXEY1VB0VhSC4KkSg730CAQFE=\",\"KvEmMe2epZ04fisqoUo64dKMxJbn/SjcnMFJEgEINp4=\",\"Bu77M1WG0euGLAnHnto3Er9k7l9RkTwU5keH9Z69T+o=\",\"JWdod54OB+Z3ypCqflFLtu7mnOtH50n7kKwgkj069So=\",\"BasVha4msQ+4ZFvnTT4a/pnyVUbgcI/RbuJJOERXTa4=\",\"CbXqmglpAqEE5bH+UYipjqeKNz5/m/J/Yhj9X3H25q4=\",\"LTS+1Hyv7MezfKJZAen148ZYlQAB1yhyLcVrceLUYZw=\",\"LQBx0gGCTUP7BXoKUjxwHSuKNyeLUXjBjtaRDL3O2hI=\",\"CncNmU+SvaWktj5l/4zDX1nvXbwgcy4VgPcD1BtbYoE=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"GUnfoh5rJ8cGCe0rzHqvT2JE4olQDEj9EkVWaDfMdOo=\",\"GOrPF1DAk+ELGPRXAqQnZvGAP00q15OZuGhW1W1R8l4=\",\"KcM3nkJ9TomGKYnWOnIyH7cxl7ApCSq4vyTBJxg83I4=\",\"KfpQ00SL14PMWa/ol1t9o400EPzOaAIQsylfivMJKeE=\",\"G9bTXxCaNUncHaf5aVPxw48GnppEFB6F5pkINmzWWCM=\",\"Klj2dFuQ3+l9P4lBXjdcQ/RkNRv749FAyr2KNDMT66Q=\",\"HjTomKCC1aG7RShw5BvWfMWTIDHqivv0YNb+TCU+xvg=\",\"HyiE4QtukKC7FcbsN9JpSJw1qf1fL4pUgALKuvGJvjI=\",\"EpdxfSZtD1XRqNg+hcIpSKiSJ/R0CLCmu6iMrU5AZPs=\",\"ArnZgBobCmFlgrZbhNW3baHW9CiAfwdBCMzoZ78eysc=\",\"BwH3cSlZhBmaEHVkwJGN08OXOAvUfgqfDOzA1X3sn+s=\",\"GilMgQ2D4/O5vPcJ3SK4EAVd0+ahHkVrKE3NQOCEomM=\",\"EBAyAXIb6N/cVVSIJsjyxsWsJJpmB5UJCRtxF57tHU8=\",\"ItZWAJzJrQ6ppgy9TrBYyCD7U4dxTYtP9SYJY485UvE=\",\"HUk6Qp+NufPfVxuesdJdQloJ115rrH6hyMDaFBRFul0=\",\"A9GnbA/su9Hrw7IDcIlChLvpe4z3sUu8ldyoOeycTIs=\",\"IwaIwfJs5l1oO1pAM8xbeB/zjUpOKKrq9XtJXPhDsKU=\",\"FZya3qAu6xJ2wuFgCTCSntvX5HsSg+0nPbXr3FlrxnI=\",\"GruKgbRilFa2OZZaD/7m7KrhRZkNl7KwVUb0f6QW5X8=\",\"Eq0bIanALaMBjxh6xqVON2+PcfzjIZM/XsilWtvNDuU=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"A8bFXMpHQFgpVs7kDOMFPontiC6iU6Nm0H38mlCMLng=\",\"H61T9Em1gdDtOd1Bl12TMHaDZMGpfZ/VEdDfFss/QI4=\",\"H+i8s/f7+cIf7bWgrk37fKJ11TXHhHsjy3TBglG3Juw=\",\"IYuTZn7eOUrhbvoHMV/3YW9oZMuCk7/TQY+dWxR1Y5Y=\",\"BBpojB+0Ids9hxamT8OdDgZ3pcQ96Q/QTdnzYiuus84=\",\"KYfct5Fx0hSBegBhJxcWlWWeoohYrhjG+o5QWk6gIDM=\",\"FPRawS0HGvMFBZ3g/AKHeNXByK+0dtW3s84upqXzJQ8=\",\"CVnx3sgcX4IlwfL/SuLGfHPk03l1b0Dun2kcgu4Ixuk=\",\"CsB4ATF3mtaRBp7LxPgIhsC9lRjZ4EuZFG0pvX2f/Jw=\",\"Kn4j5apWaLxxmwzCbc94HSyjWZh/G9b5CZuVN1HGH7s=\",\"CSwLiX02MjEjvtbJncs7UOOXxyLN+qqb9nQJB6S2U+o=\",\"KbFnTB5LcF5/2T0Qo4AUW+dZNHEM9rQ9JIF8o4aZ5wI=\",\"JdsZjhpd40tpdKo4/1NXLMxANkR6ZUqn8GhgIjPNwME=\",\"D/MXStWuGGYG/6y9VZNrZYOMK+amNb+MmUFlKkhbjG0=\",\"G6+wi9vDK/a4HSAmAF46xjkK0+NvkXi+IQNCYupnTpA=\",\"Drz2/Cl8NBOGYc6SNefAFT7aHwyZFzlwRCl2/4Se7xM=\",\"DXKSMOXWkTp3l0byl141GX7tg6phO3+dy/0vcTuHQLc=\",\"IIcOJrEU4eIMcK0tbDwpvXiRi+pbvX7IvApgmA5gHbw=\",\"CEoxBcy+uBN5MZAcwKSMp0JuXb5NAJXBHWPQ+Rxk3tw=\",\"Gx6bHVnV9FGEEqgoR1ylAET9qhw0kEkbtQjXKWQ21bw=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"H0vqDzxdvwtCYbnfNeXPalzDaXPQnws1+tPc0KTGms0=\",\"ASIoSTQqFE3isj6L2Ej/0JbNMzL1eiRd0+v8JgMqYYY=\",\"DKezPxEpqY1ATogu0KcHN1Q3BiSMc3TZqmRwWDskq3w=\",\"GPgKh1yilypNE9QdgaHOxWzzhHgLVzjlmYjZq6TLtm4=\",\"JCj97i75kS9Gk+6cKlnoLGJeI+mveemQ3XiEQQhG+Oc=\",\"FUeBorXEQB9q0oCfuawj8xNqjjlQ6m4/CEYApzDELZU=\",\"LFVNtkFTNgbBBTLq/iQ55I0pJcnW4YPdhfDCSYauOO8=\",\"A7iyiLHhof0vrvq5tOANnFA/hXTmcRK75gPuo3uX7Bg=\",\"CTqbA9pWG07WquOpj00qnR0oFG6w6RRkwloOjy9gEcA=\",\"EIhD+NTu58nfhr2aLc8APT7OjB+7LbgKDiJVl8zFQoY=\",\"HwQ6cstUMqTHjxRQXuYwu9I2foPxjbBH3vs/8aSVcV0=\",\"Faj7BuDBTBgSRLP0PUln4oujK64ehCIwN6uxUk/CZBM=\",\"HdvJUJZ7F2nNtPhoSzTZvCWwTesP5fsRetYJpbf0BJo=\",\"JGpY4yayQNGGGJCLE3hWNvBRyhw9Wszdz3z0rxNitck=\",\"HPmaQLgmV1i6aEQaRbSZOZPXMqizuItNmDpiBEwL99s=\",\"195WGfTFRgUEOeea9fLQuWTsQKySq58zxhdiPJ0EeQ==\",\"Dl4WUEvVQp8ZiZUOj0GtrMlbyUeJ308p61xiOpzkrYc=\",\"BB81p4lqYnu4hPj+p4LLSHyHLc+4Lc59DmlBdl0ewUk=\",\"FTfevBg+ULJWQqlDMnObnfqGEO+Cl9ljrU8lEUiXZ1s=\",\"LXAkQFZ7zZV5IKv+PKF5bcEFqdbWnfaPcEDUXhSCUVQ=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"FISeMOQj0oGLAzgkvnnplNOylKd0XUe6egRBLJdqTYY=\",\"E2gD3JtEUnooMa/WALIk0742pPzx8bsS9vPZx4pJtVo=\",\"KM7qxPO4VhWGV978bsLZiugiKDhiWVGrpR3z2SMjr50=\",\"JOKp4qM3lfKe7E4+UXHNGk8QKzhwMnNiSNUdosoJfbo=\",\"F2t8kxyE/FGmlb/GNcmy1+OMD8njkRml0nC+OIp+y6w=\",\"DSMPvIujDqQ/6+TX1XzWRsFnmh4agGZjfhnXtfeDxGU=\",\"Cj0XeFL7FDLq5M6oAF3/6YTfIzcFo2Lqh/0xhlixsQs=\",\"DqTiYn8bDxSoT7cvFAJePy1Ah7XiPhl7S+GN6bxdB8s=\",\"K1pVhuGF5q/5ykLdqvSkj8vrNCozt9jDAzT2mRdpXBg=\",\"CTD/RZUOCzpVx7XVmxuxA/Q9rYfxDcAa9PAp8TNIYNQ=\",\"E78p2ITm8vdxjGK0my5EiPeKvzNx5g/2pV+P5hQJOvk=\",\"ATR+xvcvHmQkr13AfnLI7XBMHeJd+NApigbOh1M38W0=\",\"B/mO7DfqEcapU+1AdODeAxnHHF2Axtmn8aftFkLNs+8=\",\"H71UZ6woQm6C7pXU5nwb853bsNAMjtyZTQGwhegQJfA=\",\"FgrSXQpbSBcR39U3Fm6adY9GrphwXAmjG7XcnKZy4Gw=\",\"DRsFnXYuJseyN8JSnBosBCARKwSzQHHzZXaOMcTuRPQ=\",\"BXbq8i7WupJHp8HNXzbaKNPIL+43Ap1aVk6uShSfLKc=\",\"GJCXkA5u0gZ0A679jLLWj4vhOG2sLLBn80bQJ7ksE6w=\",\"HWEfGsCKL9a1CyNhLNmi37x30/HwHN8Ml3dohe5fU48=\",\"IZZqxR1zJEVgnK+x+kUqZ10W3398DJMqoTbHkU2oSBY=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"DEM58OzwQOygmozmi4KeGBdOGDiXjRj/yFATvEVpvYA=\",\"IL+IKsj6K4p5jAvvk8j6r3kkjd91IL9mFbjUQ48+L0o=\",\"Hgl5hLR6uY4/GvMOjbCusW37clel1xe3SgMCwMZb5aw=\",\"AhJMRQr7RRyDRZevzerjTUlPQrg84WUl3dQmiXy4UlY=\",\"CuRvSqxku7c8vEhhudZ9rHpblGEYXxrzk9MODxTmyG4=\",\"KWCONeRhjy0x938SIthGHF2vg/j5ahw8IuzldLrRiSo=\",\"CN2lBJJbjnKXbXIluTSLYh1BHEJyUFT5K8WsfyDuEGM=\",\"LYPndu6Ee7YGFl1xxTlTgYg+7+PnLbII0FZxFmZyiS4=\",\"FYxttPoSBAJ28oxS/EF5xAwLmSzj/2FMyKM1uty1Ylw=\",\"K6gayH4bpKCr01701ecICY1bPqWd8CYwHSmwxjkAHRw=\",\"KXykhjbCLhtBrBDahNGJMPQpMpe+LeZyTUocknzmrJI=\",\"HsL6NmCIqj0k+qiwhXsO6UfnrEEqXDg9gKUiGeMDZxU=\",\"DvjpCrmg2SIJ68eufu9ZkTT66tg9TNxqNeEUhvJW+Ro=\",\"GhujfOazHEbwaxZgB7hLG1pyknd2naEqxFoFMpsasl4=\",\"HOWP1rtMcPIioAzhXgNKp/lR5VdF9+sOidmUXcZIyow=\",\"DJa0rrqvIR7lPCWSYRy9gVzYrXmrh+tCaslR1GUgDzE=\",\"L/VW6pHqQBCuMismzD393iG3eBSu7s0iTYN1S2+pW5E=\",\"BR1NLjgi1AdgenY2UkI/iKuKxB2DYDLjMNy964ndlNU=\",\"H0hNy9SuAyY8EEPixn3Nhxr59oK9Bj77mdbywfWNyJ8=\",\"A2Jca7vrpBzvRBnPx4haas0jbyPBC8IeuW+jMpsKqAg=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"Eywr2cPfMhuDKfmX1R6kdW8G0gWZppsA2fXTJ/QxvZ0=\",\"IjJx2zbFpbc0iTZm0F+MI0ctpXUMnMIYUlHRzomM3DE=\",\"DkQtE6BInI/weSIZq5XNy2qsA9EmF7SY7tT0N+npD4s=\",\"BJvXcU0BP51K5daw2KGWbjtuwpkfgJOOmUltsSd4xio=\",\"FoY6zlJXmlGdwJg+c/ORmC802usxG0Vc11s8f3XEpAY=\",\"CwQ7u3qDXpNEA0Q6hx6LCXieglMUxVPdtZPBF+2feik=\",\"IjPkKxGzFRLNZmLm4tD2EjuEQoB5/SWCPjmse+CGwoY=\",\"HuwjRLVOu10tiSgs7yC1qCl+ylInWd9+6C+TBs9wE/I=\",\"B9PC9/+n0wexuAz+f8T9xXHuAICB0aN7g9g/korsvtU=\",\"IEC3LrThMU4sb+KLDhDNovREuql88VsRClVxrQBvNqI=\",\"CWjGmiciOdRlewLh4RV2NWVMJJPF3CHIDkWcNpQ8DH8=\",\"ET2uoJHxknmnXRSPNAeUBgUUf0Enc0cYGi60XaXh3rM=\",\"HbnKrYpzSXq+7tTOEhYtFsjqVqa6ZoDO4CU9cBDIsMY=\",\"AyOQa1MbA2pCJUT5p4m0gYlHvX4QEKnTFH37KY10fJc=\",\"KhewLmBcZvLpGR9gAf6NDAVOn91yqpEtYbFNs+nl/zY=\",\"ICFXAfBlvqh9oPUfMfsXAiov8S/4ajp9UL8Za5oXk7M=\",\"L/s6jVBQ7+ZseY6uLjf8sOdcjTCYRjco8SWNPRXpxY0=\",\"BCqvpQhJtQQSTqeIsLp9OYzne0LAnyVhixZhr3bELXw=\",\"HwdgxH514piMfF8nKXdv1lbKlQlZUAgHwzsV0qILjQs=\",\"G0EyRZLTf6+oF1rx2uHa8JO3vQdN6dvg9HvyRv0zgpU=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"EyZ4K+BkuCLNVKgtUm4IYfac0FSSK3gJyy8caFslVEI=\",\"AUCUFGRDWk2kJcJGJ6AdXQYgQpyvK3TBzYIX9uwMWVI=\",\"AW0DgzPvgmW0Q3SV01JRQCOGtEi/LGUr11KHXNar3Xo=\",\"FLO97QKD2PgkUghgU0crqqlCFPxk4j7vqwT/OmZu95M=\",\"JlQj3QbhvDDXulA2Hfewg3EIC2HP+lz8tN5rhAzfzhE=\",\"KMTTEGqlUUJShaYmc4U9tu5p+CCjgBCx6YbsslpRfEM=\",\"DvQZbwar1L4sbHfN09n8cbcFb8+CuoeKPA9KZCGE8z0=\",\"Ca5yA44H4GMXK+7vCFsWAgTUH/8mEWSGnd07NaqoUro=\",\"HmU9MT3AhaGUc8vxc6ZadS0wCsEAGyzG+GjFrtHVqVc=\",\"D8jUeQEwCD99h2tDejaloHhhvT/eOUpyl6/7oAzAJms=\",\"CIieucAvKAXVmtfBzBHx+OrH0QyrsyTNKKTOtk+rkzU=\",\"BeIkX7NKC21PyMfZuY+qqqV4pLxlC5zPwI8vlFlled8=\",\"HzAxFgIPzxUa8hId4p0SN8A7idJ8zd/mKDwe3ZhajnU=\",\"Dw3ra8BvKVTx/25/Kw9YdKQKZ2IRR/SdkgiRPj2i7h0=\",\"E4vXC7Me5BZoZDHxG+Z2iZn4qIHNXe0/ukex5xW5inY=\",\"IyPMGBptlgBAd/yK+ngAC2evfrpKN2mWdTJnUco1h78=\",\"LMWpNSQIOdCRat8LoqE7NzzZoknz3/KdTmNuo5uy1Hw=\",\"LC9+IRU5dA8TV3GlYTvhudVib4S9m9PQhvbjPkl9QwE=\",\"I6OxKURyjZ2K7NW5rCwehoOm1vzebeCfnUmBV29gv3s=\",\"CYxghajegGLEiCqAqbU79gXNbTr96SW0vZfdDO1jotE=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"KxqkjtBhMwZBt2EKXKO6A5e6xa7RIgq/H/PAU3mdV5g=\",\"Anz9Bf36qxDXA8VhOsnDDy/eBIuFMV5MrTmnbCYlh48=\",\"LGdoGEz4RXOg6XBwSYfzYnz09GfnLYeKup/w5sMsdt0=\",\"FmDo22+yKZTNIIh4A5VJ+FRkJ4ptWT3Ycd4Dxf7YIz0=\",\"BYNTHv/YTKabUX/e05L2NlN8ysOVdTE8BFZEEes4Gzg=\",\"Gx82kwbZMS1mUwIxfS74uopWczZOu4S4LeFWrMvGhIU=\",\"JuGuHkYyXu9i4K0HArfCBBHlaHrIvIsMQvIpStUR42o=\",\"ImeiSEB72NwL6NbWCpAeam9jGY5Dzp3ti0jzURfMpgA=\",\"CvPa6CiGNg514mXyT5KEF/NAT83BiJYQTgfaxUQUbQU=\",\"EyInIGis6FOGcalh6Bgspzea6AZt+ogkA2hWRGzmgmI=\",\"KtbYevEh1LnTiNw70PshYN0NQ9611fzncLP2bSKoZaw=\",\"Attiitg724yHZCqzZ5bmRGSnHI3MB9tBCQAU1oJOnlU=\",\"C8x2+DAePar9VxInzY3Tlf5bHvKogmKqqjDq4b6Fpmo=\",\"DpU/PipuqRmjmEXjSo//BodPQPoMAhECVRUj8AUvKsM=\",\"BO1glrWSUs7ubavOSUUBKzr6kpYZ4ST8FnT5dC3mzps=\",\"DEX6vkX61FfV52O6b0AeA4qPBRh6UBVuLk9z6esMFSE=\",\"Cc2d30JvB818py5Ku8PKOAY3Bc/gSgAjltkRAfQajr0=\",\"A3EkwT6PU5PQLH3ab8ObmG4Q9+7n602Oi2eYrqi/gRY=\",\"EjJsI7ULTyrXrSpuL4HnZtqduq46hdUlbDb1T5lQTBA=\",\"Jwl/Xdhua9DAnsB+0dVlhGOC0RMQ1T4R5K2drdotKi0=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"ITcZ7MFAG38UjZC7TOsM/syx+EoDZwplzyBxqXxVGIw=\",\"A86esuWnjgn9j5m/NnfPtp2NgfrC7VejeW/aTEp14Gc=\",\"IIX2su0xQi8u+MnoEyMgqep49in0AFD5rh+NIhKCJCM=\",\"GMQrEKAjmgeIyoD0C8qezrVMziitcCWtc8BEH0biXXs=\",\"AiltRohdftyeL0VSqPYeAyCrkRBAdroJNBX1Je4b/LQ=\",\"D0ZKR3dJU+FkfIgjwfDnll+vbo5Ro5LzQuJ/a34eP6w=\",\"Gvpacwo3f3WV/1mMEaJX4rJdyWpxpTZnHpjE/vj7sSY=\",\"J18E1f8cgh7ycp9oUaNyx9tivT1Fto/QU3V1OpyjitY=\",\"GrRemiqh2uxFhryGa6wbrnjYuKoRKWLzTFwZpFiPEbE=\",\"LCsrJ0ZbqPbBnBs+S1KtnnbfhnGsOBfYxGf7fOGg2bE=\",\"A8wsbNIt1YZBSh8Zu5uw+Lff3nc2nyAz8Da9GUEkEOc=\",\"F7ba9AG34IvZxBTQZ6bLSE7gXLLnwHkawr9BXoR3Baw=\",\"BDCEIk//9/suc5gbPS2mRYjnRuH/Co5BAhz4FOhGzvM=\",\"GdJRN740qnM3nxkQf++qt+1IW11JEkIyqRNBdHgYsSU=\",\"+8AKx6q5J/yrOMwfAz0Mea5Cy9ivi5xnYjU2GAX3lw==\",\"KkUuV9g137FTxdWrcWxhVYamkvIu6LtwzTLOeGZ1uFo=\",\"FO5Bxb609O67hErSfNcSuLe3072Wr7GEF7C9g2UOz1k=\",\"FR4bb2SipqxK/T7TrctZovJG5NAYqFpN7CmGeZi96x8=\",\"DbyVvpV37aJsJrlydngKLEQEbv8tIO8+IzvFE+7x0ok=\",\"IULADcPvVuWNT6U1KX0jSf5ahyBgmkWd59EO4qwgZzU=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"FPnjT7jPkCA32gKH9/1ZRg7kLYZULqAn9QZfT9s2IDA=\",\"GvBy7zC5NJmiFocHHZWW+MByCVn1qt1HMBWjIPUl8+o=\",\"H3n49DaVHqtIOEUVjXmK9JQMQ7bHYGSWrHeH4j1RNWI=\",\"AyrBMn2R/aPli2SmKdBmt2GLDSuxS/AFT4qZ6pSn+dA=\",\"FpBSjruA665ibkx614CCARBsP2lYqPzMqvvxBbuYKWk=\",\"KNVya74hNvcXy6IhQkNCCQ+JIrYH5h/dsSeMkJCHlyQ=\",\"K4xs2w2kPhokNvjEOrN0Y1a70KQK4PS8KCyPJNIFsqo=\",\"EFfhop4c9PAWsK5LN3yylG9OzsFNip6QbovPmUlozMc=\",\"JhdSmexLziebXNhlEQyw9yU+A15N1TDceOmN0WegLEA=\",\"L+TROp6gaC98bHni+qZCgjxuxhZoZKO+zDqpagYCMHg=\",\"CPr2DydUxviK+DvlHU2PzZGlMMf+Gn4VwEZyvi4m/4A=\",\"ESWwuQeCaBBQYc1Ez9U+WbREHElOTmIVE8Dip4l/KsM=\",\"LKGGdCF8CBTCAJhKLm2W+mrXqTo1DMuFfykd+gprfIc=\",\"G2VOjKN3eEfX/r015xVVtf6nVbFnWBuRuOZudVehN1U=\",\"JcteVxrvPF6lQjMvPMZG+UDOHqmGKEB0ueyaJgKPw+Q=\",\"EBUqGROvvkQYCvIOxZ7DKjk1/StTHZaPcfA2UFT6rhU=\",\"J9GICUL+z0+eRtEaHj21PArpOFpnYQTeEiyFxnphs9A=\",\"C0re5roBcHwjL8Fz19s1b9bculZnCcyB3OE9tCVoXA==\",\"HkznsCE7OdsI0H+4YSePwy3tDeYjLH4FD56T5Kvs9/g=\",\"CeVULyuEgdY0KQELP4mqLAGwdoSwjEBtDIXL0P0B0ss=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"DiR0T80oJqJRMZEfT6jtz4NZf1LHKQaTKljzBH+dFqM=\",\"F6J8/09vmi8qG//JmPDsAzOMD8PT7JeUsTr1Cz7Rd74=\",\"C/kNvmAivX32iOqvO5AwxbatDDYzs1Gr5ZBcKisuzLI=\",\"JnjjwfOQ1UWWltlQ2623smT4KE3c7669Eg6yfisZeDo=\",\"Jt+BBNTNs3fSKtNE6UK3YmG0V/UthJj6ad5OG47TdZk=\",\"KcDWreraaKhp6TTSNQp3yR7uxtosDX3REbjwPXOi9U0=\",\"FRcpXHolYcEYbvzm5UpgcDB1QLab/+Yjq//ImERRvxQ=\",\"DXmJS9cwDfb9BKk4NkODWMxNbmkh2jhSCgT7yPtOzpU=\",\"C9pzPve1P1hDgRApuaXEEiN6crloALzcbHEiPVcVeRc=\",\"J9kcXYIvVqeMhvJCLKR4a5SqovPgZvvrNbgcfhbAobE=\",\"Hm3Yx+c5+t2RiIhgrfA5LyYCcqaNMrkU+IYkk4R0MeA=\",\"EV2Gg1wgonyhbArvWv3XOhtrfKbxIRZyCyNSdMqJ+18=\",\"JN8PWTdrG1452ewqrXdiePqyiAR6LfXfYJkNz5NapQ8=\",\"RYhRZ+6OaVxqx56u6W4IeUbFhASQEqMJq47CCHSRvg==\",\"BEtw9eDfQxmCdoW+Jyoyo2yjxBSLl8E72rK9D+NluuY=\",\"LMjrZYvTr8j0IJocmVZnBcr8eTMlcfEzl5lAsU1zbxU=\",\"I4xEyE7jSbYwMLD7Avp2U+VHxKYym5kC3jYCw8T92g0=\",\"GaMstgKfzJPbKwHeuCZKnrFX6ZXKIaoOM1WJsG/3e+c=\",\"HIYS7JiqknjKqMtq/b0AwC7i9VHT1SH/Xp+SdIVXkz4=\",\"AqZQn153DMUNcY+FkPX53ndINy0tOfWahZySEe5L/VA=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"G6sSLFYBGL7o8+f74XEqsrKnMSr2H7mCC3fe6NRNbe0=\",\"JxcuPrUUg9rAyY4y8F+85odBTDo8wnqxwnexPOI3ghc=\",\"Cp49fz7zTROM2vNrkr/wa0tzvJzjYVZQV0EZW5jQSbE=\",\"HsqCZnuf9q3qCeqEDvy6+l4gbJcDfgH/uyhBL9K7RK8=\",\"HdjfysFXhDz1+U+bELqiHwDgKiy1GTlEw9PpcPkQzXc=\",\"I6HmiQUiqJubiNfbQHsA3GikBpKjZpNt4OuaV7vxwhk=\",\"IE8jazm5E23JL4E1GSyHyYx5hPHHfLYGTHHsBHl1/2c=\",\"LHSAuJOlKP4A0c4eTSKzML8oZEP6RDWQpj4nqpHuzVM=\",\"DFNwoYOm91tpjA/G3rREfLpd6e8gAs2OspBK36RkWEM=\",\"I3MA2xeajda214RzXN9GQNYdRLUY6ohI2DIc2it7R4k=\",\"DZxYMxvqAsyrS57wPrIC8ZVbJmxmZq2IYnL9znsonac=\",\"D8z0N1vaLF21E+LdBjjqHS7a9BwsdUSC+DPhfGLZIBk=\",\"DEFOlVuESTqabIJ/JMOfYqn5wsi92fdsOITRYhfTDIc=\",\"IFRNifzHlBrEly5VKDANDDXVplC4/1H3KXQAijEtQKo=\",\"GvWUEkIbUgwRcdi3QFfbsBZT9BCC+Fa6Wqart5pDw1Q=\",\"L8GkWUQGE9r3KNoc86JYwJO/QXBnJOYmCvzswT0yS1E=\",\"F3wek+4O1IPHPxSPx/mJHL/DajOAdbwBSYppsOH4xJo=\",\"CYwAWylZ7elCVFLu5JpLCAMjfPER8EZRH41Wvt76doI=\",\"FYZtgtJR+a/GksGhFc3FrCi0dxvqhi3CZkPm2x1hl40=\",\"Anl+gdxvweIx9QUdIoCBtG/lP8OUUk/0JJY9qakQcLs=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"D9Jdpf5izlChUl/p41Zun/DJWHMC93jXdWvQXYxqqvo=\",\"KhpqeJ6QiVLMjC5y75WpNxeckkiwkdAW8o442xIxIwg=\",\"K7O/j2HR7YXiF1U06aW6PRfcrc5F7ss9WHSaA+KwT70=\",\"GjCojOLkj+Bg7/GOHHvKYle445NRgjqBna8wP1/mQdk=\",\"BezTJbNX5HSC5OdJzIMFtFrB5lqn3dkVrDfzCY39LZg=\",\"D9M+7S5RBh7Vy75d4Ftu3pFS82sRRoOH9Ripl+T3IhQ=\",\"CV5MLK7bHeAqbGCwhrjYtnua/RhvZeFY0nSNJRTTew8=\",\"GELTh4bbrJQAkpZI25IF0llndkelAk41yqsIJgdE8BM=\",\"ID3vz6YhOlANWniNseD/4wh0QGNVUCZE3iBqcwPf82E=\",\"KUGp4+29Kq1hOMt1gshSLBrEiFtxnfqvSasKE4wkxlc=\",\"EP8qIBfLo8AkER2wfmd1h4lr934Gc6koxcLJ7cU88rc=\",\"Am9Faqq9rYHTOTDNSDQr40xIhNUsF8YEtF6b2AzzwZw=\",\"KONKQDHOPluS1dkvm0czZo6mV2K75fu/gssuyn4gjZ0=\",\"CUecA6vi/EvRH0ENf+lYqmSq0e2c5G3hLhbc4aqQB6E=\",\"GQGmJ1jDuVN4/9g29UOiwsGSLruGQAAYSxopFn7WCLM=\",\"JLvkKZ44jgHJbX3mG6nprUYlb42MGGsuOjh9VYz5Eq4=\",\"J8hBcNCkl5jfyatNapZzHQ6N53LKlRw+u3mTeNIgM+A=\",\"DxKpueDPTaCMCFdV9C8sg8+fmt2qvgb+2vvRzLdpbhs=\",\"LjT8Wnnz14Wf/3PuFZ+KljzBgM4jUfJwnby/bsCi1+U=\",\"BtKyzhVwVhjRV0EnyTJFYNLCIgZdoMZp/9IwShvTFmE=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"BbIuKfmRQQDgnx2fqm7Ei4SdBtu1Z7l4yOKHW47d8u4=\",\"Eh19gOyhTHHTqdVo0fs9F9hIMSrCFyJQcCnsPfYdZKA=\",\"JIZEKU1A/BLPU4kmFOwOketiYd203lpUWQdwtaY3keA=\",\"CPxQ7ilvn8blCKI7ONGAqpL+x0O7XmIBfuSj98mK6og=\",\"LyM9JIfxjiKDbfiTmCpZPHS3KU9s/juj7bgnK9JVkXk=\",\"EPbZQCL9LAePxtrLFTKCACH1DyiLpArkAWNm36cD6NE=\",\"A31d9+Fc+VrJxL0CulPm0Dvd1nekEr7k4GA/iOodbvI=\",\"EjVMixgB8Q3+bDlLCDF8fob0niEuyTP/9J2LJlU/PnI=\",\"B5Z53SdWvgJP6xuy7gqlBho5dSz3EO1snLWI8z7ejQ4=\",\"DTtCTulFXxNxYPod1TT2e/Boz84ZE6B1/fHK5+gyTKY=\",\"AiczgoHufaYztLOTj1u5gfg4xAreSgcQh1FH9Sb7rkk=\",\"I0rCI1i1GTdzQWUcqT2tQ0gHzORJCHvUOE9G/HMveZc=\",\"LgyV/75oD6diJZiTOtqypXxHKgBzv/4QwChHObJnALY=\",\"FeDInMbDan24QdQnCFXR2biEkZf5sIExtiXVptm6aT4=\",\"L4lSrYOx/7PBpPvRBk+qxPHJzDHQ/xVqF0eKHj0lURc=\",\"HHxIGD7CB9q2jXOq/rlgR8z2aDGMCERT5JXr1fkn0XM=\",\"Ds82Kiacu45WwrBTfxCKQSrJo8bjUdDSfTZaTbfNdeg=\",\"ARzVb53ty5kcDGzZyaDe+RHty5FdwZBDkHgqfukNDeg=\",\"HudOIXi6roQt2WWGlDgcyTsBWSxlUWCSPUD0rytT7t4=\",\"EqKDDiTIv06cfwGVJvccxXuteZXzjG7SAwa9ewDw1/c=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"FOEu4sL4Klctl8C4EaJVhLvMyb4bZ+0aohQbLMeT+8I=\",\"BPMikedjYiG6eQWpo6HK6BKtVwJgyBs97ZrzNhn94z4=\",\"CKCBvxSX5SEPbgQTyLUQ8AD89KRr4KG4RCxbx+X7d1E=\",\"AoRXH/z/5wdRDQ/riVYGI9t+O/V8lnWwL+vOlft5aeg=\",\"IEspighXfBJp37jsm0s7UC7W/DMDVEBH1W1BNdPAGrg=\",\"BISz73vPXWOTS9z1PYqjcqCwNjsCQTILqjcB6KHQ2gM=\",\"Cdo0SR5SyGWlsIDLl5Gh+4AVLAQzWx2rw0/6atYihCw=\",\"H6PO9WN08Ah4NyxUBw2cQcWrmrHThZaNr5yirWfUlPU=\",\"ILVbObjfb4aiyjgeIDfWSYfRhExZn+soKWSJVa0W91g=\",\"D/HFNpd41P2W4pXCG+9N1GSPrZUx9mnnBK0uQXhnRWQ=\",\"BMTJIRLZmNVzaz9GEgQENpycDkKOR1d8hXUJ+lVqFaw=\",\"J6cvS26YlpRefVhOQfvTzV91hi/G7JRlH1AzyNo0zQU=\",\"Kh5Gcm7ZBoUE977PBsxwpfZFgRvWW+V5GUtUSGFYWZ4=\",\"Fdrctn4wt32LHl3Xntw2w9jQr7Kbbn8CB0VekqMB3JM=\",\"KcG8q677SVR0OnoEUCZHwRyfGN5n4hyBHI0rnz7YLa0=\",\"B9CJqFHRxDrwXmySQ7abd7EvDAsN0lNRxSLOjdmf5bY=\",\"EAPS4eU2jRMYmS8YG3zad4bsPnIb5LuJCJvXlMbp/Gs=\",\"F0fCh+zjEbVISt7O9CNDTXHKgHkkxUpT4xEJ5qUC6hU=\",\"E07/YBvejaMOYomLLgXBf2501KwxkZxBNjiEzn4w8Bc=\",\"Ci2S8ygIKj/PWAmVhnHjBNqr/bVwjtwswgcXVSa6Pic=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"BOvtLUO+WnTooAyqg5ifFsC56CGU22jQciJhSMCj1xA=\",\"KaskZjys5ZD2l1FQaQVmcHnbhNM/eCBKMck+e+ofqDk=\",\"FDUaB9OHlDz0a2VJbGa8bzvsjqIA1iIHSsJDDq9SHXg=\",\"HEI1dqB18dc3YWiyB6bXIDcSxSPGep04iC6GQsj87gI=\",\"LAVk8cUqwtn0YhF0O2Mv8HshCRbeJY+D0E32i6Dikig=\",\"B65+ROvhf8JKBsnKqveHwvAHxkD6qsa9F5B5NxKmlSU=\",\"DE4cVmhx80hK+6fTZKt1W4ObCcV3FBOwwx7WoP0vQpM=\",\"F8Tyhz4toATy7d6gijCpzy4F8Zb9MzG29/Eifd2Of6I=\",\"JvCoq3tbCsRZPJiome2S2DmDfVIMX28K/WXaaaEgXOw=\",\"CU3PQZFcbH/6Fo3HE3r6Z3gHbCtj7WPRqxt4doG9YKQ=\",\"FSQCNZEtnF6tj+7MKaTXfY2kfp0ZCXYylOoYwCfxus4=\",\"K/7G0SpUiw+5/RdscgDfhsO9eF2GtRsgdr2dPoJHMSo=\",\"FZVN/+TNAYrMQ2twsCngFGUpomzbORUUaHZ7iMgKyC8=\",\"H0ML4moR9yJWCzSLHFtSaJTLRY2KMLSYh3E9djaDAto=\",\"E2DeE1H/Z7Y8MSqMrMKkZbuC3909eSJEBoKSqsCDyPM=\",\"DK5Ej5inJZfmeGeiTrbvLBzl1FT88cnrTYTSHOgVkMQ=\",\"IOkzbdED9hpU8n+rZeX9GjF+dfu1siqB//J65MivvJU=\",\"LjbA7oUzQpBnMOeiBhw6otvf7721VLOjMMDvNLunQCA=\",\"Ib4Qguy7w6MWydc0lcwIxgCC4cIK09TutVVT7vGpbdA=\",\"LHzsDUfHedxbYU79o5BJZC8f9AmkC+icyT4pNm35bcI=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"KHyNM8C9i5/8w40aNQG0YnEaQYMzkKpikbVpEyHzTzw=\",\"BST0kCl7//FuJTqIoCsDn0175BxipHUl1hVVj7uRoxo=\",\"A6b3qW60KsqGz/fiQX0kXcGejHk06R897bQprE3nxh4=\",\"FV3RvxtTGcWZP/1DW6RfCgrI1H7wY0IwCLhYuiFIRNE=\",\"AZcKDbVEVdtQjzaeN2NFtH19+N1Y9taczoMw7UhyN3M=\",\"ChfY53kH4mpsI6Uu8rOQZNoBTwMLV4XzztmKjarso/U=\",\"GZtCoNs7gp7eJnNtx/75Ty8hFnnMpj5137aiIdSJeAc=\",\"HUktfH2qgOtk8zXpzfMGsL5LQY+37fMuq78Oid9bjmE=\",\"F8YK8Ckb95b//bxX21nQOJfGcf1ym71MSY5gadBnGtM=\",\"DGRuWONEK/Q7IlWqC0TEXIe/XJR8pRkuuQZDKvtHeRo=\",\"J7wjtkiOOOLqh9zr1jYN1CDX7JClhgHrHjEsaZipUrM=\",\"HFCnDavu18ecvi+Rsvmh08qcytaK+gpBl0UWCwPMB74=\",\"ASCuckq8x3LsewrJBxm+cunBcFmxkfblYmIEhOaR9uQ=\",\"Bp+EBYoFZflDxPXP9Mk5WBl1FlFE8dIcBSF9ZJeK2AM=\",\"FKCG000MtMBQz5lrCGqjoh5FGuZY7gsDfnsOwo9ZBbs=\",\"L+L45nrCc0uLH260CPX2L+iHgLN9TQ4zlshWEwnxOS4=\",\"GxJSaN99ngHXibomxZVgaZiapTKLvUa7OhyD4ptU87g=\",\"MAb+FO8UuHbC4eLHQVyYt4kYzskn2LcRxOEZh8LizFk=\",\"AZMy5syCIbI/15JsQxtox1WDA2okt+ZSRSfqz3dbW+c=\",\"J4B3XP4a4f6XiXwoYUKDP+KJAorE5RKFcZ3xTE7JZ/4=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"FHTZEXJtmBMqOIKBlvcrqeoo3g5UCCK1MNU0McP3h8I=\",\"KXeMt6/Jn/YtoaOT1guHu4VzYGq3rXzQzmR7wZhMuxA=\",\"FIPRDDU3btegJxaBmNhxNYx5r7uniF0nwBt2Z3BkaBQ=\",\"Gowxwjn69H13O9ug9wgB6sCsABxt+ThGPM6BmnKhFZE=\",\"LFjge4abwUuw7rZJ9cfZwni292OYdOxATr919Y3sSDE=\",\"HWSYUHMoN+HAfJ8wPWJ4uxT1pUyhTIaiY3kCkCPDxtE=\",\"FDBthmgoBQIRkXDaFBKPajQPHe1+K6IJAExC+mKLOgw=\",\"DUF+z9y1kkQ3dCYFBzZWMH0DniPcnP/gXvhBbp26Ohs=\",\"G1iBR0pGec3nmktjJJ0fmNi0F/EWFZn2clRx9YIBkVY=\",\"LFceCzXMpM9MpxIcneDExar8f6b3VJjo7FeSj7HGfWQ=\",\"JjfZoDuiCmzX7ZmmnDim1wt50FkE43ydv0arLJBYN3A=\",\"HN5+tKaFpS7NJpFpRm6qiXyng0AYYOuitgJuUT1tOT4=\",\"BPgXy9/URTka5IL+ckhWegyLghNjWNI51O8YDd4vSJ0=\",\"Damc5iYmdhGPUfhjCdUojrZclf3a3kFwRkA7/bsIfX4=\",\"JQX743wxCaTR0yG3IHChUmJf87D7dsqSXlqiwFiHmto=\",\"J4MAcETy0S5dswc17ayEYUzbGxn2mQHg9gHvs9RM1bk=\",\"HhRert+GscXKvmIt9M/92BVebbiR/0mP8LiH9M6rEk0=\",\"i9aQrz7ni20hLPGEuWnzES1FzOtzhViWI4IiekNFQA==\",\"BaVGLnZKT0eAElJHy2vvqrfk3A0m4tdfRAh6+fYYe0o=\",\"EslyFAeD14iWY8PJ2lzEPNGpdARx3peQimLMIdQ+bn0=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"FhCb+fDu14xya8vefeQMrdEjQ0YLBLqTpS2WkgH5f3o=\",\"HoX0TAwnHvi5qaKePMc7O3gsYNTtfMdiTWrq/45JIDA=\",\"Cd647MO7LN7bqWq1vYCxXUq8xJtlKOhMHtaXH7Ouy4Y=\",\"B+vM/w6Xuf/LxqKyVr+IhznA2wW8XZjZ5ZG+pNdLXHw=\",\"ISTkpCn6mT0y9kH+vsCyW5clNCh592r99Onv92COuBw=\",\"H0IX6iX6/SpiqnCe9yNlxw1mpL1NdW6td2tAUhsp520=\",\"EP3dxflo8yu365VVwN1ERidx9XQkp2HNiEzQwVKjX+Q=\",\"IBwPVVEwXOn+JfJlJuQJwJaMgLngZVU4A6o4va/wGC8=\",\"Ac/qtQxWiz3VwlK3y74oZ4k5Ix0Sh1gP9iItMIIRkf8=\",\"K0xgu4nxqxvuIfRc843oM1ouhbUT/jqWJO6qG/YlV2U=\",\"KF3GBYuA0Ygp7kYyKs9R1ELsYawzGvQP+rbNMKB93Ys=\",\"E7m9fSzDNNL2DWJJ7ofQXjVv0YKDDTs+n0NcYkD0dgM=\",\"D+pwf0SInuR+jZhZxSP5nEMgg9hf3WqMdeG7V3HBCCU=\",\"CAmncDbc+57LZ3/+Tgnuf6sVesKDMKveYa+CRyXZ508=\",\"FSuxp3Oyf4JAbv2w4VV8A6k5em2H1GH6by4G6p3U4gg=\",\"Kdp5sa+Lsf0drN28rHGsKN5fvmqqnjD0cazFMvX+kpA=\",\"JSQZVCv8rsxXczsCdR9RQoNOk/RWDXuVuFrWQjBzvg==\",\"yd3YrtnpB8J/zDYQZ/G2wQTCsKVT5tYFPS+C/Yzxzw==\",\"IxG/d11CniuYLKeMAVz7CoY/5HU2JcS2PK+OTONuN+A=\",\"KnJUfo1btB8GIwctQZvPOdCOWup4G3NY6VdXoGZNSyM=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"E+5PFfO0JaoX2hf2sfXQDPCUVKlRWuXHGaLS3PtBES0=\",\"GQ2spudSddNt1lw3LTAtaYsaA3V8C0x2ieWbwaAWn2E=\",\"CZSsDhmfBERuGYh9aupQpOlBcv4pgYv2A1TpK6PsbTc=\",\"GdNevPNPbXLSzHOKlo/yrO5y9aVM/t5RBIIHb65VxFA=\",\"E7Oc6ZawZL2piA9abuFnfXMYUe2ciV8ZrdVZAlwN7Lk=\",\"1TAoA3AQhCwChV7Y0xQxZmIdhwGZ3NBry5cNMLittw==\",\"Jqv4TMy3nascFDwSzXQTIMmBEZkymsGxPCQPM8sKFHY=\",\"L5TQdaOIYrVhVeW9GP7wnikmfA/gMlmvISKr2TUFQgk=\",\"HQc+k5ihUouB0qFLr5fOMIE0CwPCLs4oQIzShMJ1KzI=\",\"Hb67+utC19cn9z+T7AZEJkzRigGA7EHbClWPO0Qwq9I=\",\"L6wznCT+h+N2OuKd1tNBrKE1lHkvbUjGb64xtGQjT74=\",\"CJ270E0xWinKTEq2nNBB6z+EhKH0pyYTneAQNATgc7A=\",\"B7m9V18qttLlemESuEwC/TjiWYd5S2VIf0l10JhXjuA=\",\"JlY9OtgjhLDDvarxdww81aBIc7I5/gbcIZAP/soDRsU=\",\"JNVSMqjkWORzjBY/gas2N3RZXHt5cihH49Y0HhZQyAs=\",\"FfamvkD3Q1LK9ejA0nyKltIz8413h1bdiwlUZBakKnU=\",\"AuGVqsH5i7b9iUtsjHjQM52K2LSPZ1MEbrQ4iXymfPo=\",\"JAxxTyNG3w4KhL/oW29iSxd+L76EslPMTdZ8hPsw5XQ=\",\"Ffjl6BxXHkLQujaP9ZrTdcLeZVWLYcY9CBF7yV3goTM=\",\"C8BHL4IDdV7qX0pUxCAik+cs7c4vnml87zKbSi5PNl8=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"DI2aOnv8f1MoTT8thJMRCXnSxY+jULN1crqOy4fq8L8=\",\"KkMQRKi4D4R9CZr6jB5y1/IYlPOUawEmZVcg+KbHeFc=\",\"EYGheR/SQ56mcHiBllJHjWdnFUx6nQSRg3PMBy1Tri4=\",\"DwzPsAghdCb5LMXf7HZGMNCGHG/5viRZsicmZ0Gn3no=\",\"BB91W0r6b/Ez6ORvyCbJs+cLRdt+237irFAOR+mESp8=\",\"F1GjdDnpEkVU7LkuMAbYxWDWEJuYVwgAwu3FkAFrVwk=\",\"Kr9+c5DekptcfSn3Xlw0G+hGea6/XN8hzilcrliBhlo=\",\"Fz0aS9R60xDBIn6NJsjHrAAyWOyYy5nE9doQwv7Qvpk=\",\"II0060rHj5NO4CNICktV7bJuBE2aRgCIBBE7iz6m4jc=\",\"ElYW0AGhj4BVCXDQEOVxkbE1dMj3N+TIK0e+axmE+mI=\",\"BnFwPrWSIoJ0KxlPPC1JSEDocuYPpud8ZvwDhoxxq/o=\",\"DjNUVf2wyTtwohrn6mBjhIEHFknWu3Y0NlFmemIF7YM=\",\"6DuA1cd08sTiqMf33OphwLDwAMe83Ka66Hga7cJRPQ==\",\"BYxXz+xOt76B7qUa3a+xNbibLFoRG8pZf1IS7thUfaU=\",\"Cx8nq30IF+o/lJF5/BNbYJOMjCC7nMDOwgsbyMX618E=\",\"CuXenZuHPMQhGx/Z+y4HF85GBy2l99hhBWDJWCt/Bu4=\",\"BOUV9Ko5oKhmfPBqv/BNh+vvTYXcMs5kqAvpBzuOAWM=\",\"GfbGyGuiC+yHJf76XucM0LG7iLmyCEeSfpY+zG9G03Y=\",\"C5evgOZdWhKpF4NR/kfzxnQbGECO8QjNc6VqeF9lf+I=\",\"EQAe30tXhZF/tLo/HLB+RvjwOO3V66nGV9w5s/aiVME=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"H1fpH4GMtuwuqJpMUkjiHbStI4wR4oJEVSJMMWxt5Eg=\",\"C8vJKVKe6rL0ABI18Nx4bnkq8mQcDbl9uxeAqmEaxR4=\",\"L/7CpDy2FsIgr0vvEmWjaMRrDRwEnnnUib1i5GFmkGE=\",\"GM+jm6q9Oh81LR/yVxQR42/wxyonlqQOn8IjjYnZk4M=\",\"Jthu7aRmN4KF6T1GjDaGq19kmkDtRqUsKcK5rtQTkc8=\",\"ISC65IvE0LAZES5I89rvWzi5mRKFw9A+FQoh/AOCbek=\",\"KHKrHa0O6+gQJ5lkZ7l2ezjsbfvvtD2VN9DO/0sNgDI=\",\"DK3Qu7FbEKKjtZds7WIWhuGQaR3c8pEabXkRqs4O5zE=\",\"AS+DrDWy6XH2jzdeI5woy/yAEPLSCmCf+kvzyoB4hw0=\",\"JHtY6dQT47lkf3IEsUH7FZnuoV1QVSC0fWHBGuprHqo=\",\"AT5LUxD6+1YjWGMxaeF+NDGoIeMBoXjDMnn1SFKQ3mk=\",\"HaVOOPWQsYryRxOicFc+LBLitWmw6QmS64gxIRcmk3M=\",\"KLhaYGIettfUYz8YD1FbrAdXozd9/WgYG/amWpWZEh0=\",\"GhUkENeG3FCzKveUzqm3/Lf6SCMdU2s8GNvMdQlgYDY=\",\"CSaZ3u0pK/7rcYx2uZdTilnnrFSDQoMtr9ZGN+c48aA=\",\"B3S/NjcQMHP+cHyqLTItmpBE5L2S2BweC6VkZ8WRpIc=\",\"Gi8WRAsAjD9CFUEj7lwMDwbsqEeV2bEExDhXv1KM95s=\",\"FJodUMLCF6Bo3S684ZBxctWP0KMSPev4SdE9hzZIqLw=\",\"JGCGBS0c6GdeA7CXAprf7ZqXyPZ/YG1wk/bkEqe0u40=\",\"DiqExOmqGb59o+XU3XSkldMINp5LJqFl2rnEI46vpO0=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"pi3JhjrX5F7393QxrNMy/DAoD2XvHO2kzN6mOzzu0w==\",\"GyRGu/9ntAk8BKbz6QQHWnlsXiilpuWG1kQHU7qXVRw=\",\"FluE9RCRAJw4nqvNf7vJkplv4y2fhDU1Q2jh5bHc1Zo=\",\"DBk6AMPn6ONT0Eda+tvjafml0XFpoWnsGXl3YZE27/M=\",\"IIhHPCtqauM8hX+U8vErkNf17gVp2W2AH6i4cZT8RZU=\",\"CHh9LOvKusCG6efh+vwhbj+P5TNb1GQt/RcIqCpTces=\",\"ERkXZ5R6Dk+cP3gtGr1VYktV/3CH80R4zgp6p7JxXMQ=\",\"LSih2Bjo6x7/9gqq/5SDZ5zV13pwFojdU996nfVn9eE=\",\"Av6BP6sQEdx0+KGOWwOd03PwBwqx3U/RJnGKCHyyuPk=\",\"Fw5uP80Qwn0BL4RMIa9oUChOaxn9XR/oJYhh2dskkTY=\",\"EH1oFsHj256ovcSF/bzH8T5hNOgH1+TWhsWHtLAhdA==\",\"GXWK8Ng8lQVJO1QZwX5sTdfy/zOOYOlgklnc8V8zy5Y=\",\"CURi8yTs6T7d2XZPd9NC4kgSG38d7ePxSVcanZiQun4=\",\"hghrNvzbOHxt+i/znEkQ/Qry+z7N7flXNQ4grTyEOg==\",\"Ljz678Ybi0gAFY/t5ICM7dnXy1sigMmxWQ4EKag7PbA=\",\"CCjN6oP5f79y29r61z8JVLiEnwmn8Sw7rmmJAS+Nn8A=\",\"BGLYf8LIGFmBptXvxuMWVLJpahxCrmC5ntpSP9jBPsc=\",\"6CJPJoQYEE3pp19r2RXShh6OdKdAVzGd7DEs+L5N/A==\",\"CJFjIzrZeflIdvd8lxenzDFxQlobSE0QUPdVDjHFtCo=\",\"E/T9bYq8r8LVd5fCUqv2MZ8tISLdcbFb7G3elUT2BEg=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"LNJo6BEA1yxETWJG+AA+u8CMG1tYUKUI8WJUHkOATDE=\",\"DezpLjRY59bj7QP0TFe2pZfyoIUWYuUfMMfjRas/xE4=\",\"J4LFb0h5TiJakf/slNQn+8d1cEpX4kyToQkrAD/7uhI=\",\"DeoGLisH98avulionk9GyVhrb/mryl1Z7YV/W2XmGPI=\",\"BT90leSxJ1sVs/nNdaog+fdpM2PUMRdkp3LylWr2+sU=\",\"LYIj3TJpTFTLynEjWXC49w8adCi9c4ZGymqGL0b2Te0=\",\"Iw03cN5JYHMu0RFEkyh7y6WoshkwjxW989ZqsDA4ReM=\",\"Cgi3hvPeuwI8WsfyhAKu7Uc9g89zRcxOP/MZ73EMjpI=\",\"Gr7Ddow/D7Cfs/d/EqcGg6AKo536m7HfjsZ4040vWao=\",\"KFdZ9alEJ93PFGJFSEKp0flTo9L37ASIRv140BoEk+I=\",\"K08NaShOKFG14582m8mLVNWJwIxIf4yJ0esMhzzEvl0=\",\"BEfb92Ap42+i6qYKYjXlRi3s7+ROVYJGkQyPbVewCHU=\",\"J1QV7CFiF3Oap2cVOxGugMa4tcVccPK5ccQevo4ravU=\",\"Gnr9PzMTfp/cs9woyttKLcY07GgDPEEh8uVeH61H0Z8=\",\"Daiwvw8Bl6MR7PinDBfWtziC+j02opZlgxYaP3Z6XNw=\",\"LcEap/w1KI9MUOrTvsfMDnW55S6KP922FJK6lJSNWto=\",\"GV90R73r+jG9i7Q92NHmh1xcE1sVw7TWCdUjRVWdcbU=\",\"D7Fy5nCd84McqGMphu99hXRROaUaRcFpyDDE5pG0Uao=\",\"CIBRrPL0x7pnM2EgH/Fjngb6N2sqZQWh5iA4kGoxzJU=\",\"GeVyKKgZjljLW8zKkMY9FeB6Dz5tXRMNlz2xqDGvC6s=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"IuVmanWHQ8Qv2zCW7Hp+QmatdIJLa+NhlDXRcvQ44tQ=\",\"E+pg51lHZsrffkqh+fAF+dngYXdFbLSkPZGbRThJKgY=\",\"D/Hu6yRu1QjZbblz4sULEm+lW8cJSFSsunZldMCImns=\",\"Cv/cU0KhLTH4eMBF52eWrQG9GaMTsIy+YHHJ+gbTcXg=\",\"ApGXOmDgPZ4Ij5HPLg1dS4FLLYS7l67HmTF15dbcUZ8=\",\"EXObjuMEDigvbVA5eE9rdJw6TWvv4OxidicNok+Hcr4=\",\"DnTneM47KKGs+CTebQibJ25TURfFXDYd6/CkBXPGfrM=\",\"GlJ8xy2xCYhw74RUP6YwwgemCU33PKymLEfr/hLE2r4=\",\"EvcBYU9TkcxyJRw44ROR6aotFwPEfoSgQatHHtd0UKQ=\",\"EZNjNtVFJ6kpmu2fUmNbilP5qVhZgzbJhIVkuGUWzrQ=\",\"JyMY2oc2Xp/WJJ7HYVlhsTiuDHo2tRde9UZYmMcRvgQ=\",\"I2sUTPQpmSg9WVAeRv5OodYAA1mbQEbXpgNz8GiAk64=\",\"GiOVaeWIi6n/fJCkrrUFZZQV2m7808EB55EigUmzW2E=\",\"Hp6RzH9VTcI26E8WfiuuzvWiZ2kpa3OpRkjUVAKMzzQ=\",\"FIr1tGhi6oJpSRBnqWqj5x9CT+G+6CDNmI/YsZUnu1s=\",\"JHcqYGQX2Xis8m1GdWZls8QU3ON+53nJHpikyvgDtuU=\",\"HtgUAHP7UkTLqENCsnJ+glgQjftj0dqoJPQzCTKn8pI=\",\"EJtFtXVyiCs95XxtBD6Ud6zDQSMSR6rfUSz++0YVkkQ=\",\"ElY4NtLC/m0HeoF4aADbvI6Q11iloyP1Sfm41SO2MLA=\",\"AboAqoC0nnC9KzdIlozm0Z6dP9rgvbwQzFDpDd4J3+A=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"DyQpfCq+ZUcbB0bQhdOU3gkZk27Ed4dtMvRHB/4L95k=\",\"IOsLKYxIRQx/YTvxDgS90i7TEVdW+iFzGu3D/758uic=\",\"F2SC+dq4DLXE2R9wdXXyorVS/O08O5alvzf5uA/Mn2Q=\",\"H3mRVZHPpmSCAaKNiTVcvGh14w942Woyw/EIuzqNWnY=\",\"KWHM51ef+fnw6GegLPqLsudAHKzuJPVVbp0vzl0M7I8=\",\"KkEXjl1qBKehRjyheZ3Rump7XEeCCX5YV5P5h0hVWbQ=\",\"DsSuIhlZTsIvZIvB/UK4JnPEfZW/SOnv3Dng2pQG6uE=\",\"JheUqQKWBcKkqtVGMEfQy5b52iXzsY85EEfmhFGabgU=\",\"Liv2sYh4uDNeQDSef0deLIXMJ5+Z92wLtxfQ/3hm5eQ=\",\"AVPKMJ3yTJ5mQCXmntzDY8ozzBqaK+9ptE9geDAZUjU=\",\"LbEviFq+ZK9Eo+4/hHi5LMcf2RsJbWUJm+IO+HxkYow=\",\"HyxbTEm/i+fn1Nn4Phjm/wxwzpE/LiRuZQJM4y4LIx8=\",\"CRgIdoE3QqI7k3bQFXnvV8H7OaYOglMg+g6sqJUxUuM=\",\"Ld9jUViu9Zx9im3idLNOt6XQCIp/xLD39M5pmhjnOl8=\",\"B385ZeQtnxlRzJUoxKELCZv0n06wDlTTia8ZmopHQSU=\",\"I7VSNwY2GGBxFS2Ajc9VknuVQiUpu+mQDRoSRFMu+io=\",\"ELQJl+hsW+O2SVnoS2/5XcOv1316j3CLqB1kkHXHTr0=\",\"GefHbBseZ/hgcxh7T3MOF7q1m/H6WgA2W+LzVBmDYz0=\",\"HBs8oxtRebbcue46uIOtVqNVgQh3wFjWTjRYFes2X5E=\",\"B1r729LasgZEBpCf52YHL1MrzP+pWXCL1ThjtT8TI8E=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"LWvV9ECwUsNuGJauAJBLWEZhZmkS4UtadpF/KkAjqXU=\",\"CfrcqQJ2LhubLqgyVMFCLD/bmatHAUm5HYGPdMFmRIs=\",\"H8LvdVbmshfybEzosEm4V/ppt/Iq6WZdj+Bh5XzNhrg=\",\"J34KXV3zfyJykDhmoPEEcuPk1hUFtIJ53Xj55esY3G0=\",\"GSY5P4nRQrgxtalGOuOGC7CIlz7l7pAI8OHHllx5vic=\",\"ApF/XqAYM0wPBcB7r4yEbTVOOUX71n1aItBYp5MnWjU=\",\"DxgW/Pd2QxhcvNfwsUEAdnCgJ8wokSgABvTg+29wARM=\",\"5e3dJ0a3NFVjIDo6Aro/O+XJ3m+j1oGcHcjBDKYZYg==\",\"L8D/0fL7nlJel6+4jFwfFjabeGT4Raki9Wr2tWersSc=\",\"E6bVB8843Xq4TE/lX8N8zADlT/kRT7fdoTGq+vXj2LQ=\",\"IJ4x65lLEiSUnvckYJp1RiSxLj6WqqQmUZNp1ynX8NY=\",\"KblcTgmY4Bf5pu+jKemX11DDFacJGZVUMQi78u+S6l8=\",\"JzAX9l1UqKGekzooUP4zvNxWJF/GbdQL0W0ZYwZaghU=\",\"CaAKe7TTxB0xRz0MlxlNkKlKQ0iu2AiuLZto1mrG2jQ=\",\"BY8361Sg0XStiBAJoW4DOwQTNQBSRFFiUI8uPx+9E6g=\",\"KZHVarVb7UeU14++i6LYTgQCtwTGPou0d4FblMC25ys=\",\"LPmsl/IIy+I9XarffOjq8XuUnqBpQgLW07T2gCwgyPE=\",\"Ky/8itUsonQpl9P7E+E6vLfET/6hR3Y2K2vZ4cWq0Yw=\",\"A/eKmmWqP14wzhuid5rDxfJ1q3eWGBndAWOKQtFP6lc=\",\"KKnUDpxYWSdC3nmHyKzcf6XmIvXodQiTbFyQ5aKwER0=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"Lalx7c5ZUeF1sgIx4srs3WcgVN8KgavOrIcYL5vyqzk=\",\"BIUrcqdvz8qDMs8vylNCbUSoECWwScb+VhhtprWSuO0=\",\"EmeM0N0QPb8AwIPD1WOqqm5uOelAyAwUV16lP32pNxQ=\",\"BjvoER3AYbex+Cfrp8xeEHA4Q7aHjPhRYLHYw3+M8go=\",\"EpLRSJ5AsrepakeImowIybtiupLC+2yikNMCaCi5Cjg=\",\"Exko+Mf2spKvIX5qN5i7PDdA/nRMl1T3HpZOc5+oTHw=\",\"Cd0JwILm72EkK66UED00E9jigMPYJPVmthkdhsPlLn8=\",\"E6m39lD767HDDGOIZgXP5l+xMES79Y9rbW1HVKiAPZo=\",\"J45kb2LNFbZx6rL+tLEIM2Bqc3AjxQNW28xoAsR+Iug=\",\"BjoEisqrpEuHY5o9JG979XIbLf7zvGOH65p6F1O8ntw=\",\"GRN9jHwFtDgMVCe6NYlQWimSetcBKTNBp5f438a2Tqo=\",\"BGBaqyy/HI2zHzUwUYsbBY6Kn91SOA1DZef6+Zq4ZDE=\",\"GmYnJcBVcNDLDODjy4P1qaDWQdf3tfA5Wzy68n7o56E=\",\"LwBwHkASE2V0CE/Nz9uKA9Q3Aye2d499vghGijoiHTw=\",\"DutDvuDOEXBVT1NlkBzGaq1hTH20TufZMxFOVq4TZF8=\",\"BRS9WN91LaOkPddRR4BJVvgz5hCRwz6LbrwFnRZow7A=\",\"LlAaHLZ3V1ZKJ6kwQVSXrWcfYYmaNyBuS9T3BSXawkg=\",\"FtR3RUq61Ks24Vo4Xf652Oy71kWkWb79VERWutbejm0=\",\"A8BSESljtBElWsn0k3ukFi3PTcVv37XxH1haL5c9HOs=\",\"Etv6ix8iyiszOLhbGhzXX/VXy7GL8iAxKxipGiTVXYE=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"EIGFSKtz/QPSbuQOGkBvKU39jIBeIfhonxAB0dOAjhY=\",\"JKNeTrjfSTEtn+/IiH5S/pC4NsDP9/fAeoSKFLAfy+g=\",\"Lg8efSHS0E/OQMZ8N0YzAEO3FowWZQpPLJ28F+ru754=\",\"AjCvPMLHzp7bIXn4YVropi5FjrE8JG+bZzFw8UZt+hc=\",\"ETRpL18flB8oXMSTw/IycGXEUq0yz3FUhtzr/C024AA=\",\"Cp03ztDVJcnYV3uWmXUifL/vZeOJ2QLmxKrdATIuiuQ=\",\"HbLitc0CiLHXx/rwA753A7XF5F7VzXfA9Hu40/JwOv0=\",\"EtYpxf4KOUMIPJbj5TKJe7L2PbVRkSIVm2FyNBCtqA==\",\"BU2n3rqffy8uIYBygEKpNWdKhEaATDzEfJ0VF46NZmY=\",\"Kfx6stPVRPJTVKmJhIEm4j1g78Z9MMHX5t7E8ByL1So=\",\"FNycNWXE0kZgeSMUa2VKBsOm8z/y57KFzDOefgRbEPM=\",\"JX9ZTQR6cg8e965W7lzr6mKsIjlxWlWx/8s5SvCawLA=\",\"EgLtSjVjFuVxD58aVyewg8GrIXBQ6Lvn2V/1+CbHdmk=\",\"Aw/ivrSbiQAzu90Ie54mOt0SaWZXCIiRW0MQGIi4uWI=\",\"Bcoshsa4E8Wrfsx/pT+6/vNnjDKKzMSfpwtfcaHjaN0=\",\"IrOLUAybNg/CtKwWsPj+cejjCppf/7InX0ARLgHFn3E=\",\"AahaN2ozLk7UHFuehdvCgGuzw8bzjH8lH7ox60ktKBE=\",\"AwuN03KhVGs11DDHWSskp2LA50i4VxkKpHuilNpD+bw=\",\"BYgE0qovHp1RHLS/RFnYdHoArz+M76UsOvKB17caRo4=\",\"K+mHTBf0gRiXsILOR4CZkdV9CB3knU+SWbrAwru2nk0=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"EBJ8UuofbSroyzp69wkWqyn9hfveXRVZYHbOMFJK3jc=\",\"LYh/OPT1wnixQrsJ+hchBxe8ON7cchMnw0ta8l+kl18=\",\"AYQT3ZnlR81hEsmziQpKknZgFTlnovo8x4KBqjdDt8o=\",\"LIN1v3BegRrqhYO5D2AEyhhvBrqQBdks885zF7T77qQ=\",\"JmchUu7hOfkz6jqIjjQ6IRd2qmmCBqa5cM3kcK1RDnI=\",\"F5Ryhx0m8uJ4Zz30V2n0nzlD+Ytbyedrx71jn1y5Sj8=\",\"HtD0qHAibIr65bJxnjqmDIpPP0kSkOy2pvqO2P7DLw8=\",\"Hoq3xRWJhP1Tah/LpS5KmpnSQGxoHQ1UwZShN4que/c=\",\"BuUECbDMdjiJ2u7HYkvnJ9zgljL+F5RTKfu7unM2tWw=\",\"Be+WBmoRBngr15Qq9u6IrmxkKJCGPe1ckIpw8OlxiPc=\",\"AnWjk8ecLpdeMgiPoo6Ajvezoo7VXXkIszBMYnC2hHQ=\",\"Iy9BrJ+1WCitifuRD9U6gEY60WrXh+KGnzFaWc53ZtY=\",\"AnW7jkkekCPamIhME7c4kvKx6y533R3ai1CVv1ya3Js=\",\"B2GzhoB2aO7ishtV/8d+rJHGCBxSMIxtuvxsBwKLTjo=\",\"BJPpo7gNF5Io0qgekDqf6NZa0t2ZpzPo/+BE7HGmaPQ=\",\"MEQT68WfCMgqniNW6gk0GRD/dJOHCfA1maTwUk7HGag=\",\"LR4fOPZwK4RwGd1pdDe5C7swL2Qv4Ncd9/rO0KPa0Uw=\",\"FqyEkHa8acUlKdS6ocINOZkdHRvcksjg/xxbytN08ls=\",\"GoXsZ2LWy+FG3IfNEcKy2qHqWZ9hGWWlm8/DNVpoQxg=\",\"GWUwlF09ezXJUBdNCwik5COo6ivLHUVfS14ELWbPLKA=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"BwUgkTYPWYXNcXwYjuSqexJULx/z2tChmWsA/ebjZSs=\",\"KRtYYM28Q7Dw49JYvfj4tYyDmlZ3m6tfkY4EIpO5ho4=\",\"DXTTtFf3EmegBnn1s0tXzRk2Juad/4JxU8sKByRfl6U=\",\"BgY9UsZXEvjqevezQFwzDzoOHkoWUswh09xeD2DNv3Y=\",\"BmsKMQPggfkSXEKWQNLbWZMDcYATHtIr3UE9M9aoMOk=\",\"AaHsOrjH5zvuUlfAZpy55ZWO7T1R1ri7GkPyaD4ggqQ=\",\"Jbzd+32KChkdMP0TJfceCBJK1LCZSF2A9BrGd+AJQVI=\",\"EENoVQeDk+NBhqJpNhgbOF4fS6vM7PiLGJpRsFLWkxs=\",\"E/0oksAvUeQtNtnWmGp3Pxz2RLy8ynQxjEhuGxiHqNA=\",\"LCj2uGRv4HGk1u6qvCL0OY0JrcBB2lA/peE9VfKAQko=\",\"CCg5acV7AVjNW/DdnuO/HWAI3MRcHvMojefRviQjgy8=\",\"ETCtF+MAC+pwiqLqkpP6obszyfpzTBOtNR8ECcZJymU=\",\"B0HFx9NvEc3ITsWNnm10KPjPLRURDsRdchj3mRvlggY=\",\"H0SabXr+yHwzkdXzBvyqW6dJj+rlRMYEjb3IR8fa084=\",\"E8IOPivBL8DT72uoaTEfvFtqOk13na/tNalgmOl/IWc=\",\"H9q8I/qG8bEuhAxJGn17wme9zPbrETcp5B8J60FsDZA=\",\"Cxir2sUZvpa6412JjUCibp2eBWH2k0vojamlwk5JhlI=\",\"KLaBD/+27VbLCrPfSbvu589Pl4RhGJ8gWux0HL6EMgI=\",\"C+yC2QNwSMgFopOnCEJ/v7ld6hF6bc0ebzTxP8ngiPg=\",\"L2OkGumhLaKG3pLo59ZRYu7z4nXu2gGy8d3kpraYJt4=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"JlxPxY2XYy/PGakjoGZ7npsot63WEtenEGG8k6jbDTQ=\",\"Eohb/0i2KY8QtyK2mepc/v0jQAXIP/eKFtpWOpV1jXA=\",\"FR1TzGu+2llMg58Ziv31QZ0ch8psReI7S135zmWQ+iQ=\",\"FNVa8EXx39j0nU8lbggaaz7Qk/Aacunn+pWWTSdLmQ4=\",\"DS6r2G8B+mS6BluO0m+Czi/Efp4BZEjj1yenxmp6vdY=\",\"AoswYMLctle/CtTgFVUvbAV9CNlOanqo9lzK9XauGck=\",\"KZmWheXJahuQX4XcW9WF0BhGjFLq93plpqf3JS0BUAY=\",\"LMNlZtU3L3alvdT61j5wmxyaH9jGONUI0ROGqWOUnRc=\",\"D0Xhpl1WMxOYHX+9hkbotsClE+kh+k2R0G0d7xrFNfs=\",\"C+Wkf99fXrsFdgM1wZZQk008n9W/apR9Iw7AewS2M2E=\",\"COBsV58ebgEwyAG5PjJcy6RIgifVInm2AM6gPAL1WEE=\",\"L1D3AAxFzZQa7b/nOwAiqV75SOFnLl5K5/gYxa96XaA=\",\"EOg/Ps3j1bq7eFMopwytfxJmraOBGBKWHN1WGFV5IQA=\",\"I5GxpC0a1idl5R69P8rsn+2ibrGo5Lw5e0p2kuUDY1Q=\",\"Bd0oH0U28OUSz2Mtj8O8OxmPzVAxciWazQpD9vOyyo0=\",\"GAXIcMnqokbpP+B7beYAswDrHSzHaKu4oyXRs1pzo4M=\",\"BzWzy1MJpjR3sXZi1w6HOliOguFbwIP8qS87EnLeWTA=\",\"Faewj/v61w2iBQ4sYJYhzCgX6fqz+OBvD303WZ83QDk=\",\"HHclqF5qfw66rIdAizjl5uz7TeY6sYGQCJJqfR7ZFis=\",\"I3G1dvZ6uALmRykNwMoHKL8R+igqEG5SVn5DCqXNbfk=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"LXYiLm8LoP/YZnyc+yqL8v/MyS50zeOq+dUV9ncL4ls=\",\"IanfAw/Cw4YjlJzMDifaXAIiXi5MuUJYdn5nBGscmtc=\",\"yZSuOHRh0McQQYbB9OFA8iSgyFkEkKXSi/hyWW6uLQ==\",\"J8Yf809yHZuGJQ/fekM1Bbj6cuvpoowPj5pahuJb1kI=\",\"EVqnqua5WW7Kl7ZyamMXItrgqPYwozaGBNvKqYEahR8=\",\"GM52DnAa7PdmQA08gwPiiqeTfDyJwxCaXwuPkglyn6o=\",\"Lo0nRlyWkCU4kZhohyYYJhsH4ncfCH6WhqB7AnRKAUk=\",\"EAZh6292ObPN3KBkabcXNpuEJI8YqaAlAZgijYWA3hQ=\",\"u6lHXdRJhoxn1Nc5TtRI6q/QOE9BerXsNYLbiWLkIw==\",\"LsTOouwjP4K1w6/GWM8PHVBW3+Q0wgnuPTrlEBxdOKk=\",\"Famd9+a17wMV2wRZMteiTeYDsLaJf1Z2Jv0d2fR8hVM=\",\"G+bYZnlLJfCtdyJgKBg7OLpPr/5aQ3XUslYDBqzePF8=\",\"JyV+lLLpXoYbcSDtl2LYxMlAgLdhLZtY0AaR++75c3Q=\",\"A69R8wDNb8tOpWfmyFE9gdrZSqHQwSWoQIzfHtnxA+I=\",\"GTsctevXjb4EKMmT3e/T3yQUxVgHj3V7P4A1sEcJCRM=\",\"DchsocPBCmNNuleRFXlAFzZtBjFbZ9hDgfTj1TCADlI=\",\"EjVAQjmhvTXYpdfkH795ebwRMuExYjb85HBJUZkEh+Q=\",\"F+ll+jhRRfLXlwRVeTiJMIndapQR4aQFRhS7oPFFO0U=\",\"F89u+GPfwn2eI3Z8gCGaYieafB35VTyMP7o02NgHBvc=\",\"VoyGRX1mv5YmE8z88pTivf3EREBrIKZWPrOCFk9rOA==\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"L1E5UmdGaYh5UV3FR/xKGKR7t7EGnPQtiMFpnze/cOI=\",\"Dp7GReY6M1gVjKa8mbNUVwxhtQrgtmqbLNvVt70lKPY=\",\"EQv1X5aea+uBSgi+38xCk2j4plMX2d+Yf99pBGToJ5I=\",\"BQovQPMzexRmOHelxcZruta9QIEDA/yQd5ljhPuUIiM=\",\"CfomHPUVDa6QJweZEh5WdFwuOv9sbt6w2fN61z8ukrc=\",\"GNsP2h9IpDwVwdcteo6OwgQs7txX8IzeeEhPigF1r+A=\",\"Es0VLmpIKyJnjhT+sdK0Y1YOs5sKJ72C3JzGeRxw4jQ=\",\"IIeFqOfQH1VriD0gGkMHHJIoY6u2tbnWKwbNvhyhmMs=\",\"Ci9vJ3czH/Yts5GHMd+w+JgePxWwcVpEo+B2q/HilxA=\",\"LkD2CpVdhxflW5f/FWqL2cby6AbQQtAhPO7yNW/Jf3Q=\",\"Fbgk7CgmndTY5qVjFp1BXK1o2cHHruGqJ5t2q+087m8=\",\"DLg8GRfkH2GjICTRG22PQ8ip6VR1aLgX6nKzrCU+2+Q=\",\"ExxsOuNTXxW7eRulwfUgUWNcRNjhPnwo1ggSp2PPYvo=\",\"J03laeICVnhKyjpd3KUiJHaywG5pduS1MyV463RLoFg=\",\"BM1tKTBh5FzfPzB5aiTmYAegrv8bnHz3zIad2liajRQ=\",\"IEXqspA47iwomlZPEPoLpjd2eVFKOJuDbdaZi0eZoH0=\",\"IPEON7rlqBk625WwaYGw92I7rzK2m2GhFpbnqHlUlLs=\",\"H1XjatrFubNS18vlVlG2gMSzQsM1vYVi+0Wq3T6D5hk=\",\"KWArpwaNC3VNilmme1y4PeWm2GCS+LpdoylgrEI35CQ=\",\"FnB/yu6VPlSLnwTCK3FFB61Fxj4kLR84b+gTcB5Z0Yw=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"JkQ72DVpyTODzIzXouBesrzq1GIecMwYj2QFyJ53ino=\",\"BaNdDiK+D5vSUo61VYPO2HDTYu5yR26XBmJeSbxVZJg=\",\"ECHlZViDn8i1+yIF0seZ47MedlfPoxBrBlHKn26d71M=\",\"CkqhZbd3HAgQ6crwT9yNa0+ofiuIzAiro8jskIc5vic=\",\"C3Ec1txZHc8H9AD6vlzIt47AFyS7K55i0RRWtt41GXQ=\",\"DbT4mpc92yXxE6bfjoCqeYzSEHQ5ykw6fLR4fyMUjHI=\",\"JFgFYPod96Okkhh1GH7wytbblPC/c0j7eutMnjG9jdQ=\",\"Ad6MPkgth9GaM0jHhpg7pLrjqwCHDSiuPcGL28DIVh4=\",\"A17JpJKWsYTyIls9aN5tHVpiMjZXbYOOVXsVCJO+pmw=\",\"H38uQ4wGleIFf2KmYaqOhXk+wWjiqsHOBu9929rR4RU=\",\"Dbprp5CYMxtNyTUVd4skl8OMPdsrIObcnfbtWthcMrU=\",\"IvpdzVBwqPRq1jfjy/acJWr8arWNwLDZj/FXQKvuflk=\",\"JqX9k9/39etJlCtRsDuY6c0qsmHVbbdRavuJesJwbvk=\",\"Ihahp4fQW7zM4Z7/XYUrkuMXYG1VxrWz+wKv1B5pch4=\",\"IigEDCzGRX7LCs8+9Gmeq4BNAlG8dQJeqSjRbRUGWVM=\",\"HCDgLaCVVBq8ZIGlwVlM6qaI7Jm0P/zjiwmLqBevBHc=\",\"EG8ZFCQZqGojT0yLlMmtbztvTaueR/88nWZpvtX/N5U=\",\"EEx7mX9fg9jaNfqyNPVsSXFt9LCnMYva6ReGsKAH+Fc=\",\"JytlnnijPxVB/PWPTLPmToBvPNDiQ43OIKmrfUFqMIA=\",\"EkkYbr7fSfrIX3bQ4Qreh4UY2qMG0rWG4pWGhXahPqk=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"FJCtjp0zDivqrVjLy6vadXlqbgAWa9e53jXITcoft+Q=\",\"Kc7azRC4ObV2+BQI26j/HNaZubCxHhblJnwhfldKVZ8=\",\"DVX14NMe2MAy8bMevAf8sIj+uohYPdWBX4VDHzgpzb0=\",\"IsLeeLj4yu43eNSCVxCwgIB80Uv7YIBIj5njA96pxOM=\",\"JWvyYqC5Mdh6/9gjPGFTTZ9fM6P/5ZRgyor30NO6lG8=\",\"Alnk9s/MekttIkYzNHnfBS7gR3ue6Pqn9H2kXRSV2Qk=\",\"I15xayK2eJSu9bytSUZ8fJ6Ptom/wD8FgXbJsvLPpt4=\",\"CRJGvuHV9AY6KrRT5ljFDJlNrmeM+hW3OxSw9IQI4Y0=\",\"FZRUHdOW1ZSLawFysxMwMz8JmXPYo6Gp0pm7pvRdG94=\",\"JMyVu2LuhawX0ejDbBXMUMjGbHyxLgjyqLhlZTzKWGs=\",\"LbqJLE+byAzfpA7pqpscN/DU6ngcP75ex+vaOeInLbo=\",\"Lz8lVCi0R+4oGZdVld3e75+jy9cbYvNK7oWUdx01Cic=\",\"L0uBkUtSt1xGtuvLUmBdBz+0WPixy/aPudsiXkkZuLg=\",\"HjWmWMthAxRZNjRHzeYWUjOyu1EHxtu0wtUMRZlA8qU=\",\"IZOL0XDvC2h3UrhxS4A7gqQ1i/crdCZaRiPVWU3ncu8=\",\"DVS8AbGNzyVTg0x6IzCsgWMIMYbXOGN2UK57u2fmnAE=\",\"Fm70I+qM6VSt7DghTIQSvLUt/CrzrUB8yU7fGH5Nglo=\",\"AwSyenSQug5cINOyc6vDGrV9TJw58pKLgazkCyauNFQ=\",\"GHPvNH/4IxWFoV3WHLcUCZi0oH0f/iBF3TaFlO3A8XE=\",\"Z6Rw4MR5XiRedcl8tpdFydm6txwbiDau/wG+iV82NA==\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"FBifeD8BedanAOQ7bzQSrxiSA+R7X2v/rMuw+qbPhQ0=\",\"EhvCWxakXBiEMDXoTqDwPlULhcXV2GXDkWCHZNj52j4=\",\"LncFsSVFXIiTnr/5yU2UsyzRmYjekDNCGtJJcpnhwH4=\",\"BN6SoJfLzQ7ah3yV59fGIyBagukmTUgJMUTAKv/jX0Y=\",\"BWJngn390sjhPDH/7gnGZWBebQ927PzmOho+D/m6CDo=\",\"IU4DAPgF/8cVZm22mjK13tbBpeRs4hJ471bfTPddbXw=\",\"Cj45Ya7T6NqE2bL+Ad41/rr9dCuoPAz82CxIFCzxxCo=\",\"LsaavVrLNnnCV8OBRSD1otThWp4e2kgOJXRMwxB00Sw=\",\"HGinlJkLeGbdkhtBeWASOZn1LxmPJ5SJ8A1dtxIFpq0=\",\"EYOPsj1fMyK77NsJ3X+LWBRlyHoPbbAhbiPJIxqqVYQ=\",\"BQiCAKGLbyfS0JSkL+wiR/mxmhei+F+YJ783L/SV4Rg=\",\"IKVi74LleDHuhd+wsYtxbmPeNrzi0o/gZ6HOEONlqMc=\",\"Dad+EDoYtDishg1JAwqVdW3GnAEY4Ge7o3MrOinY+po=\",\"LnEYGXbChEnjLgfWZwbKT9G2yrjaYbGOcS9YFr9+lNQ=\",\"EyGm+qCBXrg3CcX0vM8965HZGO4VJnr8awKdkjv/K14=\",\"J8PqiIswBoZ3JHSBiTyvUK2ZznMt1FSeL2UcPiZhh/w=\",\"BHFyxUdZ83srTWSsL7aubGQo7bBl1bfxhTlFFRFN6oE=\",\"GfqHWl6CGy+mwv/orPpEbd1NbyUzODdvoomyDoPeGRU=\",\"LbB4eNgQ3jDKB8Is7lMoDRYBhubifEw6C/iV/iwzSeA=\",\"CowrS5gxXZwAagpUmSR0rInlk1oTRpdkAN5H0RXKQ4k=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"DAmOFOC46o1RnnPfjaDvOCdlGOThA9imEBmT8hreaCg=\",\"JqerIuPUcBpNVCFrc+kG2j1mhZvuONAr6PEg4ACltPY=\",\"IRqEagtnRnSqBLM1WKfYBQr4gNE+Z2KHLUVg4/f1W3M=\",\"E1ld0ZwVkiDpP8i/hkXFua8lLtrNNDyJuumKOjcxTH0=\",\"DYOTdcCHdjJcJWEM0uXs+KlpFUwJeax/FPHlig5+BEE=\",\"ATazGQvF2JLL4XYrzs62i1AIYaf2tZDv1iviWtHHOys=\",\"CHZdIPpHcPpJeWMqbltQCXWxc+ynmwMAhW5xMPZleTA=\",\"A7LTXqCtJrFTVBOjj2kJVPIkpveIlrqklrjoUCvzQzE=\",\"ApBImBjgC5wOpdL86ZTKkla82XdenKW/2sgZcrRqS4I=\",\"JLfBuE7GJvWceVLECYEj5pDyIVBMaABq4eWBXq4uIzo=\",\"LSVvhFGWvsWzXFKmY+TPhN1DM0gVejyHeprQjUHaXWU=\",\"DRFQ8B1dfjCw+zpjYsYx9GZPbH9ikea4iVRP93gTE3Y=\",\"B5cXAB7WdEyuB6LkkaIzinnLjJV1U5LJhFnBKExw67U=\",\"LNIFi0SPdbw2inzdIPDGf3QgY2a9iIIjXaQE1wLSvmU=\",\"G3p2a6/0P6ilLiYIVCehvu3dgLcO3ZklR4GMYr0jQu8=\",\"DRB1fqE+aIpNmcv+ZG9CaMskmNLy/IvDUmlKr0T3GFU=\",\"H+J9FQaPhfOE9jr5g9ENHMuUFH2FYNRWFxw9dB1CfyI=\",\"LsZXFE8ITkj07rQFVDYG4j/iwbWB+/lC/D2mXYpiKOo=\",\"C3H/glL54cHTdzhUEDxI+jhXVj6LLek7eKVNHJKUZN0=\",\"GCuZqsI767RF/rJM9fSSBJfRxzWYUkjzF8Nu41w0MRU=\",\"Am26WK3ozaGI9J5S/OcWe48hnb2STXeGsPmPt5n++i4=\",\"EzL08igRIDAElrliljcg5ooHVZCqgDxcHNjT1YK7des=\",\"JMRken2xyGm9oDCj+BbqJ+jck5CUFv8g6vObpUV2tFI=\",\"D131XCv6x5WIjTquh1Gvy8PyxbwrLewoFIolLelylCY=\",\"I6StSFj9PCabHfWFjuid1lne53aold1az/sXxjK2ZZI=\",\"BSbtMtVn4ZD/Vijmtk12JEfK7ihLhPoVrck4SiSsF44=\",\"FE2J3RtgayfVHXQtAt7aNBpflueuXuOAJj96IwIM/V8=\",\"CAhuY5pflsifqvDsgDUT6caGR7yXePx3nRRJkbqwKbQ=\",\"JKLZur2vo/Qvh6s54mnC7dRYzIfp48ZtvosMzoHbn7U=\",\"H9Aw5dUMo4iFmxj6VhdSfPAGTZG+xcgd2lrTthGij94=\",\"IeXNaM2zXDAnQz9SXML9T0YBMsvoNQWCO7yxKxHrrYg=\",\"mBPIA/+Eo2lO7a9LHCFyYVJ13BjKZUx5mnBECUbM8A==\",\"IClz9/ulvSHtWL/nFW17KQENQQkPY/G7KQwdXaGtYA==\",\"EjBerfZNrCSnkTpi2Vrv1F9INVV2xnHlb96cx8g0T/0=\",\"JceDrWbWofxshHcL1jf2IHCX3/sDeNfgOV+MC4a1Bfk=\",\"Ii3rYG8TzyjHOmchbYixb1lY1dKSuhDvO8LBD1oLYT8=\",\"FhTQJUcncf2HCp6dQis1ccVJTn1nmCTY/hISF31fouw=\",\"ATWL3Wt6UbH1tdCU29juCGzNz7nCf6rQgG6O9xjQ4rE=\",\"HCAH66TRYphGu2lASsyEVl3l0kYg91z82fEf7us/N0g=\",\"IvSdckQHfkH0CcCzU6/RaW46oV/9tKC9uIP/56Gochc=\",\"GVFSOkJwxUQD3+Mhj9PUzO+kMRTxsZ+ywoIaQ3Rxi50=\"],[\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"LlfukImtzFHy7H1fxCgh5n/fCi89Gt2HCCMAKh6f9Kk=\",\"I0bCJkkd3iHzi56xvowWCEd06d2UGJXrNiwr92MFDL4=\",\"LClPokZqCp8fibGvW6se07hqDqcwdwhUaEx1R1Dv3Mk=\",\"JRngc8Or6gL3eEzYyEHdzBDWVQfLToXo3zv4Wo5Bpwo=\",\"IeoL3SfguLcbkatGeYuQfuCUz6ykxorYH5wMEH56g6Q=\",\"DaI+p0zDJdOSJmXLoXh2pkPE9u1G+YE60PQDlVdX3YA=\",\"Ege+sYFJFI+29Q8QkLBd4y7F1Dj7MGBPTGPCN6jMHVU=\",\"HDV/eDo98/CeV/+5caffxQwRRdqfP2fzI7R0LvOtf4I=\",\"I0dHstmINe6LkPGbXqA8E7rrQQ8hIROD3bICSGCMWGI=\",\"CzjhHaNHMLx0t/Ot1Yd58uC8VXNJYqBZMG5LlQJ2cl0=\",\"AUcy4bzEUvufpA5ykQV1ZAtnS7X5A1OlI1amEz8my7k=\",\"GX1hF0Fd6IVeEQme1snE12Qz05/H9MyADVvron3HtA4=\",\"KzoxF0H4uU2CVdh4EGSe9mdMemx3Eag/+I8q2ffiPFM=\",\"Cv84wfVQCk7klJ5e7zODcheXebspyVFCs60Y76nmc+w=\",\"DdDEj/KSvHZOn9hIQZOWlKdhF4eDupk4HfV5zTOF2N0=\",\"ByOgU3I7bKtz5ys2civ8UslX+Mf+AyLXc0iVVXXoQb0=\",\"JcpQgfy8W12LgIYnrzyUlODvdCRfmqRUGdPEAN3ok/c=\",\"LfVS/xQjJSnIIWmW8Wv6uNVVWSPS5KU3Btpm9LsBOWk=\",\"CHb1braETdqb8wq1SMjws8QSfr5/wx4csn485iu5QLA=\",\"Co8Q0bNcqSaL9EA2NfdvG5rC457xtcnm2BdPS88JXfE=\",\"EhK4iFkrFrJzxVwJ6IcnChXv3vER+z8LurbzTEzCTYE=\",\"BfV3G9MOC1FgRm8yLswj8o5WOkSoCj34XrMLKm2laB8=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"Jr9/ztC76TjNZ0efovA+Z8uKd1iS6XL/StSTZVI3vY0=\",\"EKSbkTbupvLD/HnZRvi4/WSFTdw6lkxXRizhcmKtfZM=\",\"Bbx3K+2lcJpv0zs2JWgpJ2eNXX23KW9XA8zX5A4NjcM=\",\"Fdc6+ojm+xt0zfPql8aUzmlf05aV/ztyZjcdGHD2EMQ=\",\"IGVvaeSDxbBaLF4mruufMNF7AQVL5dACtMMSoy3zXa8=\",\"JilSbJnhPdGGKrjRJaNMxo2w87wpfZdARGaNrsnlZ94=\",\"AeIEu0c9x1vvXxf1+CjlIfZX2MWNsfTglvUEZYknVgk=\",\"Kk/Dx7VO680CPdCQfql9c878KVWlqDR7+1xBzbEPsc0=\",\"A3SwZD2YA3OhLXmOjOD54Bajs9nHHlbguXlTSqvDQQo=\",\"LVT0qCHNOob76qkUSD0Pojp8wEpr4he0FEtmiucHcMk=\",\"KfzyNKk0TMaoVB9tp7LsOwzfJWQIw2K9cgSNgI5yiT8=\",\"BCVMrKmdrz6zQDDnNAheshcfc0bKLp9Dro9hpO5Dw1g=\",\"K0yNswZcKX0It/HMyzKoSku+ZXwWqw2d7kv+WUZQMP8=\",\"EkiukI/XX+/EKxO+aFyt5rwQZoSuSkUTrUFQKTdK4C0=\",\"HL0RGvYiAcJCo486G9eSUBz9xQNccZYcKRmaSnFn7b8=\",\"LuuisxhkkD0BejA28RmFqDYcr3PU/bIVxVUtnkd6elI=\",\"DTLq7ZzVq6KaH4zwKdAi939esgEfvXuLz0Qt9wJhxyQ=\",\"IJcf8+J/+p3GCag55ZHWiNB9xjbSzHnOVwwuW3n2O2s=\",\"KovdS5se+WuuAImcpzfS4dykkXZ5rxxk9iZ30tYm4xQ=\",\"Js+wF02RKAvQW06VU8BEiG6LjIsww29DFu/3JoCOxjg=\",\"KfUQvletjopzWMBpe48tdh5+YjfIqi7kUtZFxPtfNUg=\",\"HBy/rN4cqYGuX5G0SpX0JSqs8IZjfuQx3IGonU22tBo=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"K3hWE29UXWnrrDxFlFHyiipTqqFEumeQI7IWGIfvElA=\",\"JQwEcmDlAWDNZYa88OpRgIIfxxw3iFZ0gaeOfIuVFLE=\",\"D7+C+KUphLnUFT3W54wFFjyNRyCRXBl2fL/M0MOXNIg=\",\"BrvJVULthdYBLSMrFtPQHeymYqD2G8wWS2VUsy5h8xs=\",\"KBhnFDkseJrljvcTQkitM6XxJHDkFnGKM1TzQFb7Ev8=\",\"BTr7pljadt6SCE9Cbai0wDMOdyW+lHqiZrjC+cDFXEo=\",\"GESHK4I1+FFyjGbgsp1cvxzQoK1epIhbLJlnUIllybE=\",\"CwnsWm2baDMfU8pf7UZEPG+t1S6k2cRkDeP8KUDA3rc=\",\"BjhSnbfMIYJ1HqISQXY9ENNMvAmcV4smA8sNDA/Nic8=\",\"BdBm3KzKwawESNQ2cfIIM/rgDBBt5/4oyYA9dxX+7mc=\",\"Bl2i83RhilDm+joBZBYLHmr0KnbpsYcRWzMNYKVIs68=\",\"LiAjgLj22QcFoTXEIGbxz7kFB30556AiMadAoyYsHgg=\",\"FFcMQKTn7xwJbp2PzApGy94y27V5FmlSBqsDqsLoLzc=\",\"LYfCRQgDKYIdokixdFb558EGzoqAPT0BWov7+VKJfE8=\",\"2oxvyBDKGJGTi0F94paGTzrxXCjWyx1Z4t4o69AQ/A==\",\"IBiZKDXgBQem8tl8coygWet2p/ylI3o26arZmmEmXMA=\",\"LZCZyXXrMvMfEPgHuuol3b/yBcYkpmpJZqpZvIqq5xg=\",\"KY3ud9trKeRDlSZIh2A9KHxFhQoYWCqKyb0J0pKII0Q=\",\"D8zLh/BIcLymOCJEtDoPf5LTNuO8TX593vSBYOLemJ8=\",\"EpewOq6blJ6aUYaXVhP/Wb6joFjTS6rRs8FRePGef/0=\",\"iToiLykHdAiAKqdNw3yDPfSAs1DrGuMesbn5sgs/Ag==\",\"ASMbGw2RvHaHw4E7LaMufHH8kYlkHqDbrxVW6tjzYYI=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"Agd6YVWrNKsFd3ZR0BUeAyAAVzHch1mGJW4QMglgb7E=\",\"EaTzNHqp8I5ZhWACSH/pekrBbcuaeWLROaO4DKlSgJo=\",\"AUYBb4zhAPbNw3r9IvAKpTWdUxznF5ovxpH9ErAMEtM=\",\"JQRYcPnaj0yX4RglxSz0zkC8oScd3sTtAbd0/auDiGw=\",\"FWCUSH1GJs2X7Ou9y41B1+cPKKZzTdP8M4J2XqER/WM=\",\"JK3m3t7rkAEQ30+SvXkOvhUU1LJLyIBi1iSe7IWAVHE=\",\"Eq0mX4DYVaetzCq3trufSbUCh8vTbn2eQYYPxllnNK0=\",\"LxYjcgPRPGk/qm2i0xYrJdDRvolcgCbK/e7azsfXyDU=\",\"GGjxdm0+L5uxUrFacY7Lqyh/bZzS6bxeZkI7W7x25D0=\",\"Eo4wutJvEcO+mmiaENCTgitdK5IKG3jdzX3xqL/KXWA=\",\"LnLDsfa9Onk7J82AJTLSdo3rlmjvAEkKBxbpVDGrvF8=\",\"Cj6MB6WmNOqBXh9Xr+lJRRXaYj42OkCOUF4BRxxaK8Q=\",\"Glx6VKgf2TdiznnbbcYE8Dv1GdaDyycCg5Zi5pJxvW0=\",\"EyImdMlgPbSl5aNjmNJNd1Q6x5pKMdsTtIyaGZgEYDU=\",\"AzO374115h6fRP8RGC23AxFkint4rd/k8hRCkatZh6U=\",\"Ix7zpVQGYTJ5jlRFBbEdUBBsRAapN8lwLHveREV9T0c=\",\"MBZILM0f8o21XWUyQg6VudPGbRuP3O5bRf2UpK13CI4=\",\"KErLzY07fG5+f7JG+ps5gRwEWCDu5V5X5o16bLt/Fl0=\",\"F3USRMviD4FrdJC3NGuN2urBY1WIt2X8DnzDN1RpmdU=\",\"DjsnqBED3SMVF6ytbGnkH79IgjfQ++6PDWUuxyvwmiE=\",\"Cq7/y9AWsniR7IyAOEpzViEbmZalzJreuyRwCpdtcbc=\",\"EY9FI2yHUoPN5HjfO9TM3+1T0Ifs+NhdJL39x4tAGMo=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"LLSlKOuuy1zlBE5gmp7F82BXGFqIAi6DQNdM9IV5WV0=\",\"C0rrIgUyTPnJFHSzkJ+qggWazn1T9Ozm6RlxwR0hKt8=\",\"Auh5/xfzGqNmZtzUIwPUqtn1W8jVXdzXuMVO9G+8jmY=\",\"G/X2VV7e95uwlCGLCYDyfbV/lwm2OpyUsYVSvghaYsU=\",\"IKNom3CEDXVfv4jI++Mj+nx8Wq0OiSOhZTcFEVhfB+w=\",\"EKULQyhkiDv5Kl+3fmADUU9D/kpaHAcKky3YNA6u4vM=\",\"BhYqWML8clps1HRsjyKamflhbc/FQBSixB6Xuewespw=\",\"ChLl+7vWbw3g1JgQ6UgiBZH6R4q/zfoasPxf6GGyFAw=\",\"C4mczcETGxEnJEk68RY21kIdtRalno/H9ugkC9dYG/o=\",\"ElBsPuLRWwgqLPMRHpvKPSVaKqpI4W6vUTBGH12IIOA=\",\"ITVIFWb42XbWx3bGWUmEnn3Fowl9inVwJAIjVpNQOXo=\",\"AidgjhWHJ2rtS5K4xgLYH8MryVeCbixMg9joKkbYq2g=\",\"H0/F2NJ16SO9gvjy+sBPY7uk/JVYMmrJ7olfz2grFY0=\",\"Ad5bIdlC7cg9jHm/6mT1TmgRQzmbvPWNSzHIydZxNV8=\",\"DI2a6DgbfeiKwolEB8gVj+Cf7H43KkVIzA26TZKDrro=\",\"KObyTvIpolAWz6p+MAcwSVHnXKFOjq97Gcfh31gDODM=\",\"Fsk+lNXsH6ox2+KhBShtg5WI/RUX3KLgPWsB04GtuaQ=\",\"EsUfJkCjwFcm0IGX4B+r99XakWcdM+QOAPkkAnqySuc=\",\"G6kyTXfob/YjTbZtYYORK/4jUn4sBWdEIx2ZmC0c3ts=\",\"BmFue4tPNFlaRZG/rHQpZjuFLmJtILzm7ngFNnmH1no=\",\"ArKRsAqtqIYxHb2OkvpnZzoukGH4e0Oj1FcFFdvpZW8=\",\"AkvByXj89ERB8lHAde7lLHsLcz7asFtNIIGktS6nmPo=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"JYqdKvUrT+/NQJ12O9jkBsQ1WpxIiHilosKCrer6KX8=\",\"L9gvcNBfS+vUZjTTKfMX52z/UUmoFCTR2hhYD1we78I=\",\"D0tQP3vkjAkxnFqbA0zi2/MECHPChKwJ8lT1zoboj2M=\",\"J20DgdQTujC4MdP9SikkQAkaH39P+Rn8pLsrLJAMERU=\",\"KOZh5M+UL5yflcUDrR0KLQeKxGRMXf82nVVDqnxI95g=\",\"IXPGeUaUY0zOJnvCGZFZjz3rrHCSDJ2HdZR7y+P1ESQ=\",\"Cj+6JBAZJw1c2Ly1QImXlfxZO13qIIzwFqivlwz3zCw=\",\"IPzZwI7qjenTjdEBgOliLV58dJPQ+MURpNL55dpF/vs=\",\"DrxSlgUkM/hkFqwXWD7wbbC2q9jUcRC2/EC+u+AqwpE=\",\"HXa+fdICVkCNrWZ0yNDlHVpaXLj6x5Bn03lkVhaNACw=\",\"CpTXe/iH2vAc5U8hxokfOp/hT67CoUAfo+4ioCRO0VU=\",\"EXT9KctGVNCTImdmsQXnzmPwAWoL95DYR1IukGw1eoY=\",\"D8crxdBRxKvWnZHBTOxM3If7EVBJ8bCKpIL3rH18Ti8=\",\"CEUVhVWxj6tqK+GEhJtlacFTDYNtnsN/nk4UwgZ0IM0=\",\"KCIMUG+yHR/z67xHwsjXZtQnowtTo5ZLpXWiECHYudY=\",\"D0WJeo8rXEIU20IzIfl2OqJWkuDAXUbppF5SU6ppaiA=\",\"D3HhVlALZ+NWyYmZxojIsqNU0FN2YOCFK/500DikeF0=\",\"G5M9QcrCXf0N5nnobK/H0ThV5Icdm2HhGbBNUZnAnws=\",\"GSh3dfyQkDklrDf2Diab9o3AVnUHnSEr/J+qb/akmCE=\",\"IHtq40g6jOK8Gy9CjB7iQKzz4coBD1ggsGVcnY64aK4=\",\"JdcdQSZL11/VBSgGK+2CI6JD8l0naBabNDM01wh0D/k=\",\"LqyCEvwq14j3Lr6HEPPGyYYl5SiUZF89cUrJUdryAxw=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"Fy/RLU4DrxSK7ZMQNOcGCve46FRunk55NaMv53J64/w=\",\"FU3TbrRfUw/ZSbhSM+t0Wu23YpfDOrA2vKby7s+gMA==\",\"DW/ubhJ2HDgypIqJmJq9XGrHokW+MdwliwPBLMMIGMk=\",\"G+GBWxfceuykRA1YUPeHxk97JR3bE32lMZ2tjZAl+oo=\",\"K+LtuIZ6LEyz/iZT20tSbn7avERBg0H7cIpmIFCbi/w=\",\"BsD+V6RE2QORzrWpStHeFEO9Amzvh2ParOI6O3AaXNI=\",\"FUSkVr1+c27IiBaYLLru84Uw4chIDcWbt0zoRN5+xDg=\",\"E9zsfEEMgqfPA832YeTEd82mOzHTQnRlOYDPP28E/nA=\",\"KIMkgtGJG3mbN6nzTyanKoukz/lTABrQWBzUCA0DlJI=\",\"FFPNO8jRPPz9sMojVnPj/kf5F3KjhrEbMQj6qosERG0=\",\"KUjDWmBpDdo7Xfq7wsw5LFhWcdZLozj1ES1KxGcg4/4=\",\"FbrXpnI/6jHKLPuLeaZWoW5gIEBhk+ItUYl7+k9aLQw=\",\"Kj7s3RpPm6V6trnTGjWTUsSdwSnWjZxQmnSvDRonol0=\",\"DRpy2an3MbGYi6IPmdiz2BVy8nA12SiNi702hbKI+Us=\",\"IJmsY3dUU+EnYrVwdczPxv2VdKZfFbrJUJHdlHU1GmA=\",\"Bg1oHSEcAveQn6Mp9uBdvnRVrVh5rI09GRE4sF0ge4I=\",\"C3UbJnSHg0TROyUUQEda+bNxVCCd4HYEVrHa3Rv5Aog=\",\"EsEaZX9gJCV7HS555am3ah77w8P9/PA5LAYwhqxYoBo=\",\"F8kcrYNIN7mkjEZADT4l4amnFUyPy+ARVFLT0j0mWw==\",\"H8OCCvauZRX95FoxWWHidUmITis2f/iLTtk86wXeYVQ=\",\"F6FntbkBTKYzADZJYJWtcX9uN6Tcd2qrG4Lqf991He0=\",\"BGcC9itp2vlKEFl4YI3Sw6ja7b54I+j4J1yMvhapfcc=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"HEQiOwHej72mZMqVhIuBMpXwE7jCCMiOmUfT+o0kTPU=\",\"JccXnEiSj+5+nKztYkC4UQUjIsWCC6K9wymGj/3MF9Y=\",\"GVimjwJAgQf6Hl3ndpAScBgbPuz0IcaurcEYZqZOK1U=\",\"F62a39VvgZX0zVXMh6gz6dahLgkbWVKdAM5gTpkwf0o=\",\"BWOOkKWINwVlJBLKXPn+MVu6p0dDmVtgAHLdS+X1zPA=\",\"JGfPFjR0r8cSh+xWzW2Mb1NHmus/oN/l9RKdtDheXvc=\",\"I0JxUOYLb8SLfI1RQMB9D5f4H0OXwJWfyFHIhpnI8C8=\",\"Fvkl9z4JGxdJulVgmTFX1yWf/xPCAQ5HNOt3562mCqQ=\",\"Lf19Z5biDdrF+hLx5TOVfGcfq/8MjHS8W46o6kpMh+w=\",\"BmTItN22ggnBJT5CSIOg/AWf1JvkakaP/te7ssiXjro=\",\"HzzkjD7ikiukbyvw7VFTXh1VnSI7SJvqKYkRbUjnvSU=\",\"CErhf/f2hIhaTyHSRhPXM/ot58aUciYR/B6GwURhhFU=\",\"CuK+XJdfycV+6xR5HFI0wvPnTIqxUdSUP7mPQ5GIjBE=\",\"KK4/s4lqgbvFg6JxXJ4hkyCceb4qTpqJTqJlAQ/f+H8=\",\"GmY0au3LYC85l0tpvePIP8cpRKxsLdMqMupbM4S0Fzw=\",\"IkpDR26JO9IMrjlQ67aYvFWU8PcOxb4gcI3EKLKqCwU=\",\"HXjvQ9knH1cY2gmaWtZYmTqmzE4mPwInQzwcBwC+mhM=\",\"HCreV9vgr8KenBFqi1LcZT47Z+iR3dNj4dvNUVx/B7o=\",\"DTQy6bc8gQ97GwE80skgRXTnXc4shdcnm6HuXPqRKs0=\",\"EMXtyfQgHcKwNm6mhZOqJ5Q4dF5OmAJLXaUwC79ZT5U=\",\"FCTVCVo+08mOjVnCF0Pi7hjmzS+4ek+PtWalHVUHR70=\",\"HsP9w6AoMwOfPvmfAcZBxi8PkK9OLZqWEEjpuHaY8Rc=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"DZq+8mCxy0RMwoFmp05ymigz4SRFqrzxUcHNA20ctd4=\",\"DtbLurL4cB2lS4tpIwTYpOjLLgj2VciJJOJ/TxWppSs=\",\"LGN+rLYCpldmi9UTp6EAfYJc79mEROOLAhssHZUKdvE=\",\"IPqBqb9XCHzzK9AfrLmGl0Jnksbrxz0C235a4ht1DRk=\",\"BPHSOf7nCd5bC15dXeNwQE19+C0isIww44p1UHOK74U=\",\"Ch3kAszRqq/svzEBfnFCkWKxxtgFeb/cWx7/fEi/uBA=\",\"HBTQMRjXEsjsXI/Nwl7J8Vv+iFd0mn1D35EjLdZfN7U=\",\"DF4MQnIuanTnydddEo30pWTaPg+4Cc93aGFaLPwOkYM=\",\"B4xLcxPUcBMO+rbYic58GIMuYQ9mmBhBgk5vHYEgcrs=\",\"A2aLMHyT7BT9BHcTwazbsLkkhXTuXW+jT+iD8cIvPLo=\",\"I9m+dpMOxoZmCu2osM+XU+EMhzAOvGQbqY4J3S9S/k4=\",\"Apo7I0XsBBM8dzFrQhMN4BMeuSJjxN3i6gcGPFwShoA=\",\"IJRxGhKBLih9JF08Pv73wX8YqpBzeK1QYNgHErGV1MQ=\",\"BcjWrtOeLZ+pouuhErTKCuoa+sLDpoYitQSEosNWpWc=\",\"FSNa0uxzGfxXIRlTRFPOr8NrwLwuRQeiqO8ff6nj6FY=\",\"KiUViw35Swqp2zX1a657mTVBjp1q4NcATiP8vTjeNeI=\",\"EtuI7UBWQAuPM26y1Q7vtHyMs0wxcICTzU99wwoT4tY=\",\"EPIRI0gkLOl/ZNMEoQhpQoOuiVnlyRcxtiWQBUC+0ek=\",\"DetIGrNFbMwjLfzVDrgqy4/spZU4vllln745QmGB88Q=\",\"K65F8cL/YuYEj7JOqLP3MvbKliAEAoW1+JvC1Nso4Ww=\",\"K5MIlEbXEwBzlwyiBZ+wwGEC/JGmKIM5todHBhP9v3c=\",\"DwEVr/XW/Fgrd8dE56MxD1aaDnhuErUmp0GtfpWOEFI=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"EWumSYE0QFPbtQAiz3l7fML90BWWXvMJRT0/JJ1YGwQ=\",\"FdgTqkIIFEow0bRQnbEAmn7qT0qLpDFF9yoNkjGkVVM=\",\"E0f8A3srJvsjCM9BdxWpz+Q8LGXyxxx7tsXEDr9zDos=\",\"FTy7Wua21IoTYIcM/V9eD0xOpZGs0U33oCsu3MLu40c=\",\"JJ/xZmYqtDZj5l7AeJxrpr8bhZRHGiYWLK/mwyEGoAM=\",\"ByvJ5nj7wlz5EB9Jy8/EjMClG4aqnX5mxSiXpdP13Ks=\",\"CmV3ripcq/TJ8A7qdvn8IZYojx+LPBbVTCH7yyih2iA=\",\"HGEKRqTspsEhWHDY012ScSVEGSslbeX4L/bTzW6zJ9E=\",\"K5oTy+s6zEphX0XcrxiCjIRKHWG+m1kgGo+9nbDLJkA=\",\"KrBWDf9q88D/Sd5rND6uBcZloMrxV5LTy9gyERnOK5s=\",\"Ft4I3KCtbenrJHhmsWz4naEYkL8ShTGLks8wLY/hRPw=\",\"DPdgMAspaVGGRcy7ydlP8xW5Ztgoznbp5mX6/kltyXk=\",\"Jg1WTfPcDbZ24i+kEOQXlP3edcTxlYS0NlC6kJtE71U=\",\"B4yRVy3RR3sHAG+xtYUu5Qq9eJoZDbgcDFHehn7R/BE=\",\"IoADnUetRm5a9kXwZODBDPEuksPUBnUAjUxOuehzgH4=\",\"V+IyDvtCNOYWkcm7V67aT9EasoKyzaH2npGHFwDIHQ==\",\"Ivdxun0tJ1z1QygyUK6gB0MqA5c8d6gnRLrJ/ZQhNr0=\",\"DwEiDd0HAjcJx7VaFIXwpUQwMENaoC2e5nf+TV6g5i0=\",\"Lh2pMOqlJ0nBW7a800sTHnwz6jramEN92bfuuyLbSOM=\",\"BtYhxVeJh1r2+mZFr42nMx5UBEpboBxUiRuhGvEKNsY=\",\"GsMCI0hXE2BCRIVxQdrNA2qwiPKTY+tRwxE+uo74CNE=\",\"JPBrsSHuzjvIxi4F+mwOviiSXipHptFuMmnFmEaC2k8=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"FGsqzQlwM6Fl11JbLObMqrTVQdXqWOIVFm05PNVnfaw=\",\"AftYflkE1Y76AHMQudhmhPrGWO1AbHDQ4q+RPqQWADs=\",\"LKchcoDzy4dEw8OCTkbG3oW2VMQbGfS2YvglD3QgQeo=\",\"GubqIBL+Hoe8oZiM77Em1jCCyz+nSnF7MAikAmpusos=\",\"LYD+VQ16T39n0rFwpDAnBnnwPRGYOdnKcu+7mYLav8Q=\",\"E3VXWTlYtZvbzg3GWUyZy4XIDz5RjpkXnYAAszlJJXU=\",\"He8FCJtERK+/Ef+PtuECWe47g3/Q3T2b4XWV7LVIDJI=\",\"IBsjs8+xP9tA3rI5s+zhWP2MZ5UMJC7e2zlUD51xeIo=\",\"ItnSfM+12HTe/RVb214PklXnvpcvkSxEram3ooMRFr0=\",\"I5onnlXC/UfVhyWXzyzhCrQdukzeW/TNf9R4NCI0smQ=\",\"E3ck1qo2MUOQj1DZkL5fcHlOa5/he+6k3P6p3Atgc8Q=\",\"Hdbj/eG4SgtKn9EBbRxtIvqAq+3wADaNNNjAab4v7nI=\",\"LJRSKFcWLk5nv71JXoI67Rd8il2H0jf8V+U1Wxd+c8c=\",\"GDAi/tumx40AdrssLGu0ciRE/ndwPgpvRi2rVXnave0=\",\"IlLgerTQ/Pjc2i/RhRTwMUKCKXzJmBnfzwpanzVURDA=\",\"BxnmMs7hMbhTwIJPUnmAvwDxjYoWqn8mVIDNEO00KP0=\",\"MCRBso07HPOd2nvp7O1Z8xjBiCdMat7FhHN4Vklf2HU=\",\"EmksfXMB4YvP8QbCdc3S28ZwAVArIaqJDWvXDpWnaTQ=\",\"Hq2gFnlEObTUYLR5VjASJWAbqScyZqnpVf0+PDR6p98=\",\"Bcs7Dd/PLqhVLvV4E50ZgW1cPqcIT4DIz8xDlgrCyYA=\",\"E7ePAhXtf0j0A2PqVkD7mkG/5v9QRK06/1HXVdm8+xU=\",\"Gzpj0vXYQWP0j/JPmcy6XvBbKcqAAZkH4cOniSlrIt8=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"KVf/yNGwo/LdAmrXuQ+37rVV03ctjyx/R+N+kTqSH9U=\",\"KhxsezReJgy+ERVKpqBi2Hclu5QN/peY55TVUTBvdfE=\",\"MAytQwRj594EPFQBGllLLlqp8Kr2VYpRlKaKMoW9qYY=\",\"CrY8126t0B6UShPnPy8Dr//BG0gjOAxtD2U88pZrHqo=\",\"JiJ655zexbgK/4Atu5v06GWa6SvYqDvm3LqNWRfE008=\",\"8w0XGf8xyKwhdeX9hjtbBFFoCePHrG7EGhpT2GanHg==\",\"EceGhxzCXqSN9a0HCy/TlppIQfBYhagAKNkQt7bm6rI=\",\"LHpxTae3XWuz6xa40VmfNykQW65nWhkk9DwyOfnBM1s=\",\"JLcCaylsJFtH3bweREkgNMS3qNNbKIfNU5UTxdBTJAM=\",\"LCR8cpD77sVbyFk7D4WbQ0UQAt8YkjiTSxa/GiDTYko=\",\"C5SJPyUC04/baRv9I7IR+sldk0z5E/TFLqyZmfwFnm0=\",\"B5trhSS4Jw5IBWK+rGlq/tiEBgFdRBmo/xIzKQUN07I=\",\"J+LhcI/IKnhos6D6vwWdFk7T3Djw5iIFNJKLHN9Z4mw=\",\"MECvvISCdZzt8Dq7QaHuhYzfVjGQ7s+yokQk1JZJEbU=\",\"F0F1J4TqH8cwSsoER7KHjeFoyHt44sPsMtaAW00qQeM=\",\"E0Rewyb0rvqiqEVHdntl2IhGea7ds5FZiyGa5//UGDA=\",\"KyPfEgkzp56x/uoyWlIbpdUzcuKdJ5qMMt7DOoPc6sU=\",\"LGrfaOQ/AvZyHZ/W0Z6JNM46Ri7FQ/80IQ6CgjkXd4k=\",\"Aun6rtXCb+zEZycjNwYj1vVjU3wG0emCkhNPSuJvHK4=\",\"AiwmHgx737kz6Ag4L9ddpoH0bZDnA0BzJmMHaEB+DCc=\",\"FWBc5wqikYlzxL/xNjA1gLUfsHHVIkoXMsEEJLH8eoI=\",\"IezQNBR0w7TOgRAdJnypXXzSZH+kv7yCOVap40jduHc=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"ApMuiHbZheoJVJ3yxk6Al9hcNXiqRq316vrAOZmYNcU=\",\"LBv2YKHciyaZWw54h1sMKN6e97WR+ivAGhXOdym5rFs=\",\"HojzxO+jNPpb8xOpGcTeOWveguEk8AAvHAAin428tns=\",\"DHdNastPzEWxOdkjI9qCME/E4pqRnJRodG3SCm4D/O0=\",\"F8ERdMkQTi6ho3S3W+ppJexFodnlKTdBlE5TWdTTRAg=\",\"Ih9tNBIEgCCqgy12SltegK87AUE5so8GkgzTo9PHt7M=\",\"LAtAPRM4YUEIWbSBMQAayVb+TJ5aNo2cPwhVYOXTdpk=\",\"HamlzcyNXI6DkK/iS42AG7h7n7nu1Cmq5Sq6F1cMnQM=\",\"DD44JScoCsZSWzkiOIsxDcmGTZ/RGBWiyU9zePPVL1M=\",\"LnM8ZWq3MIpfd7F0fHx1YvC0jZvEK0wTkmMoQNxn64M=\",\"BVAMo+tL0IvZGZfU/GmPoFDV2A2IH2NPhP6qrFexWy0=\",\"ESqsMBrVztYZwpJcKX0zh70GkNCXKqIfiNdDf0K7XPk=\",\"JzycVSbaYTAWTiNgyc8RHiofsrXwKlpGPGxk1VpsR2A=\",\"BbMOXnsB2HMP1Unu8jK9OCSzpnBgTM+iQH8qY+q19fI=\",\"JukFw4ieRllwcOi2fUrJ7UT1qJ1Z7+x63QAklNo3bGw=\",\"A6S9CVALJlI47o/izBSeBY01VZ1K+AS+BxGYFbW5iWA=\",\"MB6Gv0eQAotnSySX3rQ3DzKyQQ3vxqTz725QCg8pgn0=\",\"CG1x2xQ0VURNmbmZOWS4J8rfT+r+vdzwGcJ48yyBFPU=\",\"F07xd8Ey16PpHwJjnX3YgkhDUBhSXwle8Yy4RrsGDmI=\",\"BXrxFNJBYYRzX8/wbYjnNPfY1d1BK3xAe7Og8JvC1Es=\",\"LNIQdtVfXJyMPDr79/DrL68F/4DSZ+tpLZO4QAybX9Y=\",\"GrLwXt4LPpeQUXcS73FFaNVw2joIM/joMXwWRCZM6X4=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"E0/wC2XpohTxkhK0dQeBuj3S4oUR9hzaemlVO6+0Tcc=\",\"FEd0pgW7in0Rsvj7wqDQUUaBKp8dA8S+YIpUTRitj20=\",\"Lx3jsINYBAWd3rHZO7uYIfbiBwNl/zTaLEPf9l0+340=\",\"CTCkGpAd353GbSeyI4AWUArsQ7BrrG5xE76v8532nHQ=\",\"BeqYiVg53utjfAaTxgmUr+SVCgiNEAWUayDCX0ix9Kk=\",\"KyrQ65b+XlygBiEJuMU10yuphOOFR/PRBQtyUmiE4Uw=\",\"DqOg/AtG2hiancohPAKI4zaVc/pms9M3muVt8qJSYvg=\",\"Jy6mT1SrNSbkZ5oNCYJWAjOve38uhRR6himP5ir7Bzo=\",\"KBqm5mUof5VA+y9tE6B31S4UXtYrOMZImbkqEjNXwIk=\",\"KkMvzG7S/OUL8hSjH5VGuqL+j7PR0AFFp/ynSCriw5A=\",\"CpgJE48SQ1rRFQ+Px01AHZksQkOaROvRIpkb7OOCTtM=\",\"EJrcHPhSjsj1N8/peOMg4qQCeruoOjeBruC4hESAUVQ=\",\"CXm3cWyL5rxAkaN2/9H8ExPhnzJmCVvHU9os1N+IPtI=\",\"FjyUZoXFhdRrbrij7a8Bg1NUmFb/bsCiOPRaHw1ZOvE=\",\"DT0YkCAcW7Gn5A3VV1tCZ/rWOukfQp78X1f1L0mPQgM=\",\"H0rfWKHKFYaBWsJqdtjWolwxPpsrCsf4MObh4M7i3Mg=\",\"KRbNbKDuVs55NFBGzhqRojGJX+JGKKhAhSR0skC1NFk=\",\"E5Cucw4Cl/HH7y4ns8BQ1nEwFaQDcNaigfHJhdv+hvk=\",\"K3R1YuSVbedPSxFeCCvZXACn4qF1JVx+vvfNxwWY3hE=\",\"JtV6W98rHantqI6FbEkJxCZeqG2Lf2MMrxI6rDKOAgc=\",\"JEECNeP6rMLaQhW5bMxSKPrwBwnaxlQvWJQJ7l2DOQE=\",\"K7DYX52q2YkabKdhF8WRKhniuVnwPlmsUsphxvyQvzI=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"HFPSXMMO5nucpd6S5XSujgBjeFaIg6NexnMHjFz//6M=\",\"FYCTcCVOJBNZR/pNTJu1NmqAkkTELkTVitUQQe4KwKE=\",\"HH/rlcdN+taaWYplabVUSzE4wpPHiVfCgeFheN1NL/w=\",\"BxYEgmifWc//hozkNrYTXOW40uFa7d+tI2y70XT86uY=\",\"HhcW2KSfDDJEhbw63A9qR8pNeSHgef7CcteapNT1A2s=\",\"IjTnzh5ABW3rYu3nuGx/ZIL3olPOSap4qlxjal8PlCo=\",\"ETTYnEzGTss1IC/Ca1FonHRbgSWH6mCuPiY2kItCig4=\",\"E8bAIaeQTd2Mvz0KfbYeBEQDgScm42m9uXyjHNBRQqQ=\",\"HHUPVoiB+ge9nQbPLDY1bFuCS3G/IGC3Y/solWZ7VK8=\",\"CBcBmaWyYLywVjgQBCje89+e/bUjNEHRT8IZwbz7Cno=\",\"HAv3r0NK4g5ZSSTpElFbviYOIa/QMPMut7C/XN2/seA=\",\"EhdBTafulmKdFtjXuQbfDBW7e9W/pVlZdHFK7Ys96Ws=\",\"Gbzr3RjdjNgnhQ82o/aEncAov/zBD9WGTA43xQFWlkw=\",\"BnqLf85TLqrxmO8P0RJrRffQqoZF41sDMdfu/cnHs2Q=\",\"KpLBeyupI0hEddS78WTKoajxZSO2ojstuiYNcXhTDq4=\",\"IbrSx3PHs0mykwvgl4ETigYcBvTwb8OOcTMrlC/yk58=\",\"KNB4ZonFqbyMfy62Ly/Qsh13bzzXRyXAvCruyAEEiAE=\",\"IizJ00aVsAiK0Wal3v3iE3dif90yt4lXUIU2PW1e+Qc=\",\"KlTUZWR8isXfhuwrrHgumqVgl39/tguHzPPN4B5ArGA=\",\"E4IvN6KI+Z2IHdHm9t+aj//0gvhBeb4JJOd2jWeKKpA=\",\"F5IXVAaqOp5wViM/SnAELoImyUO3q6mYBXJ/96lWUHE=\",\"CAvEaHkBT9a1Wj5NdpiSWypnELelR4pRKSlk9k3h12I=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"CK7r2o/fmWZ8qqG39XDleTde33+2Q4r5tom/wS4si6M=\",\"BLD/JymVoT/t5/RGWi8K0hNO/vVWJuGCTAjtZ62YG9c=\",\"Bjw/RR+2T9XpXSHI6rj7mFI6cWyPg+D3ZLQajnMdrq4=\",\"GSjejMZNbPIRBwRaf8xODLpHBuaM/neQRFg/Kq9uiF0=\",\"HvLshz3KfrEJKxg1t0zbQDcm2Pq2y+9QsjHfmrh85yU=\",\"CuAtsOpAG4ocdH9Q6IXQh+6pP7MDeHC9NrFEDYiZUDE=\",\"DLe6bLTgVq6yveYaOFIa6t2Hd3JwH6Vy/HeRUFDbdYs=\",\"GOiecxcCVkT4BDJlzgDWE4JGcmX6BVWYBmubGbR2U/Y=\",\"FnoAPt2qfRD5blR7Zswr2fLKmdJn4BH8aWafcdC3H7s=\",\"BXPLsnLapXDzUlb9OCbjTD4vNfMAreppejBvkU23pYQ=\",\"B/ybb99Y7hgaAUHP+J40UT57TWHgF4bBdtyoS5Zk6qE=\",\"Kzr3THocDzlkKffi1w5osBSzomjZKJczDLn9sWFWdMY=\",\"IlgOuDqFSoF+QnfozxoF9mPRmMCytkWPpMxFEgtIiDw=\",\"DAOmU+fiBh1i5jigkxt2elUHIrMY6/yL2SSyLIoAm0A=\",\"Hw8dNFRoFbRBD43fZ77BKeiuCP5hdJenDoW4CALgVXs=\",\"HcmYqCcyFTczOyLN97zwpf2acs+e2dngXKgt9BBcAvM=\",\"ITBfvtNqC2EczXE5pIt9NphQQWh8S3ZIPu+T2Y4o3r4=\",\"Gcr3VVCFXhtNDlgERKc9sdhtUHtyAx0Rkl8z+89+nxA=\",\"D96hCYqokpjXLd/cWkfI+RQZVf9aYStMUq0+oEYfPfc=\",\"FeFVQtgXYoTLGwB/RlUjax9nlfBFY07IFfu1+EK7PGQ=\",\"JLUfhPBzfzXAONOAHeMQL8MtviI0kcU2eve6yg6TNII=\",\"IiMaZyv7gvr3uGdHU4LC/BdJN7U852X0tvuXNxd6Dss=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"ICDOxc8SVWe5d1btcXQlnexTm0xAu6Ubtkd5IhtLyp0=\",\"Frf/saSvSx2ujYKCTFQugbc4Dv6/MYMgjdh/M2jyzXM=\",\"KUdOf7ot6Avt+p8vi8qjjmsVS6LaNFT9FDb9W6yvK/A=\",\"KfVaT9MXBkf61xzzjIDEz4rwsQOay9GTcy/xvcsEk2g=\",\"I4PRAVUI4X+p/ygsF16l7WVfdL1Xk7rkcARZtWAMzu0=\",\"CyE0fT8uHtDtAiYlRaautCCbGAmxMvfxA2r2f57MEUo=\",\"HDtNeQRqADC3Pk7QN0bvKJh3hWABLxS4wVH0Fm4MnP4=\",\"K73KubyV7BUJ8q7Cr4sRfDTY2AeRc8wJnmWMhjCIqtU=\",\"Ayw+OacpnynIFtdh+8Kr2ih0PpF1R+6h7qp1l1sit80=\",\"JALuPGz6wB4ftlUcNLFZHitBnU7GmgqfEzHLVGwx37E=\",\"/722O4YWGrlkinu35cJdFUGEcHDvpYxiQJN+q9BazQ==\",\"LdUBMhVyhZVMv8bsby5zsNEhjGmaB/sJmEaQ0PyHGbw=\",\"EW/P1IqzH8S2IvRCVmvhMtaI7fJ9Uzf9ivuAkydpFRw=\",\"LDx655ib8jyGJ54UZ5ij7N2AiYrLtsLsH3Fut6kbAXs=\",\"K35g/L7vICCCPnmUSNocsLhm13bI90wDHeL1RSAQGGw=\",\"K0o+Si25wMumOiMQD+W5rSm2Ph4AS0Chb8AOIKg7fQs=\",\"DRUnslK/1QXzdc+GufyV3FX+HKZdzzdAnsSNqLEgdzU=\",\"AbCjlqFY+nF1ERFHZv+t6vxs2CtyOQqpCOHFtJbqou0=\",\"JbcYGuJkEcFwXTrbOJcWthX3wbswUaubmvTfdsymcqU=\",\"HObiYa1NY1NTiBSVfFGE/zQ1IfGO0eisJN04CXjxsf8=\",\"IRS3AxU8BdikWLhtqsuKEYCg4OBjE8afAxmIUhjVclQ=\",\"C7qT2o/UXwIyqsiOJC+DVTeZpd2JOidpcWnZ/z9ijb8=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"I0YgNl2eUI2LegGiDIuEz+eHNL3XpICm88AnC+bJ4DE=\",\"GHc0ApODhL3PPtKTGjSvdg00AeEMygKFQIEgnKW/nHE=\",\"EvSJYJ6CfuPdalMDbx+PuAJDwLp6wnIO1pl1BPf1DT4=\",\"CYrwmSEokq9G40ztuyHoi5GEqy/MuLhmWlMkYB2MWQk=\",\"IpxZVcO28mNzlW1OPdvObEyX29E4LtHBQcbGuMvPqV8=\",\"IEw90cFXYAzrHLVQcu4ngpKjADp3d/67CAozFo9P2fY=\",\"D+LLOsOKNfnZQ+IKTNNwWY5cGxKO37nLh38tQky6Vqc=\",\"KuCvhJJhC8F482z4iHtryG8C2hWx3/tnRwbfDZti6e4=\",\"HtFSCZfcA2RoNUCjL+PkNoOF0UC2GwlnL/DgvCs5gRU=\",\"JaDC9SK38nZnqTxDXCvcZ9V12oqAi/3ypDVYsesS2f0=\",\"JNm/RnNL6iUjKYea37ZXgvpcaAmhUgo2Vtf2czE0jT4=\",\"K1J3gXZpzI3wxrgv6xWH7VkhDxQUrmCfQN70wxTZbgU=\",\"ByTzOswsIIIv5/jT0fCsObL6ECXcGNzKpLJYomVOcFs=\",\"Fz9gnOSDdH3H6tJlmN0iJxB68FIfyqxe/CvcP0jAfJk=\",\"DPCys/CrQNcYFzqteZPmIT7kiATj5WPw5THiyTer354=\",\"F8409Fqv1jgjisWEaZdja1iqBNdrSwu0aqDNB4rhT40=\",\"CvUcnpP6WZEQRQS7qQFJIo1k7s5WDkyLwszxuUPPp2E=\",\"BnoyO6tPPQPfMlgYo5O6Xfq9ZkBc905l6d1S7i2PsZc=\",\"DD00RaJ9egQvorTF4rXQPBMy04vyangUSTJYlt9X668=\",\"G1s8cQs38ZWCSmI3ErIQTYIeyNhZlAvw0no8UPqi6IY=\",\"FvvLHEFAMbp3GEXm9nFR+pg6TjKXIDHvgT5fQ/86jLc=\",\"Lbsek9PNz/PsO7Ad69khGVH6tFTpoBn6RlipjxSMyP8=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"H1gHhqhuYi2eob/YfC16Ol8Z8lEF8CR/CLDh7Ym9nbs=\",\"Di3rxkF8vOk1b3X7VbfvA0cgXfuEtbDeLAL04TBFPBY=\",\"KGs5niyhiWEqjX276TimGicwJXeQR/cqxfyQKEffwP0=\",\"ExRLVGkuV33kWYygeD3eevKjqBzF8AMLbDvZLTv3be4=\",\"Cvckflk4nQ+VCbFohF9GpytEdNnvZt1+NfWEUP2v6as=\",\"GLPBouIEds71iutLjsGCDYDCilMJ2F+XT6YqGdJi9bk=\",\"ItbKXZWPr0lAt04/UP5u74iHmTAsfJk5kzGp2wqd3jI=\",\"KOvNtBYhDH6gqcRM3MF2O/7tCCZ8x6F6k18Odd1r62s=\",\"JkUiqFaYvxzSTCHpN/l1+qTL+zU0zbr/VaiaF/lHrt0=\",\"Fwyjjf8E8XkiPcv5bhVgkiVDbkf2qtEMIQWbVJuKzoc=\",\"GYDoBSxH2qKn7OsWC6PLkykaz3uEw6G4OXd2bXjnyoM=\",\"LvVed/MjCHOfCDHQqY96aWHkgi5TAn2GpGqpya05tko=\",\"KErFJjebYUoUx+oFZ6unpFnCacMv1a8ZIkDBEQOjCME=\",\"HVqXiuLeI4CkWNI/LCwfe8F5HU++s4tsejVrbwM+bck=\",\"H92HUjVe7k7LHokktlQZQtoMP1bi9sEuKrde6/zRvZg=\",\"J0tHUH34Q8X9L0yCPEwiBXt2M2r/xmMQNfKOV/am04c=\",\"LUax6oep8u1thmX0OqG09v45m+0I2cd72Y6CNQvj83k=\",\"IeUKNu4ubtVi/XMBO7LTRyS07zRSXFGTFhAHa4HUnso=\",\"Lwp/2iHBmuVSM9uRPx3Yhr9x6aD+EvQl1Hn0YvHPSwY=\",\"LcfnFsG00YLNsHjzjucUjw/0WmX39jYKZtain+eBcqQ=\",\"CiTY3hNi/p+PI2Cd7lm7tCMPOSNuZyn/3ZW+3Pj0BN0=\",\"KxwIfOAVI8ng+X2Bxnp3AU5veRplb47cozEz/pIGu78=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"JDq20p01bRR7eRWnoR9u9IWg8++NADrCOcCpJt+CAnE=\",\"EPDqKZz9Ftp8VM9DFaS/mT9sjtIeHxtiklhlW7Vp87Q=\",\"EFfpesmD/t+lCN5ekFXCRim3+qJ58eSDopJ+YhpFoW8=\",\"E+y5aSWphRc+eSvK3Xbb9iZX6K7m5zLh/vnOsdhmiL4=\",\"Dm+bLGTZ2X4dzVlpGilExOYQ8sk2GpMoSFPDNe9Ei5M=\",\"D1Ew36rHaYyDJHq303OExvT96kxCNpHbwEZsyEfSIkA=\",\"BxnGbVENiNUagPIsnuBsq1Bu05WEdTLwsK73npT/XDc=\",\"Gf5946U949DL+74ibG2XmcrHPDQ7t/ZSJG0zFN4s10g=\",\"H7UROGD5w3F3QtqKyNwC09dQRHrgAjZ4msQAq3sKSlo=\",\"KGN8lxi4wQU6wn5sy2ihTaztXCTDkyRg0jqkD+BmYR8=\",\"EEn1+IXFWf4m99gRxmDMnG/9tRA90yFxEbmYCKKKEMo=\",\"EewrAtF2wiK8R59vuk5Cdzi5asobfDqhHbibJ64Q8OM=\",\"GUr1Z4GVP2nhsAyAQOrhvVm0hh37s5adgWHXdVIjPBY=\",\"DnUu2gPJ3GhQYNfQYl1Igu6czydIkpKG2wPwpFPYwhw=\",\"FEDDGc5H2vYTVCtghQU6wirOckaGP0nfZIgpLnvHKiw=\",\"EM151hORVeQgjdxxrJZGrrSsYaPq368zf/l+2RCeCXE=\",\"Au8jWQYEt/BXqqBYMzP1dm0lpDNm2Zq4f54pBgCz90k=\",\"LvLEX8R7F1y4xuI8LNfSYzLuZUcHWYk9Fndy8Yt5n5c=\",\"HnaZU8dJAeHNOeCp1+oS2xBfoqDD/kDL42ll4RFSSCw=\",\"JxOnBgyZAbkE7k79McvhuwrG7+43VtWTkui1lNtXphc=\",\"FbO8Y49FVqx2XlxgZ4sY7MWnqsW8q+8kfanPEWz0JJo=\",\"HfROa0P1Hjpwi3tvegXGfngX2P5vNuNX4mYmXjGDU10=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"DaPuKD7bDkJWiRrJ9BZroUwXQ2wf+LaHD23qeWLzbDw=\",\"Lu1ft2Sh+mzTh9GTInkMh6a2oLE/gy8k8PpU82qtwNU=\",\"DLn84Cw/L4JwRHdAekaZHKsxHbbhLxTjiMKktgk951o=\",\"LuunNlPtzkHO9icimX5d+dL3bXmc8RLSm7Vwam6trQg=\",\"BDGMQUdVBNzgxrvR52/tgp98inHxsC9F7t9cOnHmOQk=\",\"KglGVxU+zBcQwFg8HDt+eWbmcFfI+u3UCOUFEnp4YF4=\",\"D0Cu4lMqCIzabRsTxIVpAi3qYCP4UjGlVEqebMTtzOI=\",\"DZeucjIUJ3V2kRI1vCXtgQY/zSG1nmJ5J18R9XwFRFk=\",\"CC8eXo5Qh8Gu/Q9PxiFnvKS3O4AJ46Z+B8767x5HXO4=\",\"KE8k1D0JvzHBtZ2EqPL/2LG5A6K4iCf7qLAkaP9XqXE=\",\"K2U46zaZH8JCn4w4SD99Sucot+EFtKxrtEkljridOqg=\",\"CC55kQk+krU8V1ufUfi7jR0qQFu5Q1lUSjEG4DOz8qQ=\",\"KIWTs83SAbP27n2f8hfgutyd3iu2yipjNZzspZ7RLYE=\",\"J2KwwF9mp9OixLRvbaniBxlMMqkaFdDIx6hgGHRkm9A=\",\"AghRzLIz74FENVcPlDXq980iuvKolyC0sJ0DXdQtAwU=\",\"HhfkrHr7WYCQPZ+qo1XS1LwA9mHOpDXNVjoMCNifUtc=\",\"EcZHYvbkBSjvX2DEkFzUQuE3NIc3/xHvn+GG6F2IzIE=\",\"E1p4k/DfMb2wk+Lxk279479sgM3tU7vyOELVz6c5wQ0=\",\"BnDJQrGe/g4krmZ/iM8lSCmI1P0omFK1nHQAuykf0io=\",\"L+uJkZYBaCfvA9/6rim9n332bzEvcorAOY0r6QoQxG0=\",\"I7uKz7gJvbXtKyMG5YcEZc2IHoUXz41gturLI5k+wZ0=\",\"Ci9m09VhZag1etTt44bovT0sGmpR7EqSjQKqnPLJQCU=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"JiHVPZD1GpeoJFXUSDWfH4drCO53kX5VKYtKT38sgMM=\",\"LhcTqhOh7Sp7V+znLVWZtuI51fpThm5AdEQpAlTxBRU=\",\"Cw4xNbmpuzkAoxK86Mv6pr9xdr8Jl06SJNY/ge65zd4=\",\"GzfsJhvlUtf5ysvcDQ8i6+/XwSPNzVSgtJPbMKZTWf0=\",\"EABRVlwuTZ/tEYtV++9vBgYI3+RVXkhqROaXFpYELdE=\",\"KYgZusYXeLIYFC5PsmUz8Ksfj0DI2AcP4vHUFw2TxYs=\",\"LLuQ5QiVLEte0mB5+F8R871ygUDjuMuRwdqRUsioJWA=\",\"GOneUDzvCuP4kB19kAQXDkZh43krRk6Nfhp8f4uxcJE=\",\"JApsWapyQ4JhyyYHDKk+812yF3cKIH582a86TfYHaK8=\",\"HFwCdBcr767KIB34du45tYL6hIoLyUVPaDSwc8Ttf3M=\",\"HdL8sieHZSPF0HWuqtLfVWynaTm+mEYnaPlJQMpzAo0=\",\"Hg6//ZVn5CIrMivRYnWvheOgnG248FOnAngnvPuooM4=\",\"BUnj/S2LTI9eH25a2krcMSXs5q8QQeTyl9FMyAvXqGU=\",\"CkOn47qDBhtTefYVgPF/21Bo9XoYzz2PRDHvFKf9i70=\",\"KoxxP6C/XgAtveVEr/mI7Ys0ev4rNkGgjquXm93U0sk=\",\"Awe0I60Fp8bFp/6sBB3hwjbPPbjg2kY2irClET3P1NA=\",\"EgLcpVE9hgmz6RH/w8H42kE49WKH8oN7wfiCBGm9WDk=\",\"ChCdLnF2eWQG9/wlyvg39cjSMGliuspiRX/UlnOw5I0=\",\"IVj+cqFnL8GwrrVr3s7/QQ3ipATJ9Nei45xM8IACZNM=\",\"Beg6Tz7TD4Y6FI5mwXcaRjTtUuc9wfnDXkeXRNrLfC4=\",\"FRRvAWnQ3LLmeKYkQ8AEQsw0IJGm0YopOheIKtr28UY=\",\"DifzeQSCUpaVKToN79H0RJXwra6BXN7g086fkVEsG+U=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"IWv20NJAzooLQw+FJZt0CEz5+ZiCPb8TCRBCoytOpWo=\",\"F3InZi3MfvNU70H9s/I0rZPntwplUOCb4slH6kYll7A=\",\"GGS7lMyV5OM7dnOAmQnuOhVsiSzqZI8Efyhk2xInjko=\",\"Lrqci6Vta4AGVKHoBdQDu68ir3/xqtkqt89CDBKaJhY=\",\"JBMzBvKGwE0sLhdMDM40xkwh+B4N9nwlk95bQi3B6yA=\",\"ChrrpxrnPyhGy9V/ndo8PiS4IpHSIQimoFqcBuACuNU=\",\"DS0K87Fr1zil4Bu3r1SfhCoqn4RwY4RdNtdCTh0r/qw=\",\"COSk1PuXRzz9iAyShQKMKIPW0IFkrn2ybmkAtTLoSNU=\",\"KyrgK51tUyIJmKy7dJwp9EdsnyzTS3TGbk8sSrqrZSA=\",\"H9DKCynmNgnC9qMVDvYmFqX+IWAmY4IDDkiymAYph1Y=\",\"Eefx+Rgm2BWQLi2deeAnxE54GX9EUMvxQSjXBMLdRtc=\",\"Ja4UHTH/IjcKmWk62zUIWKMH4fz7YP4XWjJ52Zh54tw=\",\"EwR8JII68L3xfMrto3FVLog0mQq+t+56mmRqp7ufR1M=\",\"JmNY4R5QgdwpRJkAB2RHM0RekN2rIM1QkSwGzxOI6So=\",\"EkeiB31Xeh728K7+inot8hgo9pxEu4m2rnD+nD7hr5E=\",\"LDOFJPM/Mh5vLl5CDt1H8Uyspb/bfT4GUHO3sg0oFPw=\",\"LO18nPxsuXJxeb/q8P/AKKdZqkTpclf3LDRn+aCXTCY=\",\"DmM5gqNZMzsBfcW05oO/onTnQVP0+Z1jnkjeAv4jnJw=\",\"LqC/HtcPFfwZajlayDbmpXnUkj/RO+MrFBbTUaBa+vY=\",\"I48447eh1RfgDGZsZnDAmc0r19hBjFX6zW5RHqN8ZOA=\",\"LadlaSu/76vK6w2rPuGHl+wAMsH+sleYPOdTqPKGp1o=\",\"LKubwdklyj9kc9VqTFfsE29S/PAsnuDiWtB/4k3CgdE=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"ASEDA6dwUhLoH5JkgmmcbWtqoTujQvRXbIc86XZDXv4=\",\"Lh/lKtSdWyz0xDx/1VH9BbsMrRMiJskrR+S9JL3ihSs=\",\"FuYZjjDQbBLVU1cJEA1H0KsXRwTklTtpa9y4MYx42A8=\",\"EQh/xNr1wBD56otm4vAekDJZeWXIEa+5ypxwBOAafrg=\",\"JozDyQn7sZstc3sP60qq/WosDw2k9rOR6tiGc8GH6L0=\",\"EgAVK6z7teIVZbGdDmtHricUzyvZrnA4/pEyh51LRog=\",\"KNslLnVvD/qD/YRfp9BuuqMB037fR0o7cfYFOaYw9Zs=\",\"GE6VkG+F5ONrC3fp2GL8J6Vuw4wxePiQSFFwDHA8nbU=\",\"FNZuZ97Len90km8tXsZJe5ZbTelBvdvXc3Gj2kcOXZY=\",\"EqWzRpBP1jtsUvYD6KDDUdIoTsNF5QUYSSupNbB7p7k=\",\"JpCU4pHXkka7c108Sj3y7J+2CmsvI0DmPJHMbV37CDs=\",\"E5KbQIeoGM1fYC7kCv7LwwrY7LK3Z3UwCU0JMJgI7OA=\",\"FPh4xS9tCcwbMvPOtvJFml/WZohguUW3RFfYGabRh1c=\",\"LZH8ODeeUNit3DX9+4jSfhAIN+UT8ymvxPycvG+gFAo=\",\"J7TdJinwKcHsEbtfI1JSNxlHMTmToBEeT1zRTUe1Bbg=\",\"D89xtPWPHoRTlIAPMgFd4J5BB86Ke8eGgQ48q7Z9XV4=\",\"DbTyEqjZ+ANhdNmVk3YY3IB0yjL1yhu1N/uraJjcZ5w=\",\"D6bNDJp0wZc2VtRK4hMjtdKe4mBlkG8HR7wzZNn6j/k=\",\"AvXWEqieP/AVe4wF64HNsDCzqoByjuXytITgJ+nXtYc=\",\"ErwvjqMJ0Krnzx/RV2fb6Xwoiy1y4epImjgxadflzwc=\",\"IOWniYSm5Dfhaq/S5D8RkjO0uzXPtiiuvMoKs7ECtMU=\",\"FV7JVwzT5QP8HHP6vTjEriTTHlo4vFbJkrWBfJpYwY0=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"BqSFmZG4IQgoO2CRGVuSRHFKGZepeDPFXE4VwAdH9fo=\",\"GhfJELkx0vp/v41Boc6Go0lhSPCmLLtUGpQxDDu5MdY=\",\"E8JxI6sVrG+WQCL5Su+qUfBzka/BCV10gKz/7H6c1uE=\",\"Fxx0K7DKKgKC9f12KBkebMrz4yw4MFoA9lk7T9dSf50=\",\"Fs9LBsvdIcWv0ex4eEf2lW/EXOw06Vc5r1ymfCfadyk=\",\"EeUdRQOxrtv+mTvvycgHi3DU23VVbaSUKEbSLyF9xpQ=\",\"CK/WIHbH+Ua03WGWezKm0J55SIjCcCrPrOrYEaT7SEY=\",\"BBWMX48bEO+hKqtjVG/8jwZa3gu0lKMaWDkcQfYvqEE=\",\"L4eDe29fKAdlnsdWUXOJP5GkrCa2wuJuItCaQXMJ3TI=\",\"B8co0ujZW8iELd+NtMdkEq765CXCd069ukMX6ngzRfU=\",\"FFXYlj126ZCDyJa/D2j2PbmSuGqRPzsSOpiIn9YaOw0=\",\"CLS/IqoOA7X4V6UcDgS2RWX1nIfvtoWfjHFp3sCeKEE=\",\"DtgjuLnQ8uCwxqqvPlYhMIQU1L6UyjzLxsiqDOjhtLk=\",\"FkK2S2VHwTfqnRaSDR1Cc+xJFINppFfNKPc82QmO5qI=\",\"DJ2Rkk4AevSbog8WNWNzrpzdQIvaklVYPkHBB5xcBro=\",\"LxUYuLz0YzYuHpJ/cz3tvogX3o3/EhpqVSezPnB3jOU=\",\"AhFOCJ2WxaS2Sypq0VT8aIC8rZ6z6M0dPvmA79pEUoE=\",\"Grwl7VwPrpOzgTvY/aDPdz30HM7Qeoq3Yvs2tlZJIvc=\",\"Kl7d0hbw6txMUKJhj0Sk3/1o7Gr498C84aRYlObLwBA=\",\"B14NNLkgeQ+70hQY7LYmY0ZLz6Bts1gdvsY1yM+GTsk=\",\"J7e+tDCjHQln3Sh96p/p0KFt70bvtVGKumX6Al2CV5s=\",\"JwvLAIsQ0y2LknUyGUIgAklOMDJ+5xsjebCdWo5Rm5o=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"JsSjsP+bfynJfAG0/cZdjtGgdxfamyl9PSqFX9pUvuA=\",\"LG37UtlkjRj1/5204hPGyU8vuBUa7d2Aoc+V3xq0hi4=\",\"L3t+eV/U85L5gQh31EUjpv2cpZv59vFVAvREm2/ajIU=\",\"BXIqqiCA5wzpHGeTITD+rCx86T7/Z+RTxKEMeSPYKCs=\",\"MFJHdp3C/Bi48yz/ixoI6+YLDOUXm8D++eQYkwBwUNs=\",\"AlwAB1R5YeDzaMW9e80jNcfTXB3NTgSxaepmdqJxPr8=\",\"CvdbAZyIoH+yTQHLuy6obnXOkEVg8G6qvWF8xierDOw=\",\"BHB+CCMtVdnFo3tzeNlM/XSTOx9IOm24mn98yD0Xoig=\",\"HLK8K0lLSm+eUCmScw3Ma5Sq2m0KBKNQCHs8mGbESMw=\",\"KSKVv2JXvehzrwNt1pMrYj/qErsxkovfyADRpr233F8=\",\"I1thLmcBPr87dPpBFXaCpBaaFzFWlfVMc/KQr8RXSjo=\",\"H0EtwNpC22pkjBnp6RGbFXSDvbx605Nu+53LPnLhIRQ=\",\"FAK94hnZFbvF8pWO3SihBwcs5sv2I0ZGJ1TCHW1cnRY=\",\"Jl7vgjguBVItjBE6tCqwsJ2kwWbhB7L9DPpHqu5fR1Y=\",\"KzKe/q9mP/MH7ppoL4g9pZ6mMkKqy2ILYe+FwBEP3iY=\",\"BgBGF61mOkbkHXkQPR3m6DZNL6WCJx2j6LOcAa3IruI=\",\"GhDBw73NQ/+m6k1Y9AjNfQ50peo4ZWobb6iOIBMCXVU=\",\"CccFyh7pZ4PgUwtpEX2ZM3+hqvBMX9JuUwnAEY9L2zI=\",\"CXiqVDXbHuaJbHN7o215EgaBdYeT4aHVZxj2zeUz3Fo=\",\"GTT8VGyyFaI770LXEkzv9w4dRpCBwsyjQ6nrvO8f+mA=\",\"HqRSBDRm8cXY8m+kgmcBSDMhSEKy0gT7JTuXybPe7Wo=\",\"CHa8xl7wX4nZDzqWBwpX1I1qKgneKquhYf1rnoDNbMs=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"HJ+XQtS7u2yd7AdrS5x+vsEgxXQOBOPGLQx4avAGowM=\",\"GNn5ruDOPqCNkWSlRzrBFK51XCW0+VZq7hyQ0KBucCk=\",\"IkdrwCYHzHRTIlldY7mOtw2yeCdi5UjgI4N8n7BgIaw=\",\"Itgzgdj4gAq9ssztNuHB0cL1UllL/ZmQq+BtB1fqyuI=\",\"FjgsHfQefQo6SVhlakLj8fMUsh/0Y8X5WbUdGmxAEYw=\",\"CedoFdCdqjOjJPXR0kBLPuQZuOm4gz21kRDI048Tc88=\",\"Gw1a5M3m/tP975MSVX0i99pYnnHocSun0phrS92mIG0=\",\"KUD5clhuE7avCNSbg4+83yT7KooD8Gm6YSsFNe+Uv24=\",\"Ge3Ksq8/GDIerPX8TzqTM4PSaqN7HjBJ08NsEcJfYOU=\",\"LeynWHshddUN5GRftWAbJZn16xX/3Kdj8KJN0d1Oc10=\",\"H4Fr7iBAA1ewFVUiLLq4vbK1pv+KrcGfkRBCCS6Womo=\",\"LpUGQLnLjRTnD4Gwap29T14BuBxEjO3ywuoLdT1VDp4=\",\"Bnl6WfuAXUzMBBFm1x0Hd2O1Cx+saFEmyEQC8C9WUXk=\",\"CtIN6CDAHbXkyACr0V4yObU6OQ1KSmA0jvwt7CRPgdg=\",\"F0prh86o99w6euoIMXvN4YLrKqOckn1Gu5sNzXCVTaM=\",\"LNtUc5Q1bJJgXHtDq6mu7T7DOmrVFeVdjfTmeEhxht8=\",\"LQAfhhacf+7ChDieOXRcGmQ0X5eL3vqGLoxz9/5hDZg=\",\"LkC9HZ6Ma0g/ke7qDn9PIQqnhlA9Il4fz0EWZzVze0Q=\",\"FJql0QFenyxQnjblR94xLUH6PV1KgGKwWqzacOo5I84=\",\"KEKV6RAZY5iUXryQkEAN6OXFCd0Yqz9HQ6XrUhvafWY=\",\"Gh8hvfFilhAdvLqUhU98SwXSBqHQi4eW5oMAd935kHA=\",\"JX+NXmmu7S/34ZTzmNr4TQU5Qb/HX+pFD7ykmDibIhg=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"IVxgieCppiVskB4z4wasnEFavBh1pJrdTebQQp/egjQ=\",\"LLu0gPpo8zMW8NMB88vKp+rqceJ4Sg+r3M/yrrqfcYo=\",\"FDYZqyIS0ZEaWGvg9qy2uDgeR7Wj40uR7tg/9Uk3o00=\",\"I4Xjya6VoEWel00pzw418oMUTLK6E6qRS04XrlyYhVc=\",\"K75+kJ/eQ5CnzZRODzCRA0R+kfP61At1JzMGP86gcFQ=\",\"AkMDdY5OpCpFoEGdiOQmyVxoylgRl0xbDDq63Zwp0rU=\",\"Jgu0DF8bIvuH3t2hcGxgj3j94OW5c1rR/eY0WSRNRnQ=\",\"IfJzAttPWyj+iEWAbzj/HwoE4oQ0o+AEO8tX5l9vdfw=\",\"Fslb7RXfyVShpLolMn7hTFsNz3b9jcxSkCcjDpxKDZc=\",\"IJljknc+MMjmTXkrAQkH2ISPKPaR6LLeE+qCJrrqNNg=\",\"DiAnXBQzPfRFt5S1Fb0HuL+QvYA1z0PP2EWXavY1GaA=\",\"FkIoGa9hXEqUevo+JyJ1tdW8111JQEK9yB2EzsMPfxo=\",\"FjKe7RiHiGMHxalHBu/jF5UTbt6OlRG8Qsd/+98iJ28=\",\"Hp9ZqjU11ZjjLemko3DG9OX45gkKnvshgVYP6ihRkmk=\",\"AwPffa4gu4YuhSIy11+09kaKuFodNkcsPc9WfLsjPb4=\",\"EDxClKZ1RGSNrtouwKK/gexA5MAdddNb4KBP7DKQewM=\",\"DZ+4EP6SCnla4sPcG5usDsJap98uNigkGs5oi794+no=\",\"I18u3tLAAkoD4fBQwaMoILPDPwNEWoML0GvtxGVL0yA=\",\"J/5KEO5I0s7UMqR6Km3UCD5P252c9EzkiJucfVgbpSk=\",\"Bcl9T+x38kJjbr8JM/N47rdEZ/qrNHfWuCMJZtsenlY=\",\"F7C31XDcdr2/PPXT3vN+CgBcm04LOYA0kMAStFPtYLc=\",\"BAE7c8o16wKDdGXAFq6L0TmUwzX6Bd5Cg1ADrFPORsE=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"BO1JHSrxg4jaU3Ed9NKTGBJb2uxo+RNMGz9eO9e4Mbk=\",\"FuH0PYeNLPxA5YtedzhtNgzTk3go2GMKwuc23omw0Rg=\",\"BF99l81Nlfjk5lwYOGnUwV01TbleUzTqGl86DDStO7s=\",\"JCr4DeCulgf1qtQlBmfhzUUJla+qUpPOsfGEzJfvJeI=\",\"LRSeYxn43+oeLBiT9a/YMlAT65/lfnmzZV1ibnSNkx0=\",\"B4pgb7D6430eGm/pmXcAFHLLJypnCQHw2o5RJrPvCJk=\",\"FUilN8OBCJevT5GfXki1EutyfzxHxTzT/81eOlWWQN8=\",\"Hj6dKRlFmCkTZbe33v9V8FoTezQ823TAADcFG5bNwgI=\",\"KuRv1bKhCmkIdhpQwvceX5RKvxG1aOCgcPtKTN4OnXQ=\",\"HV27/YLC83BAWaXjvz23t/Tc/ie94nhuomBjzQkhzQo=\",\"IhCJky5f+w1yuNiWu4JDzj1q3rz3uuTuVpZ+KzSmOUY=\",\"Klup4MYtN3dR0Ttfz12Oe6EIfnTPJ3ISQFRAs6j6Vas=\",\"HtltB6lIdpBtCChSRWP5h0FLKkW0iRCSSBZZ4FPHKUw=\",\"FhnKkizTZU+Xy6XxAjJ9fWoGlbs68i6U4zYH9UXCRkE=\",\"CT+IFQGpARL1MP2RhRdv2FR180J+wTPLW8zG8nehats=\",\"JBeCSwCKxafoGepCrC4b8r7LWGYVKL3CDvY86i41Wn0=\",\"HvsJESOUhXPQwOa5WmKKYXVnlxxYB8XT4Iv1ZqPch0o=\",\"Hy/CXwMJNLYRVgCxRTggxMcPi0VNpGG8A893PQM8D+Q=\",\"Jjp3wKou3TFpRwBvu/Szzr9mCAnaiRZscEHFIWl2S2E=\",\"FdN/WKlYntrbmSOQf5R4Qu9vtLYSUfg3O5c91CKhuUA=\",\"B21thH/LmXVIwrEr6qajmHZWn1Pogc6GHYXZxBzkCCA=\",\"AeIgFiaWy+FXXML03S/tURfBFtUqmWW0NN3XkTJyxcY=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"Eu7cKQRTzXfAHlQ+V9TXrg9uena1duiA6FLqi46YvcY=\",\"C9w9eKXQ86kv1pCyJ9lIrmypTUNC7OQVk1FO+tcIZDk=\",\"IgcpZkmFbwQ+LXFY9o9bdYs1TNAiz8BOgR4bu000aNA=\",\"IUMK3kwBRPgZp5srb4Salo+3WPdqMPPiC195mREPNfk=\",\"GnC9ym8RcBU22+TZkmtr6oegj28O+nVLETLdThI/fAs=\",\"AoXY6Qq8FJaRXf254qTE2MQhJqPxX0vMHY3HIf2BP64=\",\"DldnYGjUtOOoVvLLeyJTH15RvxxvCeNaZFqolTvEXt4=\",\"EFOr2/+/zaq+W3lO5r7136Nn0ZjnZElir8kPN1kMAl4=\",\"EWYNfUTbcxASsC9VxaGeSxoQBB4Aha/yb/CIeX9UoFc=\",\"K77p2wpBK6cxl5WUzqRc3qKh6kDJC+ofOs4p1N92eSA=\",\"EZxZpn4xLalw7co4P04cwXUuf+xr3oPkN6zWE25N1jw=\",\"KoYRmKC9s1SrxtJztPE4VM0x10XmJ8IeoQdiAkKo0jM=\",\"GorIL1eJQjCrx/PQEAA9WRQXDYIAlfO70B6XcUI1HxI=\",\"A1SLXgLU8fmIFEQhujfPdfoJY7FMKslhrElIKMHmVdA=\",\"As/juvzorqK8s8FFrine3rnscSO08ylb+l0FaBw2Zwk=\",\"J084+8A0tRuUmC3zCDLGmWHWVjf4CFQcUKOVyODc0y8=\",\"EVTC4ELOZZ3+RH71jgnkUUcmlFzFq95CdQD8VBGoo2U=\",\"ArYgPjBeGbdzDtJzH5lDA3d/wcKlJCLZKbpkiMLBZMM=\",\"BRkXuUSvo5nqHmIe4q1i6mKaNdKTh74GwHe3m5Vp4qo=\",\"B887T08nT3EaS7plLq5fz2yVD82vkud8EY3d+3ONm6c=\",\"EYRWjQPCg2gwC/VyTWlYNVRw5ikiH1IhZ29p4itxc1I=\",\"GFeDnC2LDW0IwhJ5y4os/mE43x6vZkmIjPVAllqzwWg=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"JlGO51xZCXavjiE7QuWYinGFQ45ZPJY1oo7onGC6w1c=\",\"I2RUVd25Ke4rWWyrvV9A31niGbTv2MH81Py2euQrtbk=\",\"FtASbC33KtafQZx0dBFlv26fbCq76VoCLvyQO2LSXr0=\",\"GVBQIArcvbXnK9Y+0+HU09VOTP/lpf7Nky6cVoQCHd4=\",\"I8Jrjwd0lpe/aYLy5xXJH1QbFz+go+jfy2vKAUmRNM4=\",\"D/rL187CIzzlpLkR28xh+H11m6bkZ4AXnnX5GuWnIOk=\",\"Ixor6sNg9JF/Qz1+qerxheJwd4kC5uCQ7l4gf70FdaM=\",\"IIzuGNqFCiYl0VAPg1ohbszgIsiwgjXDh7jLGGXtilk=\",\"Lfk48xDO3y34UwzD6l7xJU7ZZmdLwIqz8eoUgFe2yQ==\",\"Bcxx9E9JbP6NaYUAIqFBhS99rAAf3szmfeYmW2nd4+8=\",\"HgTPN1eW9HFOa1FVIQcDbRb3H9C3fjV7YaIBREnvhFs=\",\"F3Bg5e6n47gAruCZc1sHTTvukqwYkYob4EKtAA+GHBc=\",\"J/cYOsBO87UwfkUIc/Wky9H/cJZ33ho96JR2p1YhJ/o=\",\"JyxBQ/P0i3EdnniWTSf94GFMKESGGyPBul72Mh/mSHc=\",\"F8Kd9Esgjk1bcKo7V8ktDGXgxNeAeTAAq1s8556QrEg=\",\"hCZYXvBiskucTeQ54NugOOnVOaVK6MT6ZVSSTA9rAw==\",\"Cvrdxx01a7AeNEwDM29sl/z2wO2YIs/1EU6Ft/sY88M=\",\"J949kROmJfV450Vmol5Uux0xE2SIfUVWmdieZTeeEeU=\",\"DorloOyhRlZF3Gsx9m2DVtb89DTa8c+6WasIqRQX6B0=\",\"HkEBFAHpnl5Uj4E+tsCR8e19A8EAWv/RmE4BSaLlmDY=\",\"L93gra+0fORr1OXTG7joQOiy7d7YhMbAUioKMjsHhAM=\",\"BtBHoUck2hRq4TFNOKVZMD5TgI9v+pCvTy2zxS0pRrI=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"J+mHObDkQxPOMvfFtVKggUq+sy2pbNgt52m00PXJTCU=\",\"CWwOFrDb8UHmvP28Di9J0BPzXKw+QjXbOcXLNflqXoM=\",\"paStvXSXfSTHzuLWQh7nz14FNDiOX54JuBGgVE0e4w==\",\"AXk59KL+mN4cTzewebNeKPn9kYSSMX/lkxHuhE/D53M=\",\"L60UifFPU+U4DbhrEZ4fxKsC+oTsSw8oO8KM3mtziqE=\",\"J2V2lTcTcDmokvHDiusIPcB94bcopYD/9j+byq9FW8E=\",\"HjG8D+Ixuuic3R7ow989iwbaL4iCXmNd+bx61cEo8to=\",\"HlFsO5rjb4NquYJPHBC4amIrL0nwgc16UK5RktKW6r0=\",\"BHzJCkvnF4g+AYnomPp9nx3JmPkdJVVTo5S2t5gyYEM=\",\"HFbXCmRy2XLjVpjqzXuo1Ayf6fybBJJ9BkBK4QujX1M=\",\"IFwFCIVB906Voj9cfuHZkTl46Y+nWbYh0NLjsNV8WAc=\",\"FodPFXhzVzWt0FQEQMsEKpZrjd8+UbTYEsZzd2u8R8k=\",\"JA9gKv0tl4iL9LZLI9bkTOxzSidGz0WAxDD3Lkb+tFM=\",\"Gr6LEeC/oKWClWi2aTTl2oO3eOz6RS7iprcUDhkee5g=\",\"DCdnYMkMZcnyKBQBheQvOngGhAyIJbzlYtB2agbazdw=\",\"CrfdGNCATTlEJPK543Q560vzMkGYxE56zHjS5ZXX3d8=\",\"B0q+RrNNHauhLx5448++aaMNzCsJCJfAQFZPAj73ueg=\",\"LyQP+v3Sdhai6sNhgd2OnZ/4L2K1RTfEjUl2CYWCgL0=\",\"EAnJGPhOcYDkhkwOIJEgJsYmmb1WLuW7JKAP1powMy4=\",\"CeKUlhWbcLNPlweo3p7CytgjabLRaIXpi62jGdaeRRI=\",\"Ia/fo30bkhja7wt6u7JuTWI/juQSk0/o68qdn8wsZnI=\",\"G6e66bolRqsvqQSHcVEGapxc3UQQfYqoKbqOoGELGLM=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"IEglb1fJyMJDN7v70JfCYn3MDCrgD/Vgw+gtMqVaTUo=\",\"CIJ1jFWamjjtYNERPaImAKw95iqMyI6QQ0LfvYH1gFg=\",\"BU9sEYWlgCXKOC0AZXzqYMlmdoLAYPtfL61089Bw1ag=\",\"GNozBx8OvEspYtSwYRRACWCKronoKFoybAuo6ww3AVM=\",\"JxAqWHUclqCvwYRoAZN+ziX1n/dmdXWNU4jM5AOrSvM=\",\"I0AozIW4NF7aOYvp8/771tWZc97SnG7lL8qGagex96g=\",\"DDdiZ1Yx3XtSklZzJoG1tIul+tNAGaZbHvGRuSEbvMU=\",\"DbkH5pmE+h+AP58Z1gM5HsWAuz3INX0XDj1NvZwQfm4=\",\"HFoRJrlMYtBqKy7FgOXkoWXeqnzRv7CHJEDelgaQDf4=\",\"LjqjAerU/ctgbprucrp6LLkN39chYq2UeOlGmfd29sY=\",\"AnnSC3hvtqesXU/F14+vnEejCQvVYbL6QwxdtkpVI5Y=\",\"CpUcy+XX0TQEzOP+YHUUd84QiBAt+jcy4yPQVc84NA0=\",\"JqjUsYcEpaqOQeplLOL2Dnl1wLfrR4q8VboMy6+BSek=\",\"B4ckczV2BGiRglfn27OPl9+ttgJW9gPVEQT2Lk5mKVM=\",\"Cwp7Uky3x1GUNhZ660tbGF0WwRDCs28WKr/Khys/SJs=\",\"Ae/O7IN/J6WSgk8VZE84iRZbsbxW1VZhealRMzslU5g=\",\"L/p0oH72qiV5ofaPHeZLWO7FE4DH3Om4lmx4m0d3/gE=\",\"MEWC4D6kjb8wQ7uvIW6llw1J4jrq5Vt3T/xhWugNG+M=\",\"H+3m8CpFlVZM12j9QAy16qKLK6GRJAAw4ddX1qAZU30=\",\"HjMYc3N1Cn8oRCcZSHbI/wXueqlNWzUU9gg5kNStBWE=\",\"HFoiNh6RTfriMdY0rSxQKyDoT+2k1Qaht5VRKOmyS7c=\",\"ExAnPAJzTmDjsfTHYHpIlhw6uX7ZaQwrJsOONs9WNhs=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"LqzlA2u/iSsQbWrSW/Os3DyUg05gzTgKGBXMRiDnncw=\",\"LPOZsDYk8v492/SML6Mm54jztuS0Rp7w0+bAzCQbe6k=\",\"ItQQVIMPSynOaIK0mDnplCrnoa6EttNmqY9C97r54Yg=\",\"Fa59gwdbBH/TZ2WftYiAbyO2vjtGkM/DypLGHnH1x2U=\",\"KCX9XzPTYnA9L8kCV42rdcpwduy798yRbU7T3EOzoOY=\",\"EtElBLpUHKKygSmmc6z5bU8kbjQFdP/N8k262ZvVcs0=\",\"KWU0kKBTaAMNNpDUSX6TD9Q3CwyJ1ZlrdbQg7IAxidY=\",\"IRiOz8m4qWttz5m2e984ZjFARiKewHyHZ8wmrG0rwWk=\",\"BMpSH+0W5MgnH0EBUUKACT0YnYS7QSnS5Uu7FQi3KQg=\",\"J9hnoEavuww80u69oIjkdnUrCMRi+hqR7/oW0iQD5Kg=\",\"HnVOd0RIL21D5pkPYxo12VZPBIWhFquXHXwboPxq1ik=\",\"Hf8SxnmiNYh+bIljBLRuODPyFjmNoTOL513fui13vOw=\",\"ECn/08qIEALk8Ahy568ymdmul5oNngI22LxKbcNtrAk=\",\"IJmp1mtS8P+IoRC/MkcUbcKjl3e8Abrgyifzs7o/H1s=\",\"IS7T5CTukK9I8t/Bgop45MUPqzZvUc4/pxYWTIl4foU=\",\"A/5IrcteViRubMiWi8CmLrqUmEoUcrAfWkR1YoqjjMo=\",\"LXJueQ9ozlP+4IQeGouP42uKdWs6BETqCK82mrb/gJ4=\",\"Fo3lfy9aejG3uclsy4+3sz/FRcwZRSzHpTQrcM/3S6g=\",\"G88lZobeNfZy1OUs7oH3TFUuCAmbPsuMjoNIzT828uU=\",\"BvfR85+LyPoxSYTYj+AoPmS0UuJg1HRflRSgEsMcyUY=\",\"AmcVisCifdLpT0Iihe6XlWWHdRbEFGMMpZEe/uGo4xE=\",\"DE0W69TLBGv44Of+Mhij8jVRx56DiOZbHHpVfiA0+Vc=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"IufykXchQHI8M6jr/hU3PwRo4pXRtyT26U1SKr/V9TU=\",\"LFz7mXTLIpkGn44hMp1U5exPa4N/Fyfa9mohr4WLVqg=\",\"J6G13HFvj3Dxjm7vNsoVul3ylfm2Aj0Mi4YP8JSK6c0=\",\"FRCBS16eph9H6SS/myFJazkeLv2XVUsFe9nWkF6vKPk=\",\"Ic4KfaQppUUVkn/MF5HyXGWHZs5Ik0zBk33qIE9kmW4=\",\"LiYXRoreg941Olp88/+0qtrRKwW8tlzVcMcgAFmVa4c=\",\"KEBS/p6CIpjqia+reEYX/UE0SAErinE9i423250RHw==\",\"AvEpnstmQjPBRdU+msYncsn5F+9f01T1lf0VGnOWEPI=\",\"KonYHja05xaY3Slo/obIv0rL6uw4GYXzpeZ6XqExjR8=\",\"G9kIQm9E+A8CUUdCtIYKcsAK6Q3teqRyCQ5cEGLD52Q=\",\"GkPp2sEdwRrCDzzx7cXriiXatDidZ12TIiN6Bc/GuVw=\",\"JpJpnDDSz86yPVid8qWu1aghm6bENtDZIAM7IlTKaig=\",\"KIV/fahrEXzvzBBfTlBO/18R3HHh43GNerAn72ODq6k=\",\"DbT+ut5Qc4sauHQFv9RtIMvUoiKh8fhid1LPG5p2xuM=\",\"GHJDYKQMxQ1wRuqx88zW3tLtr8XLTL/9ub9zTB3/M6E=\",\"IYfUEYtfdSY24gXrSYIke5XasDcxA0nd3kcceC5g+y0=\",\"Bwm6fs03RoATTvWOlANYIznjpVFm9/OUPygcV6J15Yg=\",\"AgL9PwXSvY4tvPbkTT7g22z3LtU7ALfweFYF2J0TnOA=\",\"Cadgtq9LTu06tp7LBJinX8cbgVtr3kpWnTm2CGCWiY0=\",\"Ihjmq9TjHE4sTiHfyKJm6UbFmf5EuYE/KC7zrG0k7OE=\",\"A/znSvIRwXiJiiu73oRWi8CbjCIoSB962H57Hc3mv4s=\",\"IgHWrpOC3ALFNFsUHbJJwSCyiIYOyPmdUE6r6OfyNXM=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"AXtUmpgwVhlwC3ItE5Lj8i81FclHype94s15p2Hdmnw=\",\"EyGRG3h7bCn1i1ClPWbF9DaEgQPzM6rrpVieQ9sSCOA=\",\"CbpXZScpeWAvTFnH184VFvSBN+YZOOMEYNJisi7+H+I=\",\"FwW38H9aq+xRcDcTcUeF3m+GyJnZfz2Jq1NFmAGtd+Y=\",\"GKxFF82cPZsT3TmOXOYUAiBCs8zIL8i7q+rpOK8eiWo=\",\"LS3PSnVcIbtJtAKPs92L+2QaCPANBFKFwMpkGAI0om8=\",\"JCDnZLx7pjtwa2s5oQwJKt57GHP8GuG87Lg3STQ4MRY=\",\"EOqvs2+I8Z/ap4rjmvAd2d1cMSbrh99BqlWsNE5ECyw=\",\"GttYLGaSOFqM79M+btPH8joyUtv0zg6oCyy12VeESlM=\",\"F7PxvwcXdkwvAVcHFrZl4qswjsYbUR3T5l1r/KkDChs=\",\"J5U8bEjeENQF6CJbvMc+qfv9/MyvCj7agM5Nfl7CchQ=\",\"FeeU/sdffE9+Y97FcM/64kfYu7HQEUJw1EvX3bWrPIA=\",\"BAYytEVMWbKCVg+BSvsB6fYMTyQBPLGo1FDy4jvOnV8=\",\"HpwOBCR9jh9DtxNQ2ZFBPu+2fCc6OtpybhXYFzdxemo=\",\"Avjccxo2bd0rdsC9FBi8A7IH1wZVVvR5bLMluN0dsw4=\",\"JEY+U5+mEu8wKAOL2t/NrePIR14GN/pLHdPOELCqy7w=\",\"AoditB/rNeZQmtM+p3vYiYPm+oXKL2c4oaFlPTv1TVI=\",\"JHxEvjJtZ6+QICJETYDqkHdpNqgVkrqmcCACsn1rBzc=\",\"Co/7ZST6yKOCA3juDJrbI0X+qXESwr25pX3TsEvn9j8=\",\"Jk0zTxSAH+RBd8z5JNIukfPZjhzfXGOItzXWD6MscAA=\",\"Gpa9m/xUMuopokrjxGsSZ2nS2PBcynDbqxFxERfy7W8=\",\"FlQnNKDEmD+LggOo5n8cIpD33megKy5Chb9dHDBJ6xQ=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"BGIIZWRk1K4KQg9K6/Y7d10pdO4IU17xEBTUQAzKgiw=\",\"Ffap7zg3QeFogicrvrmrE18pUnKtfkWibgY6r2VglKs=\",\"BAqJhagyPdOyrTwoUVny8VjbSLn973LIyFmkYtfxF/k=\",\"C5tMfe2X8af7sdvMuPrQmtqBg8/tt5Di8Rx3B0Y0qA4=\",\"EHAERrxhcByd0XvENUrXJyR6mX7J5UHuQtnQ0qzDduQ=\",\"CYpAT9scN6OIQnUqMbsdK7URL7QiurQKG1Rrl8cZ2SM=\",\"GEO4UNXO+Icb/R4xUlmWQWqFULdIzJ/RP+QqofcZO/Y=\",\"AnnCj4FJmh2Bn7ZxMshCINEktmjMIG29zO/pR4NYqX4=\",\"HW+hCfnTPZ4UTFsl/VsvGJJzVF/a34ivPEp+8fcYnjU=\",\"HonCOD2SDIqAg3vKq8KukGC7pKUg/H6qf6XdPfwY1ew=\",\"AYBnDtsMwHDKBeqnJMr7TtAgVhFQujQ6xYd/2Fhe3Ns=\",\"BEoU0fcx3lA+zypkOO0X/4pVKgHZ+2ajb70Iruiiems=\",\"ATkWRLg6ujx8hqgfJA77FH/kwcU+CK49OwqgL8EDOwI=\",\"GpNz+pKGczTsF67fgz7xn+b2emjQMfegiAkXMLLVvJE=\",\"AcXEamhS7vr+45uPMZNcMyX0UAAMrduzVTj436ArP+s=\",\"GFs6p6Q0pyJQV8a8yOaBgN1ATljj8KhzP+ZKDB1TQQI=\",\"C1YuyplBJ+yUuQ52JVlVVRzB1uhBKRj5qu0TjhnLkD0=\",\"GrLbCuR5MB3uI00jGYgpj9Rr3PPRrYzBE4nueAwK8fQ=\",\"AuyMP+tOA6+xFALVkp+8MytbtxCf4yalr4YT2r6aapQ=\",\"BNw/sSMpsXpwt2CuddYgEziJKDy/iANVBf/JfORkG8k=\",\"EpfS7JLfmPGsGjGNwQBVcjfdnEqWaF8dWND7Yf/EwJQ=\",\"CoTF0vSRpAZU30mS35j2gfFXvJ+0oKasGq2eDplM3fk=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"Ab5rA/+1XqoPz6TsAHrWVcd23c1i5xhN3gOxyQsa8AE=\",\"KRDTGkq54Kynnt3SIMVpBbyqLb0ptte/OJpMUGZiGaM=\",\"KDmr49Z7Aeac7SryyiDbmyvzWSMNe/PGu7eSMmJKV/Q=\",\"LQxQYJ/UgyrEKLxu1GBtxeXMSOmWXGAMgTJajU74euc=\",\"CpGAQGiEsgO7Nbr7zy9KvQ/+kKqePhqCzq/1VtLiLcs=\",\"DV43YUdbo6PVUTPrRalFBC7ia3R+PrQqB3dJ9PNnbk0=\",\"CBGRnlvwPuAEl54hZOJE8exRDq9f5uUQfl5vS9Ej93s=\",\"I9krNf7UrMvcB0aV9tE5PFwr9vIWf+I5sgKdVleUBbA=\",\"EAV2xWOtAMzSsHr9gX3S+NuiU1tcON57r9CGkbBJM+c=\",\"JM0YTRQxljF74/WU+OoJHzRCq882R8UL5UXlEJlN2Qo=\",\"EodImTpYzv1luvyE9IZIiJa8yAiABqP3r6zCiv1vo4A=\",\"ASaYA5PZ9pfP7KPIz1qkZs92mceyTtH+K83LPZjgHto=\",\"A9U7GwZZyVzvNaUVaW4T1nZDeQVkqA7j++PFsv99u2k=\",\"Cxy8EhigHMryJxH8r/gFsFv/xF0hRY5BUn8G2/Qj+xA=\",\"LSuUTU+d/YBHK6tPDOUg/KY190yLnx4coP1S7Ir0nuA=\",\"KG6nBgB3j67jODk5+urWmiSCH7QAkgd4x1KaGxyQ9U4=\",\"Ejjgg3gERVCoNrz7cSnw8NYlPrplTpYDXeBlE/buc40=\",\"INOLKD8fCru9ma+B0ibMZQOthuoaLqjpQZ7xWnT4rVc=\",\"JfXRyUpEI8mU+B0fVybIEzxdJBn6WPImqUwJthgVws8=\",\"G6SUjHLzNoXfD56y9mePpr3eDuJh+qsKY5F/3DDwlzw=\",\"KjBgh6lFPpbQAHrHBgDD8eCLT7XO8EIytk/owFmGdM8=\",\"CeUovK3p2bHpntU6bKh92NxGFA1X0GmajxIODHevZb0=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"KneXJ9erBtvVU6hAKUWJKW86q7ajFK+1sIP2UOOduWc=\",\"EapxJ9zpfG9L7uXb3eHVx96BLic3biSfQaUhccEIMkw=\",\"Lm31ZcrHOkoEwssf5UHZ498AIFRiLHkKbIx3jkhNoGs=\",\"IkxN7AB0Muzqc+VIyr9ghG0Oa3LtL0yQfdngPcs4HpI=\",\"IJUZTi7KtODnMexuHLsK77O/ZG9ubIBL5ZcRZ+vFj3Y=\",\"LvBXBjvlcjPVkTfbdsclLx0sv188TGyMyyIgPJjW4sc=\",\"FRhbobm4Bgdoxa8PcGNtxi/CnKUQDXb9T5xHZ+j4f7Q=\",\"G6J00hhL/vLQvphvwtQWF/Q9KaMLMots4/5BpAZmlTI=\",\"J1KPc0xmVDkByxr610FIkq4Uzbde1fxZ/tz6o5n+dMA=\",\"EYUinOnBg9fc6KZJmWI6RpOSym0uT3K8K2xHcqawSJY=\",\"CzayDDP4PSDBxJwAxluoXe7oNF+FY99EiZOpm+u+9tY=\",\"HuhDOGs6oMOEcf58YLY4IY75JmtUKpsVJt643JqjxVk=\",\"AQeXL3fgOC5dPP9baFjoX+bKKc/pW2AVmp26aM9V6iE=\",\"L8RgIbmEHbndPN485YeF619blgDI1cD0CGEwy/smH1w=\",\"IrjHBbe2dbaRNDx/GfaOI3ReVa7fXrkxw3vYlWPxSo8=\",\"HbCq4d6KWBdwyJDeXmbHYzAcxtUirgQts2bzMOhwE88=\",\"ArF8GbL/ZKPZpb1c0NSiHK57fXyJkigFD1k7LaRmUtM=\",\"HjpMLJaGknSV1sw8bpC1Gd7/C1XuMSTWnOUWHJERm6o=\",\"A4RgPcyOd0hzmk+FRizuX7wlNF4C2yMfQOUKhRdYRS0=\",\"DoQoZu4VmYCZEOzePXyp8dhn+WRZmFuhGbUQZoZiJKo=\",\"GcCdhWfpCmIlFv0Zc84nrV/LZquoskjQbenqMGpvssA=\",\"E0F206QPG8rZ9Ta7kriuuaTD1CSxTN7Jvu13v/vnVM0=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"GRjAZpOibEHwAlyZ6Tq0YhPdrCJyFfvl0ZctzbYmWvo=\",\"LC060A/M512mpfUQ1ZUpGPRGAWqPtLHcQa+TIYA0aPI=\",\"GP9HMWMXM92fBIUDtIG5t6vSrX3eWgAtjg/8Ql9XTAk=\",\"DRSjFZy0WLTF1ldlsVxWZTvizeIC2LKF9cLKx+AdV+s=\",\"CvfUDb9qnS4TgJXxSZ5lBcMmQiKC8b0w/pjRlZApjpY=\",\"H3KLYiAPhNVv2RbxAzhoBmxf+er4Fyasj0PwjzEb2AY=\",\"AvFQmoBKHmEoR1ePSe89TPAGet88NXXbqzYy9ubj3Vw=\",\"BBxn4BWzdwchzkuWrmIZ5oE8z/sVLb+hP9N9JbqBLwY=\",\"DDNng/xBZ59n6Aji7tG+nNo/zuKwQ5SBLflfn+vUZ6I=\",\"HjS63rPZKoiqhN7Me3DqNEyIUsmhfT4Nz8/Un50QNUg=\",\"JTn+1kyl+LvUAWQEkhopLHZS7jp/ujFNZ14C7ynwEJU=\",\"CoOULWDRT0bDyc2qkDkPrMxPzS6cPsjMBmBM1RrIINY=\",\"JyT439cOAJTWE/Zfa0jULiKpYdBvWJyhpkt04Lqa+KU=\",\"Im4QH81/NlrDPGCIF+5qTBQ1BJJ6/6uV9Nf5XaVZg8U=\",\"KV2BrecXFfDJBxmGs3cfqGIb9jQAZGPfO1Pe6b83sYk=\",\"FKrw54yliE+91igtwqIAihthZa3/pukWCp42GQ64Gvs=\",\"JlLmtm4yOHfqzcTg8y3J9y1pKudQHX/tbJYVRSn0Wjk=\",\"D6oiv27n7VHrsIfDW9M+00vUR0BzNJqA6cllSIMJGpU=\",\"Er0djZIssg4dDgLQZrEg8moZefQ3S/D65DzcwOWjZvM=\",\"FYwaUwftDRi1iYbCdJaLI+QECEp4q6Vofi4sTwCWBuY=\",\"KLW6mVQJJch0xrgVvXMD3793TF4QEu8rMFykdVn1l7M=\",\"K4RdleRC/MS7ikm+dzYJlXtXjhnuKLqogCJuP5EdJu8=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"G2bnnGY77Ga/I7XLvL6brDCMR4F8PyQtP2a21WW+O5s=\",\"B593X0EcnJAUnlnmo01vb0eUfbQzfZ08GLxLUdTK0nA=\",\"MAnWy7UNxoi3QEz4LVifutQ9B0IzOSe8BJ5I2mkT5gY=\",\"H8cGYQVP2yER5JkHIiOHrTEQWNc8C+/WMUR4F141aUI=\",\"HuBOi6AmX84zBYVRiJQCm2LZvVDJ0Kb4fxKA6ChZ6f4=\",\"ZE9Sa0MtpYQhRW/QDg4pKR6NDfLtJ2JsQtUDxi5PyQ==\",\"J+md0Pj+LKaIPqiXgVszPeYWxWxIPAyeRSgwZ9/zxLg=\",\"BYGsl2yt0rHfwU2LPMYE8ejnnc/vJLj2cDLBi5DBfpw=\",\"BnUPZIVw0e6lNrw4QuipZzzFZMl4Tld5NHW82zmUV/0=\",\"FYIrdYzp3YZPohIig55+6kEy0bgAgZ6glaZGXZzmBE8=\",\"DZ7ikO64zK2Px70FTX4Q/z6w42FfdwFR/monbVPadzg=\",\"Kv95qibRldYAHAgFs1qMBaCLWaDoGcdonxdqsp3rM/4=\",\"I3+k2fovqEtY6mjXWSev7neKXkdgc6mzDWMorWLy2Ac=\",\"BdIJNuMItuuDc6iZ5gKDGuDLCRq+oizwRN5vDL/mcjw=\",\"IEcKny0qPK1dL5LDM0RLQpMzYl0OB+Bk/ehFT77nZK8=\",\"Ll7gYjk7g285EXG1xzjl1zHeSegzAxzpcFVIbe8tahs=\",\"FQZqdF5W3usRO536npLsH8QAP42s67Ty8KWR6Ukalvw=\",\"Fa8/N0fufWNzi0sTe+CMRPDJBEgwfR0tl3iP3K8wI4o=\",\"Cp2y69Z7z9DFwuK6+T+iBlN6C+XildqTNMGVFQGNTew=\",\"CdgZZj7u35zluX1xq8qhlfasD/yi5KmdiVEL0p2jfMg=\",\"BD5Fp6tV6O13DIuxQMXPmKB58KKGx2q9EUhq3sK5ppo=\",\"JnOQ8zm+kXwYWI7H+bU+3dpCu60ORDUdHNRkITibBtc=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"DdKt+yqjtBKLCHtSUNXnVGcu8CyoSVpbj5wuUdEv4n8=\",\"DkS7dqJWdA/keoGFlrbc9AuduFx0TTcBv7gIoA98y+E=\",\"Bool0uJ9pDBcrqe0ftNdlxJyD2VNctCU5NmzeWzoiic=\",\"CmYksuLTVRhDcjl2yRaLGs0/8ZaASmz+YVVe0ASMNVQ=\",\"KDDDk32phJO9piiEmCPmVq6pbzCfQX7mpJBwCaSVf+M=\",\"Hb+rVCrRqNGwZMGPLagrblMg6ChdM9UkIprtRNoPz88=\",\"EvBJlnRTv0PazxmKqsF9GE9EhQv0mCCzfzbflT5XsIs=\",\"L/C095QXn2zU0EMdeuyg4yAnCqOw4/Y9gy8YMM7XcPM=\",\"KHBFlpBzsbqAB7ZfNR7hUtm7sOaMdfz4o6Pg3Jy5k10=\",\"CIdQo5D2elsZpj7mnmBVlJAV55bUGiFQ+Lg/WMEIa04=\",\"KhtoS5NXw7m2dcmlbTaQ07EB/0xQ1bf5fWjWoketbj8=\",\"CSSpU76xD9q/YIgGi8QtGMR6KS0z+xKx3RHAlCBRpfY=\",\"BfuB7i4axeGYxi6nZycNO1KvHiTU1oV/gsLvS5Tzl0A=\",\"Gv4aeDotaM6PecrLK8V1AsbF7JrAu+NfVbNL1NlE4Vo=\",\"Eo5mudF31Yivn5oQ69GV8DAwyygGVgzOwcBGns6Kubk=\",\"Kom7/M/7ZHMS8xorC2jXMfZSeSc0RwIbcW+NfRue3b8=\",\"LSwcyDRgCO/76BshnY2+w3u/Km9t/urDuXm3YWY0BO0=\",\"KhDfSUjrtWptHt9rLXvH17w7OmCFVlqQvMr1NzkJPrY=\",\"KfCpFXmwQYzd61/kA9E8kpF4EkcTZVgzKEzkOGZzYl0=\",\"LWADLHBassjkV+4NIlrLIGpcq711sIjZdlbebfg9sWU=\",\"Gtxh44iVRkCPIdHhzZUzQVp8wXdZhGR5nahuMXeOqFQ=\",\"FdJOwoE1Xiighd2ZbqDJCqx++12H+b1woqa522tQt7o=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"G+QGacQwWvCN2c/rBbx/z6QLmYvHT/4RMCxPWwVTo4s=\",\"DeDjM2IfzQ+xHjaAX5cit9W1O8Oc7CxjoC/4U/MMBPo=\",\"IPCTDOKpgvY3LoSrUxC+O+rhsLf5C45WLCbC51dwLUc=\",\"KZpCXax9OkyHeAinRZWX/aWYTEIraplNgeGV8wOF+Nw=\",\"LztsCF7PmaWLdQfd6JcaIlxRG9b4Au46bKzAUw6KM9I=\",\"Adv9G+YoGlx3tPssfck3ol3s4wHdNx/2d2nskH/3bHI=\",\"IFdxiCinF4IJEr96q+hddNDnWdM1fbIjz6ERuC70jzI=\",\"AmNOcQ0yjbgqs9XAAKbhbkyrTPC1wQl1v2hEiN9dd2c=\",\"FQjXPjHv0qArYBpxUcoXb8efNyH6aG9zfWa0pDwVl9M=\",\"CrHHV6KTD+cErUL9VLGRBDlwd9XlKUepL4ELDvXYeHE=\",\"CdpJfdZMXjJzkAY10JGT3wbB0kJqD9c9fd3JnBja3fI=\",\"I4FXLjW76dP72zux8ZY73MxTWBex08B35R1/qc2abKs=\",\"FDWkn5KElKSeKmfkAogQ4jt/JoQ9HiLi1ze0DwHaEaw=\",\"CkHNtUWJFWqrWRgAI901N0ED5aS750btjy/D3bJvjiU=\",\"FMSE/b42SRk0oe2gm2O4bYA+cFnNjjMU6Nd0t5EKfPw=\",\"KnekAC2itOKrQyMqyG6PqxWGuE72BwXU9a7yaqVCF0k=\",\"D2O47r88RTW9oLCUwAe+w78Ou4iM7rlXhYv9QeOzOkk=\",\"EnfT/lYZCJUIZpsaUzcvLxDqCs/QfmhCGbdSa+NWbWk=\",\"JCvtkHREE6QTvi+TVmSHrs9+018vaIbnm5X87ZNkjS8=\",\"L0IfdTbW/gIGm0or4a3viFmD73/4evW9u3OQT5bMcEQ=\",\"DcuNN9U6XfD5/zfZ+OER4AXXDJO8I1V/YEFxGhZ+YqQ=\",\"K41SAY3kKuJ6iWphALAsu0KLzvf8lcIeBjGg7dJz7Pg=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"IP/ARhI8nnwWHsL8ADNnGTixvbu1FQS7SKa7dpH4Z8Q=\",\"A3//QUn0Q55DjOFi0nraSFjQKS/dXLpq2Ity5z5VKy0=\",\"HejI5hX6YI/on1lgU/fyqjshFYzxEW62vxLpi9xc0zk=\",\"C+MlHNrGgl/nL19wHBkhWGnCHbPhRvrsG32D4pHe6m4=\",\"Jcxo4BVvtAb+ah0Bv5JiFHBZN7uy3Vr30v63DNoEsnM=\",\"Hm1BpJ+HVFWiDjlcL1RmrETZBsW3fiHKsXaTTW7JL8U=\",\"LmfJH6rw1hMDhYvc4HSi9hIg1il3pNaWNkCAhBMnPzE=\",\"DRL7QvqkXO5XdNOBRWOdwTk+xDzuxdVLjYH4zj10y0k=\",\"I+cKQUYTPwp3pOHXQ3IGkhJVMeS4Ptr2ysFWr8hw35w=\",\"Lfb3EOwnwtZSGYYTr8I09MbWXOHPa1SIs5hOCXb3XLY=\",\"GVzlnmntkUG1FHm6B667UO2g1AwWM1wdwzcVgbAGudg=\",\"IQ+P2X8XB8T/lhDa9b7Ob9Kn4LTGGAFmK6OqF33sySw=\",\"JfG3aA4R9E/3RlfS071DqrBEeY3vKLQ151aGYG0Sqmc=\",\"Cyx1rFpfttK0/VElbTqoTa+XzUYR5Usc6a7CbimLv4g=\",\"B4OYzaRzFzESEXQCYsCHELhtYcVK5VY2pNFSINpbheQ=\",\"Fmr1q8asIhD8LkjhejQmtZe9yvhJz7U106SoOhb6vYQ=\",\"JxlMp5rEdz7JZKzLNeCb+vYPZf7Gn2xTpFq2p3IEENY=\",\"EMRtPCVNV/SamFx0cy8npAIjLaRBnu6NWcOf4NJWdP8=\",\"FiGIGWeYWuO5ae9VTe1+lQJ8gKP9JKyCM7cgTEa2exU=\",\"KOiTmUNDWXvi9Jk9ppOraKG2Uw+hh+Bwjm3d1l4Z9l0=\",\"BbJAV0hQNXuTz5nCpPo5Up80zVaL5bUf1rusGdZqE84=\",\"Kj6RwPVYMkWkUZ5tX9N1MOqX6r3Nng0mVaxHCaiOa1g=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"C8kVbqeBuy9KSKaXGhRjw0FEevdkDA3KIv7meKqvpn8=\",\"IWUy1npiBgW8I2qj2ZZ7uhMsGO1NyfscfQtuQUtp7Wg=\",\"It25HapKRUWQHRJ3KxRC9bpOhe7mp3Y3/DG/UT+xFu0=\",\"JoPNs6Gid675wrnMQtmDWshzH0LujB2XyRhD4zDMeX4=\",\"K+STdxQPVd4n3ZYF564EOL6ofhAnvhzL0nVHuxiCpx4=\",\"A6yl04kuTiOoLjKXCuBs95RJeXRBCM1AFElYIPPzyvs=\",\"Z8V+5CySWk/X8LcIBehxsd6lwMZO7PKG8Bp/gkltDg==\",\"CufO4yko6LtLLlQo9u1WczqVXbtBWWHli9pFN2AzcOs=\",\"Jwxr5yaoiJAMMl/Og2H+4HZrQXgojimJLkOsS8WnpTs=\",\"LcjvMbW0id46AhjMpSFbzSOGCJHUvo6uAb1rap/Yng4=\",\"GWQ+3SDXGYKkmgnLHg232YHZKEE/Wu10ogszmkXLOho=\",\"DKyGz9cMe9D5ZOIYbvqDA1aGba1UAmVTkbFk2gcjBgc=\",\"Hiipg2bcK1od1lHIzCOffWpleEJg5PmdXyLTrL8InfM=\",\"Bl5XlGfuPK+av2Qn7nDj8ENQ79TyQKch7NYUv1EKbRU=\",\"BiWg7VZipR3Qnxs2Hul5o9kJmd5lRN0BLgo9DKf1QpA=\",\"FMoWDso9zxb2PmV0XB/H2na9IorxbPdNKjIqAsLmPpo=\",\"F05agLVlQidglkTCmyrh9zRkdQdblbzwl4GyncptqLU=\",\"FZ83OQOgqfobMPHneIe39KE8A07ugn8L3OnvwkTVAwA=\",\"HmpFHwllQ14YuMaO1SOl9XAHMf7pRrRGpKVtaXpl4TY=\",\"KSAC2Jh4zLWRTF15UbRZUuuKSMDUuMp4r52xXA//0rA=\",\"DMbIstxSZnPAOLJYqFCnVK09oRsBaQ7TWbEHPjes4ro=\",\"Kr/WMoXprID7hl/y/aXaIw8nj5AgAB+BcnJ71vJXBZo=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"KFS1mEvWueczgJ384df+W6Y/qNWNV+TNn1QMI2jbDdM=\",\"LoiGVBTytFV1SOODx/Ul9HHJ/g2NZPC4AB5jDqiK5B4=\",\"I3kO7D9aJA+DmOyjcZ3ZScThtMSDoWrrJor6692nmg4=\",\"L8yGad/PBPoGx1sCK3e4TQkN87gi27qtH7jj7pSOhu4=\",\"Bn/vZQpFcRA3ofIE6sKQRYA/qSLM+K1RgzTAOikXiDg=\",\"JI+MRrs/C9Oq+D8MQQwOVtnexiCCCukdQcA8KIwNmY0=\",\"DTtqAASoW2OoUGGxcdh0gMsmKx/kzNtxviEU9KixP6A=\",\"B7Blqcyra5cGabwyg420xIFH8GYfU5KfVhp6g1+51Wc=\",\"DgK20S1INiZ33wcFavwb9e7lXN7qZQRN4GSKDHwKeJQ=\",\"L6uQydJncgEP6RTkuIpx4y9VY/TUoTiFX3q0JHJSuE4=\",\"GYnC5UdBzcts2UQH3G7YTngXOEr4B7pu+LhdS80xPF0=\",\"KN6IkICGa94/GdhLJTR3YHBxw05ZVp8vsKoYC0TfFBg=\",\"KAS3n0V8u4CNA0A277oAEb06sEGcObCUpzQe7SajIuQ=\",\"JOubgCAS4ROGtO1axS2nCVfO+sXTkR7B8EKRfkeb+oA=\",\"FmbKIQESwyuxmyVqy6zJb1jMD7fdk4dNUAIfvGMbgMk=\",\"IHmd41gTfb+8YjxuSsrcJYRb0hTUBz9SuAJMpD2ZzTQ=\",\"G8EMRFJfgvmPRP6JUdZpyL0Qh+yPsl0IxdoR7xEX4FI=\",\"HY3QN9c1RNeNSBHODWtIJkRJFyIXz89nGG7uQl4Yy9g=\",\"L7svzWu8oTbBg9X5RYLGHxlKqwaPkVv+DYXMXUuCvAg=\",\"HuqqX34YNKGWVdgL8tqh0s9Q1z0Y4Zc+anTEhwMEdOI=\",\"H36wbZYf7eBmv8J3POjzbdeqNacnpgeAcZ8LmmJ/Vv4=\",\"KYH6XmZy2Xe7Fp1w4HDnOrnXw/IJULMkLpKVtFOQ9G8=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"KHdsdfVK4A8xkNHnERlLwD/znSSNlgJ1I7Fm+UKSCoY=\",\"Ckq3Mza4M5VwEvDnvMNomYSbLbePj9cHtpJXjhS4Ayg=\",\"Ieuumb6rOv9UGDPWjHX+UG2FfYkZqX4H45ArkZ0+FDs=\",\"MCmqm8VbjRrhKPRbo2jPsgiW/uq/Oblm0MEnQrvSi9c=\",\"AjkSiXN1en6cjSnVM20aU7J3OHtIr6lGYo9F0D66Sd4=\",\"EKBDX44y/NbNXYzrOjwHgie1y7aZZqdtfx11HllEedY=\",\"L11JwqucldCcsWCm3fR6B2P+Efw1BEeORdHQfmQaspo=\",\"EYGvnbGUtL3WX2HlGk99ViMH9XRVIuJlGYsyCuZJVWw=\",\"G50sSg3yvG2dVsdjFxgNiblmCw46xU4ufug4aKw5piE=\",\"H1wlAUh5ErHvZfByoQjx5s1kCx7rDcfcDVeQMgALhXA=\",\"Byw/bcla6/6r17eb/40Ac2cMX8pDtbBnyqSCjme/7gI=\",\"IyjMIXQq4V79u7owZ+ldATT0nKJTA66YcjFeKeqvPR4=\",\"Gi1nq6be3I9oOK9PIxjvdXWg3iUc2L1LmUTAqW1wOyA=\",\"Lq9soGi7z/3zbb1HWuko0QogVdwQ2in3fM/1IExQaHY=\",\"IzGIWY2V356pyGs42wAnBR5qS79L8ncR7RZIl4MYfVo=\",\"B7Ri3a2HF15R/outfLdWlzzndj6nMrP2Tfo4oKDL3lE=\",\"FLvQjKBSVicWpGDNMNDD0goh2wdC2h5AIf6qw6jac4w=\",\"F7qxLTJmVA9F1O6L605PASZ+KW/Cke1U0PQYGofgpTo=\",\"KhaKJjFwAw+IdDQ2twbf6C2jkZFPSS58SKL2LVbMnUA=\",\"Izkn7+FwoEfT0wk4C83S0se7p1QdrCd8bPzz0bsWVx0=\",\"ELnl8k8fTviYhtitP1cfjz6GM+tqPOegBVHRI6HeBUg=\",\"J2e397hydw2pDJufpXu812a4ePe/bbChJJ702rCMVtg=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"De2Fp6pXZ4VY2gSarbP4S4g1dRDmQkcCcxtvOemCTrU=\",\"Bmv/u6VANlWn7/Aobqgnl/sbeK1EhhLV5f/dUTl5/o0=\",\"K+RIUSE0YXNq0cYnRqRGubnqFX9ZLB1U8728oOgbHSg=\",\"E8ev8iPDUaATbNgl8Q5B2pN4lsPrFT5xLKu9wNr9Aak=\",\"HhKV/t4BSLsy14TGWZON4Z1jzY8HC3k/SvaYfUsKLKE=\",\"EI5zG9Zy/9WPO/s9ZsMoHamnkhT/ZndWwxkzMfFewso=\",\"KO4gh8qkBKe5yI2HHqlpBzwFqi1/jIr6o3L7vSn+yQg=\",\"GSnnDD35Z3oW5rw8psj0VDXxeBvH0/q1wtnyGDa8pJI=\",\"CzKPFcFNqHYhvyt7FIJVew4eS2Ltdx7wtcDcKDk5Gps=\",\"JGOSToVPwnj3jUGsO6TILprjOTPB9nPY+5iPUlfqSMs=\",\"IGssUPvZPkqxbyC14d1OMbQLQQu7oCFG0afnEgoL3ng=\",\"IqgWn03IP2a3JcnbCur2lExJ9/WeCEdBt03HXxei1YI=\",\"Exvq9sONKhSMkbASheco2DxbQDCfifLuHWnMrJFs+c0=\",\"Hy92vCOkbJ7VRBuODpEFji6xYWWulD66i2H3Yp84cI4=\",\"A1CWPSwKqElBAFt/yHR/xhNlrgOmAK+Th1PGI4QiPWQ=\",\"H0OnGayxc+3zzvT/V7PjtUQ0mX4DvKKsMWTW0gYpjOM=\",\"L/LIvhlkNzVj2WgE3LpttPIAQQnk1zq+QxJxmBycgAQ=\",\"DIqnRd339BkljZ+CnOerveH1vhND/4nZCll7gQHPMxc=\",\"COwCnWDN3/x7gdyJWGpq/CM4JsFkHMrX3Ofaeg1VIAI=\",\"CvbyfSIRsSruEKQFuhlZ+6MuTacBLJTfqCK2g4V2heE=\",\"I8yfTKmdMP4Nd4A5fXKBd15zWcO+cEcbxkghk8o7MYw=\",\"Bd5+iPYxSI0jzd67qyXhKPjN+1JKy7/qp9LQv0fC5/M=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"Lvl+gh3PypC8zCZs07fP6GA3yWFBS5cFEahFJRIEzfk=\",\"HnTA4BXu3r51pNVpVhznRBB9j09UBuZWhaYPl8AMDHc=\",\"C55+V6YofxPL+HYPy9G/uYjh3qL3C7Q1L+ms/FYNOko=\",\"Hazuw+JOcD9UonqIBNlg2EGvWgoQtO2PLVrKRrYevbQ=\",\"FK3UVZUHp/8p5OkVowvLx5eHQIpswxwHEZnoHwPtGxI=\",\"IUr4RkBeM7l0eiWxdu3NfBk0wQHTaiq7gclYqL58Btc=\",\"CPYsHkwen7YvH/pbJi3zFuMrdpQURFRExONFtuao49E=\",\"KBz7z9n+P7ozKbHj1tpqxy49QBSD76mUbKsKtTA0LFk=\",\"DEkwsgTRC/MKx5PyHdXPhM8ISv8o++pAR080BWxLgbg=\",\"B1cXkXoNTiEO03+B32Uq+Ix4Ik2Z0T1G2tWj0ECQfGU=\",\"ECNuY5R21WXh3mVbD4FuhZtbOziJf/6pzNydlVgN0Po=\",\"FlNVaNeS1DCDosihVeCWRcshTAiOQLcFiaYQZ18rm98=\",\"IJuC0svlYX989LfKBfC7HdgNwqZStQoj5o3oVjNO3Xg=\",\"ENCEPDfp/8wGkv5gGNSA30X5birUG/lTkZfrsSrl3LU=\",\"F195NeHW0om5Y7A5yFyxo//LovaByyemNkVmrPX/LRs=\",\"EvljH32culs0czFCojp2pOm9dvyDi7uGWnKuwXo7oJ4=\",\"Cieq9q0ZU/ScUkBCW1CRRMmZhzWlnieQbphRj3vLzfY=\",\"AznBCNPd0Hyu7cz0W6OhcpzsM4czjUX7C3uJb69hgRg=\",\"HH63ZLG2NyyKfxhUntst7J5xPsYYNl8WnwYzGB7SHaE=\",\"LQa1zERqyHFc0hsciIlyiqtNO15/Tu1/rvNTD+N2ZEA=\",\"GDRF+QU1sHsIsgBzugaVD1AO/z0JYu9gmiIfwN9QSws=\",\"DgX8BlZGi4XqtxjuGbzQTQFU7cYzhDVwrcbn0QWSRFs=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"BpQQgtlDmO67VKcBlmqcxFswOgmJclOBZF+9D/l9nWY=\",\"IuqdImBlMBElAvjkD5J34aM06O6zB6A+OSSrjGcB8YY=\",\"Fs5n6IS/0XgocvzWWxiz8nr4we38jd782lPzZpZR3zM=\",\"Efw1hT9IXwrgkCxlC5dJtIHjNsVT/dkPl2fYv9UsY6k=\",\"DwTA81JcVvUzsjpN1N7rezGTjfsVMYY+8cIGbodY3eA=\",\"LhVmj/O+ymUjXnkS/ti3zK0JKBNtsGCQ+2k4rOIH82M=\",\"L6++kW069v0JJM0pc+HiR0sQvh2yUs8Dj8MucySEv38=\",\"CXSbK7XmZog5yL5W+kaFmPcpJ4DilOR7FVwSMi40oL4=\",\"DIFkNFjFrzaLgdy0BarrMAC0wLopw3aFVHDPvyw1490=\",\"L3dF1vgV3Ty+LFKcY/B9SmRgFYQsZnhFZAaiSCUtD3g=\",\"JUAmGuWyo77P4MzeZgz3Vs/fvo/OBxPAYdp+rm5b/80=\",\"GvUzyRCQh/FOr0E/eY9PDo2UU+fLoTbZ9bLmgOgKyRE=\",\"JxFfpSaJ+LhvKWavQlBNJdyyPVQd1qH10yize5+YI1I=\",\"H5VbyygsLA50tBaaYaUQ1PpQbsipBQUc1PvcnvETBlQ=\",\"DxP8IKaNmDrdKZLvkhqn2SlOV0uKDGl8XVZiKlhe9rY=\",\"DkgMH9jmGl7YAANtkRDKqaVTCbxGpPsdd1a36W69J2g=\",\"IIqLDKvHiQ144YAodooKNxIP8eDYHLlUG714HT+1pnk=\",\"CkvUDBdXJrZEw9rQ4p0Vj6GxdTpKWaFgZzjFcCbqw5E=\",\"CFm9h/uVUE+uLFiBZyR3fxyToXLeCyMdqCwIk1qVDfs=\",\"FXL08PL0Tnq1Tz0O4gjRO9n0oWor5xYA0QZRs1SDzMQ=\",\"JZWAK4h7pYGmRj3D3U4pvhsJd8h6ckB42E+hbam4ra0=\",\"KCkAhPXzXedFkeBqYeeh1panmy+425DVo97r3M1IOYc=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"DdYaVInUu3vgUiPnXoAEDP+kRpu8HS7O4C0NXZlBLoU=\",\"BsUvT5DXE3RKzmahfTFxxtg/Wr6lg2ejrsfVOHNq4X4=\",\"KEzozXfJyutSImGLx31MPSmbQcx0gSSJWRux8jpeihQ=\",\"HpFMJEZGYFH5YfabqpsAxW8BgjKhyujGkzoaVO/c8ao=\",\"Afnx1dYcIoMaqWR6W4G8kmZogmQJaNY8A6M4FzwPw5I=\",\"E4FilGJCjMId6naQIaCPuD9olgMDrBNoy6iLhxhl8Go=\",\"CycrlVL5IBsD1+vhoYh8f4Jx66sI6B7RJacMj3dk4ek=\",\"B7TRLH6UnU7m4uDqk9wQWvv6J3uTc68tEqb/ZORTVqY=\",\"GzhSC6HEWJ/UIBTW6ASay+ldryxMLZEMRKsUGobiGsg=\",\"H5rREL8bvLo+25FzeQWZplN5MAnsirKFy5VnqGjkGVI=\",\"LltZnqjSX8l+Yh6uCNEwkJF41FCAPt9uhTWEME87sO0=\",\"GxX0mHRN1FxkQiTLwHjpIffBs+GvdkqEZyV9bAafoY8=\",\"HUzsfWmXGWIEN8CkjyBcqoVsv+6UFG+w0djcZsRl9KQ=\",\"FzVDug4tGyUhkci5OSq9loEBA/owV5A6oWl0Kam7kYU=\",\"G53zUU0LMXfqIrbWG7umHm7MXvh2ZAQzP89vkdoBJ8s=\",\"K++pimpcg4iKuPIvlQTJ25+u5WMniolM4lOzSYCHPsg=\",\"KV2x1IOmYZEXHetqC5XQi4Q4J7AvXmkartsIRbqmTXc=\",\"Fvzn4NoK8gtzDYflD/O4FT43cwTZ0mK8PB4rRDjQ4Yk=\",\"AWYEAcIH67R3c6CZ5RKxF5h7yNECosoKfP+ZR+Lyy9Q=\",\"G94QXp6/J5VgfeIW5UTpY4+yPvH1mMzGBmpbGsu9wds=\",\"Bf8pZswq7rtC9sq8Kv9LpniBo2UxaLHaiRnqZBiNSkw=\",\"HeGFlRgM3s52vHo4nHJTA/gRRiV4Xk+OfLmHNmt9i1A=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"C3UwbFLp+qJTIVdFfKdRSE5d4svqQaNXSB5r5kHE/rE=\",\"BMeFXEs6bm2wWVwpStWMTDpBq3pnFgjgTq3ziad9Xc8=\",\"JZb/ejPQJgZ/Qn523ueMsMyTgZq1mcO9+TGRu5eXo8g=\",\"CKoAY9xZA9Su4DImjInoZbMmnXVF3bEISvJHn1UiWt4=\",\"FUiou2dFnSYliYOIJWP0SaVsAePfemCNCG6qsi+TcI4=\",\"DVzkf7gn4T2er6m+/v0y6wiczxwCdchZRuLf4fQ+jMk=\",\"G19EI7FqDLSvH3vL3K/99RsCGSTfqxvn/TOlZkelGZk=\",\"GNU1txYOiZaMljPMcfstl98xOYFMEv2tweWm92IqfAA=\",\"FqDWzWO7a1/0woCHByAWAtp9aw9EtwHoOT+Y20PCT8c=\",\"IywS1s5qwKuOrzHPAfn40s9Q0ksY7SFsYpJnLI1bSQ4=\",\"J/uWxcWMQKrxSpzvSc71pcC2BHH8qOkHxNVsCS2Lo4U=\",\"Ia0b3etiliFejiBxTzwwF2nLsENhOevg21X7lhz5dzg=\",\"AZsWhwurree4rDDJ5igXBkrpiodsk2dbI5hTN4M0PmM=\",\"Fv3O9XumV34Mlj0BMnHnAhXIo7+eSg1vk75qTp+vLQA=\",\"CDDOcBqToNf5JneqZdU/8or1fIIwmMJW/BRwswBfVG4=\",\"IpXXyLFPKtTLsPdipUxYOD+2qP6vnU6b3jW5X+WMoF8=\",\"CbHkO84+UtESsjjo9y2TST9BqGIN5uTcm1LLWiofPb8=\",\"CHwvH+OC9wUCTRvcuP6K2zO4I2HYy5Md3uP5+vyi5KI=\",\"CxfXUjNKUdAsCRpoA0SJ0ws7TH52WUIuULMtB6F6EKY=\",\"GNRSAmm6K7dCh1jhx0vbzt+PBY9pbaO9j6/dw/JUPog=\",\"BtDhXx8cKwN7/cr2secksm7yjXZkDmgRDVDkJsr+Vog=\",\"Kbe8AzrNkq6Kbfk971jUmLedHeUZ9q7Y3phPopbY2fM=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"GG1gO8bZNiZzKx+F6kzKwUHMj0V5ndSK9BI6Ty56E+0=\",\"Hp+0TVHsSRXtmlgJxQ3Qv+EbTtxp6Zvv2ewwYERFq8U=\",\"C0j2K/YMESS9e+Tgue5sZqZCkYpGX6GlDhq1ANZ3z4U=\",\"JHMYFUWBv/bcYzPLwUrnQgKx1BkkGwR9yJHA9g5oq+M=\",\"CybL5c7KiZNLzlVD+E5CvHOfJfKY5VYiV0LZh7Dmwmk=\",\"DGCtnGK3Sr+Spp8/DCVZYwrFG8j4TEJhMEAbeJAnijA=\",\"GwRwqeNIXmyuJ2n2qbeqXjtW8QHXvmu3yRF41ZRWDkQ=\",\"Jk1o+ekzt/gmOkZSYKqDkBGqoRfrAjWJRfzOcuDJPi8=\",\"DZPehCnHBBXfcin6Iz5hBonjFF1TRlEer1uN4lQ1F9Y=\",\"JKmQEsHtehJF9QetSpyFNGWKTRrketZTkD38z2a0QD4=\",\"B9qZtXwr/FZpPagJaRc36DIZGnZaUaJ2lx8WfDqCzLY=\",\"HOobE68ArLbB8VloMa+9S+FvwxPZVLqiISBOsQNaih4=\",\"Ejv7BjDoqvVs03RGYZGbKojA3/E7sKVxqrUlP5i7R2I=\",\"GvEyIxJSv8YC652YLUb3mBRwwfgdM7wtUHZNqk0MM9Q=\",\"LboLw3I21bYSNj7+7F21xLjavjZa8d5+q8QwfV0ToOA=\",\"IhymXJodO0W2kXCyblpkkhSF80LJ0XlgQqnWkd+itiY=\",\"BJf5Oca0XMwp1X4SkQIdf+QYa+y3ZZZ3ZrfvUOXyr28=\",\"ILgRfQvFsyX1pphd6w6mwRmt10jUQyqvUvHxgQDExM8=\",\"H6c+EpwU1ypOPUXhBEtOAjezjNX3pEKEvA41/c4I5mY=\",\"GfJKHGhuILBgOeYKHVIvjVIUkaQGmOpIpDIZ1AFhXBE=\",\"IfRzjNmJYXw+KN+4By80m0T63VvekPFpQgvsSgqJZV4=\",\"FNHOpCJ/bTabxgFTKL7Dbw3Tzx2dLQiLX+QT6n+u86I=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"CYXMumUVcPRXWg7ZL8gVxNJixr97iApKLppvBi4FObc=\",\"ITcAgVFMo0lvA1MZ+oF+QsGChVyTiwn1c3vV4LBA04c=\",\"KNUd4WCxkd/lITAF8Bmjhzu2DyuWeaPfZWF1AtIVONQ=\",\"HM3HXkNbje6qSwyLcV8IMdwiXHU4Jm6QYJ9qYoWivUg=\",\"Fe2KYDUW4fVheHWmFG3JyNURzRAPnuQaH739WBBAjGs=\",\"HMXnpNfsv0vNFeLA1UUy8sbzZ5gNWv5OFIt72BNzc6Q=\",\"Iolnntdb9WS9kk/0LxSk9jZj6Vgi66dLNfbFjW/1Ts8=\",\"KKhE3OCO4Lj7VeffljDjV5KNvvku6b4MAWO1HNVVUDo=\",\"JSFzVCRFlwE1mkwnws0NVbqlOA5PSgbviXssqJvexW0=\",\"Ilq9YY4RaJZwQJzbGmarcNB3zcD178KzhyWPKAokw2w=\",\"BNeiPj63pGZ5rF/B2KE9FnDbtfADQ8uyCJP8VXYSC2U=\",\"Fm9+KxTJsXdu905N6jFHsBQjT1itXKWkH1zEB3UYUVc=\",\"EmgZh8lE0VwTKpPW3+y+UCtbeuTaztIw6v24nT6NTuY=\",\"CqdVgFK4POoN26MAYLS0Q7Ok8A7ziNmKpggWQeerWOM=\",\"LIF7L9Ll7DLGvITxGzxjGXqkrowvNylSvQFhYsXXHLA=\",\"EZYhWaAX4lM0BJ3xPyvQE9d88Ys97Mf2b/gQQdzzVKU=\",\"HWPJ5cSxM6BRHIYkeV9UR0subkZa/ZAzD1CkTu6eV7k=\",\"LYLinARNEJa4wWc0pvnHJqxcW0ehmdvXsaoHkqFhQeI=\",\"GyjSMqGWk1QxEJF7Csgpg7eLSPrVPyX6AHdI9jDVJK8=\",\"FHug98ONh10e7uU+6RErdfsK6RAQMy3o+TJa64Xi4io=\",\"HM8mm/R2/svBJJGhC3oDGkPG3xgKdP12NAVGq+IFp6E=\",\"D+QHpWupGsF0/Unvu2HocwpDl+jfJKvvBmbEbhaW8no=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"BTq3iDprs3l3qfbAS3Qw4fIyWccbtj2+K/D8KWeTsrI=\",\"55GnCXtuLuXcMU1XQyl1QA+S1p1P+mDXyaAE6KgybA==\",\"BAdNX0e4UpydjHn4hp3X5TlEBGvgZdTPHZ5ADNMOAFo=\",\"EFtHiZiYzkC3t0zpSMQrGn8cBkwXpViMqwK59ZO1V0Q=\",\"JRQWjcE0yVUNfUxd0D3TtvoPTBD8NjE38XoctxuNxFE=\",\"CvHWG+JcxqGRGE53I0VC9JRt5ofLsIqozqkaYa2gVI8=\",\"HdW+pV00s4Hr3IQiAOyqT/soue3JYCWnAl2k0orwwFM=\",\"HDnp+KJTAPiK/B1a7KZIUXcZ9cL4l3hl3t3D2kUfc58=\",\"Ot9HRwlkPkW1c//ilsDPZLC86XBbkfg/wQkhIUdJQg==\",\"LivTDFpBThlglePi56zfB2LGpU6nTdgt7WD45jQ8RO8=\",\"K1OhPMJ1Ra2+1IFBjL8rxNt6xq7NpWSSc16i6cgo6HY=\",\"DZD3WVlj1MRwpVnyIvorbpWIZgyatCR0+9NQKxTP/JY=\",\"Jjtz40iL8sIIh2sivujiiu+snTpLdnaOnsC4OV0vzts=\",\"Kg2+9e2tHVsBRqBjDejoWIxun440POrrHpDxFj6T5Hc=\",\"GMBhNqHixULdTKuvu5IyqYMByRvbKUByzvYupJRLH3g=\",\"FlLHGIT6szuBbYlMYsbHc8xjF57jXLfnOlaFM1R9Mj4=\",\"JMiV/iGQDkm2wekIJeystHSp6Rmp00UeFw7yIYn1qxc=\",\"34D9T5Y+j+xH/US8UdlNGgSJR3spY+pGc5qZo+vjQw==\",\"HwP92G7inkgwnHnpDgwSJaH/tHugyiXk4mHhfoJWcmY=\",\"J847NoFSokkS2Uk71/ddVGZtFjOn+VrZTvnLY7crc60=\",\"B12VUAqTuoa7Uv3lgcu7164dKIuF6YYv22qEYM2aTQQ=\",\"KYeJHteSFb/bBRM0SnNqX672NuTcGq+5U6J+YHY7/08=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"L89oajIT3fKrhjCynScfHAOAQMAdbUCRfnZl9ZwPQRo=\",\"Jh6ojqIRnI7mYGAMHCaWRVmwNF8zYL5xaFYgghY4vno=\",\"D+BKJ6pjZ4XFg8JHBn0P4DKLhzKxc7IBcVc0l5Z9igI=\",\"LPCRKsIjelCR7CfbCn1ShPE71GMPtrWPIhpo9fT+MjI=\",\"MEFWndlyxzuI5z7MxxXXBD82znlBLbDfV+2QKVf6z5w=\",\"Kk+bXFmwmDTAc2X1j2PtZAODZr2dF8cBbwRQWruHizw=\",\"H8F/zMKx9NBRWVwOQVFAbCnS6wJTdpauv7e4Xpg3Fxg=\",\"AW/AAurq28YQ1TgY+xpyxH8H54NLlDPgJ27t9ODMd5w=\",\"L+D2vDJCzclA1K1npAMopR2iIQDOqGKIkqINNoDm2dw=\",\"BDQjQGOFxNteqIXaV2YkYJYGT8d92kYP6NjeuX00ukQ=\",\"CQ7m/SMfK3+nP/m69tsKR6AFfmJmTd/ZNVkkJC0FDgI=\",\"MAXC9zq1ioyt+txN2h40ItfA9q0P56dSBFrHIAHG1EU=\",\"DvIo12Z8ZvrtjX48e75ZJaVddFHff1Gmr6O74HR8G6k=\",\"AhYfdhgRO6fXhC25StLvJPIfijG0wRJGiKLk36yBDwE=\",\"Ag8IVmm/Io17oR2Thmyzwmiy4DHduWl9gM9iYoaGk44=\",\"KUNygE1uI1kAPJzdFndWVCPt8CWpkz0LJfquOUcXG8c=\",\"FdN4kPCvW7pLOrs3v6XV4RXvWk6AVQXizQIcSAeskBs=\",\"KH7x2ICzF1hul41fyOoneqpFHua+G7uN5ctEe32yUc0=\",\"BdD/4NAcdSr7+8PixJ8NNNNe5RmGAzANcnoRuOfu1ZM=\",\"BC5fuBlVL7Ztp2Z9Zkg4tL9lpQxCKrHpqFsf9uktMNg=\",\"H86bNEp3MRfSGXTZw6BwNoBlN3hFFx5Gk2y5Wj04BRw=\",\"AhfiN305otU07ygflzriL+jsT4dQCJlDHOzjx1xBAkg=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"MAc8U71TdcZCFIokfkJgoFtWYT3NzkoJPoXhDSlpmec=\",\"I3wLrBOcpllcPb5/gTDTmZBuwHEIGP9EwFd0tHnVT9g=\",\"Hy4j/NIln6p8szokO9IS6Juq6tFDp+2+bGscKVaQ25w=\",\"LsdDkimihPLEjtvhVZnUYrHQc7OmA36PfIAgd38m7k8=\",\"I8JouE6MEYczwq22s7CTX/Yx87R4Q7ES6AzZ7FtazF4=\",\"ATazmrBK9Wz9oW8/mUEbHDy9PvGYtfBW5lcY9S+rx8k=\",\"KTWKAjFan1GA8jV3szNr5Y1AOebOT6JRxM+GGKlV2aQ=\",\"KROWdPHtWWdHbI3Xd2JOSbyQiQpcmXUJIqRyXIEQV3U=\",\"L841yr6sFL60m6ua3n44Ebup8yuZp4461lW3fEc6oy4=\",\"LQ+8+ctft4+iC9h47n5r3Mwuqw630jJ0GTLA54UwHww=\",\"LKOPb4jWo3uOEm9yqCI3hQ2fJu3FtXdVjaWMLlWwdns=\",\"GeONCc25OeGHv7iCLlwil6iX2h8WVVoZEVe7ilrxFaA=\",\"9hpYuXey/XMjtIlBzAEBQOm32jEnHb8+RpG3Z97n+Q==\",\"IrUpl4cFCuBL+fuGz96ViSU4cL7RoCE7FDsz66EVPfQ=\",\"K+z8UQ7O1TqHPapTfCHXmh1QcapzT2BVPugJUgqeIqY=\",\"FNW+XGkIg+pbQGwQsBIHJb8eTF3iF3Jn2eOOnHkruos=\",\"Dc3Giq/1SNzHhC8ZSxswtgTk3wS8qJgwwLw2fncD3fg=\",\"Gwqgf58/Wu3Dfh9yZr2xreeaYts3FM24M9GvhsuJ2dU=\",\"Hnucityb7iL4WZcqE+AhMxTUPhgp9PmfvwGd6O9586I=\",\"A9CQ/cSOvACbTMftNUbWnsh97bxnlw3OpgUmQuUX/jk=\",\"L+24EZiFw4OYhgpubF2xhDHk8NmBovonSjbVwx+c76o=\",\"D6X6Apnqeu/401e9My8Tq9aTVGBYjhWtzQ7HbI3WdQ4=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"EjQqE5GmtZ/yWlyE81KgGiRCIEZiJiXXlYikPED06o8=\",\"DiGEm2tJaXFKEhVYMxwYoqiWkATNdQw/7GvdpjhPWjA=\",\"FD+oTpXHiT4RwXMGvLfHpk45Xj/Z8fTwhs41lHKJMdI=\",\"IWt/mc+9irnhJP1/9LFyyFPPI6KslctBs6QhkPA1sUQ=\",\"GLrQWUpGLwM9K+fSFRzdq8bPIe1ZUQweVtCAhy+5VJA=\",\"LFtJ/OIGxhKUf/X0oSzx5HY6Oh97lAfDKOMLNJfWnzo=\",\"E/u7ZjCZJP6hFTpkl4ajP82N+z5CIqPVk5O0DMs5uaU=\",\"A7RPkF48iis+dIfg/w4Sd9Wr5eEwHBZe0ckliCliL3w=\",\"BWwv4ywZROfJQA0KbsIapUzAVlYgBsSEWDhsjZL1Zeo=\",\"KcR+UxQ0Rve/xDr7PuhFSLXKol9Jh3lkFdaOMYiJqxk=\",\"AuQ8UtJ0SCghdxYyABaFdN5AxYT+YdT65dyuSViQIX0=\",\"L8zhJQfNBjDwaimSpRX0XCtGnydC4yjgdVXSLHXlHkA=\",\"HS5tnF6MIg+UArgrpOv2QbIXPpSudur37lVZ1D3sdhE=\",\"Cx0aRZHyM+cQqPJFz/XPdZ/gtOVfRjB7u79dRXOoYPk=\",\"Fjrq35aX/RWJg0QjOlowI2SZtyjG/lSyU0x8n8ZIu5k=\",\"LjNFYX3ohSO10JsnyWaf3LJHLGzIMq4wT/lgwNSlo0g=\",\"GFmpv9ULS/jUCIXJkmVHdc417EGne4liBt8O8ige/Ag=\",\"EjKnd7UUHuQpZ5jLN//spwjQ6rMUI1fk6Re2XkJOxHg=\",\"EMTOlnzvAV+kZrz2kHn48juygmz+oUx4o7RQmrKuvYw=\",\"C5gOipI706Kp1ekZIzfwcPGMEaFsgJRA9CYSasOQt8Y=\",\"Kx2R9CItKYTbdU5BM/1AYNEsHb5hWOs0/Bwf0PYye5k=\",\"GcobTgGhZxx3GJe3QbA8ppHC35hsM5xvLGskZj+uMSk=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"FeT8SMlaMKmzTjnH4uWyPPluctynjSXL8dB/a9HzUmk=\",\"LSP9xMDIHFzRJEAGZ1hUHX5LnGvCnKuqe7Mhf+VYDGU=\",\"Hh2wkCwLl0PT5g9xxTvbzLuZVGbzmp4EQHSjIIb1GaE=\",\"JLfJjDDM+9OzyHR5vM1xEi86QeDqwMWoKRatnhx3roA=\",\"Iqx1/KTTu1vw+fJb7gKTxQkBwtRfTC4dGddDOydxz5E=\",\"LQd3sMV1/CvpsTEYtLrAO9yFbAPJtyNvYWcNrF2pWxs=\",\"IlL6NegRWT5ifI1v/tqkUDcottbZZ28uMnBUXNGQvls=\",\"ILN7TtdEWpastYkb/oTZpblujFpn3REcxNyqgmn08Kg=\",\"I0eYZlIpXbefgEugbZVR0+KmtaGuNY2UodccNPNv4MU=\",\"GThOviRdzpTV5oBw4xFLHFvpEj4qNyisOvnTQAWKNec=\",\"H8dKACMjEM5q+eIzpJNFULDz7wY/Iho9q2TC2QcTijU=\",\"EEchqaZWjZ5n21bsxh7hhiPoniake56eRPiXfainwWw=\",\"Ftn9Tl3PdYY/OreXHdct5j4Jz3d4eTGwhopcFb5HwWM=\",\"A5K+ggM0elHJFXohmqpnh/VElLYeYsVOHJG9mVrd1HQ=\",\"FyijkFqRMLD1cK8BZb0tAN6mHWH30QP/fBMXKxeQmcc=\",\"AUXwPLOr4S618MrHPBHborvPlMcvLjDiIZOjOQZQeTQ=\",\"CHrio2jbXz1mZzACn6CulxtvUEMogcnA2G9fOqcWuEI=\",\"DjhlQ77zMNbDzBQpSthuJAiJTaJl/MBBIlGWq4Bkxzc=\",\"H6rzq3naKzBAbxEc1Cqm/PGHsZRIsY9GF3EruVrqarI=\",\"HGhBC8b3XZ13PFzFevKasTjphIDhoN4VGV5kr97IxSU=\",\"BbUp0J2oPYld3xqqmEn5iVXYEoDrn0txy3aUsqIezAs=\",\"BbjvWBOOfDKE2a/EVB5/KR2HsuJrULf+63XNhZ493Mc=\",\"LLExedbopK0bn+w3N2JTz2Q4atkF4kBXX8qGU5snLcY=\",\"DSq+a7DAl97us/IWK0H56WkDWtbKMecequuqWQ7a5Ac=\",\"AZCa5vhtbUMzL9Msr4MVLeOarD8nAUQTAgEtO0NJxFg=\",\"Lw7jqGdrcufl70eUrtyIBR8JEa5D0DZEnXwH/PL13+E=\",\"HjeKH7T7Cw4WgSH4a+jeNCJl8NlEPeN/9uJKjzHGMAM=\",\"JYOxsJEs3xYqBG2uxIVrqA7G3x8foIAQHM/SJRdqDos=\",\"Ednjiqu+I5Hct90XcG7ciU3qIk9svM7xgu2uKYgA50Y=\",\"HUhuW5Dj88eJgwvulo5tVEtUAxR3/cjJ0ALW+c79WY8=\",\"I0Q0ll8FAopPUzClkKsGYZkUR2NIrrh6HruvoeVo6xg=\",\"A+tVlE+h42/RYjn3s93xCP9fJ5VeLzhhOUk+oFwb9Qk=\",\"Ai1oPsyRJT0I5uU1pLYmJ3OMLLh30rElqpsZCz7S7Zo=\",\"D/FChksOFNJzTC7QZCpHT8HwEW1+HF3sGL3OrLJyGVg=\",\"H5MFV6KEmYIl9fTk37z1rCEfGxLZGwVi7T1jKF16cUo=\",\"AY6CIvaQfaV0Xuuc1KnmLyi4txCqhf5yn56nOj7wCZ0=\",\"GA6STXV9C+QGb+sUbtViEuOKz530lXQyZT83D5Bbiwc=\",\"L30HFdE5EZDnsUoSQrZ5nqwxQuIfCMoCwhdV6ud6Vbw=\",\"Aig+2NXm+UcLP09Jp3EGHkpPx9rGg978wDSKiGLGznE=\",\"IfYO+xMrYpCZkLn5lPOBqcAqvDzLVMXI6MnFZkxpE9Y=\",\"HN6CrO5guEQk6bzuSaVGTuBdHPC3BGkgimdWNaxxVJU=\",\"EYokUQohU/gY8KmWyH3pE1h4BfFs2xk52UBpQflY6OE=\",\"FkVnsN4Wt6VVD8oim6x8sHeVJDJeTKXnioYHiIFmAmQ=\",\"GI/zAxlBEqcDRSfMndC03rCWDJwQbOEVF43XCH5OjAI=\",\"CD2DKt+btKJfaGq+2p8W6/UyY9z570MReB0Jkg0JTq0=\"],[\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"I1zpQNvGrirxGQFhUVgbOSi79dxmPcX0tsvwIwWkQKU=\",\"H0H0niPzcd5u4FOehzUGKD73MD3PHWFxpHMR6fq8Jf4=\",\"J2Heh5b34LWRX1b9/xgN3U8iAB378Vv8g/uLdsLtlaI=\",\"IDD6EZ5+pycRf6GNYb6/3FlFucz+tBc7d7NzqINiVE0=\",\"FvreElB17A7ov7WsxnYHbRS3bnmy2qWs12/mcZR2wBc=\",\"FUBUx1Lm6CdUPbjY1rqvsCcm/XzctxSJUQ6J3S+vXV0=\",\"G0ksaqUvQqV6ptnpaAwUh1yiihKf3bL+2+68y1yDy0o=\",\"I9HRvN9sLBQ3bmYZ74VacYrr99mRj1eLWQJemAiTYxE=\",\"HlCehUaYuDeuYtturncwAGSA9k7KvGGJpukjcI1KpcE=\",\"EEoWrswtrelTkAfXpjHLEufqGrn6GOTI0ViUHhMyK/o=\",\"Fn40FpjB5HiAoIshN0F4t+MYcU7rQLVFBK6pNEMkn50=\",\"Fv90XFcoC4MhJlNPZaNuBR/PFhSD0amsTSqILVXEs9c=\",\"AWVW2jFFsSaZhSITtT7d0YWb8MBkZKaYh6bvExnP49w=\",\"H1LnKuwCwQhYYb7EbTyVKnsX47hZ4eEZ4p+dVbAKnSA=\",\"FDkjXBNlM5UemUpCKFf8+P0TeWPIIxE+d3zKktV3IzA=\",\"pw7FyHwoc9GSflJZct/vI2/5H3mWLqx9uY/sE8PKaw==\",\"CFxNHsEJ1P4NqoVIx7ZB1ivcrXsB8CV+pU+eY3HQBVA=\",\"L0slgM5WorWUGr7ot/mK5LieZSoAW203jtynUYI5krg=\",\"E0UgEWlEyzCgXGlOkMz+JjdqI6zfRHGdXpSkDAy066M=\",\"LG9GI2s95jG7I93tN/5DSemGucJqmTgqKBJbISPpYSo=\",\"C6VPpzZyXEXJqi7bEOLRYO5Jlwf8XT+tCSxvbmCDA2M=\",\"Cf7FUHXaOw2UmvISJ9/2QUNekgA0uPOgVPbO7gP4u9Y=\",\"ISPeLE2WV0ZuLAmU/HUWG2WPzOvK2yXQPhAFSA/2Xb8=\",\"FRkL/1EEgB77rCb+CYgvpdWqK/pwLvzRueiuSsqfLuE=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"Dr63jiR4nRPjFa7QPW+adQP4AnrIwHuzHKt9n3yGcnM=\",\"GnQI01a1RrBv+eEecG/hAxHt3rVk0V935AbEoX7aD64=\",\"B7kJ6bPXZsBWK/Xq5jDrHqo/SGtnOF6fFYQNzHWkaVw=\",\"L7+uZNlt8GNiJzZml3Gzdj/k1+MqJTsumkMv1ASlodc=\",\"LouuVTOLnnogIngCLR9PFkHo3+3LEBc/j/pHo5SnktM=\",\"lc9Vv3XxO2mGodjcbiPvJ8biAEm+adJ1zKCKlcT6/Q==\",\"BZDIB2G6yxmWFSvchD7pvI2eEQbWtEFDysYaWCyTxwc=\",\"LiyeGyMlNr5k6C4/44yfg8weLsd+uY1pDtiJcsVdTcE=\",\"KgvdB1A475JRBNpfgNQ2gZqIlrRhlLeV+e3mRRiC9mg=\",\"JeP1ToeIzHZavL7N3SMmx66HIN/8PfLnzvsGv1crAZw=\",\"LE44zine1XFIlk3wgW+lcyQGHFFe0C2fXKTLQjHnLZ8=\",\"F4FqMRVHH0r2PjU6iR5cY6HeIbB5Mkxzdsf7d4Fi1Zc=\",\"FrHmEqeRC9u1W0QXSyK3K2PM9FL0harbg0qIg/ehEp8=\",\"HNvObsVjG33zbX+7FzTAZjKVWZBs9MnMcCO3VEXyzb8=\",\"CFJ7sEVav5IFMZtBeKyRyJ0n1zrznKPrXiZ7QH3BIrs=\",\"KVpb4H0/rT2WIvkqUnQnhnQdGfofhUJOa7A4OysxhN8=\",\"HRDhXoku9cZ7BgYekjChOu8I46JCLlnOan3jvfztSUs=\",\"ChzXkT9zGiY7R4gLSDeS0er+dmvTl9ajf5sDv/ZJrZc=\",\"rvGNsFQQkfTQqMbA4EuxkcOz7Kmr/pGzNvN2iPgjgQ==\",\"LCQMH1c4TA6xHaL+/vZovhMAeWFvvpUzeMpM7jWK6As=\",\"HvBOVdu3dot+0mQiOlYLdGLRMaw4ew4G4JEHWwNsKQM=\",\"Gd9s+lNEiFe0B2Sskn5FxZpK5pCIt7/sIxIX+0m96XY=\",\"G3lNYe0qM1obbKT7Lfk7Xekk9Rx0LJfrH0UmL0zuPd8=\",\"BikGSCgkwB2vAB0LAeFVjXoukhvBJAmfpwShZzBbBDI=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"HuXpG6RNORmgKkwFpwTRXb1mZdOgyqdTTwYstwLhLqM=\",\"Ek5WcDAWib0dIRJSYKyYCqd/mSer+vZiXPxK6gVCw4s=\",\"F/OcUbT5q6C1DPNs22PWSFs/eeD0xW/N6xZo6rItLuQ=\",\"HkeHaIMiH2H1qFy8+RbkJVwUYggQC9113yVQt/I9mrQ=\",\"D2z7w0jQxG8rRRT6SuxjaFt7SnfMGH85+QNSru0tQZY=\",\"HskW8PirNTSkX7i2/VKg22EjRflKfRBHucsVvENU0lk=\",\"Ipnoz6J4yP+Ky1cSg/jViwcoX9PbCT9SgWKG+AWddF4=\",\"DmOuCE1BZe8jRjY308bJYmQqy6Ha1i9d8yLACqumeIs=\",\"LGUtvBI5G6tuaxZCJ4k1rcV/Ao11rllOI+hp3NgHoEs=\",\"AjzKOpbIfAmnWPl38ejjgomL3Mgt6/rk3wW8fBbnSqs=\",\"L1wZrisGqgn/YXotrWmFiuVFuKY/XHMNUDEsp0DVOPY=\",\"GFwBMIPw3Hse7M4wRVVfWToVFvfASGkAApohU3rPjgM=\",\"Lk3tkM4sQMrTkfU2cYpvEHg4cZ5s8ALy6RTuHbP9qGE=\",\"C6NiZwb65NoipZv8fQt8PP/yIe2KaYRVOmtgX7fOTK4=\",\"IoaHzcgfS9cniR9BkR37/iQQfWDdpOp5tbCUiG6JxM8=\",\"DBpDdLwplj8sTmjFFRjgmNvpBtnDpmTiSTikAwCe4o4=\",\"C0ntF17Ay2XZ+3a53aWFmvb36xLgpIlcPeUSKOM2YqQ=\",\"Jr6BJCXeW+Pm9P5mlNi4g60VbmfrsarLbLZP1B1ksZ4=\",\"F81LTHW5eKw2nAJuDjSIW6tMdF7wXEcdeXUwDv8APb8=\",\"KOyztGjghn5NvinwVJC5D2IQEIowYkcVY0481hRAhfY=\",\"KtKmiNXh/HqFPRf/jilIfmqf6OI0tkI0Ja/Bkv1pJqo=\",\"F3syJdkOfEP0bqhVefQIuyOUmD+qM9Pup7eEfhC3Ggk=\",\"GMcz0/xtXE7XMGUMUSsLKSL6Tt4OQoEnnfJctX+vF0k=\",\"JcKHGQ/dPw/lUscsdHxSG45H8ELe4w+QyIzEnEJeImk=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"FyI+iMWv3Ob5jD0wlv2ut0+pmgv2I3uzKEZrhDtbSB0=\",\"F+33u2CeJKtjQ0nQO7rF2SqZ8fVFcc2sjhVaN2eUZVY=\",\"FjhDaejoZtR7dMhJSWeW/khSkAgKy20Fp4s5mQZlTsg=\",\"A4QUBUyrnapkhIhkh/mxSRoEJMddz9bmnAD4g5GWMmA=\",\"Kt0qn1ivslPZ6XKbhRDG3tjKwmR4cbSy2vksHtgCZnA=\",\"L1n4Me0WZjrh5ysn33T4h4WDsIhybi934qm3G9XrTo0=\",\"LIVjOXYU5Ml3ditzRn90gS1h62ySHfCxi/hNrgpEjNo=\",\"EIRLbXAbJk0zPqbVSW7mK3+ZsPPoHkd08nGs1ObfxFI=\",\"DZDhIhsiZiG6sPhBZMa9ZXzt9FfBaRxkklSMtQOWLyw=\",\"BnXVJo6FnXNPrf5qpqWPW9R+nZvL9zEdkoVi93KkQxI=\",\"IxU5q6px0Y88EARJ0tu1p4yMbsph3rz0lWcKtogc3ac=\",\"DF5nTFXlfpgbjef4nQCqCI9HxbAcObzoXt4XBRm864E=\",\"LmseZc9wafyn9f+/B2Dl0sas7I2oX/NPLDzVX3RMhEY=\",\"A0hHStOcCez6aGqHEKdzes0ZkX+2bpCj34TRELWyYEg=\",\"AiOAmF9skr3degLQGHyEX7g0ybfjZk4bBk7FgFNtEZI=\",\"IVKTBErCBE6X0tBucU6Te7FoRLLE6DS8NVVjOjHOHTM=\",\"EHbbCzj0Yqapgp7UI1cvBdFljDkPyhCdxqW66ts57IU=\",\"Dgs7OeM7Xw92iZdgZtWsqJ8HD7B4FSN4u+TL9ggzDgw=\",\"HezXE1SNDwTKD8OvMe9T6wT6+nc8xpa9XXlZ1bh4Hzo=\",\"CO6hri4dur9OOWm/upFKelvgWmctFq7pApw0d611wLc=\",\"CjyBP2af0FUABb4u0CX9Jj9JbPwMiHCMVyP7bUeDCQ0=\",\"FIKzmjHkh0nzfmzWP5/XSYtwYjY3+uMYPxgF3rSI30o=\",\"CSwJoHQnLFb3YRriMVRCUyQvuZjx+vWgQDLIl3BcwYA=\",\"IYyulyJ9JOVQGoxo0PmymNECtbtIcKzsjOsGiyGcXec=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"Gf040Kn8/kTquBqIv4PpZvYl3M+4yOZjySeD0vNvQ1o=\",\"EFtp4MFrZ/tEjORn77ksA8CgPQ7mUqodP1cna82hW0g=\",\"Al0fsZWIuWuDXPRReItkNW2udKxLHdBBBfT/ce5Tjmk=\",\"AaPT8FhNmTdihwiuW8Gmd8oNlzS6E/n5uv1NQO0J79I=\",\"DaKcsoTwsZ5F3dNoigl80voUdybamOfXVlSAdTw9af8=\",\"C7JFpP4Xkz8aMj3pRunHnsrv4ny3J0bwLdf4oS+5dGU=\",\"EpaKvB5J6Rbb/Y0yyZrdDyUiYT/fpgM4SsrVCts8k9Q=\",\"C3IJAFXbjq7RXFMiO+DVnxNLbivBkP+KoUXeK8gf2QU=\",\"LskuMy1kvwptU6qzIC8W6PkxsLOhnQg5eYHk1n9+YUk=\",\"EIdeRXUbn35tIpvLYDWg9k0vwmYIe7FbRu2NusIlqHU=\",\"IKKNfnvyOT2/Ho/RtZV9Zpalht+A6nVWebySKzIhTwY=\",\"Lby1oGYTH+cOEDWs7LltYKPEg5TvAl+UaTGK4UG1lHQ=\",\"BdOCsRYhzoHfo7KlufzlN/GPPho8EbdExEt9ruD1OaQ=\",\"KqHL2jtyJL4mtVO2CWfR5Jp5zB/OoeKNzOrpUlcZX6U=\",\"EZ0Jj/T80VYGJk3KIJ+jG4+Q00PXNAiv2Zy8YL8xs4w=\",\"LWpewd7P2GD2BrtxfC1v4E1doKUSZ3v7O4jG64KMyqQ=\",\"HUTN1+D5/zD6JiuZG71LJbl5jFK1R1KI3ak3c4c7cPE=\",\"GlK/5CxpnbBYTpkIlHZUAH+JUkTAGwgnY3//c+5YY1E=\",\"JrwOci+I2vCuMQDdNgNAkQh1bIHC0lJtQyE1hnJI8Gw=\",\"IVHWVEtUHL6YtXsXvMMhdGkbfe3m2gGoWWT/TQPGPtA=\",\"HcQBEBwfHfGTFWnvqp2wNft+sflK6c6GzW3AVAsaH/8=\",\"IZ2OC1ddCed0rPQBj7YwKsmQ4TlZyL71WBSr5wPQpP4=\",\"BxB6rAxa/33xCzlQE1Ss3Rq13ACR0BZsVc0GPDoxAOc=\",\"FUGEaDaxgVnBCvUVZ/jL0iVW308g3XTtHO5YsxRPtGQ=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"GiGycz5XzlzDbZdwx+/xrgnFmvKpfetknzXgNBc5Y/g=\",\"CqdABaGrqfNd6I8lYwDQ9VyaVooKP5YlR//wov/PP6o=\",\"MCzDbbzzmyu49P+doGqVyKkEJ16073WluC+3y4ATMUM=\",\"G6j631T/GT+QznDYHQaO8cr/gWz0KYqenDWbeMezx3w=\",\"F34llhptLSU4Yj1wvUO4ZlHsY7CrKbHnBjCCJKC39oo=\",\"Ka3iKhTLFulZOayF5sUPCJ0YcGnfhllgljQpAknvxQA=\",\"DDy8Ng08yHEm1txzPowCduG1dsoxjSVmaaJ3f3DYkwg=\",\"E4pcdUIOGYvoYBDBR8EPsLbIguwQaD36sO8bjMAjY5w=\",\"CjUAUhk6SdMlUDAhTRWzahDnslYYkKTIURKGA7al8JI=\",\"EAJYAJQHkBHmwX6oZ7ORz+BbXnPG3oeGnPJUXBAIRZQ=\",\"CMBlIWgPp98F58j7ijov/cBSYFGllBGgzdKeX5k+j0c=\",\"AqOlQBIjAPMHBlHpGY+dW7D7UlRsNa6QpN6v2br05lo=\",\"FBaogkI4kQREdnki4yDTi1Q8yiAOpsVZHbkJLiJL5hU=\",\"BQfe+WJC+7mhq4f+8doaA/TDNJcj7Erm3olOFxobSvU=\",\"AtAxSAEtcwcpOQp0/sLT57qf0j9F6AFlf8XipJtDdE0=\",\"GURnkUcabwPD4OVX6g1LJLvSkwZp7SPdKG6Bt/4Xq+U=\",\"I8GYrpk9/DSlXSywIibbSa/aobjPuTSgXKWU5hb0PzU=\",\"BJ69LBslB6E5miFpDQ5qkAGE0VKAvaJ/W1MJmTOq/lo=\",\"KOs1pEkD84fwsXppL8mcyAgm+fNusblXbixcTEjM7FY=\",\"LiF7Kbwi9dF3K1vB+twRr1r76HsiP9UBsbY+wop3Q14=\",\"BdYX9BSMta2BjKg+PiXRqsMxGfSGJZJDBJi2wESuCH0=\",\"GW3feJCNo+Yp34hyZUHo89xr97NDSpOyVDSydztUbv8=\",\"GfQ4E8exNhxTZQneNzx069l4sPNhPQRX5ZKVzLNEeUA=\",\"HayYoAMX4a11tE39cQ3kOnDhqZr9FR3sR4qNC069Z90=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"JIOJtsEhWugEEjYeAx+dGeg+MF+t4ltRUXh7rCQVHzA=\",\"HWJFhJWVw/LmWN/x+CUgL3RCiMc9W2/j5HvgHIUjGmM=\",\"KCgZf8XsPQth4801s5/3ygWChE6piT5HV1rGmP4Pq0Q=\",\"BfmLqpRAPL7imafDi8ojF3OVGptexHgJRFaHwfv8riE=\",\"IcIXJdmCv4gFFr3QCenIIolCn9hHDuTwCSgbbWEPhtc=\",\"JRYWKLuWxDT83+0zq/sD1EkgYPnBLl1uEaMNpAH2ViQ=\",\"CY38QayNtoWsEun8snerizj6C0uUO19YYxieV6TsFyY=\",\"IOUWDbwyu3DdK2Z/8SKqycmiCYMNF30GXu2qN8I4ttM=\",\"IoK5KjMCgIzccDLodEGa1blEWl5pSMZ+Na97WWR+YHI=\",\"GRg1YP8UPl2FVmXgMTa9YNbmJxF4V+Rc47Fw0zXRmAU=\",\"AcsQgO4E2pjppUax6vv6xo17vTGs1mAoGHQuHb0DU0U=\",\"Lgjm639ymd2/ToOtsvVEyOK/FzMUDq4qJMoJ6OGQupM=\",\"FzE+tz0wGDmrzYW8skOpbGYqkiXXDpI/SWYCT/P+o3Y=\",\"EVqPoLAhHc9aBiXne/ANTuyTsxOBHGFEHQTi6Sf5mh0=\",\"EGceJgFnu0pzZQJ15RezDLBA1i5di8ZaI+K6tvwJJ78=\",\"BpexCJZIfvsKgdFJqVmyLI7dGxMOGKtF3V5PKH/FZ88=\",\"DiNWG+CmtuVhb/WCy6MOcH37LYWv9C2u7rqwpB/dKpw=\",\"DmwXVAoYMuSqhoLgwcpEceKtExxwpqvWMzJo85Vo3DI=\",\"B36KKp0NpUHZNX6xtgPulBDUntoxQLqau+G2z7+NTjY=\",\"HvWkf5SRMQ4E6FyFO8QqEiJ3IbyO+ZrPhmJWxvCsKwU=\",\"LXVr2FCGZP25YjvuKfYts2jn6fuML4z4BqICijSlTtg=\",\"C2RAAn4y31vRLkB1RhlS8MChafR+SYgzoDOHdvPP7k4=\",\"EDsxQbGNSUlc441eCrKmkeeBk5eNpYiONmBMUet1fpY=\",\"BFArwyRlfBjFmmvK3MBzXnBmd6VW8KszRoq/ZL1DRkk=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"ImiAWEpXp8VS2jJepTK/OCxnSCEIhwZ1usXT2banGrw=\",\"F40LewRMgGwYC5XfvhiPmefa1xRVT64TZSZPM7UgTTg=\",\"EQy9Bb7tIIBDqxy6imBKvlliWMUW6gxouATS4mKYnig=\",\"K0+bpuLS4xB47XD2oUfjKdHEuDx2EZlR3HvMbSqUTNA=\",\"FxLtzRZi9Nq3i9sIxdIgjgltJq6m2LWi8eoaV13Cnbs=\",\"IOesGYWAUhSEL4EUI2AbPxjIY06HsUMzgr3zl7KLfiE=\",\"Beaw4mfqiEx6dnJmthTZ8jiD8pepxAsr6dr2r4XzH9Y=\",\"Fa2ydVQ/uw4IOhDh7ESLjuv4IYXwqZoGvKgFc38NfbE=\",\"I/LogWkG9fw0npnIJBIwFntQ2NsixedS1kD8MZxzVOE=\",\"CKig60EkIuD/O+9Oj56Y0JNyk9i9lsntgj3hTHpg/kQ=\",\"FHOS0YjFL+SH1eFGUv8XWzclO9X7BOyeMW3kz1EAUAs=\",\"Ghpp1b2kxVlwLYe4/7qzR9YdXV/7oBYFW1QECekNBQw=\",\"AmJluH+PrEwWOD2XY0YCQnRqD7/H/DdaJRo55csSyK4=\",\"BWKvJzx9Z5itF3LTg0F/i6q3/v+j+P4bUGHmlaY+o2I=\",\"InfXQ/mdrMuCI+7p7SZH5rwixfAKDcm0XCaJgidTDAI=\",\"KrdVHmtHMaCywAwaHFetndZrIjmidU9kMo1AIySfMxw=\",\"Bn5rtWAEkGiKZ8owqUGmjxXcl+tBj4zszusdH0mvHNk=\",\"KZsEiCegzGe0TlP7WJfyfFfESO0l1L6IsbgbIhhsABc=\",\"BM5s32iTOPffPDuoTn7zXvWa3ORgNA6g0WGkUSPEBR8=\",\"F2MejFYzVjZ+FgcJYHT80iDQJWpg4ebRRb0kPFR1z5o=\",\"Jb6Euq6oa7Frw95OVXjHluGIisiY038fg16ofxqrzAQ=\",\"B/2BxZSTowbeyfBcASqWwROpUKRM6n3lcq9AHbiATy0=\",\"LXGr+rRaoLPUaJslGK4W+Hy2Cw/Z1Aw1Z+XeoSKBWuQ=\",\"C/HazJ7kkmNCC2tAsGHh3neIRVa+RimgEbtzw8+P0oI=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"IH44MJ2Xpr8C0skHH7jAJDqPZXDBXB3qIR3MLL9F6kk=\",\"CWQB78O0KTlepcGHzO9cVR7ZkEPOOr4Q4LL2wPoNKfE=\",\"JeL7E/QF+M3GDagK8t+Peq6iGqjF6huA7cIiYcQkgQ8=\",\"AU+UJDjQtjCOiDZq9kDlmzXnuQ2vuZSc05X7nts25Xo=\",\"GnMjkYlYaCEtk6M8DE3liTM2McgmDJkfeIW5FtADcnI=\",\"HikIjtLrq+B62pYXyH1q4+6jhMyiIupZg1UMnSW7Bkg=\",\"Be4oWszmGBBBVD0B1lDoMUaQ8zc3I0Eza0+xsn3BvbI=\",\"JSuLXf9eZ4iyOJsuVck55phxkSu83gm+VaC6+fjHpn8=\",\"BRmOSsMVjC8fMOnHMzuPGFNy20NGfohPmWE5a3X31go=\",\"JFpf0x7tggT4m87t77RnuJ489/6R0kozoyB7tvCD4Zo=\",\"BXvIEshfBEgP6UQQoQaygdjz4tVLOeT7ReCl6tCRDfw=\",\"Gv7s18WYzj9ygTeMLlFMW+chCd9u/jEUl9vhKoGeQGo=\",\"L7jG0QALK/EerJSVZGT837ljOicfqLBw9LY+/XtQB7g=\",\"AyiZRYSHxytMSNwfcXoLKqPOU7aks4VYt3N+0hyv544=\",\"BmLwaRMli6+1vfGqkpMyx8l9TESQxvvI55gzX/duEms=\",\"AVhEeNMTmG6wriT100LT7HOBONdJtQceg5wWk69G86M=\",\"LboCXvyro9HEzweIXo+8HxHAErzcAJCH8wajmadkURE=\",\"CYgxgL6J1A8pJAWi1E9bm7ocN2E934S/KMT+WT/PBu4=\",\"G6K8qG8POnPzkmSfZcHuq7V+NSdYgom0ggo5GkZHXc0=\",\"AUi5Xas6eE5vVwQjZaRqAeWIDxfgnzFBv5nFPuih/wY=\",\"IJuQ6SAVoY8TvRNDo02QX8o+1VuIvx7qvT5UKYeghig=\",\"C1DLuYxMFik3lXNebK2aRY4tN/HAKvlbFScq6t7lMHs=\",\"KPCDKCwdw0e7gEn1lYD8gr6/quL9TVwxmOq0I1dlbAE=\",\"Hjz6Bjs81GemnIpiimJ/ryYYd0Soee15aVa8HjsboAw=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"IgY+UaJbWgRZFGUbOz+7QaQyos1J+voabaHxs6usazk=\",\"DtHuZdKyy1Llxy3BgITNr/3I7tLb9FMJqbMa+jI54MU=\",\"nx8UB6OVOWvo79SQkH5xsqHhp2H1WZBgsd35ur4+ww==\",\"JOIsPNQN0B3qjKALSsHcjPL+jsdATwnezbXy4n5PalE=\",\"KX0ZDGVDnekS2bGaUaNPOvMGI4i8kNzwLJWsVfgn85M=\",\"y8avKnKGc2//jEQtIKzOoj+SfELeaMWWW+a3P3h4cQ==\",\"C/RzHGKFAzZ/Ogl5006/xOGzpu6MuQ+OFF6nEQj3exk=\",\"B072Mt9XCQIkeFEaafDDXxZ3GN05Q6hx26vPz6/MuZs=\",\"C/MR1q6XZHrqFSTVxAE5KipiQkIJGGB8hZUHPwAWPys=\",\"L7F6J+XZPI+hmAkdKI6yXMmnWjzCuynHO3xJYrprArY=\",\"F+65dKS7M+w0mtxOPF6RQcP+W1K4qetfVYl/zT8T3/U=\",\"Fsddr6lLE/S69ahJqpPe2kSGcR+SGI7kEIP47w4qGaw=\",\"Ei2oGJrXDjwoEJreAVZvRwOc4qNdhe7i8iEhOdfmqDs=\",\"Jgly9NEWbwpTJyqvID1UkJ83L571F1+o0V+GMpm7rC4=\",\"rdyDyPI560YXyxpqmbnqMUt3UlI3nUooCSlGg07BjQ==\",\"DN/k/3YBhKSx4cffg1gkgww12a5xmZPhyLYZaDQcdP8=\",\"Bst7HX7otxXCsyWFPYN08vHt0cR978QtVg+x7C7ECTs=\",\"CNSKyReXD2MYqLmZ/PpkvQAmkVz7uvI1bA5oQVtCz2Q=\",\"IPXsqTSpIvIyTsT1zRQj+zQgBOJNtkLd4y1PSbAg8Z0=\",\"KSbBEHt0dSpbCwMm+XddPAKQB5uB8e57NUDIV6Lm5/M=\",\"Kte0DaVYPL/+Qee6ip3PoKoEUm4Xo1njgBUqsFZZqj4=\",\"FXF2BCyMNnjmpX23fEIM0qrGZY85Lu/sa9luw9ddFuE=\",\"DW5lcHuUC7QM6Gi+aZ9Y2PMoxjWQDbT3ONmuBbM35OM=\",\"DXlLD3ljYpJdPD+Pel/A+omV/xa3zRmKek8peAM9PmE=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"IKUlyki/UCvKDcmqsCDhQeJrOOxHpE4VgMDRthY1E5g=\",\"HuMgljMydikAtHRL0g9vBtkGY8mkXM+HbfpG/3tqZIs=\",\"ImNfghDLPNWl89bzwF2zX0j03ZnOlomkpJwTlv0CVLQ=\",\"I2hnBpU33HYEX7zDQ4fA1lnydAOPYL1GCSx8XG0qk6w=\",\"KUm/q7CdUaQ4ugyEWlacPP1BWkdnurukPUm0p9I+/lc=\",\"GDTS0Jgsw+CmeDoYF9CnCTUpah4c9s7S+zbkk5n/Ep8=\",\"BCaI+B6Q8CHGRatp6thd9WN+jDXl90faK5NT+6NhR1k=\",\"LL8+rzmtBCfON3cBsK7QgasRpNhCWl2F627VReAqPmc=\",\"KO55M5xXliSRUkM3mB8Dl4MEKmG6RrxLbSeELOJT4pU=\",\"Lcaw120zLFgrwiXg44UqhOZwRBo0o1JxGD3QcbOoufE=\",\"B8+GIPtlsnY8SU3aAtRUwy2GkYvNlyyBr4iW2qLiUiA=\",\"GdMwUDf+bV29scLPB9vM+7N3HddFoad2An52uCnDjhU=\",\"Lm8ZV1sOkXwyW1RVv8l+ZbCA1co7DYZqEzFe/B9a+0M=\",\"HnJsCs1uFp3i7urO/xKOdpG31PqKBG7UGoKFY1R6MnA=\",\"JSekKFBNj7rRqVRR9paN13UOm4jrc3CU0NIoBupGG/o=\",\"HuDhUb/8r3Kqlic0gYtTCGr5pe7q+CH6haFs7t9QBt4=\",\"EzLY6lFCJWQ+4mzxTtE8KTZ4DTsN+NE6DYDHWTM53Bo=\",\"BnRA0bXFweN5IVg6xggdfAthRDBGGrvONEX9yhwl5Ss=\",\"AhfhW2i70NcDKLqS65hIUzp2+hdwFbvhZ9lkjiFtcvs=\",\"HV9VUXFn6PTgeuHY+wJbqvtoBy8Oz8OcKraRfiiD8AE=\",\"HOQxiUchKTFzYEtUI8874qoqTGAiRMozz8R0NkJh4hk=\",\"GHDN0lsAJs62you3pKvkyDXMVPtdSivcq4N3duSkHzY=\",\"E7bEyKl5ZVlxjXL/MtBazShdTjaySg3aCRgdzAuCEiU=\",\"Dlk5jLUMmV3flGmJDBT36zW20f8htU+ojXUQUYDMnIQ=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"JHHN8SjGVwAi+heGo1s3lifN9KHPDIiM3fgBlvrXeGQ=\",\"Ht3IwYa1lSI10XmAHk0fVSaybnLWN9SC00qvis37xng=\",\"BBKHWW67ZU7CcDyyiDIMeLA+JSqY0wS1xnDWqfO3XxE=\",\"LSfN3WDyfpMXIK0gYzouCqnp+zTlOhySRJxCU5g2zIQ=\",\"A4ZGTiae3SDNSr7bkuoIPVJRYz7C7UC5ySmKawPQxH8=\",\"B7KNbzgef7BUFlUz5sIr5yNeAdwhEcJYbIjLaxORXao=\",\"JaUYNuMtMRHB7zpbIipFqGR/SRslGg59VIqlefBN1TI=\",\"BBM8FLs29PAnNRRHA882sObq7DWiOyOls9e7zM5ynjs=\",\"GhB8REF6hf5j+l8yvq4RiPfvnH6Yh4QOBsQUQgZftZA=\",\"EZY6f49iq+h/0OnwWb2iPlbqBE//MWcsFmUwlgNdbmA=\",\"BjlCKB2nGHzxFVITMqVIDqYpd2RUDa816ET5qdsU3x0=\",\"KDIxhPfQP1/bjFVBYpGg8ok/P49wQ0X9GXM1urYOYxM=\",\"HV7jwxS8zQUH4OHz0izeBfi+70AGvdGW0c2XKgDzKLU=\",\"Dj5+G/d1USh8s0NqBry6E1au6UlQfFDacHX7pwJZBV8=\",\"C9sbp1KIrUXGU+ZzG3P8+MLloGRSp+mxBVNJyhuVSo0=\",\"Fj77xTE6Gd/SmbT30krDb8CdrjFr2q0i8uc1SJBIezw=\",\"BlWi7pgRvkE4uHyurENpMYe6cjpKJS4f5apIHN813PA=\",\"Ihq3ApykHLNwP9Jv2/2Z+D2mLj1q7ZxxX9pJPnA97RQ=\",\"F+BqEeR2arla5pPvd74v1agWq+uK9I53gSrzGpvJdVY=\",\"JP15/4aagAB1U/5S2uh4QdJxsF00ZeIWMul4CNtlink=\",\"KTeWTLX+/1YVbAotNufXF/UTPFIxHoqSUOPlOMbWouQ=\",\"EVtUyllyPdzwuLcuAUo1Mr+5Rh2wDIe4Bebrb5UOsvs=\",\"C4O6WVRJlcEJ/mfFnhxmgt9PCpRCBEklXy5CEl0VIuQ=\",\"CFbOC5xHJkJWOlj2f76EkNIT8eYMhBU51lk85yyMqnU=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"EjTN5V8c4H6K3YkZ3CeGwqLouqBpn5MJokppd89N4xI=\",\"JyhRhAZFPCH4DN+8WuWn5bxmCFPDnAfwj0yki4Zv5wg=\",\"JjxuhwaBpWiHmvcFnp7ubCEHVFd1pwfl05fgkLtAZoE=\",\"JkuRDF2cdnfKJrAclbLqvaAhVdI5p1JarMnnw6GzEQg=\",\"A2JtVCXxluDsxiXJXK+ZwXiKsIgm25nPyZTfwHz3zeI=\",\"KFt/yGQMVkTvWs1266Y1eISQQISI1MHH/l4VSIKIWyA=\",\"CAbf7TSp6DfWJpRCoax/Brkym8kbhBZR+GbQAUV6fkc=\",\"F9UB0YpEPEWLwph6xwChZ5NfyVwLQ7K8MdPR5m9PQYU=\",\"HCZRRNhQrpRfiW0puNJVWP5XJDfPuyPA0pdO11qERsE=\",\"LTSfyrMX4vEEhnKLhbc/1V755ykT21epbeN5nXkzGls=\",\"DjsWCJyGx1GOzL8+e11sk6f1fdZj4xO9knhZm67b6NY=\",\"FoQhhbChk3kjmsb8lXb5ZiMj6cyxnHPKVR2uWiBDY7o=\",\"Cv3fag/1Ys+M+DubSqf3fKWUTcID5nFu4TaUe3d00YU=\",\"Gnub8CETVS0iZ7Zqahg8WL2bCnG2B0JANMokn0gFau4=\",\"GyktuOst+VXRhgROuGW1PDRYVfsE4OeqNHKPOjPcj2E=\",\"EWa8JUjk3RpZeCfh/2uHO4wCkFZzPCsVUkWV9mRvuaw=\",\"J+95Gx+0X3OVDKMpetLv9mgWQkDKD87E1QU3k0eksy8=\",\"CU42cS0+A4e+I/To0uiTIzPCtbMp/wGwve1kKHWqjYw=\",\"DDy4yUUdxl4rrKQCEBK0EHsSd+wejPhWhFI6hvRFLKo=\",\"DBYGbWNkE9ulNA8txYZX2j0E/U9kkoC+0q1sQ9uiJVc=\",\"JvU9s6Gfu66DPm3FBzMyZRJTG6ysBeEUK1Fp4KbzexY=\",\"F7+2ZUGP7A3dZJJDw7d1Fekuulg1VDfszjmiGz2lZd4=\",\"Ie1mlxpeDhRRqWV5GOK6zCyyRNLxAeSocLfEBADY4AQ=\",\"L8ctNyNF6aIDRAVLEw+RzDAdQJvS7eCDgLHSzJKWoKA=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"JCtOrf8RxtPVT1NydV02yYKas/GtNs3n+tG0knvP338=\",\"CF5tUgW8UXY0FH7DAO3PTY5A0xmyd02oWaZ37oI7NHQ=\",\"14V/jC7x0/bMC50mkICoNS9xbO2ahUG1gEdXCTHJqA==\",\"C4p59NY17DjBFyD9trypo35O+Lv9PDp1OBXsyXXGsdo=\",\"LVgfTdT3pIcPaSTYzMOurSd47x5t2Tt2b6qJczxXU00=\",\"AmqCqJrDRgI4RAb6q6wSBGZAiAQrASxiwxLRBZfURz4=\",\"EZyc4BaN7+6o6uEIW1eDbbKImAGWYehPmIuwxd08uxo=\",\"H9xJ6sEookBXEo2S7iuK46KNKuMx5T6JipzEuqpn4UQ=\",\"DmN5HtwIXn5o/oRKHiiBdSFPU2l8RHoGr2aOuvliTXw=\",\"COipXXLIsPVXLkNM0ejymiLHoFG+7+OLzByMZwIbbNA=\",\"FQv75lHLEpRSWBwKwFggaJFNa2Il7uVPPQQeigTulZ4=\",\"H2exiMvdyd/nMihVf0HijVYutxIzOZxRoRILb2qoT+Q=\",\"A6lO7Ds7ANoSmhMFmIPVa4nQKHaGHMr9Z38baS503ts=\",\"CKA6mSw5G+1HOTCOkOIDnK8mQisPwxSEEinZ5l4pMFo=\",\"D122i3UatinquIdgBVNDduecTPKjwM4sdoGppneHr9U=\",\"FMHPnuMfwRxGEfbe8JTmko/xRpz62Stxwn6wKTiZncc=\",\"HIQwFw4NJ/yFI8psWHjbcXt1E2ZptYsFgieOS2pDIH4=\",\"AuqrvpW35tQeI5rxIsOS8sikIjCcqP3z9z/RjE4ma1A=\",\"KLhfdGvAOxpkl/moX6B+M3tmSo4Bv5aglhlc3Y3P140=\",\"LuoJDd36ttnUX4/cAeBpfbJX1kgezuRO63NjEKVxlKQ=\",\"KUYcz0Sbn+OkizUnobeS8xdhzoihKhvRhdApiQSMZyM=\",\"LR66WKcZau7H/2DJIqajfSOL2injV451SUD+Vfa0T2o=\",\"HYSIUjSAA1RU3UWrETblW0jOcp/Df7O98HzUAePfmGQ=\",\"FpkEv09zSMzTQ1E88DjMVGzRN8dAt3099YrabN1JspI=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"D6pVXBrfdx7fobT2enMQjHMlvgNMvCwubSRVTmLv1zc=\",\"GkzqrlfenbsZuzcBrgIbeyRvt1UKpQXfj5W+dCKTt+I=\",\"ItjraKkG3K112ozmL2djy+2oAEc5hRBXllMCaW4YWug=\",\"DPyCqgiyv3+vfeF76a23WTicOYRBvdKU7Q3CXT98T4w=\",\"IWpGJXfSMRkGBu8pIMY0VQRbjVH7xpgaEDpRNTNfg9w=\",\"DmNxWsDIlhQoFJPhawv+bREZSzbBJH4ig4dx6x7HZu0=\",\"DQJBBureVLn4tYdLx8NJlIc1Svott9874alxyNJAUmU=\",\"AR2uvdkZtWIuKUMSpeNBIa4zEE+z4fnona0GaPBRcVg=\",\"J0oBmJYeDJjqD3X+HjjuXlliIlc41sjtzdViPnsk628=\",\"E21Jg0hk5CkXvOfbsOQ50owgB/vwm+rceEl9HaJZO1g=\",\"GNr/Ar6TMYYxmuG6uR5CJWxbVuo9LQaYGJKUgo4qkHY=\",\"E/ut+CVdsJrWso0KE4dOhYb6VlFV2iFF+A/OQPDBdfg=\",\"B1p2FSy3fzp067ZKi5SdAyouHvfvDzX93P2JRztcHnE=\",\"HRqdPv+AefL9c5qMHsGh0sORvvoVxEl+544symoydJU=\",\"KRMqfW3Agcxtelw1JPKAXJrjxmp94XFMTnWp7QYga7M=\",\"DBRXtNxu/W9QbxTSy4Oa22mV4lZSI63TB5gBgYorO5o=\",\"BmQGlWqK+VwvjoT5dxYQBSh4MutIYNDjM7wqZzi+QE4=\",\"Ar6M5pZScsPqX+8wXYAFaXKwzBDMibpW3yNHNqgWiJU=\",\"DGJMW4T4aXTlmS4r+ZqnQG2wv8d9t5nmgM7tBRV4u2U=\",\"HJ/HsHYlWx3USj93vhK4wMcTaIDvOfAqoAIlP/gIqrU=\",\"HtV1KSAFLWbsieZxlluk71vqybmCt0BRdMjCz2K6nCw=\",\"EaednnGBbS+QoWgTWD28soasGfgQFrAf+kMYvgdJl9E=\",\"IzLy8CMeGl9K2uJmGkmIx3P1j4Bq1zzsf6hBAyfCnvk=\",\"CSBBzTwfJNyHAAU7bQtNEw+XCbrnHsOX0eu80IKB4eA=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"I0AqBKEqs3drFBGbv4XNpOiGbdHIwu0gnFz1qUgy2a8=\",\"IfbXxswHUIaOAxC7in/gK3CvrQIp/a1cXPOPcjHYBSg=\",\"CqEckaX1R94AYa1axka08XWA6YXZJtxIMD2pZd2ZRnI=\",\"AlQtUfJp3lQfcEDX1wf9TYoEXwLH8KZi4EWKvRx4fPo=\",\"DpNntG5riTY9yc/VI/SrtNEjoK+e3dXjVuY+PUkJJUI=\",\"E9Kq5B9rHBtb3ZxXbHRYcJx17revIv4Lf12Y6iBgkAc=\",\"GaKy3FmIqf/dRYOE3V4M7nlwr7OMGCP+iX5IX82p2tI=\",\"CN3c8ySQvpTnvjgQXnFzgveWbe7828Z0MsMSuKqxWhs=\",\"GjCsOIngRnrSF4+9hbk8zEk1ZcN2ICmC3Rbsm8ztJh0=\",\"LdJHDXyl5p5XKOdq26BE6CFCWyRbtc39SBMrTfXzYuE=\",\"EEVj12JGS+E/UQUNPSEBYu4x5LFPDjcgKq2Z+HI/CsA=\",\"Eht+kQoMy05NXyIGKM1kwoRvxfRwp8K26jgXC50Fizg=\",\"L9Qj/l0Ymf4FT/G5aE/5NUC8OWWJKJOIaBuQ/LjnbBE=\",\"KY9zKhqRJwL6TECQ0Ahh2Zu9TrgAsgrN8cnUpsgiamI=\",\"JvVs5h6u0QKUcnAU64itqZ/lAVyRFwXPfte9jwQmnao=\",\"DDFut0eA3vTHwIQg0aiH0/O4Ao8tZe8+GIIrqXKlDJY=\",\"HbXGWi1mnJKOgsK6eoUhPQOXbnNVvTq6kERMjY7LsQg=\",\"Kfvj8LXWk29OQs9e0pThoY98WX+u/QCHZT8G8c185V4=\",\"Ez9TdzlN52ZQMkF32JXP8RtO25AnJBOGad9j0GQlQnQ=\",\"F2LmqZBlShjrFRcahAMOQ6k0gexSC4b/ZSYwVVUdGcs=\",\"K6xi5k43SklLm6NKycuHLM70KWbhyYydEmluG3ucrw4=\",\"HcL10ZKwZUYeQQo1O26e1I+N2aW1ng1FZ63Ryh7bv3Q=\",\"HniTD76kUHDcY+uC+jtE/riBGELIBA9YRILlUpucCPw=\",\"EWHdg0RbxKwF6I+CttSzldy3vAi+9rwDlOKGDhuRpF0=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"AthDArLxzjaQM6pd5buEmPcYECZCY26pihPZ8vngPXA=\",\"OqC20XIsLpJwePDQ0qnhZRo4ewpQqr5MPp+eKc5YCA==\",\"GFGiVSDEfEBDmr8h+luQB64VV6DXpzfr02ki4ewv5xM=\",\"DIgji3vFgr5lo9l4CxxQKosqa7/PY4Y+qYjkyvbnV2c=\",\"EjHf5OocYMJjt6f4ScjYy0LFUGFht/qH5SfpF8lCxeM=\",\"LqCEnyDW/yWMDxhMqAV7/iNiRd1LhkLGTkLvShqdj/0=\",\"G6YhSPV/QgEBxZnuygq/kwRk8sBESsuQ0vuW09ti97Y=\",\"IfSjBm+tCwW8abkuAM6hMnjRpaZ0NsHz8hOabueby9o=\",\"G+TG4D0oB4VNI0Ny8mdYEFixc6yLPHSDxujcM1J5i3k=\",\"Npz51FoVYzz3XSI08QFPYNGrMMyiGw/GCvPA+6bMBg==\",\"JRugDmE2vZkPTbdFeiffVObmqYZybLAF7iHhc9ycmCo=\",\"ApBGWqIZxfOfx9xbIQzoBdcNMTfEOrNUq62scY9TV+E=\",\"ByFT09kwS8sSHhasQ7o1LjSSqpJk45q9CtUAADssGg4=\",\"Ce9u839fcDIpx8UXGlSp59cBUatHtjEqO1kiCMGSzC0=\",\"EEG5Q2Jzvs42v9mAE3IlHC51O1BIWVOQjDW2OXnZ/YI=\",\"Jq/nTSu6p21WilW4/jXwLl6RMoXLVnitYxZUygPhHyI=\",\"CrE2oCmKS74NUyUNe+EXkSOqP3OQw5wI12+svPOH77I=\",\"IVTfYUOPpyiFOx40Bkvzu5iPNq9IrGCX0oRaTtkko2A=\",\"BZsS2DVjWM3zaQyiJZRHpxR+Dm0z3V4MYik8H648cFc=\",\"GgFkbtQFBd8+vQIPeu+y380rGU1pf3jrLGcGGT4lx4M=\",\"JwgOAPV16p387UVnR1B7VaBhJhjVN3ukdFsaLAB/xKE=\",\"A7Enge6nQ62XgDIkO1X/o8I7qYD48f5I9y7OH/4Jsfc=\",\"EKwsn3f81BTDvqms9zCHM4krGALQYfvj5ax9k6Q3yFs=\",\"DqdLJjkYW9qhdsKF9+Z05K3gULsIqh6q/goFFtWBRiM=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"BCuR+YAHv638N/jHvgHh5tGloAH0Fj3sfm+o7Pfl6cE=\",\"BPAZa0zEov0ktgPKZfpOsjzkUjtpXDTpMjofVWk/CdU=\",\"IGh3SfnL5q74jCe2vMxAIEJGpnDt53Ley6LzSmG7gk8=\",\"L5A5pLi0qyJ40P3Es1Z5Z4sdgkOtS7gUuLe8PhuKS0M=\",\"BgEkB8zbT1rMwmiIoJTjV1CqXYh3XNygqYgegW/iQPU=\",\"DjUEbEnMVqfshGMFPhWZJb9VEJ6Pz/WMr/CHZUdtgj0=\",\"Ctg8Klh7mMskDz/ux4xleEc/mb9yJKzFRXkwlDM7cA8=\",\"C9okJUcz17zWQu9HxnMXYapn4boOxk4DYJ02UuSV/K8=\",\"HrBKzujDJfr1H2rFMgC9VrBS5IgGvBJRPBZekMDqdc8=\",\"JfAJJ6d7L8iuo+PfWgOO+CSb0p5/ZCJSncznaS79Y3Y=\",\"CG/0ipMLWAfaz+Q2/MZ3Zq1CU+NSkHwZVxJ9akG2OHo=\",\"ItMRA7IaoLeRI1zpDvBs+XLIFlvOPGizcU+JRGpC8mU=\",\"IfEL72jiuENzMOvadE4sPh8mqSwzNsfeO2Raj0Np3I8=\",\"Lj7Yc7D2/3+svuOhELq6ivAw+8yu6jhs46lguzGnGVE=\",\"AW2GdRzUXTe+2rrKatdSd+mGTT9tMOTAzC3SWprlja4=\",\"A9BZdk5arGhbWTh6pISWDtTvljmEP+MI+Mw97ofjMU8=\",\"Bj+WKmg5CoGOVFmV0rPVP4oKXwqiNFHm0UsIUauLtXM=\",\"LX30hFlUE/g4Ye0F8wFG+aTv1GsLkPfKlEDjDCfJuTE=\",\"Bdlm4lz5zul05AXIaqKht65j9aiSjhNuEiSdrjyxITI=\",\"Fr2m60QUX4cOCBi/b2CgaCiKXvI9obwmTgGhH8HgE8E=\",\"KH8byATvUTdc9yC2gFAff/HJfL6YB0zMIm0YvV4Ys4E=\",\"J7Ht8AHjoKhWK5kaJ5CltI479F8tY3rntfG6emrVgi0=\",\"B07hdy2GC2rQmxbYLkWOswUiiySijHDF9pCrvt9w1QY=\",\"IY7z2L4sTOvzssanXd+Y5315cpoPnWsRGsCJXr2rprU=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"LhMPIao7yVLQC6JrELZcH1XJLzSlHg1tYiTS2rokF4g=\",\"Hm8W22qXo4THFkczQA7xQsQd6wQFc624sPxx78L3ZGg=\",\"DaZiQqai4ntRndIzXlWev4M0vLAGFN/Olj3Af912EvI=\",\"IB0qRw/bJAptQAjP3r1LV53zTCc/+2alLsiZYuGlm14=\",\"BNHHCTIiHjmDdW7V1co472A8r/LSFo9fk3wVEHdbDp4=\",\"AqQ9t2+0KggjdfXiHE2vOFPpxX2GJ8LK7i2DfuhX/G4=\",\"GI1x6Eaw5jxdZVNabRIalkjZmvcvcsPzi8M3UemZkYo=\",\"HLTXfCBRfM80a5JWfKFaS39weaFQo7f7yVtHTSwH0kE=\",\"Lear2jkleCVMbClJVZuFHKMS5cCY6he9v/iBWsQhaBA=\",\"CXusljB+js1ClA4w2b3ikEAlcV9d3I1iN2kcNoljWts=\",\"Ee9uAh1OG1HxVqHBhj1JfJX8HfAQ2QaFnVEKLC0B5Tc=\",\"BU7X8rLkz+oupiywE3nZQEFIHchelM3EveCNqbG6V/o=\",\"Ftg5CwujF0FBI2vyEoNYiIfOPrlmt9Rc3gZNXLKjVzg=\",\"LbhkAJn65LKbwv9zQk30hR4z64I7V35DVMy8sTku4K4=\",\"HeICX0vri1tYrL5hJqCS7ApvOmZDJaiOmii86Jjt+Yo=\",\"IaUUqNR32SowgJUJIiT1Vir0HPlk00vhgelTcFkLV4g=\",\"FAziyWBeMVduRk5sv8jJcS7I+i5G+XQi1SsLZAGqW1U=\",\"IDE7InPbzyJfdNoT8+DQkJ9H535T6DPkoS5Dnhhdzq4=\",\"C4JRkw5mI7jAYhY9lz7NsPFxYIwSbH20eREWYh8oaao=\",\"DQs4k8T3DRYXKISzfWJC8HujnkxxgEYtvtF1uw2wcUw=\",\"JpF7JBoSOQGCkyBpqZQgwxWA7PBkSan+eHHjGTzaC70=\",\"F5u6ntC8GtaUKZDkPeKrzS5wlNfZ+8AtwtgrUNmXDko=\",\"IYShua3qSXV9WdDBfDae/cBE8R/6FZjy879L8dx/rlg=\",\"BloIXOxw7VOp1Tgnx3ZpiSGcZHS8XUFb4XBulT3iAnM=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"E+xj3ZAr5wF52aGQ8uXx3e0o0v7aXWrEyZFMO+3K6Qo=\",\"Jy1LbCHi99LIOyhYj1sPRikZVUz0+qtLzGaKuGyHfuo=\",\"EuKbIKUVfxFSxBxOgyKHuWO2x3TedD5NPXpVVMw5qsc=\",\"LHNSBGaQXJIwqmloxv89e+0xMM3OtovFok5R2oYcEVM=\",\"CzcPlQMytwyiwkfiNJ0uLiLi1KT1Ge/tYDlQT6KysoA=\",\"HFi9km+iDfoO07flP95OTXvE33jROWn6yZndhY8N9ng=\",\"CdUFlmKOAh8mSYOrYae607zezJ1s0+xG7L2DurVptmo=\",\"CtPdjHkNt33zWqeNyErTVx8KcP1wtewC+2L0pFm7fXQ=\",\"FU7BHeC6AiYiszqRg2SjdfRjK7vTpsDHuP13w4MVhNs=\",\"K+3ykIakqA0SXfb8ppPBmKQkImvw7qy/TDmQt6wIx88=\",\"IEupSw4aWSORyfs5dwHGLXJLVdKGZf85CNJ38nKMN+Y=\",\"EZF0H8D8vfWXazKVOt6jzwYqLaQqMX8KmQdCZWfXWc4=\",\"CEU6u6GoEs1wGJBJo2LyaWCrmGQOmCM6l5n/muvBW84=\",\"L6oWo0vHZbgD/DIOXJw9YMx6YrxDF/5ZlstTUu85Hwg=\",\"EHOkwTQU5PR+PdWPQRuG8SabRmKifRU7LqeX86+dhA4=\",\"IIJ88k2qkV3sygvgAY+V8z2hItvJ0xiQtFgxEyKW3/g=\",\"DBhL4UV80/MDcmcQObY4lOwYb3msEtQVXDY89g2pwrU=\",\"HRA3WFyMAC5PpkWEa4OqRtQYp+xHXzajELXpPvMLTxk=\",\"G/vmLjcUV0vtXIkVzJE+I85WVNIX+okzIIzubNKnpzM=\",\"CayKR5aOFH16v8v7gOR5paqD7DL8miH9gCd6BeNtaQA=\",\"Bmc+jAknSmsHS6w5qSgChctij0yQ8ynCfTuh15scwX0=\",\"KlEyKad6NoYt7/pKJPTh1WAtUuert3NMtqW/sAahTHA=\",\"B6qMLfSiCD5GFps+JPstCphn6hcQOhnBP8CPgyqhfcI=\",\"ISx4vwsDyI/haBSXzqGwMGTIfbCqJE8GHYE1o2UWgWM=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"A6WN3kA2XXoCUPx1xnRUMp2gRoXgSlG/UYVJVKavkVo=\",\"Bw51r9yz2AAKtNRZ6L4cTA3KwhPjfDRD1dM95ZoxoOE=\",\"HcmbgULnzIHsIbx+Wzfb4rKeacKQxsZ6pPw6fU1vF9w=\",\"LxYKNiW8237sLrxqJ/bTquqijpq4XfHSwaNBJtLGSKo=\",\"GuQTL+gmHK/lYoI9Di8FnPeRcgO9PhrQ1xtYoPCASmc=\",\"JNX0vXRB3UzLgJVey2C3LmdkASOTcK1SaFG3sjWICf0=\",\"BJT0ZkjumW7S5/ZUrmwHIWwJC2xPNZnG6xiqTny3Yek=\",\"D19nr7nFk0otZiUyp+y66QrSYN9Biedvcb9RzmYAqx0=\",\"E1zSDEaqGkKfriK6xUAHHUuqWqH3zGYlScKhFeGgFSo=\",\"ELFLRe84tNO9Ekfi2jpl3+KQ/QL/GhXKWYsFVI0fk8g=\",\"Ir+xlToQIvIfFzjIBn0m4lDD2m2VDwwXompCD4mMFmw=\",\"It0aPvytqWNxxLkJ6MQtxCbg4EDRUpEL/6zKHsncS3I=\",\"LsnjVLX3QVBX5peCvXwNtHey68RZCSVdyQ3T5voVcXM=\",\"HRdtH0A7SkTlmMbcNP2vnAjlguVCdI2fGMnImIenygY=\",\"BX1lwZVaxA7SFdOcMLxh0BXlBeMhL7sjDMYcr23JyhY=\",\"DBbK2zGRdzEX4AOOj6SMnCALv+n2E1mXnJeN6NrbkiA=\",\"IoNUwkZntJTSzVPb2F7vV8CzYhIoz8de8I7hH7MxUh0=\",\"Edrgk/sEAIqdmU/HzyfQnsDhnsOtHVSLXh0gXpfemac=\",\"HiTYozcdKG1qhzWMas1nV/cyvYFrbHfiGT9FbCN/ldM=\",\"FPX6mUYDEkgb8rLGCC5frVrDZZ61oTl4sr8qJmJ9B20=\",\"J094hk6ssymj697zVL+6anpdIKqMpXkXwB1epXv15Ek=\",\"Gu8hl7KjkwpGbJ8vjtUSr0JO6Zze3w2Tm/UyPME93Io=\",\"JB5eE0B75ODhI/kQa6M0Kmh+bJZtKIs7f+2kr1MqQi4=\",\"B5FLEbPLk3KD7jEp294kNYJd8e1k12CmLDCuvw6m1SI=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"LvZP0ZRQZcoS9Ir//nUnreMomtNQ/+ncxRsssFiGtK4=\",\"HpA/2JdMoO+XwYfjCl2s11FRs94mFbsrgypsgYAegus=\",\"IOzxRAFIwrMfmjwz9Z2oEu+gdVUHKEZlodXUvP5H74U=\",\"FelWq1ocWjV+neQJoZOGq7rDe0U70d3RdAAAebEGNmw=\",\"DeIqYf1mB0QdCJQmR3fWYLz6DNq50dqIfIHnDHu4974=\",\"FKGrRN6FRhhZBewr+36bDIozAmamL7pTuMU1bLXyDnY=\",\"FCfBizS5sZYtteE5N6O71hoq+emzdg60KuFzlLnGT/s=\",\"J2sIdtY+MWxOsy27ZKT025mqsTv/bWZqqYWruk6cC3Q=\",\"GFZGjN1Inqdedd/vjTNTmvs8Po1X4HJVVIlzGcaSv0g=\",\"I9oi1/rfjOB5RNoNGrT0/J4tK7K6UJCa2ZyG9VbbBIE=\",\"HEH90PX/+z2Z3bOitn5ioT4Nu1IbtK/tvFTH/aNAa/c=\",\"Dwv7YonXbw7rqy1LX9hU4DDxFnLI82IzQpDgzR+foFE=\",\"GKwzEw5gXfAE1oLQj5sWuIj4jD4VYr8Iok99JUyicK0=\",\"K+/fsZLt9yUl6WzTruOh5U1AaBIaDrNNEGTot8jEQmc=\",\"B4Ofo43cNTSESNkqkSLYS6lRzO/MiOJhhxLU74lreio=\",\"K8NbK1e8myvnuKcoElQDxaeML01kXaM7QI5sx5Z01RU=\",\"Hzi/JcosZ++VjT6SpEw7S4C5ENPhDD0O52jyhijW18E=\",\"Ac0R8EWyVzffkYOEP1+gH3tasAcUEA8KBb/5Ny8GO1I=\",\"Cn+HeZMT3yxe3K8QmD2Kv5OEZ/pd90vP3w1R7+ykBsI=\",\"BxjUFrIBFFUczeJ0fLaxXoicwyM/rYozlGWrwyc9rCQ=\",\"C0U2iwz2p3rG5z7SP5TV+PuQp3Qhly2twNcMF845zWI=\",\"Ji2sQOd+/uWgc0XGPnfpRqpddkBAjfwN0PJ753+Xrps=\",\"DqSI/B96/skSJnwZMVQSwQdUoIDBGnhzyk0CeTX6i4k=\",\"KX2xtvcXSWls5I/ghi+mPV8oMGcVoZdi74upFbn8SaI=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"FWyQ/0+VXg/JZyI1JMrWYI5NnMhxXCScNJI1NzDVALY=\",\"H0ZE2mTACQXDpuFa2ifPWTmYV09u50ToX6lyM0VjKIY=\",\"ENTljtbhcIlmHAvM0sRWTfEuvWxKiBFVSecUdJHGcc8=\",\"KteC/CXE8NtSAoD43ZKHH3vtbQ4jM3023yFB+93XBJ0=\",\"KSg3FiXW3U3jEQKux3JqFdiN8NoXPqigR+RuRWIWLl4=\",\"JmX/npUgTA66cQVW6R293sn1Bg3dpuiYoGuQeNFwq8M=\",\"EQ1eZIiDauS8NEy+JAb0lNzgZ62yHWnrlrQ7twg8Cxw=\",\"FvcEXBz9sCXZJrlmv5lHKO+Klkes0gskXqHEHsB71wQ=\",\"IVM9gTCrof2mox1L5F47byfhFlzHrPBi2RcKh09EVm4=\",\"KbbW4AZbiu3r0gSP/nS2roVzc9WDre9XG3702ME3bL8=\",\"K9DSntJ6SePPWAS8UVR1vSSCgwUwSF8lMnn+PfMTZR8=\",\"LlpbwXn3j1STF2BfJxZUu7cn9bNfo4kYowg3SiIbMPk=\",\"F6o/uNGHsvFncTGcCJDMmoFMT+88j9kCd+2nOn/Jweo=\",\"D+zvUG6aHFNj6qvS5ddf8GZX6kpwFXe8wNMc7Cgubpk=\",\"EE57xctSw5SdTO1TRkqiXL1BknPHFZcX1CQ7i6PmYok=\",\"Li2Hu9JknuPX/rSmZaZYQyuYZMmk06W1K7KBP0OvhFs=\",\"KnN9CFweytK68eun17efdvM4XsiM3w2II7xyHn99XvY=\",\"E0/+8ETW20Ln3gnrMVEYg5HUpS7U3xRXSfwgtNCv+Uo=\",\"H0a0PMLlf7nyKuts1snWcc/W+gQ3ArYT895s9dzUpkg=\",\"FCe5RsqTkVnh825qTojYUMhPAGmBc9je0t06ZJ67gR8=\",\"IO+uQi6qQnKiVdAvgMMEzrDrmdvnDnNJAc6DA7fnWZY=\",\"H7zT8rWmsIqfg10sVu1G+yubnwAI5x+tbwcswj7PTnM=\",\"GrHZFNhaePvn2wV60CUcsQPQ8f5PqfFWW7He/q3/tWA=\",\"GF08u705e0IC5tLSOlR175OqriXpxyCoSRibOEdfPrs=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"CaMzOKgUyk+S4OsBRVEBNtJ9GpcOhZxGG5A1BQbA7HM=\",\"E0kZrLxocqiGUnrUYH3zKpP41PhsuxXMzTiePP8NVZU=\",\"KYjMIx9ZoUJT6XggLhkOYJBNNkGBlgDuxo47rVjmMh4=\",\"B6fn4CR9+zJ4V/bLmyz5EChHyMFiCb6BfMiYj0rucx4=\",\"AQJBXPwuhOO1S2NqESXFrMhqwkFKoqSjb8pRwJAumaI=\",\"EgVJHf2pbc100OpkydBbdKfrC5jMTc6XLjxlBy7HebY=\",\"Ct743RmY8H6/hXNM0tSAw4Czzu6cFmmCf5WQ8XZ9wUg=\",\"Il+Zu+lNXJPuCRI/RlXdLWvYCspiTk2PCgZAVOIyhI0=\",\"HowZJl5lZRUSWOoRIGtdipNWy2FHCcMeQWcEbVLboUs=\",\"BFLLz9TR3jWoaahawQEwgt1KwUcOQwRS1KjqFTD1o6k=\",\"KbsXmIai5JYxRC/K9oHnkKiQPJbR7/ZkeUXtYm3E1oo=\",\"HgbyRukmtRfz3gCAZ81ryfUujTgsRYCYvtjE0ssYPtg=\",\"CSqGJOCcwSf9fRoyqsg4PlEON9a+yj+hF8uxNV5uuK4=\",\"KeMcvST6neXUAUOEkvm5IP+lat73Ymh8YepWKJPOAuc=\",\"HUe7Zl0b+SVMPqWb51cYesvFBLU3gHb+ApxFcPg1ci0=\",\"Ik8cksDD6E42AiLECqD0MRVju/YryfJVo9dkE3iiy44=\",\"ECGgmUYNgB0XG7DbHHlyATFG0bCWJfAovbVSQtjFH4w=\",\"Ac1nyX52S4CX9ixkAvzNtFqb0Y4LtLQa4IwqJcJ2Qms=\",\"Dl29wKsaFBJdGdfu2cw2r2vdX+B/j/JphC8K66kCwqE=\",\"FkngSJywqjhE6X9hu3afA59guWOFJECONCWz8DC1sGg=\",\"LYYR9p8n9ZmsZyJ3wfB4cAW2/jwWLYNmN/wciQxscMg=\",\"Gago3pkvO7hmUKip84RP8n9wthLhWBcPgbfmtvTq5mA=\",\"FXpCeBF2F1e+wLLezRworLqI5w6OKzp7U9cypHFXKYE=\",\"H2b/RfF+DsVpDN/5nBrl0i7bsK4SqrGLpcGtrls25S8=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"Ccn6AP3c9pTpiEUhKv4EBIs0kj1PtB0F+Z0klVxgnAE=\",\"GsFU/D9CFlhAxUo1DYJDo6KPVf0Djc3/YoxS4X9yqpQ=\",\"AohZyyPuVcJ7w2Pa4mSgSUrndhe6kvWV37sUVKomeO8=\",\"Af0Xmmb9s8sKBukNFATFDDjSusv6AwvNCybmrkVOP18=\",\"CH3HMZ9OiAxxNjc9E/1v2y5DPzHgme/d5W3l+Cl6abM=\",\"GpO8MBjsfTR1hj/f2qqwIz3zfD9tpalmU4sTgYwVxDo=\",\"EXSmYZRzmFBkTQWpArJdGIxnrHv6gW8aO5tzrJcxxAA=\",\"D96ey8xvuKnOSQ6Akne527cXNpZBuW+Es926r6OdFzE=\",\"IdSxDS5XenUaEoTQ0HnQZva7MA2zWpKJxfXrOeHkrfc=\",\"G0kSB1ge/t3fzfIzdjJLmWnjb2uoAY7C6wVaXdb0+OA=\",\"EkkOksOPwmkxG9wazSQQUCrI17MzTmWrZEdR0cbjuko=\",\"A8VpN1uUoCGielazTf3dFMAff+6+FOIx5T64EcDU/Ik=\",\"EvXr5qQ26FUXeIWLtT+XgEOesJ+irEVwltcVjnrzr7E=\",\"KBfcoxXn2MJc6FvKR+8kJHAckd9UdAfIkg1Kl07qyc4=\",\"I3+H+yZh06FoQNixFRFte2HZnvlAQ+ovwuMR9jv+6qg=\",\"E7ixrEXbaibIVNRH8nUMCd6hLCb21Ag+nos98kKKrG8=\",\"FCn//WgFAknhJ1EQoWrdz7EwDylNY8C1C31HZPR5cHc=\",\"JwA9K3+YBTABSh9eiMTMLEF4YT9lfCtAr8OBauFOTnM=\",\"HnySabaOj/LqXyHDdv/388Hewd9DoCB91BqtGschM3g=\",\"BzvM/uAnTuNwS6wHiFJ/hwiINpkITT7p+s7NGazALV8=\",\"AaI8LpniL2Dg7Mnb0mmm+LVqp0vzGJYaCF5CN12Sgj8=\",\"Cws4oe6BEUo17u61TUGUWbFylFB4nxQgL7hPAJ9yggY=\",\"Cwi/U83NSYqfypoHddGaP6t81vdwnwB7DS+wfY6nRSw=\",\"HTdVDuhyRXGsyf9AkibSB1VE++KzgnZyatHI7z0JYoM=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"CPzmFQtn9Un/iYlYWHw2ZVJ3RAxMi9lWWnulR1gPgfE=\",\"CaPZAwfKxiW86d1x5RPxRkIVPHxKQR1Z9dtZf96Ii0Q=\",\"BeLLoqMFwpzP4aSb8c+qPwDwl/8WP+tzCMQKxlTFlKI=\",\"AVHrT6CxzmCJJeJFlyav3dWreYLUdJ5hheXwM9GJOt4=\",\"LjKZvvQQl62eViA6wl61JhIUXItBE3WxW+TGD6+aDo0=\",\"K1pP8Ru6MHTw4MPdNOs+Ib0Ax1NxfxlQnEniygHuSM4=\",\"HsenbXZPyshsVc4HY0T3u8UYJsy6fpCscDIWhB/XiTE=\",\"Gf59MbeeexqFrkMLpHLPaZqBQifwMl2VfOE99lRDCzo=\",\"DBBm3H70eLLtD+EMnHoLy5p5dKT3gtA/JICH+sUOyFE=\",\"I7Nx9T3kNXCAXtTDgqTir+JiB/HigL2WM0f5c82OJrA=\",\"FbWPvic5REFe5otOI3+tcAXO2C/Wwviv0TyE6ylIixk=\",\"I9iSnOMP37B4k4opHdiOf3qALxcsf515KreqbtCGa3c=\",\"A0BpHzt5PO4MrawLlqomvHByxdGBURfjAq+pcOZEnvg=\",\"J03byCNhHtY+jLwpKUMNAlCINzrDvlZKRKc50R5LbvM=\",\"I6N+tyax/CmEFyjrZXGR0pD6aqrJJjaxd7xYJGXxr0M=\",\"GO4iSNlRJyW6kDCGlr6zEC5+qG3icZ0sUrTvwC/QIjo=\",\"BAoUz075501EODrmgcOrNdfGzQrV2UrY/MUFDiA+5rs=\",\"LLMpljE8bGz7zsVMT11bUFe+u8T7DBA7nRQ2cm8LcIM=\",\"K32vt1R4ndyx3sDOTsUP40DWo6N8jYG97aB1XcsUw0Q=\",\"E+RC2pcaTHFiC4D5ytSNcQVTVZbUuPH+VQw+4HMoxEA=\",\"GY6QIloO1rh72EegECphJn9s7k13qmMeNVzc35O0d9M=\",\"IAbMhu1Uv3pfw4n6W8qQ3NUmmrpN3sqV3hcZ7Yq2N3c=\",\"CInsdxLFmCUaWYOeOJ3uZvbZlG0nWmDC6iVmz1hu35g=\",\"BRGCYTVTbvr59fIa7jcRJbt4QSpgi7bCttl4grZyoIo=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"LxAXDSqsF6IrIRJIYpUz2B2gDKVc2NcMb+GwaJqlUNw=\",\"KjXcCdRIj8r0NsiToT1EiWd5AaB/h1U3xTgEjvUd13E=\",\"IBsZeMvTkvbOKKXI2ClnMvUDrWPm+mFvpjnXAQ8kVbw=\",\"z97xZapr6jW9292XEz8k/lhhkTybYnT2G9uLpC5oyg==\",\"JKFFVcQYzkGyS1vxQwunZ5Gr2VUCK6MemtLMOivHKGg=\",\"BY0S4VydAj6hNIstxcncK0PFhU1y4/6YQeGisISFntQ=\",\"KeW9Gputa+u1qrVVWPw3XIioqEzF1/OlacdVP2tKvSk=\",\"HSA8JJCUcoYhJ59rjVOn0qylce3q4gL3JlauIcgl9jg=\",\"HP82Kw+SZRQdolkVs/+eT9izPTAaHPtPYGtHX7XSFTs=\",\"BsC1XhCgL2qeXoZTtvUgKeB2lj9R9afvTCSDeBMD22E=\",\"KbqnPKNyXfl9Jq+24qGngQWbgfgQkILD2y0tB2rJEKE=\",\"FrxxzwWbYnuvT96HAhQcXCrDGoYgol828PR5onSb56k=\",\"HLT0l5xLo3I129jeElvdC/7tp00dvI+HqRCEaGUc+Lc=\",\"HZCXtPSOUuIH3LWtoUoASRjcpioW8odg0FFsPMyQkPg=\",\"LPRE0aXG7VCAE9NP9A8nECfJqTlcrGTmRDz4itdIEgE=\",\"GvYGXoS8XZ9lPDagyGsPDZ+o/zlsDPciyXuHNqr2/w0=\",\"LixOz2IttvHlViNpfHCz2sCFDgNpou7sr9yje8Eg1xk=\",\"CugnADZN1sMB7ybYRAoeD7ceQQNVy/eYH+yw6Ov0OeA=\",\"KzvCAHs4PaQuTzQmmkf2KTkmQ8D9kDAp2l1gVArs6Ms=\",\"Cb8bEnwizRf0Yu1Jcq869hC1vrKBip9AXYUqFo3jTIc=\",\"ASMPI+ILYBHVw4cQF0gv04+Ckj2etPvPbEwS/XRMi38=\",\"G0fHIPVDJ3zbJ/1XtX5KiL5KF/k2f1zFilQezZlQBfQ=\",\"JVDscBjdihLkNXFiXVjL/8AuEMleDpKXuhcdYIfdeZ4=\",\"LTV7lrMlIGXoG18UBr6AJ6wg05GcZop0b+xOMgUmDas=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"CFAOAdlN6QTXIjlmhZsWCvP3PuH2cgiTWnJu8fBKIbM=\",\"CuiKWM1tfdHTjUJ9qvEMuvO+J+WrwsLb+U5vR4LN/rc=\",\"I1bPFM1xZTGsV24wl4w+mvM/4PVGXGkopwqwZ2n7fCs=\",\"BMnMf/HmEkDxwMyCOar0Ui9WR4BBX8R7/7HCj83V7+0=\",\"KsEZU0AX+UwQP7YZndDEvPI31DUpTRYmnWncOb4XDrc=\",\"DwOJzirw9iBm4PCqq1Qcfx4BP6Dt0LrQxFSpvvz/m2A=\",\"HfmE1f7XK+2NKHy+O7/5rIEbVhVajY92i3IiYgurKrQ=\",\"JGS2uIN+3UfrYVYqjBM51ZRG3DCxK/4/62pnaldU/hw=\",\"EeZw+nOdwX3lk5dwgw06yop5GQ1BOoppKAJ1qohICWo=\",\"CCQTQduTg4jeLi8Cyfbat/IECioPstZ0vRYMj891E+E=\",\"IV/3qL/OMZOdhBO6Aw9yVECS6/4G+Z9hEApt7yIIlXY=\",\"LHzUllGJN+w3wafOniMfFQh8DyZqK22JS+4Ze5S5zVg=\",\"CbxbOikfjeJHVKZHmVanBHcrswXxq4hKeleknG68jZc=\",\"CxWg38IsbrpdZhdQRzLfaeMM/yxBfQ3S8ctJVFoCY2g=\",\"KZ4kpqLfTj3ueXqdmzCa9/OKoRxhvsh7PZ4BvBsoNHQ=\",\"FKFoPgztUAb7WL1fHo/hC1tNXbivbuEfNUJoPVz6Dm4=\",\"JVleWIhQXoehjdji8/2Zg4eQEZjMmCNVfjQWfStvQiA=\",\"GoyhYMsDscbgdMfqmCsbtAbkuZanD0MNqKeFVDXbzYs=\",\"SPpRHHjQRvp7P5YN26XrOedT5AwD4CahP98lCTYnFw==\",\"KGBrJcoDCJDgq51YzLCYdUZdNoyP/xqUAaGKBG2Sk0E=\",\"CZyYjuULWoZoZXCq3noH1/PefR675KchYSFP4fWVAaM=\",\"DUI7g5P4BruURaVfgqqjZjsle84HmBtVqdzGQPmzprs=\",\"IP0VzK/73gi5BKlvmhjOXkERKNpZwpnOahiGulVOiFg=\",\"K4tzH5O7/S3fEy8bnzf4IM4u/HZIXeIb7iIp0D2YblQ=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"C8tGVDUDSPIW2kf4qQhaJCEf6xUakGxYUqNut6WQ5eg=\",\"DgvdCWpIOzxxWa7L+/pSpLZudwSwWn3wXD/Hm+wKqQM=\",\"LOpmL3wk6KYRGZDKEPflOdykNcAi+lRHrRfxQHueLD4=\",\"JgSU//MHmjXq6IfFk89XkVCYFa4xU43NdDLsxsANwM4=\",\"FcAQpPxsweVMrX+JGI4jkt8n99b860lYt6xowjuN6w8=\",\"Lxme28pLtZZpsOTd7zOntFghhSaZrYsDyNPd3XXotY4=\",\"G2MBfDxNyU4y98F9Z6MZAYdbIN1nV8vIDu/Za79zaF4=\",\"IYGchhGe7iqTUzzAVXtwlRGabGNH5wKu1sQc3rVDZnc=\",\"LHrmquKYqZoNxT4qCq4s67Y26D6A+OwsDKXm0wwN4HU=\",\"JBVZywyJxBa+oe4IZsF666Kf3sp1q5jSiQ1+EGl9frU=\",\"Id6IXBYW9GCvm+I4XcuQqKRx+ctKS+jna0XQ0P4/jlA=\",\"F5ujIDdMPGwmjwIXbhPLDYg/GuJLFFdpA1ugzSiHnmc=\",\"HOIEV8FHHYNyBZH3mjOXmucO4eODABHZSUt2hvkENNU=\",\"CbwX7ekZz8rQIBe0yDzJ4cptRpXq/46YPIRRZDzX61w=\",\"EJk8IIXs5fHwk0PdUyVDITuj8EbFo5/KlBN0qeiXXBk=\",\"EeDesdooVzQaLE4uWdVzH9JA2i2tkKHoFbcG+Sao9lc=\",\"FTE9UA2HnW25RG5UZfnAgRIzDJ0dyiGxzSmBF0VtwXU=\",\"Gj2pf8uiZsKdLzt1WJLEQ4zKFwPTaF/NJjcoNy6xndo=\",\"GsO8F1kYAsz1QhDaLSv2J3JeEahgVQOWZzLRbYLHwLY=\",\"E/2f9Uv/GlYIV68qYgssstcl7Nq5lgPFjUs9gxH4a7s=\",\"EMuJDQnXkiuXDUeUc5ldedk1JWyf0o9iISEE1p88OPk=\",\"ATFknGw3xGez+Na9aExs0SHhQUzlomR/z40pyE+yJkY=\",\"J4QpboHL4bpSYhcLNdJPWp9ChXfHP1GIje7jv/sSRfM=\",\"AmK2RuZAbTkGfs9M0cTn1tvY8JKaH6d4kG9wm43ewKc=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"K3gCO1C8+7c7RJfdsLUZxwPe6FP7tTQ4+Qbo8DN5gis=\",\"GDTWSFQpGWYp38UHdeiBqlvGU9YYbr6rofv6cNVFmXc=\",\"HiI+ygZfB5EAFZhcgYWEa8YQSIk1XALv+ZZvGK7tc4M=\",\"Ic4sw5Xx6p7rioP3bV7yaJZDBPiR21G5B7V6OdQMdMA=\",\"MBDaQbe9kQF7vi9z8o1IR/GxX3yq5vGXxRqq2UlC1ac=\",\"D8eqII6J9hWytaxsHITbDIftA1TT2gEqUF03GCBfiJg=\",\"ExU5JMD+Z5AC3BkSqWab3mwL/FaJMVX98uluBaGGsKo=\",\"Hn7JynFRZ4ctBitqL5Kta0JaOutF5aROB5hFGl88avE=\",\"GDnrh3mK4LiebOQFc0t3D6LmCSsGcLL1n9k1ALoyvB0=\",\"K9klgAqPldCytsoa5K7KD+2sT7yIn0ZL4kOu9h411TE=\",\"Dx7GMd3G91P0KIuq7F2QiBlmBi2OAKlNHDXKpcH4fYE=\",\"CateFcHhz1jUbFXw30+jpWzzpB5SZksaElvzOIiHofk=\",\"IEj29otN0BJ9kVzW1wVqAQQUWu53YYB3UFYZEX9Yje0=\",\"Du0SRhTPKNl8mchaChRW0wPGzdLScDmCpC3WiLZVWaA=\",\"Do+8z7YrCEKqqq4B6EGNAFaH01EWBu5WyXjQ3P3r2CU=\",\"B4I7d4Taqf9YUxKedVXy+ts4mLXEy+9vTdXX6MeLtzs=\",\"Fh4qHbDuDnWyar8Dj/a6izltDAPSe3lKLrZDlGgNsO0=\",\"KBbXpRcI2ZSQvZf1RD35pSA2CP6xvK5CaNPaHlGY3Hk=\",\"CymL+vpXrr5Um48rD5hVSuAKF2FCcpgEC8gQStgYQ+g=\",\"BbV3m+DIyItu+YXfhR91QxAmcEjG5oE5uqpLQdAsumM=\",\"KVToDtSeuR1lXzJXHW7SRyTc1tATxi/Y2qBmG0wub3U=\",\"Efl73hqDDpeadkfg6vN5Z/L7wpUrtQykV1lho0tDrXA=\",\"Ltq9epm5jF+fhXDHeORg3BnErM0t4JOB2yriW4ev/lE=\",\"KFtZteQVPHGIx+kY3/wO95jRVpXJ+ikhrvAeh735v5g=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"COvoUEKLOy51NEIOhcxwSDoR8z0rX98E9hOC96EulZQ=\",\"C8hOIqKaDDm/iFTVEjXkXhhX6jV1/OIOiR6pLY9W3oE=\",\"DFRvhV6P5VKaMc7S1Tjc4Ey8wFN5q0+Nz1oFuOADD5g=\",\"BL7/Ksbbf8W6GmYRTvJZEAD4giSXtmHPFeBScZwFIJ0=\",\"F/4j9i0iHgivQoWCJEo6MdZKL7s39Y+OlLxxmyxCkeA=\",\"Epxqsz2rvmC1LJRE3tqgR3dd0B3oeGNsuAt9AU/JhgY=\",\"HsxtO4u/hqthTIXlzyxdyjHYbSq8jOka8j03tS7XhWI=\",\"L6ButIKIWNOnN/pRcPx35ybooM2kOKiSX9VeWT4gRBk=\",\"Ej1sTMin/XfFPeMviODga/3XiYaELIaRz3867cQ/zPo=\",\"KWOPdcTXrU1tqSzDaBOEvKpr2gqhRQPeQD8zD4dwCr4=\",\"LKWz8N23pcbvOI4z5QHg/EGosWhYv+sQiCvYOCOMzec=\",\"Hn4gYBIp3OBKV/IwBde4rQN11O+rs+J2o4oMsszit8I=\",\"G7l4GufXzBQee3Li//Of71e9+5Ivj/iL+/OVc4vtQEM=\",\"JhesqsfoVH69rgvyBjogVuW0LjkoP872V4slb7iuAe8=\",\"FSRCY3ZBitsuy76CkTvPBaCMDbax89gLW6F3HXK4Dxo=\",\"I7mggftJBSz0slIf9gDEcbIs7BybnDIJe8kRkgmfC0Q=\",\"HGzQ+HcxKH67Eog+Y5kc5aqMdoSZ9cl2KFAZtBrWonI=\",\"BWT5dlNh0BQaaa2prFIbozE5ob7IGxw5+fx51W+T2J8=\",\"GPuh9TfQvAaIhzC8/1cPYsjro1LSiQZmhG7FwQK77FU=\",\"Ls2U/dxWVElPtB1GxMkdJks+F9Xzd5HfJaQstoDhKlU=\",\"JRaLcAMQIW1OyfpcPjUU5xLWlKRvFp93kb9LAc8j+g0=\",\"Dd84o22skze0rdDZozosWJE0rurxQexaWwWdsKVGaQU=\",\"DudCFhCcSEUa8yzXkUtBc0vcw3xg5QWphF5WiTE8vfc=\",\"ILSqu7S7tIxPqBVVONdyCI/AzNFOye0nTH8zVvl5ngo=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"GN6FeDSI5otGWEZ1/3TSutRdaGp4mq+A8Mzz48Mx2XM=\",\"I6spiJ6K6uNygtrmruOhZiTwWCCMdK9QPe2mZkHVuC8=\",\"L7yNBt4Dkm/xwxFLN12HKDOIYlhyspZreB0m+yul1+Y=\",\"IZ4MTVZrywlgkRjfIjHmXp6V9rbhxhSWF6zqcIP9ntc=\",\"WyGywRlhfupu3NJOH+6xz3VWC2W4CvECe+Lh8UoV2Q==\",\"VFbUGvrjKW/UsT+KCWYp0LRxaRpKKdn74kk8PsN3/w==\",\"FAAdzwI0y+izz3mbzjd4gxdqSQQ2D4P7WQi1t9+SpEc=\",\"AqXp/bEnJEfX5QvQ72aL/5+8hg8ZHB4MrRVg509tIxw=\",\"IpSYecW4Pql0E9Zmrg6zc53s26rPGjN0K9wE+eRJ8sg=\",\"IesjyHQvjUmAKd59AXChKgMcSfmS8HqWrwSURU432Wo=\",\"BwVBBiFQovJSZ6hHb0G9rLKzV5x4VrpJBJmfktCzK/E=\",\"JmRRjKhwRDQL/YxafCuGNgG4Im3VZjaNo2uAhpG5RUw=\",\"FKqBySefNQW3RLyGw6yv1MWwPaGBKfaitn1zqdjntds=\",\"DsuUsWO1Ya02Hv2F24hhTGmom/dPXvOpOHVWyjNDowM=\",\"BabZoe+rzgoQ0zie0VcSg2mMkOdmNjhZrMkQlolotnY=\",\"FrTdCcSys5QsABnZ051CEmJsSSt8DnF4GWiZ9Jf4MII=\",\"BGB4Te2UnTaR1b331gKezi3sz1YvDhJILwAXFIlcvJo=\",\"LWNK1mkGzWvqL61ZnkWRLJkpAVCKqRXwwhnWY3PE974=\",\"FljrCGtUNR7DVzuK2CAfWk0fACa48ErKZsRMFudRbvk=\",\"E1oBHggcvlR1odMWt4xyThgRJu9EqaNSUVr86WZanZI=\",\"C0vJSDaQPJeHzSKylioFxCx70IGC2leeJ37Dl3QY/GQ=\",\"Cgo30HeFBp9H4Y8kXv/PzrGfJAXKAJlHydLNlWc9PKo=\",\"D47NI9oTXIgMdtIW+9oCZ9Mq7itKgDmqV4MDTWbdoRM=\",\"DojtozWsGiIEqsNWpYo8pQOuRUOIHd0oK/dJLyU+GTA=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"Ck2jeVXbXSu4k6CRnk2Sg2GICq2J6HlzuTY42fRjI90=\",\"GCQg/Wsdi7lLNdlYdJmCXrUFXZXyTFoGH1avUW5xxbg=\",\"Eu0jbRo97EAGH5r3qtPNveleXUF2PYsjXGZdJbARUco=\",\"LSxQ428sLEAkk/2Y7buRTVkXAAEdOD4ok4TA/SbkYIg=\",\"Aui6DmX17lOrtY2gx5KGm8dCl0n9yIzPekKcHzVXXBE=\",\"CEkQMe9dpfalD+Pp/kq8z+rgkeoJks9yojnQ3McADAw=\",\"D0iUuO1YdBVmQD/7akaMvgNuNl07ORtyu6c7P5Fq7UA=\",\"InJ7zD4/Hna7upWqeqLrVYBjr5K19iRDOq27sP8zxwA=\",\"GxIPmZBCcwtNLp9OIsUoUQzCb2B2kF831aOmv6Gf2H8=\",\"Czf/NuUVPHq8LAvTbbM76E3HN4NAqMYlnerl0UItL3Y=\",\"FlVWSWawW0fRcdsk+BkXoilnd7Assw+JNXEhdmIAm5M=\",\"pk3tv02r4GhfuOS/tNtS5KPhvBeL9/SfEzW8PP+Ppg==\",\"IalT8NDKHUPukgxUqKGISi3Fg2bhlfSgMnBYe/OF/8I=\",\"Io3CydkT1PRYg3a+EqnPbVXXxZoUoV+bjr+PDLgBomQ=\",\"K0h+XJq7SBKDAUFXLYsZNrS4zDEZoAOPdz87zKg9SbA=\",\"KFcSST5n7UIgUlNnMaMqsZIEN82Afc1liDa+uRICK+o=\",\"JsG3FbZPS6nUfB+X2Z+R6kuD6hBSA7teS76LPm+rzJU=\",\"DBiKQtR1jsvD01pz5zXz2soSldDZPQHu1sOghc4dlek=\",\"J5YQM3SyZVRVfx778TfDyv/sAg4d6dLnX4pRtd1SUk0=\",\"DhUj2Lqye79f24XqTur1e6/q9QSBzbibgEg2mNS0dgQ=\",\"FyrHfDeqOHkFBoMPrNqwbQkampi6CkRQINh6VI5o/dU=\",\"HqgosFLMyMIcFBeyR5vyHbvriwfx0pRULmt3bBekbKI=\",\"DFMONvEE+TzSnp1fbMdrSYLI8G1SaE7Jtrbbxs8+Fhg=\",\"JXSX1DKl3bk0FXwc8yGKEEqj/ljsfeUAL4K+hf9KKZI=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"CbC0SD35KYMX+1sGjs8ykdys3a0SLU+YyoSGjO4l/fY=\",\"FWn/0xhqRDJS3lVpZhw/jqx9/Zh1aKrLhuV20/aJQpA=\",\"IzWUJUTaaKJrsFw8RIRfDpYS+4prM6S9gbDaGBGxU4o=\",\"8/7DBeRvPewoCoJgh98XuqrKcEhAA49W+U81QG5lcQ==\",\"HE+zZrae6mwa1YCvcTDzPr4eyRsETqHFaXvN5XK/1OI=\",\"EQZqMANLD1oKwuLF0AcgxeEcH8tx+lfnyNrJOOf0+Mo=\",\"ATauzn0lq1gXD0Ut1Q2+abH5p38GD7mbDimem9u/0kQ=\",\"Blb+EIeFqX3/OG3x5OLtttaNz8nLlh59RKsNFIR/OBA=\",\"ITLJqUayys7MdbvQuQ4P1/HIZOyBihPPwmY3mkh0Cho=\",\"AmzhnzA1n4cbhg9+dA4TYajcPU+sqAiQBZ9odCtQwbs=\",\"B7NLtzxpqL78Fx0E/cUSwubSmZO+KqU3paknUD0yfxk=\",\"HSB271enUVEpdSH+GurVezYaDP2Q2cVuWk2UoDrqTVk=\",\"GLLXZF9ERl3p2HU1RxZybjbwkrQ+Eaov6090n1zDBVI=\",\"KdnpNqiCgzdsTMQQW3velOxkiisCxL4DJboO5OjllGY=\",\"CEMzGOOVBkvHIKGM2iTfV4yrUbE4NOA/gwPpiKjs7H8=\",\"KYHvux52E3T8sgcVUn3hl9Ms9Nh4cWGbUF0/X2fgz78=\",\"KKhOdgm8TZ3klLUwaHMMD/0VTedwEaxLqjoAvB9WXJQ=\",\"C5j7CkLKSXZi02VeDwshWsp3a5Sw6ELnzHvYD2qgFHA=\",\"CS37GAnM3ejs9hpmAqaf16ueoPiDeYQlucpGRjfKH+s=\",\"Iin+z0LKK3JexauGHtBRswrY3TYqhEXm5/bm2IjO9sk=\",\"Lvp0VwhGKlbZQWWeTWO78rFde1ywD1f32W3kmH4OtUU=\",\"HriPZRIybbItW7joqxzibvuLVR+NYBBDjQ8m+XLJyGg=\",\"A1f0ZAKDV4Je80aR/Ae6q8d2UxBaX4lXd7zJ/vbkyp8=\",\"JXS2turFlAJ0DNnvD1DiKeTbZBgl0v1/ABjc3vuuZ9E=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"Is161IGlINIeRnsvokjSy1RGLD3sKd4pShZ4e++xge4=\",\"HqcWKSwhtKltyeJFc48X82S0qd1cx2LHqwokuM5jqVs=\",\"DuB9spUITod/GTu3NFSCScVmlFmAqYfoU88oPg3knEM=\",\"I3ox54f/q2vYA9RoPKmlusndwhIZ0RnVRwpFZ42RavU=\",\"ItWRSY/OfFkD1pXLef3KvrtZH8aP56irQ3YnnzyHmd4=\",\"JXMN699dquJGDLeKzqrBVA0bMsSsP+qElKgywKufSWk=\",\"L1SvzAq571mIFMCp+DoW1E7EjulqBvsd19hBTvQLy/8=\",\"EQhV5Z6/bJnGG7ezco2wFBsMfraHfj2GdDMne82xLvI=\",\"EAy7ODgwOKf3LcduDsuASHob0q+tuF7qpsSzim4kYNc=\",\"DPnvA6y37u4W0h/27ua2WMQmVR1aNG7D0iJqdLm78IU=\",\"DQR/efHECfVCvPysQHCH3Alo+eC4K8dg0e9yY5vw07M=\",\"DI01snNzhgrO4thR8/8ZWJelQpeXpAlIqwwY3Sec01s=\",\"CzTUzNQpsoMkY1iUqE4tCVwprVILxUNLvABOQ7eaP5A=\",\"FaqAlOiQw86YzmTNl/fCFEXOs8hjvfiniNSeIzzIkmo=\",\"EWN1U0J8zVLSjvBMVk7prwZHIV9/SnZNl+NLPaZeZks=\",\"DXdCS9KFLUhUldkpq8jqHlwqB6k4Rj2051s18RZG/wk=\",\"DEh3bQLXN+3JXaOUGh94qXbFBRvWMN6zixAkDNoduh8=\",\"I++vzJqP9Dou5QZ+mmMbC+IcHk8Cjk+nzvOJGeTxScI=\",\"JNyI1hRGafZejIsOC4QIHeQe8Aw/hy2rvrqkrj24BSI=\",\"J7RfZjU0Cnf4V8ciIKuGb3BzkZaDWiKVIYa8JCzWmHM=\",\"BwSyRjIjnvgW4XsS4LH5XBz3uPM2eiY66HzWKFglY80=\",\"F2y0mH+fPfc487yHcSpGNWVrSExSynYkvRJFwqq/Pnk=\",\"In64BjYDmwrmeqFpspsf+ZZv7e19I5xRxqy0J8+2H5o=\",\"DDFa7Recum6/VHD+6s4NsuFpPJ/BGTH1EmVUHFCMp4Q=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"G4t12D4+lV27QGP27yk7Su4YxKO+kifDEC0pwqhd8Is=\",\"Bio3IfxACZGOkIhGulY1Ayqi6qdInV10sTmUSG4bYh4=\",\"H1hgbLfmH7VRV3hDQuxSRVxm+4guM2C2kqRnc2ATSmg=\",\"BB6TJJ4xfbSVi4hJ3qKB6oHQ4gQQBmIMeGNjVOIMReE=\",\"FW1WGkv7xLVXqs9czEcBSD9MRMglbmGbb3p9rgnSPDw=\",\"Ee1fqbRq1LP1eoxQhHJEafNrpGzshHgl5iRcRTeg4hc=\",\"CIpdUYi+dBzQ4MzbEIddP6AYieT4Dlvm6n4SfVsolj8=\",\"JxpjK4Q4RkheKrD1x9HhT3J1/FO4zc2KdDt1ZkYSGdU=\",\"JsChxmMgFehonbk8UKPcLkCNPAUhd0qsCZuTHXKVxtg=\",\"KUBwsO9OalXohaErWHTeBN8jrfjwqE+HXLGMTOuNEB0=\",\"L3iTHZbF/Z0P9HCJ6YgJxk9a/1iy1wCAmYvA/l42QwM=\",\"IwviHY6p5MXSE5r9Gw62HRSyJ+qGTAkXWyOuSmR9Z9s=\",\"I4NZRa4FxnjLK5v5EA9R5//aypPnQympaMOSu6MhojI=\",\"GHw5+rPsxjQWbXiVn65lGrGbFpgXt+UIdi7jboqIAz0=\",\"AZTIlVx+YgE15iT/WrrVjli1Myw5DmD3cui03UdycN0=\",\"BlGXDj6LgWIn0wcHHYT92fQXovG4RLfsVqIaewJBpoQ=\",\"GI2cnQ+8NFn2qCUy8RCaBsWR0rN991DChyRJCPGT7vw=\",\"A7g2e+gL9PjjuQCKqfxkC2z6yARFHJGmxR1ghA+eFm0=\",\"CHYuEJr/MGuAOgyQ/xAxQDRYQpuC2tUGanxhxPzVLhA=\",\"B+h3SAcD90XGe4vN1qEYK/q+pU7sO2K4f1Pp622g1b8=\",\"CDodBRHVV2ZRp4q7ihSsktnWGkP5d8tdyb7+IVDgM1o=\",\"EI9WVyM0p2X1TbIUbq8bRPo5uRIDpY03ce6hnkbztYs=\",\"AlNxfxs6YFU7qMVgjS6bM9suWq4c3aZlAGYgWJGDFYo=\",\"D30lnWpphhk7uI8hufaHVIuXk7ESDhA4ZWHKW+gB52I=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"AsrsHako3j7yV+pp1RTHGPcNjTgg/hNdyBUj0uE0lMI=\",\"D/zEmwMn1NqyP+mTU5xx54zs5wxlBg/s93Ukik8wl9k=\",\"B9L4FKDVLxZ2mGZIBBxa5X7Jtfoyjf7loiIGwPVU/bg=\",\"BWPXp51fMt0jl6zaIGpvpJR1cu1AUKqwHccy/+yiNp0=\",\"J4P6NkZTgVuUdKmXL1c9Fx0ItNvJdxBU8Lw3anDtoHA=\",\"JtenaH5sIH9fpZfIRWW76dURJDwZF96GVrq904ug64E=\",\"FWeDLNcOd+wg7xBBNRV3UQYorCocfVwXnJgxX/eMQsM=\",\"HFnEwl217HYK1AMEfzGC4MLbe1V4g7In+L0eOEp7duY=\",\"L7mExcNqBtB2Af7My90UZsOPLuR7fdUmo0u7noWaH+U=\",\"GTxpF4n28XUQXpacq7u8eBEZ2qwJJ6JpTQBu28CEUIQ=\",\"KTTMqJGHlXTkTkuU9VVNzi5VBwsZ3kIbTSt0NBiyh+M=\",\"IiP33DwE+t3CLxwF54bdT7KDehQlxi1N79zsFf9v1qU=\",\"Jnoc1OzNrK5ydxadkAB2Fgawva3yTcl7a1CtGPQITlc=\",\"I2dMnf9p2bBtGkEQP1skH3iGJMlyID06SATiBD7q+X4=\",\"DIYAD1qUDcTCa3wtzsoQQWwN4IJC2AV1BqhnsYFpFFE=\",\"I3wSBAKrqJtwHX20GWjoHnyp5jtiQuVtnomx6Ut7VvU=\",\"Hyre/f4n6F1VCiaOOC5q+OUbk9AwNEQxEFCgvcOoaxM=\",\"IQJsqebBXn53VMJMFe8S02lpuyUF6o650k8hdiBjY5w=\",\"JX2/IH2DQevnGiXGfwvPxx7c9G9eZVwvlLsAJ2g+Tuc=\",\"KX/DVnJEvjfksa2IoMMAjh8TJhRrZYit0uErgSxTx+o=\",\"JBXusiIMUUtLUM7o3y9PYFR3tUDXUyUof6ffSVfDiO0=\",\"LR764uvVSJCgDoaDct3iSoqwJsc5e1SCe/Ub8lk3GSE=\",\"H4LblcZ7RrYwpAMQ2Agcdg4b//w56R8Xm5mZWo41VhU=\",\"LoF8JLCM+TRqIWWFcnlvkLgTK2JH5DodCZwXt4I1ksY=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"BYjFAhskzK7jt3/OZMASLzzyEoBhlASWeva+ghrJ438=\",\"GR5xtMZl/QlUYcfrIXlON3DDtAtLwOIqIQFm6cdKoL8=\",\"KcuMnrnEz1vG4cKngqwFAwFe/v4tZAoVTia0uTTclxM=\",\"DsHjiXkFxFHpi3dLY24dy4DtvK7JWbqQ0goChjZv90s=\",\"KreGt/+hcbuHZgODRnn0vooYSF+Tt7ifLa/v8zTVRp4=\",\"IEu8ZKwHYT/QL4cRIrjvAgbWcM/2CfwbL973uPHhVCs=\",\"EXLLj2v+IteFH3RmJjmbPAU2vcb4lpw7XKa2l6h6ul0=\",\"z8rCTm6ZrGpZ0pRt/sHIfUwUyVqc4ugeyMhAX3TqeQ==\",\"JXhxVqmllJtkk+CNpzGy4Vq7MOHUYNwjggfQQwKnN4w=\",\"JGrDBYUfTMUHntENdp0zevlknEbzdJUdxnSyc0hA/jg=\",\"LbnPaDaE654sx3JXHPjaG8pw4iKqtsp+YN8DneiyP/U=\",\"FmISoGUu9Gwi9tjY2MU9mf4znHqtxosjPIgvV5JUA+s=\",\"CYya/BUmtXKRmPf1i5BVY1lhQ8YR4bLI/5Df/Gd9HmY=\",\"I1jVJOwmD4OZVlY3hdGnJ/s2RUft7O9b9mTlcGMBpZk=\",\"GQG+B75FtPjTOAsKXlLB5qqU3E9vLkC6q7n5j968kfs=\",\"CS2ZpK3pFHnN+LzCLAUwm6B9hkAVMqr9/xe+5oHf0S4=\",\"E69JaVVafdaUgtHBMOtw4F8PmvOpN2n3+1Q3Fzxx4fM=\",\"KNOq4hiqCylkdtDcNzSB9K50beSqocgyg3DxdlVhSlE=\",\"FDERJb5pKQsJjFzLfnqVNHMohpWdJdZ35WTXGuGudkc=\",\"FFSDLi7URtasmpgfVnxXZjRQuzXtFH5N3fjn++MLC7I=\",\"EQVbXcZ16XwiNYCD2nSbsGb4qZzxGjcIPByZGvVnNrU=\",\"ILKraog3Nzj+wyWQZhFA/JEfMb4g2Km5OHF5VM5fFyA=\",\"IXGwE7ti/6USUAux660OEM05zHCUy/gGsQEzqfbOPWg=\",\"E9muUHBn6Y5nypesaR8oCCUbqEbJcJHJnkb4wD1oluU=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"KS5v5VkciGMZ05SjIYqvSo/ACyyY/Fejle0rUtcuXRo=\",\"LlVbv8eEJaT7LZ2JIiUqHtsU7kSFMoAKNlOOq208MTQ=\",\"BLeX/SU3mEnF+nA5y/rOXV8B0XECZxdnxR3MVHp8f0Q=\",\"K66MpocY1yk3Tpm7mZHvQ5n7mloU/3NhxS5HhXgVIcw=\",\"Bd2scj/9qAZ8IUf7rokIhL+Fcvt7MIEBAd5Dad77VhI=\",\"Hsjhfrziea3Ebd5VD9oXHtInNs5OECzI4284RKxn130=\",\"DcV/Vb9nwbaKo1EmSR1ua3j5iDte+hC49pXiqPoLg8k=\",\"LT9LztZLZLlYuNkb0LexaLpSvfx9XfGLvBoXb94Rsj4=\",\"LxCm1/h3yBS8dpM5XcNXB10cgWSVpPA7C6SdbY2XpmM=\",\"FEtA+6UpqNclz3jImBEvw+SCbIPBlhMy7Tuw4XBRvGc=\",\"CXCCJtwbzahdNtZa1tDKaTQFI+lw2uzrXMSMFtts86M=\",\"G8Nh5CCKAX4VI3et1VOFLa4bM0x5SOAI9wZPSZkWwVQ=\",\"AhjXB1AlwyvWyk4VzM6IbvQqVII5VdUNGr+Qa+aaGhA=\",\"LDZgkIPQitjfghGlHnW8m1JpHPXJmW3ubLOaE6sY3po=\",\"LuJffvj+2b+2kdil4hcXc2eVu/p234YUknFcS0EmERI=\",\"DgK+v/Vg5JsUgYwC4VNcXK4yYHHA10cDuOqfGVDnjlw=\",\"Co6TXAm+x4H2hYforqiX200+jWQ9Totlr5Qea1azXYI=\",\"JOTIo4gMB5UK8V5N13hf3/T0Zwn36KLf9G6nZwr55pw=\",\"LWgDFrt/3piBNvr9Qro22+2NCVIvSN2xmhTTniMF5Os=\",\"FR/AJC+Iy0uCD3lg5RmqMzxQJg8frHfuhBhzzkgwpfw=\",\"AqkwqXuEGiaAcX2DIsRj57Qlg0D4cljJDziPMiuGoXM=\",\"Gi0xUdJEFzpzYkYBtUeCgBvGwPj3pwo6/HCKI7Cvdbs=\",\"Aw/ykakTnKtrwLNWjCGtbkVCy7PG7Glw8B9Ks/TmWos=\",\"DGFCo47543CceGz0IFYpGqFYGqXLHhwqoBMmUBVSB18=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"BEeEZqnJQYPEMekeLZb612yuvDjPS2vWPUCog4h6oOQ=\",\"DSCJx4cqXg0SAznGg9EkPg9W36ML2O446ekCC+V8+dc=\",\"B4NfFPZG7xK/rmmTk8qHcQeeXlsQXFSab3QJibxxUi0=\",\"LrE4uOlqcv7Wb5iNdqVkJZMPeI0jKUuxbABsFbp6gw4=\",\"DWX8RqT1Va/k1hPRaWATnRsKuel0Cb5I0sfQrXCNV7g=\",\"Bcudb7DqXXw2rwOIkHcSThWbrz+V1o9cdLmNuJsfw/w=\",\"Eii26qUdZJfxL8+GS33J1oGzIXbKs9rniNXN/V//NzI=\",\"LHSpLI0zqwo1j/mI/OCqC6R1x4OYlzTJvO9qo9kuOao=\",\"GADlzpz4QOMru+YtgoyV55w+HEk+9w/4dDqIQxs03d0=\",\"BY/2cAFPRre6S9vUj+uQP9N/te7EvM9a8hvaQVR47MI=\",\"Icc/z5rRsBB/xSfWHm0aKJyh60YW2xv0Alecep8UHGE=\",\"LatbFCe6VdP6GpDYOwxWmXjj7PqSR1Cd0/njA7WN0MA=\",\"E7kFxq1ENNv/bngs9HDH83zBKd10WA7t2Kj4X5hEhuo=\",\"FlQtMNt3PFTa+fu+PMYymw8eMKXydlm1cY4HOmo/+ZM=\",\"L7nSwzJzTP1Gwm9lMo/MyhaPWHETaFYAKOKVPCpwllo=\",\"Aby8a1yxY6RGRV7Qh52hGWprxKvkXXuBr3RvR9tSkuc=\",\"Hdz3sOm8VKUHTgIa3XIxZMmB9r0E254VDi8OIaGmo9Y=\",\"DknKSsGmiTthcBoC4d0Co19J4yp++n8pesTSw+VFt74=\",\"JoMJ2+KZdJaC9wMCJ2d+UBOIATcBRDf3QzrZ4Uyo3qQ=\",\"G6wkL67ar9IF/8TgXOzsYDvq3+B2Zqf5cJNKKsb2Kco=\",\"KOIwWoCwFkeIaM9zL5ATuXb8kqNNGk3Kd65XLDxpzdI=\",\"FF3p8Y9Z42qTQVszrs60hVSoTrogxWBEiA4UZr7A0MY=\",\"GstJu18NPJOF+iAqIzUOlF9XJZpuzooVr7O/+U/pLhM=\",\"Jq3X2e006nNWayCBIGeHB7Han2QkPFWkEYlEVnL5dNA=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"AWBRdI7VTJ6NVuRaRaTrICxMkfukzPqKBe46mRAO8Cg=\",\"GlHhp1vVTcATqDZei+TZP8Nl7R+FpB5FGROgNcGpdfs=\",\"Jtv5nRcYmDlk1w5FvpmnhtxZDCsGcmYx5z5Czxm82tA=\",\"ETL4ZixYJZjBK4LbhoBg/QKrLa/XMNFJ8PHD27XHVA0=\",\"DSCr0bh7LcwJ9Ku2C2uTa/MZYWaEkwehRr3aeVMnD78=\",\"ExL5iddsbPk9A4ZSPCtEe+Xu4adncIWaM+CLr3nflPY=\",\"KMef53ir6oZbN8uftvy/+D6146ZTmiLBjLCnux7j/g==\",\"GbV3IorY5u5sm2adNrqOB5esdGFuPvzJ5qfoGWEABd4=\",\"FS3Zt3eNiUEwohWr4yBl163+lUKNApgjAdQ5CJasSkA=\",\"BH5ts9rZe2D0cgfqpNv3aeZIgKu6RHq0KmS06b9YDw==\",\"FvmtCykZdTxJUJulfpyRWqMjBmZM6SraQmoiyfY2DWY=\",\"KSHXQ31ysiNXYRg/7yKS1YHWCIP28FFjxxgeiTBZgUI=\",\"A2EoI4D9QZCCMhg4AZF2aowutu+PCEQm+asn7XUD0N8=\",\"JmFXS8V7bqowIkuhDL9Mlh7F076voX2EbmYJFbNLn/s=\",\"ArUNZMYiSp/QPxTFFCIxqCsxM5IGLXC7g1EW9x+GGTE=\",\"LkO+TKms05oLhp/zYb3CJnlhnb1/uTfuSZ75nBS5Kd0=\",\"B0WNy6gnuRfHMXmclRhevzSRZeuL2IN61MmnqUas28w=\",\"LlZawcASybcAFlTlxLOJ7vFgTRTaIeLL9Ggt294A/+4=\",\"K+F5e27k2rXHbzcIAmUFcfcv83r81TXoDAKphCV6SjE=\",\"E99zeVlGy6t59auVoa4Hvus2i2pnLu/5UzRnV0zVtjc=\",\"Jx8/Sql5AwFbZGJPTWWxXNL+Xxj8jdbMrODFINXa+as=\",\"BF5MUjGXnSDTD5jias3QW0TGEBryO6thsiufLtTCuss=\",\"Jl2Gj9nrRiCVzRjkDqKusHQVPPwG/gxi0mj8huP6Hpo=\",\"HCrL3BN+aorzmtNR+OiSVTh+acfZzEqgzAtKPJorLdM=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"GLTnPb5NnINRBFhxJIS1qIFUpk5PAA79il0tlgtNeZ0=\",\"4v3eQ5pfiZzX+BMInCb2gBijsOy/st4VWJ5YnHfGkQ==\",\"BPKyVAKgOsOm/WG6LnO1rNHcwiFwSvwiq0G6OxWLelo=\",\"LOCazVenwz2nowg/1zNvWfGiG7dAPMMVIQEScIPfJww=\",\"HcUcCENza6HXtcpOys4HWmFIa5eB3uy3PsDJJwiApdw=\",\"JMlicL7c7MTsCChWZUdLpBfkPxJ3h44l9kx+1Z1RiZM=\",\"FWeyXqEKp2Oed1Tgf7JhQOaxlkZjASZqyyQs4PgLqp4=\",\"G4QF4TsGoRkL9g4/v8di7jZdbkKlUclEmsbnjCXDE70=\",\"Guf8qnkK8vSuwUWNXo+50vbpxOGzh366cRrQFqj3WIM=\",\"Iw/9o88Eg53aVz7NbPanZfQZCW4ZxBon4hn3Yk9j+Rg=\",\"HIIcjblt7Q6ijIPgF2nUfnz1MeXuFnFUxZQt0VUsmcY=\",\"BlTizl3lRIXNv2Nv81qlGdO7CtD2VVPAiQNbOZzYTsk=\",\"DPthutY3RA6nDCFhbAAhUxt5fcyRC5RYPH+ieP63EkQ=\",\"Dd5YotOhnKjaztFckvgxVxtxo77f/1bfZO49P+p8EeU=\",\"Eh6VKTK36V3n7ITIZXbOYbu4YqwvEycAVP4luVVANF4=\",\"B3F0tOd0HkExoq2yTGyfIjv3fiZ42a5bMnnYblX4f6A=\",\"BdPrRqDZovD0fwlipj1TTJp305JyNGINLJKL8Jzn5cI=\",\"JG9anzy0jPH0oTrqWlS6U9jTBGthhx38H7XZ81jLUb8=\",\"Ci5i+qke+z3H1MZILUHO2Trvro0TJ1E15Qm7OhF7Gfo=\",\"Ieq6QsRcy+2T/jRo3IuY/EKphV5gznhWIIAFN4TCAlY=\",\"Hiz8rB6SQAgnGwhhMduj3QBEoDoo37svAIYR/sIwmU0=\",\"LJfSdaNr/dJQ4uKr/ElT2OBNXpJ5WpFKqRoWjxqZMFk=\",\"Cx1nyxpp4HG7V7P06u2fuZicEuJJwJAJILv+D+esbJM=\",\"Hw9lX4fDBGHnwtajtV1QkuRULIBfKd7YxJn+RgPfl58=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"HJpIhM9unMGXgvv/d/9qLfCxNTwuG8yA+AaFtNqamWI=\",\"IDHbxGnvXSq4u/CA53nIHaCKE40YsbzghtllDQRM2lI=\",\"JtQRxmFEPtuf4pAgaoRhgSjR6F4aj7y5kIhZh224c3Y=\",\"IQg8L2WH1NlDUbXo1NN8oe07umBbsFrEUVHFuCisyOI=\",\"JSqlIgugif7F1553bPvMO+QhZ+KyS6YkXcYMfPD+gYo=\",\"FarlBWY8r9g3WN4eWGBYok5pKVhj1ZwSIWeNCpl68Sg=\",\"LY5+rFyjIFQ2qjj+CL5ToPt7V+TDWrucjftyLqvEtPc=\",\"HUsDOMqPl+f22oTVSvMOMNBlE4GQ0MNgmKadsI9EuX4=\",\"Gvg4JV1pc9WwsZWFxS9Nx6x+4CS1QeTBA5QrdIWl+C8=\",\"MBuTOdOGPgXarFqjmqeeuUj2vppWreU/8n/phTHxuhE=\",\"HgPfigbkFheBxDzV2oX5xSHdH1mHvO+FgEgCCUSFLHw=\",\"LK3dKwC1sV0Yo+yw0BPHGWbKR9V5QD1k0LQb1zbdt6w=\",\"C4ejaeRwq5nixDSc4QmYU5HYSKo7YCAvehfvag5K3xs=\",\"IYFKyUs+MvbylcZcSyNKq94gLZYHsXHsANgm+ZimyS8=\",\"KbEiizNGp5lTd0Vk+mMdiqbyMU8skhbUqo2JKZkJ81I=\",\"Gl5ArmdJPgA3H0eWGBucDtn5CbxabZNh+bdbTF9I0nA=\",\"GseerA5b1k7/XXT9AvGc8KBm1uWtjRaaKuQqk19FTjw=\",\"AcwVkt80Nic0miW9qf84/r75nalS6m0zAUueBi0LnGU=\",\"JGrireJB5EO94D2OKzI9tCCENNU0KGKL+SovrSBY7BA=\",\"GNANbp+cqOHzFaqX+hIUMBJesu2EG92B8e/mk3n3hvM=\",\"KhR7Rk73MkSynMTk/SSinw/LYnEahA7Qdcd2goAbVPk=\",\"MBiKfTmyYXOxDXdnE1uEFkDBVwgIniviv49dMYYa4UA=\",\"HPcO5yrrJchVVLbenAGHfI71FkoeEYJQqhS7D/jMXZQ=\",\"KifLJZmegvir7hNRyAg8g5PlA4ETYZ54NkllHChpZ6w=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"FvO0TnppVj+bnLBKQxQNLFGiomQbndmtXde5QrOJjm4=\",\"HvnbpLn9U2OnxYVaHDrgDBh072kzNrYGsfJcT9MsWzw=\",\"A74QjNfSEYW2NkvYaIP6ufxjyTVu3vxwjAWIIoC3VRU=\",\"IWMcUiyPRYOUvSNJRvMm8KDgyustq0AU6OCJ82sl12Y=\",\"K0aceHADzc83Izvbnz7tnavtp0IoTW9yhqQmvJAi+p4=\",\"BAnkdNOEHQTY9qUhyuYiJOTRXXKaSPevc1cojhryAK8=\",\"I52znKmzHCHsYbfzMGz9Gpwgs66/Ds9K998YwqSYrDI=\",\"MGKhTViDC9/lyX+REcp3myU+CfgzfkV6bE7MG6G92Po=\",\"IuiVjgjtVAIK7uWNi9a9gWw7mfU9Zk/mwbuqwrtcEqw=\",\"Jon2jyzKuKuofa1ar48kyJ8k2Uwzo1VEE+yUyTCcIgE=\",\"B93Ndk2/M3CAwWtMaOk+7eJaVnveH32sDjvPbt+0xHI=\",\"KTxwRFGhqmbhqg1MfdVsxTkv2M97jMmY9qVLjDCyThk=\",\"LL/6R9LCjl0OxKLcChaK4lg2j+6guhdmIWjUy6J5BrI=\",\"AgjF70ayONqiF/5GzCaudGDHDrJfq18RIvTtvUgxiUY=\",\"JP5sLl8hxMugL0wVuh0HxzIBescvJiYm7uKSpMNITI4=\",\"Hf3nRXQY6pZDEIzB0TNxeRuQ+zpDRvTqaDD8hgGvoZY=\",\"GeunhQfrf0My3eU0J3bP+4s/U5c+nRkbDzEvfwXB5zI=\",\"Ar4MTiEeCJL/XT87eqAoHhYCzSNoS4K6Esthvh66QR8=\",\"CcrlOgSd75+AiJCbG6WWcPDYohgLBAYussjLLDiTwRo=\",\"LirfesFX/63fW6X9CzsAmxPI4UVLVNKY5aUPFbokqVc=\",\"CWAgahtf1/jKojxvl5p3st925TykBxow6W4gP21hGUU=\",\"FwntiAHtZh9UFWs9opTrWRrs3tc9xLq46IRhiJnWGSk=\",\"ITppn7Y6mAx901IAitRtbEI+d/3Yc0iHkghTGx3PfeM=\",\"A3Jmalr8vm9UWOeEcenvb8+jQg3qSecTqM4cGcrVO0k=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"F/SkP7zxJQipM1J6iRLyhCMzeA/TDAxG0VryFtvJJRw=\",\"LFdEya5/bYw9W2bU1DuVr9eco4WUuQSdiGSIzxDO9GM=\",\"La+m88YDxMCwq33qK1WTFN/097KhpliUYT0hlFlfRHY=\",\"L3IYAE/LYtxas3x7OANiYpbdb4dupetINOt2JsHYIhc=\",\"Bt+kICDqFmZSp6OSps7IpjFxuUPWhTcw3zyEbjIXbP8=\",\"I/h6YX8ejwIbg/Qcz+XnUmhklTqe7/VtYthXMewJCCY=\",\"HNo/5G2o4/JZW9Iq6TJ8LSlo/8DGhnQaE0Vv5bIYWGE=\",\"D6hiW9nDrwmVbrdOL5g+tgeaBQwBhiIbGjLvUFCWkAc=\",\"ERUgsPVZ/iR25qb0gGADjvsBZv+fa9qBKgL3kyKK8js=\",\"DCPe4XIplgm9PbyfLM/R4/duWUxawsPl3fqmIontdlY=\",\"EF9Crsihtgwg5wQay5S/629rX4xbcSGP7gIEfVfAwhg=\",\"KZ+RV4XorcHCN4/t7zCD5IfbH28YB8x7xm5RtzvDkUc=\",\"Ae84NlkfgD/bigvYk3PdeRdvvC6S7ecAb6pdlek5fYE=\",\"GieF202aNAmt87fdyp7ECLL5MEQzisIxIliN5GjFlAg=\",\"Gm6tE7zBpa+8Y9hdsKQcSgMeSAWF/nrl/Om2S8hmohY=\",\"H1mWoDWjBglu/yL/OqgFN46fTj7Vb5g09iFE9X6y1BQ=\",\"I4SYvJm2I8n7Ta+MpOTIdgczhDOpvCVGyfN8hq9DGEA=\",\"JzkV1ifTft5FDbxels6UibeO4Ej1dWCCIn5i22uaVt8=\",\"IcEWGM26v/ZXogyNhIErmEoBeBDpf/wWnFhe4pb/+fw=\",\"ID4L9L6P4q0fHutJJmR8qk9uQpznlNsIL8B+5TMOfPM=\",\"KUukoo8HBBDExPjLXAmlYlKtBdvktbzNJKSttP33Hfc=\",\"DkA8vrkE0VgveHIDX4Huq0AQ3oRFQKmyv+VBnUP4u7M=\",\"J8huUWuAvt4HVqIdsabO06wSaZb2T59u37JBf804Kek=\",\"JsAs7ThNoBokfSJbCTHjMQ9/aJQmszhMZbz88aHg2PY=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"I8KLfZJyECcKZtAs4URUx2CFQMHEERmJxm+lyDuVNEE=\",\"F1xHFx5kufz9mg5f8sv4fQkRwB98/LQoeiGd+2WjyUY=\",\"Kw3GcF5y+zlnbAmShPh5h1gEGeOAAZzsZSkpd4Dp8UM=\",\"LNMOSwlrKsUBgsWW/EvY3iduHR8FiswBC/4Fa1BJg0c=\",\"ITcX4atP40DI7aoPKwA/+irfSJDumrC75lKKL05DYYQ=\",\"Fnzh64dEJGntwg9b6F9BF2or8afkStmpIGBcW+mb+XU=\",\"LAh0aZt/uuEwRtrknbl4WKaVAZn5o/O/gjiu63NQF5c=\",\"GlZaEK2vqwGugmthnLecnHQgoUDUE2VmnsNhs3y1yNE=\",\"LIxBbz1hkkRW7McxGcbuMn3HF7QRpOvbZztI6MzR1NU=\",\"Jn/Q7/w0lSNU8FMytx/pJbNUjwFZ7jYUZ3hO+PuYYxU=\",\"K9JR41vt2oS/r/Vd430oNSd3WKYNtKm8T9o1cd9a5SM=\",\"C3pENxKzP81hAoVCRXoNo6sfCHtYqsslQ5r24eVTdaI=\",\"JAQTNXBiNXCsxxjxn/Jsa0e6A4VzlPVdF+jdr9RstdE=\",\"DaSF2KjTqXloyLB4nd5lN5ZDBkHE385A21y66k85IHE=\",\"IUbXEVya3s39W6BhEDcpFnyoKi6eWN9xd9EGRaI3RPQ=\",\"LJV9cjq1XPpd6Jle+ZBMO+W3C1d0oS0X79cdf7ELKJU=\",\"CAvD6Y9uyQnFFhxJjgYTu3Noie7tjOe8yTvtAvS8W+Y=\",\"Gdz3PPrEtEwnYeAk1ssmeMwQSlKMAnmb86CRkIrngMw=\",\"GZQi/p+h9dLb9ALJvWNNS9yc2vcPyrnQ6/uv0SoC5J4=\",\"GkB3sc9J9B/DoiQKN65gMJ1pQbg56/UeHhGMFqI8au8=\",\"DlPl69ZDRqg8Hn8zh4rIdTsbRfDhdH9oAxHuzK3Ymhc=\",\"Ba7/dce2DTmvr7yuT5nnfiI8NeMB2x2+pb7LpzU1iF4=\",\"H5dk1LA27psYbV3DecKCaxdZWEmsgp4tUiMOJD//MJs=\",\"AcvWTlTpShSZ32/XhN93Cfk5QgcUY+qz22AqgEM3pDY=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"GQ8qaD1B0p+nn2UwV8CFHHa/cwHDVeRtUU5iohFtcYg=\",\"A1i964hSed5CHQtbztdeSwuQk0D4o0RaPdF9duSrzRo=\",\"v3VfaZt+QlKz/WJ5OCfmE8QLDBKFourNTvZeOr/SgQ==\",\"JnU96piIXKLEqhikm5FiJ3cihYq1HjpIInUnjFOEJJY=\",\"LDu0vuVfZl21may7snCvgqn4Mg98Ot8RPPqG2c+0dUw=\",\"FJuiVfcg7aEURPgE6YFCYACLGH8mzhfkFSwJLdR3sA4=\",\"ITRMaCsfMUU8r+2jCBt2CWNA2sVgYnYsqAp4hw2rO+w=\",\"EbbHlTrVq0rhb1ARAbm1d/C4odfGp5PWbk+hYbHgblI=\",\"DrG+6b+m6sDiK+6aE/ohVev8q9CQjnQUW7+UKK4LAgk=\",\"D4nm92fvd85uyBiAfTBwb8EU2eAqphDA8/d6Ogiq+cc=\",\"GKcq3p7pdl3ozP8pULCj6MirtKM2rUF+p1g36DAbjf4=\",\"I5Nnv1ZSwrKTv2Rb2I8Rabb4csz4QFwrTwn00TX2/tk=\",\"I5dH38lvXvEbhXO0cUsgOB6kypWHYbROEYcvMGcieSs=\",\"DufVHuiPBA6cIdU2K/oIWtuwFIWr4e1XF7VbhofkCzE=\",\"IWJ3o9kg4SZmOfYdDCLXaFjoXa9fqD1iMMaxYooHcFE=\",\"BDUnVWYmlzc11RHSUuKh3TtVAm49WzgySlDRzUTQ+fE=\",\"FuQ168/33HIkTnT+8Hzaat0FwIpSzwcwm9Lv8uqJazk=\",\"EoAgsx3OgOiaxeAbsTMpzqPGKtEVpdZc5oVV5ElKhnw=\",\"DIQMsXLc27FQJ0m7G+tG4EOaoWfKpDFygvx4BWJi60Y=\",\"BUKwhSVjwr+SjbF0NpyC2mDW1B6cYUJdQX8AnEb6xn0=\",\"IkUvLZBDvLq2jlJtIq9V+4NaPlVOUQGoLdu8wEdBGIQ=\",\"EbkZwLerxrKMWCqEwVjV1oyShHVQPDEvhq06LKl8DsY=\",\"LR5kRepn3KfsHbCwhlmtsXfJN59Fab0+/QYOBtC9AeU=\",\"JRugL2Qs1eD/NeAIoKMJxMZ4Da+p+sVbFjJW05pOQRk=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"Lwnl9Y8mLF9MmsJFjljcHD9eCkCf8/CV2OzslXrFDys=\",\"ExW3QsXeRGCicinpcOVGdQ2prpH+jKXlFUjGDBKqg1k=\",\"YObsuHI+eT7aBOSQyBi9B8yKly3ZANDL3EwoyeOsEw==\",\"AWd6pYL+727DSPGxlPT5eNavRzEzID0NIqgbCL3PJqk=\",\"EG6OZ8chPRxkmwj4Fj+EnQ4Ms2ORZys9xeYymDRR9Fc=\",\"IYuqvPJ8kEa3zlIwmj1tOiyhs5JL0vtkwVc1OohWfI4=\",\"KycX02/fzm4TTyVa2vqrPRqfcZs6ZhzB/kkLHhkPKxA=\",\"CwssO6xyYEtMXVaOT0z1NZYFCvHnusNifpsszpNOtII=\",\"IXoVtR/OG9+1Z4hkrMRk6VIl5H6kC7x4FVwUpB8r4gs=\",\"G6UjGunHk5SGhvfde+nERDXdapgbPogPNE4pNeFLZLg=\",\"JT45IV3cB+YEaEoi6y57/5wTixfSCJup9FHO4gnxQXc=\",\"KR3+HaK5aNODeisrlPjuqWBlNXdqJgZk6CJ+ISNUymQ=\",\"HTp+HgTEIt6bfgsJAYBRg3JHOujs2NH7gfSYG7pjEi0=\",\"IX0lymphplUavkveV5Fl0XFROnwV/daeYrRiaaHO+wQ=\",\"HWXwuZA3qFBseseBHDuN3+xxn9lRpzN90B4ixuAPTTQ=\",\"IojiTaumhy5hxw2KS428Z8Y6SV1BZJdhGY79fkJ1iCw=\",\"KYEfsapUolkoFnl6hm64Em9LMz8VJutuJbtiYiRJM2A=\",\"Atj0tPQdmrvJ8DxQ5NpeZP3+h8XQdUXO/NMBMfIPANk=\",\"KNelUvoqhqjb5BBZQ5sONWFM/dhB4NbvHbGveNcQjk8=\",\"CWzdyiq4x64gGQi6GmcakRfiS6e7wWszG6veoSvK1cc=\",\"I+OHvn6NY82Ldp4Ttxi1YLykpgLImSvj115xdHoQ3Pw=\",\"Afd9x7HdhN1+wQacBlEh9RwDakEjdAgHDEX/FdJGKmA=\",\"d2Xx4rKLrDT/TBV0ZUVj6PZyoU+xBWdqV/JVT0nanA==\",\"DhNW6o6AaLHvgof+E2LO101+HsGKG7Nub9LyJZO1Hpw=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"CdHyWIk08UVR+JnemXvb/JGS6nbRSQtr1eHWkdNAOvg=\",\"HUgoWgALZrOazKO9SK4412G1kNhG6+xIbbSJnR08TXI=\",\"C8VngbBIAlbTZhrG4ImKcIQAXWBxZSJNSUEDhm4lbEc=\",\"CIhnqL/vHriLLr002vNSTNwRjSMr0bkWRsEaKlRVawY=\",\"KZOOZ5v2vsTSk/7oYVGGuwkocpHWm9UJU3kPsJ23/zY=\",\"DzB44tupmLggKz65H1AOjN+H4qyfhu3M2LkHsdc/ENU=\",\"L+yg6kyrGAw1ex3O8eiBbKoRX1cvsto3Tiey99KhcQg=\",\"GaU+ThqKp6FQKf9F9Sj0LI3QNgyNrPwSXOfRkqCnB2U=\",\"GKyD9r3ivZBDLun8A/DmKHGWnouieqHe4scuL7Quk1E=\",\"LPNpo2pkqBsXxFIbF8jvZdCUQqwoWNA3hf/x+K5OOIE=\",\"Ftass7RFot0s5sa7efH2HxUBmgkChfyjj75U4EcExVw=\",\"G/pP3ScpjRaqBr3J3bPCn0iv9P70W1zoC0rN+kP6E1U=\",\"DG0w5LkDvbl0U6mWkx7Rm1VrOIf1TWMIQmPSeLwt5TE=\",\"FzyiEYqLhebjZn0tzBxIDhY6M4zC1HmSsObwny02PCQ=\",\"CqglCXV42R6stA2pPLc5+aQ1yKm/4u+PY9TTkmclBvE=\",\"KGnXJIGdCfsXIlirH93e0l2PCvsj8ah7Mx0inrYeAy0=\",\"D6PcCjj7uS5fcUGDU23SzscWNyamQReXP9HZJ6t7DEI=\",\"Hw9Q8Tjd0l6cd9+hXyIBvEP+gYWVGVeC/c6DNmT90kQ=\",\"GovYUqaoomsjBX5buF+sr3BqZIegZRx8Im0M3/CfRQc=\",\"INBFNTsivkEKrRKGtKNi95xz+WEDOSxcTtMYiXKYB9c=\",\"KDCiOlKLHB5+J3+XQky7FTs9MW/hsWfqATCb36ag9iM=\",\"Afjz2H70dnZ5y/dzr0ovJ2FBJNUnABXH1kwLE9Je5js=\",\"KEOEf97ckHEBqxuJFdcVHcvH4nQZ0swkSQ0gIPMZNoM=\",\"H9PcsZ6STSJum0KNKfcJeNdxW8vaHscOWYSmeuYVN/A=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"Iq/CohXlifQVESgNzZpNL3cU4gXyxNC2Y8nS2geiMdg=\",\"JWEXoBtJA6UuJ6QfktemXeU4dugy1dABP7v97OzcsX4=\",\"G9UF/iAnrBelHbKLypcIekM2EDo3X11ybElXxjwTd7I=\",\"E3C+63xippNnttg/Y55esHRN+LcZfkRBCWXGl5OKnj4=\",\"GyPuixSCaYWML0TDTxBY9E5PBmsrl6NX+BoGlLvzuqI=\",\"DBGDf6FUhhJRo8bQnEWQz1tzirtEDJ8iG2/dhrYrlQ8=\",\"HkG22L4IODxieWKP+rPjMpvTkelU9TM8LCS+pBsbYQc=\",\"B5IaXOvkx+M5uE8OY1pIWRNnWE0MEqZLVjfZYPNbPRE=\",\"FJadWRmm2FxYujCRnA8OUs3pGX2zloEWDFvjuYqruS8=\",\"HW5Iqr6yCYYFEqiTXq8jsbr+qHl6aoEoT7/m6BwfejQ=\",\"LjzoiPhA007YxmC/1aSLT0oMBA9bORZeJhVCeDH4aAM=\",\"Azg9uU6desPjq/4NJ0gsm6g3JkoQ9IKugPIm5RBCzCY=\",\"Cvienl7ukXOZN4T7Vm5tU47+RjRv9c9hscmTtSpC5Go=\",\"HvA++//ZLNLak3Qe70OovtgKdvT2jOu2FJPpcbi35+g=\",\"J0BnsqBCIpUtZXfeMkXzghmuVPBYLZ4Ft9igEzA5U0U=\",\"Fro3u+wKQ8jzDQAbvsswvDzz23KNpTjO7k75/0ukhqk=\",\"DOIpucKJuOfLxOAgoDcqNwp/KCIBtHeByv89AWQrjCo=\",\"L4BynHM4vhwN1hPCLoNu4ump0LBqL7XlKvAkuoZ4teM=\",\"HNxtKuUMEymhF9E+u/wf6G1VJqn5xZpQ4DHze2cQ3E8=\",\"JTCkZ7ogS8pF2D+cpMWsmlaMBTJm7hEmYHrDPH6UZQ0=\",\"A3EwP/D8aKfGLhe3H/mL1XFcZxfXlLad9Dmm18AAEdI=\",\"A3gwXiC7+WqgxjOTD0ARvCB4m1wb4/KSnWk+cExVK/Q=\",\"AaNjZWfB7zAF59WDm8qQCIiqNBl/uuWCz2gm+FUCDSQ=\",\"KB4qBv7Rz1sOC24D+iZSzWCPpHQpm1x9DlnGqjXAsXw=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"Kz2E5cYbK5eTlnS37xN4CYjwwtoQnnHRfQWY8IAjaic=\",\"KeK5vcjcujYX5WY97dif2sQLwXFPdn8yfGUD1/FG+io=\",\"IW965szXusl+K7BoFozxiyNQWZmtWRblLOlaI4lIBuM=\",\"Do0pjK6IFRWrD3Tsk1VnpbJJMUAjs4VtX57BpVmam1U=\",\"Dx4eRfhHywNZGZe8iBKw9CLdDbL8mcJBeoGYny5G\",\"BRMuVsqsY1HADecyR74M8J3jV8R4C/cF+x0SlUBHowI=\",\"LB99zrFQFInNR4LBPc4pff51r0tAZd/Q/VEZHg8DSJo=\",\"DdPySEMiC81KZlhmMeiIlWoO0m9xfFVtxeIPOLRV1OA=\",\"LzIkBDOSMGQj0i8OnlwViJ34SpwcbivUBqRpE50TKEQ=\",\"K1cvflIIxeUqdZ4EUAocfWQf8G31mEqSbcqy4XyihQM=\",\"CxmIhYk0yKNTRW1ExGGnY7bJjtPL9yoh4uRpAIM5mQc=\",\"CwznYWOiX3JJKfj/5Vkr9kMTZg6+GxYEckZrwJHFw94=\",\"FzsSjoc8LdU+lOQ4tM0Gbs+ijrQtE77e50Lv1Ovk3D0=\",\"Ai99YnQgeUy1FN82CXw92NLpLiiQrywa/UtfW8JqZik=\",\"HzQyAd8wYNA+MT66dpCIO6d/3sPWY/xohOvUAZOK8mE=\",\"JHLJaIg7Fpq5EtQyfO+W5tT7eywAlZveFQte2XCJKek=\",\"E0wkihT/E8QgL5l7uH7pMFjeYBRM8vUUEjbwFFVDhSY=\",\"IGtjYeYTklPmBw+QXWt9COrHTk7y9UzglkOSa/XI6BQ=\",\"LbLP9VKN56JuBkOxYeezGOVUqquT+nL59HXZqnxuyL8=\",\"JeBbijll/golCqfKAw46dDlEVHjlncyrFqYhko0BRXE=\",\"Koxad8YUILa06+l02nFAol6vnbyQkvBjERKD53Ot/R0=\",\"Ezibe/Y772pomDEluG+TtittnkeD+WtxDi6+0628vi0=\",\"JzHK3/BAYi/MtTP9YqDUMJBFWIEIComEiNVciQgzlds=\",\"GIb3Ue/tbkAcWFH4i8KF5o3juUBivIELCSw+QWCw4Sw=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"Gh3nIXxkCBbKltad+jqerQoy9isthkxc89ZuKXdhamA=\",\"Ib+4jg1St9zlQy9VxEOWTkbnKHm6q6eqoEV3tZ+78QA=\",\"HhybpfFBMWZ4bJZAG2H2h7pQ3HNdgVpOgRVwvdiVShE=\",\"A3jdEKMWdfe824AYyWzI2m0DSkLNtitAbFvACQCjN3w=\",\"J01twF3VUNd/sx00myrbXzjrSyfsFej5z69W/i+LMYs=\",\"JP4bwyjMleCFfonpnSypfzJ8IapN5cERpywsNyNefRw=\",\"Kpj6N6FtL4Nps85yhzlgAG6mcHXAI/7Vsy3+QH5jYFc=\",\"EJf5R1VwQrr0Rb31uKkgIZdsFM0DVO6I5D6MjFyuxKs=\",\"B3NKIRHZJe3BNJbQ9ZIqs2rLqEZ5mfX7cn6/6zejgHc=\",\"L8qIHq3UPNS5s73pBG9qJQW8RhMrLCTaTifBAtY+7zQ=\",\"J8lSQRAXmH1ma+x1jWA2wX5ECUC3fbR7QNU57hFWwaI=\",\"GzKdYS93PndyG3oPkVSzWcJKb/LuD1uXM6eKeYyvDyg=\",\"LhZXk7By6qNXbNGLkCdYI2hYEzm6PcGsupzUogJwFoY=\",\"IYZlQEJm351bprofWn2aYorXx0oJKGDih74U8L9Yd04=\",\"D0IXbdwshNErs3mPsrOgbkSkwzrDnr4DbH1qxv/aroA=\",\"Id1HtA/B5FRhSrCZeH/mXW2OqesOQFW7UeNMUb68Hcs=\",\"B9OiaDD4sUNCpjwat/cT24GtlO5uXFGcu6C/bSuHsmU=\",\"E6EG+xtkjISQpx6cFohuAEknAkAYnUQnjGOkb3RO26o=\",\"HKpZgl+G2izgkTT0rYI98frsPVVvl1YxLN2JkcO1bWA=\",\"Fc2tfn9AUDQx56jCCn4bSKzm0ZTufXgpgFo40EAgQm8=\",\"A1wqT8LEJP93yhgLm1Iqv1GfH9i1u3738fj8fTHBF8Q=\",\"CuLsV1da7rOBRhPSOQ+OooEw7TRyXRYFtYW06Mu/tLk=\",\"He1Fb/5WL8bfmZ6lzIDeD/bKX/8bD7JgcnPvG6UmLts=\",\"KuMHpPRnDRH1rBx6OiO22sYT0/EE4QfQQ44sptDtVfU=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"F1cKFSJuPLENDgz2J/7hV6+QDPSyLYvr+g8Fq0XVYwY=\",\"DsLLp77Nn3s7B7Wb4fdHs/4/QP8xhz3TBhBf/fuhQQY=\",\"EVpzv87McA406+h6AjOOxMnhvQ2VwlVLEs1cr6H3X4c=\",\"JxiC4eiNOpDlNqyREJ2JQK5BH3XefL1DAA1jFsXvSKs=\",\"KNeXy4jjbM6H45CQ/t+hHfrN8q3xSGGNJi5G/abs2Jk=\",\"CQMWVHXN78BWvzzqfPJuOeh+fRyOFJcnHfJDMK0C2Ps=\",\"BSHcA6vPPBUnjpBVLoFistrJIiDZnmnvnkSbWgNwr7A=\",\"H4Dkuu4EO+shJZPfEVAaecB8iY32zFeBkMZ55kw0ou0=\",\"ARM6boxdAxXSd1IGuElYjqq7C2Oo+t3GeAasE/rxJ7c=\",\"Iq8isGS+ytrhE7JNET8Mw90NF4+cxW146EvzQTVJGKs=\",\"FvkfIEwr2E+5B6erdEJ0L/JKuDG6JSgGyntuacd86U0=\",\"HSwC+493gPqiTz2h8p6RAcHN5EYbfVZ7lJv/XOHHHuI=\",\"D4541smgVa8Ue3RDnezOE1aRVi3FuLrE5HH+y3NWI2M=\",\"E0zR0shvqjv/OnLLYiYQmIAJQXPuLMgIq+b5WGvUeEQ=\",\"G57c5Z828g96z/DNeL32FPao8bz5WunW3b9cjH/PYl8=\",\"Wmdx2vHyuD0KkqEY8w1CF4hG5eIJuCSRZW/r72Wr8w==\",\"FQjO+dmf0D0bZHm5A5nKnf43kvxjv73TVmHg1EutgJY=\",\"KRzFw/Za5b8XWY9DKu9d4IckqzACbyWttw+F+zuw1FU=\",\"LHcjqAezlEcFtx24wEzEaIINO/uZcGUo9mllu4yXNNQ=\",\"CbsXHXyZ6LWzXe82JJVwdNwvCmvrhhvfQXsq4pCDLcA=\",\"GUPKVwfudyuDkbV34pXa1PEMLbHHcOM9jDf8IoDXGug=\",\"HXhSWIzPDFFmOr1luHAErViAchAZIU4AGQzI6TnrItA=\",\"DuhxEY+IKkKorL5zOmS3MzotFEE8URtqedWKqWwI74w=\",\"GuGZMOCDdUFA3YU3jKhweP7qFwPDwEBOJ3a7+0zbqNQ=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"CnyTSgNH8N5+nn3aixrpsJS9ajCbgyPgZ4CCHXiU+14=\",\"D8++co9cHwZXLlp1AmDv5CO7aZKnsb+PDnYecnfnHTA=\",\"Fw3Knw9ukFc3LjgM+pJOZcuGr62GajMOye0169rhlz0=\",\"CkqRfzRLzjtfklaEUKTxfmoX4lHHNX5wjsPW5Vm9ibs=\",\"En/0MlVffgi+r+D+26DqmQtJyl30LLuZnDvXuREZU2I=\",\"BltuQ3y8AmwWIwcXd7ELjf1gWjWY+9oGh8dOr1Jdwbg=\",\"L67o5u4ve90l/zbDGJrtw7BcS9r/3mQMDk2ShPfZqKU=\",\"EpT7tDKsOGSpwS6r7xPQf3MrZSg25mqVTEhXNYmSQdg=\",\"LdOrTwNXPzNiu33flki60bQ6xpOdbE+p7nPcf+Zt7uM=\",\"ICm3nYj/Fchglxru+y6+DVI/qv3WCWZCsBiFZ5PnS0w=\",\"LlxWqwk07sb/jIIk/+6mV/G5n4gKAC9q1TUtMPfAuFs=\",\"JIiK3uQ23We2dChYgJBzpcQ5PWEoOoJbZbiDEU1EIg4=\",\"H7gMZUKS1k8k0zH09vrBogp2N5hlpjMedSjeI29E6xE=\",\"A+j/BI8j5TpcbvAtx9N/MWzUUo2k4fbLxFgoieFHADk=\",\"I6TNqGhyb6wWZZheE9gA0QC1a6zkP2finaBXM8KjUfg=\",\"DiWhsTK6C/dvHjYb/2ubufotOqrRFPWJ4QBiUiWgS54=\",\"D1NMWtWcnRxKN72k5Srehm0wW5gjCaAE87LG+LEOmFQ=\",\"Emn9XRV/W7Yr/b9PP4jBsraE5Azgd0nPzmV6Nz4eS5E=\",\"H7cNHsR3b5G0JnfIjSmDRCt47wDgO4K13mBqRf/TtOY=\",\"Ke7MItjlcl4AyFoGUe2vXz6VMFBcri16Pv9u9JbXsdI=\",\"I1XJ6P2f4OtoHoqh461DdAp5zJ2TCgKf0WHD7jL3JX4=\",\"A5DxL2WMbZKRsRj14RZyfi9KBxQOjzVj7FsSoP9vano=\",\"FAJWpKnMM9k+tIa5a3N9vRdYCnfyCSTko9h8I7JbIzo=\",\"LSvpmD0UyB0suGZbDAj4nWFAU5xxLPTCrIzHWy2v/kY=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"LNzgqUqowazC23k1jD5n2VSYPvCSfcayb5q62CDx1CA=\",\"9J62UxqxZ06ppv+IvYFIaQwErd+akWSxP/LEzwCEQw==\",\"JkAwFOPMSOHPES7Xm+6O4UZ6zTA9DaXIi4aD44vLcgU=\",\"DF9gK58/2o5kfvekKvNHQdEau+Cpn0ZMEB5TS1HN6k8=\",\"GKw4qlXpXv75jDRzNagMr3/Fw+/JWQEyHjsTsSz0ai0=\",\"KxlgxyexC2ZjKPDDf1y7OwahrVT2G5UD8jsC5cRnhRk=\",\"FvE7U7PGpH8Bxz9+JsL+arYbPh9eVTQT8soSflPOSHk=\",\"D8TvZpAh2G0p3AQTm4j1WlpX/gv6JTYxkY4NgIsSNsc=\",\"CINN35b2c6eG3FrxJeuDyf/hU3/Hc8IdEBdoqsetpXo=\",\"Iz8TwM6bSIZ97biKFbFGHNG+/euZqcCs2GPdReBnJQg=\",\"IJmmGQl/lWXKZayWr/GcvqFqkOBWozubSdy7clkD7es=\",\"JpiYqJCg6xHpuE22rgc1cUEj1PCqCjDbGDE00nnxqQ0=\",\"J/sDutf6RqYl+wakeZv3oHzjv43AGGDPYXT12c1JUi4=\",\"Hwpb2Z/ZedDt3dJD1pZhUnBr/8gyb7CIVFs42V/aED4=\",\"GwggZb+y4VFVLRrrPyQ1roxSLbecHD+4R/5ztyjeoFo=\",\"GWhAoVpl7kYqgxJSC4aAhO0CE8Goga35B+v/mSImgzo=\",\"G7fXvE6g97j7WjsFlHjOf1ziBp59YqMHwh0EAPOGBJw=\",\"LAs9aHImo25SPAZ34POUnqpF0NO5ycLRGwQx2OzHQQ0=\",\"KiIJasrh11rt2PyEPYEwzIabFCQF05Z3gez5/wBiz6k=\",\"EdPfQeHTF1HFsAt3XzOSW0/V+PZt0sWy4uBMsJD/uXs=\",\"KdD8CN7TMruko0zty44+yp2aaSml779Ypy6EmFapzGc=\",\"GgrmZMOJ28EQRrsXDA3bQixMbC8Qxo7piuesjADE7oM=\",\"BvPHdwaXNjfH8tW5vZLW4kJLkmw4osynvKXfoHlOWEU=\",\"BWllYWst9m4pGLqEDggJuFpWej59E6xfHlMgYa+Falc=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"LfzxHu9hoAjyf2Gl3parwuMp3O1wkvlB3va1I5YK/JM=\",\"BPc/WvuC0il9TlFJjwgo7rPt3AFq4OFaKp48//NA1QA=\",\"JikPxJIiDJndghxKTRrP4bf0CzehO706tRQFqflYrJM=\",\"B7U4CUZv9V4uT1rQ8CnMxaGsXSYXMqsrAQA36K0IAxc=\",\"CAylGI73N4uTkFd3Sy7NH5ir8n3NRz7evMwGrHqULiY=\",\"K2sBQ0pH7RiLQxV+GWTzclz0+BE/sKbLTAHsfcK9R+M=\",\"LCEGtctAG9aOFXRjSbViOPZw5YoCHuKsiRUojVNhR10=\",\"CI7hC7pIlHVUeYS4kNfnlKslU18fzI+uBKM9MApetsM=\",\"KRCORYhRKtCrKOQyx4n6PT4NwNYALhnMP7Z5WnXWlxs=\",\"JBxIF6kUgUztIcBuxTUehe16kPKEPSO9U2Ouu87d57k=\",\"IuzeaZ3I29fNPYHoDZqBrQI8V7867FqCOYcUcvq8VRo=\",\"INzL/j6EtA85CL9D8FEgSPrN2GhspfFxkvmDWZ2qxu0=\",\"LJY4kzPFRZ7GWWDYSLBrrU1rirxvJgK/2Bgkz0PHIYo=\",\"KMWd/qb8q2rnO+umEuYgg6WLuAMGo7wnRqzgnWUMg+Y=\",\"DdR4pixoccaZ7LTqEuRUAnIS/Y8eA6jvwAXfbSDs3UA=\",\"KHcue+ReNrkMLUOXSMDXfAtSNxHqOY59vYWw198TANU=\",\"Kjd0ADm+B0OJ524e8AldfREfd4By1KVzNOvKKQ1meko=\",\"LzeEXZSuwtY93PLL0/tW/q2S6o7NgZ1+rDwrA2xsLO8=\",\"Fe3Mxafmld/0252s9AVhLwC6gKFt/aG1XPS+7t+Q3b8=\",\"KBcTSEW17GrtpJYWRNUTJp+G4HohrDtzRNWC7Qe19Go=\",\"HvU5B5CioyFBQLEJYtlDW/sLTmziS3oeoMmvaJI0trw=\",\"GEJ9b3zZv3rOY0HRbdhFzRvRjtS5uOzcqzb6RYYIVdA=\",\"neM7x+LveG23TbfuzH/4cgRUY3vfUbKBpKFHjxmLrg==\",\"BdLGOqLeRTT6TfemxfbRBZlBL9JHpZ93g2a/9XBhEPo=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"Ajq6aVFU5oT/SCdRy3YdzBY37F6ZquoY0L8uL7JusUI=\",\"C6IIwErBHvRUMRLb2IISkX26q1qHJo2BWKSHrjJBWE4=\",\"HP7QtYAA0+9MrB5v5U5kr1Tzk6zKyk1bjLBfYa2c13Y=\",\"C6HfTqAn+DSfyxXR7bMop2+1Nqtl69U1eHlFY00Jxa4=\",\"HhNrRO8UHJGUXIdogFzgEAGVjs2smwZYdNIXF9qZtAg=\",\"IGQ+PzxoshRgXG3y2ALh5Tm0ZbmDB/zdD41b+hd422k=\",\"ISfQ59lAsxMvq2sc1xlXf1G/jbUx437a1RlIde50k2w=\",\"FySc2r6cnbShuIvVY20720jrC6ahc1dFLJf2lbCA1fk=\",\"CmuUgiiCuhyh2pVFZq0wMi40WKbg3bFD5PXzBvyeMzY=\",\"JIZBDfj5tIF9gq370kquQev3xLvYcI06fDsYqZnPebs=\",\"DAt2hOiuRoRed2a/diDSeRo9IYv9gS0Aj3OtNRuoaq4=\",\"CX0+4yHw24wEzt4T7PqHzKb/whVlPbzb9iglBZuFIeM=\",\"K/9x2vrkWL9IVNeVeGXiNiuZp4kc3Tjhf3bFgoqhZTE=\",\"D+FfixM1EFiAa8rxb9to88zfPDDxWoWljfLc+tcuKWo=\",\"K9WGSAqhjBVfaIx1uoEv+BmQkwwar6QFjrr2Z9QeU8o=\",\"K5HLcvxF9tyx2r8Ec+JFXyi+brG1nP+Rtf7zuB1ijuk=\",\"DNrLXtIPGGaKfD8hNm4EFQ0Oh3dW4u4c7hGSEYSjGnE=\",\"CSOdabYy68wfVZdSovqwhr1GzuEgUEqMlLRCei/s1bg=\",\"ErzbayDcd9PVdBs/xh4exvUxN7AaI/SMKiZ9b9WcoMI=\",\"Eepzs/BGkM4t3vwq87+PgFS6dNwxOwnsCclvop6GWw0=\",\"DdpkZ8ZLAknS8GXfkPvHpoUCKs5tnMbZyYPb19Keq1M=\",\"FdfGHoqDCOSkPZkpR8AmK2W60WOo8QFCPe5kwivDqwI=\",\"CoJaz58J1lPga+Xbp8pjZI69YGA3cQEIDa89572dU4A=\",\"LfvfXUJ+L+aJL9QNTpfteAjdgj6tJ2KdiUmCt6ugimY=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"HJ6miUPYyEY2QGBkbeDjNTTVKKI62CuLpocHVCgdtVk=\",\"ChUAiuz0P+S5o73Cb/A+OGfpdDUpJss60VNfdFlkipg=\",\"CrF6j/hPf6XQ2qyVw25gb8bhM+fLBPD3tTNOjmxE6og=\",\"FJXYiDePfhLAFsqwvuJTSQP+h41WUK7q+zgUs6ixzLw=\",\"KaBUqkR9Y7IST1DdvEwtlDY27VPyJlGq+Q/ZPc7fyUE=\",\"A5WxWoJ+N6at8xdaJpHCiKymjhYVTC2Y2Wuw2+5qP0c=\",\"L0cGa6uTSd+mKyXstDNUJGpH7KYhbB0Sw2YB/jQT6ms=\",\"GxrYHu3lL4qMCv9JoEHc4LVaHwbIJrRBlRttZUuAQBI=\",\"E38n8Lec+IR2EQs05+9jDQPqITOMIAMimQFX9QqPP+w=\",\"Ex/4XPIbGmgzYWB1fRNeHWBRRPgrOtrA/aEQCE0SA0k=\",\"X4SNWS6SGww8ejaoR2VIexNX0OwB+PMpqoxvJm9KhQ==\",\"L4mZQSro3LRHVBPnL2iBfsGglCcnRNMr5Lig/3S/3xs=\",\"C0LgMiN/O/Ia6VxAYoaHUd050PaMBt24SfaRKI8z4mE=\",\"GZyLRcrJa7DbDy3L+Sw2EZHO3/DZSWBqFA00IN+tMdw=\",\"D9o4tfW9EQDatxm8+ziJNx9auc6cQoaOe7sc4tWoX1g=\",\"G7/mOnVYsOmgArOYMFjDzzmdR59+IZPSSR1YXVQaCGo=\",\"DrAFdj47PVWEB0Hwy/yV/lVIOFToF7TXz7RUmsecs0o=\",\"Cud9Sad35aIqP8auwkKnqA9Srz4c05XLiGKwm/MjDs4=\",\"JcHbSNJWFgjjR4yCOLOHLept4d5ZfE8m7YuqlYSA5bk=\",\"FQv4gbvTIwaO0HzqhwUIZueymBjz024I/NNbMd4huF4=\",\"AunSVCPCctGYnW7F6YOBLnNXX2BAs/d1/JvRx4F8VQ==\",\"Ip7W8FKXa8+fEeSPT8y/tFCnuS78+qUywchaBZ2zPK4=\",\"A7oEznKngDjGR3Mjno+MHaYIuT+94hws6Ur5YVrhD0Q=\",\"LqbdZIOFbKKjYQIifcFH+7Kfy2Lvk5kVqdtmwQOpmrs=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"KedSN8Hua7h3tulbc1XKwDFw+/V0Ib6NvMUPCGk9tYc=\",\"E3t2qEow6QajiCfMS2Kxoi6ULYNRkqmMUU6v2QE6LcU=\",\"Hio9zaiGirQH8VthLEBQaaXBxUWvgnuw+PbjLcVeAnc=\",\"BbccXRYTzZtrPP6UAMtdhYOhbbwRQs92DKaqn4Funyg=\",\"CnYD7BIujgF4p8sp2xgeKppx+CXv/IQVuNCf63v27TE=\",\"AS5KYd0+mDRmK3jZqCDCVmCSYDkjfvV5/R6yYLzhMRI=\",\"F8idA0N3eked6jF0TyhIrAYEVpbY8AF7f6nTq/iMs3M=\",\"EEohvcuOSSRazW/CgbsSY5dvE4eX8ZY0x5Qj80nW3e0=\",\"HmrTq4A3vtLjbIcql1enlmlu4pUPl88x64O81PY4BQ==\",\"JIrWlmtAEIYGCpE68BDaTqKCwtFGHj3BAFabO9FoWhY=\",\"G00htCZEHK8lRZONQbyzs3wys/oV7Y/9EWLmUkLqTTk=\",\"KcRCLJlZm6sXRwq5OI7nlpUcJJZFqxZOkFMPyFHqH9c=\",\"HOUA5Ad5I4QizUegptfz3P3AxpAoaZZiEbC2qaz1Fx0=\",\"GRAuPHJ4RPuJjAg7wf9F0Qaik9jc5u1DiVeC2vaRp7k=\",\"EpR/SsL2/ksRJaKNF8xKPi25L6sOC5dyjIt7sgRwePM=\",\"KnY5vNZZHbr+9J+2HbcQ6coNcSy+gcuGNA0PFpgQNRU=\",\"CDrBUUHpSqcyd6tSHZ66RO4w9OAtbpwVaBcr0Yybfms=\",\"BIBjXP+DFNkX2KVbNJUp3GMxcKFD9IZXE/EAB/f0t9k=\",\"HAPKLm68zpovTOZrsDnQNrK3QkrpFr2mJAKA1eXtCh8=\",\"FefbfSUmb2BLj5Qu+04MMsHkViEzbSgPG5BMP0BSk2o=\",\"IhW0GUOwZM28IBecmMSmlIyM8knwTd0Y9RnpWVqjOw==\",\"C6PSTlWB1pWcK/nAxpVg8dy2SGc03uVoNImLl+jAS30=\",\"EN5su3EkGdhNvs03WWOuYXt0lr6MqJxc8+zp0w9PhUo=\",\"Kk9Fc4Y8v7GJ4X6AvEZRYaUI3Qae5PrDRsKwJMiLXLM=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"B5whjvovy+HKxYf6qJvPlwE0ORyO2t/J1UxmbAkaaCk=\",\"ESMWQW77f6Rb4sE0OVtEbwSJAlMVVP044L+7Nk0ZaSQ=\",\"DXfvRXmUw3+KO9AGhXIxFnPqJrD9RzqhupwlxqYnaS4=\",\"GJv7Zxv0IXMHZOdx/WjwHog/mLCurG5cm2I73xUF6nA=\",\"DXfzX0qzP9gGJb6ClZQZCt+s5OpiOrElIJIP+OcHpZE=\",\"JiiPerFrGBL/Nit9KDU5sY39CDYuKnxEZnRKi4FbD+k=\",\"JvG9ZEp7MRjlXWvu0AjXLe/73pKBW4hx/42GEVProDI=\",\"Drih1a5AgTUsfvPVCwYigW/qF6D7nLFjwOVE2op+iuA=\",\"DbVrYmSCnJnwlO7wuMW6829slRhVWpuM5YRbTTLrluI=\",\"IIg8WZoZWHN1j9kX9E0geXeMy0HcEouAA8wAe2/WZO4=\",\"AZ8p+vnFOTzQt8B6kCRXCW7mVD0d+vIqT4l9LqZZmGA=\",\"IKK7s+vB9G+TnmQ1bV0WCbXlC1s/3HRitPr3Nc/2buY=\",\"DfmJ+qgFXfc7wqzZ6NmEK/36gRQEiOz2fbiG1Y0qhNM=\",\"HCCPjomyx/1lqV4vzOQy9dqOcWQEZ9IfNRsWnQM5XJ8=\",\"E1b7zaQ/eZmLKDP+buqvY4hs95n1VQXYEWTIggCRUdQ=\",\"Lpn+zi3Cqjj8QFUXGWn+r7g4pfJzXsuoA7ufTRil2uY=\",\"DjnGS9KcYshTQKuOtfcIbhyb1zOUUXmxCIkflmsiCHQ=\",\"CEMtA1K85oYSF7+zvfCgTz7L7q7i02DNWijF0jBZEdE=\",\"EDQk1/iRgt81zy1Z28K0U1Qr6v142VmVpeOGqi5Vqss=\",\"EOT/jjbnaELKEeIiWS0xiYZon+1zKLlMwVEEyNhuLe8=\",\"CmsAIBd+dmuyNL7H3uczZ4JRsciJnFFu0oMq7CNiPFo=\",\"B1FFI9Qlt2s6eBIFdyXAczNXcCO8ONcNB56y1STZT4c=\",\"DmZkCNYBmwyW18ndWrngikfMmI2TKSU1Jl9xCHPaWwg=\",\"AjOTlbBhfNlN0QGk0DBR6UNjJwRKxHDtBCC26b2Ha7U=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"CCPpz1nZ4pWQ6l1cqmAmXx7vue9JeoplPiHmuIS/OAw=\",\"JQFbwSwihW7dr/UU21IHlSJUKLi2O4LVTm6tiJBOcW8=\",\"FH9INq+DTInhLFLaXXeHJsh4vCAF546cC7Ru1HdAvIs=\",\"aVw64/aqNi3zIg47SyMNOup85N+kYpoLPaLPaKsIsg==\",\"LedpW/G5b8yU3WufRhhKmEOpDM8YkQk2cM/yHm+ab+Q=\",\"ITJjRkUZBqgjRf9qkWvH/6E5s+3xzOoSscyqVU7uX68=\",\"ES76rcOGs8Gr0tFzvq4bWpQk/lf7qywoJcLmp+Zj+/M=\",\"GipcKymQ8Ay4veRbV1ic1/0cXg31h9ZxiZmhiT8LyMM=\",\"IIfpWubfJwmOPrzUbz5P7KSux98XLV7yk4SfZxMieJw=\",\"JUwtebxoESA7Vc4B8egpUJUgHw8DYTcINmp69fe5YAw=\",\"EPI904PS6pUk5RLix6O3W3asx3ZqlQZxFkk6DR2w79I=\",\"CAFUNHoCmA/1J0mWNpx9Q5lR77EbGcNgcBCwPegCuB4=\",\"FVlA/G4yNvgue3JX8IKLH0PK1oZ3Vx2BTuqypphrIj4=\",\"D7pyLBu2Vu0cFiA1BtFaeMeQiKncutAKGOcHtx8yasc=\",\"CjHIHbg6Z0b7l0eYlQkBDFR9YZ0YIymPH1Z0VRR5vAk=\",\"FqL/y+mVn3UiMYjuLXvtDEy53fVSyY/qhqbAHxx+DdA=\",\"Ln6bnHRSZYGAgJc1RBlnny2Hj+QxKTRhOwGCDWYID+c=\",\"LfXVz31I3iB9f/BrKSlhCER4pgI/TuGg2nYZAIl32BU=\",\"DhwRC63LqNDTGQs33mLe39wqJWdfVNTFvWlW+ltsHZE=\",\"ElevGmL7dveiq7Pd6yVr3izDFZbtmlqi2l3wXLVrnrs=\",\"EZd3TvQXXWdJUekdVq/uYiniNqYRKoAsIGIUI7Cmbz8=\",\"FXh7oKv4FEOKPDWOSLhMrDjE3PZkQeKbWom7F7bcUK8=\",\"EN8Es/KXz9WCYOGTNCCpbxJv5KP51TAA4UDU9VwiF/k=\",\"JlIq7bTvckWtLlCrq+0+Mg9OwwtD8r8ZBMlWyzufQw4=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"MAhDKNU37raOVdVZPTUIJPAbzJqdjPKFWJgt3kO7jdw=\",\"BZIdF9WWRjqY+r0ukOLtku7Ki3kfdRNMmqdTjs+Q5FA=\",\"E0nwWz4ykOoDC28mlu1t81wnIF5r2QS1acNj2YXIH9s=\",\"HZLEYKTNb/5FgqWqlf9qg2moBPVdA0HdlNSV1TjawJo=\",\"HifOlbatYaZ9prf/AdBpmKXma3CtcIaWL4tvZof74Ao=\",\"AmC3gFLzQrD2LEptdcKuxzIbccCE/TZZJVcT3mZ8x0I=\",\"Ex5jBpYmZwwCLd2gg7/tkygO09slLVGtan6olI68mmM=\",\"DYm2x/HgRuE5zUuTe18w4pO0eIRarB4eZM2Qc429L+k=\",\"E7ZiWFuVpiz0ej106XHdGiGVqZh7pcNTSbKsKZv22uo=\",\"KZzdyxr+EQKZssRYmIiv38izMpOktPfPgip0qSL01h0=\",\"JD+TMTelN3yjmmT3iKG90lAn5MFXmQiqIynBjxNlS0A=\",\"FSUX2kZ3O6OlcIoU2zI55ZtM2vhMpVumt8Yem/+2/uw=\",\"GBHAjykXPD/9KarrLZEjpeK1vDLl10oj8NwCYZn5yNs=\",\"K+uG9/w5QZYoCb2McglhPrL0A6HbkKysvUhwNLTnNOA=\",\"ItQPBNJWFzI79kgacRb1x3ki1KmNhncw6XF6GBwk69s=\",\"B5hMV5Lf9aJE5F6NnKE9eHz1cl9FUTWVu/8UBfihL2I=\",\"BU8W3PhCZ/29Ao/E6I1R+nYkQFkg1vhXcWBhMMc1RUw=\",\"HhS0KhTccnLRj0fCjdgFD7OZOwwFcaEvOz5KTEnveI0=\",\"El3ciaSu7OptNiDwJsKpNy+oVrU9itXYrUlaXux7ok0=\",\"FJ0JWDyzn0EkpxRZIyBbO/txIcYqOdYjjPs4DHgkdbI=\",\"DsrnaYu/mU1lah07PfVmg1ARL4CleHcwyNMkNqrm7jI=\",\"DUj7sc0iLwUpQoGOc7ElYvdJCJL0dEAidBUXY+pmg2k=\",\"If9uDp3Cxe6xl5P7Kz5kzBEjO4HfQYA7ZSSuUQzwop4=\",\"De527vdjQGgOTz1KDFG4ehYttSVOmBp2hHVuVdi1E6I=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"HHLGEO5yem3R6IWgYH01zKkSfwBuJs4fmGutibw787E=\",\"HYv/IPU6G3+9PtTwFcoY+khMxv5P2jghAW1Dpi24VoE=\",\"HBPFFJ5fq+3VJyn05FAqfQ1QWMUyco24N3qpLxw+cOg=\",\"CiBExcQcDodPAFUoMn5pWtojN9yBySV7ZmOtHjdBajE=\",\"J6FZhFyDR9znFbTefTBdUpt8m+oJ0/sWFbadXQ4umZE=\",\"Aoo3MWsRGCL0POKHxjLNzecL0KCU+7De1JRnrPGZzYY=\",\"BpsAe+T//WwWEbIqH3OrqNM06znjZIj23K+PYbB8yEI=\",\"FZz+AbBA0u0nKTNV493CcnkGAY6rTwviOg+/kk10vRI=\",\"C1OOjzRV/y1/lSA+x8fRImLX0lsiSpJQCSNybyD03/w=\",\"HxiDknQOy0dKSliaO4Pe7KsMHFg8OQrh42VLyQ0HBd0=\",\"CF6Kt3/GgNv93TpB0fdJpbJfIHoQ+7WRsrK3BwXYiRE=\",\"GAOOWrhZJ6Id8X6KXbbj5iJC97325mKi+XOnlNEy7Lc=\",\"JZdWdK/MljfSeiO5e72LgodL7kHnuEBXvhOVFTH6n8I=\",\"L/nU4pVpH5l5rPWJxZmR8viRfGNYt25hobU+EYTdNhE=\",\"/40FPYQYgpR/tNMwJsSJxTtBDbt6/QSjRh8sa0aGnw==\",\"HG1BlSxTRgsJS7HXJwWefvCP6wc/HYRIRdU7lkCgn2Q=\",\"KRwoYycxLFM9PiRNc3MuISIC5UaAfStddYLnu90osQ8=\",\"LCnMCN0ECizPPFzrNIgsaPDHc9BVdms4kFEnay3Nr9Y=\",\"C1HWUxrvcg1A2Hi9+1So3ENoYGbPhebrUYjAlLFzkwo=\",\"Lv9+l2aSgAfSnSVV9GauIRFm3cA00TUxcoJGsjhQ7bk=\",\"AchW8eiYzZJB334b2yCFcGGssdglziucBceFvjWlBmw=\",\"CojewnaY1fEcPiYZt1YBu1+L7WxZ3vpCcDQbgEjK26k=\",\"Fxyk26aafyHDFensHUMk+KNlgoUI1iwgWgyKtVMiRY4=\",\"IZImTbd92nTgWoxzib8xREfsz+oykFT2lPrSrBGomX8=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"L52xJyv42vdGH2igRiJr9etQ3lIiY0/wnwbNCMjZBkc=\",\"Lc8KkF9p3MAG7PUZVX9QtgzsV+QG++hc5xkkCsitTZY=\",\"HvHo47yr3ZxZ9ci76cjrL+6GD+tKyjDLAzk5TdmqhFw=\",\"HxEVeu1uA2eFWOGH5zH05scLmPw2tTN1YsVlaA5kvAQ=\",\"o4zohMENKNgqO2MW8wx/yDP04SBMmEt8IAmKE6DVog==\",\"HbeOOE/HIvEpCjNyMdPImGRIuGet3igO9etyxF+73gg=\",\"HoFaWy/0BUVL/7iLPYrkKGgjdf3YWNn8L+4/ds06bUw=\",\"A3CwKIXBkraHwsuzMIiMn0s/JqbAVPcLCSrPltk/fJA=\",\"CCA/n/jbdXbhSHb0W+cI9Y9I5flRvgi7206c+yPCRLk=\",\"Kdwa4ZofBsbWetEh8YXs5tB1HQrDNam3yHm6sz37DoQ=\",\"DTwa8PrqheVOfaV1z/gOXAJ884dtoUE3dBCigCatRhk=\",\"KWCarB2Ivk1a/13ICOATYTCaGmyMDe/eEm+1VMeZROI=\",\"LaUjG7hLBcRn9v4rmz472neFT23jLOs4D+AwnDyMXVA=\",\"JGWKvEXREJ+ctO8c/OoR3jq0QvE+cQ0QwLtr6+WwEu4=\",\"Hzjq0mNoZfFqcuOT3dwWIv/FQX5RlNbBWti/vQBzlG0=\",\"DeapWQLYjfAhkkcWkdqkrFVhe3P0SKRhHz2JFygxVCo=\",\"HLjK1JlMOvOirkWEgnZAzZ3VAS/ktVE2vfUzV7TBaL8=\",\"DEsWb15MPr0s6chOiLPULPrueq2SPZgHsEor3mEVGxs=\",\"ChJcVkvYGLEU469EqH5pQGEVXhnLyExQ4NKWVt4qA9k=\",\"GM0W+5Q+NpZkuJ24V/Z4ex2CoXs5QPFa3UBH+L303uE=\",\"IhALhm+3025laZCiyDK9CdfQA2/8fSaTsi/PXCawVzU=\",\"IigZFxbzrtkZFlnu2l/jRrgK9YC2ZhWf8lRWFyVixeU=\",\"LcpslsMChLuPfPNGcQPTn5Iq7dtDG/o7Yqe8H2H9m68=\",\"CiQqSIKVTejT0ejPCYQjbNRmWr27TZgMYlwdRwNJOA8=\",\"DQZN7oJJKNOfKovn0vpYMiPDOZV4TSKIOa3eJVlZJZI=\",\"EWyFolDUYd1b8iSVNuUN4jq44Ch/XLxiNjxUxpDG1xY=\",\"B1Dqr3agN2nJfGhNRIrHrirZOVCnXCTzSCNAvSn1Zvw=\",\"DeBXykAab6ihfTWmQ/cVFWeJRPM9YlN3jRFrVbdZnPs=\",\"DJRAk/EYPS/YIs9w3BJKB6yTl/OpQaUNDDXajfXjUYA=\",\"GTduW7TSJm+DPX+uYMjF8vSEsgPwCAAwOFFcZuJncjM=\",\"FpvMMJ17b4xzWU11YyYuzTMu04yzF9LEP2+N1wTTIXg=\",\"MEgRUn9ha8jvWcVVZTN/Y6QglAI7Or+JrpkZMDTLyck=\",\"JL+4ZhciXt3YL4YyAxXcaOin+tdV7ECAEpaESdvhzrM=\",\"JC9LOjU11TByYemnXFcObAYXTM3zmMk0lYyhKee946I=\",\"Ky8oMnFFUJXTwgEqH0/aVLqPNlzb4BQyjgdT2Ugk9kM=\",\"A1qFLnv1z2CwDxW+GE5wfTRfoifY5E4fTDcFDXmlOh0=\",\"FQ93faIiBxAVxsTgJfZ7w1b9/WeNmEDdLJO6GkP5jvY=\",\"LYxwA1cxrZ77qSghqIEZ9rgYOjYr5kFympPWoyfAOAk=\",\"B7YgyKeOCeSc5UeqeDqnjz5FlMSas91vYCvGwDUdgj8=\",\"IxmWtZJShXVWfTnQBkWoOxOSkJO7+gDWpmHkppA1HQ8=\",\"BOR6cuSbnFqj9p9q8i+gq2QMk/xSTdPFCEhtZvB5hSo=\",\"Coy0sr8/DF2mceSPg+XBswGPDTEgCm8Z/VGV2yLu9/Q=\",\"GLuwArRvLl/sKxIPr4eCLKjnes6U4DqrXBbEuTFzncg=\",\"Ar+uGwVO8ukk11qKASg9opEDxXutEp7IOWzidLpFJN8=\",\"BtEBsZR30WJ7lUJYG/DN+rOLBc3v3LgZZcW+ANeA8ZI=\",\"GK9h9hhP+F8QTCvvF5s+xaXSQt++vo4nopGPYg6KW+g=\",\"EeOnwtX3Q3G+sYjG49ehSzMSivjuModUbRLXd3zvcMs=\",\"LeXWp6JzQ90EIqxxuNQJtDzLC2cul4+P39IU9NeGZAQ=\",\"Iny0O5gYkk8qJYiWSgrX3fo99iKEtLOxAZmlAe2XBiI=\"],[\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"AVeGI93+MDMRrDJ6QyrumshVLPN9e+m0MjyaeSxXdsQ=\",\"F1NkUVGMJlIJwtnYUSqA9avk3zcr2a617rwreZ+x2Xg=\",\"ECW3yLWzjM1v/32+oyFfahzIDGSXPYlywLx2dMczoVc=\",\"GnwUYXzvs5zeIX88JYO/NdU4dQypgY4vBCaDIsKCAS4=\",\"J5k+j9joA4W3imIUZ1QFNh3uy/LIZEFjTq+3yZ/N2o0=\",\"DrfCtaxwBQHaGByqptQoN/b1FxOSTrPl1lQ4Ae48l00=\",\"IjE7F5U05LavFKVvjuwy8CxBmICTzH9P77KBlWJQsXA=\",\"AneYjd9/ouzPslYLKxaeEqSN0LNwe6PPHApRTEhSymg=\",\"Kv+QUGFyxDAMlNIMN6h3vdmGMMiZqqALyD8bfZnmyUM=\",\"CtdTewgl7c1GDQGXAyO/XwwzbVe07ASxVeNhBoIW+Fk=\",\"Flc+Q2Hoftq7Z/BKEKhLhlWnlqra8KznHSgqA+9zNp4=\",\"B779YlNRoulwhgr+XvDqsH3H3VGOthRd53JSvEdppLQ=\",\"JQ0sY5EFycWjzktt8BlzzEGBn7hb6IYIQHb0EU+g5lQ=\",\"DNeCyFkz3QeuDz9rDjxECsv9kVwv19p5yrHPpX9jT0w=\",\"I7YZigyFdnhIwXy+hwjrI79Tk4pgqZV25MKnysol0Yo=\",\"AfflDmigibIoajq0yHZLLLjQ2osmuFwPOkaMeB98wRQ=\",\"JY6/QMCFFdiXb7bQXaX3pDRVRI2ZjoaCqkms8lowfSQ=\",\"DeZ7O0nLYM8PIHTjYyUGVwfFjC/tQKx6HihWqPzDIRw=\",\"F4x0YnOiZQy2CMer7TurWV6MFAOn0B+KjRy0GX4+ltU=\",\"KrPJoKaYj2/l43OeerMz3ncITmF3sHeJMfAECD+AfeY=\",\"AthnVdOjdeixTvWq5uLutRBefsFgfeTWEljeJhf3kOo=\",\"GWcl0zLcUNbZFqGmNH/XCXP0YdKh/CuUGriRqgSz9eY=\",\"Ey1iz4KDPHn/UTbrLjltVxn3bsDFVlZbWnhpI0r9qCk=\",\"rjfGGAU2Z4YLCPMc2X5OJmGR2nFXCLuEREdB2etZHg==\",\"YEmU9oKZBXam4ckHYzvK4rKdK5HvivGRG0H9P9Fo\",\"GCqkzmZtFwo6prsX5+wAvQDcv+vQLz+lAOigHWsJSkk=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"EPjb+t55CF8tnMChUzQnKJjlCEhAfPDRtoZs3iYKBDo=\",\"AZU7/1Tr+sfQLVy44HnVbITu1R1vNB3qMcbuq/GmWWc=\",\"E0TA5mK6opmseTAK737xOHsZJrDDI+onm+BGd1qOrS0=\",\"LwJ9rnFHbrtrXzsWMPmpISa7MacuUM+76eGbqJQv7aQ=\",\"K1VwojEjxVaJIN6qjR+IguzAQEv3O+wB9nVitgBWiGI=\",\"JIXcWuhF6KzAw4x6wxNgdHnkzusl81687KsQ2Cn7okc=\",\"JbeQetCYuafsl3O97xeh0xW6zPUCoqMDrpKS/PJM+G4=\",\"JbtmOIoPhjDUmf0EdAwWrj9vhIGy+WN6Nw6SFIlViQI=\",\"KgAiHY7cWGVpma50BtWHWOeVqXQcAE07meBiTR7ZZR8=\",\"BB6ke74fV2ob8WXp62yCt0yswiARwC0SlapopzQQhHc=\",\"L6XsoipL/Ac58GcdrbdN4ZpJvNvGsjs+Ss1lmzq34q0=\",\"GhA6zrSjDBKJ+G7m01nugIoQdduqhqm1kNqCn4ng5Wo=\",\"DqbhshX9yXC3TPjzHj54Epz60OVFk5y26lW05y80iDg=\",\"EBfbeMLB0WlZftaaPc0CRn4wBx3UGOtunbIJgFMUgUo=\",\"IgAsJCLsxZk58wO249AtNar9KItPeTaDgxTiBHtmlnI=\",\"B8g7/j4M0u+mL/jN9pTM+LMmjCNWvpYDNbRcnVd1GUA=\",\"JWtddYR6PP1cSnnHiQ/wjFi3OjHxS9ByRyQbcOO4ktQ=\",\"CqjY/k9C1ewA9YL1bQ1kqtmXekOxhdZgAME5YU2eoww=\",\"Ih3ZuRSu6CHqI8NZszc0WiLaAe74FhPlXJf+J1tCxLc=\",\"B6cYQb337g3PUa5BlcyK33m+FWNhb6X2tdky6rPPTZ4=\",\"P3gTZJ1GvMdBn47zfPKem0huKF2jBF2WtePGtjZkPw==\",\"LkuKPFgcUn6KErR3j/adhAWy2+84nWvI7RQ/cs8uO4k=\",\"F8Gof0+WDZE/XuoUCVlSb0yO16f7wnRP437TMuJr+rs=\",\"LEZYWun2y3fDIXmI2mlCO3FyTP9/vYzYeaDER5rxSLs=\",\"LVQwDGR6dw/cQ0DnQi15tkNZbuasb34bO2M5AioXaPs=\",\"G/5GJB8iEcbtDncjdlhQqm2hi11saS0z7qdkenPQl/I=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"Diy932XCrgRS4+sleKwhoeUnnEJIHkpBr/utKWlyFwU=\",\"FqwSeMOwRGGOYadnsT3uIv42RQnviYRbL60aR8K5ta0=\",\"IkFJR42waPtxQf3ydG00KD6p5CMT+L+j6dyll6I//ZU=\",\"Go8LLBvjTT0E6niyw4EY9uBex4Grlclk6f7ADp2nD0U=\",\"CaxtNrmmPUAlmpinjJoiPeYzKZt1zUmpRO82Hm+fudc=\",\"ASgQrw7iUfJPuGiUt1i8Tg2w20UiJgqb1UBrquU2sj4=\",\"E+IafLj0nfuZDfFEzpuVCs4nYqODMdkL/VEhp9jL6vY=\",\"C/RrvDXOm6tUpFw7mjCN9Atrdxs6DIJjTobw6DaaouY=\",\"LTkFuiL9VLtV5Mp4ci0MPG2SLr7jPAJOO1MEFLDieBk=\",\"IelKILApvWhnT74RecqBPf5hs6yaLL7Gj8Y/RiXd8g0=\",\"LtoRqoz4oTzDal7oZcRlvIp7keQQYavjO6KkiUW+A7I=\",\"HoaHjRqZ4CyRCMo2FWP4Eg3UZVLe6M2GRZm9llkFrP0=\",\"IT+fsNog0h1L1UnrLNYPLpUc3xG7rtLoNHY3wo6Q3M0=\",\"CewEZiZjwBIXXQR7O625zv3Var0OG7iCT4sa+EyBzqI=\",\"LPbiLr9racnc+5teZtA/LJ3q2LFoviZx+gyQDcA0nGI=\",\"HLOQnq4DD9CuKmIyMuja9aUnZCOG5qGlz4y/NuScn0E=\",\"KpVLsdZGO3tnI+p6ebMxtSAc/5jr33cxH46qt6S6yIA=\",\"HSMmhac9xVPQ4bgJms2JNr3fQqQIE9Uu2yug4qcqOFM=\",\"JS15VXQpgoAgE87atITI1GH5MV/WwwoToHbuH9hKxlI=\",\"IURzncZEDPTwiQjK3GFBOzDp/eo9YA/2TwXFr+J0KlI=\",\"JtLvWXwCKV9JCia+QL9WyVBeSpd/AXsO4bRTm6tA+Ss=\",\"Lv/GgHrXm4N+Uyv0qfZag/kg34keVjARw0xYW4tRGP8=\",\"LglafhxozPHOu/0dnmsQZh+zzvSF8uzI3t6xB74amdI=\",\"Im8LUlltCOEsXZefdM10Rhw3ucpLdMLT1ypGf2gvZ6E=\",\"J+TcYbf0xxl1QEDbgMLCEDGX80pUpd6S/eNGDsz5Kzg=\",\"KgEh4jihPQ37FQfwymwWhvg4qsM0zB7LL30f+3uJwTA=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"AzxtTXes3s6QmbOxwoIKZML3U1glYqzizCT7S/IJnRM=\",\"CBWKT0pFHGC5wZB4d1fcBk9FcSY2zwFx5Ud1qUvfGVQ=\",\"HRjgr3EavGYXwDhWF9IbTBiW8BmbqSfzNpKzwRcSlM8=\",\"DI/53rxrW5D4JmI8meJcyLpbg/gQscK+QimORFzR5RY=\",\"B0Vf90dL8lEdIAcW6RbLl+CEKGTLiaQv24ekeaY/UFU=\",\"K3lrxDUABv+4Uvgm1CYf9vx5KuvBzTfyc+ZSGA3N1l0=\",\"IjH0bWmuTQriQpumCAt/5R8/k0w9ZgeuoSE5RQ45TdE=\",\"LjeygGNgBlpOgPo+bzrPDMkPv+5ejin+IDZzRfiXncU=\",\"HlKx2tll99NZuN7AWSV12Ri0i69l3CF6RC23J+Rv+Lk=\",\"Jm8u3v3u22HIZqDqZNAZ8x0d3v+WB2Z6XolBI5N2WBA=\",\"BiK5mk8Q4+pMGp8KLAgjYCofN/zy1wtucp+KUHUd3gY=\",\"ILb6S7k7p0u5GpaA9NwV4kNrqqFsvYUXOIGonS05vwc=\",\"Ht+alZtVK/owRhYVlV2L1at6LYJvsrRA02MCm32KFsY=\",\"I1L6/7H01x3MeHC63m3zkcSdQEZFHeA1g3/u1TRI71A=\",\"C7HIR2cHgA7Leyz0DYbmp9Wu1CFLnVNbIaApJ5ApSyk=\",\"GgBIYdvGZqYyxu+fymIUo2JW57DKl87mPQLVdA9/cvo=\",\"EVzA+2nDBkYojjQne7nVn1z/02SzpI3F3xOTZ4DkUs8=\",\"ILnW6oFrJe7y6uF464Xt8W2SLiWXWGEfjKc6hWDl9hI=\",\"G3ZQuXIaFYkkTQu4kQrLowIOWoSXOMcpJh0iklLXVw0=\",\"IolpOISCpG2dLDPjzuPwfOLI0kOOACOiDH1efByEvfs=\",\"GhxZlvWA3ZOg1IZUwD2fvQU6bUpksh1Eh7fRbVhrlXU=\",\"Jcad8tbRoSA98h1oLSSQfwjDS5QfU1HKorPCbv/z0cw=\",\"EoSOzs5Mc4W3Cf98mJYsUohl6Gu7ZSqHTEleWTGYb3U=\",\"B2vTdWBGt5ieiqkRW1erw1L0cLPo6YEgDPN1SO3MAP0=\",\"KIQGmprJE5GBzvKXpYVyhEisanSiam/la/nvYtE+xqM=\",\"B/7/gR1embR0xfoVUAS+pqb83wOmgaz+8uJa0zT3Hlw=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"HSAzP/w890XVYfEsQl2OEUgAC30EKutfJsXcIj/jGGU=\",\"KKu+x8nKpCjFGUFQY6by1eGg00njBh8FxA7zWANobUI=\",\"A6jhD+f6vuhoaDC4I0J1o6vzz4iNmsUAv8ZDxH1HbDo=\",\"GMLi3D2Lgy0FBGi3px4mvA1uiHFlF27QbAf77NPRWlw=\",\"DVDxM0sry8DNsBF6F8VUIIB1FZCiafRTBEHuGkKM9T0=\",\"E4BviAdVGyj0oGP4U9UcYhzwiy9nJZsDx7GxBzSUVog=\",\"Kwj+bJTru8qjgLDda/UEMMW+rSkKXO/vPnWurq97Y/0=\",\"IBlhAbdTmFuNgcM/7S0Cv8BZTteyWuw1Wh797nRsVjM=\",\"A3RcFD6XlFNLqOCTk6hNU35FoNn0d353+8FNItqi8Gc=\",\"I+AEfzvNcYlb2yAw4mVu1bp08jQLLMh2JqZzm2W2kpk=\",\"K3Qy2zJPXWPubfijJ619A3Uv6upjuEg1I+GxrFCvU1Y=\",\"AyMOVGP6iSrjfzj/a//P2wmogbrrEXzUUZnF94SYM04=\",\"BtInmHEQu6Ljk8zuGl0B+wRviOnoLJddacJVBfvi9+A=\",\"AhN8IDe5NrmvYF3aNP5EJKLwlap4SVbH4ahBBgI4HS4=\",\"G4WBHzYXlL+tHTZfkni47MyuLinxboGk6B+KdpgLBt8=\",\"GM6eKcq8OoiuEDKqCaZkowfwfEHQ1JX9iPRyn6Rx2Ds=\",\"FhF+sI0IjDFGopdgBCDiFyO3XSR2fj6SekZc5UOkQuk=\",\"FDE3oHIkofPfOC9m7R6qAAAAas5WQSulGVTc7Ncl8D4=\",\"EE0W2A+T8pVaBn1bYVsxac/6TJXHvSjFffegmGCLUss=\",\"HUhtbMHOe28rOq3GgNZj6a/tV8bfOUipnt/Y0h8yg+g=\",\"JrlnbD9L4nYYA35rhoHGJMwrrclePcwoWPROQie5DsU=\",\"G51ueLFh9TC8g1oXpWzia7MCynOEahWXRDicumZNkwk=\",\"EzxkcLtaNFu7Hjo2ULml85KVvPuXzoiMt3WwcYi+Ew4=\",\"LrQELaqtlybHGjtr5Xne6d9ktqylnLzdTgFN2vhgzII=\",\"K35r+X7BoRSxfmvEtICN3/FWFKcOQzGPeEDtcVYDM48=\",\"ChElkX6XUP2yWOQRPy477/jNd7LkhA0qCj766EMk8f0=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"KPJAbVsgBqgWP6RJyrd1M37ENQdeCPdtyzYFdfHQ+ag=\",\"KDPtdtgdmVc/QF4kGHYOy/rTM/cbNfKT+z+yVQ0y/TI=\",\"EyloC6FwD9OPQtb4ihZtcSjuaLrtSAJfG9gnPG0T1bk=\",\"LkBsRllI1VK4K00EQ9m0OT6dA0weuWd5slVUhQ+NWCw=\",\"FocIZMdIHDdzLBImYBwP0JEuyuycSYaJPaLs8efpvqU=\",\"FvAgaiVqHq9Xm3iTYtdKbfm06PTDvEOmnV2E+OK4bhs=\",\"DTdpghpGQX18Qd5/2KRM8OawOFGzPTX5EFuR/QRfQ2Q=\",\"IIBy2Bx7Hgx/uLzy43KjphQtNkMISni/rTIy28TQQhs=\",\"GwA2S/2CWLwJGmHK+FvbUSqDGc5HydznguYhA8LHpxo=\",\"A52UePJEJoxIA/ndDdXmMhe+PIEYR2w8NsRjrOzFc80=\",\"FwJ4clPHcDZxE8oCT4NduuFbXBa8shIc89ib9gmT13E=\",\"DUJMJKtw/kbcC3CsRPFWC5inwXm2/Vn4e1HLFYBATzs=\",\"DI7sZ3RxVbAkONGXydVUN0kuriNcBeOF9a/yOOy/9JM=\",\"GTGKhcrClnrcNMQ0ztEmGr9D4b8RhKQ6CJdDYSEZH/c=\",\"EA0OObCsQWLRPlI6gwiz0Rhf8avApE+AqrGY9NSvLnc=\",\"HcnttRW9YioJ1vFk6q8suYesoj56CnnI4A0Cq0THHN8=\",\"LLCk2ZGIVZr7pyJvOn3GaxKTptXdfr85asltO7Gw3Gk=\",\"BFfp3v4rLjrOQCFxgcXPijYcMwO66NG4Z+Yjhu4K7I0=\",\"J8tgPvNwBDFHLYXOrKU3vKowHSIOjNaMjbmy4fU+mdI=\",\"Kg9zdIG/29Zfj6TLRGPlajG+xud8lOJyFvTVqnNN+e0=\",\"CI4waFMmuS9gB9bvpC2K9ze99C7H4cTVZTGBgdgpXqA=\",\"GF3uf/wcCTMvwUNvHG1n6zxtzLNruYF33l8oAjAsaKg=\",\"Gjwsqdy6eABaKK87Yh5QFVKV8UrHRgV9zOmG9jaNPZg=\",\"LImfjUbBjupGubQx1p9USb9ciWsHNDpRmeWHx0hEP34=\",\"Ere4HHjHESx/ed4uujPxhZ537pv+VNXz7hW7ri1rkKo=\",\"CpxB/KzxiUFgT7EpaCdhgD8WLA58wRUvcLt2oomVrug=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"AYwsgMGTv4k/jiQyi7eRleHLjsXDD6TQrrIoyCDn7cg=\",\"CEAhLMjfac3sml1zsz935mMM0IoEYnCTkUB8iFewm+E=\",\"I6Kmm0wfKp1dqbvBhd38iPrMmVhCjgb7qD1nprt8yo4=\",\"KZCgAjfOKAunBd+FcVYAp9Ql1OvisT7TtCsbRK5I/gE=\",\"Jo1LOvN7X17BGDasVMHO2cVpOQ0EY8MWwsqvcf9FLFA=\",\"FRKGw00tGoj8n2lubHYugzMJpnEOA4MSEtMXKWscIRw=\",\"BaDze3cfy40mvqCXIlEK+b9RCuhMXwEG04JKonToD0w=\",\"AhhkSFc9q/2ADFls9kcDuwu0XvW4qR+iEAmGKuOq4MA=\",\"J6xe7UFTQNmQfGtBRwjN4rmd4aVQvhwm1u+Vxu1fuaw=\",\"EYuvYOt0N3PN5ikULDD4bUnWM8WHnxl3rrhJaXGzuVY=\",\"Igb0r53CGl6UoAd1Yp2etGoQTsrw0hiBIhh/vZxfZm4=\",\"GHT6XNb+3Y3OVqOFUrNVEru8bKVqS8ZBBAatFJvTBYk=\",\"DyLc2/6gD0vInb/qx7Pe5gsW7pp08TWI9YebpxTIJ6o=\",\"Dt+Uv0nAQN+XLidwHhYil2bYQZeynwI0BlZOMs/YNYs=\",\"LSTOuWUysG51HRCafvzSm6dB5h40cr7OMMcSjEcEKBM=\",\"JvuLjrLZDtSIa5mCvTJVud9GkPhAR8zUvfIYEHIL2kQ=\",\"GVJkH/9LV3gD6sEtKQrMOfRyjj/AhvP3YxP7K3jaWyA=\",\"IjO6UZI8EDlNHvhxim6C2E2QVN6MhJi9BdUnh/qiXjI=\",\"EFUPfQDYPx5/t+HJdy9UXjLgpgyjugrhaMdQFH3ynuw=\",\"B+XokMPmLFEJ43kNK9FAb4QliDq/3eGcu6O1qnt/K/4=\",\"DWEaz+L5H2RaB68O1m6oE9c5Wwm05LPLkq/CejHnz7Y=\",\"H8T5b9fHpp/ugJK20Rx7raeehRMk2kjmWKFm0A5mggw=\",\"ELI9LFvX6XYijhkGT/M5Ifqlny60yGUtOVRkedJuy3o=\",\"LyEWa+LtGy2kdCXWu/TqHyxarIK4MmWRP26nCjMhzfA=\",\"KrCVL7KbvrDVco8Hqk1nQxwdPDSKDx22Em5Hy+/d45Q=\",\"KhDHb4V+RyRdPBRc5wyHoZlUSFeWR2mMEi08f4CHY5s=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"DovtTYaTTMhDg0gOIwEzG+zyqHVukJjIpVQdObO+IIQ=\",\"C9touwXL0aMr6jK42u6X7eepmcMeZmIbTsxX6Abptos=\",\"HGghUQFBnYPRWgJgoNGUVtik1VLtzvErjrPI0PzgGLY=\",\"FMRfajLplVhayBVFVF0oA/3ZzQ+kYqifLMjS8oaSif4=\",\"A8YxR98FGIJi/lbRmR+HK4BppsB7c1jRZgA6tCKiv2c=\",\"J7CTmWcR7n5NHWVmAI60a1O8RZJaOFumTEsxTmj1+Tk=\",\"Gmf8h3bPQCyUWHNA9Q/2oAN1cMUPJNr3HTsU8Sw3UVo=\",\"A2g4S8mKUZ3XhDT2P5K+URqm6+SXoPICxA2tU8yaxB0=\",\"HLj6fOFrROOEMnQlidSFfCkOQd3s8cBNGUdTgViNvhU=\",\"I1l7hQ82S0Vp3mjxrHKFZdww+oyiX7x8sE3l18S5fGI=\",\"Ddj/GdXhMI/kJmpRkDD8viqdrUkr+HMg/uG1Y3hUi3Q=\",\"IP633hpelrg08z8M/SvnBGOcAkxNQLLhMCcu5Sq9Q7E=\",\"IIhWgrq4VK2bMIsp6TvNl0SzCjKoa0NlbrnrOYlYxWk=\",\"GdOiW8qlU5lLlFsZZvDoiHe0mg66fPt0NkJayYDR9LE=\",\"KsjP2EgCtnF0ww5ItrgFr1rlwOMIvrgs83NPqxzr2nk=\",\"DnMJ65hrcX9yaEhC7kQmYHiqk1gg6FTswm6GswSjqvg=\",\"K/fqt8yzgukCUzwmWyZP+mMnj6KY/ShGfNB1p+O8My4=\",\"CD3SlTxV1cK58oNcQY+r6fMdcSYBu2iWQQEUmgkQBAQ=\",\"BxTtMPtVkN5RiaJx4ajGQ+UqsOXxOGce/v4yjYXu4Us=\",\"IRSPn9OwcivTIaPz+1nfsY3sgoxxqCDlDi3At3ugbCg=\",\"IjLk2Xv7Svb6Aj7XO9+JngQMheCG7GH2TZ52vIrv2h4=\",\"LxMMgVktFNqkoQghniOBo8PUP5p/2UB+rHkVaKcpDZc=\",\"G8MAauyiV6oeCnkjimrsoXthxt2MXjj/JZzsxwxtlXs=\",\"HizXVNl2Xmv07mBMMCfdFVPmvEyW8KGGDeXsHtTneJ0=\",\"GwMAhIl2LxjTUOb1lJG+lLkRJfbVZIELImAg+/Emb+s=\",\"BBOVh8lACNKuKGLxf0Yj4Apg8JVlDw+VTTPis+AoyKM=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"LpLQ0ANHiq1Gm8tiqcpPxqS4t7VKogCCQhBHtJUmvBs=\",\"L6nxJ+GG2krcJ37S0P6Oz2XXaGFxs92bW6V6QdlL54I=\",\"FrUksifJHRSuIv7OeVq3tOBnL5O8C+EaS/3tumGOxjI=\",\"G64TLTy2cjPvt1Aah+99UwTUPYR5VCKlmA/vbeuNng8=\",\"DWToWCYAT1JPqWM/89vSrP4hR9+I30NecZNeUYTAtd8=\",\"eomR6SExgvBufycSblg/8QArcy1I/mmJjD3RhURoxA==\",\"B4px/wbzpwN+Os6h3y8E4yZ3Tdsg1nFwUgZdW0jk2cY=\",\"K9vMBlPf8Lhkunw1ogU2iLmhPM+D/Hi1hXqRGDxjS6A=\",\"E1xHcLmEynJAYQYQF/b6xjzj/V9C4yca90giHq+khtw=\",\"C+Sz134hagKE2khPoOwXETCYDWZIoQ6BSUJkKE31AK8=\",\"HTOh6sg6oujjP5C/msUb2qGG13FN587kNXtXaL2qA88=\",\"DIChmjGcAJXRDeFHO94GNuGZsTuNg4M2oBM/hun9KAw=\",\"H7AKXVRIIog5/KmxCN30y+7i5cany41ru7M9r3Ll3/A=\",\"A0KMXPUTmmChnT+quvbYVxwBJCAA4hbj5BfTdHbakc8=\",\"FTE8djbpPJAoG1lG0SI7sl2EnGsFqcbljjRZ1AWLQkw=\",\"C+lOXEToZXf785udsNOrCKjpChSIE2Cjvo53sUZdagg=\",\"IV9Pw7NujvQeoiYID6MxSJux9dWy6ZJLX0GaKQA5BhQ=\",\"FrAWLXdMUIgqnyc5vbJ5MXkY0PdeL6db8k6ew/GiEQI=\",\"ASww/rEvxEHW3VBZwmkHTxCmnezBSL0ig9++WU0qU4o=\",\"FknFLd93iOyyFQoaSKrQlrTc2p9Rerh3oRknzD63/ps=\",\"Bu30u6hesZJ/+qMHqpOFwOEe/0uiSajmBdYk81r2+ds=\",\"D2GtJfNkHqzxyk/O44MNUiLzV/BGxHTr23MuAhHknkA=\",\"KtzC+WyVpA15bgyL3fMD11utw3rJqmzTFzuGj20Xfeo=\",\"ClDt2L2Jmx0V2sIhNr06POAK0NWBGIqmwtuW/2lmE7o=\",\"Jqntm5ZoEQbKwOdwb0KT/nnQeNkY8l8HqSQ7kS9dUjg=\",\"GVlbpAGRYjU88hJQyvoapkp8BZfA0K9bHeChgTFSBDk=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"CWk2OtL8Vt7dkypmvxGToblidvFuQj94z9eQhQv5NHc=\",\"DzZLClobAPcZJpf1yglgaAshfj/uLM0yDNQI/coPp/s=\",\"EA/ii0boDxXhLvTVdZ/d1WD3a/dM7mBR8jqxDIgD9HQ=\",\"LdCq1z0nf4vBx20hM72Miouou9Vzvfwa3OE4A0W/Iz0=\",\"HKVgPDvYkZjUUJYMi+9DOuNo7+S+Vo0fj2NBi8Z7omk=\",\"HrQgOymTmHIv61D4biEx+HCrL+5vcmh2uaITppyLNMU=\",\"INPqw6ae2dmWPeCh1LVUzgteNQAzx6q4dC/SWK8xOSw=\",\"A4ugtcK3w9QSkwR/tC7Z3zRwVpZcTXOZT9OOCz0MPHQ=\",\"ImxotTrTFvIviqgDqQ/7AsSJNk/LgHqyptrghaLFSOQ=\",\"EVmtIvtGVtqxDaYG0pioVoMUVL+yN6Ii+jk6mX2tozI=\",\"ItiY8HTq2+Ezs4F052KaP6R/jJLo5n9iEwoA+nUCuVY=\",\"DhGDlfxFGnqkYS2hIJfENyyS97l49a8JKkdx4JoTNDw=\",\"BbkSN1YJiac4u8+AohdUImVt0n4PX5Z0HRQf0ZOS5GI=\",\"G7PxM8LV95MKnezQyvY/F8VSiETbJu/DNuUQHxhoVFw=\",\"CjnugIkkHFy9aZVJlKvuBAzPQ7lRDVSgUFYZSRKWO/4=\",\"EdGnLZZmvhD+X+905uBkMVMvUVfuJK2nBoO58KWGtYU=\",\"Kghy8jlJ8hO0a0Y62CiRnr4DSVBCn5H6O/+yddcitHw=\",\"HaJ0HXTP56FZZmIx65mBdJpAveXOpvGgad6lfPRg7UU=\",\"IlBG820WFwTCaow3ji+liFmigI+U1SQs3Dx0LFMPYL4=\",\"KsXnkNeKOxnkD7mLJH7ZyveLR9iE2ku9cDWUgsL0rIQ=\",\"Kp/r60EXh8Wca45REIrvbZ3GOql8sxSQdgLV9rcCF1s=\",\"EFGb9LXXf4OXpOUa097fWw3uKyXgjLW4Zu6yqJHgprI=\",\"Iemt0oQFTLFJ5n7D/EIIueD4qMIBGrF7+zxORBnucA8=\",\"CGFBmzPRqeKpRL2GoioDSQ/FYKbj85IkELH0zq2/L84=\",\"IEvuCI9xY0UYfBwl/PrTPu+IqL5gawRBE58Dvj053iE=\",\"IahQncB7aQ8Ums6VlUDu5A1IXbWiHjos6dvoCPYhyS8=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"K8yeeZBluJBAKA1r+pDZsPmKyR1QUdaDxNwZxtB4WS4=\",\"Kir5zMjNm4l27CA95oeDbmAl4Bl6nnVqCUFo2iNMYlU=\",\"Is2oogV6Uk8T7Av9jPREgmkVNs7MMhjJNMp/IRJpA9Q=\",\"GVq6+hUxUY0QHEJ0ljBcUuPSyeX3GSIH8jmFoVqFs4Q=\",\"ImySlz4r8G6IALzkhtO1xbCG6XF9k7eeQISpo8v0Hcg=\",\"LUsZvf/tR5DrpZV+RUXMxl/9wwDZRbEf6tUvg4Jcu9c=\",\"IMgykNXvYI7L0zCpmM3piTYGDh+1IGUsnW6xpXVY+Ro=\",\"K6rctXv0aiK/KZw5PRU3vy1hLP3HBBOvXl2CYfh91zs=\",\"DwmHXCVwUn64ZtMfluNXlGzwEwfYmWLbDG8WoCCX0I0=\",\"KikkZwNonA18UhNsK1SCRbNL1rbDQe2Zw0DhFLhW4Pw=\",\"LwXXIyYi66FYO/gx9qgQ6hFvD9kz4UJlDFjWrxvLZsM=\",\"Gv5dHhtk53QQOdbCagVLcwDst9BS2J6N+M6PH9tSiec=\",\"GSXySE5Xos8TE53e3f3CuSNWQMTkDnMy0dYyxySAH4g=\",\"B3UlVjQNzUhTG8sURYPsdCz3U5yawjRzY/ljbqBg854=\",\"BDwoqdbzjKUPBX+nG7bwfGIpX8ohl+BWFg6TpsgvwVo=\",\"BBeqoX9XX0IyjqpLoivnIH/+nSZWS0KiS0GWfz4xc70=\",\"Dm2odjA/vtfudW/Yeo8+FjYyVTKt8mv/iRAZjJLgyvU=\",\"J/pXJkOjVzLNohVx05BgD5GIc5dk/ruN2vnAG8qAf/U=\",\"GlEM7pXntvTv26VhLoxRIcHOnMoaN22DeaH9wgalX8g=\",\"FEJMSz5R/7oYaf9lJ8465T3BPMHqGcy1yHkspr4od1M=\",\"IaV9iFTWyuXQgY0pT82eGi3HFpGi4/myJ/x4ictyGC4=\",\"Ily1DbC3OyAFjvP2cf29LAh3oN77g5JjCgHO79oELRY=\",\"BYZBiS6kcM/IPjY8W4gOuCYyElM/i6ZyhSfEY28+ARM=\",\"H0UFdGzk9lAEtD+fABfSYC4b1E7laeCP34MtkVMcwqE=\",\"KgdtgYbbJSjZT6R9xBchYpvML+g+7t/EM8IOjPTD784=\",\"HewNb2Lhmh0qsC1sTWpteh3ROHpKH7Fe3IYi4aPe9Q==\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"KkglNJGrrUVhssqc0IzBznrgM1JA+s+m77T8ZTpI76Q=\",\"DP1RTwngaZIXFm4gp+2psAUSthRq9R/Bd23WmAWICDo=\",\"GTehGSMADZUTG68xAHi/64S5mnfgJ+jQ2WIBuRgTLuk=\",\"MDz7kKIoUJ7PWPxulNz6CGDSBrNLKKg2ijVZpXrdHN8=\",\"KJMOS57BfFj/p5NMIWqxr1XfMJ0RXQeJIz+E8sRBpTU=\",\"GKq9zg2pHTtkS9XsrxVKtxSPPDMmywG1k/ivnvytByg=\",\"OR8t3Mm9b6xgDrDCbgsamidXFinpsA8IDYdu4vG2SA==\",\"HXZcIKWIq3IX/dpeAdzM3iPc+anMzsTY9CRzXzniXzs=\",\"DZFNgHsP2hzddtGVXxcKs2FqNc5TUWqB4xWCX5MWWQU=\",\"IkkmGbFhg9MYDBWZTCUIyDc3ripC2WjayFrzA5IpTn0=\",\"EbO684M81KYDnyvUKvFjOkfyQPuIp/CsCQL64qW+NRA=\",\"IHxAO3ckTIAY2IRXFOaFZiFvv8SazQEHxV67iODeOUk=\",\"LJ5DHgSHFSSlJishKG0EMz3ts5OgePL+2SJmrCL++mo=\",\"H9CTAyghp3ckIeYrTjwjoZXSfqR5j5o/Wmx9TS21g+Y=\",\"LqqCt/0cBhlAwqd73S+2U4Qr8bBGZpayks0wS0kHUus=\",\"D5j3EOQQ3BVS+2nMhQdribT96PJ0KKMLWCGfUuQi0TA=\",\"EiKbVnMLogpqUtIb+PcxJpboz2U38fbFC/3Kqk7Up+0=\",\"HC+5W2Sg9mtl2QYPHwZbuC74gq92BBmqvcbNNSlDHn0=\",\"Ly/OYylkIo7veQhHjJAQel3eRa9kfyMjrYphLkHEgVQ=\",\"BhhJq6RFFFj3GMO+P3ajg0flEs9CLR+QeoLadQ3CFHg=\",\"LNYMMtbuNsN0AWvU8cCyc/+HMV9r/h3JqB+g7LEmRZk=\",\"w+iXqLkcEIrRmxUumELPuHxK8K7I3JUOD6Ml7U1pqw==\",\"B6OPiIumeyFQsOZDHOAkCGgdLsgMjaykxR5ltZ0yn/8=\",\"GvUkqH/dr6rYK1IxoedegHbGbETTtSeiWaFUIocNthk=\",\"EVkpCkdDNl14HgGg1rxiaDImCwffLQ8ojRXJUnLrH5w=\",\"CeUc0VGC0g+HsJz2lm+SaFeMPZzFiz5/mB9nUC+UeOI=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"CwvO7kXjGwjAVIcR1ZxUj1G30agMzv5lmbXbrQ20tzg=\",\"JBxv7ZKuTjkbr+OvUQMDX5/B9yem3I7l9hupsePq258=\",\"Jq7//EBDsizt3ojyvOdvr2+zwhtO2p1oLBTboG+56Ho=\",\"JnMpbdYs1zZlkIDQMLmJFPb3mXUkA7pcKb+a9q/MyPE=\",\"IsqXxN52lmKwcffNdWV8FenLINdE7dCnkR14tqSqq+g=\",\"GI+nS37aeS3DZgiFkByC1XBQ50sJoStfNG004eX2dhQ=\",\"DqAWbMTFHCJS5PPckvzzOgOWSgMFD58SW4en/gdN/qY=\",\"ITTaf7TwiaITYwEbCPtyqqj+dnxhi98I17h4ENX9tZQ=\",\"K+YskjTcfT22ascsdYsVYo3xzbeByQ0PLyPeKikAUQU=\",\"KCrogS1yny7/hvLsR4plcHxLY9M0Q79tj4clacQORCs=\",\"GJ55hPpXCY3XNyk6Gdb2CXHqfHT+xgC05vogzDFPAVs=\",\"HiDNPb9KdWQ0IeT6cT9c6qNe0BlxUBgvZTrpZjqeRcM=\",\"I71mz9xU+S4NUy/0E6Li/zz29WGjREY+XgoKjFoBAwQ=\",\"BCZXGC7kty4+RAhSjBm3HM8dT184rLDlpe/WQc38a38=\",\"ChGrwdrx/47Wr7awpjcL1V+751B/HaVo85squdu240A=\",\"IA7eq4uU2vMTXrYEY4jM+McUDZGHPS/vBLnGD1Ccfec=\",\"BYVGuegLLcIiUP5cU9ZqoUvjHV2StcBKBeNSWBD8eKg=\",\"FnC54H4C6IgU60CkPYO9wBBznprWeZwQu6JOH0C4r9E=\",\"G/Ofl5wBWvSvEZwTfVyKM07QvQ1/iWJtT3nvR5O5EyQ=\",\"Dhnc31tKGuAfy2xleds/thW/F21T5q0EfM+QWGGs1YQ=\",\"Ao8iBT9y6lRXYa/JVXyEsFxvc26+e/0sjFwETQm71NQ=\",\"BW54VKlta/+ymUXXa1H7noH18ZrXZxccVot0LpJgVMk=\",\"Kuys8Wn0GNj0dHLbYlrDvbVANmfGFFdmbUI4u/OdZjg=\",\"FbBOYtQWehZvFDZL7RltHQ5JyMzeW9Vg4mFgDdpNPD8=\",\"FfiMSzFQhxivZ8bjwwzzz1lPv0gag36A6JFW2cLRvnQ=\",\"AU5mRcdifnRPnmFAZ5yGMyXR2V4eR4blc6SYsKeQtDE=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"Gv2X+sH253xc/kvOhIuTBRomo7fT1rGN2gSIY6ATzOQ=\",\"DfaM+2VQMAfbgQRK8G04zmP9ofVppwV/GEjuRZfYfAE=\",\"AQhrMkd1KflHb6Mk1tlVK7q1iVbC4glVSN0bsg6b4Hg=\",\"FhEEaxJqz1dnVhwy0xo2xQcNZFvfCGhCQKcrmDLDvyo=\",\"G/PrX78eW73pklIYN6jToVoYeSGDKYm001ehss7Zs20=\",\"B5mjSbEM3eh65jGtOVnW+WZM4j7pHgEGed3MYBfvEg4=\",\"xV0Mo1qg1FOsvdiZPQW0eeE/zlVbY0/G0+RwA1sN6A==\",\"IERMG/Z9bOivsKIOeda2kbrFS8sxzkGCsVee4h6p/Io=\",\"Iuj1nLtPkmOc9Rf9EZ62UHBLAObrP1jpLrMecTwbkao=\",\"G0hBrrA1suiW1ktZtHhzy5x0zQW6EkNunRhlpKdOi+c=\",\"Ez1J1Wx4CblC24kbQksw1WykTuf3OqAopeV36C9QmWg=\",\"Bpj68p+DKB0/1CHHjr5pTPXrNx4poJNUdBxZ9KSrxq4=\",\"Cc9ouV4aRHImqMOUQFE/llpB//iaHhYYxwrkvgDpLGY=\",\"BXoBQae6IDiB5akObUIubZAB6sc3/ZhgNEGRAmxf5UU=\",\"G3GsoLNSxe5OsG3qf0IC+huQjwjivlXcCDShqHNgdZc=\",\"FCkVMEuwHOyZoiqW0a8xwxM4Kb6gAq6Y1wEfoVFhYNI=\",\"BKrVGxE2OzCiau94tK9DHdi9Zd7Oz80aZnPY+WoObBY=\",\"C2PBi3hQO2pHqI9NVMTaepwj/jRt45qIhCJKKoWpURo=\",\"D+ENHzybQGv7gy6FuKhExcTaxzmPLcPOJUHfpxJg0lk=\",\"KkJCCAl0aRdkWAbXBjFWT2EQMYb5zGRN9bew7k5qJ9U=\",\"BaZsb1DTk9p5Hldo3odHdNBm8IdBGPD0F7agNqZX3Lk=\",\"IaTXGGLcy3wKCpuAlFxb6SMH8UfymRdoQ3gRHNvp0v0=\",\"BG+FX4PhZCau08gfWi9/kr7HzrcePcfiRTUUwQgcogI=\",\"GF60xn1PR5gnmAqWgnzbeZiM340xwvjSUydl9BVcvvc=\",\"KkKU05GbXevOZJsntj9A5UBrLwROHUHVhBG8AHGdPnw=\",\"KoAtoOTVklm7qn3DIn6i1yX2zOUDMmYfCDfPuHr0r5Q=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"FU648E0XUFcgfWF5MbUboY7DyDDhr6dV6K3lv6ccHUQ=\",\"HF+7I4zQm0rXYVSi+tt+fXMr1TRgP/PLvugDHN3nuZQ=\",\"HDp/4Uw+9/A0JmQ8yg5vqtKAb53ulxukHAED1C9PEWo=\",\"CSipcwsl1kfEVjtKcnMwfJTDR1Ze7jbHgcO4rcU5c/M=\",\"Ku/jn0/qlIJhzb4KzMXHzP9nFP10H73NbimCSVYN2Xo=\",\"H+rfSuy/fH8fUm0Ksa4VE/G0/IcxGH+bZXEzd8kGIDc=\",\"DNLy1Ngm2YzjvwjaAq1YZvNMm0PyBo2k5bMzeNk8TCQ=\",\"LntWpkCRNBJtQRtWCWfEbd86RvpH3sRX+4KgcL1EiwU=\",\"I+430dHh+KOxBoC9yry4kmiklYBR6CMNFKBgWvhX0ZA=\",\"GpEMAkeaZ5WYEAH0AnPHAs+9zBwA/QPeH4BXvygJhzo=\",\"J4arzqJ8NM9P8nR2nlF4eTIAHAZAAzp8iZFPRLyjKX8=\",\"CyfUAvxp4vI++OYEIKOOQp2pafA4z87tsHPhLyilomA=\",\"Bcj0Yocup2iXdCur0QmbCsp3hkobFl6uuNy7P7+5UoY=\",\"DSkTDDzQqyNYqxaDWXJWovfuYRN2uTKbiu0w9pUFvaE=\",\"FnvrdGZcGgK5BFCRSHDUSARytrK9IlY3UK+v495f748=\",\"AldCdce8WIeQBNY90wdjiwV+ub+ZOIrUeIZZ+VfvViM=\",\"Abr+IjKcAPzroeSMX2G9xRmyDrNS4YOFmyQ066bL/E8=\",\"BA8l+wSPJi0LiOWlVyNMTzWriY0QTLLrlgkF4ei6WoA=\",\"L8fPJZoUdOgyQwOa/vh66H8aB71DNAUITj5CQcQTrs8=\",\"MBRJgK81tYLUNMq5ngiDW7CWRNrUf74Dau/ZsZtxOuE=\",\"FA8qtHuhoI5P+MOKgkW3n8IMKRb8NHDk6usLNlS0ptg=\",\"CXyxrNibWxLoLhRXHkpO9Rb1wmk/C/cNTAXNTvxy3Z8=\",\"MENa33krpaiiyftZnJGh3lMcf6gJ8/w2R2Ho5o88md4=\",\"F6y7/6zskZoRXNxMMD+TNf67sdrRLwoYJf1BNZ73NJE=\",\"BFrAeCyO3QDG18DrWUt5neWYv1OMgPRn+3pOsfawHYU=\",\"HhXRvo0igcbyXvxWsz1yv7WaYb2RUYo96TyvKjV9AlY=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"EluWxnjS7xgffkv7t5UVDu21tGqRPWVx0bIEeQosew8=\",\"EwvmBcg7wBwfoOZMee51sn1LTv2JI2j2aVnOvY7x154=\",\"MFHGkYOWh475ixO3xITGaVoJOtYHv9zYfwG3nUIOcx0=\",\"JjVEWj9mOJtGOOu4Gjb0zrIQ1fxUZiCewhXAgCOsqV8=\",\"ELzg+9OoeWFSdZzCX3JgHc2Ztpmow0aG5D/SttGyfYk=\",\"F9roKZ7r3gBiBD6ekyZ/0bONbwvN5YJ8EIIrE35LvKQ=\",\"JmTpVkbsXtBTahri/8hBZbWjwpXCHlhgbJUDerdGqHg=\",\"K4tTyOkDgnhrYPpQmU8oGGas56MRpArwe2M/PDD8d3Y=\",\"Fq5T9dTGOoH0/Uh3k+r1zSywPjyCNr58yrjCA3L5Efg=\",\"En2tM2YorSvEA3GMSYPBNvNMv6/fPkXGFq98fhyoeT0=\",\"EKEIAd/SFCK09aJkwu/yEh4PcWUSqd3l5jceqxfm5/g=\",\"CsYYnuyO9M45KNd1b6xEaFtCXOZL7j1IUmmHCedp9F0=\",\"BvSeVccu/chPf/YwYVfXcDELHE5uUJujkZuUZr3t45M=\",\"CtEket8eS8hmU0NCW+5NPzVCnFTWv0qOw7Ft/dHdOkU=\",\"CfmJySmV+G2vKaks/urc5fEFoK4nKyJTuy3jdYp3HCY=\",\"H+85baojf2Rn9iRBpVt1y1oJ+pTLH9snCsMJSH+mgr4=\",\"Ew103riAmeNTYoATM79/roq/lhZfrkuBeVeXYa4d4dQ=\",\"Gx5jt9i1+NlhLcWeGqlCL5YnYamSB5qOi/yRaVyiBL8=\",\"LV1cj+rtXeyV+51mdAZsA9bL0NWECEgnIUsJVTrd29M=\",\"IniitZaj0K8Kk2X5VK290sihUUzJBjadOwQCgRyVKkg=\",\"ESkQBsxnGJQP/wN4y2zvoJ20t7fITUR6sTKnpHVzurs=\",\"HgvwTUjVToy+hxvNv+YZ7Tj+ab+dKmH7Xe8zCy1/QHg=\",\"KwkHzTXGIVLBDkfpMNyojUsSxa+n4oNsJjeuc1ALdl4=\",\"LlBRyRAgv2xzM59lOENDbOGCz9SHwCoWV4z8ltJ8Mc8=\",\"EifgyGqwKtyvAc/FbP/IFe/qsz7OjBZMMbulCyhHexM=\",\"EDsyj46f7wLzQOP2edkdlQi7Hu0h2Y1WmkFYOqtZVwc=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"Hj1SZC4WJA3X4rDuIc9LO0zBDIBf5SAJ3HUgRXGAlFw=\",\"H95vO5jfYQTQe4SnA0lIktj9IczlPP6epBxKxuUSUmk=\",\"BpNKY+BHSXVKGYA3EwHKobwAzjhQWTOx7Q4IWldVhW4=\",\"KJfWY3kcacm/6bMTdZvhzqFimeZnw6yz6fGAedOSCbQ=\",\"LzC6Z1LQkApkvo1r6LcY7aZ8+Wr5Wh4NyR5yDd4+ykk=\",\"IZiY/jQ4peW9xaeWEQhOCXdFZRNYb94rI7Xo401+t9w=\",\"DZDwr8WbAR0pSfmY18XkwqU5U671j5caRYcE/Yj2on8=\",\"DyHzcQtPZB3f38u2fRP4RSFu0WoPHAtFCsuC6ByFqT0=\",\"LrA2uqidkmUVKBq6BxeY5zlxIvtR9FBOB7aszLqhevU=\",\"Aa2z8K08fiMAxxemZ04i/6JhGXjYwp49IQEvvnYGreY=\",\"EeHR/nrThlWBoaiTBpjmdiErBMZHc2AQNCI0dfkae2k=\",\"FGSHR7i7Wx6LQzIiqWS5XE4UP3DWsm5qpiDhxXyELtY=\",\"FFWL8tr3GLMHVsy4jjiQ7EfyW0teCHz51H8zQj6XqQI=\",\"AubQusMl3aYzHiEXxoIGahvpMei2v4ieWqj3FrwUNYs=\",\"G75pDBg+VPKBv7S9hDr7OWG9PkKMgdz9rrgiCjhYc20=\",\"I1KN6HQvMjgSjmXIgSKl508m+ywRYv26afZffZcdUsA=\",\"E+OVr+Mjkvb9XExcco6uMk2cJHZJpsNBJHXE0ExrDqc=\",\"H/OLRcTluGgqc1dyPSCUn3t5LsVd/KdMcty1P+aMkv4=\",\"JF3tPb1sPbCUvAQN75xOipbmdJj5kjIkOI/LtEEQnfs=\",\"H27Erq81RdvmXelgL/SiLEiRHKZke8xjLIV//JmkLZk=\",\"JDGyNymfGl6O8iVpz42wICR90OeimHFkYhBuVRnT/fs=\",\"Lkk5sBXyf9yTj18cpV5dfpEgRey9z/7e7883rHfdvlo=\",\"JsBhzeR3xwEcBFBbASbv8T+lVdJI3xloh4lWIJ024DE=\",\"HG8hMA0T9SvtabKus9updgqU7ZRWc+MoOEjPpcRVXEQ=\",\"Cuz9uGpkMVQpYF/UY+1mTyJNELLgoy0106Wsq5FGVbQ=\",\"JaEfIB/Ppkrt4Y4F+xm+k8+0wVWHdZ1eURBCCiZ6RLc=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"Ez+72GhYuRQ7zCmKTXg+W4tP/EKQ0dYeh9HOX6T5hWo=\",\"LPO7DADiBPGLusH38JO5/r8sp1QvRAcr5wzZFdLEO1M=\",\"E8Gku9OpOOjQOZ/3kdhpYtfvFQRZdBnCwA9CHURZxV4=\",\"GwCNuY3PUzMrZ8KHhB7XODggOy2FmBh0E8FzCL2MvjA=\",\"HkK8KETI8yyji6mh0CnHJQ11ojfq3S1Alp7VZ0/4j6s=\",\"BemQnZsqhkWXTVT9POPnNPwLmSNqKlkOb8Vk+gDIBtI=\",\"HiYoK32/k/Oqsle6HhPqrDmrIvyBtyUsB5oZLBE+1/Q=\",\"ECprPTqQ0fZ+Y5on52AjYS4JbALfZb9kEQuiOTYeNek=\",\"H41CWzs521CW9Il9Q4OLssx3tO0PHZmnII/bRfqjs9c=\",\"A9Ei902GlDPhRXgGuC84zZEQOXLkVs7Vyp+8N1SXyjw=\",\"F5Q8DTM9pdGNCFa0QlU+iCx1r1aE8qgSep1SEjs1DEM=\",\"HPSEQSSE3wy0njkW2xTWvtUO7pPf390IFIDaIbU4jOE=\",\"A+QdRmJx5/xjLufgrNLExEaVcXXr6/VUY++eFvSLufU=\",\"Kr0sH18u4VgIBBkJK5HWSHa7c/mqlNIIJOBkSCePiMY=\",\"HpeQQ7NeHVeCbI9xkqGGbOGyh3cssmbt29F3s8YYbY4=\",\"C9rU6S3HllEsTa8np1W1xdxsZmCExkjEu/9l/2YsZnw=\",\"MF37YoPuu49b74oz4NrSgsqSuolehYU9IQx8yC9Wrts=\",\"JzI48L87Ap9QZK0b6wEpuVOe3xq4KKTRE/p2UvEv0nM=\",\"FLErkGiVD5jeFBuks4zdseOYsAk9fhGGUdUYp5gM9ug=\",\"MBXHjeF8bMuG5Hwe8IaAsSuUi1pW2oo3Hm4uAUfEL1E=\",\"GYn3v9w2ClcjecFCI/da698EJUpYnJqa6m2A4CDhOiE=\",\"KmXg6ozA6mnGMcFr0XSCjMeegBQ6UcNajc3cajbn5xc=\",\"Bxj2iUyNh4mNjbLJ4/5+kkueMSISNfVqEdkcZOTWX6w=\",\"Jvz4zOtAP0ukQhnCfW5ZW3lPT6mduIEz/hoDHP0ytJg=\",\"B41cX25fPnvEcESoK6t4qFJ510HF+dXI81ItNNo9i5k=\",\"CPC16jXmmevGRDKE2jIY5z8g6Mfu+lGWLtjwcG21S90=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"D7bFtotb8/wL+EnBjoE+YQ7uIocWzgH61vBeAFgC01w=\",\"xgKq5LOc0ahBlfx5W59GUNRbeRr+Q2hokzljD+/7xg==\",\"EQRVVA04/Jx65/7Oi8/tpWAspygjqBYsxO3yH/VIZ70=\",\"CzgOl5Xxrl7vJAKcF9PC8bd/Lf0d442E5MlaNEBw7Eg=\",\"LsrAh2cog2StOrAPEGydRf4QawLmJL2/K9o/knOf8D4=\",\"F0P4X4d6oSHxqOveZqPO0W4OLGHP6h+J+PBQ2HKSkzI=\",\"BNDL0dHdCodHTjXRXoYCMzKOZwV8E5jZkh+TDbHDK5c=\",\"LSK2k+xwrbEjrbMA1prjnM3+aHOvvmb7/tD9EXDw5Jw=\",\"D8jqjuwHgprUaOGPgEy2hUJaf1ZwLHi/PvnOQk0v9hE=\",\"D0qi86rTLnCaQHqAr/zpfHUdbRiLbJ7U3RO//m7N7nY=\",\"BTdIUtImHa3x4UBDaLZ7+DdzmasqQ3GscewMbsUlFQw=\",\"BJb1RJkuM6TwxSyEBoh2I2VqrT8l74/rD0hZA+lKImA=\",\"GKmhbm7QRLIEWYIAJb4ak4dHuX2xZlUlgaA3ISenXvk=\",\"Ci8cARqSHe8LruzaZi0M2WxdVO/MwgiX/2e8GOY1ljY=\",\"Iq7AB6cuUG+bBwjA3K3WqVphvd6QhJ2foPfWykkAJS0=\",\"EvFgfub0wRCqpVdf6ZL0fgJN8JVas6mF/1eXx0R9s2w=\",\"CKDiGuvVKYQAgCrWipbWRDeLWArtnEbLcLw5QIu12WE=\",\"B3IUvfvsv/7PW/gj7l3OQQSDya9JBtfl46aWbkRpJMA=\",\"DYpR1ph2jB9i/4efDkeOmPEVf/yIzMI0+DIkSWiax50=\",\"LKfVRz46emngSNsLfq8cvi0VvZfdYsCIzCIq85ba+Js=\",\"HbUEwzHTiVp4Z0svaF/KsggUgvsgsWhDq9TDT5HnVMI=\",\"ImdguCZZkZ1XlbsXGyH5L9+TEEU4HF80HXcqYBjXjyc=\",\"LG7krx5x8fRqVpQ80aQK523k21RHzmYD6uUlgfgbNc0=\",\"GPEaa3IYI3Bm3fD3MLEeUkBLZBgCj1kdKwPd6Uv0B9g=\",\"HHJrxto0gD/EUWi63M+9bQ6Qg4MDtSVr6fPin/X2sqc=\",\"Iw2pKMWaNpBxZTlswS9RVeM1jbuJGUHjpw0jkYMTJ4U=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"CmlYvkuXG2+3EjKbmR2cKP8VvgweronN1GEM4nosfBI=\",\"GPt5mD7RBburT//HxsUygIZ25wLV1N7rgqyb866RGMk=\",\"LPK0Wf2PvuqE/oiggbidsue1AtlNFJEm9qUygx4xdk4=\",\"Akh50x6w4TxpaNSGo7sB66+/5vtHpn82NNEpQzTYNOU=\",\"CyEDMC28DHxshu+g/EXM/1RM+J4HN3s3vYGy6EU9lTs=\",\"Li4fxMVEPi7oRIO7cddTrCxw4Jk8soDg1vbkIHY/t/4=\",\"Gp4QXVim+Pyn+1BeYkCy+j99hNG98dxdYLrtaDBJtIg=\",\"KhBCzojtwLc+9MLETBLW2cpBmy+BRMSvhu2N8DefAuQ=\",\"Dahwd5Gcr+lKuk8jS2+wePk3BLtBVemo1V9MfIuIdSk=\",\"EN+GrYO0iAC3tm/sCEOSbn2Vjx9p4MLOMwWlqtDWuLo=\",\"Bcpny9Rk+DDFYzuEzz0XL4isuFJpI1jkvtCltp+hlOc=\",\"BvH1S1rMGOsJ96xWnFEXegJI6ejp2kCM2n8GgmzxnK0=\",\"Dtz8tAWvnCEyo5kq7WbA2UXQHvcmiIxlomDzxW8giy0=\",\"MAlSXz9shkHaqfzhCANr7nvSZedYrSAoEM1SYQEgFSg=\",\"CUOof0t4bwculje1tY4oCw7xDPdHzxNyn9Tty1wJ124=\",\"L8/NRkf2JcQvTBKdydeCdxx2ETS+Y9MUAnmWDmteMiM=\",\"Eq+ksk7oZ7xYvFfS5VGVIVvfwfKdVBsJv48TEdjc23o=\",\"J3If3lbnDySJZOORhaNa98OORtj4ahYLUI/WO2I0ibA=\",\"K8dcmGVaNVyO99SLDbNlS7LFefD9zNzunPJ38q+DQHc=\",\"H0mw1q9LujqdiXZOs/xaY9qVtVlgeuDfIGA0RQ5AGV8=\",\"AcoSSAwKsYaJbAHswo4KQQFIFLmijeRfoLebkKfMjPk=\",\"EEC087vu29L/r7pAfCFM3Yq9ZVXLVNWQ8u3qcUXZpIs=\",\"Ex+bcKJHMDv4QRLazeGam5U/JucnQnncl0tkMxT1HWE=\",\"ECp4/pYhM3c9zcfjCgD4f886PvE1/k8B+alRe1cuA3k=\",\"E4mtzIk/tEeOOLPzR3uMI8QTgqoL/+1LilT4yHzMYoU=\",\"WesH7+6Ylw3TbihXoYPEPW7pVgs8kP5UUVpdvlViGw==\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"L/fMrktq7RbFLVzSsr5E1mlokUlB2Ro8nE041cdv+IE=\",\"J0BNgVTLQ5l6XWV2+kYQlsmsHYhaFxiLuddBeANpdmE=\",\"BB8WY549YAyzhZ9wHkbl44uIkn3CDkKQMIlNDSv6Xwc=\",\"KAy85wpfcZvfMJbOysIBsseWk8E/AdQK8Gt9rjU2hak=\",\"Cuui6rEfgNZScUTLjxOvry7Jy0xV70JL0A4qxvCcu88=\",\"EUc+OKUWjDVAQXjgxAs1p7LklYQkZRjFITda9w6Z4ZQ=\",\"DbmTXqsqVVQAw33PiEyyzPEibE2TGtMWdJP/CicvraQ=\",\"DZpIHPpu8MXEQceQy4ybMOK+Ct/Scj6lwc8Lli3HpAs=\",\"Lo/v5ruKORIitlNBvSWwGwLODYi2WklqnFmrryXKC10=\",\"GdrQxbB4rIY6yrAovt5U5sH12PS4yBchdsz7U3QLsQs=\",\"Hc3Z+67qcpVeZ1L5IgXojglPxapOm3X6Dhc+BCWpXig=\",\"ASXrNe1n8DUhkWnef2EsG7PreI43QLkFTsiTUqqy5QY=\",\"H2Tw9LKAKr2PbseLagYb0zRd3YmJmKuRYKErpV+Zd2A=\",\"H7kh0vMLE1BNMfQtDLw7PoNxSjc1MkbmQm8qjabSbD0=\",\"JBQ48J2kPZmReVLJ9gDUej8wt5teyAkk9EJzJtKEq64=\",\"AspQTs4Q5zFkXQnr5SYUw+D+mWebTiECl4h/RfmfBV0=\",\"DvkJRmsAwAxNOeE854j84owy63Ph5FdfOWEQzXjGkMo=\",\"KKoq0x8h8y8biY/QJfap00q9dcvPKWlMw1F4cX24DWk=\",\"Ln5hmwGnnvJIabuKV/DBZorOfXtyHiUxZ61mHyefZ74=\",\"EJJYeKIpUdIWxTBoueK40qLUwjXuSDljxo51skY5LZo=\",\"Jb9xy6oi6T9TPXIRiwThh9IOrzwHyWuGqFfkQ16HDC0=\",\"LBLJj+f2Y8wgf/t1O5wJndwN4td0dxp8hP2zefuttls=\",\"KHnUz8bv2E/rDQXRVGlo+Y4Rw4N02z9yt1NBLSzy4/k=\",\"ITwgXDYqoNQYBICe+l9TqTxMJqydHpHs0IGSL65jRu8=\",\"GmWy/NXZwNuNrYmKACqcEexAQSN4wQeoqg/3DXQW06o=\",\"DWrQsoajVbQCYFi5fMapUqbKGuOuI2Qegby3V4MUBfY=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"E7Wq26hbAWRPrp4uVCuOvVADaGvHUTmUIaeYof+sbYQ=\",\"IHpEyOIETy8uaVPCv0Vo6KvWmCTzAcyiaXImbg4YV3w=\",\"IDZsYeU9yHGBJdBPZP9wiB0i6Faj9NkiTPhjMUOpVV8=\",\"B91Ua1ersKXw/HU7ipdSbvNBewannzDlovKDPSBb0ps=\",\"C7YlG3u87u2ws2bj+xF2dtGjGALTc+EBF8sHyO9KusM=\",\"DBmw0vySNlBcfHtqSxvqP5H1a1bS1Naw3aK24PQod34=\",\"AyOFloA0kiUq8zM2Wt3otDuh6mcisL7y2J64shXnpWg=\",\"EZw5cMw4bW8OOdNR0NHzCMhXw1Rzcxc9ZztyxdVV/JY=\",\"ATV0wLOTgrJJKAyl6GWThSrUNUFxV/zEp9evI7FCW/M=\",\"LEHftUczDjzRqzbc0UsrZfbba/8M8/yFjXtFVeGtLIc=\",\"FRrDhtNZEaJlGZYT3fF9KMytdzM4hxIM1uwEsa5deEQ=\",\"IULxhNrVTPq1T0lzSm3I6FjN6iogOd/dJhMZ+9jtE5Y=\",\"IylgWR70rGR8bwK9OM0LTg8mKT6xu+cDYDcUZ23n5O8=\",\"LTPijzPBGOqoyaUDIuB5amV6zKGCK5yqg2gZlQGld9k=\",\"EtpTaAGFlzoQGPPI69pUtf29GWorGS8n3U4TvaJTCmw=\",\"LOoGsn9RrPBgf8NU9kwsNof4a89WFtvp5WOF7V9yRvE=\",\"Eq6WWOXjMlK7wXYYJOyBMc3dTwBtNU8dy9F8YTP9hOo=\",\"FQAmUxPq+hPk23K2ZKoGmY99DwhgPztZotQQkmPIZo0=\",\"Ehy4K5XJRhGJs4tPnRU13rvl5JlU7WhHZ9GR2P/V1hM=\",\"J5JnKDH1KCvNsTyxbpBJOG4JvBGnTBs0wq46UqPWnco=\",\"CcSeP94KILGqqODP6mnrlTd62Ge+nfBMEfoj6eVZyj0=\",\"Ky7ygH002XXbdPkS44X3bv7dVFrd7LdlIJ9TG4LJV98=\",\"B6dsQwStth6GEdk1Zwjia5iSCgo/xUv36DQenhieNls=\",\"EXWqseEhUQY4bn1qtujIqxGJhkhVbRNenXedkyvWVOY=\",\"CViB5yFXoEsOIWhlI+/MMYzYEKLTGvosIKSb+jzsp9o=\",\"G8JZX561dXIfLMBIGA1qHf05sslDLEKIuJb/JzOKDBU=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"LXJUKgLWCT8imST1d2kFTwyfI0EYfPy0VrJfZZzKYv8=\",\"KgDSpopBUTGQYED0FthaQpO/4JjvbGytAd60E+3izsg=\",\"HLAeXNJxBJuwMl62lX0uBP5GxPQ7iJSO3TsPrqW2lSg=\",\"LoO2d2cyFvMh+svZBpnJ8iwuJikZHHb375m1FEnI92M=\",\"JXXgSeM9LwnIztTT9mP3chAH3MrV71SvG/BQOlRdeMA=\",\"J4hdExxTUgZPKx39fszJwetWPYbz0RpJAaTO0IndJTc=\",\"C+CcoPUMJdpXrDSK88DFFIO6vaLmKyw7VdAPHqtAx8M=\",\"IOqYC0BgDL42UWh1ARep1A4Vbh52M/9RJXNUTue+NM8=\",\"A/AhjqZCAugoQJp8ASxHQZ7c9/8cKQJ5LBF/5CdW72Q=\",\"DmpCsonT339TVfMtzypQdzWgtOa0rS7B2+l2GH9i6t8=\",\"IkhTw8opxPoibZjE4kl+IQACJcag4JArPYAdhSJgay8=\",\"DFKVSAaR7nPYCY6VVwp5TP8WxwznQ7uKQt1idxVkhBY=\",\"FIZFpkIRf2xYcP4kMG+bBAH/odoEkI4aoPa5QjmGuts=\",\"C+RIo/foktgNGKTzThaRn4VHU2xRe0nKRX/E7JFiozQ=\",\"K8VzYw+UimaPZGBvkSj48BBcEbCKnc6Jr/OwKgDwpcg=\",\"JRllABCyuWQkFOMzOLR/HTPOSXbRnx+r+CmNtw3soe4=\",\"KCXduAPacYgAvu9pqGMPx/O1ggbwbACMmHZ3LVInc28=\",\"Lywk2mUdgfQD/bTc5Z5koqa/F+g/ViQmpSt5q150Acs=\",\"A7/e83dE3SP1rJ5H/eEgNXc+t6HGZokPPYEVoMDxdJo=\",\"LfnZ6dLFTMh9DKyswinVYVZrVrDNAKaLMdxwbj8GNRs=\",\"FMKbrIIvbZ1FTBHTVSDepyP9ebBhEMgTXheFNhIKC48=\",\"i2/kFXGRhRrO6YymMgjdoyyb9zyDPdHK8VjpkoR6Wg==\",\"JaPf5o11E8Gia82ibEEkEqL3roDP2nr7+Za8gc+8zFQ=\",\"LTwCma+FT8jmT94+DtBMO8VCkic62xA/dL9iPoiWkdI=\",\"CMwnJy4WaGOP4/heXsdvXuFZUygRKpSSY6/I0UBtPkg=\",\"Kusr0KjaP8tX9bQo+FD0F5D6aPW1S1BnlK9NsEowodI=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"Ee8Eo4I9ctSn4HMRSy5nkeOLW2rtN2IorEogsu6iRNM=\",\"EBAiBVZT/NPSZZ1qQmlFeOvVGLVzjmzIhBkuEJH1iHg=\",\"GA8FkT/cD2f1B0yXazziE3r80cGylA65UbjecjOX0DY=\",\"Key4oAr/i7ZP4t9CIcxXuwzW62sALu8fc1sCMacsfpE=\",\"FhVgeAV1kdtYENrecNbCHeOngtX6MUMhHaMu2PIsDow=\",\"Ka+PCUQdwsDhNEq/Y/04un8ISQ9DX8p1omOQtOWbm6E=\",\"JNi+8kL16pXNI4hE6RNNlRnWaCt0SNQLyfHtiSDrSbs=\",\"K3a1An6v3XpqOQJmVBbLB+cTlSUhx0hXzsSoKTdfy6A=\",\"KT3NUkfhFDmAE0sV+e+9ytPncAtu/6qX4XM5dF4ASl8=\",\"KsahPnmDiKl6XZuFb4+lruUDb9BCL5REdJ87jEueiE0=\",\"H13GSVK5wbuJLdrnbeghKqFcSVCMt2Ck9XnWCMZl62g=\",\"DrVYfFxDjbF48nJe/BtznVPSYfUsxDQPZIioJCt0kT0=\",\"L1j3fEwD6Vkassw4Vn1BJywdzKRzzEvN0KR4PSsHvNo=\",\"HJCM+OQZdrfWPD9Zzd3Pg8qyJDOHA1HGDkvqIarzc88=\",\"I1gRhEQMLODzrL1u93jlBPYWLxkw4GaIQXyC2FqD6d0=\",\"L8pio3jGXm0qCzttiUiejqa/XZXPJ/QLFsWKFfBeDuk=\",\"I5BRGBLoshrVCkTR6q2WkPGHVB9/+4oP9E41zjsnM8c=\",\"JGYKBSRVwmLPt4vpCkM0Uzjb2AjEIuiA7taxmnakLZ4=\",\"DbARyKj235zAFj7sPrpRsjCDfbIBNllBX/sks5WM8Qc=\",\"G91Fj6LNQK1JuhJwnxvRF7pnY597UqdzLFa5jm31svg=\",\"Ah/T5msjh2l3SmUOEVnATEfqNkpIFX3wjZDU61OXTBU=\",\"B1Vu67Evvu2VTT6dxNXaH/rdV41MyvJzrNzAY17cmKo=\",\"IAofD6TnH7GqHJtFlJGFdp6X0p0RyvExhfqzP6s24Jw=\",\"F5UzYDLxjh9OOSsDtlvD3SaIE7L5vrvsAFSKGLo3kA8=\",\"Cz0tfdx1jTIMYe5uqBN/CNLzHz0Vm8kYsProlcQv7bw=\",\"K/GjlIY4LBF6KGoZq5bXO9qpybRQllGPaUkfFX34XA4=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"ItxcaS2brqD6JoXSwl/FEKQ7r94DFdocUsEIEkvUCw8=\",\"HJp2OVCkCek2OZfeTjvqoJRLDx/rPZFyOECVhOnI+2g=\",\"FXYfBZHZm8NUqgvEoRFTz7C1M1mT5OYA1NpO2I+zMZk=\",\"GTdHNvSw6/fdOuz058u2aaU7Tfuh3dS5UXae5ExR7cA=\",\"Fha8N+SJsVWaPoE1RPLT9sBaM92KOcZE4Bea7rwnTMg=\",\"L77VLqVNVqiq5AovFiYrXKsr7k6WTzKsuhYGeEHvXt8=\",\"HuhamZmTFQCIOURJO68kDrUd6OgBX6vcuepoeXuwNpY=\",\"K3jqebIzZWB+ghqUe7S6gDXyiCDx3d3xyrp+2uHrKRk=\",\"DoThHimkuaxBwulT9hzIbTMlQSD0JuIX0uVydCTN2B0=\",\"LyjJaYepruonXaX2vYahWYZ4TaeXlvMI/pbXsovDsvQ=\",\"LBTPjIyJXvrNlsUB1UYd9cL5SUkREApMG6pbQPh1Guc=\",\"DTEauhFo4jUrQ4AVvUmzHZ9coehGCAG75l6/AZd2zhc=\",\"LR/5r6yiM5xm5kD96W/b4OWG5x15520UWs3RJgZsEZ8=\",\"HF7CJn21Z+jV8YgImeOt0X5+4MYRYFMgvzL6LTsYQtE=\",\"AgKQjU8aTr6tesvQn87PEKj+VXQ17PUeMINL8TaCeoM=\",\"GI03xoJVI3FUdaEOIeQy0hqPkhsyZlzaptyR0xkT2YI=\",\"DZdrXdvIQJ+2S2XhxfRYvQWP+NeJOG/dWV7vOgZOq8g=\",\"GSaNFLNMzM2TlHtuxkVbbbru2hypy6gvM9bk5oIGbbY=\",\"Bo04rsaPkYIT7rFaPV5ls6Ok/5MLWbcz40sLKV9tsbA=\",\"JM8RchnYI5lNIhDSvCtgWFy/bWZ+r/vHJsK2ij/kZvA=\",\"EiV3kSExpUf4XHQf/8TVql9uRUUxGaY8MAT2RlHoIcc=\",\"GZb/am89r60CRad7ogDTneM3HKK+UmSVJlescDJB1Ps=\",\"HIT2zTw7HQkVNN/5DgTwZ15sbmCqZgw9xDZuqrPd/TM=\",\"EfIykEQq4EjCYi876D5SqzAmYLxt8xFx8mvUKl81b+c=\",\"IxG8s2xy0qP4sQPDlYO+MHq5GlsCAlL3yAFeHJrn5Ww=\",\"ElcHz3aWPWR1pdxcH4MhZgcNrUDqq3DNMbUeg8ytvPw=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"C0uKBVBqBVOH3ZXZXzyRv2odpone1D4fVI9wNklIaYg=\",\"HQxqyELszUcEXk3bNOBMGTj56Tqni1/iwPRLAMYTGuY=\",\"COriJAZ4efCDD5ZyQe0IIfQbDiD5zYphIfB6rBDjDMg=\",\"Bz95aUt1GEdmTNXaMPOAE/KlL8JTClbwGhCQHO+XXNw=\",\"EpQ4HvviV8Ec5hNt92yubKpMpewZNPGn9dSJXpc5Gl8=\",\"DIDmhqsJ2jGViPfBeyfbjcYJgcD+uLLdWL6Y/2s/VTw=\",\"KLRC77daqOaw0nesE2E9WbCZWbOh6QtFf32T+nuuZ2Y=\",\"MCkEGBzfoZ8zqig49rqDzwIC8iBUhWFV1cEKDVlwBCw=\",\"Kxfcv2lLbuARZjd2tCIQCYnyV214UEIn1UfbiJrcTck=\",\"C4n9C19fy5Sj/BVGZDkNfbx6jwKNsGC3pZTyBetVTeY=\",\"KWQ7CrbNFIv/62utVONL8TzKAOqYxTjZAOlJ+KIj0cA=\",\"JaxA4S/106tHd5BE2iCjX9HsdH5/mAT5UdPjmU8L5kM=\",\"IrGdrkdSVPSA1v9lFlT4CObJnPVBhglPWk/LPZyZJSQ=\",\"HFWRombFrBTxyDhIu+P5vJJsg7ShkDGvAzTaZOvMD1c=\",\"It/YlHcBiOZcQDkNfvGpB4AKuRYRhTCgwbc2yIWkJkM=\",\"A85zCH5s8V9MDJ6UwFsUkPWPLMStP8dGu6zj7mE09l8=\",\"LTkTgbwOxSoiSprdFK8BuHW5/9adwRXjSMHWw8dDzik=\",\"FWHzUqCWyzKJBsCRphK5q5KkQz9dZfT1XniwLE+EQUs=\",\"Jd4UbzzE8yts+GlP3YdqHJ8CaeidY9SKiunKBkqyrmQ=\",\"D0EClMjZGpvMYNJfTHOkeXkTonBn0fZkdx2o0ShKd+k=\",\"EaUitrJWh+JY3zBJVLuEzrGqqdl3uiku8bpJxlKwM9U=\",\"DQYTZhecAmCPBraYStU6WtyLHv/GAnWBfnnn6wMfXdE=\",\"FLRgTQlfN7WXQlTkjX28y2jaVTBuCNAPu7jwa+vxX4s=\",\"Lw1fVY/URUsGL6M/HlLFplWawTea5QeqsVIQT1EetTs=\",\"EbMH/9eIFw0ZaFNUeSC5Ftam+2OhXUyrVFLiFfYmdMI=\",\"LEsCHit1eGO0G87S4apb5+d8FS45YCb7qgnOpRUAHDU=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"Ay+64f40UnFjJAPajCqWo1gFwqPofERXyKJRE3vN44M=\",\"GXNgxHNx6y+CZuBSdiy/Qig92MT/FEYhPBwRdSxsMNE=\",\"ITrpfqTBDsSmRyDbiBDfNwzj6dhJL2gG4GyHHw3MS6A=\",\"I+oCfnLnDl2074kxbvOhJ0VPoIK9hLJVdjh4OVzhivM=\",\"GlIvyZgS/GreKWOFqfZM77q9xZtmTTOwLLHIBUZeC6w=\",\"KCvdfamWodWMzZ5Hl+F9ajAiRTHz13O0jvI9qlB3KYs=\",\"J48FH/WjWtmg8eXOmpnJ4bZp9YsSexdLFXPna5qVy2Y=\",\"FNLUON3V/ZdW9K/pZJwv8sndry5tGtELjcRVCGL3Qkw=\",\"GNvKSvf0Za1paLx6GDfAPRDQmpTwPD5/0/J2foa+e58=\",\"Cy9MS7CtjCBH9i0uaxAk2hMViNFphrA+Y+jOnt5sf+A=\",\"ITFnl7OHB2I5CzGkjoszsxnaXats1KDCgXDu6lj3gg==\",\"BrP4buaOclgPiUnHzn54m2Ke/uy15xpk0Xyx6PS1chE=\",\"IaNkIzeP6N3U06xKbe2LZbi6AjWTqZdYq5F8oLZ6Mko=\",\"H/aNl7TucfIhELA+fp8UZB2OmFE6m3DJ4e/wAP1TcAY=\",\"Lg0arTuL8hMU/VBtQYzX94iHeJWFooqu10fNrPd2W38=\",\"FIvUqfbc8Zu9pm9FMetOh2RDxyns4GEvwAXdicgI76Q=\",\"DBHezXdm9WAejV3AmWA5nipEElS1eqJbs7uAckqFENU=\",\"ZTlQ+zHBOEIHy18i5q2+k5Lg/Ttvu8nrJfQGRlbltw==\",\"Bhx75Rjip+fZ/4r1jcrPyz8Emc98Ne0Tkpr/r1fJWBg=\",\"BjJUbd26V9qTy1WuT9jdAGXsIslGhqY8r7axUdlP76M=\",\"FFjWQo5su6TfhKRLpqrSqcsNHJBBKDwexSd7KZBBh1A=\",\"HFgpaz2p9hRgYQoh3/G6gStyapAR8BgOT0V4dPfYuPo=\",\"EbA53LCvjHlSmPNg3H9VrKIBw1SHsbgc8An+/CBL3MM=\",\"H828/SBlRz1Jmgdb9YV7rLqUVj8oFFd+VwWgICEd0OY=\",\"LZ8Cplh0JjO4j+QYXcKbxCl9eqndRzdAGDrkYELfsEA=\",\"EA6RWpvheafLJcIzKj1ISB3uwu2RliFKVddlMJy8ivU=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"GmGMaNugr+kN8t6eSqMJGuc1grU1VYIryQOTJ0flILc=\",\"LMFoPVMSAx0GuJcQ8Ds4iQZgBhd8V0zjytsJPn/1owE=\",\"FuYZf3wQrDWyQywMoQJJs7Oajj64PXAkgv/digiI/gk=\",\"Ih5L/xVsahUmC0xWUQZPvjs8+PEHIeh+6fcucCF1lJA=\",\"F86fRlkfuep+V5Sm+maxQ0/sElB95uj7weRHLScQmyg=\",\"IvzicMSwlhyJ2SMlxSyFFBRh4JlOBBMtYy7hnZxR5VY=\",\"Fc/t/jCEj6VUMrYud5EQlpikV+zVRp7K7dufCD9mWQ8=\",\"AzQ+kIjPw3S2G3WtYA3mI2qsxHaeXui5rsnwe9CWn1E=\",\"Iz1z7SEXmBDMrOEifccvL4yA3bRGhh1ugzopxAhNRLc=\",\"IMj9IMoe8gw55smUePK96cRtu8CvqMhA7ZPLFT+8C+M=\",\"Bpaxh9TfCKqoCq8nLRL3I1L2vi5nVo3EW5si34O0xnI=\",\"JiQurqldQ4MFdKU3jycpl1PHkHE1yTUMwK+jDBhzxCk=\",\"LbfnTFgoO1XPa+H+Qi+y8lIwIOBFSbfLiIFWlL3AeMo=\",\"HD22/J8/q42eYtBIyxqCC+p4xDpx8gL3ebiZahVZ2CE=\",\"FOqoBCraOip9JH1Gt8wBOLn9EkZ0gjlC0gfHxqMw05U=\",\"B94rYbXXeWxVxsnPSAhWnWHHhnH3SERT0gHSnL5BmqQ=\",\"HbOKDCYr9j4Kp5KXd6wJFO2oOqskqkfYTmCsT/GL/E0=\",\"LyxtwMvMJtCR2VA44Eoohvvo9LNopzi+65lSVf/wnfk=\",\"DMIk1itjVy3ld5k+SCBdCn9XTPMq3Vy+UY5VFjz1QMc=\",\"DzAcFDgLgi4fAxnNV11j5gPshmbzYbUA0dbChJTDCaY=\",\"Lly91MFZlVfVllIu+9B4yOL53sp1A/pTPqUjC2Iuepw=\",\"K3tWEcbotfBf6f0BC9pjs9a+wakN1OTZXaQLtyBQPVM=\",\"CsgoFVqmYn6/SG1UkbrBPDK2HOy00xeM1HATacJ0AVU=\",\"GUa+jBHK4h/dF26v0j/WNTUgMaXfJg7cSTyCD+BbAMM=\",\"GfLfz79t+2WoBR1gzMCHleY/pT46Ss+JuFJZ5vhfADA=\",\"D+dSqRad/05ALHaoCVY/DYPG4m2e06sqOw5AcO57qk4=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"J1gz1WwQNd4Tg7frZ1nmlxKGr5UPW1uYzrKiqfxS9Fs=\",\"LALnqH3r61ys1PnHdrWZm4IW8GIeh3IKj2cv/TBRGY8=\",\"A6b21tu9lXVh4zv/Hn+XzhuLy7l+XjY6WIEM737pGFE=\",\"EW+o001cZ9KQVV2xJjs00rsM6DqJqBxaC9QRCXbv2jQ=\",\"HoHS0tBPXMFtuZ/bNA3z6F116cMFtUHS2TP4uAi24HU=\",\"KEiY9W3N6bhZg6q7UacyRHKVW2JTjIxvvlVAgKhxSXw=\",\"H/OpCfUB0VQg6e+3+AccD0xVZJ1eD4Gk3g/jG8TmlKk=\",\"BHvhqfzzvHhFR0tX1E+xIYvekFz6HajAUqlhQoC9nNw=\",\"KjeHox5WEco4VsyED60rCge7+0FyhZ+m/lJ7fg1bNdk=\",\"LrO/SzqYx9plUlmZE5PPe4frn0kIxHXwD6z8VXLIhbI=\",\"JqpfhjzjSY2x9bcclkV8+XIyz/I1NloqEJG2qF/JTW0=\",\"Gaa8fxSNBWoQ7RYQ9fmyKoJ7qF5RFEwEFEAP9NLpHt8=\",\"GW9ceHJuKJ7PynotL28qXoL1HfVM1U1M7RYnuefzCnI=\",\"ERjASNPerQGaJigQlE75/l+gF/Ry1cvo0nt//SBB200=\",\"THuBD/Pw3tRvLUzzRuIuQCpSnUeTMUo7yF+WOmu0KA==\",\"LoQyldsETfSrIHpseq4maT83peV2VmPyLGgJ4i+g7SQ=\",\"F8v56ekBlmcvzw0FMMCgLd9IeZVLzNgvdb/vtIM4Qug=\",\"J+oIVhyNBZmLU/QoFmygolzszeQ6nKi9J1tPfFN+7hg=\",\"A0kZhFZBBa+bvnTn0U6W7qWNc8OXJ6iuYWvcy4okUfg=\",\"KHAREYuSIwB4DVugmHjImMZit9W8yDj92HUBcLZD7q8=\",\"Ga8bZqXSxuWkw0hWs3paKqGZJUZGHWy2UZD3TXMee4I=\",\"BDj40aaOBN7RJPNwJ0Mk6dtbNcARSz1eGfvqfYZ+G1w=\",\"G33yXgLC2IuvsZsvlyWj3awCR0bzC0sCMlGNPUuOnxw=\",\"L8pj+Vd7P4jOYU/fF0c/fQM70w8QSTH6wk+zh4y74rw=\",\"GngrHEcyhpAUse+JJiBjYEYO5um3VB9esL6hoO8YTbQ=\",\"Fry6EVeCkSVnT6Z/SaYqPadCwmOcYsq0PJI2LCnIwYY=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"D6pFak8zSm1k7HRDMwAnwPb9w9AjICnsXgtymeo3IpU=\",\"Ia4WgCXYcWAVZMuUcStv1w78V6db15T5bglVasn6SZ8=\",\"Jlmzh9Brh9KLl8WDJtYPio6eIJVpJct3T0+5nLD8e/I=\",\"BuzWU3OE0/lrz9eUpTscs9SsdXTSPHU+IBhawFZBpRA=\",\"LEezWXV7aq2vORaFgMoTUmjuQDD4V+gweUCdufYaeog=\",\"LjxFUbpOob0vO7RvS0EcqGrMw4xUd3hn5rbei2OB5g8=\",\"GqpC1nd8DMzfbdnEYoz7T5CRyMThmyGNE8XOjUGwJ0c=\",\"EB1xdezTmM9rXjOUAO0XhmlT/94f1JyvIyeuOeqAXi4=\",\"BHqsAq1Rxg57AT1+duAhmjM5XUEDxi12QmuX+4pyC9s=\",\"IVlzTfa6Dr/L20QS9emFhw+DbVXqxyeAV721+gAhOaY=\",\"EsgKf4C8V4nhfnalMjzG6Hniay7sf3CtwU6RpnnXFfw=\",\"Czf/g1whqgjPXoIGPvbewt/t3MmH5/4iKni8mCfHl60=\",\"E2ptAjwpwzsYEgc78M+fthYDrUDd6zyt+PICWYyz99s=\",\"C9v5ci0q7WPQBZMHYXxHrCaI2dAai7IPSmG5UlLdezI=\",\"HZDE9MUuTIFX7G7LP+GnCTesjDZRAJNcPsTDWRN9Ro0=\",\"JdjPupF32Be/4tsIfKf/dPOk75KYbG5c/epXA6/6wjc=\",\"AwViNIGX8jshI4x3fj1/NmzJ5p55bLIYKBshCsPxoUI=\",\"LmtbZ6X3RJtCbj/TLv49+Yrwv61QBtY3C1dLQMZFweA=\",\"Bgxyq4mDH7z9EITNPclKqPaXlFQGcb7mItaDfUGt1EI=\",\"CUkEfIQszp5CLXecgPoT7PWspYWQhq6cN1nNOwLXR2s=\",\"CMkDHj+fzI/vYPgugCbbGb27URPHekwG+krz3Xva60U=\",\"KFCQXODCdeQnR4/7W/RGhd2Vzx9XBWvBkQjWyFw+fNI=\",\"DHbxn/n1IWjSDLTwzA0QvOk9KLOs1tR56ji4qW+URFU=\",\"C2b6L50v7acQ3KEUwiyr6vYWxw7Su3k6fqoyjqHKPJk=\",\"BhmHVM+QvASLZKjpJcQckpiJDJRquiCVMJDgXlXnaMo=\",\"DGN8q4hkub/4aFkca9FEJIknAqHT5lQDfQYlslgSbGs=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"ITJaWyrpgu4jpMkRsZC2MAWRnRrOVaEBgYOXxzvnL3o=\",\"BI1ocrhOhg6TTkObBl56Fi1XBbV21PwUxHU12eCL7CM=\",\"Decl4viK+cI46IDXJecdih15xL5EIf2VKcval2Ri7YE=\",\"An60sG01KjQE4WJkoPsIU33crCrdB4JIHC53NdfvGAM=\",\"G0clTjzdRBLgGCnwPnT7/K+fiCt0U1gpQBJ2EQaglVo=\",\"G0My9LwPR9hyjaxdEv6ZBwpTqw7RRixq3ZukLCMj91U=\",\"IY0i1fE7Cazonjd81+AtO1K3ShKFBy1iVAhCaG9yiuU=\",\"BorWmXqc7ScNrKlYE+glJ/fmpNXMSRHH4P3eehoGLQM=\",\"BnoYe8Hg0XQOvH9zQzl7I1zgA0vW9v2+Q/xQOU7dZc0=\",\"JtJ9m01QT+sa3FD0C8cXHlbpzHsXCG1orAm9M3q5p1Y=\",\"BukBr8Xch511730yTHt8jLh3L3lIgp29IpOrAyqc6WI=\",\"FMjhmZfqe7QTH5dl7Vh0JaL+X5GqT0yRggHnQRC8dSY=\",\"Jzq+XNmFQTSWGMmTtxksl4+wL8I2vUDcOkpPYdvOlvw=\",\"BxXTRhNfOxP4SmK3lPLQC8GcqyTTXRaNH5VCnYhW4pY=\",\"K5vPpt6yUsz2olUOGY8htf4IAP069wMpUASBofRy8XQ=\",\"I599w4F9900OkxdLFWT7235AELabMq0GGKFpdI5JbJw=\",\"IZeNSOLZx7CX/U0MtywjiFXDO8eYNO97CEBbG2ols/Y=\",\"Jpxwwnt1ZMnSSmMf02BNQjhSjiCwEJEpFuLBkn31uVA=\",\"LFg9yWoKncn576rB3oUyfwB1l6XoEv1WTfnkkLXdj2g=\",\"Eh5Bh2BuOzOCEGBp4NVt4m3d1FPIHQCWR6nLX0hBgJQ=\",\"C+6rDGFcSs+xfrn43WR78DkX4RacnDjQ85fBDp2tgO4=\",\"HgcEmu/TT2Lrm3As3ZPoTk9bwr+IrFg+5Mj381hjjDs=\",\"BZxkIvDJ003IE5SL/b09UlpQUBIquqclJhsheUpLsD8=\",\"CtpggnzOMBuzq6PA28GjLRTPVyOrSoWr1IuqN7hbMYo=\",\"EDcLgvrZ+jiQb8mv09IQN2CyeaWnmAMDmsbXtH+/sIA=\",\"IrU9Rww3TukPNHfRuzalenzT45MF2/SJXRo432WCiWI=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"EhusFE6/cxt+EGMIABUBtaujklZiLcFraDKVnvMtao0=\",\"LOU4Nmyc7nqRyTJSy5a3xCtOSyamvlfB5USFJOWs83Y=\",\"Dh6yFNREOoI2hgYtT0T77L48rAUT7DfcaWmiSlwvNOo=\",\"KxDzqlGQFcufLY4D78PlTYLNqogldg9AhWFY7qdVg94=\",\"E9zcl6r40j1mZCawCKAr54Vl6khfxbMXXyo208ZYmko=\",\"HhefWo2M92EYihr386q/0MZYajui2krC5glAZJTYsE0=\",\"JjUMEHZDWrdhXvkQPb2CJNN4DXIFXFvyZb2PW8RZxc0=\",\"JWmq0WY/vwxRK+XXVJuFb1BYuNklS6eIq0tn+VdwPdY=\",\"IdKWBxuxj/xgjUG5KEsl+Z6Jb5C3PEtuvGx+hF3SdWs=\",\"A0A60uTtutUxCLGds1gLvrV1mJv3Y5OazhC/OsEayUY=\",\"LoegaOfhDNCieAbk64f8SpCbdWAufvTZtJcy0w+PaLI=\",\"D+ywEyLM1Cnlr+7p7I84iMUoJSh04J7myCEQvGfhEz0=\",\"IbGi4hSAyGI/v5/sVc2nmaFS6UHpnQ1kJtJGZuzZp+0=\",\"AQeHr+UZUfVRxeo95u7MjAitri3rzywK3XpXjbXbZpo=\",\"Epp1hCzn84D0rc4GmXKgCqBVCEHkGtL0bRZlF3V28FI=\",\"AzhEoNWYehnmbAFOg9t8kDtqp7r/XK4+xvLn+YcKcQI=\",\"KvDQASfGgIHdKaXAhY9rsNINDoyMH6UNDVOUNqZrSVA=\",\"JFK8So3i2x8oLS2AY6tWjRHPAN3QzPsWVSOw5xmbQng=\",\"BwU1lcT5kgW3m/mFM25FZCJlD0lML3lnDA00JX7GifE=\",\"G60aUtKSQBsagzXfFUKUQ82NyMXoVuGFuMX50Mm9KiQ=\",\"JGNbfTrUGlvESjoX2Ap4GDVf+PGDeQBOU0SnsXE6Mbc=\",\"Lnh2Ep8DpfkHAsyqo149PCcJdWNgQhETmXz9+x7ZJ74=\",\"H2Ao1Q2KfuZEMgzvlhKAfH74/kAiN1Hb+PeRrFFvqJc=\",\"B3HJ1G9gLGE6aJqDNNRuDlzR0hSkgx67xTUlqy2A5bw=\",\"Jp8FL/bfWuYPdsiR35bY5KI+gDccgjSe+WAIjvZLFB4=\",\"KWFxAECistasUQHLA6KPO8L+ZJuqbvxRAFkgd/Fd42I=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"EHQM5nZr1dRe9ToLefaIwMmgdZOJAsZ2zv7IqCw9pTs=\",\"J/Pby2Csecpe66JsOXHGRgBUOFew16YBmykt9dYITgI=\",\"IQkxYBQNsqJeShfMdgASPO4iuld5CSbARhC4yV8f0YY=\",\"CJG+jVYrtv62DHVx82fWBIw7CDsq2wl6J+YuM2yyekc=\",\"L/sX1nSVj8t6jaLThVS8VXHG7+vHfolRRoghLGjVCh8=\",\"lMaIKM12nJQLJ/ZF26GSLSaJjGT+9V1WOP1uHTV7dQ==\",\"DVXLzzXrSypByrmVvRuQVx5Kh2d6kOYnk/YHM0PnmPA=\",\"GOkbw+CV+baH/mbP27+MI0wnrzF/E/wncH0nHocecGE=\",\"7AYS8pvDLYn3P38JJv4LPzWH3X7tScdys67yxdQQGQ==\",\"DM9TEQma7MgaNLVnmZ60xmPZB6i/SyLC8qtjoySsNFE=\",\"GD/75iKQDt+baoAhq4DbAGdvYZ28FzLcyPrWcSh3LSY=\",\"CPQzGu/ij7bwCeF/9jLbNQWxj/qmHGsNNB/gtjh84r8=\",\"Cet/M0mHBNuN/xyHd/9TnR3tK9IH+uS7dGXDdbh0cWE=\",\"ClMRmYMNcSABizA5x6+poITVKdkw+GXDj63NxAuwCOU=\",\"GUs88o17YkE/m4N7aHu7SARzPI4XTna+2Eb5IGjAZvE=\",\"G4YE4UhqNevo5rkAEn0Nu1Tciqypek6wyJVncwNfPvY=\",\"CbjeNnZto0HH4LgQpTkDviKHmRK3B+Hz91Lm8Hmt51w=\",\"GkNeuSDSuE/jwLgDyiz4Wmch0x8hd4cG1Kh6kjrQrDU=\",\"JWbZ6JPCr9iS9HAqzLy7l5x8zrmA0jTeVJo8bDS9r1k=\",\"GN+CcrA0BVfKj6mNxudcbXiEhHAtOJ8T+4K7Cd1e2xk=\",\"ILGD9yk8aMwjJPAaJpPT7azwwoaRaFUgy2wf958luyk=\",\"Eox6JiShvJIJPrq36lPg1dU7BZ4hAEsZyw0rs9unTzE=\",\"QCh8EbWj+YDVnsBttGxvo7VOnU/g9HTKFaeq0a0OwQ==\",\"Idf6QrxWtS1VfjSwkVGNamlFlSB6CZxxi4e28hb/zX8=\",\"Fp3CeWURAXw+Tr775X1vkxlKd1E/2oTvdFevutqKXVg=\",\"HXStcyodyAS5WE5VepwYwLSXIA4NJzEr0kMmkUcFZsw=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"KsqOJRlk0aMmH5jsg8sX1hHRf1dYrrizSoEhEh9+7Gc=\",\"EuKE9D3Xap8XUdETNdQ1FO+WP/3yA2Fxzf1PR8metbM=\",\"BQceGDkvrKvqsKOf6jbDk1cumAc+GDMNnEx+ZUVyBl4=\",\"Jg10VchHClyly3pjw5sNH8yj6xAp0plMXywZo5CG6uc=\",\"HPhYTjdnexn7egVEZEjVUP5ypPx5yS6T51dvEB3QUJk=\",\"LRnbordlit9g2IQOnHsRX8N1AxmDNckFBHDKPAmMr84=\",\"DZjqGtchFs6jLalsdFZb2ykrb2JnHFzJ3gkE4ayKORg=\",\"JKwCEyCqHxrd7mVdT+r1N+RwkVR0ooWrEbgP0WaiDPA=\",\"IW/rYwafaUe+spShxyQLIC0TKulF98uBNooseSI9ETE=\",\"Ag7MqD7lFW5gknY9eJc4Wdq1y/Q4tngvTUcn8H55Ubs=\",\"HmMqQvwyYDbB8zE/NygDz4kS12KzAmy0uGj/vsRk2jg=\",\"LmUtVJQa8U2QtDR1Kdboc04YT0jFgnNz416WoEQdVrE=\",\"JR/1Mb76qvxpM+GV5jJ6hT5w95VuoW+ZuudM5wPhPu4=\",\"EqxHrLm3EleCB+QpuYngF+AQ4vjlE+X9yg1dcM9pz6I=\",\"DMzxfg1huEE6xmcwPTGyflu9vi3k+3knL9JqlqYDPAA=\",\"IPIGCinqWK4RrtYeNx7q7fjEn30tMQog2qSwh0KpwZU=\",\"HLnw1o3TwUYQ/2kEAKwVaw+I3bNJaEKoKXa+yHjB/NA=\",\"HnX9VAYehmD7gqbyTKOFWA03wX/HMey2eq6G3cvSw2M=\",\"LSnrxPgHdBxpdXAKrDTdAoV7nKPziaNNKBruJp6VCdo=\",\"GHHPcXEfQDagEE8HUG4iEcQO1EMnx+Gay8JAA0Xre78=\",\"BjC36kCsagQJWecZMzlaQUp475k/A9IwYjOwqv/kqBQ=\",\"Hqh6wRLWDyKWHVstomwKBr1Nwec3iKOIyjvudyzHjn8=\",\"JqemwkXanPUw+HybIO2GrzaQh73gBLttw+7osyiCx88=\",\"Gt9aAoziuKB4fspD689Cfc57t7OsGf4KjAtwFq+yXmw=\",\"BeLjNIyfsJDmKKpAEB24tPRrat/H0x+oLh9sn+W1Wh0=\",\"CB2HvC4U8YW5wZ9M7Ej6UB2ZxworyIHM1uxPbmd3Iao=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"Knq1B5Bq3LZSLAQ6Gyyy8iHlRwgi8EgiC6cxs5M/MhI=\",\"HgeR7AyDzR86AAf/An3VifsIZsYlfBgdKTz7cLYqvlk=\",\"Ga1i2nxdh2bvkn7dD3+9mX0ObGVVpsOP2+5/UpmybYw=\",\"HPUY0oLgCxiU+GxCzKopLdIIvQ01duzRyxxF1Cb2YMw=\",\"CG5cZo8sdUDmWjebuXOEFuH0PgtBYZzcBAwyGqidt8c=\",\"K81pSmg/tiFgHypfD5APa6sfQpHWW7jCZTcClISzhJY=\",\"K28KZbreCtsj786cbjYpoHzvyicYs5SQKTYsbaS666o=\",\"ErJfSfsc2S2n/h/f288KsdcV7pKufiwLKmC49BBqu/0=\",\"B5fHqGO6gaoqzGIOCJrAr+L3E+Rv5NUszGN5U6SsLwI=\",\"ETFmEHcnsszZ4r3mKFhgyRKjGP88vhzKAGlz9EQjjxc=\",\"Kdi+q4p5MSO9tH471W1uDW5MnZV7ONasfKfVOjD9yUw=\",\"Bo+ZvSaewrzKMKXAWv1RNv62OjMV4F2tsqytPKrRx7A=\",\"HYoulfUBK5dE0z49uEJTJheX+t2keuCO69NJdTUR00I=\",\"Jqbfy/zSqY+hR70LGPPk9m4fGjKaFo46YTNuTaO7j4A=\",\"HVvbFbvP0hXYyqZl6Wh8LYrdC1HPVMUibtm4mGb3Z8U=\",\"K+pFe1aPwprBoj/0Miyu1UY6nNZIdp6KGhGKroTfEwk=\",\"Hb50Ge5Z3VgKCrQwVEClf7ZRgw+Xn40hZW/yixWQzk0=\",\"F6sdVdqP8XORuodMS25Sx339MWoM2VZtHijF3JMI0wk=\",\"BKOg0PnhsJG90zas0RfE7enWRiHGsupPB3JuBl8X4ss=\",\"JjStTpHR9j2m4lNMEWGr7GYNkjce2F6PDjmqkVI7nmA=\",\"Gv7JaAYKEGl6OIm/NFaiOk6Yw3gdDuiOKTNLFM92FME=\",\"I6X9I+yJGdYhdv85VPmDV31eqCHO5pU4fwlsf7uTgI8=\",\"KDA5xH2rNgcSmVBZIuvCFIIpX5VjLRfEn7jwfjgmQf8=\",\"GgCEvBs+lRrrPcY4hwj467UiR1J6OTIJZk1DoYEuEw==\",\"Fv36VA8mm0DydpZhDKwG+qfrp9h1Qt+kLSjT9FOnBiI=\",\"Bji60o/IQnwjSdKTCwhjG+CVvwwDVyEx86gTLzj0wKg=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"K5YLSqa9tZaP0nEG7ZJjmb9Aye96CrzjgVgZEVbZS0c=\",\"Ie4v/TIHNyFbo5nZH1KHtWKG5fKGRBsp5/SVDyoQjYI=\",\"GpEq+KOoKslEvDQ5CtevcD0eSo8ymW6g7KIDcJvVJsQ=\",\"Hi13/knRKpGdjuCwvcFUdfnT1d2oMbCYqSHvhUdUKrI=\",\"HkYbC/plg4wxtm6Jc/0VMwivRuZWPlI7TJe60wTOa84=\",\"EiKxu6WGwyRYHd3lUFQxXqN4dUQWt7dEBqRNkEaIOdM=\",\"Ixy5DTAabm4/bEegej8mLxQ3C9pamESkwSgHa1/d6Kw=\",\"Dj5m5UP7WSkKjVf1/aQ8S3SyNeAK3x4UQIWdjyUv3hk=\",\"G8rjrLUt5h8vkH9vwWwUIBbgU2QMitm047rs/5eywT0=\",\"Ki5+KG+Q41VKyW7Y+AJno72fdH14f7JTO7mPRlkx9yQ=\",\"FynnsGrCbGJNxcbMbXYflNk4dcoXDNV/h8/5CekiIj0=\",\"CVZbPsbmNAG80V0S8S2MgF7FyJNsIiPKTdUQpXr7EsE=\",\"Gt4Poo7hPfTTgqUFs4k7r1tFaLzOcSG11I0pVn2hOp4=\",\"IwHcahI2QgwFGq8WoJXneqiPI/Y8swtBCjI7p38h9/A=\",\"FYxqAfsB9UL33ZPd8roXcdcmz6p8ObpSYKX2u7zjud4=\",\"J1e57sTLJ9TkJ0zKbgAony0S6YdGXCZ7H6EEsCkyqEs=\",\"MEPYsM2sJbCErqt0dXZjJsz9FXWIcKS0eoeD9z9eTzY=\",\"Ghc5/v5kiMecbDKBj/YqZa/e+53GKiO8s9RkKMrlzYg=\",\"BW+Rz54kRNDUd8E8mUOI2IotjhuI1ggLWkFaUxF2Q8o=\",\"KMj0LKkwNsciZFHueuDBp7h7DFYN57ETUNx/dOSuUeY=\",\"GNy1QDFaQ4cvwkb+P2d5ojfGHvVSfoekALJLPtoFhGk=\",\"G6N09w3mBHP2D7dFLULFn0dI3r3TRa/c+U0JMFtgGj0=\",\"G0CvbC4Qb9R1a1SIN9ZLz22/udk4Dhpw4BB2nvwigbo=\",\"JXj0puPbvyzMXhg3tAODJ5Jc/9APlujS/axnfysPqj0=\",\"LqU+xPL4kA0532iFPyrp6WmBnTO75quWhuEYXDeTNmA=\",\"HLfNcHqFHXZLfD0tpUSvpZy4f2rhmXHu9/QDNCwgWuo=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"Br2MOXseLY47DTLvJZSjEdSaJZVnrkxjVYLenNFWib8=\",\"KRrbaUSJLavPUhcUX/dzYYFeWGAOpiSLDABpgCVX3a0=\",\"CWR3hz5W5WkRcWMeTrdMfS+bKAa08ORVCCIHOVh6iQ4=\",\"H/T27YvkPgea2EnQP/MUf9ax/A24wbhHfWXAltSyWkg=\",\"CeXkBW5VRk2dXm7N9xJ2Z95BGnFuiAFIYdVDbP/qvLc=\",\"CnOwSV0XT+FRheS8AQpUVAJzZ1JYUoggDqWSLF+NKaY=\",\"EI4CeVVuKPBMVXCmJ00RXUs7G//X+8wonOuucFP0BCc=\",\"INl0Udg67PtcD2ze1Cfd1RetpyneFg1OviQp26nSilM=\",\"LYp3Ak2h9jOuUqbPF4mMW5CPUK5J/b5ltGYoUzN8yRk=\",\"EFcf+SNS1Oad8Fw83GXA5SdH4D+GR2hQpH8JK8JysmM=\",\"GPfK2hxmHl+PIHTxbnK6qnBcLOQraOFv201pRaMwVOg=\",\"B4b/M3RQ02FPx1xNMUphOVtxRz5zUzLXinrrJwRDy5M=\",\"DO/oj2DLmjgtXu3tnnusrBXnyQberTXOwJ7m5tABaz0=\",\"DxY6IBKySE4d42tZkeWasP/UpTFXT2xyOC/pJXbOgug=\",\"Bj3E8H2fBp0Gow58WpaDDScxyoFlq9ntidGHdT8pxoI=\",\"Bxoyk0c8Hc0MzVoI3sajISZayI2sU+6lgSZGY+Hf8Nc=\",\"BBuNKgVvYNjTzl43gKNBuXWSkgsXBiXBpp8qI+EpAmg=\",\"Le3dZ3UwiqAns0STV/irtqbRDhHMOhTQ/v8j46hZf/Q=\",\"CsBQ9UU0AVyBCGOmO3NUo1/lInnOS3oUK0j1UCcCpPk=\",\"IVvKeuSDLFlG+a1Uq8Cz58VH+KWpYuTfhdC4Lc6RR5k=\",\"HvyyfTwJj1dOf9eZ4qWFzPVKWRR0AM4AyG2grgzpBoQ=\",\"JN3GrZpIhW2jYwB6GSPREGr/qInkT/p5Wb9B7bo4Lvs=\",\"LvjkHyiapMZCRFVEE+tRW5dZprXtniVi0aZ0JnFxZQw=\",\"LxwhnE0nI4DrQR2375P25pLsozn6UHtlbg1TKAHA4gU=\",\"BfGMg9NGRIipAYITnDEudTpgykSZ48LBP3wucvv0c5U=\",\"AXkWXsDRdXWPVxcvWp99HObkNaShNR13E5uSxuvshto=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"EcIIoEleDnw+Rz+Y3R6MYbJ7RN6I2ueFASJCHNp8++E=\",\"KX+V8vvUVlNgcSpxvzyAt5ixffrGxU2ITZnzqn1nPcg=\",\"Ikzu/PMtdGAQ2AaeedNW1pZx46qUA/OYkuWIKhiR5xg=\",\"JzKyMAHEPGLEWc8KH0h5De7b3EiaY3IThZSlp05fhe8=\",\"DP/lnb7PIYA9eJxitn+UuwJ95XGpY74inFTISrEG+fE=\",\"Kbj+tKmjWF7DdgY8/44PWkKS8396S3sf8ijwP1+sBRA=\",\"JqDA5gov+hC+fWssh4MS3nTMQ/zH+eukngX8/Ko6i5A=\",\"LlcGVttB4viMPePAnWi6unJ+duNRHdTRKRRD2ymqX3A=\",\"ErtY5GciAO8oFqgjffzfcKn7B7LdyHibdI0LVZt8u3g=\",\"IW42nIr61Z4V6I4//fux4TfpsxR4VjKtLHyBurAad90=\",\"InnjnXkhuOBLbzZQMFmxvy7XmjuU8Vr5e5cgv/hawlo=\",\"BgVkgToM5i5KwhqFujb+NZtT6EJE+Qi4ZlaAhOMcSv0=\",\"ImikBWMdrmDo6sT0CPvVJotAscJUlw48IuqyL7jsxVQ=\",\"MAJj99iiVnSWo3q5TFfiAVRCJXwGLsrZ2EEvbG3cAIk=\",\"GWO8eqA6FS3x61GM2ViL0E8/0hoxgxT+DlTB82m+PA4=\",\"E2tnwreOKKnFJ2xv7dmvrShtNEcA+sho3lVIxASr7pU=\",\"KaMp9KlMbGyfyB6M2Q9/HJ5fbImHWigN2eoLS5C4rS8=\",\"DD2SrsS2R8sh5vDruY7zxlw0UGcs5GlPSfOZGc5tod8=\",\"AvUjXOtZEoaZNoEfhBw+4PZIuvye3ry6Sq0BaNA/m1I=\",\"Bjp2BgnySzaS0gXJs76/4IjCFYd96Ned6qhN/4Orsss=\",\"GWU2BzCqovtiHEcOkELPXbKMSCRXXJlLJVySsC0LZSQ=\",\"GDjktZbcdZ1ql7C3Y9lZvf/EuhD4SrSxxMcdUKkk0Xk=\",\"JYzwm92kMfrNVbYqplcSJIBW4+3ZQosBCoCex4xBrIY=\",\"Hlh+UjKfCim/PbczdEJpBCKpci4ijexoK+Od8os78Uo=\",\"Eg7/4wUCBbPtHAaqGGvKy+hgth53vQa5tx54pxCglQA=\",\"GCE9xhmrko9o1arCjfkj+QKCtuxk1aw3aIDTH6O8HVo=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"HwL34uB4Q6iLyqJ5fZHt+Iy9cK10PpOONTlmKP/4GMU=\",\"DcWoXZXxBdjksY7e1pfGKgMhNjdCluqbFPVMsOytue4=\",\"IZtg5tWiJXh3XoP0R0IGVZIEAlkTI4qY/gkpfmxHPI8=\",\"BDVTDgFNsR4r/NWDYpgtijPiIng6W9bbVrvTJ8xSN9c=\",\"KMH/xcEGAMDcncPRk7xYVSsjWSK99GFhtvjEy1ps6l8=\",\"G/ei9781jNEjAlgqOwJgCZT84VT//CGK5kQrtGAm+Yo=\",\"F51D+4cXDT2X9KAWbRZj2nhmTTKMrbVE2/XWxdYR3pk=\",\"CMq/X32KbUWLtldnVPulpxaunkhKZoIXrc7TKWt8zME=\",\"F3vh6s8i+RZBeihlHhjTeetE5cIADjKcHTyN9RbBGU4=\",\"Cl+uDwn4XVq2sigzlH2my6DaoqlnGt5JS3+dg2c5SYc=\",\"KN+HtD55WzcHYvHT+dwmhekbu3poVKzBUvcFyJ20k40=\",\"BY3iwP6ObwnxuFPayOqkc+T2+A/CDg9BkIddlMrabsw=\",\"G6ZXzSvbl+XSS9rf5cwRp1Q/VMGOZQOcDmFuE43l42g=\",\"DqWzpBFs5K1h4yz7+WYqYMVCqsFgFtVRFJx2cA7MRPc=\",\"LCGdOisOQzwf8kPbJ6I3/hXHM+3w8AhNelukASP7c2E=\",\"Ga2XSiKFy9FNBARcZBTxmaiRUkt5jPHj1pK3Qs1tifY=\",\"LH2clE15LOS3U1IHiROGtyJFjFT71ie6OVIaucvB68c=\",\"LnGjpFFWb4kZon7bg2R2UlILxbkgUx/NyyhZpex3v3M=\",\"BqSxtTDMXmToTnJWKZUL12RPZeciPf1JhhYd5TXO6Ds=\",\"D1UELApytbYtIQcVO2BIKYG9oRkLyLjOTjCtEB+sdGQ=\",\"IDeNx2htZLNbhEQEk8oQpYelUFFp04D8XF9KnugD/BE=\",\"JsUm+FkXCRU4K2VZKqGVfnPzFFyXDNfIkdyGt9PNQbM=\",\"GUxOWrchSHcxet/SFvNDEOW8B9oTtnE53sCMwlvyoFI=\",\"KeDWRgY+J8+vDk/8BUbxswkzOVjg7Ko2Mrufvc0DiKo=\",\"EhtEUQFLY4IgmhO7D9JyflnwcCoIH9NOBMjd64fTSf0=\",\"MBjqhD0/P1Jbn5a2xsB+XIbUoRPRg89mFBqoCWAEjvc=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"JqiJBlqRMe6FQVhyhvJ7irl40QbPIefLpWeDnrg89cc=\",\"EvIyKTjgL5YiflORUnGab6YhR8+Ck3oMmA6wEcYrAdY=\",\"KnBSoiCqJYKE2Lyx4GRsAmY0kETKPBe9C7Yo7FQip1s=\",\"HgHYJb1g12ogQLXeXkO5DRv7sIdtq/VQuqOl3UetYtc=\",\"MAL/ZWAABCDQ3pjofTNUMr5KWP8+6gU9LTMjVMvCLak=\",\"A9KHNqKVLjlvLeKPOlZ5AgJyFHBmV3c0MdVM0QwKBGQ=\",\"J3FtW9PhS2GvuNa6kbJ3OfkHX/JjCxnGwsJsXVSW4ZU=\",\"E83nr7ROD5ttsnk6USJuQK7p1ef8de18Zj/C0G6bhSY=\",\"BQOq6JgBu/xfcC9g/6VmR3pjTcF6/4+XR9H9H7s80zY=\",\"HqkQpdo7qNijmTCzi2T/znYW/JyLx/wf3PErZQ0ECJw=\",\"DrH/VpoyXhI+3nV+olDfX0H3XdK3XGUyq5bf5kz38+I=\",\"FswXUsV1zphHKSCOeXFMM2vDIk+VH9bNC4KirE1D+JI=\",\"JlM3h0PS7qOHwzCjdbuA5nh4qXQPwkJaNjFSBqFAF1o=\",\"F1sU4705PYJf+VYNxO5YNMab6s61+FgBVu8WLG02Nps=\",\"Fitl7/WbO8OaLdySPHfaehff55t1V7g4M2eSL92KpeY=\",\"KX2XlhAd+RUgQyl8eA3VE35rstmiWo+pIYe13iOZr/w=\",\"KS2xQ4zkvO01BI+hKwSb+jWXCbyn3DFMk38FFGefDSQ=\",\"GcJxXofDMq281TDOmB2HBPCiB+gi8ZC6q0IdTQPSS9k=\",\"E5vy4SG2aU93Olj3CVbLeCo35JSeSC2H3IILA0/9Dyg=\",\"KB4GoqPpx60pJlsu+MH0gUrcWeWztgWgXDzOilnjIdM=\",\"C6pBgdv/kvgzhulcbK4MjvoH8M1ugivTdp5K6MZOfZ8=\",\"IojNCGWchW5pfZNVgZfRbAP6xZAJbt5o6VljbQmVbZ8=\",\"KvhrOzyvs6zkKgy6XJncznsPw1MTsu3d8EAbwCk3PB0=\",\"FzgG/ksFErcVy348yGedOnpMK3F06M1xBXSzwUK4GX0=\",\"JbZtpjeo2S8IjY+uzwNKt34rLD+I/OXFYJIvZI7vlg0=\",\"EvWSK5WtNrx6gcL+j/xyk0K9OusVVZaVkL8iSNcKPpE=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"FwvPApSuQFnZXzZoSrtPws0DaaZ75LuRn+GFqjlGdWk=\",\"F9JHmD+67K/TnJ27H8JjPufM8CODl4q+i7oF579JgUQ=\",\"J1x0ulnWjr140C6nv8CHsXcIVEQ2u1Q4tBsFMHLfSDY=\",\"C5ehlhlUMO9pzyPf0JBmU+WAjDWTRJv1jDdCQu+CvcY=\",\"Jb9iG+f+BBBeilCwLtkCWECv/ea7O73Qbfl/L+ngLjg=\",\"KWkouqg8EBbq2G5ckBGxNNXSQXmxlw5o3Il5S3PQJNA=\",\"I+b8O4YXtrUfNdmDxHCplUYJmmNh7hYm5uROXj4vfbw=\",\"G5tX9Ff2hdVOf38zKvQjPSkxBvVqwJOgfCCSBSFxCLY=\",\"KQ8KxxKYfXlW6LTb3YtnBjma3OlQbjNz0inUVgVjcxE=\",\"Jio7azmGwlDTh/y3NM2RT16Lt1G1cfrR/zZqR54+ZTg=\",\"KVuIrFD+5JJFv9m9kRc0MkyNAKvqcYkXpNxsIbPlB94=\",\"LnpolDMM5tZHggZhmv+In7G73OyA5vCd5pOY80Sk9uE=\",\"DDvxuy7pRImv7TYzuOwS26pLaiAD6sgOfxZo/zQLvvw=\",\"LWFinSAzF+pESeIAiAvi7YQhqm8t5zqqVoEPwwTuquU=\",\"HZSuyNln6rzuo95Ky9LDsZ/uACEtLezljVrlO/5gN7Y=\",\"L3bXL9WXIsN34xVYP5GzJup5KWj75r9zWCqvevaX09w=\",\"DSQ9pznpBfiwAJElGTed46O61t48Oq+Rz9ePlzWwwb0=\",\"Cs/fX2nAlQbLhRmerNugubPFoPoaYM8oOHf/fvrzvPc=\",\"BE3kdocZYYlHOxJeqR7BzrFIH49J/NR77O8bAfTJ/gk=\",\"J+FV3qWhE0RmqOK6WOKwPK2MOMIHFqfT54xIOwGeebA=\",\"KGCsUfPnAUhWHVwQmr2wliJar5t7vBe9eqMa0m4kPnU=\",\"GjPgVK5FkWlR9zgmubrcAy7T0PPCGsx90Y1G8mjNKoY=\",\"Ajess2CNkVhzi2s3tvayh1MdloO74WtGPJRrdSwImrg=\",\"CTKJZgNtlezTRfd9yYQ5HQlzKs9WfQELhV4EIjZcYgk=\",\"BqQf/Zch7wGNfp4tZ7jZgg1qgL5AHhYX4Hsps8X45To=\",\"G6w7O5zUDsQbVCtH/w29oDmX+Io3qiPeadDVET5bRI4=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"F97bUmQdn55oimc5gL9HxGI0bR1nMdtrvwwnzLJWUXM=\",\"DZR5SfNedcKamG7WYs8eHYXC4/OpSJ2m16amVzvzvf8=\",\"K9sgqDJ+o/UJ7qH4GGWsNPfnxdxD1RYpSinCCM0LrH4=\",\"L+yxcIc3MdBwzOxtiHM74ydeW+IqR80pStckfNdSR/Y=\",\"EYPJgfgVw1EZ/kVYoK6p9TP515gBldltdagMsf7UDAI=\",\"BfoyCrXa42X4oRTRCSGl+hP3n0Txi1cCGkg+7cLFu6g=\",\"K5UVEq3SxwigENHKWb7RZvNybK5csVJd03kVbYEObCw=\",\"EfZGUUiBEnyfEGcjjAanyjm5waAjTrG4ZYwrxwQEV48=\",\"ByQT6UrKJ47uuspjx5QbVIFHOH0hV4+X5Y7CcZj9Tlg=\",\"Kqzozvwb5NQXUAGuvr6R/IekaigL4KkIhjg/8tVh17c=\",\"aeZCMDQ9msPGEwswDPokzsYIbIWhqhyO3Qc6fTOtsg==\",\"HOhIKeTmfNn9O8yNEWmhXHMeBrp2x3rWDoSwRdXXMao=\",\"I7UqETrE6pCoMwwYmmP+lSDy1z25RAar6nIVDqK36g4=\",\"FgIY8rfi0iZTs8oSGQ9VOFY66yetisjy9xlDu9sMWSg=\",\"CEwah+f+1qqcgPRV3RMuBviX9DtrwS8/X/VqQpfqoVM=\",\"DOy6ZT//N6tfsmauZUwjssq4Ow97qSxwageLTeMiGtw=\",\"LvgNXhWrprJlL+9+BBkWf4BPLPcTIA7s8waCzROHgdE=\",\"FL2TCnf+9M331HvLRu5vpZbEPp3UC6h6SIxhPVloy1g=\",\"HO0FBZTLAuQ6l89BJqXerSEhfptd7Cj/2AOjga2m28A=\",\"Lv2754HMIrOf3EivNCSjVMSM6xcRMTbseUqbMxn8lCk=\",\"IHDk4EZxYBzNCELLejdP8rk4OK+GrkZPgs6uLxU5wdg=\",\"EjdB5/Y+d/o+LYq9nyIrI9u6HBTor1M4XK1WWU8GXh4=\",\"G3UDXDWyAe/FWh1HqtqJdvX7DcHaIkgqa2HTPVVezrY=\",\"Jddtq8kZ70Dr5ZfUuuQ/29IZfpsPe33ag6E2ApXp/PY=\",\"Bma1nJrWZu0/ydHpr5f896uUujOHVz2NMfAwhPnlyXY=\",\"BlT5l5VUPu/G4bHmRhCIlupRYcnJpeF08uHLkJOAm0w=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"KkmEUYz00DqbNZi9wlRIShgFFgYSuUP/e1CWN/EqcMw=\",\"A2cxor3Khv4BHde95AQ/icpJIIQWWu+mrZ90cX7VRTY=\",\"D1/E0eZ5kuZavN4ZTwfLB7coAKT0om5QIOlsXUrjqVI=\",\"INAslmmUKi/aDeeme4xc/KCLLpFPZWUqcQRKyaCRkL4=\",\"ILPHhcIHLBAW3DFqeTOtVB//p98tKJsyeZ4QbcT5wbQ=\",\"EAfffMyYlRqueCuHmFdWeEoURFMUkmFTFQgOLICjMTE=\",\"IjoQmXlXsSgWEQBJrHtW1VDNelwLR768H4s1FnGJsto=\",\"A1hjIYbaT/8XZdTWiMz0JcMzmVvXQ4JAvgzOFChxcnA=\",\"IWsfiL8Up4HJmtejlHgRgtQBYv3aqDkZF6ykZTgr4Dk=\",\"EIRBNooFijDFZawB1BRQVtWlYUiSh5hEwHocAomyySg=\",\"A98aQS6wLRe8yCCI9Gy1937GJ5/3FhhWxSSA0AVUo2Y=\",\"As8tnwgNEhni3T182hRCsXhGSlgyYObZYy4SgSsIw4s=\",\"D/j1+NI5ya/GydBB/wgF7iLD7zz1JI+iqxmKMDWX2C8=\",\"IrruapAl+WHZWvsSL+UM5z0KzZqRPy/I0HoFD03mXdI=\",\"ETHpQvw2KWJH6dkBPnHMiUmKcJCmg78IvdI+JnNA/h4=\",\"Csahw5T5KXJaywobXhGtniiqHHnaJWJFlkUbBGRdinY=\",\"A8yAumjYnNzJNbDYctd1s7jyoM1Q34ntvDpiaSkNaVA=\",\"HbUTwvKa5FSpm/ko/8LZP7w2PQu2zQvNkxBtG/5feJo=\",\"DQXa4qSx7DWF+Y2EvufRBxfaOxenEoFnLjRRkWJgowE=\",\"KtzUxvGRzNvNWpi9xgULqVAJ4gOd5/D9m77s8MTx7O8=\",\"BNDVcI4dh8pp601ENQMTcw2dhAOAFgbe828DUYOuA+M=\",\"ERhN+hracRjnn4iQA2+s3UcAG3tjt0w9KYP87s8+yuU=\",\"DTL4uXXpOffvoJfCo9TO6DQN6uMBJ1jjs6TuCi/Rk7Q=\",\"GiTpFiBJiVvbpJ9XzuA5bkc0vKtg2OxDBaW2hbPKZu0=\",\"GYc5mOv95KWF80pApuH6cCt/vSmwmqFBxah45Ejkjio=\",\"LQVbKErj4inL4NSQHOa2h+70DYFdo4zedD84Ucd0+8U=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"MB0r2UoqhaPIAtBGfBz7KOKu5UfS99UcKvEIpUlGKiM=\",\"Ge9v+UE/egWvY/Uop/gNrDK7P+YB4CyhX+uZ+RqETQw=\",\"Dxy13Y6li1I9Pp2d4DDqnbkyt3Dtl9J1XaIqFRJpbrs=\",\"FR7C7eytQdKkp06LCXSKw9Eaz/nIqCXg8MU5N2MT/I4=\",\"C/YFFUxubPynZFkAk7CezsLjigQm1Pjw9vnOdx1Mz80=\",\"ENHCtPNiIZXM2bxkq3MUWQfnNY2SvrhYJncNF0gQz1Y=\",\"B5wBkRSZFxqCBZYG8aDhaD6y8HakpyMU5RkkthJZ+3k=\",\"GIYJV4Knxqv5+vZUkIDCpy+Ozswiv1gHPfkL5pIEc9w=\",\"JhxAgfE+26eVSIyQbforWZF6/7RM7fFyfLJ9oLCywgo=\",\"LP3H/8Ngnp2Cs70fLx1C4V0eC36yRxkSPgtn0GCADco=\",\"A8nOccAOJDqVDf8NngpdPEL4I5g/bB09UODeGCKZPYQ=\",\"E3FKsQ+7xU4V+l/w1ryphG/JQKnGvdh7BEhoYA+Ju+4=\",\"E01IOLjHfnJwRgc5+0ROYFgOlR2RSlogSTorA9KUiQo=\",\"Hm9T7tf4b3KRQ2YkhH72RRRXdWohPBaMO9ellFpPKHM=\",\"CMTpgVZSchxSkyNd7B6ul/uPk6xI2Gw3rWrfp3BVZlw=\",\"GNAHESrJIF0W/yCbgM8LUmA4fOdw1OaXjt7p4AA/q+w=\",\"BRQOj10n1ySKPlDoTGv3APoxwaGnrBRDkPS8/1rWEkM=\",\"GfFT1m5ExmKvAm2+W+m+g0oQo9/q5ZcpVV1wnWHjj3w=\",\"EeApmsPz7T7nE3fc47hXaM0qa2Xp076iR0PRUOGflDw=\",\"GQq36e2MdB1U/FWK/JazXZMZ0xf/bWMyrkyneoo6eRE=\",\"Bb+PxK0BJtQsIu0sZZtm8FPKNgTwloUgzlx+8Gxah5M=\",\"KMBSANttUd8Q2KSYbLZcB4AB8pU0PeYI1o+uRcq9xfA=\",\"HWTQ1BQ/hpBW7LECajYbSN1RYvOL7vrRptE5hD09rJo=\",\"BWhpOJMwIkBksp+Vjzf+kPwrtNwkVEJbDTYriSvg+3M=\",\"IRJPp6zW2W7DCP/KRkZeXaacRIFMbkDnBbfGtNfqozM=\",\"IQ3k8icygkUj3U/QWH7r3XjMM56NxE+9wqMXJEEy9w==\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"DCMagXgKX5urwfQTcQbUVqXN8KNW4MO3mzMJgt3mxds=\",\"DSKG73fxW1YrqDFhUakkWMUqtpedNkgau27pQgvvwUQ=\",\"FM1q2yOURN+bUQxeHCo3jz3fvHW2E3G2iJMb88bsJWM=\",\"H5RXfMDLh6GAgRkjrfypqMx3uO9BwO/vNuGzGWefDxA=\",\"K/jsxTeWysextLjoy/6PksMfcm26Y4eD6wY7Z1+pYGQ=\",\"JEPf9Xk/EoJskZX8lcryFiy3Odg3xOFdQm5l6yDESIQ=\",\"KIB0RfBYV+XbGMa6bA89Z8/QjX7gobWj7CWcEeV/ZYE=\",\"LXGBoOtxf8PZVUuxmW7lJ8wp+p3T3eur80ZyXYQ4mkU=\",\"HUZ6Da1MpslXB+lfh4DKQPzJg6fhFxsRGoh0sSJXRIg=\",\"As1gSaCtBumpqe72MzVm/nVY2wAH5uktcSUM5YIYlFM=\",\"LsBvNzy3nBFD0OrW6pSlMVdLZCoqiO1sshu6++KTLFc=\",\"Da3eF4Wm6HBYVsRyB+5CBF3QNgw8szLoZt0DLvm62SU=\",\"Ju8IY7e060IjyItYZLkDUm2E/4HAmeqUL6mf+g43Zng=\",\"JvGiSQGGph3pVmfIZy3/vua8FFGsEf4unRWdMI+Hyvk=\",\"CROgpDF64ktsvvOch/EKP0e0+nS25/koammRAnr4HWw=\",\"EB1pExHmAvG/ReK60pmUiAN29XgEUXUl6xaSQNIe87k=\",\"HFXqsKlGRDBZld1bmk8nJDkNiP0+mCvkOwGmJ6zPWxY=\",\"H3iNyh7f9RcrTpSIaLwY58DvNgIDPXLvMif4d2vNQLg=\",\"DF3EHjb+UBqstNj40zsS2hZ6EvzcEGJqHN/JDMJc2Bk=\",\"GKblZ4ZdQo8tu7bpvymKuJWMXRc3YY5fHFZ5x2eHusc=\",\"DN+z5ZdfuQyu6YSXdo833UZVhuFmnWv8USsyo4lcYvY=\",\"MO3IQp+mIwtb+VU84Z8KeAVfLWjewQlX0NZOijvbPg==\",\"Bf9tv4wA6fMqYfkI5vp1GOSc4LyS2rUZUkiHrZvLOo8=\",\"GHwANaIPQrsEpNPxctjdcXYfvhZAWgxzZYoY4XcBKzI=\",\"Jn4ONxUagBiUm9dm5lFwrXlEtUsZHfSQS2fRgaOwNB0=\",\"DeLznEXca0e61H0p2M5YfmDEMr8D+ZJOPXAVK6sjLq0=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"KEWRYykT5XIUvAIVm7Po6BwGvtL+bzAqPSOPFBUss+Q=\",\"L2EQMzSHV2u2YYi7OBcGAaGLFgpBxlX1WzZuE43cPIg=\",\"EOiiX9T/c3sf2Oqhyg/cEHodnkj/vL2G/is4jdEKyAw=\",\"CTSunTa5NeR3wdksnqG4C80tgfP+Djek34lCk/fuLgw=\",\"HUgJdpe9dv5bD+IdjBgqmgMnAMCqlPoUd2UUembHpzI=\",\"JqAHuOfFoPCVxHwn6aaMa+iwh2aGO6M4VLLfy2xwj3Q=\",\"HbnJedJtwiGDDP2Fuxa5v25u2QMskX7WQEbSSxn+yi0=\",\"Drar9Vq4kqvl7YrXIj0ERg63zGWRIWwmAlDsDqIoUvQ=\",\"CvUpY9LYyh2F/kM7PiDjYPSI3HrkCgdJJfYSlZSC/Xw=\",\"IaCK2cXaf7+glrF3OsspPv2ym3aisNVPEHEQ5/fnrow=\",\"Bsv2dRITl/Ble64ICYCysiVmYT4FAfdO/49xgmpa70s=\",\"Axoj0q1lP3MGuEnv8LQ3OnourpJ56PBIJ52QJBVhsZI=\",\"LwhnB9MXRwRnqOCuA7pyXvee0e8BQ5W2etTaeII3dpw=\",\"JDYBIu6MWpzrIWltadVFajFmQZN3sJg4ii8ZlmzmIAU=\",\"F8D30jPQ+8xcUg8c46XUsJW9Ef6POfCQq36dJOvKgZU=\",\"A/KTFAt9B+FY9j+UeS+UNjLO13LXHNvZPhcamKK9sak=\",\"KA1NaA3kT0o1qNC6pKH+s3Af7JehUul3tTUlY8eX9os=\",\"FjPdQZbPaVv7nlE4zLs4GwurYZrRtyiALA6bNXcFA+U=\",\"BUnLnGs6sUrek/aV3DHfgW4T5s/3kCP5HF6tkxH6N+A=\",\"EtzqTOOSfKjDCHUVUKd8XOTgleDppBcQjBgQLksKujE=\",\"B4MxrEwsZwJlXLq+ISEk1PGh9QBadfryxv7lB7mZZUE=\",\"BWdLMrA3yTerALt+9Bvv0cAAQBS2aswmsRe9C0YocLU=\",\"FlxUH/PDj0qa+HgDQxa8TAjsFfzMx3ZX566jLJguJtk=\",\"Fkd+L2lWsqIyvoOJWGsFaf7vq31jXxc+v8qqBgQEQds=\",\"FphCS8hisKlv5oQ91cdiauAYLVD4MjwziRe9noyKh0Q=\",\"HfvGdkSIhVkz/nXhDd1gsJ1n2YxiLzbLVlkx2X6SKYg=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"L3Iv5TslL4JW88nWE/yxIgXcl95yasjyPG1O4KlXWt0=\",\"BM5/hQOURSU+y8vzkwYXWQYuUqVAYDMdsnlHuw4EsQE=\",\"KtHMtpGLTbtou+A4lSHUGPGTDfHP/JHejo7mSKak5i8=\",\"EZq5u9Qz/wHH5DB50ojQU+fgxKdvrN7N4ad9VEkGtO0=\",\"F9Jj9189Pw1HK85Q5kEBeikfhGbmwDp2jBON6xtQ8/Q=\",\"JIvmdGsw4YzBMlkHjshIQRUyrRHUUGrGzN4TFJXJ/EI=\",\"CwL+QpV5B2Dh+nKBHdY1Auo2vtjrhlLms19Pr5tVQxI=\",\"FItRncC12qUPAHMJTofbREnIoGjM0QmHJpaXP564BsA=\",\"G7Xn74LBoqAoJ6LxajTL5gIJ+EddO/wLZlLmH0ET5to=\",\"D7doBOYwubUi2a8I8bU4gPXNxpG7IsJxUfVB/I4b8vs=\",\"JfFf28wW5cGrEGbSlLx3TbkWbsRdTc2txFl+3h2lMsg=\",\"GM9ux6xt2UPFe5RytYrxiSmpTdkqNAs+Q8B09it8/7k=\",\"KJk/upaD9yqHJ3AWdOPmV/3MrEZJ+Ch530KV6FiFcxc=\",\"H91r9YXt5ldyik6X6t8ZXAj45hRLKL2S72y3BuT2sF4=\",\"GBCw/cJtEjusgZuhUP+2rJRVrafext6r8Xjw3/+rBdc=\",\"F5Nbw5ziQeeLvWT/xyFmuNgFS+YsSU87iav4iBCAj80=\",\"I7Zv64ept6EFkjiDsOoMc/eV5EXjy29oySF8wP/qQ+8=\",\"CfasyUcKPKGwbgI8svbWikbKbENMUhstCnmcw/eymp0=\",\"BwWduTOkmlnXfH3YIm6kUoaKsYPRSqCbo/YgEaCMoxo=\",\"EQKDwthO9JjVTYzInzzNSJkDgq5zuJk6NkSrmWG3EUE=\",\"LghhklzJt2xbAEbYF4yzahOyaqTOTl99O+RTN4koYn0=\",\"GG1/ACKa10WgEjrZX66dETbU3/n7aT+VStn8qXLOnYk=\",\"IsemZhVu0+eBPpj2DRXiOkYdLpzziaWB2/i+C/Wv0BE=\",\"HN61DGvMP5zS9ZWI/XL7kpA0aF+IUG6JH0HdVyxnw2A=\",\"KXiioVHJUVVBHorLPBLNvPkp1nX7l45jbJPaZjgAwzs=\",\"Fn5y99t+jiH32vTwL6gwiEhR1WLDtRYGtSrT6A1HV78=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"GVe+YhvWIHc2sDdMcHfvZs3PpL9XWhbSck7JTi12SHY=\",\"A7Jk6iwqFxzjvGZy+pVwauNxVf7RYhgIDzPkabybblQ=\",\"HKx0JGhZWgHVgjn6J7/XPl5MgR0xvyMH4619n3pEDII=\",\"EwjiUD4WI3kxAqPG73mwBBaWGR1M0aCJ1EDnF9FWdbY=\",\"E1mX0RqKs9QY4bNDdtMZPQuDVZAq7f2y8pqkMnjieQ0=\",\"BvilQfFvnz2LsXV6rsXtH9++eZDnsEb+beuMavIS/0o=\",\"CaQDdFCsfXRnWmq/AWmJCiFh2sVQy9uyV8oi9AJu5OE=\",\"G7IoE8Vz6CCbcQDnfvgc7feefOYWsimnVAUFhUwmEvo=\",\"DVI116zYutll2+6qrDnVmVQ7J2ba2B36c4mI+MT+ysw=\",\"JFIugmQtDADetkBqsooYZ9+lDNbQ7KoOGLblgkAFq68=\",\"BRgI9xjko4mNEma0c6Lg+kcLmrWS+eHv37F3qPGxqGM=\",\"Lr8Tm61Tp0CLRS/fr4hHFBNGaI4F2k4OW0eMF4vDbBc=\",\"GPF3v9q+XsyqbcD8KPdeINvZ5HCtUDN3JL555G9LQpg=\",\"I/Xj4JdEyj5z/yZg5ArGuBUuHAqT5QfzEQkOZXRFh3k=\",\"I/xYZ71bTVJoaujr48FFTiZrxXauwfaCvxj3g4U9hSc=\",\"DeLjqylr51/gKvMp1h2AxcTSmIZSgxW0aYIjaZ7HDeM=\",\"L0wdPPZ5Ow+KcH3kkJwd8/iIo39fjjggZbUAk2wz0gc=\",\"Jr+3Ax/RblnXDcFyDU0EMB2X4HoAI+WHZbK2tzWwJEM=\",\"CPC+pPkoyq6dGecfGd2Fx9cAsbBbMXBUh4Rne8xNznM=\",\"IG3YbtsDiKvVkVRrN2p65txDMEG30kjqddkIxLN0Cvw=\",\"C9iW32MuOarU5XVESwv0neDhAYOwkTe4959wTPL+6+Y=\",\"IYgRZIjkGSviVpZH6oHGyqRdCLiWrBTkl97XprgNmFI=\",\"DpVUD8wt8tH2MBkfnl9It+RpX91fTpp8kw8WWYs+nlM=\",\"KdJdpZ+bI4kp0OtMZpIWdwZzu6mkihFgeT7GbnUlkEA=\",\"CZjFbiLA/lfJNvGXdOxDaP8zrKBliYB9s6HoE4OVtPk=\",\"H0YKJLgHJMuIr5/StztRLm1f3prW0Lc4AdsMrh0MA1c=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"DcW000gmYQiThNGFAO0K/bGmNcAG7GezE375fLA9J9A=\",\"IsdJLy+nufKXwvA2WUXODiYnkzMdPNoctz0IP8ig4h0=\",\"Jmr5XBF07QpXgbrSGiOXV47E0WZC1ynE2sqPFPbIapE=\",\"FMRhadIPo+Smf9jaOBrCJNYc70jdJ8GXEnNRm2+bcD8=\",\"Emm84TJ+5RXH3iLO16qZpN8gLPZh6g8sUgzipyGmQPI=\",\"FyvPJiH+TlwpGUkHKO5dGfbRs9syit3LL3CnkkkOm8A=\",\"DybdBAo9Q+R4jCC+hbS/d0djcp/OcwN65TpfSQq5nEk=\",\"L+MEuyqtfDo/4wt3CHYA0dp8otkFP37SZMGGXMgjGQc=\",\"LjZdG09tmUb68rpx+t4Gu78vhHXuxaVvxIQ3ZftKSfw=\",\"JagvEjFifdT6MrgtJ0ZYobZOjrrQbukDqrZJ4y/6288=\",\"LLkyS5XAVqfayFEVYv24BJxPCOb70+4iK6uW7Ky4nJo=\",\"HjwD7EzMuW6T57j6lvaRWg6i85K09eusWy8lEBP806c=\",\"AhARcwYXorfHYPd1jf43clGJw5IkAj/w2Bnb67GoHAc=\",\"KLBcCi6Y2+jwkIY3MKJLWX2X7DrbSgDz8aF20C9JUTg=\",\"JzVXAcMOwDMoe8EDZShVw0Go6Artmwv3oWM7PwqxGkM=\",\"D613kwVFd1NsVmUblYWtHswq8oxAZcb65P9H30KJ1fA=\",\"IbsDjbulh7hc8Pv81ead6fMp9mRr3UDo4noQcWH2JLM=\",\"IbHwlPPnjL9gBns7eF47PyTEFhyRxFIxjumQ4H4iVSQ=\",\"BS2LJNc8hq28gxE5Clssm2MAZx+ScXIDrXxGO74Hid8=\",\"DXA5/3Z6PYuwf7Ytay6+jFQyd+PaFTHalMyGHUV09kg=\",\"G5FvCFGYbE7cK5J6qL+dkheOvnW3dVLOR6Y+9wQJvAM=\",\"M8q59NPDYJJOkiclT0+b1S+ncS+1GOU0+f5p0E2ZTg==\",\"DialMns6AjsNGkMtS+X38LCfjEFDq4gbmF8s9+RY/eQ=\",\"LKV70MYpdTYHpMnje3g2aKu+x+jjBvdbiLqXdy03FZU=\",\"C3Uzg2cxFyrJ27VuVFiKXrgA/YDWdUr3T98TRgw0DvM=\",\"KMNlPWR70iHSs8efPaOCqTfNG+mjMjJ0jwT44ciAva0=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"B/wjC2o2q7HH9LdQT6UasBqogPezwKYO7hY3/2iInb4=\",\"C7/jZCG6UqL8h/bXl2rsAWXkGu4Pccv8h/Qba5ZcpuY=\",\"D9JCSwKNTYrBqMZuYwavLD3yE6Onl542fClX62MfF68=\",\"G2dHJaH5nh3+6wff+k2WHsJKMdQz2D+FjPP/39L6uus=\",\"EsnMNeDqJIKTXduiFPIajAjfPcnWsp91YZ+f/g0FXxA=\",\"GtOxDz9YT0gRyATZWzcJ3tcMWn07u/b5EzmUPYW74hw=\",\"Kr/Npbn3mbLQrwhhwXwzJTeB31HrGGpl6slYs06MNaU=\",\"DZz1L9IMGJmCUE0CqoBQClxzJDTfyefKyvCN3A0Mdt0=\",\"DYdiDaFcWMUK9nvzUzs5nt+DwefbwL2Xc9QNXqKHq6Q=\",\"KJ5VBR7HQeJzidzg7KHPwPpXvjOBwSlD/fxqo5K2CvE=\",\"KF7BeZwZXmOOFuTMf+W7fOBrHIIQXMTWE4XcLS7LuXk=\",\"KEzm5xQZIK1BWfnJfukhokzRiHGPcADxzLCRBn1N3u0=\",\"JAOz8/mf0NqorXfLP41RUFXPgNHV6NMuTkYn6VSJ9X4=\",\"LvZbzGdQIWnFxdMk4JKXtyUzAsgqM38AAzyBSqM9nO4=\",\"Kxzthla5IynWI6he5h4xBJVWbOTv/P77bmYG7Pzb/04=\",\"LPYWapGD5mvZS+Wq5Ur/8PAsxuto10Vs392G4OfwcZ0=\",\"Bg05KjHeiNeLaW5yOK88o+ql5BJDfGblnXBJtp0lB8A=\",\"DCtivYnjVzWSb2R0JkyJnrK1lWc4pHi25215K/QgzRY=\",\"DgcK9k5gPSRgiEfOhnfQKR4I1cEOwx8j2JjXFvHDnRo=\",\"LeZF43YxVfSMoY0G3SE3DzFOJjgsbJ6IPYTjh72JKJM=\",\"F97rw1FHrGRVchQMoYGoF4XnTfzgY7N+Mmzm55xmpto=\",\"CwNdQ7/spLekZAVOqg+JLLA12wajFQrZzhzkX2rQuBE=\",\"EAx4Mo71pJlENUHB4n940Od/Zfk3OOOTvc9LCYaBvlI=\",\"GAzR5aEmIIemC/FW6O1SgHCTaSNgXV+wePT2+ValWu8=\",\"FAnJr7Jm9ScjCJvMO0lbsVyfEMtVsytz3q0DD4fm4ko=\",\"EA7mLTqdZtO2Ng9UD5VEk9evc+bNlaEN283XnWc5/Tg=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"D4UztRvZ7VShcD+oOZI506f+d7ClUhCRc0Pgk0Kg/YE=\",\"CjioUVsTk6CDeCxA9yYekh2HFVwIG3A5249Am+styPQ=\",\"Advia4q1bG3hEZaw/+c1U0i5kIOpTS8pZtIn/eQ4Ifc=\",\"L65YuBEgT78yMrKY4nTfEgAgKJ0GujQ7yVMvrnzPp2o=\",\"LDPJcRKKvK/95EVnFjsHHByEXV4E5LPk8yVsaQzGHv0=\",\"HWh5KYYD186RmJXqr4VxV7+vILRuutSMNuhZJ+AEln0=\",\"FU4rSVsolOJMe2T7g8BHMYayVvg95Oe1+Cq8Ppe50XY=\",\"EQjmWQ7gl9YXf5sOj232MekcpqrRdE/fw2pafPc2icI=\",\"Aw5MwN7+B+DA/8cuw1z6X5AuVkNZ3Cfm9QDJIdtPIsI=\",\"HE+Bd5yGM0kPPj4nZgMWLEpeQv5ttYpTMW+AXFyCKSI=\",\"KVTFXlER6wM62AyGcxe0qrqddQufm+2/xIq+hDC6PCA=\",\"DVGdcjdRF5HEedF49lAOVFMmJf7xeu8geC0VvhVoMLQ=\",\"Cxj1YEvvN0jg6Oy0Dn9jbSRSpC7RkpmCCl1BJB4+J6w=\",\"JxnF3/s8XgmeLr5Y4WhV71Bd0Q2vfMLyExE/9kdhS0I=\",\"AW5jXbsAONBb2VCpK3ha+ss/0Oa4bM49JCEy1PHBwM4=\",\"A5IKZiA4VmrKBysmVTJ0W68jm7PmAyaJEiIEdgUBWyM=\",\"LE8Tc5HzteTmAkqX8cnL3tsSl9Ejrdet9NZGGuWodb8=\",\"ImSn1gPbld+fB1gvsD3Ok0Di3jJs6oRrugQ7CUb4Etk=\",\"Lx83nwAsSQlN2ThDOphrUZoSPE2dAYnWZTNmXQdFBnw=\",\"DSknalrFEc/Do/57kkTUtwEM8L36kNffDWxAALlYXUU=\",\"CsOraAL88ws7bSsaaeVLNpkXm08wtGTgtxtrS2sRJL8=\",\"LcDDQXXmEYNgG6Tc+f+0V979NqvC4kur7bsKlFAVX90=\",\"Bv0IinvKILVXDWhmWuFxcsE7s2mPNkDM4iq3Tq18VmM=\",\"HehwA2QMAkq11Vw3inThThreoHL40i7pMrSRUN/REmo=\",\"LgG0ddeOZpqGgSmx8XOnegso2CqJtOu/onSgpB7/PgY=\",\"G6nILuL5zhtwOQ+qHTxAWF11F3W8hZbjKs80vP1Y+BQ=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"KmH7lSlbO1wJScSGZz0c5u1zKPQsndHILif6PbsOO/g=\",\"FWvvtu6xP1K6ZetzkLfIErpqq8XRrPwYm5X3H7R9soM=\",\"E0IveDqXjtXONeFUDZnDy8Z4A94Ao6T9vTf3wSDXqsM=\",\"GZXQDOfJlBXCcn6JYY5wWof9RFYUn72JnED0MyDV7Is=\",\"JOuzGORApFlW+uGkajMD/6u8rVrLjPmLbuaAVnLqhLM=\",\"LGwbNeeXnC40sHGgMQHbjPdTtcJhk/IG4q0hTtRzh8w=\",\"L7VdF+WlC4CxaPzdDWGPLaAHUQvbxCnF7X/J6aHuXA0=\",\"EXw5AzrA4fX4tXhEIgtyYOMIW7mZJer5N9SkOga80r8=\",\"FUpP8wZAJ9DUqrovzLsF/EsHSte8REMTLtI8XwPTjvE=\",\"Fuoz5zJ9P6tOFc9mzMTpkQSqQKSuDu+9R4UXR1wnTWI=\",\"B68WL2pB1WI81HGBNnxvH17gvnueC1P7gJd4nqmgzfs=\",\"GnMuN2VAUiPNtusoq9LUJdx9HNvldeCFaOECjY3bw5g=\",\"EgjOGjoBfbXRAkkgpqD5T7pV9biGIKzi4YDD1RcWNkE=\",\"C/msbMyD9x37htQLGbdgm1VfvBrUZbCfm0eyHLIw4XQ=\",\"GujLxuXkuR6pJKqARZZ6v00i1odjnn9k30DhuuwUo9A=\",\"Khvh5ND93Ijq3KXoNfML9+45sKrdmVtIp7pgG4fRY4A=\",\"Hc9MKbq4XOlq6BcD/yYmKgnIiV+IanHAFBPUQKL3g/w=\",\"K95bxWe8WZ4glYfQGo5bg8nyf9SYjJeClO2baAsDBH0=\",\"DX9jQWqqRuGlqwdlPJhyGzhI9/QN2gy+JPW+lXJJv9Y=\",\"IBwNW6GHN8zgvPYGnYKscLfG2paAKZOf15Pn38EZl8E=\",\"D9Tf3nccIa31/5ceC9AwGw+cAHmlzL6/bMBaV4IYz58=\",\"BuJuv64Nf1WWvBcZ1XixZFvcy0c8gCgg6NHnO6lf2uU=\",\"FTqQxKTfUDreRnCgGcHFOfqaux172FxWJ+KiNoFunpQ=\",\"Jo3bDTYH1tiKshYj2zIvcIgchl0bqihO73tvUEZJ9co=\",\"EK2TjCyXyHhSMgEejplWyoerMbbplHo/Wpyy36UmwXg=\",\"EAqdQrdhfWDks66lFQ0Fm751FFbEJJ8NgHJHYp5h8MQ=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"E7yF4q1DHfimcF0ZkKySXMw98SgkBXRgJbilud6mYf0=\",\"DPLYnLOcLYhgXAo04H6zFDaneikJYExpF8HI71tJDY4=\",\"JhLquo1rgzQyZlsTNNYSzZvEMKO/4uuz40t6nYePQFQ=\",\"F/KRWALjdsWCfnGaaJDZD7BndiyWuzu4a7NPLxQhEBE=\",\"Hsft3fbiVD9eRXrQrf5m/1XsBzAqYFHZB5e2U4C48H4=\",\"HUQGqgefuXa/TYo7+sgTR7zqLMm4ynMtMGT5QT8gIII=\",\"KbcaINMROJxnLYqFezSwTltMlWJMpyBnh5zTEtixfLA=\",\"Bt8MTH07hVLCKY9RihlmXsNVze26KZsg6xk8Z8DnLUM=\",\"JneeEIAEN3YMe8ISzqpdY9U6I0NoKW1mfx0ZeE9Hzag=\",\"7Rxe23BTBosH7mCRDtPRweQWhLJ2oK3lDGVN4QpEzA==\",\"JLQEavKO5QE8sWYqga5rYMlDFySzsWICpdnV7NsN0yI=\",\"JxBgdnFnRFHp2iky9RYW8UeOdEABe8vl8d8QMbqlgv4=\",\"C6hFo4AJhkyiR44ENkW7bQNasK4gBTrmXJmukUgZh48=\",\"FcXFTz78JtKDaizoHARbyyDhN5RfimTsk7ULBfzqFiQ=\",\"L0FuQYmurpMSkKoI2Edk2hjc4hfscW7BrVMNIdA1waY=\",\"DJI4XGPWxFE4moPdekZ4T5iFK23tMQC2Wot8W5bYkwU=\",\"Ii6BBaoYgIOvI3heNuHrO0g/7DU7gy+X4tZted0OKSY=\",\"6Y1/XkWsZhD9Fk7WhwQfKVLm3Tyf0S68g5WmiTrp/Q==\",\"EVkfNa0VQ6eoOYzIDY1GmA+y1akYSJQpVgcqO1jD+3w=\",\"D9pDRxyxftLJ5K0bzaqWLaCfuZpb90Ak0yI3hN9OBD0=\",\"ChLoEEmoiEmtdLQPOBvjDCwunsjYxQus7F0YaPSYKFo=\",\"B8bRlKc/hI99cW1vMKy0ise67Fr/xXG2uLa4SZYWgzk=\",\"GU+Efzx9BIoZN0JqeOB4TN5gdd0+yq0hpNiwwp5tzFg=\",\"BHgiXA3xCuEEfqprt2bHy6VdGy9K0skrV5KH1K+r1iI=\",\"BwmNhSITlLfdnV4Bu42PoyT1LMUKAdBJWffPR6nUJro=\",\"FSI3cnh2U2+wSSt34spQg9OUIcSNw05QeaM/o9KoY3k=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"FCChTeLLr/8leWFvrxv6dPfGVCsFOkmatVGjQI8BcME=\",\"C50cIRoxNc8kjyzou9H+nGh3iNN9ylgedu95agarszM=\",\"LZCti5a5XgfzE9SFGVqQ6M3uTDD9EbdAYXyqhk0guk8=\",\"GEFDn0AdIL5B46qBVKH/tbBqfLpph/7H9B31+SpryR0=\",\"AjiGQGQsKRpqHrmNc+p4t9F2wrcMbZu2N6vbhCwPSng=\",\"JoRzk/xzZOl2UbK3hxEeKGOuYSGMCiG475MpLW0/WaM=\",\"CpeqhrfL9UbFciVA+8MlfjfnAcRAI+Y4J4WmuPXiqm0=\",\"HmbJ4dSX+u7kakeKsn+69fmvKfQ/3hb5pjheDQWxeTA=\",\"Fd2dF0TAg1JCDnVswl52U36Nz9cMXg3MRF93VgtzDug=\",\"kH29cmPPkLjLXfs79gYQ1P1Evu6jCZRdggXNrq3Sog==\",\"Iz3OfKIf0ekJ6Y3PK1hOmth57esPOVv5pEqn/ViP8j0=\",\"KNDyXMiPPTOvVNARBjwKKQD7UOGNFRfVLWPOcrQ1o6Y=\",\"INuIyTa/58boYSZYHL+L1+3d/yYjffZ8AndwcNASrHE=\",\"J1MesAN9xbk47xiPsWfzgDn4Lyz/u4+2URsFZ2r24jA=\",\"F0yENtdjIRcXjXd8MXSqohsZCM7e8gmXr9T53lnbr2E=\",\"BhCnJF+xEbhjLNQ/jTVqg5dRp+o4OHDhCPRYFeff5Sc=\",\"BR7D67VglOb9X7SEAdyXp668CMAyEmCgPOFaZEAdV/c=\",\"DnmhcRdmC3llEFiqoQK/UwqYwPwniQwOVy7MbWZpw24=\",\"CtZClaChZFFwQK8M7yb6njmx6mfbSrIttdYHxPyj3pk=\",\"KGHT1TwmZdmslioqePpP6MtugeerIp9mxDKoDd5xFsc=\",\"L/p6emLV4b0Dy+v7xcdYRErg0HNMSl1mehWPuhGprI4=\",\"L87KUwI8PMPomRlhZE3stggGxeJr0u5kWUJAM8vqBt8=\",\"GzFd2DyLFqKq65EZQ2B2NE0voyHzNZ1qnvbMFbRaqvo=\",\"J8eGhlsMQkvC4h9D9CFo1mjs4bdwe2K26ndoKmCkscg=\",\"L1WsX+nE3uuSzTGFBEI/MYlLgOajQP0hraIVhW/L9bU=\",\"CEhMc1dmRa8DHajQWffKzSjGaQanrhCtkcGWNzYBM1s=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"Hx6Zok2k3pNWShEHRNSBviEPYCCtmABvC9RhCgVLs5c=\",\"ExPOlJem4HTBVfwCGNhYICMI7RwSQQE/2xsjln+iMWc=\",\"IN0retLE8fHRnxiymjrkNkBbaGa438T7vwh3+7Pn6x0=\",\"HZo7FAd6fE1YVjLenB4NSmjHEgNJLVkRyxbzr6aL0uE=\",\"FzG63VOXMl4iIfZzkAL6qdoDcv74BD6/k+Riej+tFWw=\",\"I+fj/owQtVgKefTDKYyOGGK39SN5QvI6VFXU6sknVoU=\",\"LAFBgKbsxHRSgI/qIzuC8547fK8BdWh3d6znVEop43w=\",\"KSpbdVcx+hkXOvNeRlNlUKtnqvX3MCoAPQ9t8gTol2s=\",\"DtjGmBykFgDbpFCoYLhXhGVbwFGTSB3b5HXeTzUdJDo=\",\"GhlZeQgDbCCsY8zv7+dKfUo0JH90cb+nQ/fRhYyPvxk=\",\"IdgoE4hoJ+jBmFuuHdO4N3v8rsbn++CSQjLwWVAesng=\",\"Gjuojgcd+wPir2TU77urOCUX+UVmxyaGUImetrsZcdk=\",\"HUjUCKhXZgxfo2KGx/3daNKkgxywzQVflQvjw8lgc0c=\",\"I6kS7ganFyCKxfjpSj7xwNzLfLFKL8Mr5x2NJeZYJ+A=\",\"JPFjGLgGTZfTVD3AnAwolXRb38ljcbzJm1xtb/avPhM=\",\"BzLAsEDmv/uuasjO5XSMxLHdeVWdK4TXM0fnho7kXjY=\",\"KNlhozaH8V2OQjmqou2qsdz9VDvTBDevwVHLodi2+T8=\",\"KVM41PUJoOasGGIimWNb05MLv6pN7DuIW4F7rYcIhdw=\",\"IL+pH9Bcf7wvqwYZY3v0/tMflXMdicL3BA9MiTz6uaM=\",\"BA3xiANaskBqkyYGo5HhRsUUY6USnCvFqzQW5kVdzAM=\",\"JIP/z2haakKroa+LHJr0G2Z5aUaVfmmUf5eQYVQixhs=\",\"KFqq/dMYCxVD/BmUhG/6wi/gaQjlpr3T+j0is2RLbqc=\",\"LcXzQ95c9ZppyUKeliidwcTIzwj+aRhLaGkPM+Iz/cU=\",\"BuPXtizkQ2/t0KJA16d3rc55cW9aIrXv7qrQq/HotfI=\",\"FILLqXQf8dxD6h/FGJoqWf1bK8LxlZwWQkFmJljyUH4=\",\"E0hJhCDl+el3yduWCBjJax+TzzcKI4ATi71W4MnQ1SY=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"FP5QO7Q5006o6qV8+hyq5x5ChFIbpiQLCvuodLk66Pc=\",\"H5yag6lSwecml9ipOwCle9sJLWbr3hrYsWk0P5PD+OA=\",\"JPuwwPKs4FpfrwYYZ9LO+zVJTtn7fltZDbViSGyIsKw=\",\"EPc4vXkFo9ufDW+3OyzzxId9zmDOpZJdW77OeMxVFv0=\",\"KmLiRbi2jUUpiYfs9AoKNBnqhlPk2g1qb1WyFS2Fymc=\",\"J1tyiH9KP9Mr6ku/RzlBBpY3Ye8+AH8vHkRgFAiWwWg=\",\"FVLjbRZDUVDkdvpmZcTwWDVYVM8iAtkVcwcro9/SgH8=\",\"C+nvkEqsSG+93RuNp9V/nOjRvF/Huiq8F5wfoghztZc=\",\"HoHd/092obLc4b0QqqFlMPhjag5WO/M6AsuYAdf3Yuo=\",\"HJ1v04wVGxaIj/Pufceo9lP+rVD0YqYEXMa9qnIjHeI=\",\"JJ9sruLT8iVJt1PMCFeomoXcACWEAllKXr+9cjXIWk8=\",\"CluubFU4C8bDxc70qtvuPXui4wrODex/osPoUr8DB5g=\",\"Glkb2LqPXG5kuYStknQlfTjKryW5nKsXfITI8KziLEc=\",\"LxTnpNBx7DlPQ/RtYLFVKqmYC7UOfJY9QvSD2jIRoO4=\",\"Cd/8JZxgr1/1giz4oXBHdpWsV3XcG5AQRQPKxkkU+G8=\",\"KVr5FS3EBaQ7NTd16Tgo3A3RrUZX8fMk914l/GfTVbw=\",\"BO05ZTvVLwGyXbUPdbD5p4aNrPPG8pmcI7+V9YzVMzw=\",\"EOgVUA8itXuoBW3v9CtR9KQTD25tNkvB3nEXuQI8Czc=\",\"IobXWnKDK6sp1YOVxFrUGdPRJzBiyJOnDFb+njh1CIY=\",\"ER31Q/FPKuetqEm4DQG+MOI/tJroBdCa+3ocyYBXon8=\",\"JcHR4TYZ8a0EgxsjOdFjrYPaOAmonvwQYQ1cYrwD2j0=\",\"L6T+eqLcDs4d1IJ2iDi5q5EwEFOf2alMAFKLA35PjsQ=\",\"GVDy1H84oJduiAGgPt1R+YL6p0OSpwoNOBGU3CWHcOo=\",\"DmlFeVqHiVRkT9TTbb36hWxrFRPIw439ceP29kjVaM8=\",\"DxXobmm/DXR8frnRAKJpMORLVY3kay6SRsTNJp9OBwc=\",\"EyzM7pxH6idITcnXWdk9VgmI2aQqxvkL5HN3YeDUOPc=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"HxnVtYx3GxAi1q6nMlljTRyeHbInvX+s4M89fsbwSok=\",\"CemamJLsXJL8sts08KgNAfk9tmdbg55UrAgeJhbv/0w=\",\"LjmYKFfXH1O9+ostL9hIFycmfAC/KEoBHnXeEJC16hE=\",\"CkwOviEYwqxWQnLrj4mW3I/8ZJSAoUS9pX58M/FK1VI=\",\"JUUTRbNSE5ZM5DH2+ezRWTREO0NafxdavYDZfZmf2mA=\",\"C7xDdsH4VSO8fIrp/NihcvSk+ZBdCfHeCm1I4nPumAk=\",\"K90QN0aaR9ddW4mUcx7eRDBuE39EYPKsfBeL3nvZ/G4=\",\"D2d7KlXnVt6CI9yoy+WZVJidJ8qH9XuLjlkHjuMLJ0g=\",\"L7Cxe2ee1vo+UosAnkRLs0sXP+GJJZcaO2d3hjqTZBE=\",\"COSYjoqxonQg3GAKpP0T6p1wEpHgBd79qjPg33LRgLQ=\",\"KqP2+4G1RPpdM4wqcpnSjUmb+G93EJ75zZHzFWWV8PI=\",\"AgLOZnps7+aaHRLsbwt2dMrn+w4C3eQuR/z+tq/AEb0=\",\"E/xFHBdc19CsiKi3ATzUYK+faJgnU+AesLnMzMLHtXo=\",\"G4ai8IZ/SpfW8u5HAfI9fgXHcArlPA1XKExp4XDpCFg=\",\"H7+BL20BTXwBNLVNnWr/UPDddteImSaq9Z6G5pxyCCE=\",\"Ea5fG8Cy8QlW41sqEl3tDqSzEqpScHvV6YRS9u0NnSs=\",\"Dr/ShEoo0I3yzL3cjVLlG/lxTpJ5riW39wFdN3acdqM=\",\"HJ4oMNU9L7OOw/ss1vRQYQWJSd0YMSshL95wgneOuXA=\",\"LImhnMZ1gjxhhD8hi9ywzMtbm08Aad2/fpAP1kPCljs=\",\"CNqF/4tiAOCQz/CiwvBQQuMMeeQlkHrZoFWpoqSW5z0=\",\"CWAYDl1f9UkTA2ADiqwmv30vWCjogyeh++IicZTuJww=\",\"AX6lMYjHeldg/T2jIT9UnlpFx0Pbayf08a+H5O8oYJo=\",\"HNMAFg5cvnuc160RgFmMBloI6llIl6iyxmdQjpOq0sY=\",\"G424bP0x+yf/0FMSE5rIWU5Lmlh5J/HV+7N4vnX9/5Q=\",\"Cc6S63U4B7TNic7+lOfzGw6uQ7TNa5fYJIcxzKeBffk=\",\"D5U+iwQ6W85cRZrgwXWO5ScH9vDfvdxeQHSDcJ3yKnA=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"DmH7fnXvkpXEGJ1ZJpQMZb7yn5Rg/WrKuW/tPRvj5iY=\",\"DaV0+qOFGw+J7glnkuci7wLA4JeTuClXnmLUPpdFB4s=\",\"Kei/tDlBdDINjDUh+aZltUfLBWD3JqDXD1L2E7DyRoY=\",\"E4hkpgwGaDXxJ8x/wYrQvJJ3Tu1VpXNbj05Y8cTeVLA=\",\"DEBhqFVsul65jWlm9wFLfwk+bBbKHEmLqyZpGO/SSYI=\",\"KaMfmqqN3qX/4N68TKaWiFSsGWIV32fAn8vQM1IYC48=\",\"HPOuCxubXZlEWn+UmYxeWUiMYEGmIFBFaDxC90F7ilc=\",\"KXyc9Ag/5QCQi9H0yIYwbfmwgOd1aaU0xVirVSvGGhQ=\",\"H+40QaNFhpu+90RG/uT1HpMD024KMxaQW5F9uLM+6EY=\",\"KfgacGFjtVxuVTJHd3A6kwPvi8VlAWDg9G5bgA1iq84=\",\"CC75hbFyHsx3DLc7Eof3RXafllLHqhd+Q3Bv+wFoP8w=\",\"DSkJR5q6Gc3wWd/SiRXLEBdW/Qvm/dZa8nFj09TbgKI=\",\"L5zZRv0cLcdL0PPOVzesg7EHG31Ocgu7LY8TjCTp8zY=\",\"JOyFV65iaykbUQ2ewb01QkfcNyf3KDLaennE/K+MvIw=\",\"DxGkH4Qbic5wUFVD1wKPjIUswN98jYQJFyOcNyQRTm4=\",\"EUu4J5W0NHHEin1PIeF8Jw+YxpB8N/L7H5mFYmbLgIk=\",\"K2L/XwG7tJHHRKgobbCt7WAvKHq67DsfsbQhLljmpME=\",\"BlYB+L3Uh+w5WyD6X8J214ulkYNfSBETs6XFmwBeSZw=\",\"H8cobNAWjoQwG0jvh9fKtn5FiD4WbOPVs5g4kjDZrks=\",\"B5XyO60jnC5GVgHhCf/LFuFT9eR6RzVBOJQNmQiMUGk=\",\"LpU+cV4MR/3NYYwsUpEhWnPTwaKby8t7m302LyEQcsc=\",\"BXezq+3bHLoDhc1HnVuAvnOsGOpVZNlyZoHYwphXtQk=\",\"F/aO+A/lO2ORlBlSddbdVnHSAW5nt3egYA1p/U5yOE8=\",\"IP9OWGWcsJMvm+NFXRPQ5lkbEtqPTGFIkBPPkGCxLt4=\",\"HiI4QYHBnYtsUVsnXbhAHpABkvCuVNFE+nxDwCld4tI=\",\"K3O9m6OqIu5Py4Gskc+K0D9m9kDfuxzHthqDxOeqLqg=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"BuB31cLk5clwWCeoe/HQO6DRrQ0a1sodY00l5MZqChU=\",\"ASGiEtrLu8DM9MO0KS9oFSPafJ4aRuG6CFa5AJEeT4Q=\",\"FKVAWnHjvxLONHxU/eHSI5j8YW2zTW1uxX2NA5VYk0E=\",\"Dwn6fE7quiL/AAvaYb19TodzTz+BlbOL/OzG/yIdKGM=\",\"FsJYab1Re974g0UxVkE3TqhuZlQfEnJJOKx9/z/BQ1M=\",\"KTz5aXC5BNIB7xuqi9rKEyGtP/DWdUjXrQcofSkIUYs=\",\"DF8iMoE+jdQTQQZFoThUk7pxUmCz2WgUnzB7U+zHk/g=\",\"LmIKOaV4mOukmSt6GyvZsMKFc6H/Rw9UTGJaYO9iQXM=\",\"HGi2TIiH09uklca7NggGX3smuNOQUAmXcDMIkd4uhyI=\",\"D+AOc1xB/QCGr8JQIkwtSM0Odx7atz6151xY+VcIJHg=\",\"G2aOylIa8vkiKuhoGbWu9tMtgXknXnuY9rnDFLYmU6k=\",\"KFAlwYjpjU5uWLDrbdRv0fjSatUZnrm2R+mfcEctxLo=\",\"IN/b6ruJAAkHJbOPhPZhzS/1sRzrPGg172mPfY4C0qA=\",\"B9ka2t1aT2dLaZB8Uz0STunxWYjLcacy0cMYiJJNNyk=\",\"IsPbWxIVW5RcfMBMDNtTTbL4g2uIdCyzLbQP0ORsn34=\",\"AUtkCgPdkgd2TP/s2QUApfCQGUa/Vebze0+xdkuvg4I=\",\"HpuRJwnoWVe1j6Dg1CTHJiz888CEBmcBLKsNBlQsZZQ=\",\"H0p16WXWa52WZd21oVrQmp1ojrK3dPyKhq9G/XJ5a9A=\",\"A9XGN/aWd+CDMcGF1TupdZrgGKgy2gNuMfANzuFFE7w=\",\"HkJkG7KaSLG5yKGH3Wzfa6YCnLB2DfkHNLXTutjiErQ=\",\"LYC6iX1ibg07sVR5BEuwB8tVJiFJ4Q9T5j9CpTs+h/4=\",\"IHGr+jPxCaaT/QfE2mpcoRdf8EE1E9Nq3VvHIBLnOhs=\",\"KFdnWjwjZTKDPmwExsnMkdSqPhjrjzjOpuQhxJM/BY8=\",\"CdCXioYbnYUmUDmiIZGCTkl0srETYi3UU8cbCx+OxmM=\",\"Cx/7YByUboCJ1TG7uLw01KNuJX6FlsR6PHc9ccaGArM=\",\"G4z8ZRubKlGEnb+nLE85rgGwmJl7Im9YYWODUTx2rAo=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"J9Fn/nhwhEfhHdH54TQvZ6nSvh3My3wL8crGCw0flW8=\",\"LSEampsTvuA4L7cHoHRMpHs8wPWgr82rtcNOUtyPonc=\",\"BBIVpxORCblT4/dfA5wwGdmjJSZGHLHnSbteSunm3xQ=\",\"E5JVMYgg2fdphk5LkBG9ysJPVJGkCcjQCIwGh1VNDSg=\",\"Jt2kRgYsEbPuin2fg4PbHxiYWdkaA9NeksKuE5m5lOU=\",\"Kp0zWao6s1l5nSPAPz/2d+zjCA35eCFMm6CINoRuMec=\",\"AlVx3ilqEewmx/WzeNvFg3w+jPCWefxj2kY9WibpnyQ=\",\"Lp0ELC3rPKvW11ilTN6ygokeaV1GPK2qwBpEtkmB6WM=\",\"HM/hdHd4fDvXJ0EmXlrEGc8E9g66uV3aPNdO/r80r5U=\",\"GqvLv/QnaRdvBcM+1ulX9u+z9ARFHYPGwQcxPrCY1X0=\",\"HDp53HrHm0AUKbEoR4D4IFKwIXpprcbOQx+23nB12jE=\",\"JFG8Jl2sNUc1O0h8RD0ZIw8dTzBeyy1huupkPxg/0do=\",\"FG7p3FvI3dsix86KO+Y21pwMBglwm30YO7ilIw9JDBQ=\",\"FyLbExgNM7qZuBmafm4Uv7p93O7DvzUWGn6HXDNvvfM=\",\"D5CxkGHRHyoDK61pghlsPsITLq4H5zp9e3qhoTU3EvY=\",\"KdwbjHCnUFLUMSiJBdZCQMaXnwQpBHK5QflD3rf3iTo=\",\"HL1XDTtibL/3RLj6tFWjfFR2BDEUKqZ4Dns0apPzL6U=\",\"Ei4NWu9qnZRCEbMIcmak39xkwsHhKbFG5LRck+gSh4k=\",\"BqLof2wlHC+KVGYaxMF38urYxmvULNv88GQuSwJTdcE=\",\"EhsUtRLytnZ7xnaRkG5Z0Mbx9L5Ld+FeJ3UmpR2+GmI=\",\"JDN0Wd89NvFBMO8ciVD9JntYqGs3wwq4fVckVxnzhDw=\",\"LXUUB9csOL14A2MLEv3cegdtsy2QFtOwqTgjG19mdUA=\",\"H8+j6XOU4QV+te8ke0eg9hDtZ9ZyJfTIokb1S95XXPU=\",\"HORlaPwrMfxFjGXXmJO6z7DMlrDgi1HoXU1UMuJEfoQ=\",\"KiA1OJr3qsOC01FdmZ5qaHycLpORjFYlPGrpaV0W158=\",\"CnSFpXNJLDj+u3e3A7BnUpDsYVl0yfcF+mOxdWKLhUg=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"PAuV0iUEASQ459p4saXb60+VVp1o+tX6UfEm5DQlGg==\",\"EkInSBk91UEN5nXFhYSktmEu48uP2SkyCp5wcgdWy6k=\",\"BWDRNgIniv0PlgltJVQ0LPO8hpcPJ/yAfc5pvMC4dMw=\",\"EzlBi3sDnY5oJgAV9VudkfrGm/gjJyL5QXOKq+ohzcM=\",\"HLtGawJ1XTLrXXkkFHgBElgz6QIK9vUr5ojl2MBxvHc=\",\"D1w4qimb6FvgO48GwpCPCq+vZ2YqcU7apAffk/0aMn8=\",\"BkRXR+2oV6gZG2jifWQM/ZHWgnPlTYiP8FcAHkdvAKM=\",\"FgRlmmVtntbl3sRhpZPD7ralvl3XImdUJc+IPevGls4=\",\"EfwUb5qkX3SKbM4QKFRyDL+2D1KX7S93sWyfjsmkrNU=\",\"IuvU+bzQfFmChjOAX8mTcMwXyKgY4EKB/IYvQlqD+uM=\",\"BRw6SSG9IG9locqxu4PaLsYSi5J+I3ZQjHSnu6NTcS0=\",\"GwTPLXpxKC5Xszs6ZyNciazFoD5uW4wvx4SJHqup4iE=\",\"JC3jTtUxa6l65PRvBaqefCwcFdrZ2/hpUojBMXG+qJA=\",\"IEbJGlnVDCccCScapA3tmAyRqI6l9+OysIhYRk4ILBI=\",\"Js1UWZlCjFFCBItkGvcHdZQjh3jRcZbaLlyOGyU7Ntw=\",\"JWsvSAAHGu6UrGuQMZdPJvptxSCTjJaVKHg2T2+XkP0=\",\"FkoPiXUI9Q6BpKUeGr5WQT07UzBsN2HdQI4XQ/sGCjM=\",\"H3VpNDB5gm8LEkBwLsUHkVFz8416Obx1rRyGz3m9RBQ=\",\"BScrs+hOnQzFhqfWr3EAJvgJ6gZSb/6do1D93MwJ0aM=\",\"Iqyb7SZrlMANL5009xotNsDQm7MNnvZYe+dS7Yt/vCY=\",\"B2dINlF3d+03eeilhHMqlQnknbnZSncWG3hwzvmBwec=\",\"D/56AXC7SPtsPguA5iROHW75nM8+ijBhqjE2sfeVbPE=\",\"Gv2dzpGxkRR8X3ZDANju02Lu6QdhbQvVbJMaqnaDGU0=\",\"GuNGiJNvzAloJJzyB3oamC31NY3Vq8jezrbzO4SLRVw=\",\"AzhtboKu229LwF006WgFz4dbvc2fWdo7O5X3BjRCsig=\",\"GhwG6gkmvQJGQJNvlzdzGfq2gzNJrDIyQBZ2UfOgEDc=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"MBkjNkCdFrt3OJYl0J1195+C4+JJubgKVtVBpGMYRJg=\",\"GciWf+vPRYIKL6x6j3R1tZHz3IfiYzknidJHs563Syk=\",\"CXVwuR7V1Z2Xfo5x7olaWQtSnbbuNk/YK9o0rBj9Icg=\",\"GkOT13j+pO/Qk8WkO08PsxjK7dke0w4q/+gAVLbNjk0=\",\"MfVA4cEDipitO4DY/JvfrqNdHRU9oAEQY7JHIAS2ew==\",\"Fl8AG8uKOg+dTgDurtBWFAY9ZXNd7Iw5c3qD2kopP2s=\",\"Ai5rIjs+Q1MJ7nT0kgWE5oHAPAOCrU1NRffx4EyPHik=\",\"FT1MdPZ05WZHAHVmz8V10IIg3Yn4jpGZF06BAG9LxYk=\",\"BG1GVOXqEu99eep7VA79jPyw+MgDvnqfMTMif4tnORk=\",\"CHLZbCWPZADAMQJMgeueSfGu+600Il+lYzNH9hWRAVI=\",\"FeiiONKV9Wa3AkZIiuf/0UZaDv0S0taIzrKtHM5Q+yg=\",\"CnwBmTPRwKJcuN5n2ikmWRJ0rHma56CADnnfsaZrCaw=\",\"AScccPiAUyEGjIleHgNw8XvUnXt1z44FW4f3YViSxsM=\",\"ETVskM9r1AvdKZhZ8kOc0Jj0O69xAZiqpFe+0pt43NM=\",\"HP7VX0+ATXbdvcIR8kinp7lEH/Ek4xuub596c091q8A=\",\"Avn8FfqKeqchffy2O8MebpouxnZo7xRJnrSmuTIjSqM=\",\"BoLKi4Z8eMkX8Ewqd0Wpp5GCgWZ3xlp3GwGeZO/5Ors=\",\"Idyopquj0/AbwOJ+pRjwSb1XiX8TVBQdRhtKDIaC5IQ=\",\"InYVq/OMhU7kq974tTsmh4MrROsFIQyjVQgq4G2bX2w=\",\"KSHYB8/u16hZJ5ZvHdW/JoNdOHfHInrY/OlvKNALZvY=\",\"HJBF0nEh6yAOmanfK46Vb1cOfLBqqkJIcuZNokZo/AQ=\",\"BAhQocLRt7eLWdzLeQd2BdxkfjlxsmZ5FCz6ZXs+d6Q=\",\"BIAN1dNIYKzHRfc+YcR03Ejl7YjMKmVW/X2LpH9/4Zs=\",\"DNYFzBByg1NBgM/ssmgGjM4OMk+O7RPcVI0jhVn+uA0=\",\"JlpFYKihzOz9SCZNnuFq8ZwSUkTBPuYmsj1yvWwbadw=\",\"LXK1j4eODZb+gZrGMOuuQSl6CfvHn/83KSjmv5KaCFA=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"B4PgPhwgaH3Poym/52KEfvhGm5oW8a/0bnIbz+tO2aI=\",\"B8VJh5dpthJ7H92eEZx/EIhFmyREymL5RvgCZcCNlrE=\",\"ECWIXCnEDbMcqPH0kMqkvGIZJOiHJUKPvGcFVeQiLbM=\",\"IfD+ylh/5UYipzHsiHaNmGWBwHRlxHRylpHjGotP23U=\",\"Bm354nEn1wA/OX4D2tJGAnElrmyZIA2tPNX68v5D3iI=\",\"J/OrDOEPVfIx19JJ6vOKpFN13PrmrdmyF4PR68OOSRM=\",\"Hi3uTZSjy+Z4r4sKi/J3RpFQNkSW78Cs5YVAhlpiiLY=\",\"CZctC8UScHUc9/38latyCIEtfp2TqbRThuC70/sjxwk=\",\"FH0zAqI9+khn/PIWi62v+OmH6Q9sFB6SvsJ4zoFqlWY=\",\"LpXAtxDMF5tOOfPUXJfQVVQ3GV0+iU5b8jirn7mSnFQ=\",\"Dt/4TQJgJrYh5t50GEkwB0gHjbFAyf4EI2wuBaNdfw0=\",\"JF0F7AtdyCK+qbiizWxW2ji/3aCk+ldE2kQrqDMJhXQ=\",\"E4h0NgtumObM2P73Qtyg2OxEgmqsziIbMRz0IabsApI=\",\"HMBb5kwvPNK2hpnFLxXWJl1JPnvVq0AwpTyL4v7Wfok=\",\"L17cUIuhToJx/H+8yz59h1D0MiYGsuXcqscjm6chQ9I=\",\"FVfU7uIHNTFD7tGwHDeAa08LbmiAaaE7KWIUQ5u+CUk=\",\"JYZQ6MpuEWLhn5IwLSpujkCwC7Fhx/LKW5I2TLVTtfw=\",\"EuwjgaAYtxhY32v2sMngLxTYykkoeAVdz85mDH2RVTI=\",\"Kuy1miZRCVPp04tWaUR99r9MLcGpuub0uE/9/f9qKik=\",\"EyAZB/+EIdx05Remty5PmXE1yPDo6lRGkHxv0m8WCc8=\",\"AdsTDlWDyBLqJeEH4niZyJUhSrsiW7OAfqgCMgFdIeI=\",\"J9uZvCiaxeGtexGSygwPOxYUx3p3eBzwDuLkEYNRhb0=\",\"IaMmcSxbEJJy1qrrtzzHTNOJVD/Rfm8SyzpsIBrnNeY=\",\"Jxb4ImF6NZtgup2FPXal0FHJvr6eqUJdUbmEdalIWAk=\",\"DpnyWArc83LxyZ0AmiKBbFPNUnLUef1kAWpF517uo4E=\",\"CjETpq/+VZjZ2K0t2/g/+U1Wyn8HikhxPQrxXEUpKRo=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"LPZ9XRqTg84UrfjXtjAF4FiYDKFI3rO/DxeFXLEVCX4=\",\"FBgtKPF9dk95D5GFoVpqAxRMnkHtIuiiJpYZd13TNls=\",\"LWNRDOD1GsjzJTJxka4ujayHdcBfh7h4l+c0FqU9EAc=\",\"EdICP+UPEUeZi9t9A7cPcPGlg6Z2RrBVviUuM5O7D94=\",\"DVvqvfyN7xwPr9K2Jb8fTqy2092IcNBVevVMnJi1t5k=\",\"Lo9Oa7b3ooQiY2p9Ow/hLKIKsUzQxcRcTvE/Mm6l/ug=\",\"GuXryq4FvttZGU6WySwohHnc4qtD/OskVByiZIJFdio=\",\"JMr7TCGvHNFiFt1Ct+XEJFfV+/S/h722VzBBjv1oKl4=\",\"LhOeDfk4ZFFqq9uG1qtl1lmKABc0b9cy5/iVr/NulIE=\",\"L/g7sohHEwVVZJcPHjnN7Qd6kgXL10ra1wQR4vljFZw=\",\"JVL4KVdC/ZTg8mTRgunjQCP0Fj/JKcaxQ8s128YaMsU=\",\"CwXA8d76L/TmpWp1gqVo1lCnoq6cy8R4vlK7T+NFIpk=\",\"AsBYgoPgu3E+p6IvsYn6NZ3Ks58TfJ1ZU8zQrhNncPg=\",\"GL/O27ofknnS29HQtLcopINrloKQXgP22auZku5wK9s=\",\"BLMU0Iba68TzOn6Psu5XjGaOka3/OsMWjdMYOWX1Hsg=\",\"Bs2EE1/9102cMVv+MZ0BsXBg/ulj6Dc9FFjhgQJ/8AU=\",\"Ke6pA5xZyTnLgqaafe9qYGI7mGjhpxN1kLkwFAuuTsI=\",\"GXL8lsJBIb3cx2xEB026asAsoaELuqe7Sc5tcWG0/+Q=\",\"G6z8LXLVf2v2lfPYKFmFmzKbh1OeDBgxOh0/J6ua++c=\",\"EGni7aR+n7a/3fu0jXQCVqzZvgfS6piDtj4yFNDe0Pg=\",\"HYfcjI5zw40g0u3T9rWr1Faogd7tqQ0HgBds13cEGcU=\",\"HQjIoJUrXk/ZFbOTgqDuRYk+PCB+M55sePKPF4e86Us=\",\"D9urYKkp1JIBegaRAy+AQiAaMiPHrWKKbhtjQNCJPA==\",\"E/JYJu3zAB49it5d0pZZia5sJXi36IYRaUlVO28M4kQ=\",\"BE+gLh2pm8SGbCIHhKS6Va4oz8R8S55bpIj0O2FBx8M=\",\"B0ktmPd09sj2dYOqpIWsYykGoZADp3VxGVNrGat4udg=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"H7uJ1DisFBKKQENzUu1xgtEPIpZIM+/m+0brIbeA7AE=\",\"Bq6Bmo4MV9RO4asHpJvoLKVUTYmrhRj4RDhVdq7EMjQ=\",\"Kz06dgVUPTULCDi5s/qWVsuRqEKH1vBukzgVTzFsuts=\",\"FiAyPMJPuBhU1xbc2XLBCOpdOwYoQXUqNsmUxZQZl3Q=\",\"BTkkuvq9+JIyNT5chT3YuUb2F6KPCU+fkrrfHCM8klw=\",\"AZkkHIKlcBTjN1ApsmXqdoNhHq1RSKj4OiMQZceIeVE=\",\"HottsNRHwJmudDP64ioud50RC9O4/spYruBW9+wyWk8=\",\"CzkI0up68m1CqROXL+EMNWX2J8vzsFr3sDoDtFXSdFo=\",\"DDN/YXheUCKH4nTIF+XzgOXNMU0aPOQoh9/hm9IOg0g=\",\"CWWn0PJ5mqbz7LCrT99fAuD9U4a/E3zSvbw+aqt0tgg=\",\"AY2Nx512iQu3WGxl2DrM5hheEbo40oj0kz8z23QjTqo=\",\"IEhgLBHo53G7NUFdtFGXmMNrWT6guP1FYEEKcFfV1qA=\",\"KWaDNjPymqr51fjSBv0TU/FA2YmnIUzRO/7QZXsLVAc=\",\"HGuoWrX4XtS1PcQM7aumPl74AGxyREC5RI1krCs5Swg=\",\"BlrcYIqm3Ah49b/MK4mz28GMWUTFuGjb1tJjz9OGzL0=\",\"L1xpvTKWCvKc56sUFQugiQc9dLFMGLY9zpJC342mZuY=\",\"DU5Hwu76LZeZHVgZjhR8XcP4VmZfNZBcjcwMeYGXlmk=\",\"Idx5iWOAyZNtXaRxF+5zDBZWPUCCbP7ZoUFWNrttn2w=\",\"ETk9ELG4nfmi58aN8z8e5BZW7oUJVwzUrsbWiRdzIkU=\",\"JQGoMsS+M84aR1KqPDhAuJx+udeiomexbwdtnJCm6Yw=\",\"KUF6fsw/rtUfj05ZnhNpnTIHPF84ZdiskvZkAWBgyEo=\",\"Hm7kvntfif5et/UOpzk1++68bKh1ZYAJmzyaQaimbz8=\",\"JLEJTP+oFjHdn8eLM8vY16k9AmmsYFAa+P+C+mRuMN8=\",\"G61E8XTxKALE7B3K+2hStrmdw3I772KTYbW+pZSn4/Y=\",\"Ku0sJtyJDVKDtTrV8w+TVOIoBAFjNeQZC1Ub5eKOTkQ=\",\"JH1ZRIYArZgRVsLhnivpJNe4O+0brPFomdq316i/f1E=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"EFCXMUvOLCWIqlbxkbgT/uWEeei1QcE71sm8jmVBcq4=\",\"KNU1SgzrXbsznsiAs7b7wOfk8HrA7PU0hCnhr1cGm+8=\",\"CjHHZ4Czm0lPczSnos4AS4D1bYmKwVVxb2UXL8491FQ=\",\"EiWozk4nr2YlrRqSUwof2zIGE16wn2ebKzjBOGm5Nw4=\",\"CYoW/mxqKkM6BF/Q0CNG5cAk17S8vhLSWURppKeikls=\",\"IFrQ38enKYvMqSq6PsI/fc7iF4XJauoRa89x4H2bo2E=\",\"FI8erci+cx+V74G44fNjT0QYIQGy8T2P5Guzqv0jALk=\",\"BDckdKeTisyUffbSYfu6JoUKCaFlh9BpzYdxUeKH4dQ=\",\"LKaXmgecsvRV2k4juQ4ZHP8j4tdrfQptYT4MGkUHxKk=\",\"LKWd9VrUkjBwpGaWKarXVKiLUPvUZD1UQEXXYUhFHcQ=\",\"KnBV8eJESLUrv1ctDvwSdUWT1ZBiNF+Ri6fZCicTBYA=\",\"CmROL+l1o9Bi/0lqF+cROjlez2eCid5TshN99YEb4cQ=\",\"JZu32Ivz8cLwUh/4TAVCOiUPwyR3gjxE1T4RyuYCiuM=\",\"J9VR64gJ3y4cIApmGDj9lr6jCnoLf/sgeVdBpG7DWck=\",\"F+N+RDI2Dtmhbcuc8FhLR7oEnLpVtTrVtb/bVcvTasM=\",\"JjaT822ldOn2sa8uKBfoAwgANaGawcL/dU8Plw0gxvk=\",\"Gok8TeNxeELt4TX9sqY/PAXINMqyJXK+wh1X23w8sFI=\",\"Cbyoj8QX2FwWvJji/KUxIGM2ImujoCpRp/vcIxDib1E=\",\"D+aUTDMX1Y/6mPs6mRwiaY/yB2XTTCuLlYArg/u9nNA=\",\"G6PRRCdKBz4X7VI0jNgus+AMdDt9nT6USh4/WjYUdPc=\",\"LMQplVhiZenN+6qEVSUXcmmze6f80ylAdGE9LRKvQHA=\",\"CoOBG/8efyIAByDVmO0uNQjuFKnhL/YSXb23jPB6LWI=\",\"BCQpGKX8nKPDSGfWdNx9HRE2/7UZ3g6s4eb5EeoZc1A=\",\"DtuhoWGq54G6uSNj+g0S2Pz7XjuBjN3viET5Tp24kA==\",\"IwlC3nL+DbkZbXh7kpFEv0+s62m28SqstuDWtRzHkxo=\",\"GpVhwNAg+yjqLr84UYMgWK0c+XLpmEH0dyqMV4tu9I8=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"IsD8nAD1PUJHyQiXax7R5VxBOLlunDrB3B9NJo5k70k=\",\"InKdd7e4ga8vSEoahDj1LLe+O5PGBzEMUDih0HJToYQ=\",\"FIg6zslegkq1BXVqUzayxeG5hMahk9S9uwFMCXc0tGQ=\",\"Eg2W3FtChYn/ufN7UAHG9ZFbPORGCyUzHGLVnWWtwBw=\",\"EwMlqJyOdLX+69Y0Dd6ZL1aaqj+TUORdCQQCcIfomy4=\",\"Fubnk8gaEHGfYTqxgq1X6+x2342+93XPA+HjFmRtBfU=\",\"GLt4j0/1TcCYHjWnF4gJ0fJRjL0S5eeKd8LjZtBUPPc=\",\"DO3uUdW4fZulLW8SSQskzunmHBiJ70by+IJkQEZiZGE=\",\"G/4PAFmkURdTSPivhV4fOE0Sma39H42FLfbDJRML/cY=\",\"HKgusapNYIGkYJT0A5VDma92p9fa2I1anKkhowrh3Js=\",\"EeHThOsqZEcqJuQFlCU6zSVQJ7K/H3qaUYuVTQ3gQyE=\",\"DccBOUaekYJ2u2X/gzT2S6RCzdZLwYZe/j54j/DHQ0E=\",\"GJb188dU252IEumWZcichzYg2fDlmcCy2yX5sYbAW8o=\",\"Kx6ykvvwUgezqRZpIAOrwEaD23des+l73V84jfW55uk=\",\"DoIqi2vauc+t/JiYLT0n31MwCSLqeVsp4e1OYfLva54=\",\"AURHMjU4Eo0Hakp8Xn1IclamcdzhZ+Gjf2lgHGR4Puc=\",\"FzGsgkNgHJrRwtgfbKEY1Hm51x0DqzTCgr9o88qspaU=\",\"Hv7yTNQX2ut/vBeJ/COB/BlPUV1r8bemG8zXCg/RPCo=\",\"Jsbej1tYC30iK/7i8Z2+AlgNpOODIXtIcPHUyPe2ksw=\",\"DTgj77TEgIwnX3IMNApzP/qrKMNkeZeLSFs0bk67GrQ=\",\"JKKx1DjuhxzfdluJnS8GiBGm9G0CQiwTP/ZpWn8wRZM=\",\"Cf4p42vHTPbUd84FRhD2OkOFWgjCe4avH/WOmMn+aG0=\",\"Ej5M5qtYXnSKZCSBmySqL9YONxuYQjVd+V7xMxg0bBA=\",\"JX0NYz57jkD6OgwwVI/3nSaNkClti10+nn7k857IFPA=\",\"IfS3ksH8r1XnDhsYBM39lSp+pF3LmYLDFQJERuNrS1s=\",\"GM7A0zHLuT5ctMHU8QgN41b0ZeL/svpxL+uFi6zk9cg=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"Hl8I6/yfmX7OdzBTbdTP+LUZ6/UZrRNC3jwuJkc6C1s=\",\"LXfTSiGKdS36S5QbY9ewKrYHgDfOIuwGCNO3tALk77s=\",\"GQBLj26jm6J55ez4IQRgwRLBpWPPEGc22aCka3uEJpU=\",\"EftJiJNpCNs9UJBa3aUGXuKXp+cYfDYhL/31+BIg8lY=\",\"EIHr4+5yLk9oe+3yWczctvpGQgxE0OqIOJkXz2cXwEo=\",\"GFqo2TPMlnkQl1ZXdYlLFeKFjsKYAxHlXZgnRxu7qBA=\",\"GrMGhousmlumUkW5Pyybk23kSakJG0XzRzv5fdQlrts=\",\"Lx/I9s1HNZPPOFJxVuSCiX34RB24TIdVh8JJZvZSOXM=\",\"F3cLpb0DySdeL+Dr8VjKhVA85llpzJ+G4/s74k4futo=\",\"HQ0nXElxl47atLenzdha1ywgShNBXxQNnSi4r1FL1pI=\",\"HKB/YCsgNyuNUMmGP7Xsn6Azxj7rKTAVpLyRA4vj9/w=\",\"BHgvMcj83UiYr3bv/VJP0HOcisKQSA/Q8y3foILbvsY=\",\"Bo3hLlh6osJuLlCfrqD633lgKq6kbkW2CL6Wnr9G7eY=\",\"D0fz+I7Cl8NswWWB/iI6lTiMfDuv/myrx/T2ab90bpY=\",\"F7yZWBx705uun1k64dcumddijblBNaZcLFEHJ/YUgCk=\",\"HYXcDbc1tId9nxY5Ag2oevplgJY+DC3JXDCnfsV+4rE=\",\"J8IabGQkhqoHXJp3V7luaEGcq47YGeQNF5mSZS6q8dg=\",\"HBUBPgcZZQMGSHsH5CHnGLqcNSVpZAcXYO+ZxriqrSg=\",\"JrsuTiv5pT4RR2CNeak79zCwn05lHWsI22pQnOROu/o=\",\"LMfg+h6WTEij4PyQ815OdMwBsvdMxN6ISi3943Mx+qI=\",\"C5yH3ZFKJcnXUHC3mXUHOZlw2a3UE7mo5Dl/RquLl98=\",\"B/nObFkDJrc/AMhgh18sfU5rtScl2OTWlYyqyPRqSuM=\",\"DCidZwx+LnQ/vWD9KipePKB3tL9E33i6vf+iMmJtOQA=\",\"GQzhSak6UoywH7J9qeqjneK7rqUFUqmShtT6gLjnsi0=\",\"AgYzrioFttaddlq2/C4zWuDF28rBMLIEwB+I+c0JGxI=\",\"JUOpMtbNjb11M/O/WpBcNm3RrHNykPZnHnrWrbVXd40=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"Ihh9wUJcv1BTkvl2qDnfAcFwZ92afmfQnpB48exDq6w=\",\"J0V5uYtIMbiaQjUaK+9n8zoHQa+HHjsZEe3OKNaxMg4=\",\"LFKSVWKysI0dGyaWrykxV2kvKgt/NAUsvo4m6ABx0lY=\",\"Li+CMdtPN4b+9I57ZfnIkPGqg0cp92n+umCjVUuShKg=\",\"BSGSKrqRgGseThOkvfkv3pc3CZdRYmocTWARyw0o1Ig=\",\"LuEUCNAuRgMJv9RjROVVe7ZxFQQDDITYHRJ6F6pyx4c=\",\"AXWYGs4OyhUVNgAjUmC4IbSwUBPz4OPK0zI70yWIs5g=\",\"HRcJPHOVZogHAoFvd21U7ueBZOVxYzVwj9Z7rmQHuGM=\",\"B6bis6JJWEXKlqdXonm4I77CPm4sLuQfPtZwWp3yJUg=\",\"He5poKqsdjYKZuBXqO71v32EXLCaPrJ7/RUiObyKaBg=\",\"Fd8WrlTo4+IR6yf5X32gvfONqVMABwha/CBVNGju4uA=\",\"LYXNeMgCRPCQARXG9fXMTPv4KVwqC2hfmHFEuRUWGNA=\",\"HolPBS2wASy4N2LT+yqCTbEGhNtkHG4+qp/kXJVhVB8=\",\"Gb3gbW5+tshKAumg8iTHfAssr84Pup+/wGOka2noFAY=\",\"KJfeXZwnStQwKuZSED8NjToEGuk8DUYawV0w02pg7b8=\",\"D7Csd/mmz+lruqZG/igNS1RJ7aUbXMGsNjJcOvD0+DA=\",\"LD8G9vc2y/yxtpJ7U1Q8MalcZI1IKOw0QBwkdMkypIo=\",\"I+VkODRl8dH3y2KoDUmV+iFFz2sG+i8eBUHv//wZ9fQ=\",\"GME5FGRG28lW/5UnACI3DJPuCZR8q+47A3fRUk7CCAc=\",\"K7OxoXcWeAkugDkPGB/cbfNF52Qci35JMnCKwfMy8Lk=\",\"CN8NBKDY0bK4DyGcM6kmZnW/wIBTLp5mQwu2fgU2D30=\",\"DTnvsQPgMvmGyHXba59qZ0jPrrMzyTrXy0XnVer+SMg=\",\"BfR8b9u9e05ZzHh37q9jy4wWxN138hRCjclLmywCFOA=\",\"DuEFGzMpLYp9w1CRa2JEB0Xy9HmBchuASW0qrgyf8og=\",\"Arv1jaCHIwRjqYshCCRFOCOu2DD2BDLOMVbFg+Bu3wg=\",\"FnTlvGcOmAKcoi1AD/wZpCADUvsVLHhNqIvgtn/6FKI=\",\"DjCndMNTosvyRNPQFNGg5f8LrF4kJnOuM/G7IDD+/2g=\",\"CKHlXePmN/+msFHuM6sgNIMClYTa8MV8RUu6MM9jY6g=\",\"DltEl8OXsnynglStwMZqRVFJKaPcDP4u08RHpdOSYIg=\",\"C8z62C0/vsMp5oTRlWmZPIVUg4FPslR+e5bPebqHVhY=\",\"GQjHmt/a1MSu2iKVqdtWCjPpGwEFBEhJFjJwWxia4dY=\",\"EplWXb8lR7MNtQ9d1JyoNcMhPuugEw6DWupK3WUDer4=\",\"K0kG52Xx6A9uhNWFLzTaiextmWxKQKBmxotqmBAKL5w=\",\"EkokewuGbAnuXTeDvHFd4yRFmQFvD744Vzj5XLXcCig=\",\"B30brA9bImYHsnZdjUgRixxVOAxgqqwuwJQK/QwFsks=\",\"KsQahCeT9pPc/768XAjta0rs7n25VuxZ3cIwp7NXnB0=\",\"E30yfUGpxuQuILtwX8PaWigskRyOennKtONmX7w7Ups=\",\"Lb0f6HIEq+L5wnqDQ8clepPngUUdjhWf607xLziyjlg=\",\"INnLg45FTphB3dR5Lk6nuPUc19fycdbjLz+pY6bSzfY=\",\"CzQnBmMDnjFfY6XJkuMdXQlFEiFQT4WzfhSABn/pIXQ=\",\"EoJuW5vhybhffJiqypziiocGh9NijWDe8KswcrV7Cbg=\",\"Iv6hKXpKXwiQTVVcLhXQFhAqTtKcMrS7EICe8Ur0LHc=\",\"JMxnUYlAh7gxWYtbx/nbPLtIzilNkgjhqkNstfougOE=\",\"LMPQUDoOHalSsIG6XcWxF+ZGvtVypkUmbG7DzgoUdLk=\",\"Ee7b5aWWnzNEZQNJS0aaK4P4jTqkd+XW15Y6gzOmExU=\",\"GJrp6bFiqxoZ1ZnO3O9Ci9EyXHh0CqrWcVtxC/rEweY=\",\"Gq0RRJ1uLG4a3PnokRTDNsAUVSjzVqwEn1L9jLCENwo=\",\"DX4eriz+xAZALTTCWeWWb24usmHU8I4pCIMlprtmmmM=\",\"B5aiOtbtKsmVEEoNPmx16XfOKauh0l5iqaiiA2TqG+A=\",\"KZuOhiHX2MjT1ihssSazTuU7LcmjaXuDgMbkf1cRNFw=\",\"IPEe6B0qyantHKxh2c/fEL8bSc37ttIyhyod8UJ8GDk=\",\"CkA+l5lDuNL5R/btptQRcIgTQbteT7uztP4919zN13c=\",\"BGRiUzgPS/ZClyroGXd3lFSqCDP9o2sYIsucCXGePdE=\"],[\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"DU4RghjFU/T9F/Hbs5upQu/XbNGCmL1rcuH94nHHQ3I=\",\"HJgUo26lfie9g4N14cGlYtzSr2pmqtRgv8ivzz1jq4s=\",\"HFc+KQTknGq+0gmBRZ1BxWBUQwaXhTXWvs1xBu0+Qfs=\",\"CeObMC7+frxDB80AnmvW97USiiMpixHrjnMEfPLy6SA=\",\"H8QnaSYBvu6NX2v/qj+qia9hos56BI+aWWzyw4rCz9c=\",\"Hlt8v5I1Gr1qcaI12dK6VL68QOaTpm87iTF0zKwpdm0=\",\"LuadAYBj5HUsQCwiVbJnoF5Jc2gU8sm3JHJA1h6LaEs=\",\"AerqkZNo299XvkpV25mbr5QLqBBStOTVuOfhYlMnT1o=\",\"KX93CSPtcZ/zFn4XVkEmvG3aFsjP0nqtKd+npGYDhFM=\",\"E6lOHh/9EcSijIYpCnEWL4LAPqJjS2fZjBpcHQaRIYY=\",\"Gc6ihJSxIQpAmKwOedmftUbCw1iPPP5KBoNZu2CC5W4=\",\"E4QUSNA7g+6mGTX01JVQNkNDbpCo76WL5HyF5YGwULc=\",\"LfJyrybFqlQHGI3nG+t838+HDHeLIJPK6GgACi2/rM0=\",\"Kf5z8U4kIMmCVI7HE7heN0wdikPCvC3bYwK++fsrbiQ=\",\"CQcMRAb702DsqcMA7b0KZf6PWbh2wYrhO94U4zMOMXU=\",\"LILqZ1UWb9ibaIIAeIuoLSlzTKGwRJTQZDuGiasLfMI=\",\"JudrEMDdDd4KV/m3Mb4GGuV8HZZOLlJQgeH6YIRjK1c=\",\"J3KY81VJabxpN9G11f3Fghs8gJIGo5MOyJTK+aNyQL0=\",\"KH5TqJojv2JL9mE6gh7l1QKDhgUZjGmc22rl0nS7hFM=\",\"Lp+FtGQV2rU9LBggIm1OcRfmzJa33f+p9qlsxpclYlU=\",\"F/zE1knOJpa7DgBGAXK85F5d64xXkE5coNBWyd8+Upc=\",\"LJcbYw+aS8p6lQFZ/0QRV4uznu3ujZ8BcbYe9/67/0o=\",\"CbUmvuorMsk8kgXOM8bdeYJO4BI+DugwmBRDIpmpdWw=\",\"DIMRwv4azOhyISvHMWQTL4/IkDm0spcJDvB+GZdwQnk=\",\"LqTUgWHBOt1LHcg7NmbvOIraejU/PaTIBT76/dF0K8s=\",\"BEfPsoHdleW896GVvFLgjXiu2eZMydeXOHPQakK4lko=\",\"KCjZ0gtBS4AKAor6XmHsQ2KtoBy9ZvOk4Bj5Qantwic=\",\"Dzfe4qjcdujMy8/FJ82MM4MDLh8/UGXjnSqnC4/td1o=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"KrFm8oz9vPwy5R/B25JktSfkDGljV8vfpr+Qvwn7l/w=\",\"LhVnhc7xe32ULO2OLuFc5LviunPA5VvVDriYob7c88A=\",\"DUZBJR1xt4EggVbKNoDWpWdvdJt1iNXbBGTHarmFpDo=\",\"DOXPdD1yHwQN7EBgYUT1vMiwaNK7sRw2I+tCOxAw4Uc=\",\"FeNYUjgaUgIb+syv95neV9jchgbyRl6HXH+eIqMYO6Y=\",\"B+m04IITIK+7sj++OiAnGS8uyJH95gL69EbQazp3DAQ=\",\"C3Q9cNy1imrMcINaAFx842aHb+Pv5QSQmwy4euzhcPY=\",\"EGQ/fWGBqLXfHpIesahBR2qTf8akcxhdgyLJoYxIej4=\",\"KSjffJTef/ijdwmA8PvjzE5PWQhTfEC551JHvDHmWFw=\",\"Fo1E9j5YpccTw34Gdwm8Npwn9CivXrPqp51EW50HMxg=\",\"K4hFqWhC+WU0OpTnbvohe4O8Hr6ATHsl6LO1jdFl55w=\",\"H0T7AvOH0s4U3RSc0k+0EafHOBV3FdahvmbsAo/AG9s=\",\"IXtar5iTrkEDD2xk7mhwvJlUJ8geBKJl4XdEAaVBKlM=\",\"BFoeIc0eDlspbMbgLiSabNDu8/ZIcpLw8cdC3nEqSk0=\",\"GQHRYHB6jt+7fUUzkUubi7BvVlsaus539/dh6zPznlw=\",\"An3umbgDdPPGZaTcXImo42WlqT0H5Rxyfd1qiWx++Kc=\",\"CxxwWKvDyk8WM9ZMDdXwaNf9wQ+W48poLRsq5uKJqvY=\",\"HEldZgrabDL6LxB6gRcw2Z7AHZoX3KcAHmWfuEVLmhw=\",\"EAiF9XZd4XM6kYU89mhWO4jJw2AFy1TK5hqCtrtlFgw=\",\"IzVEY20C8WG/5brm5odVjOzuNIcCNdNsrORMbTcvBUU=\",\"IioYCoaKWJE32Ucnbjy6p0ylBS5oXgLBePZHZ6TmZEY=\",\"IrG4lRS2pZfBMx4k7D9OMjKCGnMwpSVinU1+BJUP3NA=\",\"Ip/RY+oa6ARGh314JyznxQuKusj8WRuiXCJmHLHh1aI=\",\"Be+0XmFGa7uJ0IHfvMi9OYu+zTJNWVDWUVG4DBAqBQM=\",\"DN8kZbkt0EuWjqhBm+dGaw6jeF+98adVDcW5nngYU6M=\",\"Ksvpnut8OhZzdsZM4o4QsWKMw/f0gOaNumi9Rw8p/8Y=\",\"IcFzZHJJ51x8jLHQl9otTM2hAxzLi+Wh0sPTkv3qW9I=\",\"QmwAVOGZ+JzN0mlA87bo4wu3RIhtWuZnfOdfCryxog==\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"AmZKmVAdn8x6/r6CdztOqIJF1THVmnoHCFIsQ3osY8g=\",\"HcNaqK5MlfShfUSnkBV7fycEW/6pdO9YGKKtVXrk0as=\",\"D9rmhpRlJA16YoBhavyD6TfMWCHYze+K6aCFOVqnCMs=\",\"AXgrAZqt1FTVCRSeJluEdEZ8GsIZrwWlO49nGj0cerg=\",\"DlQ9AxvBdIhSozPy4DHLyznVcV6GN/+hjxjWIN47HKI=\",\"EEmTupytEVx5pYMg+wEjP7ASSnPgQFgcZiFCnPL9ji8=\",\"KuwqoQJUIn5eDO8Z3Ekf+uhWvVqbAp2Sa2DN7jii4wo=\",\"FDlWUwg0CO3OYO308yMqlhTHgc/X9v0YPuIuCOnUba8=\",\"LiAHBOSRQrtosg2fffBAob0yEYsh1E903KKzGBhpMBI=\",\"J5d3j47S6a8/x57BbySLYgnAMDan8NUGYje++6sW4Rw=\",\"JeDkA7+7sxvoxTYAB6qfLjak3EtbKwgj+MvUNJlwujU=\",\"LoQjverQs+4VFuxsXIFsfqMASkWgRDGSQnu8RBUlF3E=\",\"KjQBXSEURlL3IvFBOFugUQzTjaiGvA3zQ1LueudqB74=\",\"Kj/uZS3O3JWgtEoHKqpU9RVbA2siu69+rwucPN5C9Mw=\",\"E1aS1HxaDU3wN5SaVPxy8jAxT+ding3XmHtiDGZUNQU=\",\"FCCTxyjqNu3whE3l48S08eG0S3KkE7eyp1i1vkHI1hY=\",\"KgtFmrP2NlZ/4PEzDssVRT9ippk7dI7at5rYzdDVNbQ=\",\"AzCwpCgjVSLh1eRyi4gtVqgs/akEUquRhxJ85zZYqfI=\",\"LESyKuFboPInYwBOj88K9sYCoMutxn7/cKdAALZwF/k=\",\"AcaMBNyl9yqrYbe2AhninRGDyNHeXHyMCUYHOLa/l2A=\",\"HHSveMoESFMbdzonxHgAys5/huaOSWnSmooS8bnVkzA=\",\"FOLr/b+cdulpEaI6n5xwdrODFjk/4RoKdJLmBex6nEI=\",\"EZqF1ASLdsVvY2rPzn2ucXWYKNcR3Wso7Q6aI25Nj7M=\",\"Dem+eOLjw0Sgt2oXG4184aHQXyV5CiRREC4FqRRyvzU=\",\"HpHNJfEvLzz/wkkHc/ivcH/hpoQ6dmo8ROtbj8E0sAI=\",\"IJVsg7JLorsAhqkfWX0KkC8tdOUyFrvZWS01xDhkgGE=\",\"DHFtebG/qdAW/nVSLXcUAPzXWGITMEapsQEVQNIzHoc=\",\"LE8+YdWKq508EKvEZW/qST+z1jdHCM2y4ISmfi+26mo=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"FXYjk+6zNRZ1mcEwtLbSL8PwU9u692NfOXAWg/lkLf4=\",\"DXV5NhOJtd7AxYF+V91bd1xI+sursVHrD34tpa4Z0Vg=\",\"JlueuC75u2/i9wzPUWvua5vkARg/CTJ4SkCmEYb0ekI=\",\"CtfcjZ0LKK4wRrjyPDp8thQJDgWjyew/6OL6s2ffInI=\",\"Kj+Hg517PgUo57nCITeSAzVDBONjaE449fvraYvLGfc=\",\"KDTiENIRrrOVrgUZj3ocR1vhyw2JqMCHfY6IqdYvxeo=\",\"CM9q8PjHAX8N4c9uppRwCcEEEWnVtXxJk4pqTIY9678=\",\"D5sBFckJfzYND7YksUyLShzv+FciChgdpMMvYZsWS+0=\",\"EJAtF9uYIylM67hwb0TodS5aOr/YIYrCdxikwPyKRYw=\",\"L/wX7piEjYeO1DFePOAHZntPGL1DmT5Nlp6cs42NEY8=\",\"D4ePCk32clX4hCP/tScBRlZRXq6i6cw2vpw3E1BB/Zg=\",\"Bd0+ZmcBdM28dkzgcRxY9CfcUDx5jikUCCAFPadpTSY=\",\"LeSezbARBBUZQ6ziBe3MgauRqe8q9MM+4qotCLrWwCM=\",\"LLmjKExxilZtfbMJqgzm+OYdumSiJfdGt1fvLq8LkxE=\",\"HRyVk9DE6k7ZpJHcc4IZac7ThhRc/4CDZLw3M1zPWmk=\",\"I6KTca13YNXF3krlAkpGEnQ/p3sJ61Zsn0HSFslVKFQ=\",\"DuMMDKKSw9u83CRx91ADZTGwy4XrhGTT+SRmAIq5Qkc=\",\"Fyfw0YtCIBD5cFj/XorCP8hQlRd0tDGjj2Ch2bVWAXU=\",\"KsVFe8I2+JRTZbgoGD+CZuPRtbPcLZylL+us3N4Rtxs=\",\"Fm0p6tIlXjVsohcJabe5uUu9iLs0rX5WY/TTolozDuc=\",\"Ljhs2+5GGZtIKZvNDMjsSG9sbKrbCHtS6oblHU855zY=\",\"B5N7v1bvdHv8FUPmz1xlNDToWiJfCRmc4RdH2l1EpTA=\",\"CunZhSCYOQtKW5oHXTICCl1h0KKgX8YDdAiEDUO9BPo=\",\"EYG14An05Rqih+ET7TvlgSRWAeonzks1IZxzFwh1aPM=\",\"AkdaBgUtskli2Gv+gE2z9lIFmE5ZZsGoaVNR3sSHthE=\",\"HpUwqAiKPCQbLlztQVeUlWWqkEJeyLSU3vFVWB1uENQ=\",\"DJw73XLDRC0Sc0wPO88r0bxnnPj6yRJ6v7MW+8rlMgI=\",\"L8pg8QksTUgWSi4sgf4TTLS+pVX0Vp4JU4nhgaTOtew=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"ERVhThniELWbSw5wgTDdhFvlvuEaoc5DmEzLmb6zYkw=\",\"JmQ6LqddEDqHtQyhaQpVEXNAqz9P545j+BGH9Yo5I4I=\",\"BpnOPbnViCwEcWzXS8ScK81c+jQDmFbSesc1S2CrhBI=\",\"FH44I1TNG9MLszg+/wP4mXSwNaAIl/idlUXPUB7PskM=\",\"B25oNwzrVcypdXdlsMLv8eBUJv07Hurk3ivZ9JwSFwA=\",\"CAZEg7HuNzP2tuna5Hp97fe6qbZ/+Ecc7SU5X6OM2IQ=\",\"JiJdtNeGDoaaAPVPoQkjyAQc8xPrkSMYqvj0+JdAH0Q=\",\"FbpBzk5OCzxmM6qDGA2rUioosliH946Ky2G2z8b4N9s=\",\"Kb+WkqH4yQm/HQ+sSgTeOATonD/MKwgc0l1EsK//ewk=\",\"KYOLOAtD/aKeS4gkIpp2KRgIwqnEhkuo5Vd/2sdaheY=\",\"Fl6Bv50bW4ntc5uZyExT3D/KBw6DqBjVu/7tN2MKC0g=\",\"EKcBMSd0IFcgHkLsvIMJm0mmCvI2X4v3zEA6MJXtP6c=\",\"IjdZ/9EqOePjhMdoAlRMN3jxQUnQEjwSgPu5LtVW2f8=\",\"Bwcpa8Xcc7cJRM+gfyHHcEJ1OkeVQNuD2RFfn+nuPlk=\",\"IF9daa+fS7ZsUfu9mezXEIx2JA+X91ihfmD0a9zvhtA=\",\"EhDdL0xHmS9NXHFQ8b2TRoYARlNL7JvLs6l3gC/pA34=\",\"FEzPGuuLeN6UN6qC96gv/LlYUpzFHdWig2Nf/AsKbIo=\",\"D5lrkRx8ZQ68v0ut554QQR49SrDi7AH86HkoxMD3foA=\",\"G0ahsO0ECAywaP3/blMbAsAC/D1ms+0tZWE3ABt5Jq8=\",\"GfzlPtrfnUy16uhv2LHGjCOK70alyjNgM2e43gknsvE=\",\"JrCIVnL2SU37Ru1CpAEXbyovQnkHJfFK2u6Oljiphuo=\",\"LbYggSR3uNczKXk3xSrgEHb1ko7At0iOhV38W5OLgKI=\",\"INMP4P9PV6PMbmMwGC8j/dcsJKrwpbNyoyoZ6ApjgRI=\",\"Kl49e5gTqnoMvSuhxCXYDoHhLeQGC5C6fq+DLwDzTS4=\",\"Cri22avJz3feR/NtrsOdsPfjx6MdtjGsbr+lAaSz+U8=\",\"FshDjC/4nBni+c3OFNw4CooxwfZdBZ4jkx9puSHltNw=\",\"E9Nv+yWRS/8KnBtJDbGPyP16L/n6O2c6osyypkU5x+c=\",\"KLjub37h2NDT6+Jr9CRujrVFFIyobmDL0L/fTpsiZg0=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"EN0yG3oRoryWs/Rxm0tEPZTlqi3b9CjTLoY9e5VqoIU=\",\"Bfxri3QOVfXQaQt+IwnzEtCJxFVfBXFypiFINUYKNC8=\",\"KVHvLHc4C64pek+8BeqX3lYu09gKqKmGNZw/8AvK0Qs=\",\"K3x2e0QMoN24ituGr1MjGBmtbCHCIrCaj8j51hEIJ20=\",\"DkTRIvkcQNlHCvw+SE7I+P5q0P0kFG8dONcX2k23Zzw=\",\"G6R64wPC52hU1/OZx09I36qjKHwHubeb8f0I+dpwPEo=\",\"EbQl2AAIEOklhn96mFCqeZqiM4GFtvl+u+t7SBpS/uo=\",\"J6vFkf38QVLO4l9PttCh6TKjlrcsMRwFqZqfkjsfcBQ=\",\"KnKUpz2hegKCmWHwzVs0xnyQmsw4dKI4Y3+1cNTCMEY=\",\"CLMl40awmh7vi+f8PYGGcTXofumVjxbat1m/ujSwra0=\",\"HYv97SWOCF/SyHGp2wyjjOXl0jLShZyePah4KQV/8jI=\",\"EDIbfVRmvh6Sp7jxehaje6uimH7Vc5n6kDtThdgbGb0=\",\"E4UpmvFK187+kO29ZW1yEm4OkHgxcwaYTyAamOPof/Y=\",\"Gz+GNGC9dD2kLrM+R9LP/9mhhV6f5XFnR5jTsNKqqMM=\",\"FvZfJNQCE+hkUsskLiCiIti9onQlG0+9gtwRCtePEQE=\",\"AnGq5HgpidrRn4QRfOBGalLhZVE4a0KnRVLbDG4ARC8=\",\"KROx32LeFAUkGCnr1rvycZUQz94tN0wXHysKOVa+rLc=\",\"ECEIv0pz7Jq87WUuxRyhL7BuSLXfBJueNxAs4Kd7ZX0=\",\"IGYD0CLMhgj4B6znwOwx2d2YwgK+bRvEek1E31S7SPo=\",\"KMTo5O8QcQ0ely7mpKL4iqCKDW+713y9BXzoOra3W88=\",\"FDF2nxlVKwV5yaI+kenwF8zveE6vC1LzOBm/1yrpj0I=\",\"AgxCSQqMoH2fObEecguDPMwDPh7RajENUyIod7BjAzY=\",\"J+m2o2K/vlPun+BxQQyoBKm7/S0uV5uVpQ1joWyYjaA=\",\"LpN7dPsX1jyQ0ywSWMHLQQj14/giRv1wTUQjNlOquGA=\",\"CxtpdMUG14rMy14bbJpVg+nJIhUuwNETSV3EmxSmHI0=\",\"GFVMzpl97bldJ78TXIvd07DIqtBVGm83K7pRYTwDNaw=\",\"EyBp7KyfJEpeRHocwZqZgHOux4DoI2yCema/n8bM+KU=\",\"F9QBhalFj8a5iUitfad/A1/Xo2GCM6Q68NDlEeX6N7E=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"J10otSBDh0JBo/vynw/IclNGkpyzeKfk6ejHqKwcQSg=\",\"Fo65nIbXBcKJsAIn10goM56Izajqcm09msu1eudQQ7E=\",\"KnYpRVMiC1uiq632vEKpAmQTEvC8GVMoawi6Fq5l9DU=\",\"BPVSIu7AGplsnExwwR9jdXFMYB4VR81H8d7gs5mb5Mo=\",\"Jq/hRaXJ0Fj9JaZATkrLYssT0pnegfrB3rNf+fSkDDM=\",\"LNXINuF17XqQL+IzTyOdSZ9RtY23O78rEYDP5MTfeTY=\",\"KbekkRu2eim9c2jA9CB5rtofwNRS77KxKbCtk/7ALrE=\",\"JY0JpH3/oq+KHdczyLCPY5Ed/4eKL9tHlOMZ1Gpj338=\",\"IuJkP+RRkzif15gb8ZGCZyTV/x8KaGUcHJjvAtgfGwo=\",\"7LEhPI3ybeqkDY9sTwodTjxy2j38H0Nw3n2tfjJhjQ==\",\"FLoJwJVt3f50EBknEiOGWLTWVQbHjjGK52nScyxjrd4=\",\"Lc0oww9Ewu59gSGstjjeurRtD+7k3OYNSUrLZ3E0pg8=\",\"EXxpWXKdHXdM4aj+H6KCUVkvO9YvhiU5Ke5FypWeS3k=\",\"LCkMvX12/J+c3PxHtI/WarVdILfi9zNX5oMZNnx/rgg=\",\"H0DLXFOraIwln8OivbQBEVMw87KFCVWjl2Q3Tl8rUZU=\",\"KlihnOF0SiQR/eZAGm8z2Jn5+pxZ62N1Uw9FvYp1Ezk=\",\"DfbOfhu1xB02bW19VwfGPrOulHgEP+Fn9xJ1igW0kgY=\",\"AqMvCMAV49uh1xk7MTYuqIFWs3D8zxXEirtxM3R4M64=\",\"DlSbjxJ+fueo5n+dxTT8jjpicFm0BjecY9hqVKWT2G0=\",\"Kta1F8ujmhbKpvz9U9O4pDdY42DHA67YaR1yGlI6wXQ=\",\"4ADoLpO2nXK4OFiFRkyxUxx01iVfHBFWU5yJ38hAkQ==\",\"JLV9HkySC+K5XA/IqE9dVgPwwoboDXFmnWAEm5R3BBk=\",\"JMZfDirW5hTqmlOwWGUUWflmFSJ1r9PNaSSh6ZDn0gE=\",\"HQrowwM1d+pLHy3UtouDYgof/LTVQm6WA9TM/Lbx+2Y=\",\"EsgYU2GdcPc3VErd8zuNEErxPuMR7VIt8TG/JNg9rIU=\",\"BQ/vtCKdD7tYdWxJsowK0P7pM4ofsjn42O8S4WiqFi8=\",\"HcSogVObA8obVJOllL4U69y2C8srTRtYho06ZVhBAXM=\",\"Hn5fV010YzoGHKdz6Wnc6DrXWOTQjDfjkA9ixfm4BcU=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"LQMNSY3SLl+bN2GwGfgSwt8ALrvb5dqS84vh/xzZfmU=\",\"In9uGykq7v2u7+6qLnryH80BKnlMosGNKEZhyw+x3K8=\",\"CamRdYvo24RcpLSI39EeJ/DHc8iMJQetWE3XPrFwk1g=\",\"BbPAjLBtI87fLNTFzSSFFKibCf9w/1b5AiFJIIFIBwU=\",\"IH5g29u77x8xYZi3nk3z5ojDxxuPguBIB2PPcptrugM=\",\"HZSqPU6YxpGz76rnKuGNUNkK5WYp6wDnvDJOsjYtJ+Q=\",\"L5n0YC2KdhLFc8PtIjLro/kfAw+LXC3G3j2Kpgu6KGk=\",\"GFp/sCe0D478/LveAsvhVWfWSuasm/IGeBcDwH1icuo=\",\"Drhf+n7l6fqWrkaXylJ+57v7abXfYRoba3FaMPm2m0Q=\",\"DmUHzGE8CRw/bVY7JLi3jXgmLX5qRw/9mKHKbNDaXvE=\",\"D+sob6CV5N7NxJ6j9X2nmbKBh0aDf1kZQeZ6k/K9zb8=\",\"AVfeUcM5eF+r9OpYS1XhWEhbzn3VIcCiUWAkeoTRPms=\",\"EYs5oyOmq1Q/AF8myJxnNIAgShg6H2jgEA1r5NVd8lQ=\",\"IA8NkGXnm/KeNfqc4U8NhwOOQ+wcHC1Pq8ygA+Ly1yQ=\",\"JxttvXu7+dmKnFyIFMWJI67W5KMde8+NcjVh9RFt+Z8=\",\"IllNo17dwYUNx1dkm1PBJkA6kHxhE/OelA42O9KDBQk=\",\"Caaj4Tpq7Q+3CXhv/Ip9VgZCpZ8s7i3Gh4ETBAdFWoE=\",\"DV3puUkXrd2LjryO+s5P3ARDgKJ0RuXQFwxKqWW45Io=\",\"G6T3TX2/RPlnBgxhnkKUhSVMiqBqwIu4+xAaTIiBHK0=\",\"K9OTrAxmAvY+8Tg1o2AfbE+E8JzUfO3wKrCpLw9Z6BM=\",\"EyzYpiWRD3+nqZnQM4AQglw1Nlk4XqEKQZJV28CjRW0=\",\"K8nlrVl8j3c6esLf4hwWqdVJOh4xnclC5jUGesaSR1Q=\",\"Ia8q30i5XMZ38lXUSuo9ETIRV4LOoIu4KlJjZrev/Lw=\",\"G6qJmvOmD4gzYqobiOoXd44ljT3vpE/sGz9PnBO4kM0=\",\"EINnP4nPH/4YtB08twhCcDY8UZ72oWSEIg4wIJ+D2XY=\",\"BaW+cYJJfFwuyekbGkr4hwPLAep+fY3MU11ypgYR8nE=\",\"D/bwdqY+342H9wtgrA1k8xHrF3HZYbazOGemN4GBCIo=\",\"CrgQ8+Hc4I1eUonY0yo6sg6+VqHj9s/sgYRigEsKrTc=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"A2M59wlCW0S0tBWEedoLARwaZ/yO22grCkQ3YHuaq3Q=\",\"JfSTQNpTcAQEsg5ZJDtOUVi4otwkrLjwclBBSUgdyNo=\",\"FLB20s6PTLjYMj7I10OUenyPyW8UnA3Ep02IOTnWILI=\",\"BKb91cBhaCaN25iGtbnSPxRu4YKhVeF10XsH3c59+Pk=\",\"CIaMu4Z9uJ3HiV48LAZGbgzQk27KfjWrX7j2P3pHIqw=\",\"E2ObLiT5QYd5EblLuaAlb0gAIQl8L41xPAiMYo2P5h0=\",\"JIdpTa6jftn2YYW2ulcAq9kUTBje8vuHrzpPzFuKa14=\",\"Bi25sXnBZ3v2zRfpurTLvBehE8c8E33GZkv0k49yM1I=\",\"JdfYl9kqD6+so4JAKhA0sg/95bcJ1gkqrQ6J7kP0j94=\",\"C8iDt1JV4Oe2IJThyiqmXLKi3HxLMCM/bgVyV7Ja3Mg=\",\"HpArQus3/+EIZVJgmR1PKNKGWF1unBcrbYe+jgjszzE=\",\"BBo7JUoshEbY6ZopLiS8GFjrPY/IQbx+GrA91fHEDrs=\",\"IfS51gzF7BO46H0RayfYlia8dsDo/0yq1fgl8Vj+7/8=\",\"JGvkGAe9/ZC3ywZiAcszIDz9VX0hjMqcz+FFGob0slg=\",\"E3YPg07Q5SIRttmzYIDa/gecMMJ5d37Zkogu3p/czzw=\",\"JOdf6bH3VDbEZbIvsFIKwa/izSbgote2R2o8l0Dhrag=\",\"IQqaSyseA91f0nC4MD97+esmiER2H2dHM3LNZlsfMZs=\",\"EzxXK8hO2ad7ZlEWK9qQYg8AT2Gu9GdnH/gBnKbAm+0=\",\"G8NWQe0rhFqU6TuyuJiJ0LnTM41FUD8h8f6bDAk5Tqw=\",\"HuHLY/+Z8kDLHV8RwKv0GNaWoLc1YK/ZMCpRGXUNrr0=\",\"JeWEDCq61Lk37c/B71SJTZVWd0sekh0aQ3J4+MM4YiI=\",\"E3ysfqGPF4Woa3aXhc+m2RmvJ7d9fhzwfLQHAnXJE4Q=\",\"LjllLCUcsuaokWa+iA4QIZlv/FXd5LgjzKPDBaGDZ5Q=\",\"A+xYyv4nCqeCRVHBlIkRoEEqSYXXn+7wMkvWOWDGmVs=\",\"KTuUfh5oYL2BRCssKm+zrlk3XRL4V7W4Fh4PS/tDDvQ=\",\"Jye659UE8hgeGRC7fu40nq6wSA0hT6/QGWYu3AZ6EpA=\",\"G+LxpVkzeNb8FQXlnEwo/7bN9YWaXi4btbSaNgUfd7E=\",\"Cx49Sg1uO91BHB+N1PJVOuhFRLhKV7Hwn73SZnDUsAc=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"AfEJkYFzegmmaxNjEDCYK/Q4v4TTcVoL7Ty+vsqsrEQ=\",\"JJp6CzoBWgT8CKLGy8d4erocyYPJSj1QdPWE7f6yQWs=\",\"I3us4sBpdsU2tW+1rN0qxR+yvowgSDSwERBvA+s6KX0=\",\"INg8UcueKh+woPp/MsacyojmrySHjyH61iLjZKa+bBo=\",\"DmXfVhindMiZ0Z5qbY8KrUoQw0exKsH8v+33qfF+0J0=\",\"FqtRBC0sBW2lO77ayjF/t1Q4Rv5vsUcnm1hy7ueCHlQ=\",\"Li2LVw2pMpvfAvX+sB8rbjL7eVYxxr4p4DocDOMcYpo=\",\"JNH9SZ57uAyy0Mof0JA5vEz1GP9DcleWvCtI0jfILng=\",\"BqlrfZmyt6blfLs1UhfsuGN7w9Te0eBGeDptX2Nok5I=\",\"GaFD8cX/UZHZmm8UTYY17k5IM7C4CoZDSklKapcnMjk=\",\"DU5gyshpTOGHhflMXC8Y3dXuo8uKcKtLw+Uzs7qgxnQ=\",\"MGLEza9D55Deo4fluxuxahZ/MOZE5UEfklIELVFrjww=\",\"GzeKJdDNhh+8lJGDaqnB/BaUVsICezSsG2Gm1wkPrtk=\",\"IcwbT4cysqcztCcYtqSEKd83lxEgjeqmWn7qSvHMfTA=\",\"IRXheG7JD6Nz7hqPUHaHArO4nkwKzv8TisSHND1wd5I=\",\"Fc6LnI6VCxKS7h+A1+Jx08C3FMHeNLdgY2JNAKaGo5o=\",\"HQ6RfgWOtsuO4y6dpCC9Y5n4sil4dthNmX7PirOw0VY=\",\"JNmx0xzW6xnAxjUTpsP7BKQwM5aGlulUQx0A8Si9Y0k=\",\"Hk2uVRvKYA2sxY/TfKxQvycTBS4qSTXWRHH1hVCPDZs=\",\"EbHMYpchztSMNJRZWGPe494VmMEaaBQSBiYQrIWXNd8=\",\"Ju9QMauWsCsA31EnUscWXjaPQGhXR48Y1yMLbkocgNw=\",\"DYN3X6/aeVcYyp1Hd9ebnENUpzu6aBPEFbO5cPusbmI=\",\"IL4s2bfW2r1NsN/4mRGYerBHndnBwIH6ZLl/uXyNMUM=\",\"JVvNXCFao7tb2eBfS65KaOFS4xGP0JNo+rn+aeIxSdI=\",\"GUfXWuRRCOeobQ4+A0u68nt/5xhFHjpcIG3VoSKpF/g=\",\"F69/FveMe1FxcUJPxPR7qIzxXEIku9E6+zv7Bd+W2J4=\",\"D3Nu1lMvC5DTC83OybBdHFkHDxBSVefWD40xeOdTxcQ=\",\"Ij7+YXE6jVDE2PAP9pxF6l8n3vzg8Iqbx056gghLx4g=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"E6DVL6mMzlzUO8tKriA43jWnh/htN1sBnXJ5oTXOcQ0=\",\"BX076zVIzHZQ8Q8pP8LTkyJ9+3JCLokHLdi5BGa7V8g=\",\"GmUzpl52StsWN4ChjfLn8CM77w7rYnaJXHakdJmK+3k=\",\"GROnHA5vjIf0M+1uwLvi5zl1RMDb7XGZxfS37c6wank=\",\"ImaJH6XlbQJA7phxrXEHwNdAOY+MyRZaGwnhCit0DBc=\",\"D1ZSVnr+MPTV6TTZhSvO5+oKj8FCtIItI0CFMCISj9A=\",\"Bbvw+J9a5vVxPBi1erKZer2LyMD84I4gR//uf/Tou2E=\",\"GnvM4NY7WAtneZV9Vvmr/lqo7B/mEOlSxCWQkQRtQg==\",\"K3dYJxcGmMNwx/wXBs2VuPbHdQ8zisD83pHr5Aytnbs=\",\"G5yX9XyEtfeANz7q/s16TsPgZSGXhScoIGctWemFUm4=\",\"HIm5cIBk2FWPE2HGrLptc+7NBsTkoVerzc4nMcvqPpU=\",\"CaIt0BzL8+btLefXThb1jt63SIQ7GdDN6HVr3zDn8iI=\",\"JngnTeycIYDU9bXgfPtCwkia+kZzxh8JGl3QCrDmAY4=\",\"FACvDHd/2ZNLn6XR+rNXYWTvmzGmyL5Z9yy/7kRqoUg=\",\"K7LTIMbxX8gNfHj9gRDnFUA98AFUsdJ1/mQiqujWjMg=\",\"CRK0i4xTCDi+NRLOyNTCEHJuF9ZgsqcmvbRPaGBSMAs=\",\"D85TftrAXKiwO2tHLb4YE7/KM8BfoazcaVxukdYFKcc=\",\"G+TkiIoJLtFpEWDkOBzPqJlyN+eMvX7N+MEgZqScGeg=\",\"KL0wOuu9rYoU7ihBAqwqxeI2gCh9jDWHpxzGHM1sW5A=\",\"EQt5wL+PUogcJPTnWYxfWzARJnWiZVqxg75Uxp+Khfc=\",\"LRexEDErW40jPc40cCaSA3drR7hdFD4fRdWcFoXM8nI=\",\"3/YJNzvE7tdJtAHfHnlIzoyAhPTIFoRMKep6B83zIA==\",\"IURVR7ZYRie2D/E2Qwi21tHQhhXeY6XC/x7H93ZDBOY=\",\"GtJgbjh3cJWTaZ8koCh+K+VKK6dPNVHdsTMsfO2tDTA=\",\"EMaVJ2+dZXinvVw1HByrmv/er5q+39uscv+sBXtn1/o=\",\"EA+CCo+qC8EWW4oW9kq5uqh/x+lO4j9aFhJaccsGuDg=\",\"B79/H682D2XN8U+p/ziyYZthbykTt0A6T+BDHsFaV+c=\",\"B7leeH40x2IV29PhxUjlZGvzoGHQh61kd8+WKjz3Pa0=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"Lsev2pM4NzDJBDkTxrhmwgpRIggad0T21qMXsBF3r/s=\",\"Ds7tKmYC0pGqsQZCVMcP1BE6CbvzUn9gP2fwEzaRXTU=\",\"KEs3sv0sTduyvN0FelZoDUa31p+sY7gMmR8U2xq1s0U=\",\"EN27QXOwQBBPEv+1/Mh79nMOoMiu6I+eLADqoaQjGAQ=\",\"C4fSwNq5/x7JYBfoxDu1KBJm/JIjE3XnjwI1Q1XrDHQ=\",\"JVw1DLJtSdQWUvmif41sIjuHVvh5fAyWCq82/pG0yRA=\",\"Av+3jAvqJTTWfAsGH07LnP9c3Au7m6BWezW1Q0MpziQ=\",\"Fq7JcNDxcawvcYPWfJac5pzx9Nxzs446ctitutNnrJI=\",\"LnTJLEEuLWlD37eUbID1+proclX827mMQ3tl+X/sgbQ=\",\"C9sfvIuB9Xz2clyVu5Qou+0EbVVd3brrArP7m6p1D+Y=\",\"B78VCFk2iUwj3kInHKEC1VSkW1SugPoMfm16qccstlo=\",\"EuGLlW9ofhxD9Qplccru6L3o19qa1eXif/rTD4M+rjY=\",\"LEW2Wc05WIB4jlIVmXt3dhxGVV/whPJKDSjaz+7PXIQ=\",\"KAXWw78N6apcfDVJRwIO+pSJmV6LqsIz3fBOjqi6kCs=\",\"GBh8MwtC2/iezAQ18Nd6fOwo0lb2UEfUo+GsiqbLGZs=\",\"L++No4t5WerLfsYVVIiDZkFlXBG4uryPEucVr/8RXU8=\",\"CIARZzhkymd4u5fVHrHylitp0HpJa2t7NwzsIXxgGug=\",\"D26D88VdX7i2tsieF2paT4GjoKy6cRPr7mYbQRYTQ48=\",\"LVm+KuwO+8Z/WdoVbZNDE+i+IFwUYGmfDnDn/l7P68w=\",\"KqBUQmPhJagtnKG+6m2c8itAr8cVW8sPHIsawjok9sQ=\",\"B+OpLJ68FJp01BgP/cMOise9ZZjXi7jzUwQD/NmxIiE=\",\"GCe/nxHUBhxQaVQDkJPmbmAEGyyWuPfh5OVQWC0eoTo=\",\"LhR8juRqRfDsxk3oZH6DOx7HCCabN/TimxfJG5urgoA=\",\"AxF/THHcKY6nzcU9xV8KFVQaNpaRYik0QWAmuxpluP4=\",\"Ei/v76Zpv1G1RN5cCso4dTyPMkGbLs46l/AjLlI/TLM=\",\"GOjlhDHm3SKbiPFC+c3/EpiDu1TtughUspqK3RU1TZc=\",\"EuC0eH7cn507EngYOfPt+nFazLPlJ7tmuwjTVbh6+ik=\",\"JIkoK9sEbUkietvwxE/dOr8LsuyyGiiGM2VUOJ1FLC0=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"Hi+newkKXC5fHTfiW6fQZZa/o7VGNiEDpP8Zu6z36bs=\",\"AWKhJ205fuqjzW7oBHh4ja0mULFDO1WweRnZZqG4fOg=\",\"Am6y+suDpamN1AWg5qlHNaTATBmthHxT+/BHcy6xFPw=\",\"K3SW70418R9znbm9af+/xBagxFUS4x+GFBZBu6BPNnU=\",\"JnkqN18cojFbdtF7PyvD1qPtw8VPiuaCFxFDqR5I8JE=\",\"C/8nZZF3apl6y1mleYRlJfj+djTWbJR39UBrBZhed2k=\",\"IOmvDCG1ytfIflVMmAUuulYUWPj2tlNMShoNBxNoGGY=\",\"H14nDXvjlsE6TynNtYx+TyZ0I84tJCyTBJ7epLn7TKc=\",\"Jv98HPJTEL1x5Z0XXDw6DwaKVMhJPEAaO2cDCSK1p1c=\",\"Enb96xlXAqaoVUZc3VuAf2hc43cTK2JbPxpek0Y25Z4=\",\"D7cqTZk/E5uqDvL7IpzaMtt83g8QyQMf8vnOPyuINJE=\",\"FaUpSLsu4YTL/Z0rQZg26Fny05KRZUwIImGooZhqrGw=\",\"Gp1BBvWjDEWagHadsTWepKP6DkLLMupP8DybgA3YvsI=\",\"HZJQ4+SfC1gpzgbYd3A+4MjppRtRbwnffaw0ENantdg=\",\"JST6tSbGkNJkiI3yBzl74QomJrcel9vGbRko41i9JD0=\",\"BQj4INOjy14NMLSpcSqZ7dy9OtrCsTAfEj4VVul10w4=\",\"LvZdV+cLB/0KIpOM8QZeOsOZbfd+DBANNU7rsiTcRJo=\",\"JrkU9SmvGn4xr6UzTmA3RHS5mK4Y6Z798Z5Ast7dSfs=\",\"AVWDdYTb28I5YuAPpaYRXBDu52aB8lxRKAobsoQthIg=\",\"Ii5yS3gKRjd7d/2Dr3C1PLOaHd3MsOrnDk1d1t3tjaY=\",\"DQUL0VV4/kEXWtHnWorQsn/olD2JTd10rtS0Y7fwJ5A=\",\"BcXwAyF4Kz0vpv3LZ/pj0aAKn2PTX07LCEgatTWQfUY=\",\"IHoMNwEp+VPhWDbo+R1/veNFU/lNa4mehkXJbxcx8Jg=\",\"D4dazHSbCr+4bzusnoqOVr6bm1XqiBXRm+4GkVDSf9I=\",\"A4pw3RaBlnMf3e80FjHhapdEdVP5JNbCBNRA393Asfo=\",\"FQK4o0Ecc5FBQVb8ZA6KUaEXGtB1hr1t4r4uOPxkhqg=\",\"eYSQj4kxuTjhbJbaw7WNFRxN0KktZxzamOFpU8K39g==\",\"BpTZalMf6eNpQns0V7vtJl3gOSTMsDMdS8RFxCYMVR4=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"F+/EeHMN34KoVAzIPEdwY2lZ8bDYz0OLI59g34FtdRk=\",\"BtbQZCPWZWLvnK7wdz8/29ztcPq0ew3nh2t7/BIW33w=\",\"x1CxTN/ez3OUxgOTOc1GWooBAnLBv/jJGQ/+PwAY1w==\",\"FQANSNhccZto24ye1+aM1IFDfGU85ke7fJZe+fwcB+o=\",\"GxivPVPaIBmJVyiNympWe3mGZrwUwT3sRkKRAOAflN8=\",\"FuEp3GfVwIx5xv2vON7xuQ9iV84AF0iLQu0tRr3sBNI=\",\"AclY6au6HsM1I+dW6L4eD6yQzx7TFLN9Iae008hOV0w=\",\"CkSHtMBG0Og223KdIUoraZUUa1J+pC2fGxAI0yGkx8A=\",\"AWmyyTrOsRguWMlCBOKFOArxNHbIa2xqs8OmXBX6IcQ=\",\"B5e8LAuOCKTt3q0FcoOMI30Ngl4ja3Je+IJpsO6k0os=\",\"IXmInciNUJbuaRTAPzR7nZ58XNjIuZMLX6/6xpR4tvg=\",\"EFfZn06UCdwqg7iUDXno4cjpwbVaKhD0JhV1ZTvMie4=\",\"FoxJ5zE3vQBrCwmWs9ptJWLbKpT5So52PqNvlQwPY0I=\",\"BYi33HLFZKcDR3IeMVRN+sgjRHAdKbErz8uZyVEWX/U=\",\"MAUsVkcRZ8g9WKlwdkobtR9gL0W4/kJJQYLUg4bRkAE=\",\"KESHvaCMj7MIvZ9QtwDhB+gqx+zCXOkTYjA6KiKGr5I=\",\"Lh552Hnbe+uSWb+ogv46GjQ0VFGyMNTifXzINY5D3LI=\",\"H9rmMCaaQMirGmTY+gmvOhYLx+whj3ql68ojRsVFkNo=\",\"HWyq3fqn1/mLKgk1JDYdvM9Imm0rzA6h4uE6vLAlyD0=\",\"BcfAsr6pDphbL9jH4emAEzXu5pgB3Nh57bUQFzkpRTQ=\",\"DuVN5r/+himo/vSNyd56UIhQVKKNyFxmScQqvs1gfcc=\",\"CTyCbCg38goVp9q4Jfhzynn+4WB7Kh7SedVhs0aqnmM=\",\"Icdf/Bmte5Ilasnsuodo/rS26s5nbi9nAMh7jqaGc0E=\",\"LewvCKsIhKwAFVfxObpzBaMNjDQtTuU+TU5qvmGHkCM=\",\"EmErGo185D4cugRfXA/5zWH/YKTflIhHpfNSmWwBUKQ=\",\"DQv8lypS/XYNpUpeeKTUcEL0O+jOBGu0UivivrZE3Io=\",\"G85RpOUBMJMW0I4k/aMDo/Oelizyd2WIwiOBAJwIKY4=\",\"GeaCLe/oYoVRW97jifCKTLnoBCyodDWkdEPL23bTCBQ=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"LpMedGFvQqEx1Ki1ZQb7/3eEXYvdZkIL6zMlCXw10q4=\",\"Estd/Cq7glLp/0ZydESslbPqc/BBBCRCRIjhRPhplnM=\",\"CrI4keB9mxSrZGjYtUCDR53bzDqjhYBK9FMQWLb1LyE=\",\"B2wpe3dhHnM9HoiapZYpRQ3JpH1rDxNMzaCD9DbYWl8=\",\"C+t1RcGnO1F6bInyKtMyt+NDvsWqtKpndZ0b1cUTzIw=\",\"TH0EHCmlDmlxIPJcqqvWvodNgUQtIxQpeNnjChj8wA==\",\"BWQQLJXol8ffIsKk69L0HfebJ3VNyD3a3B6PtQEb70Y=\",\"LAXONepJ2zaZNixLS2SlumjMN1rYqt4DZe9UIZAaWpQ=\",\"Flax3WMSTRNUsYMN42biw+GQddGV9v5t1bKKWZ833Nw=\",\"JQeza2uOJHgKtLe+PCatV8Fvudou2zPD8drfOtBfYRk=\",\"Em6R9QxKACkq71TNFQUsS8YRToVHhHm2Axjm3MpdbDI=\",\"L5q0KkbM2D56cAXUVTrTQU5SEcwnMEJBIhcMknaZBd4=\",\"Ja65ebi6TkZmUd1EFoMyXKBoZ6YNJ9C1G6tHpz7zswM=\",\"GFbglATlUkmm1xFKRVTtlLwJ2+Nz7plM/mSganCyy0Y=\",\"C27fTFfofcXrfNpWTrcvdnNjHtkaYS+0Ikh61zK+hds=\",\"Au63rGIB121ycrK4hhxE8YBF+zCDe68AQP5HLZcqAFE=\",\"JeffGeg070/AK2vCTx5FxC2TXcjjJEZ/IW+3RW40RYQ=\",\"IiVMO/xjvVdYEoZ8hb4Ei6bzzS0rYAWUcDRQoWuns1s=\",\"HwTZFBhEruVqCKPosFZxXjR8ZozMbx/abav5SyoHdTE=\",\"D/QSKMHIWx9tLfbjdCK/fti32+q6faY/b5a/mzpSX8g=\",\"KGzB/RDzteTTtI1pltheKEtqayFcC4YtWimXL27htoE=\",\"LLNFW0r8Zwko5l1aoUYe0fBIhl8xuH/2uubxsTMDppw=\",\"I92DLJ1SRNP30YWz6LPXWcEbhs6BAt04Efx0PmKkTas=\",\"Eooq8PDRll/LEzRDc8wbtvT9pKXCjLfrMf3siBNI65A=\",\"K5+EwpUwf9UhUbYLe2dtFX7K0XL8KozIn42sfdZpaSE=\",\"EKPagerW7TfLgzTPbH1ltphi7SL0hbCSuto8DlFsSLo=\",\"DTTT0aToQNjizrxdUnpyzpKf3H7yfkgqDwKae4xodfg=\",\"Baaue1QjwZqn7IB0iunB9dGJk1zqVyPP/ofufO7qjAQ=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"FXhhTZopZyNq7aX0pN//VGk+/jUXh/AGx0PrYAqTa/I=\",\"KFx5M0lFvtX1wwfdZUEM5tYJPZXcpVUBRpldeQKK6wk=\",\"ELX7vv5IIWSh6cMLtGMYYaEkdhhuu6YNpZqBcqJPvE4=\",\"Ac27Q7h9dtQg/24a3vGt41Xt+XoWRhB9RJk69Ha3i5g=\",\"GXM+q0yOR3nMkU8HWY3zuxwqygT73VoRb4ZKhfeoH+M=\",\"MAnu7+iTprBKLVGgJ7Y0BhcMMF1SXluVngV4JXV6j/Q=\",\"L+bJ3mp557sjQqDAmSqbhIi0v0PaDOVm5TvqS9JOYBg=\",\"LUDyUgpd86gN2rA9uO16+Z6gVOOhWcSj+2/nmnabaFw=\",\"IjQOBYMprFSPZ5Qh4XFS1hBt5zk82oep9zUc7dJkCM4=\",\"BWCdbLC8KgA+8Cs/YpAvUbSbvtcv33JGde3iOUMs2yk=\",\"CkSByIxB40ei71/WuRV3IonCyQuRs//zAYRNq8HFHNo=\",\"FK3oEOJnkyxAI+9v6mqw/FYGPFdAolbInnWhcmT6KJg=\",\"GZJSt5RJKy01vurowUEb0bUXfhevZcb4bd0yYcL4mZ8=\",\"HvAUKn016idnEsG1uG4ThiAcGOP3dDIc9ptqDS7j8iY=\",\"JM8Y/dcJgGfr5ocx/1gPfAHeclGBSkZm/1GCIhMKovM=\",\"AQh/N7GIrEri4FBRoFtg4Fed+PQiPYdHFqbCUati5bA=\",\"Hwrto35NHoEVAjm3GkzaBPDk2NdYjOaRch3yj+nxjGE=\",\"EYRWPqScKGk+yAC/U9YQAEj77VGOExetkiwJXUhnePc=\",\"KLsU3kyqjbgE6c/Z6SzekBHIKeXMiKcJ0XYWOMiKBZM=\",\"BeHykOHNWO/s0YvbFVdTVrhGd6WcEYtGW5Zx+BY5eD4=\",\"Jfeg0M6LQPiwLKY9+pWmjjkd+fbSQYDLPMl2tM4E/BE=\",\"BIDMsWr4SyGExvW1KaPY9ET4PcEXgaEGrhDaI/YVh7o=\",\"BTkpb1t7cAjeRdXIUW+pnbGPGoIlKdMmb2D7uZWdTu0=\",\"HkJBU/rAYAC7rcFozSjCRWq8ewvpXridjfx7m7p1dp8=\",\"CTLAPBD8kSoTQynzMPgZ6NYZqoqbb1JZngdhujLGDgE=\",\"EhH2xpPh0N6nKqCgxQXc8fn9VuFlRcrggY1VSTdHOQY=\",\"BCO8PNdiC5GZCNd77MoUNzoP1ePpukRw2WfafuZUeQ==\",\"IRjL7paWRDDkeRITLw1vHC5v7xwAHI9Vq1kQUhI9BPw=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"Hx4jdPDxeEYTPduH+lRDDGw93JxTIRHeAe2jaE85epQ=\",\"IIt2tnMvLtaB2KufG1xRDIhnrJdqP65y1fnYhnanWn4=\",\"H8p/oa73guX0IZWnaR5zuQAz3zhJW5Hlw46CBCZEaCA=\",\"F/E24zRlhRC/dkMLGFhHlcyL73oRwzphtSWTOazKM1M=\",\"LANFbIGl4uMqr2/08dVyBnfJILzkrbmdHYmmBhjaIyA=\",\"Gl7VEOblGAP9cgEcLW3kxjjVHG2aV97gk2gNwzb1004=\",\"Aak2vGd3wtpxvOMfb71kaj1iqBVoAgPtxmrNEUgTICk=\",\"G0ph+ttGjfU79U3JTpoYkvaeaTomYjtsdoybbwjrJg0=\",\"IgcszBiaZp/Jwd7BeN7iLmgQ21H7B9LhxKuiI6ifJfk=\",\"GXDRI7Ttjov7UMgXKEQw6TSfBC5Fb+XVGPSZwHH4lDA=\",\"JZBkIhJnr4uqJeA0xyYWQXLorAiJ89YtKe8FrPli+bQ=\",\"IodTC6dgM05GsaSYYd1UL89BUSkwQXEshUSkZ6kHH/M=\",\"CEAGK7Ay+pCj6q0CX9R6Y1N5MTCqC4YmVltIA1eCqmY=\",\"HVVfO73WRlswt9oOy6mJFiTW0EG7eBJkqJqnsW00bAo=\",\"I9TznYtHjZ8/6cVoUOsJHm+xQyaqXLybKw19h8KD12M=\",\"KQG4pY0HrffDCAwaNs2dcGUq6psHcC0HrQkj11jNuUk=\",\"LV/RAnGtG3+18FMQfj52nNNQntTVAb4Tz6FCG1OUYF0=\",\"IHw7EG0zfjNi12DMQc21vgEfznOOX0hdK0a5PGTPm4M=\",\"FJLA7LHbz6HGY13j9rfZ7tZhOmAtRP7kcal1e8e0KJg=\",\"FkTTNTVoCMgW0EQZUU/17DKN+53feOYjy7trILTtO+o=\",\"Avpn//AsfTygAjidVMbvxGh9qUcI9uJ9G8WCXxZMv0o=\",\"IeHKCBdVZLJtaIICQzxApBm9ryULgyIp9KHzHorOVGQ=\",\"LO8t6FwpI0+HF6R5MfPn5dJt5UxACfDPvtV0Le+zvec=\",\"D5EBJ1xtgsWFuwNwiGliahsO34V6pTa6EFcz8AQ+/aM=\",\"AT0qyMz2DHVGIFDI9EHh75LRuahCw2v8gt3/ZWHv1Js=\",\"I6fLruhWYwq8K0I3Mu7rwew+BxOR0D+cm1E1HGeUPls=\",\"LT0e5dOv2hr0nqUm2PJQQw5hkhuTrfByrFICtf2NDzg=\",\"LECgeS4O7IqP+LkaNoNf8HdOEePxMSDHpqDvu9bvHw8=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"DOKsuOlXW61EDMksgvGWlPHvHl8Nwd/IPDntgJGXCds=\",\"JV6La/zXPyDmxL0/Ye07i9F2JsXlqEOFgJOn71XrHWE=\",\"BxdW46aEWZOa81d/d1Z79oi5lrR/AAPEUJ34M0WEbBY=\",\"C//jRGWJs+6mrBB7MRMH0g+szHu0XdXWhJz99+vOxB8=\",\"GHh71mbP/S12ubc0Tu2ONP64+W7bwThIb7uizWKMpLA=\",\"JN2Qz784hh4wfZ3P1VB7Ipi/ayYY+pfX42sHaQ+nwTw=\",\"FBDbPR/xdQDZCLApVSv7XETjythbRNi3Bwpgw1m+er4=\",\"EUxdgPak+smzlieI3AxUI3g1LrWTwM+INV2MgDLv3qE=\",\"H6rk6qJzEO37x4K0DGuglpd5yBOAfYFjCxktBT1NXHE=\",\"HGqSF6COPWtJYc/IOdboIY34StBCIZER+A0GhSRWZCI=\",\"J3mjFjO0HPEdmIs1YPqgPy/vBqwrWPiNifxfOG8otvo=\",\"H+8zoTPccW2Ed/bACFS5u7sIetOXBOKqwS7CJRjKQsY=\",\"BR0yF7k0q9AuZHyc8PlkKyw1r4hrKkXMe1D9MmgXWmU=\",\"Aj4pdrh+v3tkpaOsoZJr+2F0Tg9Pg2DfQFAPR54FLhc=\",\"Jm1PVc6eIYOsI3wcuCoTjP7JtBV2l0Ky/rV9J+unAn0=\",\"Ig7YIDjtsH4PdAksgJ23bOAa31M6QrUSAPZ81YutoNU=\",\"Fzm3cVuV24GslsIewf578LxnZrN9BXIGZ2bjTuRFAOc=\",\"Jw2l52Ub4ZfksgCuoSzIuIxjPUCGoDIPvXslumu2A88=\",\"BvbbQRoDlJ5rtcCiT0mWfx6znDXq4BKqhz6gs0R9b1o=\",\"EXopLNg86w00HAHmVZD0s4dBw7pRwNcX0nPdquXFnL4=\",\"Jj5ILfA/lYsWwhMLnOqbdLR+5dfwcO1aarhJB0OG+GM=\",\"KAP31+PL31vpMGoyqQtYy/xUkNHXRgnL9jhEdrKSZcs=\",\"FCx+LC6RMi3pBbhCDtMtb/FX1k55KjjuKcybMW/Oo8g=\",\"FH17+y2Ig5cUrMEIDZNfnCiUNNXQr0dyaZv0cywTMj0=\",\"JL3OM47jSK+CpgyWCAAJTVeU16JgfV88zdH9T+e5VYM=\",\"EKCnw4UG1BpS5u0MThTcEoOEi+t95z4OktSgZRIcJeI=\",\"L1FidAyvvF8h4QpOrtNqwzGwRvhGxGoxm1TZ4iBsiS0=\",\"AsdDab4Df4pdmFv3ix6Jg44PfBqoRZebbFFCdHoLxrA=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"KFgKPXbLisfU3tMu07cNNLp2HgsJgD8Q0Rlu7oEsjmk=\",\"Gc8VzITefIelmkTQLoP4gSC9P30asH/6yHihcyD0stw=\",\"If+3Fvn0aI9HfSsDv7TE9X/DfHW0b4X/PY2m4CgmNZQ=\",\"HF5WUu5cUfdGY7VhLQDgAuyurG37JtFD6PUqe2LIE0Y=\",\"Awm+dNfqeauYaOaRr81T/dZZGlyM7flloYlSKe/1Sno=\",\"CFM702W8/MpEpitKPX4bCWO6mQ1bxVd6ypDz7a6OMZw=\",\"DnuSf+dbPjMiZR+96h4B57W5owIuZAR205c4oBbhFyg=\",\"LAROd+GInJ8u+p0hf++xADl46uydjJmklMqca64emA0=\",\"FsooycaBXUfBPuuKa67nl6L5/o+vzNZbxxTIFlc30XI=\",\"EOKhyI/6T09Y72l0tvYSw3dVoarECACKt7O0cWCSVmY=\",\"KvCOQr/ja2p5XXjTSk1L+7onrcEKFEkg1XCf3veXcwE=\",\"ExK5rEDO3NxxVMOhEIAyIrQrKw2UTOcwipkgdMD9wlc=\",\"HcJLdaJBIl6RMia7TkPUPH1Hvk3vA/0bVp6s9yb07Sc=\",\"E9Ok/jUo++QuxCPjZ77QUUkOGwFO3mt3awfY4VUJ2II=\",\"Ay2PDPIcaX/714jz9j7o/cHc/Tq2SbOcteEaa9KiTQM=\",\"KMdYdpKXPUB6EzsvtVAu6aUaRnFWj8sFQ1zwtfvmn/A=\",\"KOQDeCVuPL2Kf4yv2+0gIapJ8Bp9cFaFi9PqrB3AU4s=\",\"JdlD4G0eFBzDm/YfeeevLXHuk7Nh/HI3otmoq8mGBWo=\",\"FwgURBia1SfVuEWvKpffjHpCk/SFtIP56O1wIRAvZEM=\",\"HHlyn73atUHS7Nr7k/qsHbGbTegNBrlkz0zcgeHm2nE=\",\"BFYZtusn7LVaX6hliV5LsncS9OlahK+b1xe1jlAN6Fc=\",\"Diqdtb3y6B0DaUPfUw2E4XQk7FTznIA5033YXvZePcg=\",\"LOUJefaUTrREmKEmXbTVGt5R4YyoG8acAyQQPNQRbWo=\",\"KnfeGp0E/+O5Vd2zykTVzeWrg6yjBXrSHSJ1Mm/gMqM=\",\"F8xkT7qeOqn/LLaxOGSUxnB515BNXQKCioTxAHmNTs8=\",\"IxsOXf/hcx7vA0LXKJJq58nRTPMrGHMRWj1HsjHf9wo=\",\"KXWspn0IGwTk4A2CTVAHoC9HiRxbDm10/kvcNqLD3DU=\",\"Et+6DLsXA90DqjxuQ0wU5QzglhUVI4ChS5e61K7BqNc=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"E444mUUTv0zaUmu7bZp60/pgu7W4ki8/qIm+f4Gsxog=\",\"Izpzf3RKb4vx/U0wmaAFtHg4k+ggNAMnGsFBFruWvtU=\",\"HIr2FwiLA+3RHiaX8/HWGupSfrMSRlp9HZcSBUfl7qw=\",\"KeAoq9NZooHP/Pjm3vc7JDyMC338eB/hbYXJY2ZHtok=\",\"Ec68MhgxfWo/yZ+iTAKXw8kX0seZU/5rGVBDwe8qKRE=\",\"DZ7/fWkMpt6W/Y0vdX+r/wHnz/X5ryGjMb61vzwrE4Q=\",\"LBCuF57ENhRNWRtYaT1IhnowgDAt+PIh9kbQBRkjOsc=\",\"GVNA+Z8xQtWKg3Q2i6ewqr51Ub30yEEUxUNzP9QWM6I=\",\"F1oxdXjyaGADIUFCtqyHUCfAIVcpBDdmlPhGnqLaXDE=\",\"Fv/okngXiMdWBp9gr0mh7azN3RJSsK3YT6OFDE+AAC0=\",\"CC6hh2yzgEiMcPfNycv2xJSj3G20SbJ7KtVVAKkTJnM=\",\"HKx9fXAnkyGXNDL/RSSKRJdUHQfJorJurCk41mHu7hM=\",\"CHVSSRQLM2dJ2kkwtqgvb3GQ6wXH2vKJSK7WAEnQD3E=\",\"IH3p1pcmUVr40GjQ0mU3eYJGV50pujK+LcIXXlPN0EQ=\",\"FAXqyGNKRKNRl6ZQOgBURrSOf0FSEFIxYsOaio3xWCk=\",\"Ivh8mXzRvROjy7AtPVNMiXUok52eZxT+DGEcZz1n2G8=\",\"FD1A2/jNeGrlsg/ckkL862IktkwYezanymZInIZIkpk=\",\"L94LdwZ0WH8b4/62GbQnYSX2Q1GO9xXmlCE+MTS3dz0=\",\"Fg6mEQsQ6ePw0UysxIbAuo+b7DSYAkJXypbFCy0t7Ew=\",\"FbhBjcHEbz9UbXDZg7wyEi5AaCGFaY9/Vn8TWQoazmo=\",\"INnRDL52elOOypviJydJRAlLnp/AG2G2V6+99rzf8A0=\",\"EElSsTiRySptfxxcupg67ko9+zGhdy2ZGSqzQ9ToUZo=\",\"AQcgng5BSg5A3/vce1Lirj3gTkOFqMgQ6S7SvC9nQR4=\",\"G7/xVmN7qERNhnmr93Zoe43CRi2Hbxcinw0LYrbq+cU=\",\"Bh8OMNiuyiMa9mJJbBpKX0xrKDp5rA4Bu2d8sU/ag+Q=\",\"MGK2HRPpxtYUcYM9jmtS+GaVeDFIF6wo1lCvdRLiOGo=\",\"FWock7sbsZxG8tYh7RAJGNnzGUIheISTvghkTag+SqA=\",\"E2ZYTMqtue+V7ED1PpzHkFIEQAtS/GucDSFnL6v2V1M=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"BycGDwBKEmgpSFlWNP+3THNRrrQB+MFsMaMzyGOMvO4=\",\"C0Pl1iDF8BvlpaMZO9RYpu4ZZTOqj+o+++1kqD7y/5M=\",\"BxGRHxWtcTTLn/lwUaD3PzRrS+P5dUUI/62CPBHmBBU=\",\"BiwRirC57k+B0S5w11Hb/31wR8iVrsXYew4dv7MR+b0=\",\"HtyQseJnnXthBAsnLS7PjUcUF+Pfib5xXVqFpnWew30=\",\"K9AmoXEj/4LvanReeGzjtpFxxz8ApRiInDIGdaSjGCQ=\",\"GLmmRrgnnzJC5AgAdSdCCT33Ba79wTDpAwJtfm83cRw=\",\"K20APLEGUwhfTKFBuGdKJXFA5K0CKm6FpWgc0/QV888=\",\"KcqWcEC7Tvb97AAIo6GCG5omgmKavGwvN5Eb6DxNe1E=\",\"KcX+WFA29W8kvygbvjiR1C2GetjfAxdZ80WGq9Q0HMI=\",\"AYJQRzw2xrL8Aj2fmA6RF9K32BU4ZhPPUYpdXhzZj+g=\",\"Ieyu0sCEn0Rc43Dbv/eg9OOrRURMphStgYhWsFfQtVk=\",\"BQ8Yuto7cmXSGU3PRSYgaYJySKH2j8zYAP8Mj0mPz30=\",\"EFbQv44cFYpAP8uoHRsl7RDOe790NqD4KvU0F9d1jac=\",\"EOwhZ3N8W/L+UP4cROVipPpilXbEPDHCoGfT9+GZrsc=\",\"B41pUGnFodN8cSmfP1ZnUWt2pFB6QyARftJrO2wF7+w=\",\"MCs0AAuKTF9BFFimwSozWh4PNFvQEsA+mvxiyPwH3HI=\",\"JREBB9lLoy5HM2+2SkNOAvcj56Qp6yO4QTugNQDFbn8=\",\"I5ya0jye/Zp750ieShJAhwpgXFuOhAIfO6zoYoH1/m0=\",\"CnHrce0c/CMWeAT1m/UTJMadGIYC5zLlzFpuP3NFUDM=\",\"IvEgKN0By7kBQc/fVJetc0A0FuQ38GPhujkcwYvAvF0=\",\"HSrU6nJAovcYQWNcUut6dITLl6vZTHC9sYdyTbMclT0=\",\"CvxoM2Jt5HPKCKVTimSgbPm2BCQvApxOxXa6ahN2z5c=\",\"GeAbP/09HDABfLs+2N/WCDj3DgAXc1WPxKHJgYvUwZc=\",\"JtsFuAqQSmTbICl8xj4tChkOyfz51Si524j34HnKTUk=\",\"LYKG3+uwk2WFnlJCkWdoEpGOvNK14lExiE5xA3pd73I=\",\"Dzx21xpCIQGHCspzZn6tCzVej5qACaoplBKT5cwQXQ==\",\"LHFCIl3Vo48yk0nUvtbgb1i6ocPcMqar0Fe6s6Re7co=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"DUgwciFBys56PViFZxF811berp0hXN7A0sVcfdKTzzE=\",\"CCa/YlcLWl9heChFs0mBC3pIEVPn7DO7NmfkosfOSRI=\",\"C3TaWZKNbCKADtwhIgB3AUe4/L1dQCF8uiwa54SsPGY=\",\"D12g0TkM9dT+rSrk5GP+1x0LHVCVQoVyAJAip1UIZPE=\",\"JwTZmY4eF9WmHqN3sbeO1tfslRr+r/UjpAZiSplEfAQ=\",\"MA+CKqS5VupDq0WwQ63JZ9QdL31nRF7M4b/TJZ5i34I=\",\"BD8ods9KmzOvAj1Ee7kLY0s3/WpDK5IOLa1P4bn3NOM=\",\"INmC/mVcN7fARqBxEOV/qGSZOeN2pP0btr/z8T+I2/A=\",\"IdbLqDF9rCZMo4NjC02pAhTYA8UD6lUgxbRN/+LBONw=\",\"CHMBiWO0CENHrYGwhWk8/KA0Wrlj9laJDJCILPxdyvI=\",\"HmF28sjA5qy1sC9OVNJF+Aa5+nvBJrNDW3nlgZ+oyc0=\",\"IdRAyl5QnhrgR2rlRt80QU16v5FSgGtMeZF3uHsVP5A=\",\"CFrDIaVAfX7pSLDK0wP5J1FTLLG1X/F+cmfAyYIbz4A=\",\"Il/GIIvBKqpd66NoiTGivIYX5rSudsHeDoXe/jji8Uo=\",\"CqaEfwi2HW/H6nEXibdiVdFLatfeiRJMli/lf1NL6Yw=\",\"C7O/bckiuvHXqfVVOW148xz8PLvFNMAWumh50Cz0AKY=\",\"AkEYtAajneaiIru5m+GCj51wwkzOauRSsgZE86ZzC5U=\",\"I/iAQ9z1AfBqm6OIsF8cFLopB4uXjn+aOrpVywvxp7c=\",\"Hp/00JAhX4jZr1O79XKC0xqDWooFLbsZtcCzZrRRzaE=\",\"Jv95ecOL5xiwkoQuAs8STRzsErQmpe2DUbgyOF3e5AQ=\",\"Bi7teulFiPFJkFp9FI92PIQi5+C2v1z1zq+A96B1T8M=\",\"Ldy5ORI2T3UBUEQXQ8Mt/Kh/ujvP0oWlzdhUzDEqbX8=\",\"GmHIEqqX5dxjuCfbO5h9dZc4gmSIq+zOBZKvbnKBM20=\",\"CvJgwBddwRiK0RIiNosSKh8MtfcdXfR1F/IZB0j4A84=\",\"BsVH+NNo8D7FqgBpOoXStMxWqtiABqyh5Gseq7hKXVQ=\",\"FaBA6nLvMlKBb0U9qNyXqbQXAR6aZbCoYGJIWR5ZcZk=\",\"Lgroa9A5ZU/L+HlUUKNpWBObPglBuYd4OVuOy/O0DoQ=\",\"Bxk2rl7H4Ox3dIXZQAqMQUziM+BzUqnOaDrkGUM0HJo=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"AfyKznXIXm06dAT+ArAxObamfc/i0U968RzDCiqOzjM=\",\"JjgVsqgLceEiKAGsOb1E+vI9DiHS8x/SE9MAaJpyDY0=\",\"GpH+OK2JgYnp3X73dVkYWnnYBIGAj0BE2q/tA3QtP/c=\",\"C5mmGSxbv2GWJNHHzH2Qkw8f+3mm1M0UW9tYqF814yQ=\",\"Kd9bcil5uMnGN0PF2Ze3INH5OO3v1ac1llG9zmDDUvo=\",\"Du/6XCKJFMA9qaLrX8kvIyVLzegsRZyBJmIj5vzT2Jw=\",\"KzZHzjdM6vsO6cT17Udi23JA1FpbAfOHPypMi4ami+U=\",\"IeKHLbdxjpcobCI5tbchpY2JyjfUPd6B1c8ElHfdHHQ=\",\"FzkJrJnMw+zRqy+4kkamSK46u+JRzpwBYLylcSwGJq0=\",\"Li/SUK0xsPVD6VjhbBCzzJ5i5SwaQOxeurQGHTiA3TI=\",\"LcfNgm8vK5Y6GAtaD7G10g1KfLyGBnkmcUKnB8a6SNc=\",\"DN9ijeawvCs10/mgssrEytJ+fhlmw5r5g9Y+FGFZK/A=\",\"K/L2A+kdbu6xBKyRQXmKzNUl+j4kGxGCdT1P8/WbFjA=\",\"BJyWdrWVdVvi8yiGOTYxJELBwHUExb/s15Ph66fD9nU=\",\"DR/U1v9UKwYLO5Dsu4JfD4kIIBRL5L0DNKLq+DOcmvA=\",\"IgapP9BO+n55EwwKrFgvpQxcp9rWFDMSgcPUnuTBxn8=\",\"G4sfMquEB2XLYlD0ycAZ2ZT6WFjGe9WFpfSnZjFD7LA=\",\"BVy9XXG3h/uW+rRMjGoerzrqUFxnXDL2CK4LauLnExk=\",\"JKY5YvpjmSjpAxHOhG+Zs1ITVotlzB21+mVVWgFB6p0=\",\"LUGDXsnI3ISL9it4Sp0CnPdjI2nTtun2h3xnFJWDG8Y=\",\"HD6/HN5HQE2yxSPGgOo99gZorTe2f+UCmMYyt3vT9iU=\",\"BNkgMoVtHrKRQNmCWmz/zM8A9f6pG4Wq62jUc5Gmf0Y=\",\"E/1ZzcLah2Y0Pp3HjQYEx6RTxKRjnx4fZrFUYF3QDNQ=\",\"LVai05o9tiDXsXK9dFU9Cc+tqA/nsfK+8/xMwRX3YSM=\",\"Doz8ZjRF3IHNBrCE02yF2UbG60mHGt0mPOFPK0d60n8=\",\"IjPg0Avlt6d9oZKl/dkdtfGWcF6gdU5L0dtaNXszUJI=\",\"FT3MiH9dyomZ1Rrgb92hZdwD4BxnvYeQMWvEZexLlhs=\",\"Hj6jQGahcBFPDHZXNFIDM2CAkBK7muTCS2wftHbV1dU=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"BmYrztCLFtPTpQydvKB0PWbCsNUGDGiYPYRIun4Jc10=\",\"IHNX+nDkc1jk35Tg/ihguyreVlRgwvKsmWhxi1Ev12E=\",\"DYi3JD5LqUeYWrBnOL/bzXK+dcBTn8LGXgFmEs9IoKg=\",\"KQMvR4x7X7ER+NMnIKvB+gUGdsWPeDu2dAtYdiEVJ9k=\",\"H1iwClvluvnh2hINjbwSp2fjBOtjwMBVKO+tK5X20BA=\",\"VkXQJ+IDYmuKjBVwfK1/mVS5Fb32IKNDgSRwxj1v1Q==\",\"CrVyQg3+h5RRWo/0/nGwg41GpC5jtIi9vvLGchZodY0=\",\"GHbBP53l00HiVLPSxLyMJy4nC1jIY/+xYySheJht1wk=\",\"If9BbAD25HjkcPd66tTez/OrhH4Fjma7VrHHU3nWfVU=\",\"EEBW1dd1dAuhUPaAfSUWB8UHL8ttIEs6kmRrdvl9tOs=\",\"KFm8LygFRTZ7OEQTSyPS+2ygfFHELuwYgAz8eVRk/9A=\",\"Iy93fAbKcBcdCRKcAYFLV6aFIko6dS3u/eBEh/cx3FQ=\",\"LKsMQU2Qa0zdg/CPzWjTs1VP2o8XlnyJ0LKB+eboCFs=\",\"KR3AMEcqRjP+NyJUGeniarQGsSxseLQLsXqe06+FhBw=\",\"EbO+kjUuNNCJShCDAtCX6Urt4rkxtAsWK2eS8SfQ3VE=\",\"GCFFDPmVDrLwyhTuFzhXNcDA9rWOz7TDQXMsWA4VKJo=\",\"LHGFopZaPf6G0viKFOZv883l8aQHL9xekDpTZwEta8g=\",\"Gfi4hDG+YIFI7MioYrBDxmJ3xtJE1LybBjSI1HD5HFc=\",\"LgdZfOGZ408akH4TXvjH8dQ65GRZBl9e9W2/raexQIY=\",\"IN1QiD3pIvMUEaommjioCfhq6YXaDdVyoCsKEV5XMX0=\",\"HetY5NsOBZteQjOifz6/1cVvt8ii4JUocP+JvZhbf7g=\",\"B3K4MR5SuWC6uo+cy4101SD1ZTYIuoECQ4VMowbpxaw=\",\"JlCK2P9z1whi0ewE5AbxZcU8BKDD5GahGiRWZWogCKg=\",\"LgPcGN3aLupgXzV9gsCnqeBfdNB40NlAoOdQbdfbsrc=\",\"JlESLlcVt9XQ05a4sKazshnhtclaBTJiPZl2Mw3Ax6I=\",\"HS+hp/VdoF4ud+ssfOCbT0wPgyciJi5+VxCCI78uSnU=\",\"IJkdP463hcoI+/FpWqCcBmRGWFjeX2PmKM/W3/Tfp9U=\",\"KuTEmGYGk1h0yBsET0UKatkcHGq6RnAJHPg9002L3UU=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"ItXctYt1GzPmGUHgNOxqXaIBYrRKZ/LywqMvsrsZ78A=\",\"GKIZfPmI+oc3+eofj3z44bPaOhMBd7gMR++1/oqzuok=\",\"BWRysB+Hlq87t2/ISsvafxdPVMMSnwP2s22AN1vvYi0=\",\"KKkcL3T3LsvnWm/sQYuf9r8IxzHKEU1mCUeOKkmPlHw=\",\"7NBMY+0e5orpTVFjMVWGhALaw548g4Po8NRf/dHa7w==\",\"KGXGW4RdgGHc67yPLpF2KprwppxNdpLWDj3+mEAKQNk=\",\"AvUK6Zz5dT/JoTRKZUV03X1L7DLffR1LHLTQPdH3MZs=\",\"JrNOY1eS7rMVvy4D7PuLAPe2v8E351lDb9DlKF+l6Pw=\",\"JstZ5VXSERZGMn9+ycr7P7Q0S4lNd0YGl5TEkfcbX4I=\",\"FlxD7adxR8FAjaQS0krBMUoyejcdL2wOPcLH6VbpYEY=\",\"Fy7dB/pZ2q6wTMSkx4MCdAHti0f8b7384FVDE2gF4bI=\",\"K8NvA197zspAAVRdn9mLDy6uhY5cSw8OIZEhWRdis3g=\",\"ItlrLlWIhMoHfw+pxBo4FVh1rx6R9ead3tNkmcV4bNc=\",\"DxFG5ZH8cgVsL6QKNbIC5q4ppebZEYBxPM+Ova7tuRc=\",\"KVENEUNgDL2k8jXwxsSA9DbiDara+UYaAyIE3gCdb7Q=\",\"HbrRSIIxRJnBQxY3XpuIiL5DUb3zuW4mURJf0Dyomik=\",\"GdZRsMVntlB+tqcgIIH7YxHoOYqA1TGVpbMnt+WBBCc=\",\"GW2XIkjhgClsqg+UP0oDR0agACBTELFV/QBxv2ogNB0=\",\"LoI4B/OiwtuBGBv3dhRHJSMHyMfgiPmkcMJXrYOh+tQ=\",\"CuB6AOZeaPBvs0IZzy8LgZ6mvxRxaKtfmCyVE6Zh4Qw=\",\"Hz/6TktawC+okHL7+hDRaf9c84LtVKhraf5ew7Alw9Q=\",\"CUMj+bd6l51CpJyx/Q9KXqJT6Qiw6W9HowjkQIXwu1E=\",\"B1aMYmYMkZtCldrh52Gl6b0d29Bfd95Jd+mepG693Fk=\",\"HSjgXhrueOCpwQyX4BGT6xdxw9yErArwt+m3pd81k38=\",\"FHnWpqln56dnKgHCxUG7krZ3MIw+NltzNJMn859Fk+g=\",\"aHKRmZb3QKolWUGMDaBC0VzLuhzaBsldrvnw3d5Kaw==\",\"BYewl0WDujuEk0pQC9cmAYsIEl9fAH0BhW+ywSTgDkw=\",\"LuC7yvZ5j4zBB9xOwxV9/K7FSfNqh8k0qD8cCAA1re8=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"B2Nz0lbWjM2yAVkPh/ZhoT1hhAcUC27CG/z/smfg2tA=\",\"E6W+CWd/oK8/sj6VQot8+ee4J2uuuxo5uHob3EFrJw8=\",\"InpyWcOyE1YS0SY4tcpZc6udaqbWozV4HYGCH6i+Ask=\",\"Jdlkk6w3HCuo3Nyb8psbUS9DqvOPzIbxfp1E1Z2HDN8=\",\"HsESBBHe7edA5+NIG5bOFJK0cjKyCPFa+yEntBGJr+0=\",\"ASBnyfW+KMCXTlXhknTGX3Usgih2N//FEEs1eZNisPA=\",\"BGLqOVj5xC0LJAa+yOOFdsiNlkWXrmHx8H2BGHPEZNs=\",\"IEULq8em5jfTLYtX8hhBKkMP4IdwbYjqxEHWhx9dY58=\",\"Cyn4h1clF9gm+XfDcTQfKBmZXmWikpwHjPSpN9xoVYs=\",\"J9kzSeLKyDJeQAas7M+5qxZayjiVaX5C4jt4ux8XKlQ=\",\"GWnuBXJ5mQKpN1RTl7T+y7g0RoQc6FJbcU12X7JdkCg=\",\"Ht699YB3L2FhMUNbF8RuDjhbOrg0lCB++02aMvRme9s=\",\"BDDcF8PxlXdY5XypPJTFYjBz5VgMKMq6+kAMLl66X9o=\",\"Hf3JshUmFaTcyLJS8X2XuJmFQ+hLm4zt+NaD2RcYa2Q=\",\"BIqa+9bBH/SmgCBOiVtlXgBCEeSV8rxG3/7FmL9Azkk=\",\"JRG+ggCH2yGRonNlDech2/er084VvJ6V4qcVNEPKf+k=\",\"GyVcN5c/raVqElH+B9YXzoArTsL2CgAuH92QUgkNOIQ=\",\"BcNv4DV0B0oEzuy7zwLSMdnYaKrmmLIFgqpVbm7jS8I=\",\"FAcdr0n+QBpQgIUHGBLDeEkRePZnEu7o8c1/YR+GMrA=\",\"HopF9m2uO/d6ztM2UI0LVm7xqp1YLZpEuQKNLhpcKKI=\",\"A0cNVUGIQe+4d3uxaYTcnXHKVbYBxqmsvMBt2KOk5LE=\",\"GUzQp15e3zRuaU54uDHUIHDZO2lVW2ktpvuXmnivzgs=\",\"ItH9nVDvKN+rHDVVNgHOuy3/5yPjZulWotnyABUXuSs=\",\"BkqRaQayiooaLfgAGbZ9fkDcaG0AMz/KzWPM8SnR4oE=\",\"DK3x8SCnumpz+09ZgMWrouDkQoC1yUePXYAOYfw5yCQ=\",\"EXg8ypGuDNBrkcrNUX5R1PLn+1kgKZPa/eMO4YERWxc=\",\"FWPVK7ZsInNhl13N/P2Pa7l0n4YpelvTpr50uNW9K8E=\",\"AuPPLLsW1LanbxcdgKm5LEuDJHIebDopt34slyeGMxQ=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"EGzURYaHKh6Y0CmnajNHl8aVD7cvJB40QEDsXR52br8=\",\"JnyB7r1Pm+wtf7E65qs0V3QZKCXsOHeaiIMmXfS3Q7I=\",\"Bc3m+8AkxS0N2clAuUUFR4BKpqrivware7LDlG+wmqc=\",\"HbaW8pEyyaBl45LmBtO7QRAhO4i3ElygFXp3YhJBiDc=\",\"Jpt4tvtXfTpUY7C4i/qRrVbB93aLVaaQgSDrrff6q/s=\",\"HjKkuWOe29NprrMiEJyRlHaqheKMK3qKER+c2Qa9+zE=\",\"I4exmC4Ag6BiG0MFwvr0qqCr0z3CZQaemx1ZZz9bGBY=\",\"FvKhgeDXnQo5Fpock4nQtn5Q/F7NJZjS2HXMuvxlmt4=\",\"HEGO49r+LZfluE7NdiW4WYxzI+S+qoCdd816OrUvXFc=\",\"I10dq19y0bDAytguX0auGXIRfrp2Eq4FgauF1N2bd94=\",\"AR7qvLUFIG503fakQX9NbDAthD2tXlweU2AE4QD3KcQ=\",\"FLT2/9xZD4WaSRr4nNz/JuyWNVFnbk4QnzM8NKCz7KM=\",\"DqOovXIrAlVZrkOO+F8fqDZM68gxCEoxKbdJj8cGeso=\",\"JqY9rzwncAvE5aDBPBKiNOihPatm3rb/KouAWxB6RRg=\",\"DdKKwciPmVkxG8Uzh4QOExcmpqubf9uhL0A6MJUDSuc=\",\"EiHbb4aHYEvTX9WG4JRKNogP3R0dordx/Aa8gEgNibo=\",\"Bd+4qtTWuJYZ5B7QLlk/DeBd3ga2ruse6Libr7CHI0w=\",\"ELqLPUJ/6GdCIGXhsqjg0G1WfnNxfersNDj+NrG93VU=\",\"E8whf78bYJciNL4D7od7ltKH4w+4ab+BZmLSiH0txo0=\",\"EDHzrMQogjXlW2fzQ1+xkVy6nODQ0fEuDmAuLWBUl8U=\",\"GOvcbdZ/LVhTVBrxaveSdWruHdETLTprHQc023k6Rts=\",\"EKS96ovzoEQPRWxQcGlkWrNzgXH4ls/jtYkMmgq+vAw=\",\"IeW0byuFl3+OTGfzfDDd8DVW6xtW2DOfBGp9GqjZu8I=\",\"Coc14C4RyKHgpWsk6+ejkiPivsyuNSWXly+t2PT9Ors=\",\"J9XVZVw6lI2RJ4cUpA+rjaicpgDnSKI4AUyYuTJgn7I=\",\"GLS24HlM82TG1LX7RKKJnUqwONaxXtY0xsEqzOrX5z0=\",\"AbibjJpSUOnts7n/9uVL5bjBc7++y47vOEfYcY3g/ik=\",\"J6Xd+Z2cTNyWQyGanNPk9H9jpYGvmkmfjgZPTSxyagE=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"I3sIGmjjDKzEITuj0rFTZySD7RcxJbrUAURIdj0t/Oo=\",\"Ka9ObK4Q3Zm2ctdBxQNPkXYrmb6ESwqTjpZwCVeObMs=\",\"CRvWskl+qpAq4FSAaZ80c0x/dLBzr2xMVZv6OjPU5ug=\",\"L3+cDWHLNuMx8ngLDt2gNZgGfKrxhN/pVhOVD4cANg0=\",\"JE1uf6VYPjbUGrdcZ5GRSX8nWDp+p/XLTof+rPK03s4=\",\"HxdOX1TIg6+5rlt+lVOAGQdnBy5Z2zoeG5DXA1UhNZ8=\",\"CX8jJokkxMz0ZZSZJ07nKhqcg+QxeEVNSdZ19OWycVA=\",\"A9KrYv73j7abcEnEHjTm8YcGYrM2r70VGLp3YhhgD+w=\",\"JxhxHHPaHiVtG1whxrLl5D4rADnob3j+V5DgSzx5OKY=\",\"DTljg2VcJ8olYD2I49NcPcYzRQapPWkJdF5SqnhUvU4=\",\"HGb9dGKT4jFUqymMPkygyhSYDGoKPLrJedTtj9ufaS4=\",\"FXCKUsir3IYNBm4Ksqa1tcq98TAfZ2sH/q9TQqlxyus=\",\"K4Ic/ROeDaTFXPvYtnp9ek579ePOGTK5b2cB/TnpJtQ=\",\"Cq++5ZjspWJKMbf0C4NgI/Nk1BtrJNDXgy6xgKYIheI=\",\"AVyS60cw62iyKbtn2nP/88pyCBRFAWKoHRp6Vsg8P8c=\",\"L3IAxa/ic8x4ewrdhungOA25fLomn1nQ/SZLnvFE6Dk=\",\"LqxRgHkK2bsGm09+GEKun7CwaSFsm0EtpglOKmlXISY=\",\"G3oEIur4B8DIJMURp7Ur41PCo3iVkd66m8qameTZKGk=\",\"FmL6HHihYhtbve1enliAqGruSB+8RVs4SdFqN83tpRU=\",\"KJcvWWPArkqysDy4C0rh8dvZBf3DxldVBki/78THGc8=\",\"JCTRGaEpmTOyCbhdSvGqifhSOAHv7uu/z0nBtvlax0A=\",\"JioFy8hdwXfhdAR8lJBQg6J7TYh/gFDBuYoHYIrI43M=\",\"CJ0bCvWHRM2wbhwGNjBnUfa27eBlJ+uncOq7cZVGWpM=\",\"Jtiwh2S3JAeJ2SetZycNqFIf/SOZW2fzsl3n/GDwM8A=\",\"GcWU9FK2nZq6JK6h9IiHtbK9NR57xphOVsNGJk5cXyg=\",\"CamEmDrBJAUjm31x1+lKt0pdfiOz5lH2GYjiWBR/WmE=\",\"Lt/npcE+5vzyfKOpjSMMMVjcHquaEqc0545p17zF3cc=\",\"GQrG5m/AJEVEo3gK5sWg1uVolJZbNFobcxzZbIne/tE=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"JIiNU1Khe+rE0Rlrm6VlYxkqIWULboz3NKu7Xcb+C4Y=\",\"J/GnfZEvxP/rBRtEhFzcoTYLPf8Q9kbPTi4xsLUnBuo=\",\"KB1KRai+uAwpdFYsyYeFs3VRykJYx7cpIAbjh7INX0k=\",\"HQai9rldIHQW6XsY4KM6pQQlG9VHMxPsS6Suvbysjew=\",\"EdwrWqxsa1iQS4Nw1iL0CNS4oipUpZ8GCpM2UJKFUA8=\",\"DwNFe4fGSRwENjO7j5Cp26ju9gZ/hpJtxN9KYUW5zIE=\",\"F5gpAc+Svht/R35hdHpUULl93+Qbtdd2C9HCXfF+sgQ=\",\"CEivYNKTmzmD322f5WNDkWqgRpM8RRemwMKQJaPaF4E=\",\"HasXBVjxeC3wFQHRqBDR9JHK86A6VWPIY462ZJ2FInI=\",\"F8MXmL9IzApjmGuRQja6IaBN0qK9oK/PFSE99WxGNwo=\",\"Lr1L+wrj4fVA8x/RWnDlneSrj/rNiZ1WBgujlOIkzPc=\",\"FsPqMkZrF56+V7y76X46f5SwpLPgkfFeOqqSIuixgvI=\",\"FXdA4wWIcsKMpzMQVfPa+Lmus26cLX0jHyIXHGMVcz4=\",\"Bql0p12UGlRBKBTWjmlVt/TaKygfKprEJq/oG5jsJ+s=\",\"+pUAN9IdcgkMW9y4u2vpEf9KNZ8+duxiXGTxICurNw==\",\"AZBlWFtVOqJkmkIGJccH5h9+DnDHU9rfR0vaj7oDVP0=\",\"GDuyudhcOpNoAXzR4c2ISWfAsEjcJD81toE69bJ5hyo=\",\"JxqdGbmRFd/yeoZ3kQSlSyUjc8GBBc9fhqtf/LKplC4=\",\"KE/STMPLRcpkTxUijXhvuCy789ZvGidszDoRgq9Pwbw=\",\"DmKzktwnsrgKhoqVAcnhxyQQv/oSt3cyzh3whO0KejA=\",\"JlMR4UIvw+XOy0FY66CySUBIQrFuiVS6s9gNaAX8T2U=\",\"EYbkRmFdg6lA2W0ihtm0EbYml4ZFMRcvXo09mral+ck=\",\"CiJRW5x/3q32T7iWJxvY2W8fU72zLd2b58siQA1pq3c=\",\"E0Py6pG0a+cluq93oJLWt5DBQpuoej1BBeAFuFyQFVE=\",\"KljaIHqwQQHYmgnGn42DCdjoqTje3f9w4u6jD0yIS/c=\",\"G93HQgFd9UcY1aibGB86ARBzKwqx4BT2MgL22eyi6r8=\",\"MBFE9YMFdGUOYJOkt1uaNLWQZnd+0h0sAI8mNhd+m2E=\",\"HvSvImaCSIkKp60FsHRi13ew8JqY2MF9We0qEn/SxVo=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"JbIKu5iD9ZUWr9G4n4DEsYviJwxK1w9/n5uRiMmAntk=\",\"J8X2AORqhUom78ft4RCM74tgfc+gR8JZ7DKTRmnB0VU=\",\"H8sbVOefLwaq7nlVGG1xVkEBCI8Tg38Rvyzq+Tk2GeE=\",\"HSTaMbywjrZN+eabcpqxNc8bY8sjxMiswHOp1Q8zu3k=\",\"IcCiv4wOoF+PMZ5XQI7EykbwADMl7964yEsjAm2aiVI=\",\"GTGtXXqxJkZSNNj6GQXeD3frWFh1jmyDjXSPI1CKwd8=\",\"F69uFZKfK8qRjUBNVrTO4MzYlpGV8vPt/lbb0ZN7rt0=\",\"A2sswmRc+tzqgMR8q4zfbrp/uPsrutYxpc8k/OaWaFQ=\",\"DxC7r5jgsc4syhl3ui4nG4nPRpM9THp5dnHI+wdU4Q0=\",\"GuD5u3tyoyOd5ncEgVHm3EBjfmVZ1yYVjev+d5pypwg=\",\"GRL+B+54QLBV5oMX7e1hsCg0GBOLn6L+4ob7mZ2i5ug=\",\"JKihr0fvJfGLObXKo2wabfVx08gz/BxU++2tVgqlVx0=\",\"LT9mXqaRFtJmBX6k6e9SJYAKHLLsa31rqfPtu/4frO0=\",\"LFssq8JL3MDpXS5UxSwP0M7upDnY+oPAA2/u4OlzDj8=\",\"Gnk0jIgq+qlIDCissBVH2BYUi/uOcPIqCtOj9TS8BFI=\",\"A5QuIyow1KlBoyq0WVisSbCLCopBb/bex+308N0WuP8=\",\"JN6U/cf6hy7visRxuncZ1fP1NM2YgkjBVO4SLsIJDsE=\",\"E686alUwMnplnmvbDj8mQ9t13H6esGpcE52EooiK76c=\",\"D/8jDWOn6hgj5cXrSfrbtGUihT8Nbu5FlI0yb1RXHq0=\",\"H2ezwxGtXu50lbHprBI2+Kzdjbv1sgre08OUe6oNf8Q=\",\"Bb4G0qrs5c3rchyHzgU+hSPImSyRoYhO3N1yuW6ORIs=\",\"DzuG0g5dizfZxHwKHg5WVO3Vv5/EIClZhIzDlR9Ylx0=\",\"KAR7+1hfF61ufN5bwDPYBy87PpDWO4hN8upvOiTRBgM=\",\"ARhq6hLaUsJwvK9L0Ph5Q89c2d22O7uy1/NN0YS67u0=\",\"Hk1l4LrBTsP8eXCvDWT0ypuTIBLb7lmzqT7kK45S4Gw=\",\"Jl0Jg1oZrFwp9DJ7nfPzWYjKiJPByogTofkrVVVQqg0=\",\"JVuEPAU+ndmwDQbbF2EGtjK07w5uNF7ZZ3XkrjE9rm0=\",\"HNvy2cnh9AmWUjYdgwxtaR7F65Ua4xZKzXFfSarmEqI=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"Js0FYXTcJHfeb95qlbeAXtNDh3qzX3vRavzqqXcfrSA=\",\"KGxj3Dd8rwykaXFkvd/SmnmuwHtS6+T/8aRgG/MXjvY=\",\"BEBKLZcmaIazoAJEoEnSIycnxw+GSvpE0RotN7pBebE=\",\"LXszztXCr/Gta0zNhIICTv+x39v6IM6x8tWa7UDaUjw=\",\"Glp4x1an7gzOMbEyz2dSofoOkE4tbdmrOBj76UJtJO8=\",\"JmNLfdh6jA6YeLE4NYK5o79ljdE8Rn5SgE69sWmARNE=\",\"IiLtAV2743vCV4gUeCdAq/oAxBGNytyOamVlh6olvsU=\",\"JDpGPRvv0MzhpGt3Lz0RNR1Hzdhv+OCm5rjQ+MdIbag=\",\"D0qd0Mz1LzE2DbX+3N4EBUBtTOIEKxhWx8FLrBh6030=\",\"JcblBzcauoiCSs2JdOw2PCHd1FChOxMPOOrNXbxejHQ=\",\"CGTX6nQO6T7H0v/ret9KAxdMiZBNnDOmg9iJfqujU6I=\",\"FGyubRvbAxgFj0JOiT4IkrChBw3jcKX0YERK0uU1qSA=\",\"HrzWTfetbw4WGeJu7N/m4v8eaSEFeM3GwFLhRR6cF8Q=\",\"Gn92qLmoaLer8LvymZLYJyitJ3qgxI0tsAq0XHp3v8I=\",\"AytwUP29US/cvJ6fUwwTnxIN8bU/JiQMAd+jl+In1io=\",\"EY5wH/IZYS/+lSS/ouUVu+EfL9WBpDcfGNf0X2THq6I=\",\"CuTdCqZxwKPdCPOU/A7aaKsr7utYxslOYCKRRfCGlGg=\",\"GHzZWvVh4WG8GilU4EqCSIchyA57lwtRoR4xi0Pjw0A=\",\"E8dOg6v/cxhyYw5FOEsSLtn9BxdvM20cPjuHg3rcHDk=\",\"MDkoCO3IjgwkqfD0o4Tjv9u2U4L7oStOeuAbcStQc+E=\",\"G7aHgbn4QdzKIQuTqZMgdg5/OsQ7TtnWIftQ68NEBGc=\",\"BRTuynzQAtBKRxZHi/YsEIs/MUooi+aH/Lp8bVED7V8=\",\"GkwcqiF7ZH0Jnjw94D2Wd9wjmCd4VhQIBPlYSCdcsFo=\",\"GVnR8UFMmlmHnpSJMVJkt2kdrNlq0W+JDrsuyMVfQKc=\",\"LA52EhdQPGwLIAFFWOt45jFOYHEwhEyX7mfb4ZQLPU0=\",\"JIyapwYi/+JCQL/xjRkSdkF+/3di2WWU5P251oA7lgk=\",\"Idup1G6J9Ydf1ekl7v/RDd/AmscWNOacYemAW9CgfR0=\",\"ISgIBnE9xSTn6yxpfuLhl9ib0uc/GBdgm+IcNd1b3Vo=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"A80XQ6PeROmhcoBMexWewXqD0q2Dj5pR9Ul7ta7+lmY=\",\"BkaC669m1xiBOk0G216L32ZdyGVN9K+WV4Um/X7/ZEw=\",\"J73KUKmJyqTcrS9F0r+n5tRVVJdT+z6MTD/yVTgDsCQ=\",\"JjohGfO/XVMwwR8wNtJSHkDzkdqe+xh5vxrzn19N/ww=\",\"LfLxP5VLGny1joTKTz4qt9D0JytVnljH3OfvIpITxb8=\",\"KsQNVn1IPo1nHI4ZQHX9st357FGhdCGejDUdzgLTLVI=\",\"FZuRVPu8rccgnJl4z1eDqopHy6GnKbspcYKqZ09/2CA=\",\"GiKV3k+NxAGqpKKxqD1i/bSCjO0lPazBMuydUYbh4sc=\",\"JAS730mVrSQcuhFpyk2F1a0nbKnQCQge4+K1GB1G0pw=\",\"Bv0iHjK5jC223BYC6tOVAB7c7Th2HPReu7w0DqNc1+E=\",\"CvMRiv19z1mbXGW1o+dKjtBPqieR9HzSzOOjHlQQMg==\",\"Ky3W0GU2XwuAi+4KL37GPqyxmQzARgiwhUnWUCQROtc=\",\"GAlBxv1uHcigqk/YYCDdxJKIhLaAdMjXjlJ2Srpsn5o=\",\"C4bLeFZxx2MA+ebU3SO1OuueLVttIJ+WaYasoJ7FmAE=\",\"CuhB8NJb+9AJ4AESAbR+IELqjZYSSNkO+dRKNgsxdhc=\",\"Gy9mvL22/FndpfNO4RxlTQ8t7CnjGSjVsRE5PI4PlD8=\",\"Lxa2bYBhRgSuhaE0QNRrup0J2Y1RYch4vmeg3tq+Ov8=\",\"GWMorcqBZ8ZJuYeumF6eVMCCIHcYi4rzSzxRjcIUFq8=\",\"EHZk8tPzvD7QEBP67ChEd3hfCOmTK0ImlF78p/z1a4U=\",\"L8VLxHzcf3FG+bgUYsZAkzdMcWR9TKJ0OUBq5ub3zKk=\",\"CHebM1lyCg8+CJiUL2Ea6uEC+HVifyyXPJc1ZVSRHMk=\",\"LjC+XFywcJDKMkk4aSYZRoTR89LT3cEUuuK8qdSgf5w=\",\"HqRaTwsStXi1hgC50IWqjZxopYPOpmWAW5OJ+FY9U6o=\",\"F1OjCLKGJg7m7Ck0y9WfDyEcEWR8vyL2v1+nwVTA9Xc=\",\"EC/+uKKpT83pAB4Iq2A6qJde3CRl1t4UtzwU30DWHbk=\",\"Guip6V7mnId0+NOo/0hHiKsnLT0XT1JqEHssisNOzZU=\",\"FmuEteaXW56Nf/y3vmQf2JxT0bcjh0joXzIITdqjqr8=\",\"Ky5HrNZEVCPZ5h6Wll2pjiBrYR9Srx0TvstM5JZuGjo=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"AQ51VJg1YrYt5GYLMYvNUyQAPpXtxhfWscI6l7k4AuQ=\",\"GHSD3KmspHX4W5+MvXiqYEi9LISMrzlzyP6wdXOIOpk=\",\"AsEzCd7EG0312P3aKwY+gmTDVEK7Eg4o3nVVVp7ncfg=\",\"EXECccZ4MGCuzUEKYMxclmQcHLJlkbIWMpFKqf2U6qI=\",\"ErvXfXvk4Gt3tcQOH5iIBUBBvfT4ryxTeOY4Yzdxa2s=\",\"I+4smg0zJBZgKHKMgNYM8OIae9nukIFwWK07h8byjMk=\",\"BY3T9ACeisP6B+KFu9c5HC3qgZMMcyw6dpyckkkITXE=\",\"Eo0nxIBdI2XYTHVGIcotGoIpfqQ9vtqHwLrvUGyFEHk=\",\"IPVS5Mw6YswvPrdotp2FSe9MJNKIfX3gVQsXq097Q20=\",\"I1cwRy/turNYvH3PJbHQvvzHB0bemeeKbf7I9ibFqfg=\",\"KAwu2GiurLa+fJ53OwjFb0PqhxwBrP35/1zp1EQ9M3Y=\",\"G8dPuSr+nbjA2mg2UybNmUTbmItl9G0DKYkyb9kB6SM=\",\"LZyJxWV4+lAxr9GlPSEhLxw+8kz3B2Rg/1M+3l/DYA==\",\"HiQT87jyOiMEc1/rP96dLQ+I2KpywcYOrJIViL+vac8=\",\"BTpMv0tX2IIXS4iR2RiveLQKfK+DLC4q8CuLpb9cHN4=\",\"Bec2ueX4obk/467x7gppI09/5i6pmKnyVZ9lBmnXbb0=\",\"HojYs9FA7GWdbLM3NqAlThePxsDDfS+ls2rkqFsotaU=\",\"JXI3ye5pn115pi8mR6O1HINidZzZVfEIcjRqs7QBsEo=\",\"K20lhJ1rgeNs0ynSDulzwVzZtikh4nrP8EjnWJ3fdzk=\",\"Gscxfi5eMBFCBVj/pDD8q1Cy8/t3gxG7JbEBnIjO0UY=\",\"DzIj1+iJGKMyULYazf+s8ZZaW6mAeiPO98icg3r+W5M=\",\"H3M/qp76LbaDY3V7GlD0Q/6b1OO4Y58h8eEqwl7wC3k=\",\"COLmsTqno1K4wz0PUpOcFoGeapL3FZmGWIoJ4hlu+j8=\",\"IImVpyGrq/tNUn2wtp011Q4mO7HH2XskrFLCsxa1hyc=\",\"H5HQIqePcIYyBAQt3mKcGK+FdXvPSGOz65FqivEyuh4=\",\"BjovTI1Rj6ctmrh+QU63zK5O0+y20k+3NNaLQ6kujLA=\",\"KRXGSgvzUgDMpXecFAx/noiM5yucRYqa3g8BCOssz1o=\",\"F6ICilSjDk4O3tP32Ggdbd363ybvXEPL0ZUuWErVsK8=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"AqoiX1jVfsn8sdamcR2u0TU3zG2128SFshqMSxPuTvU=\",\"KpqCRxX7jbHV0n/pdfARMgiH9ZPTbWyn4r58wwXqu9Q=\",\"m8S2LE4HHkPB4g2WgQ/5Etq4api0hw1mr3XRCrZXiw==\",\"LX0yb7LNZLVD70r8nSlpq91TBC5gOM9T8S02ugfCGAc=\",\"Hmbb0w/jEdrHU4LtOEPP115WC/JjT0IToNN76RwmnLw=\",\"CmEV6Hbgl8hlHCNw/AwKedT2cZnLygCzxpiRxW3IHMc=\",\"K0zRbAY+jRJaM0kJtfknG+9hpeb80RdAXiS3qNUFRTs=\",\"GXNO2mH/DcfGJkPXHa6ykc2PGOEIP4KnP/BeX4vjGQY=\",\"D0REHLF5W2C5pCTfkn+1S1WlPHWpjrkHCP6ktC2hju0=\",\"HgtvPnUm4xC3uHDMz2m51xaSnnsfB4ZSWIYX6gtx/rk=\",\"Gr+1bIiJ02oc6n2WWAFsn/VBh0W8QY2BNOtE43ANVrc=\",\"BFC5biYZXkKQoelNiW2qYBsL30RlG4V1YC/+pIf7U2w=\",\"B10/uhwfCwhpcUzFtOVKAZ4Txam3Rb84E58rDwnJMjE=\",\"IqHlZjcAt7evIqxWBLEgw6tzKUFHiJ9zs8mGoDb91cI=\",\"DvGd3vcRF69q/d/LW6RUYC0167dJfWXuHngF3WHYB8A=\",\"KTpS2FqIHjhF8CmT9Uxq9wD2NE3vLakKLcE6cUdg4iQ=\",\"EPR8cII2lK2zlSRsdQdF7af7V93fX25xzhpBwumDnPc=\",\"W3sPipWG4Oy531C4RQtXf6U3yUq3t3DM2IMYSuJxjQ==\",\"JpRjnY/UjkC6MB5WCXyycMoeSm0MtbCZMxQq79HETvo=\",\"K0BngkXmgiXEydj3jS5mDF5/y6xjHRKZsaeN87KDsZU=\",\"CIMiywKTcUX/pWay8CVtXI3aU7hf9hGmWPTeiqnKVnI=\",\"D19FyRUA04/hrMRiqGIimMGm9TxzWr8dSpcdPZ/RDNQ=\",\"F6+IBYMDHucGf+yA9bN2D54Z273gY0PllZHakIC42/s=\",\"EkjFstPr0PKHAwfZZe2lPvfYM5LPYB2V2g6xJLBcNfY=\",\"KGtQaoiD1vKev/G83nQpFWeS2gAUK7EpLzeND4lioVg=\",\"L8+eHmlw6LiD+PcrscSMU1Qfv3L3tD7p8yc/kQK1VIs=\",\"F/f5KeOKQ1d3D5BenMX/fih+BD0GBUx41ECXpEYXTns=\",\"CDJtDIoSjAc6csfXIqEp+kUP1CmFZzKIb72j72Fga/U=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"JE/ZSsnStqAq7BC+a9/eBwfYqVRAsEo0/uxOrAqIGCM=\",\"GPC+LnXsGskSkg0EA8z84K4RpmBo7V5/DmAUbB63h1c=\",\"Bn1RPqh4COwc9/WIDxPE/wfLg7BqRCVzwudKZ5Nj7bg=\",\"L60+vuRjyAUCSpiE4iEiiNl9NDoZnrHtRJ1/DPIfuG0=\",\"KeLD4OBPdoXR4s15feB/PeeQzMvNr3fxaG8VnU6QsOo=\",\"EL3yi/ysuGNRCOqRU768536rBFOXAKzGTAhPi8P0ogs=\",\"ELaolZFKeCqpSUjGUPbARdmhXScGslms9f1NoxHh1CU=\",\"LNUGeSU529LyzDyWeV2Wgxwh/cp72JiLuqxg8lTaj/o=\",\"DKnadgZhXxVQaocVEgC0aMEd/A4o28MGvN3G1IKM4tE=\",\"INhU9QkQxSqx+SMQK9bKXYLaFbo/D1T4mhvst84flP8=\",\"EN5JAO6OwkPKU0BFVubcFcqiurjdf4MUjcpVpZjqiL8=\",\"G2qOsowSbIaCVCJ45OSyySLK84f58ImAyLRprvvGm3U=\",\"DCoxJAkVJ9IeG/1WzYj5+gYW8iCUVLXReTy8Hc6dJQo=\",\"HUdE9Zii6YFE0BesxfzwjFGHrt6hRt5ux0pWEq/4x/Y=\",\"C9eeoaIkmHzN2D+axEkLdry8VU+nwkGOD+OOnaJ96h4=\",\"JAVZLcgaZqF1Z+aswgzKcXmuPAlxZY+3ksCYaILlcQc=\",\"FPSXqegRDuwQdFDA+uZNA7yKhBbbOR1MR3Dd6b040/8=\",\"Kfi7NSnaP+YVLF75zQBGVorb3Z2q38qBlf8goN96W/w=\",\"KgMjAPySvxm5zeiMvp2j9y4/9QxitjQuV/cTsRil+4c=\",\"G1mncJpTGmUNXsKsAfsJztgyer1FiPYZ824IhsFsPfQ=\",\"H8CjQ28QCk1hzLwyF3Hvb4XkIdVmO8tMAciJ6lBJ+1w=\",\"DprNXZF9QWBDSo/nA3sEHCae3c7ruRKbahdsigCRDSI=\",\"GWzIoiXywphqurQmiz1jQt22RbvNaShj6TJ0txfQKEQ=\",\"EUWTVrIMLKiRPRwLRQh/WihVkZDUhvBAOMBSITgdSu0=\",\"JelsB6uH8/XAaIYIwJWob4Dd/1wlDw9jdaRTmANNZOM=\",\"FdWCUoFaxHGu46PQl9eZ6e/rlpzMsIwzrgt63vGPAlA=\",\"BlRrO3+FBC/eIfI8OUnDnCJ2+HcBU3Q08Uejz+7BA4c=\",\"HiqjcEsIDEzxF5igDMDIYZyNWZe8MSGhdVO+ey3WVng=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"GeJPXhIOU7/n/AEzghH0+qH5UITycW5Vh2YClezqjQM=\",\"L/JSphVyt7kpYIQb/sxL9ZQLwNaC8XcPwnL3DUFoKEQ=\",\"K5zofWPZQ6/ZQK6Hl51d31C3hP34zU0e8OfE8iDJhkc=\",\"GO72u6vU0qWB8R4rIqWRNk9aT7pZFGqXVR++67hl/C8=\",\"GwlK8nJZ2uXi8ZKfFvAP5T06zKGGfTWdRoGuinH57WU=\",\"Ly+y4A7MER9XPYACxTlZBn87x7UpWdAmnM/qlynYlDU=\",\"BIxPgYJcVYTnb6ZbGbm5//fbBwOdN1Dzpl+qCmCLcfY=\",\"IL4Z4CXqJfhfWZjHelJxDfpdxluyZl5Y+qpdt6DIqSo=\",\"IioFCD0kEFdU4/f+Rezmrdh2d+jmTfP0QEFhhZOq9fc=\",\"FPPYnDiwJJrLA90OETAQDd4Dmx5ELBySujb4No6haCU=\",\"E2Z7e7psB6p+GNts4G4TCM/06xwK7MwRh3mKoel5Z9U=\",\"K8I09IKN3PWHvGXSor1a0JdPWs0feQ1ZDWbo8uxznho=\",\"IUZGRPoPsiSU+Pan96kpNi7OOz65/Nd8+8I7LJBmqb0=\",\"CLZd84RHzEdFW0B7Msi8LHQMC3s368TGHYZ7dbhE+9s=\",\"I2nhwZljm8UFzg2kVgHgpR7/DyZYjXSFPQe0GkC1twE=\",\"GZBRdjOFZy9vgwOJb5WdKyS0z6TWL67r1UzUPhkMXmw=\",\"IBrCDWK5QFa22iiMtadf5i3HiKiw03Bj4iMY+Mi13aI=\",\"GBV/OYq33+dwlKtukaXvTg7EcfoaBOiZadHBGiy9zl0=\",\"DzP49lRnd8UH4qefCZpI10MyWGTp6QqSdHhUWiH9chs=\",\"I3A9tLWE0sSHPnZ0xvPfDhba/TRP+pQxzDNIQk4vuvk=\",\"BFAQYzZIBeel59CpuHl5U+fwilyq+HORffvD2jxb6JU=\",\"LqCyPVXVDZB7+xZJf1apeax/RgFyR32+2ntFDHYl0kM=\",\"Bo2t85AB+R9RoGEwBOlhSlRAK2/LsPS4vYqlRideMHU=\",\"JBx+7MaqOXGb9sasipgOIQDYw0FWXROO3is3QXczOus=\",\"u5V2sxUWDm2eWHi8VM3ZzqOMk111/fiznao0eaKbJw==\",\"ICWZsoS/Z+pQysyjFcZiGPTFmkmifhk+3sS5+TvwUyI=\",\"FwBwoHGoZIY1Zn+DFeVBLEjDGW0dVR7NEUhXy/+bnTo=\",\"MC6EGHb+ZZkDVjVJl5ueJ8ptNvAEpVm9JGHV3KpA0us=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"JzHxrF3AMOwRf7rXtTxrAqbJ4EoX9kvA5WiF+6DC7zs=\",\"COREMHC3/LGij2IPmQgAvwojvTIUbX6qgk8rAvUKSK4=\",\"B/Hqc/Fdi+XuEyxosc6zVzkJdT+GWCxXFQ63GTKXLlo=\",\"BdaIArJvC1ILJIp9T8JGHfd1ZkETGhrRCfoliMRiMgw=\",\"LG259yytRMPdFag9XvnrchbbHnFr2L75YOUsq7/KgQE=\",\"JjZdlQCGZ6HhsmU+mPiZo3jghkPXu/cGx9Pu2qwLFvg=\",\"BS/5dLLQRTe4QTsbDIUGX3J61tpFT5Cd2gqlmU98wro=\",\"K3aWRdqhnisHRwquTNiGcucWDPPAfHsnG2Bmg4KBAyc=\",\"JfVqCuUNMz8pTvoIN2o3w4bcTPJDZxOcZAUUVH26444=\",\"Ly1JsqJX2KpYuDivY1fYZSNuy3bn2xNqCaWglKt8U9w=\",\"Kxc2NmdOVKoF0L8sYMXfCzGy6AHmr7FJ6qLG/XPWpiY=\",\"LrQb+2JwUuHnNzpzkiZOfWgKGc3gMNhocFN1UgfEQDc=\",\"GEGVJlC3IVsknPUPi2x4URwpgxRaxAXOvfoaj1S5htI=\",\"Flafv6peMw9M4TmxA5gOBWnbhU1wHXaiM+ycWo97ziw=\",\"BgxxKBxO06I9fOIN0wwiqhcuJFzlKSNO0YoTAiKp5hE=\",\"Ds1Tci0RZTZYC+e4pcQ67ceY4REMmf6dgGviFA9cd4Y=\",\"ITwGk+OKueDNAtJEdhPVAz/Of1REOHZS8D6VuaGNymQ=\",\"B3LQ+qbHIshh2pWClh4jnA9FVFgKWgZ/nZ6b1x+Xj4U=\",\"E5/qz2neHuPRT0+57NBmgbWNTqN9MJ9gYqK7NIBuSw0=\",\"D9zTXWi5oKnw05ugZUSaf/BMkwGSeu8RPF80BhKZ2pQ=\",\"ElvoSidqasulUYlPXcjhTzc0eX1InL6UVCvovKgsXiM=\",\"K+Zb2Nv+jUNQGN2nWAbuNIIGhsqt21PxM8zZh3kTNww=\",\"B47oehSsJiwtdLF6unHWIGhZh3J8ohSEutNwUtWdO/Q=\",\"Df8qpz+fxDh3fsi+dNSU7Iw2/AStPxIRNiSli6Uqurk=\",\"KC9uIxKsdS0pTRFrAwiYHn7UXiFiQDxf9wXRNvwFrmA=\",\"J5Ggo8ITWC6aJy1rZnx0DmPNkY1TukRNI9CV33Z7aNY=\",\"F0d8VmNVyA/HhDhHFTVvacjxBLAVRTOvPJLgqKExmsA=\",\"L+Z+eagHMVBgE1QxqbRCaYLpDzs47NXY4O16DPWNbB8=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"lXkD5AzyMZBZwgwPxwpfP4p5pk8zMNFl4sYLWy57/w==\",\"D8ma5qt5RFMnxtSH4ymX1bR2cXvSa0ewc0ccg2ejzA==\",\"KWK78Q79io7+zNCf+A6e4WIkk4kJQBmvIozazS5CVJ0=\",\"JakJaSrkQ6vYft3XT4cFyAWEIW1b6KQsecowef3atSA=\",\"HA6MG4vctIm7aNcjnfz9UnHErDnSfiIr6SXel3UK1fs=\",\"C6bulpYsZuwEwHDrPnEoXYyRzJZ9INct5ykfAg8sNas=\",\"DLoSOOnOdHx9SZMg470nDbFM15a6gpMoVW98mNZMDVo=\",\"DIdWNQg+1pdtBodR791svDzWXafJf2QrU2Hqc0+XApU=\",\"Fpfc1zXemxdsTRD8WrEih3V4jtS+sW3LBinvqZpqflc=\",\"JEz1lWsCiaeJqvAPLiytSAzwgkr+jq5B4lnfOVvr8tg=\",\"IGw3BfY9e4cQRcUkW9O89yDhLk8KgvqJofkTZG04ur8=\",\"ILWO1OgOhoMFUi9etnDORSypsdVBiX1RrXtCxOzRMgU=\",\"Cvculd5w9k1iHbhaN/afVxLOBudZaql6EYi804YdbCw=\",\"HB0Vyks+BQgoCGnD7zju4lw9DPrhiLXz1Z1cfFIR13M=\",\"BK8wbZTo42Yn3wn/wg7FY67AVFK2uMGhfpPIo/MKkgc=\",\"L2l8NLWcVZqiMuQAJLxto5BCatrhZQAt9RnX8scUYco=\",\"CKcplSis+2XRlt2aehNkAReKfQP2+/XfPGnmYpiV3NU=\",\"Ih9iggQkBzK+OOLQ/TrdsQgCSFkszz1lU2ThcTArR4A=\",\"K0oF8Ao3O4+3k4tPiBK+WCeWmGETuh2AdJvgQdrEkIg=\",\"FtlNp5knwkt7vSXe/VwPzWcHPXOPMbk/8IutkHiyoj0=\",\"C1Nq26IzC6qaBwpj+GxGXjRj1K/Out9ZojOgMZ0b0h0=\",\"HFelmUQaCxR0UhvQRwqc3M42FeJXXuS6qjiiWVjPF4Q=\",\"HxPbSp185f3q6/OlcfoUgH6XmiPY8dQm+ha6mUFCHGA=\",\"ErUnzYwf4I6dkJz64cQF8RMhU4z1mvOizuZ6BrEdmFk=\",\"HywPtfEebXTbDDASXki+NEwVUpxh1N67ATp7BvB//5U=\",\"E1L0pjIPtRM0jdXwLKU86xpH2GFokmCO/yKEzLf7HQE=\",\"FG3+qyYyGdyudhOptUA3WdUSLJqkkONrpbSjfUifjlw=\",\"Htr3NhXhh+/+DYdkeONoL+9dY+OhLtzMIW3DAtd2aA4=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"HChEJyL7SdRNQLK26G4iGPlW3j9LN2w5Y5VWZqj1cYk=\",\"IOnlwbXYyuR1zRbomdHJ2SPY0g7GByfZJm5mywWFpno=\",\"L436H1SvZ27qPQW8xki49RHqARta0j6WHhtpW0tSZ/I=\",\"GhpQN+V+SucjdT09IvllrYuRH2E9aw5dZMqQUK5DYz4=\",\"G6mD48KPY5jXPKj34pY1ZKm+RxzNXD6wxPjpZjUFlSk=\",\"DUrf5Kff6zz4ZwLlSIgwTjYFfInxDUYYbWR7+nAGiP8=\",\"FcAWbuogzXBd7EtEqsoAfmyeSq8TG0d4nPcOU8Bp5r4=\",\"DOr6vtodyoFEM8lplD5TQAgBK2VVsIyypKv0N5P+Dls=\",\"C9FdijHL+9t8NuVA9McKXu6tnUOpQUAjx2PS+2Q/vHY=\",\"F7ad/5+d/b9r/+x8fuFeqwLu8XJUpSYCLYePyv+u3HU=\",\"Jy/kIt1W8o5jdctyWtRpBp4eSKqUXf/cHplCtGMHt2M=\",\"J9LbVlHlKT/wUQAKNqLJSaej584ya4yZOEWtVy7RgW4=\",\"DoNGbCdBw2/m9fXm5gutW/4+oGp9tYaA3EpRj0K23bk=\",\"G5ewSJJ0pZEsU8GBN+kY2PfTmFA0xhfZ1drky3WZBIY=\",\"CLCbAnZHvvyIhL8jeljv02FkHkolqx6IMWFq2QlqoVc=\",\"IvRqAVe3AZZyDFenY2KFxLEIVHIeRTMpQoNlKxkRv8I=\",\"Lx+AOqSpailryNro0HM1rQGOd65td5eJvXGOcthwmlM=\",\"IkXmHftSvgH921+0F5FA5LW/jLHHr7u2l2OCzHEtmBw=\",\"FoP5vUt5FBDRqImVO3FtlcRAaS/ktIhhB9BSqNUDB8Q=\",\"JC6GT/7jD+CggOIeTSdduDVVYPB7d0Wk5a71jQm2U6E=\",\"HrSD79gxAgPJOkLgaxi+W0oMyWEsM1zcyCwQTDiz6Og=\",\"ClsbTImCmEtu8WLq4B8KUzN8CZHCf67tK2HOPPmfZQM=\",\"EMJaFOUf09+ONPcNs4zWASSk9IN9CwJNWgy8+o4xZyQ=\",\"F+nz7+pCdc5N1adg9CFWRM9f2jZZzILIzcHGa6UzbCk=\",\"JcG/xOZ5s7OmknVbMxOtoF9tdHNlMlJQ4NbAxWYHDKU=\",\"E1YncXHx0qLmd7yxYdnXYGSBUNHylyR+qEKr8mM9RxU=\",\"KKq2uH+fD4xwhpVZRhD8magg3ZlNY6slgpwO7pgNJG8=\",\"FI11IOoKPXqz7lUM8wzevkNMp8hO40aluLbV01rgbog=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"JBcPrfvPBeXTxdDV0FH3HeIxdQAtHwIAKTnrJM5dbSk=\",\"KUkekXHVeMA7owImJTGm2P8DqyWvfbRnlH5UNVOyXlA=\",\"EKzQO5g6RX4+sQ8QZmp1QLRgZu/9+7UKHFmW6OQoeeA=\",\"H7iahmvtXOh8whcPmYEyUS6/3neiqvqE8ogCTr2ebHg=\",\"DZi4MNiA2tSgdV2nYmwMt9vEVL74ixaZLzJCyf3qPLY=\",\"HA2TAnabE40WHUcRlfBrsgpaWfU/CDcxu0uUB69wWIA=\",\"KZu9LJtkv/xgGlHOYBhedwdlq7lSN1BV4PjG7cPB5+c=\",\"Hj4BKjojzFa2m5LFqC3e9Tj6J0XWi/mebE9lZwuKJYE=\",\"EfXiBAfuSA+6WbNa9yPDwefmD8SBf5LWOUzXqcZex2Y=\",\"JtO+O9MPKRMXBaYPxPXVHGYXkZmTv/Kp6cv+CIGcpoY=\",\"Kyn/r+eYk6iYROZQzMAa2gP5H0hTFmAG4O/QWq8+Nkc=\",\"H74yxd4HttYlyG/wBiEC6hrh9j6A6gRz7HR62aZ+igg=\",\"JONoddnxGj/C3CPYrlJwFQdZuSp91CLSuxlmA4NXFcQ=\",\"GFngzdNombo+oaFbalNDmF4kKVdolNz8s5sXSF6WWjc=\",\"LoI8ND+oFbiFDdhYJfXqgMsy4X7QqOzdxHhgmwlJUsg=\",\"J65ma128PcDRnDKgAKffD99mnvJWkWJ8TXsXxvQ0jQ0=\",\"E9OYjJg/yzy3hLIisruNTpR6/dP7HQ5b8quHbqsev9I=\",\"JgVe0vfP6QvFTr7umuN+r2LxHUzn6+Nw53dhZ6UXeak=\",\"GHowMRcPDgzLjKZ/ws2rLCpSdGE6XOGRoXkLkcxsWIg=\",\"CXmlpPiWzsgEpjMoXJRXcotab7+srWJZOiOu3e//4FU=\",\"F6mq07+kzSXZKav3Fdy9p6spM6aGjTNyCl5sYPiOMcY=\",\"BRGSpiTmXA91kMNzhcsaC1K0YgXSrnEJ4HbAizB63QA=\",\"KqFP7uF6xnAOXliVLyjVQ1+6w3dpwydeqf01ymIv57E=\",\"A1RYG0opqa1nPzxXgBu7b4pXCYyc9cFYYLTdJA2DtTY=\",\"I78pwC2NgY2kJX+t6ghAeKT313J5Xdy6nlMDDgbP42w=\",\"IJkj6cwHkZfQAfMwBpsFt1VH5IaFr7gEkxr1o6JBOQw=\",\"BtYUJWqnoI9n6o0GvwOug7ggZp7318HH/ZkqyyKuZ3M=\",\"ETG0hJJnPkdMjiMndXG9n5uJK47NO2r3VO+DofMKQps=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"F/88IK8z3NFyvDBCynuouazHxdNWlKeVvMiuPDXZ50g=\",\"Jz7KW8dAc7L2dhtrBJTUhAfEoCEFb4i3nw3DxHWALDk=\",\"JO33m8NTAMcn05swHegujMIUNej/PzSQVDa+2/pvnZE=\",\"LLMjITGl2GFFEnxh7Miv1m/Opj4+2bH/HvMJmusgR6w=\",\"HqSfsORu3MOpBlH24aSzYXW9slUFzJmKEBcQpPzu8Tw=\",\"HkDTlP7/BwcRbh1DxSOjbqKT0RzjBZtVYu5nigCKWU4=\",\"D+R1JCZkgN8TKlRpiwnoRHRetUDLpJhiOpPzbkjGO+4=\",\"HxE7XXxKPh8RVtzGg1gxjOaZs1KBSuAlNnLWwYVCKYA=\",\"Gu00cndkCgoM67wvTOUjuaUbN1BnLquKnmicSIvEFvI=\",\"HvmOVzgMaoCEqNd7cB4j37tWM575y9y5ZERgpyofMuM=\",\"KXqwZ4eYsGpMxxR8wSW6oRoFjPCIk1TmMinxhTNs01Y=\",\"DuVOT5AVMdOBGqZXXGBAnH5q1LR14kn9MzSIO0OKIJc=\",\"G5sPUjdfNLQhDgeNSCTQ04Xm5BLPF3+GKqr8O28R3u8=\",\"Jh/pjEpogr9YbOnAO6kFVdQoVnvZh2HstXv4sexAhFg=\",\"KNikaryhhun+mzJsFmhw+YrPZlXsqAW4ge4C7U8+gTQ=\",\"BNpgNfp92JmASFrA/rJ3sercWPUiq/AQ3lv50zl08jI=\",\"Gpc40TicoXDCCrW8TTnrOZkqz0DQxNog7z4zlO82m4g=\",\"GD3Ukygw8/Kb8UIc8OA6kDIbl0yTonecxkAxxMAWYnQ=\",\"Ha76V8gYZeih4xY8o51ADPXORy8hoYiPMAdBymHWGj8=\",\"KuSdJ7+NrjtfhJn+n3b9LyR7OCWo9OieXFNZamrFsT8=\",\"CQYxB+KiitjexO4qQ3YABsco6gfcfv8m80wOiL7Nh7A=\",\"AyfbCfUYWImuNuUtskQhQFOye/GNPyQFUtrmK2C63/8=\",\"bmG3P3BKPNcM/oQ/N5VtDDXK/mvSjF38G+mDmcc0/Q==\",\"BISZRVWnmcvBdbzk863VRzAOo78Fl7UvCK26DQ10ePs=\",\"FQmvj3d2Mbtlu+WuaPtL/T5hBAzEwoJQcE4+UuOTp8k=\",\"JQIUi+Vj0tvtci6zSoeOMmhu3cYyNSkv8zZDDKa9XzQ=\",\"CpBYDmUScXR3FuTmXqjcA5NF4GCeRZb+Zf6VOdqhKfw=\",\"Emisk0Nd3D3ijHQB7WYSdR9LJE3M/hp1Jp2oA2oRc7w=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"EaqRMolmD33rfM/y9L5trXVe9Z7tS3FvyNh+JHpv20U=\",\"KecqFuRTTq/c3WE5vsXrleIrdWZQjht0hhTUULVMFf8=\",\"GpWOagsaM58dPc04zhMoVx818Jq7Fobi+0w0WfA2xYw=\",\"LtgzcgjkEHRNc7+qgEndmKZz60c0svHmxQ2/7tJTLqw=\",\"KTd/ZAp/b3a5IrGJVLPsEiFrqcE+ABAAK1nqNPqXS+8=\",\"I0VPJxNxNLmvjUPb6y8UbJqUO9Xsf8dkLaLsiH6bxM0=\",\"IJgWtNoZWX7alJtNtHVAYccqPJAvkTDtyYtZJHCw7lo=\",\"DB6uiwv5JbChVeQrLlFnjPXvwjoH5ioWzn3itfojpDs=\",\"CG+B0ZoxZx5BqHStqnHtrHXE7MxqIRXCrJa6tuTakbY=\",\"BMWZrAKArthPlNsOMog3OS6jM4FT/zfeYafii9JDks4=\",\"LEt8sR6YjVRR6lO9e8WcHZKjJQ5csbgcgBfv0AaTrgs=\",\"ILSfwmr31R8EO0hnC3mkCcT8NmMy5n3Ksoza7V/LjzI=\",\"Ky3pkUAz3j1hT/HMKkYjTdHzYFqfTlL98haZhrMadU4=\",\"Kgqa7a4t256rviLe3QQ8Zw/wmCSbyomy17eJwaIA6DI=\",\"B4u8xUQzACnFcDrYZ9N0qQfv7h84dk5Bf2tyS6IVZoU=\",\"J/KwWRWb5ZVcniJ+hl0Kit2CqpUevZsv5DVFcE8MS94=\",\"B6bEKeEQASXYchIMMHveF7ch3DHhZ2PMCWqYnJffeEM=\",\"EEJJZJBe9kaRP3COjUMh6a4iY4dbg+XGXQllFlgdQJA=\",\"LDOq59kh1LkKA3a5Ou+aApdfqDQ9wAJgZteR6QMOBKc=\",\"EjKYPlVcfUu0KI+9uj32gpE4E7vmFsnvlWiCDgJFm00=\",\"GrUCPl/76o1P6OAGvu67MWKibipFRvUbHYNtNGeBbAs=\",\"HL2hMfILM+vOrP+TOUUbhIVOZXdf3B9d2+jDX6shFtw=\",\"K6C7hAQAD3NhyrGOeGkqF9lTMjowk0q0OeI7ZgXAI6U=\",\"A1+gWArgb8luDkr0PmOwiVkb6+IzxSameXPyXMf7SCw=\",\"Bwurs4Zlo1RubiP487JvBYvxMavxnTwT1tBYijF8bYs=\",\"C2QogsEpU0Pp6ii4mmLO6+C3kZtspeGIEaqXi8GBhJ4=\",\"DGijb234wn3uofZviRyA/CFa78ZG9UXWPK3yKrRLWRQ=\",\"BmSJs8yYnoB74TY9lyBwFKKhQFLegO3NFcTi+I0sZdw=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"ECbmJXtD4K/uIqAYnyjhBxj0zF5Js9FUBd+F2BU+jhs=\",\"A5R1iOlD39vZVpTds6G6f1ECjIR7ikUWToe1UiQYrsg=\",\"GxyyxJaudkv94ojqUEBcpq5KxvmtGZi4O3VXeHEgyxo=\",\"JPpPnvcHp39PN0KqrGuPxbxZ+oxARvnQJOPV2ArAw4s=\",\"IdyijXFgaH+8jQ0UTAYnEeQgf2F4lfpG3YeSJ3f/EP0=\",\"CCzRRoW8OzIZ4adrprLNa4KGQFo4cFJzp/rtodpis6c=\",\"KIx3NM5s8AF0K46E/lAs9SBaYjo/D+HXnw/pFt8HPEo=\",\"DL6vV2Vx67htF1uATEZV2nYDCW+YZfmDoES9jrxBZxQ=\",\"JXrs5d2de+COg99ktQtf8eMeTLbvhhDG28nqtAmuc4M=\",\"F43zavZ334GrqKn6nTH5lTeNH2nXggWPfvdpVVrVNj0=\",\"CInIfziwJEaFAUMS03muWuk0UxuiC36J9uHpdeltW+0=\",\"KImOy2oS2ZlHT3zZjn0OPrnaQEy0XekoURW2R8rzECs=\",\"FUS2B+4lhzzDF/briLcrqTcf9SvLZHU7DpDc72EDJgQ=\",\"Awt0EmTHOVBjW6Ya474y62Q9mnj7am9pWtQEbxspqH0=\",\"JQUtM4HhGMGZXOIOvunxz2FQU8r00szBQ/sebEzhVPk=\",\"LzC+qJL48rM1uOi9kl8kQzXkMPDHeiMTAT3dbtQN4Ko=\",\"Cw1l+naOBqqOWxrqMqLQ6qddJUgpYmjXvcHEt6IjSYk=\",\"H6GhAUujZDbBp9jOoYWAxXeSgintjjDOlNq9mLhz/ic=\",\"MBxQZDOCjsz/+/iXV9UmksfsYz8y5yat6fuJ94ORUKU=\",\"AVSnEQVp3OLU37sMTVkGaYEXUVWKBiB6FgK+8Q00KO4=\",\"LyfA3Wc9Y1OEBhLRz97IlAfXoj4lZ40fxXqvIQNVqEs=\",\"BIaDvNQ4iIXdOVb7g+GJBxDH0cxdEDtIwut6TkjTxa0=\",\"FRw2SKAq2STumv6N+n8WMDPRaDqorZUIpslqspwIkIs=\",\"FLqnCt3566SoC72gPS/OkuVxSG7ag/DA/lmn5GBersU=\",\"C6bNlyy7OQXtl2ti7TTZckRNghHHH4KnnAif73oDDk0=\",\"Ja3JE42CPu6XsNz55xQsTXkbq5LBAhXVtPRO4WbEQBg=\",\"DwQWmXpBjSogzaxsU+Z2QNo6tLXK1ao8nEQu+4lbd0Q=\",\"HcPk5dny5Yf9lQKMY3KjBNmH7aBSWHnRt9p8d18KQX8=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"DNrNJICE++ee8xTLBqlvkpzpT1JTAeiFjmsKtBmnskc=\",\"KHZd9NC3WRWyAAU44Ap9zIIZxuQo6C9FLOiILmCe75k=\",\"DoGlWS7tq1F6BRy3I1yL8NwMMyJYplym4pqGJaM0/o4=\",\"CIwGS/fFU8fk0bOEJYg/VNV/GKf46YAOBqPCMQ8BsrQ=\",\"HSQzNGhyjAMPAaPJP+A16f6RPzIixxScwi4h1ET6SfI=\",\"CB5NATJsRZbRbV2d9AagY/DGsyPiqOQGsniDkaayrd8=\",\"A1KloPrHgaFqLYvXLJQCo7HTYZm9TqRhJeM8M3MqsxE=\",\"AmYYvA/YFGTyP24i/Bn611PfGzwHYnXJXg/8Q3dg+7w=\",\"Aii3ASRoDJkb6Uug+AFuOEYJ56f9sqtA1mFhTWWlIZM=\",\"HQugZ4NPpUtQNHKXo1JaYZi/x9R91HEGByx5AbkApKA=\",\"GWsWtKPyZBzGs0OlemaGf5a+RQBd+cn8nQdxABCh3wo=\",\"L0VpX/FIyse9NIsJPZTgdac/T2C1IifrjtYEj7xHrrA=\",\"6TKJx0FAKqG8FS3YK0iJtlfbKUTdbMXJy9jnLmkGPg==\",\"EjOA7MbAnaXp9a0tKY3GDdCp03pLZ9SDPS/kKK56jbI=\",\"CIPoBCGdXt/hsL+uaKdt8Y8cqTkge2sL//e+9DCccYc=\",\"AhWIWI3svC8z/yWjif7JX0Kfv0O1SrI6sg05FKuETqs=\",\"GCxaUv5sbSqsOKL8Bv+2VZWhykEQywmrb1Bw9ZYvxHg=\",\"BqWN7xHxwnzSNL19m+BGEPUraFddlWDT3M+K2bW3Qdw=\",\"Kcu7XKssnf/FsSySMK+qWcfQsYRv+bvQ4x3jIYr7d0I=\",\"CaHU9PADI2MNxPLTJqXKKCPneUTr8cIsuTQ5Y8Yn8Xs=\",\"JfUVf4oZDmv7serpzVWBlgkiChlv2JzUS1tGA+gOh6Y=\",\"LweU569odLdGO/nX9/bNK5FBsscXVOSo5Ifia3I9DY0=\",\"KoFsvDFetyWZW2q3Bsbah1e+xvWIhJ+F0QsxdnmYvUw=\",\"LF/ZLLaZBZDmIFYgV2jaJcgTLYvtnMeH5zuB3Z3cVEg=\",\"LoAnagS0hrGjaqr3wV0ba0vUgjgGXO9eqxwVMjXKaTc=\",\"FSV6d9RF3eklnGFRwK9qF3H1wjkkpMT3/tWGac5Jv6Q=\",\"EhnAB+lmTYpUvnOgMmLQO/4V6zovjnyRlCcSNetDWBQ=\",\"CVFExyG6OxgyTlXlMohc5nYTRE08s+lZVdcgHXeYEtg=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"EBpkYkGoMV8gTUGtt/rYOxpQLqCefN2BWyFiXMDr4Jw=\",\"GSgtaWe9IgkeNMR/5yJm4crcn1jU9GedySVcCcKFSWM=\",\"BCsuk2XpX2tq/sQWMtmpM/R0QQYxXj3y62Yz+4c1avI=\",\"CG7WtJUR1r1IFcdlE4Cad8J35QbDBSwr7e2WBmI6TJk=\",\"WKT2a6FYwaootlGRfx+8dEtShrP2ZyrTn+F3vlAzRQ==\",\"KN3hC8+Jaap6W2uh1I4tzD9p37siRWbLP8l3JEoZbNE=\",\"A4QrYd8YMrxrTg6nDXEx97JWGpT3jeM3Gql20F1jWJQ=\",\"LDvt3a+5S5QnmTwZv6GUcu2MwGYITHz6XF5/gDp1gr8=\",\"FjVBt5+B238nQu+jWE8H4efdJaGa2TRiPhS4f5lgF5A=\",\"GEby5blvirvyCipu0NmiYzNzEDcs9XCjGNw8kchJ8RI=\",\"BsejzuP0Fm5iEvk/fW7/YBA88W4lLfMNEQz6AQIzGxU=\",\"Jb4ZT2o9aeO/Xwt89YAwp2HmKLGk3gA9nooC/CCA73Q=\",\"Jpn7b3ExYkTBCyxnKy+/B38hfhyRDM7wZSSvgPnD/g8=\",\"Ag45E3iZ/A0sU5H+GFOUFzAD+vh83z5Dh5ixZmFGtWw=\",\"IrlhXp0bWCkhSMWqqMnu5dVAqmK6yTzL4WxbZXFh2lk=\",\"F6QDnPkPssjKeKKrhHTl/NG8x91JdDAhKIkPeSlgpyI=\",\"KWp5R+0IFiElIfgsyDbxt0dkDtkxHlqEMrJPExq/dNo=\",\"DmIi0fZYAhrhqMg/7xB4tU/ilxnTCjDjPpVTAUCyrF4=\",\"JKgy0LYtf+2yQbKJ6V/H9FB1VsQiGDzfG6/RpRYwGWA=\",\"AxSXj/vTaxv2tu//nO/9/SLDEo2rAwNbxNGBHtOiJGU=\",\"I0Vv7eu+9D8VQUC1bwEGx7Olt81g984qCFpZ0hk2QIA=\",\"K9/TqkvKiUMS6fOSGSWW7+eq2+eywiqumQwYzjLFbyw=\",\"F2fY6H/43ehEuGGvFy8BGoCU8sk/FKNn4/QAhBR3mZY=\",\"Ca/qO4A5ASCcYPvtdklHSOOvcEzT1o9tzYRrWzfv11I=\",\"Hu+afwgDMUcd0p19AQa5WxzzCFTCAdDHNUaZ8sD/GPo=\",\"GsDfh4j3trJkxLX7HRX59DzLaRT6YnpkVL17EHOY8yg=\",\"FTWH3YhW7xxbpYTLxcYgb/JzFhEbywiaNwAOAf4SFWw=\",\"HsNCLwHTZ962Vm6j83yq66bm8aubSH5q3Nmr5/otF6M=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"CSqzYgcb5k7h3v5MRksY6pVwA93U+yXvHOjJPrDaZ+I=\",\"IIfEgSvQ0D2XGXnzQSVuKEpoa2NWS5E8YgPjozFqC74=\",\"FenTevseCHfFXNUhy3nF8gZY+PI4uGeaUKv6te3UmK0=\",\"LTrvXxWMNMEv6ExNSNSd/Esn7zrZ9unCm5UWvoXfIz4=\",\"JEo9R2sKBpAVihvt/yjPq4v29bpEkWkTJuaxtxuyZQs=\",\"EOnQRs3sRRJPe9OqxEa38OulaN80YshsYHUc4+UcPuE=\",\"JZAolYntwxEuXYe09HSQT6ndTcTyYpjR6WZsKB3Vg1c=\",\"E3ZeDKk8twi5zx7LZCfxoN8LU6fRErwaFDnDr8jowTo=\",\"GW0xkmUbHotbHPVOd17qOk9NZ+YNsvC+OA7kiBn9SV4=\",\"GMgeTvGccnbZzanZveCz1DNPR0jHbbUr3Eyw3pHe86U=\",\"JfQibOLJkv22r/wshcjKZMnbSG6Ecfk+MNlwRetK7lg=\",\"KhUsg3acmpdTgpV+rMhiRZ5CJwgO9Jd3UnOZXD8ww+c=\",\"E73G8mlAJLHiHj/nsoHkSkjjLDGugVruooooMYe/znM=\",\"GL5Q3VZKe4YrufP9giqebPhScpDQ//0phrbvsOTsPsw=\",\"B2tonPb8JnRpFMERh2Qq1FuTS526hJnh4PZF0ec2CXY=\",\"JMuWIg0C59GDzSjN2JAkZH3yHeulXiC7ClKZCe1IPbU=\",\"EJJhSC2O7+3ZVV6qLURm4blYLNtQ2tlo9zrZbfg7avo=\",\"JPM4UP5NcBn/r71mlTJ4jQLGoNuzmUitoLB/REqoJO8=\",\"F1Npra76Jppmuuwy/9YNG+DuHznKhSXctzpjV4YKuy4=\",\"Jbn+x8x/ZR6DVNeq6G3Js5ZPvexEDGyDaf6oHuqq6LE=\",\"LQyLgt5c5MVQJfzShunKV1w7C5Cn2l9negUEwFpLDLc=\",\"InQ33QY86m67hfe1ZCMtIr4pzdd3JkCTbDaYt8n+z2Y=\",\"G7ulv8igEMsl9je6aGFX7qRvgghI/Cwvxjb5M9QBQQE=\",\"FEcRAqXsSQmt0sc9osYMpRiAnx4WC+ff0Upumzl2g+Y=\",\"GxP7SnFqhmG9mEV0tVJJeEV2uDRvwkX6f/EVTnSGI+U=\",\"AmNEw09FMnRGOq8XB0hVCj5c04+w3/8XOi/8oKfy3e0=\",\"JUG2LIpS/73Snqh64JGSJeEtyr4hBLX0cIcIos9Pw4w=\",\"D72SK3PxbWYUWMZ797SzJarzA8WhKQKmZ6eMhQcDaXY=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"I1XwO6BypiC1aOfTENn6Y50TT/2YVhzb0il76xPqDxA=\",\"Jf9LsFuW8KCwVWIFeo25n5fh4pURN8DED6ky3nPKGe0=\",\"La+VDIAVT258SXBNcF4UhxJzSZ8vYZuGxcXRV6YgPf0=\",\"BRzvzNuM9pKLkcMSd0fXAOhoRPEUjwo0xtd8W4Sf5pA=\",\"I4Ji7FRn1q80OzNUPNX9zfkJBiyE+BL+Aa7VzIf8R2s=\",\"C32spAb8NsaaqVj6YW9IONYand4uRayLx4j7LLIQGeQ=\",\"FbyDxeaASNNqud1XUJgsCG6/DRVSVNiYxg5kQjHFThM=\",\"HGOWHVAdCMQ1WKe7tq3wJIzn2FxG7Y0Yy1f9JV1w2oc=\",\"JQm7gWn9u9R9olpyKe6m3tHGGdPAR7eDiqrOJpNlZzI=\",\"BppQ1MHuwaDtUCdMb6SGfvZY3BN52Pv5h41LNen6mb8=\",\"FddMCHLpsRZJks4DlMq5/XIyIOBpbSjqARYgcWvhrxc=\",\"ELDIFRkIY0IrQti/vGiSHR7VYQVa5QV7RcXka+Wm604=\",\"DBHDBrUhHrNvy+UFp1QFIlLdxiLQL0Qgx3OQhR1sQtI=\",\"FQz8pEW5M2ziLfytEXX1l3lLL0v9GKl4DqoS7vLuXFU=\",\"GU3jHQzhhmCqdGqTVtlgcM4jeUTlMEYwiEh0ovunmNU=\",\"FMIHHZ19+Ai1CxnnfjFEBq7osznEokWydwuAKveQ67U=\",\"FYR8eaqOHJLBjDv/MCwx6zjwAYBMgpH9WQy5Alp9EqM=\",\"D7uh1UiXiC3mx9JiA6qWw9sp14iwvUNcHTVMJxsSaXM=\",\"AaO37mxPJOqS0iKLS3YCI/mjTY9ww4ckAJILwGZGWHc=\",\"LOYQFcweVSCoPAEk84qDWcrtpTBRGUcCSF4AzC7QK/Q=\",\"K4vgOimg6Ptiu8IH5YfetG7aW9vpnlIudzv2Pmz/YzQ=\",\"EF4a7fDPnxKtJBakT79FjWI37olZYLuMJSmaxyveEvI=\",\"EgxQTo6Z7rFlOSSWEusalofi+Z5P7IASPwwpN4VTu/g=\",\"DzWsOSW2bVK95doxZVsR35l1vgDvy8p9ok6FUJ3qL1A=\",\"D0lXFplY8guMsk3dLB+oZou1aU+4LCd5qT4tmTwqQ2k=\",\"B/YbPMXxIgU1zcYwuQMxcsAq+gp5iKV8NzqRwTJj2AU=\",\"DhZCmklaCHgomk4YevKzueA5XKNAGTi3DwfAZHJzrY0=\",\"GBkM71BYnmxz+vNItc2Ivo3LtE837N9w6Uo7QEX7JiA=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"In8jIWTE48dBr6Ew0gbNhNg15IF8S6uZzqvgv02ldd8=\",\"Gx0JyLeuqVHUXPE5DJWwPCn2ggSSziR4c53wm5vw/lo=\",\"G9BAzc/e2ebQjT1ru/VahqumqlwTzwn/TMbbKEIKGDA=\",\"LE0vFlNWMvBQJWCG3U4siEeaHTaE7LjCX88wlrPhpso=\",\"Dq15C/q8foH3zjttaBNChpd8YZoT7+9awRAkRyHAl6k=\",\"CJAHVDWKXZcWxuL8FxM9qQaXlPrdQkECE7XjDn26dWU=\",\"JMBjH1GJBNagA+Ils009AuLlZF98a8689PmUT61Bnyo=\",\"CexhBaBXYh+b0Y/hPp3t4evtzm1yRh3BxPqr+hqn8QU=\",\"B5sDQ8hl4HNGJ2eyAhP/qUQ9sDh8lQZQNYbuUzMC6AI=\",\"B99j0UK9bCnuA6yo0dVCiSCn/eZDe5SRSTJ8KWfRQkU=\",\"L/JsgWnOxiAy9yrCVlCmyUoYr8p9BNoOMpHTznGncRw=\",\"Fk7au/7toEaITk+FleQ4Enwy+EZ9nech+1CoFmiOM9s=\",\"C/gwavR1E2owWlp4uBjB8tSaufoYHBHeUW44qW6/n1U=\",\"FtpRvzK04TS9sFkm97l1Vip/L8tnG/BYT7Dk0z8zY4w=\",\"FCkwyqGCi9hC4oyHkN+dAz7vrnsWXdzlP81G+G074vA=\",\"Gufgpy6brTg9CdBVWh9aC/F1POGhfiVLSb7w/Imabpk=\",\"KAMT334GbfHLY5pLMOoqp4ukZyBZXXfuMbVd4qcT3FQ=\",\"AbpiBV1KazJX+ma0cfEb6XlCLAXTqDnuaq/+esHAskc=\",\"D93GyktFd4xJp9spPHhihDHtyDBRK3scjldU7S85/wQ=\",\"CSnTLfU/GW6FipexeLHUfkIkfV3PN7CLSFKtdPnMeKg=\",\"D5Z9FJD/oygAcacYATs65/lyd1XSYfodhcPvewVZKD8=\",\"D1SQqJtfyVwRXaF+GBp+lbPT0iKec1gca+qJoO31Qhs=\",\"BnS/4Xf9wTAfHUnCh5c0yuFiiY0RAABQc0QCx1OExzY=\",\"GOGt49ce72exSZVVUWZx7Jl4oTxdoys8yHo3OmUV62Y=\",\"H5F5r7f1l1vlN1aNqQP+CZROJXsnV5NMzy42FJAh8Ak=\",\"DBGiVsNcY4pl8C10XTVxL9MDvX0xNzEaEyIzlAJHnug=\",\"KrVXhD27y/8Uez8D3hX+eejUDpzWzFVrEpWL7nqQD2c=\",\"Fo3RJ7pFgoSOrDZNc36HvQICS4kktK3aMamjejQVzqQ=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"LE1CenvsjRlhcEU2DlJ5THoabeecTpGWmKh+xRY2bMo=\",\"A20BoW8wvYAlRN8WnHfqAsAAg0LNikFeZ+SfKrIFOLg=\",\"EE2tp7crJEBdwHpP6vo4X91uh9DrDQsNRhvOVsT1dNQ=\",\"HRic4VQBkxJ0JuaMfvv2EWvilPTjnCrH+0PuzipSMPI=\",\"IJacHFp1N9YTMTk/aloq0V6/Ue+s9rYfN8CMjqCCPNY=\",\"Fyf4sOuVlSKbrzBbP8mcUdU4Y34tLqiTEDfHNQ1flso=\",\"GJf2GcYVqS/AgqWJ2Jp8UiYlQyIT1qkvrZ4mJqoO55s=\",\"H2JZkUPx8yzU77Qz8U7RRURoGHjbVYePE+aWlKIms/Y=\",\"EYwskoSNaq7aXIth2O1pU7e2WaJe+uYC+ZYTU/fHgdU=\",\"GJlyielGg55sNVQZS4fmwNTL8w9HvHOxJtbuvkehzsY=\",\"Ew2m6zRN7mQDf7UTcDyqltiquoP3yAmTCLTmyCsUzYM=\",\"JFNXsLYSxK6xJUDbmuFSZRPniFzlDujKC1jFv1QmFWM=\",\"Fu+s1ILgfx/uGMlq0XJaqjPKxJTU5zAaoXPxwppiVYE=\",\"Gq8oKg20FyNLLwr814KHTsKmNYmfPr3zP0utEYrN+uw=\",\"C7Fumib25ESQFqOS9YzAq9wVg4zsCGOhXPJHN7epyAQ=\",\"GrCR4EOgMqGooXh1wJkw8vP48BSWaXfHZy4FI4eohyQ=\",\"F6GxteBzAq/hFWNyaRNWrTL3erlbbcF2bP3UwC0mDg4=\",\"GY+MICEoFQKpIqA7BLNBhXHUzk9TWcolEBXkd/2YPZY=\",\"HNcFvFDadkLo9Bl1q7KsY1k86VdaDr4OxBLjPClVExw=\",\"L2NLxuaI2utksRtxeAMH2ZiRbqfbTNesB2GgPdP7F0Q=\",\"Bw794GFXA0bKFIlV3uKEY04otPXvFNCQGOKJpba1xkM=\",\"Ep4foD5DdLaqfMLMvDXiCmEkuE899Ju8w/WqHCX4Vno=\",\"CHJ1Dn5OAIZ8opqrGbAiEZHomk5+F/vA4Kl6a5nXmBY=\",\"I+jEPFe53G/WuJmBikQgDiVEvwhl/crFtCVnd/x2WSg=\",\"Kmt5TNA8cO8GiFy1rQFpjyNAh3pahIyPSe3pO1yegws=\",\"CUV4QJ1kYufiWtnQgWpvbisZjEZHlsnI1P1WbfJmCZ0=\",\"GythH4U0WLs/krB9l/So0P4yO2NZWWZNcAOs5EZGucY=\",\"IFsPorby66rUGr0rH+tPevADtec/kdNC3Blq4YL76iE=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"GIE8F6GZFwnfw9Ic71GtK1pyhzHbNpwk9TycGPdTeSI=\",\"KOLxSR+qExKy/AdW/JPm+vJgzzyaeYxMdVZ+biRQ8Yk=\",\"JFbPlNf/bhJM+FnVxB5M84526WxmNW30lZr5DoTKprc=\",\"GdAfrj5r8qPXOOWtwUDMsFZnSKvXkyPbMIX9G9OpOKg=\",\"Fbm7jBZT5kTwzpvlC8WZvlQ9GBqWXEex5V51wSjfZFE=\",\"CvVKNIa0TWzTRNdnlIyLq4ajt3BzDVeNNclGB2ulVig=\",\"AsQDkz2f3OmyNW6lWZoXym+ixSdHJwLTOhu+HcZIFYU=\",\"H4YASAOZKRvNuPK9RBDKwW9MwDVZmm5/f8OJbclVleQ=\",\"IIU7c24e9n/I3RZdP+EaZzQofvy7ZST7bq4aZqex6N8=\",\"L0YwoPABiwTGu3foR3bgbjskUtR74tFiIOrR2mEQayA=\",\"K5A2xI+a8bMghePq6fVBxOp7ZQ8aUibqZhuRJSFeiZU=\",\"FuBlMLNwupzgMOzDDwY7wGTXFt54zXTCJi1INAbg5o0=\",\"FpZfwmLgyoeaky1yHpXRaVMinup7PpXL4yW0i79OhR8=\",\"KCNh5hNlvkR8lAvHuMrd7xCoLopRQj584X9MzIrGgm4=\",\"Dl8FvD0vJ+r0i6bvu5X9M9Kd2dNxr9tGBlCJ8Htaqtc=\",\"BF5J0F6C+cgZKj/TyTbnPtB/Dt1tsAByBWlaI8knK6Y=\",\"Guw2Adx+r2FPgSy8Al6gadKtHrKxyLtgJQDNyLTsl9c=\",\"KRguXxnY5I4Tt6mKGb5FUvCbRS0Ok/uHazZyy9vUjYI=\",\"DoL5/rUH/RePDiwMMk4H3O3NwMsq10PO604rYt0TVeM=\",\"CcC/Awg8en+E2tYos1KKiQAdQxAAOUkbs3KTGb118wQ=\",\"GsCMS8MiKCUX0+kgHGAYIxZYgqCfg+Q/rIRsFiCqAbg=\",\"JWYb+3bZdqpjKR3iYk5/MGpQ7EoyEoo5vLts/jSiJ9A=\",\"Lfv3Eon1f61nvjQ4zB8NvJaVKZQqYjqJmt3+t37xlF4=\",\"CAWqqfEqF78BKIzKaK7BDPCNtrz0mou1btv/uX9oht8=\",\"K/6n15oXcg318hXUKrVzYJjIPaB1+suWTrL+9zCyJWQ=\",\"KXMV7XrG+byStN1KQFJRmlApznyX7vhP8RpGGGTb+dg=\",\"FylgcEynQiLN2cjr8YIQMTErTCHLsoLB8Rze4+woKEw=\",\"FLMKjpDuah4i/eIVAwlLr6PWEASzimnPlLST4QGj3Sk=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"JcL7k3WKNjJ9vrff7JDjMcrQWgTlyE5rQOZZh9c+5Eg=\",\"Fb5vIsvV847HD5Ez6Dkuj9tB8o2DHCe8s25BX8+f6EM=\",\"HSGH6a+XDO/ulJ0IiMc9xB5+JX4yep8g5GSJKFUeBio=\",\"Bpndy5HoVr0lvsiyGYC7sWPTiiDUf6nYE6MjJOgKx5s=\",\"D87Qod5kCTlHYWreV3Pg97oi6sSGIyLdXseH/f/jMl8=\",\"J3aLKWNaQA02XJNCAuS97XGd+O/62F5u6r7cJKQVSIg=\",\"Gx9mQq2HEGzRbsVCGzjEA5JCP+DRLygu/IR07+uVfR4=\",\"Cj42XTFZCEzGc6RARL3UJg4b0lt090Z3Kjx37z5Iy5o=\",\"JBedXmSZHUWgY02kNRDM8KNAWWleFRaCudNWQR7bfPU=\",\"D7u7Z6qIZVVk3jiBTsY3b02pfuJ0WGxSh8Fj0bD5jdU=\",\"Ee3VQ42bQWjW4ruu0x8x6kZNurgO1ecCEm/YLtODUOs=\",\"G3bPXiGe1LwxGgDNsD4o/7+GVCy9AlLQcVu0hGnBXdY=\",\"FIQ3sywrxIli01b/yqTtwFvphBNPt185VtXZEET3k5M=\",\"EJQiB6X2a7glKYhzD7gvI6Rb4mOJSJ9m2m+hE6QKsMA=\",\"EkaB4oYj9CGW6K17sjdMd0h8N0hbuhqQdYWVgtEMBhs=\",\"L53FsV3ECOfpfq07nYz8ZU9pFJIuM9e79MBhzYWDuy4=\",\"EVl+j0VyHQ+KKQDseCMwIAMoKq+ru9//xk5fPKonR3c=\",\"FO53Gx6A8jsvxY0vmNQ6dd3ipcfTf7DsOpC2Ye5PGRs=\",\"IhQqy/hKA9+NFt0uptrYtBAPhk5dqy9q+qako2YSpME=\",\"F8yiXD1F0ipX/pBKsg+RbZsYkNW39w9W5XMjJaeQ5jc=\",\"AxIAQbHDpMh0RWcjMyg/4o0Y8F3rXH6f3ObNp/pNBpo=\",\"CWWxjpO96EodhCSnTmnraq56c/ySDlz16GQQpGUR/6w=\",\"A2AfKgBY+F76g1xe8CdnGfgHedhU6IE3Cj1BUKaKS2U=\",\"FPBFTLbdrwlXllGq6iBTIDbub1S9mJNhSy6tz8BB11Y=\",\"EYROPXNzGqdu3SSvuCpJ1gyGHqolV5xF/LI95qRWZ9M=\",\"DUmzyN5cigCe+5ERbQGfl8Ae5Sicpma2gH/In6BpfjI=\",\"FaxmII1T9zDZlavFzXLVCtkJCcjNzhfFqni8CydKhXE=\",\"HJxcsC+3i+UIqBigcN7raWPGh9zil1qkWTqJ/x6mdaA=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"IQtd2Le/4VGJ066o5Ttbt7RiIE6Orh+Vlr+/HKtye8w=\",\"HnLhHyGrwipPaLN03YcmoscvmJHetlNvOkvtmM7ECFg=\",\"HQ6kjRCeN7pNFEpCUQZtbXt5EL+S9Erv5wgQJ+HpT/s=\",\"GcbJ5U3YMUp3axsejUI8sv1bbUlR86vfcXaHWgg3s+g=\",\"FyK9IAUHE0B6tCi0oVmNvOhuagT5CT0NQVtUa8HSZek=\",\"G+6e4Fd/SkbpUA8gZt+//Lr3dSEUUPUh4TrOrNUZAQ0=\",\"BPHDJsiAcqBTMq0U0l7ekNQwOUvY6AMh3WhppWEoLjc=\",\"LbSd/msvb484EC4BkgapCFA+Jozb1f12iYVZMjlJUuU=\",\"GMrPX8vh44NwbCrm4pTGkeuGB05hFDkgDzm0nbJzlAk=\",\"AlHjnv3WBuXv7v5Dmh0B2s/WwpcpRy7YhBYNQBjR5RA=\",\"IMpKvTFOOG0BVCNKlLxbhVIqFzDABVKKdNfyFH5ElDc=\",\"D9jTCSvKe1W3zOz5QXKthu6wM2JXEIyloXhsuIvnJJ8=\",\"FKJi47+uFeA0Wh+DfxNDsrJF+j3HBpVr3WSnTEjobiM=\",\"IeVEkZKPOQSBQ3M0CqZaD5e+Utvq2bkQEfxFSy3I9uo=\",\"GkGRi4xo6o1nUzD2GEGTAs20TXxIIVYb8/dfEIJMwGw=\",\"IZMERftfUlFZoX2pSi3U0oSFeUgBsMmmlLA7hJ4IeNo=\",\"F1Na89lS8qNWVUrQGDaX7sHIbtnbESEDbeid+PdYx88=\",\"GoLzyUPID+TuN7I4FGFC3ss4nWmRig16vZemkeKrgPI=\",\"BTuULG8hDwc/qcWPbmB9pPysra415b6jTutqVMyi7rw=\",\"DTT5G3Q6a6UsMgUr0GI4BPyM8r04S8mAAkNKLJYUM3w=\",\"J0m3yFxxrfvrWQC2M0xNq8mSXpiFyaUl508e2x5jCo8=\",\"IoSg8e5qhv9EfVHmQpUcp2pQ/D9MDQCSKKpn+amx+VM=\",\"IsfyUFPRHoh5CbAq995+V/W1+dN/91rNjM27dLcX4jo=\",\"KcMOqRZnUEXLmW89LzZiyuEV5oIjKfk6TRWfGK/PxJs=\",\"DlVc37FXbpu1y3CpI0pukji5EsnWUQDy3V8xML9aAA8=\",\"LxbmqeC9b8C0HZG9Bl9g28NheWB1Rf1Y8LHm77yG4XI=\",\"JfJh6ZmB0/0rCUoT390U4azi0BAJc84DMQgYJrjGnKc=\",\"FNG0veB+qCUF68T0+bWZyiFKCZ4IGihqIjv4MJ6bE0g=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"DCFh0N/h+xsDDSW6nnLi0PnHvhHtw+4DEN/33sPtEOA=\",\"Heclx/bJlXIeGh0KkMsxVjEQ7q+BRWo/ipgJRAyenhQ=\",\"EjiZaJUBFvAXev4rdzJgi6+l6NUDk2aIRPnbUEVXKaY=\",\"F6qiBizd5X9KZ8cFLAmQugiz6HRjPdQSN8tglCRtZ4w=\",\"C5mEc37AplQfSEyf5IN6djm1jQF83M0r6zBak3oLebA=\",\"AyCYLXVhdvhS3NdM6L4Va11/ktuZ31zLxcyW6T2Ddz0=\",\"KkMZ0LwE5MGLmxBZg8h0TKTPxCjyDqR36aYEQcoVzVI=\",\"GCuUNOidtUe9SZpRIq13hUVilizwQ14h2WDRxEmO218=\",\"HSarwL7LDkItNvTFmzT2/ne6dxGSsvytyM0JZb8Mz7E=\",\"CVip3OG2oXYg37VMNkrz7kKNyTLYHR3EZpUDhA3LVB8=\",\"CopwqDedcRNvvneFFhfL+dUiV8MsnDykyAeMkM7XFg8=\",\"IIqahAAlvAw4uIMhP7u0LDEcTXo/HC1TkkmZiS+p+TE=\",\"HxrOwXZrJXddtDmSmxVQc0/YIEt3r6sJ5CUaLh4SNmQ=\",\"A4flGSDt8GtkxrvzqpHW3oCkw6alVJPEywOPVas3m5c=\",\"KDo7CZs3pgNpQmVpKV4ZGWNaX1V8JuLZvWICTtQvbLE=\",\"A6grB0hqYedp1PSpaREpsUl+rR6i3NTUT9tiazH6TCw=\",\"Fa6ntqROAb0qGZOoJLt1F3PW/yDTRZl08AYCmCsg+Dc=\",\"CRODqo7lgCSn0OqsumYfoK+gQtRJC7AgYaAFeZ2JJv0=\",\"HEc40y/thGKZZ6JJEh0lr9p1jsZrglcw9MAXHwWYGCY=\",\"BeEKKb6yAqUjgzijy2862B940ESnkcsDz9YzZ2eDc8c=\",\"DjQFWCphT07ChGXMyuOC7j5W/Gf0V0hG9aARwq5LsxY=\",\"E8LhhzaHElQ0bnlR2ldYo7/brqSjfGL1IE4tgzyf/sY=\",\"DokqCP1NF/J36xbYz26mCoqyY+0xfCCXDFTgJlW7vU0=\",\"A4wjAmVCQk/Klyn1lZ1rejANfIZj3C3n1jyY+3N8iF0=\",\"JCVgh1okzL3tkoww5MeOKPNpdbF2eTOIjzo+7cTlZ1k=\",\"DjLsbWyA07rAqtFjX7GVq2QN417Z4Z5gAzdRubF7eTg=\",\"En+B2RWnVGyy01ZZGB9woxzaaxwPARzz1NLZCORHVfs=\",\"L+6xw/MIE5rk8jztSivT33XH2+f/nYmrMUBf9OH4gDQ=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"Gr/RV9ZbD6reZwxgD5ZKBYJTlpH5CaJ/E0Kufx0fFlk=\",\"KH7fmAkSL+f0JHSL6rYEwEJw3Eu1SZMqtJ2z5CzPZ14=\",\"BXRifNC48CAzYhtF7gKTN20pgR8U3HAbaqxFZcXiNG4=\",\"E740TO/jyyPYTeJsuNzvnsId5OJ1Z1y4HY4HG1LbvFQ=\",\"K9BMLevyRKecIsNj4GVtyonuSmQRN2AiaHluBI8iL/4=\",\"IWcXWc47f6O43SnvS+g20BHIAukKW9KFDbQj8LhLj5c=\",\"FeLsofTyTFNO6Z9JJhMYW27uNdqmAe9cc8zBshg7WSg=\",\"GsQoocQDrKzqWxnrWp20SLrbCC6vEqC9s54z3hsqz/U=\",\"GNBW/giGtTQucJh6p41nYOh+v4QPzlSrN5AVmiNZumM=\",\"EDR43oJpl1bImGkK0EMbGmLQd5sHJyiy6Pnxw9wP3EQ=\",\"A60zRdTgua8gpazrzSPwZ8zYqtMQmsfRgEMCQqCDvvM=\",\"CEoqChl6divWxjPteJrhySrz0YlCGAHiz/TKTLe7S5s=\",\"C5+sPxtbd2m/NpeA7ern1ACVhtju0333YT2FMiQKSys=\",\"K2xaWwsumZxS04XB7EG/b6i+5ixr4eSJbsbuvLZXfw==\",\"K4kVZqg0Mu9Da0w3n4AzxCl9c+QTq2093iikRnJ9bQE=\",\"IVCTy6xM1qVngQ+Cmrxl1VbHx9gZN3cFRsaP7psLxao=\",\"BZVCzwLZ7XruC3LaDsUJIEO+aMU+QgfkydBc3uJiDJU=\",\"LF24Syg7meIcLXOH/L09cbzCYs62Fjee1TfinT1PRRE=\",\"I6hLydXn9GcSCSf5Vw48Rkamqx1xd99KCXLEJYjqR9o=\",\"GvYsHdb54FJvjE63FvLLCHEitu+6sI/jKvMNdoJcflk=\",\"JA3xIJpNw8+i5X5OC4NpuBri1TDuHgIvRUdu89VUHxQ=\",\"HWY+cW3J5oHzJSF83TOU4Siv4m5yej503yQmN4HDcKk=\",\"KAk1y4zmlr5PqI51As8BYS2VXXg7hwMCSoXMd2upi7E=\",\"E9y++owUqYv3PnIuaqIzYQsAxGh6Kbrcp84jkHSwttg=\",\"EBhEKcA6an3LCTsGpBgM+MKx6+N4alpYFJOYqAv4UBU=\",\"K5uRyOKalNZVM4t2GDjBaY5LjLdRoQOwo1vKc4BBPmE=\",\"DoA290xR0R38dE9obuIPYt+0W/mbva9DpVErCHVmNp0=\",\"HiC4WmTkX+u6w/X7+7ix78ERzVfIzVboPdUb9ipLKQM=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"J9P+/D/HE/ndsuP7WklD5VwzbZiB9GNTLmO9MleCUJU=\",\"Bkxms7sf3NFp09Fc1R1fe1mGQuKQIHkRACtlJpP0ipo=\",\"DppTh/Of/24ltMRgzFDB2anXcuiJrXs9NX8Bbre7qv4=\",\"MDcuP9fKfPhfXF/OZN7/wusva8Hw+BuUR87XFOTdR+M=\",\"HGmMH7drk9YDbwGWFILo22cNqBeKpmxX6o1vAiGARsA=\",\"AWV0XDIYUoVF9nHNB/4qUh8s1qXMJoYBsSC5eUpYOy8=\",\"G9askuwG9qwfHzSM4fVgjmBnmnoTx9N/iBwUcjN0kHI=\",\"BkaiyO1Hdhn2Ebrxn18jFdAw2TSF18cqBX11IbBRJs0=\",\"DF1+zjfLlJxfz539crYglR7PpUEfisf5z2cGNGB3su4=\",\"Dg+VBiYRCJ0wzxZB759RQtXAlndCjd4qW3CZDOmIYsE=\",\"EWffze9oToAu4K0nRbRIvJSIZ3+0qfIfQwatQ46KcVQ=\",\"CLWNnIfqaV3e9FV6F8bGzos0sg7PHd41XU9WT1KdnlI=\",\"LAwMDKqAmQqos9sLCTdI9tQUi31W1qyESDY9WS1JW7Q=\",\"Is+PUQ4V27VN16qqmsu3nZPJHKpnkAaYIvF+rcWPO+4=\",\"HcvcyHxlGjmhy79KJClRLvXT1dLvjCwnK7EZQ/Fdxz8=\",\"Jo928dz19EXzGlw+L3f5Nw8MA52lGgvPSZ6JxQ3ecuo=\",\"EupL4jzvK8WIosXT8KRz2G/i5iqgXkmT/Y48OgT8gd4=\",\"CqihtCSApDOXIADmtxS9YgXNAg44ergM54i00kSJPZs=\",\"CcljXpPvER/JlbD0EYHWRFB6lq3FA2YmAl0UxnKANA4=\",\"LxlUInavrj+b8ti8H/JSd2NLXkRjHIij7e3TCaNfwjg=\",\"K/COStkxhGXQEbb602lT3VcuGgbmrgSsvdz95C6myXg=\",\"LkFe6BhZD/9KjroU3C24nqtFVHH8tIcjoj0ovQfyIYE=\",\"K6GxNIhXoN3bFF/TcMSlFFeUtVX+kKqrMOqru4MeV7I=\",\"LEWzjCLRg0+tlBRuzZ4ghPoIAdTSUA08mwLf2uLGhtU=\",\"BV/eT6USOK4VE2DQuz5T1ryIRUQ04KPn6BiGlx9E8b0=\",\"G1AMCR1RiHjWC7nB5GSHEg+vzAfZkHD2q+uUz3LQmcE=\",\"FQfICsmIodZqm31+DUiePfqQPczdOcvjDWbnCkRlz9o=\",\"LFOJxMPX21U07JaXXiSzQbuKOVCBfJX6aIb/oX43Ka0=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"Ig1mj0McoxMY3as6fWmeHazMJoHBnih4IkW/Bqo5Pu4=\",\"D4LHNQimgCdXQcVEmiEIsLTeq7etzgVpXGqaVkkbCck=\",\"CB0ty+VV6tf+o2UOx54gwBrqG9hpQgTPy1P0QO6fDEw=\",\"Etbe9P6zuWlfOjMwXBkNQbRDYP5Pft7Ja5rC7l0Z0jc=\",\"GIpwWVI2mRtUk5bdg9wRCreEgUMyD/vYv7uNBn2qDcI=\",\"HuXNn/yDRz0lLabV8iCjKw8UBU7YfkfRY/YRsKA8BQA=\",\"Azb0QwgeTk7y+A2qDUJzdttZpc1E0JxMpPztghPEl5I=\",\"LjH1mlStdbk1x5aN7MrkTHZRxpieehlNjrddtW88jm4=\",\"D8Zv5uifnGuPz7G4JaOUt5FAS0xTXbAhBaDPm4FHGMs=\",\"AZOSYUYCJT8Y//bGrdAQQfvxrFc8Qwuv0b6dC+1mH54=\",\"JrxpbJAigBtVWPE6JAwvJZXLo9kjdAuxX4VwEtZbTjA=\",\"A+QfglTuqSDhdtq2aklKrCapBQpggzIa7T6cYNpg8w8=\",\"J34Tz5Nlc8nqV/7FS8INy3a5uyLkPdfT8MiMzENQ1M0=\",\"EAeQ6ygVK+O77EnRlxnx6BlVnguDzT+l9Vs/EeK6fFs=\",\"CKW8xJqO9Lccy6V3QiuRv3sOuHPtT4GaA/hLeyKzdIs=\",\"D+F83MezQxXClMmv162mSeU11m4YvyB9Bievm5hfD8A=\",\"CEI+FsYQL7xOq3ati5bnWrhhByYci+k8T9MxKmWrW/M=\",\"JGWfTmkJ8ZjS2j0ppL4V/4ayeaASlyvvxattVebTiAc=\",\"AUX7X+vuu1tv6yQ0HVrWVsvjE0bUFGx3j0lfsZSCcMQ=\",\"E60eQApzdfJbef/7PgrR0QIr+27sdvnydikZ6r6NY8o=\",\"HQh3Ec7u8slCPRPNXSYvnG1Tb7hNHBcb7x/rRG7PiMs=\",\"KpFNICvneZGhNXu0U70JBitgc/GV8xTlUmCPr+pPs40=\",\"FmCyrSYbMe2aExR7we4GqfGG5wzWGREaIbUbM9LRFp4=\",\"G8x3kDKPoWMWKg6FRO7Tmxp6ls1h4KpJsReuGK8p518=\",\"KsArEJ7qzUsGy1N48IyzfWIqhW0GKf07wD2OLKvlTqg=\",\"MGFhgu4kDG4XkqUam/5UqmhRzBCzd8RoAh3Mu/pgo/o=\",\"A35/xDDzQThK5qp/lqcXOpH32JbnfUZOH4+oxHDhh6w=\",\"LCOOHfLcttfJS/98njpJUf5U206SbEMftjMuP2rSPaQ=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"IA/xeNBpMZBEcrAP4jqKET0XzrM9bQyRAGj9UWilQbc=\",\"LDr8dmruJ6rYsbqfsUs9VuIhfJx+mtM2PVb+WzFyFoA=\",\"ISjxoSXgxk7c8NA6OX28pWN18PuHzkFIDlJcJHA5Hn0=\",\"CcYv23dsT9UQ7qCJkQvSU3+O/aAoZ2jYiiyf/UuBUfI=\",\"IEJsVI1muQhmp+zXcnjGnjOz0asj8IATQuQGSzvoJhg=\",\"B63Lm3bfol3mHSkCzjcUDJz8fVH7L4744jFxY/BmQdk=\",\"CRSnnG0CrclIduuv6iuOatpawjjnMgFH/f2jcK/tTpQ=\",\"A6XT43EF4dCCgbsoQBdtxGKjhkCawefqyCvn26kx6ag=\",\"EqqDsCm/s7j3QuaJmV3fccCqKJhNwHPnOjiqjdinLeg=\",\"AbKTl42xiEvYgC64bZhHemkANvFI0KB7FluUN6h8jTA=\",\"KfXSyju+MCUeUijmPh7tnJBsTZhkdBDEo8dDFRAf1f8=\",\"B79HrBru4q5IRXrYAxzmssByplrKx0J+8p7CFmwtHx8=\",\"ExbJSVHsWqWjfpaSIzTcEW0i8+P7IZ+BleJdk+YtKC4=\",\"DlqJHnadpMGw0Q+9452BIl+mxIIWcX7fvZRDVBEwq9E=\",\"EKhEUbbS6UPvYCVbszMh9NPq5kmBaVonvXXXxyzYXQ==\",\"A0Tm+p5jje1NmakrLa5DgaskAa79UFWP2OqQdkyt6bM=\",\"KKUT7mIwvr7zTq2ZeLIk7D2PJS8sOVangYVNBKKT1aQ=\",\"HiHEiaR79WqBFAQwTgRxTs5E83bOmY40mbqR+8sP0gc=\",\"JWO634VbXdQaNVcAKL9dl+lDCmCWL7oEQdUoYHZaQSA=\",\"IJMz7egRLCoYvtAz7sRueJnFNifL5df/SekyRVq1FhI=\",\"G3QMTc4voM868QU+jakkVtsfLjHJnKppGMgpfjNQ/og=\",\"IxCgFz250TXyWUl7PydVHQH+tk1ODPIjP3gjyNThYhk=\",\"AjYsjfKQt0i2WoaAwc4sQ8X6goN8X4T4EHwSyoI3CfY=\",\"JL9Th5vGviWCfkdTckhwK6o6R3P7XBdHbhQucKsXy2k=\",\"GTtJhs7N2lS/NGhouyDx1i4+eVrkmndRkaAeqkvwla8=\",\"Fx3mDDsfBhCKDqTGIQFsBAD8m5avIRJQ+cJQYqo/lxw=\",\"FwIIwLuIQDZ/xJbt6a9I75iRPMaACnYxj9j+8giGDBk=\",\"GTBUOfXNDRfXXRmBsJe/YXCaQnzAnoPm6YO0G97k2Ks=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"AU1KOgdCNkqfZZspNJv6VFV1HkjaB3BRea+w0B6Jids=\",\"FFB8fRjb9xkmVn+vMY8luufRXRYn6TD7703HYGih65o=\",\"CrkuN9VM3ynaVt/hhwT2UX7oiUyduOQqydP4yAAJ5t4=\",\"DTpczlC3BtDi1attmcxe4Z1BSpmQGuVtjtK5DHAWFHM=\",\"H6rLxVEEiXf0T983qcaElgJ9+23ph2HOaAh8oIks8IQ=\",\"CC4tb7z+2yoyYi5Mn21M7WzwpXAGLfm4OMRoT0qPbCo=\",\"FTRd4KaZylNw4Da2tl7k1NNBLUaQG0ccpEeHz7pp0gM=\",\"ElQp1BhdnnHE5CjMLNa5jaIp5W6UHze4RtRsbfzLqU4=\",\"EPByt3108gug0DtBFTA7836piiClHwO1R1bncONQNgE=\",\"A6WgDd3M1uqguIzGqy72sEUqIGoEu1vyNhuqPyE2stw=\",\"MBBxxKbT5rPidN1uzW9YieZektyxkOaYDYdl+UbqX/c=\",\"BJeEJRG4xl043RDqecFXl2I5t3H17opykwtFwVsM5uQ=\",\"Gn84EVcb9bzQeGonphcC5BZaAvc0lltSmWpsvBq/Ykg=\",\"KbbBXqiqzcaUuU79mARXFtyBqmDGriJJcOvQOVpsIDk=\",\"Gsa7dJLR5PcVYEtXooEWSsklxW78DND+SV4YmRTxR4o=\",\"FnFAWnNR7yDksJMzcJGjCOGFjVBlaiSgiZO0Ft0HUNU=\",\"KXhOSnK672YGbGtKWA5e4NYBBUP/Dt+QrmF3vMvj80o=\",\"FbuHjQwxKdSuHjIDp+iM2Q8CXIumUkA+i+ckHCkIozQ=\",\"FF/2b4idDrpeJDwcR4D1zO/CV3WoL1Vapqz7seb0R5I=\",\"I5fcAF1SpJ/mS8x+cTmPRmjksdfSPizUH1okC3/SAVo=\",\"EE+ulHvIH167QBcenOjlHZHVWNaGy5LTmrJF2zt/mA0=\",\"Edkhld8GS2vC8nAq8l4dV6Sa3Ed092nTK2Mq1cspw4o=\",\"Hej7OYi4QP7dbx7I9BVv3K23eBuJWscmf/FmNaV8+oE=\",\"JwiWJOWZscUNzKgleneJZSOPVX1Qre7mlvUvVlav+98=\",\"Hlt+4jRiJ0BLFJJzK15vNnIti7fJnyrY9IxhI1GSGME=\",\"BEdE2vKYm96dPTaHi70hFvsObwPzbsjDYKxxgMaoepw=\",\"GLa4rlOJELljSlTMGQPSHw6aRiar4BL0JP8m56Tzids=\",\"HqWGko0QeNRKGkvb0uVmuSShQYfEKHF4lOwG9H0BJp4=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"KZ7nCYwgqNhIX7eLN7V5QjX7N2JSQxA9hu2qxl/mc1E=\",\"Fz1YzIS/3gMnqkjBMcqwGD+bRx8l7P/ybNlQv7TE90Q=\",\"FjU2uqc0zuez7Q0Bzy2+/fqOj1sm5v4erJQR+Hz7234=\",\"DDSCN/ZPn3a65R0UehkapQX6kTTd9ml1t/VMqZs3eJQ=\",\"I+/iT7ALFxaX16BoSdnqxeFOAyYxwXrA39Jz7suqopM=\",\"Hnh492DoZO8VtAOeJTBH3e4zsIK24+w4KONcGE1FWmY=\",\"K+960BNGcSb+DNWKux3JLVAxTIrpQQFj+/jIhvhv4Co=\",\"IgKAH8ebPBznadhaxrvouCJegbrWPCom/b2BPqsUoUc=\",\"EqnHEgyaxy5YpTvsZC4EiQogvSCAsGcX2XHFy8dOnTE=\",\"LcaNopp3XED+Wb+0DRvzMIcfRTmV983vcbZ+FDVghuE=\",\"EQr+J2T8eUXU+y+L7gTPe4yzhZv2LFS7N9DLvI+ig+U=\",\"Ie9UrRDDlivv7WITehfozKDvRHbWj1fLMSkMvQiekSM=\",\"HE+qDyfdF/TSD8kwopXckK/ksrMZtyx6s9XWf9ZZpxY=\",\"BJbawRQczngRqhbDzH7lv5JrGbV+TCo/70Qfak8+Xg8=\",\"ESTFhPkxFT+etRzHv2KpCMfZNe6skq2Jvgz3s7cL8KU=\",\"DWDnFg4VxJrAU1kZz+WLm7pia3pWDRh9k8AqIBPXols=\",\"H7hsKnXn6xZsYlrhUYmzOVu6ycon/HFAQgkpxX8lTf4=\",\"MC6a+SLTr4oFb0AhUONICSU6+uNAW3aVYZWOLs4OuTc=\",\"IIo+XK3b2GmEaJR0SZHy1bhVzxJvL70No8dlX2xE5qc=\",\"D9FnoO9Tit9pW4Owx+K2Xt8gT5lClvQVSty0XVr71cs=\",\"EjH88omHIKIqKpggSvi8Kwbgz3LarKrBrxsI0TEOKzA=\",\"CtUq+Udw4V7ei+F7cuTyvBv+c5AteLfzpSolSJgTG0M=\",\"Bj3t2QJ2wnOJNacbOs750vLdO5vUnlTqi2ImFCLT130=\",\"D1hBa0r4VRCm877OwR2NtsCXGU7WLUoE5aKilQEaO/8=\",\"FZM7ki8hJZKoBtruYgnJoC7LIc4r/bE1OGLXYp3x75c=\",\"EihlTK1wz6eh8fMLTLXZJ50vSb/CM0EUd8Mzy2MCVrY=\",\"Gwme+vagiTgrAjHa+aZVBbd7VLavRJE2W5MW+Yi83KY=\",\"B1dWyzHK/ORq/z2HMoDCGrklOgxYf1peEHNkF4CR5zs=\",\"BFI78ajyhMbZWzEN7CtU4OAOWbVx3Z1GtiAcGOG1bf4=\",\"LjaXbzWjS+Vr84gekzcPCCA9H4sL6WfK1Mz02dLIPFI=\",\"FlCzTg6LKtWrXeGf8lPq9tzT4g0ivGlTnINEN+CIhRM=\",\"IVTz9MG1sqQgeN9wvRxrTwQu0Brc7+W2A7SDAAhxWvg=\",\"KBKGy2PmV/eONpwPbbPJgM2rHlf9zzJQXMwyXnqejEA=\",\"MAiz8gLj0gZDb32sJBLVF0TMy8jhrEV8EeD69tYGDPI=\",\"LAJo/l0DK8+IooA+Td0vPh2/tYkVtH0PylGAQyctWyc=\",\"IuirT6e6w0jO28/TdqjsZRL994rfk29lSFlNZYSVMic=\",\"v3F8DwktBPpFmK+8yJjMvN6j6509H1BCsPMl69VwKA==\",\"H1AOYCg5BTBpC4JCHzWVY8dogD22+z0BNcU2bJyuEsE=\",\"G5iB2fuTRlIOHkEd4Glt8KTaw2hKFcAhVNwOf65ShIQ=\",\"JOyquFzjvuxMOAwgfFZPS6aZXDKQ8nZqibcwEOrPyhk=\",\"B1aorZ9WKr8mALjcgIq+aiv7DUNSgkJR4HviwOZNymc=\",\"Kh1Q0PPaM6hz6d1eXilmvUBEXB5uuVBN1LJ27PoLMYw=\",\"H60iQlQNQ2ZJWlrU+2mtJbgmHS4e5W1WZpvgdobpIX0=\",\"ETrYtGw+7CDJlltaey6KUVKYcdBAG03m9j3p5SEWI+I=\",\"H8UKFtvfocO5kDj0f4GhxdHvbnsiHUzMpughIgEw4AA=\",\"EhSp1tcoj+hWUajLgwSMdmnIO17YLKJkL/8B6FKkS0o=\",\"DUIafCWvVTh4j0lHWDZxKvXaFW+IxYZ1aM2VjjBQJsw=\",\"Lei6g9K2q2pxH7kjCt7hy6Rt6MkwyG0masuMHLloTiQ=\",\"Dqe+gvHLSTsbvYOrfKKFvwoVWeoFw/WYJ7OwE9CpH7I=\",\"Hjrn5XddNSZR1xPr386/nKjpBc+3kr94dCOUUPkUyMU=\",\"BZQ+NhijLPBQAYpOI3X00Ce4wUrIKg3lfLuQxRIqZLQ=\",\"BgN1UYD2bpghXWHlNGsRbMAM/QWCdNfZabOvleeLszU=\",\"GYF9tm/bghXs9wR2xARMP0HXisWlScaE41hFlH3KCxE=\",\"Bzll96m6jLM6lV1C2lX9fDej8CJrAp023LP76pXWQvM=\",\"CaVQQxQwhGtmlBJbVkKwBgfzahopSFNho89Cfad+zNA=\",\"Bo606dbgpYi2GmrVAfOA2g8AkGdmbAhT0VbjPVnENRU=\",\"Il4AoNpaf3SWtw0JI6fPf/Myv/BpWMwPP61DmHT2Ak0=\"],[\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"L7KAofI98MRWbzEM8xvq/cPiOKfYc/3FBlX+gnho6Qk=\",\"A28XXJk/TkCaYnXnFVi54aD81+QYOJGnRx6m+YfW0PI=\",\"A74Xeg/hv3apTUQ2R+D2nAp0zF3HryF3YiELKFXoSfE=\",\"DtZJHE/Q8Smsq89aaPAevRDfYhHU0fz1Ttdb9sfLwUY=\",\"IVjbR7N02d0x1HwghE+ocABQUcATlBstcQ7mLlbA5M4=\",\"BjfXsVxCWd5IZtNgBfsXuGYidEfl3OTCd5RBOYDqoJ8=\",\"C3RdwVgOXj1jGQKAUMt5Ktj8tbGhVt+sZZXt/yh9S9A=\",\"Dci9zMjz3avKOb5BpglxSvZfUY7zRzj9p24nVec3hpk=\",\"H9t4VuJ9YIw5f6n39tL9xLMbF/RcijRxJMjIKs5+EDM=\",\"Cv/zNzKhQPZ1m/1bKUk1ajScJsZLW7AYZl5UrLMp0+w=\",\"Gx2XwWmV/smu4xoW+sreDizKZT7+vuPV6nDA97OcE4M=\",\"KeoY5uTHWhw2lL29s/0nTDf1HikX+eCwHYGHDvkjU4c=\",\"FdX1qvkbquvTTQe5Y0YQuFlmwAj+7HhD+rflCwYWQn8=\",\"C9jgw6Fn2euUO/GfGNdlIw/X0iTfBkWFHmaVkd8BI58=\",\"EpKTck4tdsusyshBMmNloLkr/ABDcUfeY5DZZMwOBVo=\",\"LXBXZUiUHC+2vtbFJdtdDDPKbIb4HbM4OFSNZyt7JkE=\",\"K+y7wS5JglBViIKS2RrHQ5o88zfV+Yc8c12S5SoFRDQ=\",\"DO/QuBv6vLmSAjDzpymuMwOUPY45bFwOXKAfRhHz9hc=\",\"BuR+lmsbWXxhQT3E+ZbxRWcZdCJXA5AVycHQqjPAsKw=\",\"C/kGR8hcvIKwbjqUGY5EM1cguK+9/wYRLirKUFpDxH0=\",\"I5vFfXsQnK79jGFHZ6WQpo9ljGnL7CH+8oOlAyQXkic=\",\"CjauTLNbT4ZdciUZE2b+aR3WWtXylmt08q3CjSbS0yI=\",\"ESRFhf7OiG5GhfxwPIB+yODVkbV1/NCJqWnWhL5M4rg=\",\"DKp3edwWvb+Zo/RZA6zlB5GF4xfv1XM/x/dmzlfilpQ=\",\"JplrnQhohfm9aQittKr23q6DBuRjJQgU3GbgBnQZODk=\",\"E15moO4TsoflH18ej3nU/nylXZE16JIScpIOxzK83BY=\",\"Iz6VBiCF4t7ICAKcWaDoIwB3Mx41hhNWN4hRijly5bE=\",\"I6sTsViJ+Ls4Hv6+cRcvkaCtZdnwWva1ngDQyZ+K4II=\",\"Ht5N4lqDED4t6nKfDGipCFif4OYEyG+NV+BY/hEAB0I=\",\"K1tb7niNyyO9SIUzzK4UMePzUE47iebu2krotbvrTHg=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"JXNj8B+7EIzmNgsRXrA4JwlG64xGtuzs1oWWdl7YlNM=\",\"DgZhG9Tu4WBVgvwvChlVJOV6VS/58sdoMhicOC12OUQ=\",\"CrcPtoI/UsJ3uN1P8mHZZalCfTSvSvvxnzskJgwV+OA=\",\"F5yUHWRNgEo6QGiIT9HG16gtQR1GmMkeGyQpZtO72rU=\",\"A3+RbpDUGQQtKXvclSx80CdGy8GIFJpRoJh8/v4NwT0=\",\"BD89w9kbCrtTGILcAV4dnQXdZG1C39n0wUk6CFzAClY=\",\"FDrRnBJJrL70iOoKB09Wr9P1uJZmI1y/i7Xm/kQJZkI=\",\"G3ZhD8jO8usPT6dt984pkjf+ezqdAkt9QF7AlXGcQnk=\",\"GlFI1okT33TIcqHqWqS1QrOrG5wN2i7CIM8rw21prVk=\",\"E/EQIu0CKElyA3AAZm4tPtvrmlNQw3/twpO+mY66Mtw=\",\"CAbyZuTDXG8GaSX/c9ar3l5G9bxVsBAV25UWIVkJKnA=\",\"LhTNqs4J0JtJ1DfKSHUhI6bv48dWYCGPQIh4hx0HP2Q=\",\"HE+o18bI6vMxFt968KvlaUVAPhEfDtNq8CmheogCeDk=\",\"AjQ2/T2NSMfeXqMomdCeYBh3iW4EQFHlnUgfJsb0RZQ=\",\"BDcZH9yywPzLndK3AVXh4+uRoQSxQjWoT5x/cV9maxA=\",\"L2im67Xao8HAsfjhzD67uyna5R8h3KsbjyTzDlL2obs=\",\"LYLe9nBZEbv6J4o404X+F8mBC8r9cSb0j/u90Zfh/sU=\",\"Ff6tD3zOufpalrkDEh0jRTnER/d2vxMpDw0P2c13amM=\",\"EjkO+V4pTt48Q1+fFK5PEhzaqmtd5PP3mWmo+R+zd5M=\",\"Cp9vF1eksavI4KWw/qg80rjlZRBfxtUuaS3s6JpsEeY=\",\"CZbbKiBgsEVOyKEy7m2BDfLfSQMc5CDk55DHI/V4vUk=\",\"JnCnTzfmoyWWk4yuo87D4FszfO1sI9K/LsWYffvMaQU=\",\"KK4H6npSmAXTqv6fWirmYvkIsX+GSrWbmEUu8o4/1E4=\",\"AkACxJdxovy2PARtFQe4siWbTv9jp76Vgyn2MZ/ox4c=\",\"JwPgN0XtiBDMk8ynjqYTzzn0khgNasRzAOS6vU81fc4=\",\"IpMCk8MzSZCF6uVaAcv4wysE0hGgcJvZt1j3M+Lte3s=\",\"KgrF1/Lao+2tveqqRAln2XuuxjfPSKZ6NoEEMAFKkCs=\",\"JfpIy3AAMXXbSyJB5ruwip0wEoyG9ov2556aPdTz9Ow=\",\"C64ED/Sx9juXR0qXFEa2gMI/9NVSEqmdA9Hicnh3ABY=\",\"L6XbcotgWMxCNIyQJnFY+OdquZxkbmZmTcK5OWMhjhY=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"EUQBpMzIPIauD6Ugo+vkR4+m18TGNLSmUD2jNNqEBN4=\",\"HKYnOvbS5RqLfCuoaaG/EN56W5eGrZR6AsKxtu6CEnQ=\",\"LHtK9nHsX6ElMbY7UReC8fRu5UKLkYTZYMrw3rDgjQM=\",\"EjAYLENLIXXpNisCPlVFa/l9UU5TMuR1P/7aYPXZews=\",\"IuBBwojvJvHQfIbWwk9I6wQdg6gmC2dyiSGB4hIMkeE=\",\"KKy8afv3ol7TiSe6Y83loYKE8mrWWBMXeCIZIhzGvY4=\",\"JIczf/+qf+pkQPtZ6OiIwXJLvR8RGNMq2mo2UeRu9UM=\",\"Bh9GMM2KcLXGoZUN7x9+7aHSz9dQ6si80h0JKNVFA9s=\",\"PPzdWEIOgb/tsE39TltXsD64r++1ljuBM52SRFRYtg==\",\"EhHwnGAcMRKFYfEP/e9zSHyScJHxAIb/qInuwTeHV+I=\",\"rWJHrjustxaJkAP4ga4stE5A/0hj3AekAL3hDKvJGw==\",\"FhvPSNfTeQbvKdUipmMeIuNE/5Ub4vVBjB9Y74EQaUk=\",\"FhXKr86c+ZZWBF8BuQUIctFnIZUzByZypiYb2vxAXic=\",\"Hx/RtkyAJMGdxMkG4SG8UCPHaxyWEP7MAuAJ44T94WQ=\",\"GjQ/BsdCtuoB3MoFHn+BIJclDoHvpQZWGBfCrM3hP7I=\",\"GqWtN69M8DN3TozttAw2zBvy/S5zwTWiFFiX4lVkSrg=\",\"Co50N14cqSADFTqE0qiLOHlpBeQvBaKuqiK2F0VFZ5s=\",\"Ddy1JPPR420mUjs356elZcp6r76LnX0hgF15s5E0WUQ=\",\"DGRmnZIzY1M2f/dGAwuUZpHu1jqHENFbRJB5E1WOqJI=\",\"GGY8rtUq8xJf9zTqgh8rHA/2PiU+uN9hwjmYs4Uu6ys=\",\"CKoqbcGsrOla6Zz66fSKXtuNkea+Yu+XqOSPe/nSLMM=\",\"HYENRb5C7ekVfjfdkpprdNCs4Ocrltbx4EhTICdhPp0=\",\"LMEYFsRuZMbnE11ywAp9zmWnYUy8Fk38or5iRmilF2c=\",\"Brysk12eYjPu6FVdkB1ssLWhjguusHdMQrssIhao09c=\",\"CB9CK7Fe9+m1e3nK1jIm/FPLCA5tQS55C1BRta2wEgg=\",\"FyM/JFjZPbNcITpyyWmpSq72L9anZDXGgxKal5UXe/4=\",\"IjxGR5OIhSXs9dPIc82zpr1nWHSZoAtEDZJML9xF9kA=\",\"Ev9RXvPhabA4u6z5U1N8Kyjb0bW6P8eiaQAYiu824uc=\",\"BV4FaHcPvEybPWmOYhsZgHNuxCWfCwnZ8egg99pBdLM=\",\"GFuQrdzDtnTsvQmH+UgLdGJf0HyRvcvwSKZH1WHHVsw=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"Ckqyn0KKG0BA9VEOi08QSU69vxKIWVXOk3oXNgtLKV4=\",\"KmR4jqliltclOjqeNXcVI0+TGMCDdsFd5pSH+/mwmW0=\",\"I4Unhni/Q+Bicbh8P5hPG0JbFmunhrLh5yNzmmdS9sk=\",\"D40gS88u+qCGaBjxw5hmJ/+ZiZUxepYLVtiqP1wQ+/0=\",\"LQe1vFUzRKSIfcjz21hY5d79oiyqmmzL4j4zMroYqt0=\",\"HhpnZYd8uTWAQz4CWYX4CqGckInBcThIBCa8rkmqHH0=\",\"FfGmBhc0TSm22mD1fO0zXaHa20Aq6aVuutPAqrO2nnM=\",\"Br4B2k3pr2sNKTe8tlaX/cI+i9v1NDk4MV702/BF2RQ=\",\"IER5ukT2xged8SO6GlTiSNttTQSAOTkTeQ/x8QuerX4=\",\"GWfKI2WEmlupq+NBl5eIWvlzbEJDnxSBhioAy0yDsks=\",\"A3t4q0xsHL6D8ZdjPEyD4i/Tghl4bZxXRO1CJOq7pUs=\",\"ISAtn+zjs1F8LV556KW0eCT+R2WHBDQbp7/aOjQU/Fo=\",\"GL1+RjA8PCox5oSSRyV4cIpo0dYDa5YWUAV7fRzlXrk=\",\"DF8y804SnejQG/kBCxYEe7LCEo7gIfzgriwDovCyDFU=\",\"HqHHe5zn0kpPMv/2YeQU8Hk9nER3/MWld7DlFFyAZx8=\",\"Krt+w34qUqCfpboUTSm4/qae+iBbRpAzABPS2if6tvs=\",\"GW1H/yYvWpAymWK+s8QDSQVHgI/+T+lsaZGV2e5aIyY=\",\"LaXcOJsHPlL5KXCq7w0GG+uiW76FILeBkRhYWYaC9X4=\",\"LM4RND+XQ2ndX963qKeW06g/7tz6Cnjbctu3ibvh2Ec=\",\"ExJi4oPPCwX+9giG8y8ISkd1X8tMt8zExonk5/BDe3U=\",\"CuEYjQFdNgT7OJMcAteQ/KJEuLKE1Ue2L7A/mKyIdxY=\",\"B1eTRa+xwYPrkqYwu30GGWnNxRVBS/k5l5fXQT+LkE0=\",\"JCmuvkpnSoDwqK6bOKPyU+RbiXrnGntdCv5P131dh2k=\",\"E4K5KmxXO7GVqVPcDGl7u/MNz2gG9qsqX3tQCoAFLek=\",\"HRgleIN7WLMt0xoxUlS7CkmwSz1epJ1YL2QmY3vodBM=\",\"LZiI/IiAqh5LJlz2AhhyfDVWrI0xt6Pcah3V1RuQIgc=\",\"KPq3K7uZ8abq8gQKdP9V6HxaSMLTkqd1LHb9L7M+M5A=\",\"Jnjxzqz6jjtItern8GACGk9YzvVrEtUrnwagnk7aVa8=\",\"H2HTWdFhnsT/Lx6v5XgnyTFuEHVHGLn1GzbHGXnMRI8=\",\"Gh2fZLUr43flCdWlfwBLy22w7cha7Sb1FYHZEtow6Vs=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"I4hM/Q8EWRUCWkTpvbFEkeYm7fdK//7odMPk0SWkoXc=\",\"KF0HR18iRGrxUVwTSxDviQvdkn0DKCMNY3TOriHl8Wk=\",\"A1PWZDRcNE+ibOkNpPSY/jOmLoxG5+BbR84Rtmm8zNQ=\",\"Cl8k33bzmwBMBz4c/KsIgHArnoSDfLyyG9AC4kSev/A=\",\"EtxP2LeSAZKI1mUpIFDPWLuyxVvnI9Znjdy89VzfXCk=\",\"GT8EU45EtpO18DwyhhAJLoslOJW+yjCGJbi7okIp5rs=\",\"DUD+k+2QoBltwX6ySwXb/Qii2bhRA91E2Ie3i78IJR4=\",\"Gh4fcxJoAlwQaY7/+aGJgoFzMpagLsLkKGwKqddmJQ0=\",\"J+U87gU2w+lr1LeNdrG5nWEUZraHxg3FJCMEzyx/BKo=\",\"HhMedig19jF2XWoFSPi5l4azN5pUI2afNI5jwaPNQFc=\",\"GDd7U6a2hCBjGlCXZ6t0evVP9S/GowD2dZ6J0PqB9i0=\",\"K1KFH5osEX0kt7Pvhh09mBReGL4KsXRhvvkXDdEk8qU=\",\"IDEx3+BfTzhZopYs4nNvX2ZWec1UNEDlu9+MnkaPjxo=\",\"EbpyFt04ZAa9HuneV3wwFbO1aPYSt50rkBlVQ5tfR7Q=\",\"Bs/2ja2CE5WAtu5ANGrLQaG4jjQ0Sx7hJM2EW6TY2xI=\",\"F2tgUBLzhZPfDQ4S/aukOgJDJ1VPBFh1o5SrbWZZZpM=\",\"K7QAiKGt2ElrKg0HdMBtmQANn39eeO3v2CZ73CYCgjw=\",\"Bqte3NGll6Ve+29fMCi11G3Rg4r34Kdhj6vSBq4C2xk=\",\"HvTU0l4/ZzFAHAbiMn4dzdJR5dhopJYV18nmcbdOUro=\",\"ETKReRiJGDNlmuWqXUYI6e5S+LuMahWvK7bFslOO4Qg=\",\"PqcnkIOD65wMX9TI9Ed8fXyziHxrdAgJfCoJnM20Ng==\",\"HGca9VojOFsWtB+TvFyd+SRKKykX+ib5iZNtnhD1iWU=\",\"KHewklPNAjPTWN1cA6FevTgqlPZbsy+BpAnDIJyD3RY=\",\"EgrHZfcVJ62q27npHHi/vRfzCxxYJLu7brgtJ0W9M1I=\",\"HCp/47uTuvtU46NfT8zSaF3FpZ/2uedlOPN7fHkRBjM=\",\"JFZ2tIfiF8Y77rNosgTY/o5eBRqpHv289oVNnV7orsQ=\",\"Gg9PJPP6dbBxhdWfOC/2Pyd90a8KkC9xB7Y/yfRQ2H4=\",\"F0u1lH76YvkEdZouhcySyEt5dojujC8FaZ0DBfamirw=\",\"CTBRJ2NTtjUHwFv5BN5vjZcffThsF0gFOEC3t3W+ugI=\",\"IBELlrUTllh07sm1cWar56cdusQwDe166p6xkO+bCCo=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"F6Udpo1GAAlRsG+z+ePVuDSU0o/q51oNdzgRKdG1zBE=\",\"GRJK6qvs9BNQEOGpZTQeSMpP23sM1QdxDOaFvs6FpR8=\",\"DU7/EZBTC9wuD61XUErS2Seg1dGclEJAE4GLvtrJPM0=\",\"DE6R47fO8wjZ1ClA2/mkluXiP5VLv5zZ9qFBvAQ8ifE=\",\"KpH/93C4ZsjKjFMNeGpSITHBUmxGlNi3t6062GeMYUA=\",\"IRuUj7XIqcxF+N/38Z1QksRBoXSQCe57DSbQLRUwLfc=\",\"HjCxAxokBpzJOWG8vnrkYGY9JKwls3b6jSqM6jlp5mo=\",\"GLguIDL1NFjeW1uPbGnQ9ZAz4OhD01I6DkM6rHUATsY=\",\"HcIrW/wnMsHzSBNRdS14lfVZRxaleyLeCVPYZ181eE0=\",\"C8aH7zsYp37YSVqIOPqC41or4Xriu6R6n1q6omAhr9g=\",\"I3HCbY90Jc7o9mrMn2R9iJt4ogwC/vm8jmUpVTbVVmY=\",\"FHdHOp5Jw2pgsEFdul6DLiO6JXVoLLcGxc7zjC7oubM=\",\"BT5IKVnc23n1LmSju+IHk/rTr09NBSwMudNt+jlr9PU=\",\"AfG1i5Xq71HkQtZu0koj4wCz3zAy9FBAV3QCJ52gFiA=\",\"FBQRr1DpV4S1Nl7D1IeeeNMRwG07AxpHt7GYn/jioFw=\",\"IlIyOz7AbMYnEHeDcJF9lGNerdCrlG2DxyEd8v0YsSs=\",\"AfnwnPy9zrrqKxBT20HzlAbEvXwI1pYy5fqI0R2Nsv8=\",\"Bp1doR5mUjddcPh+u+m33wrd2pY06uCZkLaFYKxO1xA=\",\"GXjl1kdFaos6Zu26NXU/qpPj868cifQYrqD2i7UToMg=\",\"Jdmk5gO4EvOaIObl65nA7ShF04O5UrQuI9Zf5oIJ9Fg=\",\"I0tD41F/hXPVtLbJBXIXR1AZKFV+xBZdlROUCIAFAiE=\",\"A+Zs8mNogcilG7s1MvDuOr8JnRbG4CnuvHrpA6m3TXQ=\",\"Hpj4+nsOmHYkU8I7rGc1sAtPrf5jwESL4M40RFa38Yk=\",\"CKpwm1So3wkcoEh2P0Vzz5kXrqwIPKG39+uEwGDQ6TI=\",\"BSx8p/3KmsLNNEopTTIvHXHROE1eCm9E0KyLNOaqxM0=\",\"AzGwK8kXv8ZpHY1/Uuugil/D9H0W8C5EBkQ5DDmrc2E=\",\"DYmJSZlKbyY6n4Ilyl1KEYt5VaSnlgYmI5TOaden4Sc=\",\"ELR7EwwWAHtTeddEp7wZ5F9tkuJxopl2ZCATnyCndm4=\",\"ETLwFPp1mddExtQNG+Td1E5is/pL3EOaSMpMCMr/Nu4=\",\"HF44q0VRqqKrKrW2n11keNZocZUjeH35aL7G5nw0mg8=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"Ecmo0afPAy707rOXbLRasmOeIyjgGPJFDu02pCtRcko=\",\"DWiw70hZqZ2aPTWPSOwEkiK0rcQPUhFCD/l5LTOARRw=\",\"D34/voQtIig5pqKJJtK327IMx3b1zDXr5t4ZcqgGEHA=\",\"IO5S9MVyEh8njKjwnarS8cDvhUEJk3iwuuGRNSiwEQI=\",\"JBd0cIOekFSP5lKr+He254jfpOD0NkogSHCJNJ0rFPo=\",\"H6mLY8aaGY7jNd51F5sjCGFHCg9gRZ7VOTD1khBhVLA=\",\"GP7Xyh01L90le9iZnpVdRvSMP7L2fpyLKcoP1u1cxNw=\",\"Hkr7mxQA3vQnoaXJVudhvkO8PRXvBwmMsIv6mU5cabQ=\",\"K4uFH6/MBBzt+mRSH2+1Olh4i1sWbaRpGSodWquhqwY=\",\"CRz4rIK22Evp+BrBNR+qDeIiYmChAZ0d+yRDfKNDJd4=\",\"BvfWGJfjp2XU5FJt48wTtMZXzF7IHgg4jEHZSoCKmlw=\",\"AoYhQpFqLCNDLuNWOVHGRsTedVIAjJKPoTzj41Ae2K8=\",\"LMbMWn5l1ojSf/zxxHSXZOcpTCPQEIpXspr0Q7uT9aE=\",\"FA0qNIR8ufB3YXYBDYBwzsg5L2EvNXPWPljWmkyVZb8=\",\"GYAK/J0FpbA4boeoVazcx0OhyAsPcQY9VtD01ur+0Do=\",\"JpHfR2witW+dbQz+sbcG1moeQead5fbanwK539iVTTU=\",\"Dj0aNwosET9V6L5qWWZ/cuC8kBjGwrfcFU3irahDz5k=\",\"BCIEHNu5npEQljKF6QwjPxhDNh2NNoeLKyQl7MmtFGg=\",\"GLOXAVBYbGDjYkPZ94fpzSNK5UJJvUfVPYNQQxAnVB0=\",\"JgimIMk3CELMHn63XO2WUhJxeyIDLP86kPGRbV1uS0c=\",\"EC5jjTPXPNE3pLyXsW7W6o/yEU7wJeEjpH+uEgkhL6c=\",\"CBEnw3nQjIa2KD47ovehY/FW/x774tBYto/x2BmBFeo=\",\"EAMzDmybsIfE43QWPx2TtR6idHEmlCqJG5MkfcO53+A=\",\"Jiht9LkKbWqAr+uEW5tXTI4RTasrI6vU2SyQ0FYReS8=\",\"L8vONpOg82XHf12kHwRgZ0czTA4hzq9HGanGxVptsDQ=\",\"DuSfe/jZprRlfMqaVTsS7h4DdaIlFAK2Iz8Us65DxFg=\",\"GpygNaW7qeAagznAdxHZxeecrjRB8nKvPm/Q+laIngY=\",\"EgLyyn1PmORI48xHETgG7C+UiF1TaXbbhKxPBrffZWc=\",\"CJoUu7jwllqRTLv4MEnZVZjtg/t667x1pPaB784xMP0=\",\"E0iPOwRWUk1JgjBf725sgflZo32nu6+rV/h+ii4/Jk4=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"FVyR219Z/Y6lL/8gmT3cMoXs/5fOKtaX9KB46EQDYeI=\",\"BcYewG9VYchyVuwhxqqSqx09zgFJYHKvXFCBrtcKBz0=\",\"CYSdwT0uyoccTcHRF8sNXrWxqY5joYIfbgiV0BCRONo=\",\"EzxgrhWXvK4/Awzxo+9RXvd/jfwP7P/whEEf9AplBc4=\",\"Eg6ThQwT3j0Gvk6pM/NFHLPUg21V+LZbMOOBSh6sfL0=\",\"DSk3QhThpKvuuNNogOb0OiqJmzvMp//g/BSCQRQ5zyc=\",\"FlARhwMxWuPr8bT14zM3NCglEDahJFrOQTT0yb0/epE=\",\"GFModUHNaHvGZ3Ajf+PobbnJggjoOK0cn7s8Lp8NL1s=\",\"CEWguTRNeVuoHKbcQzq7W50eCD1GAlRWlXPo7j6dpa0=\",\"GQPQeyciwNyBjdqJPXSp7n/LiwHTskrJ12BMlw9o4AI=\",\"KxU5CLg9aj/EuUBviRw9Ue5CnI9pBsJDJt5Lqiwi1tU=\",\"EHStUgsbC+L0WQzpfZkn9LpYL9vakPc4EOCnVHX9DUc=\",\"HXpm/KNFFoxMu1SaziR40ejwoZBs38HJXTI/mdZgLy4=\",\"B9jnP81qNbLYOQ5W1nC57No1b8HaRlUbi04VOA+MrA8=\",\"AkOY/oEcz3K7FYMSEVKES+AUmVqcIT/zcdAwLUAqIqs=\",\"MDyOGwbsSH5xVplzbdBD3UpjCOpiZFJWNIQfT7Uwvhw=\",\"FRhsscUfer2Uheqbp3z4+nJYTbwz+Qnn4EsB7FUHhOE=\",\"GADiCScZjyTjYvdxnsvt7L/Yv5Cwqg+ATOvUg+qVDe4=\",\"F7B0EApN2me56JeJIBugidDcFVP0t1hY9onX+fJgglg=\",\"Eqhp1tg0hRnRHTLmeLrP1v4g17AkIqHmO5WCVueG9Nw=\",\"DUAJkrq+FqG1qrXpW8y5FmDyLkAQgu7siipWLLsJiDI=\",\"Bn+mpzXklAGtbQ1AQ1YzJvjgY74Tsoh19vSpdRvtKHk=\",\"CKpGqzmGGY1JO5cH7YSmEDTaKovRIkxa6KqjqDnNsRQ=\",\"B9BhZhGFGGomxAvD1lyEBktoGdwwXj6m3whxb0Fea+Y=\",\"FktagMwqOQMm9gYpV9fTJawkTIxJdEj0uW/mc02+MFg=\",\"0mcTL/UKDmHoWRiQZfa82vo0mqxIgc/rGwto7heZgQ==\",\"KbNND+vrYrhWqqVIpam3MIk2vRY6RvZ/ly1MsyY0tfg=\",\"Gx3+Rl5FeIaaehE0VwN9fTGAtvi+QDRvBhUk52+ceBI=\",\"IZ1tZchqOFDPNkjZgbUWgayOGsCl1NJka3gMnkaJXw0=\",\"Fwm+0UDJYiRZeRim1uBWwqb4DE0n27oCafNZZqqtmGw=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"HbATvkBeHtzoasuZfvjqaK1ULssl/7uK3su54yPp3Es=\",\"BGcstC+GYFb/9zPC2bI1MWCMG1Qa2gAm8pLQgjBSD0M=\",\"ITEWcIxiBCfbK7waQiuNvkPFBhTqHvgu4yqSxxunhxU=\",\"GBC/QcME2o+SBg2ivUYyKVt4QVBxbsi1mjpmOSX7tVY=\",\"DmD+H2rDTM7jeKd0OpbNx38n42An87pEOfWZVH7/+OE=\",\"FQ/j1fGYRWc3U8ENIWg8OdgGuotEAXhdi5k9XRSFNws=\",\"EG+R2HgZszxJY0W/wL268KSm2gN+LuYopglxaxIDeMw=\",\"J/BY0BoomxqxvqXdg5/A24h9aP38YjCFyKrvWmzCoto=\",\"Dg3IIL4bWhAblvFTbEZc4nqWQ2YWpP0VgMMePwvmnVc=\",\"EVD4OYj9cczpM1AXOR0kBRLqpzwV8Rlzwow260vlgLY=\",\"BgWxT+hYrKG0ege8r+y1cdYcKn0/NVnni+Me+hNjJiQ=\",\"GFeagpSeoxPweGP1ReX1Nlp3km+XI2HPcQTy/KyDIxg=\",\"IbKxyAYvdlAhfrLQkJIkYDYebwd3wifLaF6gTnA5MGI=\",\"D4MXhzijRC5+TOa73BdQsps/x1LY1SnYsovhefKAi48=\",\"JZqA3C6oqJQjL1WS/qpC22J5c6kPUEQ+CL90MnPqwjY=\",\"CqvBu7klGjBp5DIFuWoHLo9p+0Rt10EOSBnWKY5HzJU=\",\"GPRNtR8JG/JhYnq24L5zwWslf8NYs2UIYnd5ci9F7K4=\",\"LMSp/i9a/joM6QbIM5dI3SniOG5c5LWurCKu7hfD158=\",\"LCVN2S1/AC2jZhqDFHvLft5VAxMSTZnGKIz6U4202QQ=\",\"JUGFLNfE++oTYbEp6JAcoy2cSyC31R+hLIegdKf+/jE=\",\"CML4AaglIKmhIf/KMhiW7HrWDd2aULlFzz9DCgUmNBM=\",\"Jd/H8VKsdAhNk8LFF7kYV8UaM/jN4kjTk/ocMmkW6T4=\",\"KXYKLl1jQG/yVNpLvJcVKsimo4rQh3AuWUlVrdXFDUY=\",\"JptrsAcFwx6QkUf5GYF9/IHYtJG5p28iPlb4HmSpUn0=\",\"GgLO9KeeBkPt2L/N9hoAlgWEPCbr7bHpBgRzQY918LM=\",\"EsAmHR47JHtp5FgrOoD9lYdisLPTupFKUsngviSRjw8=\",\"Jj+azeuLPOOsg7zLGRil1fxxJoCnL9jPr14cZxJnQ3U=\",\"IHQ035ASieiRbs3/Vt7kaakTlwkgxkgEp+2KJvkn8Xc=\",\"A6HAPJ8fobg5HzL8uqHvxv9LHe5/N3yN+lE104qcOtk=\",\"EknmEp73UHyZqGbZAjEtOHaZitn2KsNEVAVdj/HTUto=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"Bo1oB4Mbbnhed6ILlN++X8bCNIQxDTap+3QiBnGAStQ=\",\"hbl6vijgaO5e97tMzYH63s7dSBjFpsnPT1PdS0TsrQ==\",\"LSyqO4T5IFPMQGoRrSmFyGDFenWsNWuVqGqDylBLxO4=\",\"IwVhwiCMY6PRC5WmQ1jFvE1o0BrkRHtcaZPI9hMgMeg=\",\"FR9WcgUhE+bxTd0ywoxxQ22qrccdV9gwylUedwxQNac=\",\"JzPJ1x6x8c5F/7qO+z3iKu97hP6pAb6+eT/8w+4gzB0=\",\"EiwNCgfCM8aH6BVr4VZ0kq0A5sSP85XZhUHfkETSYFE=\",\"KERnRjeyI/V3nmiLuK30ncvNklbVwxSlEnB7JLf/zVM=\",\"E6kYhRclS8pxXUYPnG8YOti9tfyndwJ3EX6cR30NPeY=\",\"Hd2O7AlN+s/i+RXmISn8ujYB2vMy3I4ki01CNYbrzWk=\",\"FfLgw4rIS/UME25o94+RP3RWLq5IosIIIIQaRxII0FE=\",\"Hdcec8wLr0rKc00QasGkjPhfGCNz2BqFRXXmXO0Nxz4=\",\"02gsOaLcDAgISYzuIiB2z8APEdorkp+l4GPr/jB9rA==\",\"JZcIlFohTLzuz8TP/SkFsGKLPdP6ZS8+/hwq8S6HMvI=\",\"Bxuux6QpvQYFk3MMFQ/x/foFCu0NcINDJZBjeW6DEZU=\",\"JoZe/3Xi9v28ZiE+4DuUVaEJquLpfM4HuTGb2mTPxrY=\",\"KGTBKsYcItTzX9pJETcAcOi1iKjuSoKonhXA8aDi178=\",\"J1i4tgFnTKX1JtJG0iFRnsQKBJjbmXuKqFVUWzZZEno=\",\"CQAq+oiZESST3KbKb1xjI9uPNSAI99GKBI0mXoz+vvk=\",\"Fzx1iuo49qeBJoOm+kWJ4bSpVuiXSvJg3bBXUZ4g970=\",\"Dv5tYkmB/14LReV10LZIYAvRhJc+v52fZT1KWouhcyI=\",\"DRSmkRRbJcpJxJYFxkqbrYFnjqSk6LA/45MhyH8J4aA=\",\"JHNCrqGa+kmo27OW3tqiU5MK8istRP6Wzv1GSDlIKr8=\",\"Fh/r4jVUJsL+iD5Y2s/25s3FrVplsoM1J1/rpD33H4w=\",\"Lf9b8s6nbQiI3EDNxz8A4wV+br8zeTyFUeIRqrQRVbU=\",\"HmtuCfgZXDV2fdI8gu9diGLKd+mZ1lxp2NxoYNSU6Bo=\",\"A6j8EL9KOUnoRpcysBSFlMs3WRI86Qrj5pKWbjEEDGE=\",\"CxhfPUyiFLLoMzAf9OmbH57XF5tBGRyZYHl7OXdt8rs=\",\"GsawOQH9xAsTKb84c/+Sd8cPzpYQFRoO95Ie0IVnNgw=\",\"K+t3GHrXdpiZAqlNBqmN7vsTEtBVhRPD3qbfSL9jfqc=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"FJ4Y8SM/UGhZJ1SFz1/JPOu5TKJs3l2YDm+iw0ovf9Y=\",\"CKVMolzFCwNPY9Lk0QtMc1qnWcQi68rHH29zyEGXYQU=\",\"HBIQ8s40wpWNZA0KCq8Ubu36qu8NN8CgyvZxqDMtNMc=\",\"F7/br+nlZJjLPXsV1c1Bq4bs1HiVcBzS1vJlJqr8mSo=\",\"DNJ5IMBEHZiomS1AjCGfhZia0QVvlpLj226eQZa9bRA=\",\"Ldf7k8IIBfkVZb1nh346TOQ+x53ENfjHqF6CxuXRY3U=\",\"BbHmiS/2FXQvco08DPgwqu7bk60i2HBpGpbZUdun/zw=\",\"CDHQoxPM/VexzcnzDhE8Kao15XSx9VMhrgmWG4e20x4=\",\"BgDgyEQkPq24ZhgEPSphjqH17XfxrKY/Xg7xn2rgmoA=\",\"BfDHnhY0nKtIESjQSgy8gLkMK96YhKlMQa0bDE+GgBg=\",\"KqfeVwXqAQ2qqzCzsgzvDnSHQ4SvMcBN4zpOHO2Okl8=\",\"BYVJO3UN3+cOPrbJvn5ysY5l3iKeNX1HgrF8dt6y9WY=\",\"KEj444NhvVUSNSYJ14Bq8fvGsfwoWxx2Gni6qmj/XvY=\",\"KEilKdT3zUvxFVKOteiChBUK9BRSPiXRwBLziELXoRc=\",\"AwrtT735jPAhLVa67Zv5UkZrU0dmcVPla65LBlDYxwg=\",\"I1Dtu1Vu9Gy4whvZhBr2Qv+LOjmVaappisY8sxeigN4=\",\"KuW0ftfb3vWL+mX1c2OYReBneHeSbmPJkp5HM45MuSY=\",\"JuCHpQ51NDGrTxrX3WXO8A2dpgWGAbhSWmxRflJZzkg=\",\"FZ0mBGfvaeiX9kZ4LwPCTXs+Hfs660jEaWA/Uc6irAE=\",\"HmBZ7g7OeY7brcDzwkS0vcrLUYHp5HDQWR/YzDyHmN0=\",\"IdDGwZvGvf4ScXxTMWm68aV+Yftlt8t2viwSZcLJDqs=\",\"CW/3oMGO81vpu7Pgr0EOHks7kC84y4OBUPjbjwNPluA=\",\"J9FpkdpOJG/TMxEtXVCSzTyIjY6onrSrkPMzXx4R+4A=\",\"CKHn2LxGttC2DUF+SJS9xewbDafUaM3w9bZyVEFFSA0=\",\"G7uZTXTXm2mL7/ssE2Ctel2hvJ7QZaOAclN735mNSsA=\",\"BuqnWyuPs3VxlDMkQrviRqgjAP49mutSVICVdHVn2iY=\",\"A1Bm9J/du0KKIxblbLdULl7mPiuEo4yqJ/XAfjfw1RQ=\",\"AajfLVBnmDTA0dnfcrajPh/00aKgJlm2NfOQi2BBHI8=\",\"GmnyNIVfIJnOAY4oe5Rpar3VBP/bhpV1Womqx2KOxNc=\",\"KCxmz2byeLPI8O0uGTaIez9KQZaK84uoQ1tNrP5PoaE=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"CFzUgHslM24f/vybTl1hjHq6TExC40sKtewh8eJk49o=\",\"Hfcr9tM7QXl50KvDpYecnBgFm8lUohsXU/RMmKhlMcU=\",\"DtKbF+5rx58NDalUB/+H8QuTfBty947DZJlgHFNuAn8=\",\"LY9ny2q64bHP4h+RtV/f5eYvov48fC1hJU2EDC4i0Og=\",\"DEqETTPXQQ6/qgvjwGKyh2wiuPTmpEWaKULsqZAvct8=\",\"FZf4pBf6HIRwGAUecO7fu1pgIFJeADsgeiQfIlHIgYg=\",\"Lcjl1vFOLUPPCyc1IrNeKsw5F3R5PwkBSydITntf0Tc=\",\"LSTUeUFGkIGF8jVP0nFgjTCY4Eq05caZFlOh4x70zsk=\",\"AzQ+DEBFegWaiTJQeVpsasUIX9ciLe4HaU9sVi2WYxI=\",\"CvfbPShQ/BA3QoqbaRPLV+0rF84Sd10QoupZkh6bo8E=\",\"Kvdv4zJq9hgU8FltHpx8mBIU76sip4rFLkwNLqXzpVk=\",\"KMX6zfKDLSL8jHyuvk1Jwoo+rDThwGqrA9pR9MZ1SYs=\",\"BnuRDmo1VWU7fWRoiLFiDasFuCr9tIwIuRQi4dCJ5hc=\",\"AagZimjbVVu3DL85bjrPkmtm3Rnkrl9Cpi4YcOF5Q9k=\",\"D/O8WlBSj0I5TNsQAANi6LZFzRq8pFgUyuMcDBc23pY=\",\"F4MuL2pqvPHc9QhN/izFrppanVHz1o50dD76tIJpUes=\",\"BwfZoRHiv0lx4cKPCZPQcAzBh0L3ohfEweICfFNtHX0=\",\"DUZ0u6hIKR4LwLLDbD42YvCYMfMq9zLSFj94c9vWEDE=\",\"C4H5XwboRnhciYro8VB2G90VbwY7dEJ5qwMM7l6ZZ4g=\",\"AaRyTnoVBF2c7Ea8BZpuBsCrrnQQaX6Gf5fgc+fAWeg=\",\"GVs7cYEHuy0ltlRvSeGkl+3AenijfB3hWzm2Xe0EKm8=\",\"EXxYd7oBlWNYmlenONVUyqfIxOM0LboPM+y7gc9G9/c=\",\"Kfc525nKe2cJefSo87hSurOzov4LmKRpPElISyhyq3E=\",\"CBJxGXKPYlo9Ndnd3X1Tk6kIbkGS0bID77/pYjvTgWI=\",\"FDYHsVRj3Ej9Et3rrpPBdDlrdpM8JdvwskM8eJshGjA=\",\"JxxHJfAc2XZ8eQjJIX8Dd/DaM+m8SS0YffCiFc/j6IY=\",\"EFP5509wDdMWGGIQL8vkYOQfCjCtxUa2L/4+z/XBQvA=\",\"GfaqZPPyKYcizTG7N4nGt09tEvDb045s4f8j1mepEiw=\",\"FHXYBoa0i6sY6xwy6ACRKya4KsDEudsDbFE+CzD6fiY=\",\"KfhZi2Ky5238k5rmHF59ChWVSfMJ6/4vPwl67hxBrC0=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"MBC47YDknlgPiE1emEFMsGGbU4HrC3K+oVGFwy5/Lqc=\",\"GOnQzWLEkKV0qrqbA7ChHcDBG05jIJTJHvcsFCZqJtI=\",\"JJXEHeHevQy1EoAZOgLTIOl4CZ9U7JapcDQavoDZaoU=\",\"CSUX13Mcl6h35VLuvsdu50AP1T2b4S1V/5xrFw1o7Hg=\",\"BkPOfK4xP8y6Q0IH6ZZJN27oiNPjCbyOXuRURmJ01iw=\",\"L6RIXx+XrUxU+pCLCyVCS9x4JVr5x32pm5UJVhlIlYM=\",\"GzJ3SadfjbcaTDPouZ4sAYCLkJDQSeGrPHq/31qpCMA=\",\"CgYhacRyNmliMlGlCkMY47E4H7XGhVbfn+E3R0tiQjQ=\",\"FsM/9TbycRRdrsjwPZe1bQ+M/u23zDKSkP3Bu/3Cx00=\",\"EoDQZ8TH7O192K+sTkyzEXvnkB1xIatT89Q8RjD3sHs=\",\"BHnHzfsiDk2NesqbX+c4CyzUR+vz2KIEMgv4H8op6xk=\",\"FOAk/XurLVAxJBaGxKrhbuMAQi34tBkZzLc/sV7wYHM=\",\"GoDSBnfNG9qMl3Yta5oAbK1z2V54r7Pq87fz8RLjm8A=\",\"FDTkloJLjqHvnqf54yTJN0kuM+sa8YRZ2JspujBUn4Q=\",\"AwSF4MxViKL0mTIRe03eTJM2Iasier4yb0KchogTSJM=\",\"EArLaRFLU8ECf/Vt+d48/VYdfMyB6IFVVpbg7d+5H4Y=\",\"AXqXRTmIitpbPuC8fqq0FIldIRHDqdXFF4SInsbUFUY=\",\"GU3eJ+P2NzyUTPkHmijWjHxzt7YPWh9a63y9o75LnoU=\",\"K1Y7J4YYBDn71vO8SrXzrVL58g16oxxAsPeQbysEGKA=\",\"Gr0cl+l9e15ukYPyEwXfvFhV7TNjaqelz8OeYymJHGE=\",\"KuvKQxrEx7HZbFRDJ1HW0gE0zIQppRu9vxDWpdpNvPc=\",\"HpOzcqZxIU8ACqIgryRTu4Qx94aU12MRq83v3mZLW7A=\",\"GVM45okC6HBUdnnQ9KVI0byR6z4US0A7bZwF6/h54nQ=\",\"K7eguLz591QGl+O9p3k9QuH/YIOPS1n4ahraA3O9sas=\",\"Eb49pZRe99FAv54GtGjsRKrDfrKT3dv4cfkpL2lpVn8=\",\"BIGuLHC7UidkukDH/pkpE+VvxkC6y5d5T+5ACGHNIMY=\",\"CRnK3COsqoteGaVKmWxktZqQMsPua2qs3gJpbKRiEWs=\",\"Ji3gsD/oyaawSs42YFcCcYBMZu1kCZjZM2KRnhPb6FE=\",\"KzyQrDpO374JszP/Vs7CkYpe+SQ1mtXiJeCLzxcknfk=\",\"G7vpgZoFpv27KCfRusLAyXNqp4KA+KgfxZabV2UiAUw=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"FCrB6Db8MCeHBLR/pJqEza7JXOxApgq/5zowoQ8tcvM=\",\"EC8k7Zt8xKmJVyeJBfdy/kFJ+xG+/DSwXHVWoM4alEQ=\",\"BZpWxoTDQAfhdFd8gdZp0eC5dB1NK51gd9j46MGAPfI=\",\"HyL4yHA0QY06ean1+7LuSTxoUUme4qhIALDnEbp2qRg=\",\"JhTRg1nSHSVzEJCrtodzZfSdWOpOeKRKnnrbRAmjruM=\",\"DEFKDsrE+gY36aTJZ5CFp7s7E1izlrK85+ua9PDDN8M=\",\"EZMPsYrilEz8JchWzdz/cCu8yBosKoqBq2jiq9DWPZY=\",\"KudQMhSJrWqrFM9/MIm+4B9Q9vGzocBGBggE0gTW1A==\",\"FTL7L09qDcI/q1f7KYiuOmG9Ye/zVjTxFoeZFGWElSU=\",\"KbhcfZ1SyY6sz6sHr2wqqsHdVaCHyoLPY28oaN3fOYs=\",\"DVDSImUvYTs88KNkUMhIEIYAssmLXRbkt1uSofyiiL0=\",\"Fr0p7OZUJhHETZDnLKlufoG/BMrYWLiPZbPPBZNIvnU=\",\"EU6ViI8eJj6TBFMeZy+gUzxZqtMuGabI55oL49q6ncI=\",\"B+1MPKypNVDZOf7nLzIvXEXEXDJiSB3G0/who5ukqcA=\",\"LPHY6Vo7LPjUwaDdU63ubpdWQLyQLgXDV9Q85AcPaAM=\",\"A3MKgtERTwPqD5it0gzXOIlJHC02L8926q5U3yBruYQ=\",\"IgFifQJzXW3vhfPUQJtfZ15PW2cPyP4zTC2nLp67dOk=\",\"Head9l5Qv/BSIufRW7fCWTWkGVMgMe++oKiNQSZYAlw=\",\"GZ6XV7SkR6Rmkkru5fTjxsD3wPFUWAg3eowMQ2s3Tak=\",\"HMEXXp6Bim6iZGwZTza+w8N8YylLJbqpyfSOo8MS0I0=\",\"KdRVIIizBTwWyIVSLHlMo4i6OMa56yxV4BFTKl8Jn7w=\",\"I9Oy3Bx/89KYmX0GRgav90Pn3214NMd1rtv/CZ1Fj3g=\",\"I4itRue/+Ni0Pg7w/vCE+mDP4ymT6nGDUE7nOPZEXMA=\",\"ME4eJVk9u6B8GqiOu0qAaE2RR8Cy+SR7SbVBbxP8OJg=\",\"DWPyPd51csFVhhiKEqehwLK9EJ9jQylPyPi8GneEFNk=\",\"Gc9u15BXpfxDmK51acG4VRnJchirhCcj1iEs+poKLb4=\",\"CYYmdDWmm/brze03jSqkoC7jt6i+yu2coeZjYA/JDD8=\",\"LBV17oXozTz7Y0JNhOpQAHhuWSdDOqjAsCEeXYeSnIQ=\",\"MAADr3iMWnV2t2T4i+WzsayMsLlGYJD7MxVp1MZnLDs=\",\"Ce3UKN4F+ga2QQxXpXlvzRztTj0g1Cu9xAsA6iiqs4c=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"H8wCVySUj1PQRW6F+1bz+B4MjUwrztXv4/o6+P93rMU=\",\"DDfz4tOM0xOOqTMn1ZuIWHPUHvMrdkCWOK9kVbW/2TI=\",\"HP+Tc19ei72rcx1rGmDZRvJosILZEv7Qs8y1JdjLZIU=\",\"EVYy4RwXBPll6nJAckNwfsR3xxbMQp8afrRX9DN6WwE=\",\"ENG8CwGfi8bR1vW3TsTkcrhV+1lFheRFjkwml1CRJxc=\",\"G/pHRdo7dzeBRCbyud1q5+oDSgAmPdCRzdfhGKRNOMc=\",\"BC9Cxs9e0PKeplNbqFhAkUV3JJgXSIbbfdRL+axU1JI=\",\"J9po08mNkuTpN3fAusbHz1COFudI/M08C3uftU5gWqc=\",\"HA3SQ+QAkLMdCT01yAcZMDt8SbCIva6Cskj8HcN/o0A=\",\"HD4oFLbrDeg0f/LbnefTvOZ7WpdYX8mTO/RfQG7bb/U=\",\"RIe/brMFsT7qWoJlmFimQiZChxIjcxL+wfa9U218KQ==\",\"HU3Mf8bTGjfJW9txGiH6SQ9HhgZINMJdLhWqgty3Yso=\",\"Aa0lKyORnJM4Dr/X/lvMIho9vE+lnlVbjQC/rYcsDBQ=\",\"G5u0eIU8Rqvs9DQRXVcwxtxZ0McK5YABPSFvn/JZZWo=\",\"qihJ2mZgOYd9HGOANQDdy1kljZhUu9gXxpCzJkOmlg==\",\"GoDEAwLixQs6mpMD8Q/85J17tffl4Z3chYOPAd9hyyg=\",\"D6Ma8j8rehJ9zCnXp4lqxo484wmnCob35oD66IrhGvE=\",\"ELYZllTD4ooF3zbj7OGSLD70t2QbL6j8gKhOPkfRX9M=\",\"IwAqPnSAnb096UJg7M8MULFa2PHQs0KW0GrljkootvY=\",\"FJVo368/rJayY4w1BqjSVgnKGOhGrenRmv4MHgXALGg=\",\"J+Ay34f2wWQdy+1oFq79/aE3g8MBxuCpDDGpj0wLkgg=\",\"AY11FX/xbpWZDYPKW8k2YlGkXG95Na3NHu1slE3If14=\",\"MBm1YLfrZjU7zP4lMUZHVCWYcNgkbX81u/EMaGK8c7c=\",\"D0ZJu7MBNIj+L2GtDVkEM/XHh2qXz5yD6CHweINMRbk=\",\"Ktqz6DiJNNW6fPA7mMI979pcTBUzZJNrE2go0G2xLZk=\",\"FJ+q4BB7HKweBkzFTRlQYCcRqnMI29rYnsFz2gWV/2k=\",\"GGAd0VK4rDOO7bEnjVN8FvcOH8zQ3Z8bHsZztLht6w0=\",\"HWXMbnzLcHerUd6ZL0KCRWuBjaJA9G3odL3U9q8ymro=\",\"D9wPWjK2WoThNAJ8c1NQPH6e049JkH4opZaUGehDiqY=\",\"Bl0+dTvsE829LUywhfwlyHM/UrU3Kkrt5G66GSWMKm0=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"GAqRbpQDf57xPwWh6iK9QcotSw9e7a04akILphiNSII=\",\"Dm/ChOiMFAPwarhz7J2AMZFlXTXCkHQMxoLKyiL8E6A=\",\"J1O7CaDEp3s68qaTM+UbsncDYV0J1W+GQj+Fz8iCf68=\",\"Jy20ttcfgPUuSqEGH2ok6Y3AQaC60H3Eaq1Z5n2WsBA=\",\"I3jOLFIHSwJ5QIkVYnQwR7e1f/wfZlTC3MI77fHLdgg=\",\"JukPfP1Ak6J3YA0sVkts2PS6OJm2RtdCfOkHqW0ltOM=\",\"HK2zkI7gI1OjxF+7V9v2s5LVseWaE9WLV7fg3HHI074=\",\"BNMNWX+d1nIOheq7CngICY9y176uI+D1hFKDywQzTis=\",\"GT2minppm3zzPDrJQqlgwVT0R6AW2VfiQXhiUxAbHIg=\",\"JkhOeJfxbDC6u5pOuCG5TiBEEep443Wby1X1+eHw7AI=\",\"JqSWssK1yluj3Yr23HOqoti/0vZxWHb8VwOtaKrmoe0=\",\"A4W3wJ3SoaDCWVqUCRR4DWG0nwgeIBScN9kgoG3Irnw=\",\"IVrYuRtUWY4K1xKfJvbrTlKifac4+l7CqvO0ccLvY7g=\",\"JcApvFRoeH/ED4uWj5VCqM85Yy69tSBJbPmt5y8ollY=\",\"Kov0X9aExAjogyNBOX7AWJFnwNJs17tzInzIMnNjK7Y=\",\"FiGkUnpFeTaqEYIeDhg8gwCOIBrJIu8kkacgdn1awoI=\",\"IUZgRZeZc0G1tRLC0wU2+pYdCbUZX0/+IO/SL05OEIg=\",\"D0aUF9JXSOZUpg16QtohnCwasWTg7PSVCjwVquyde0s=\",\"CFRWmsFTEa23fdjyzugQrKKcCaR7YTC1HBa5UXjXbys=\",\"DhaWppgNfa+lv1ouEK5mTgwpFTJyh0FTzb8rMDxsh2I=\",\"A+7Cj3IJn0CBtY3rCpWrzvTKBq/lJQop9WWxj8jA8/I=\",\"DwNZ3Gd6IgimsMYnkS0WtzbpGrP6g+uCWnserXHQAPE=\",\"HrSeLQ8XhFs+VZ3BLMN9cGv54Ejmy1WnZt2tEQCge34=\",\"KDfZGxUBpdS5WRPw0sJJZv739cNHqqiXwhC6FZE97yk=\",\"K/OfbPHO9sz7v5ekJUrNR4yJfIzZYU0/j5u+9N5kbJQ=\",\"Z5EucUTWAps7xy1Ejc/bv+D36VkSk6sgWzidYe/3fQ==\",\"GRtHtp6K38kE/2erNtGfuxAhxwiYudZX+2oCC9a/5oQ=\",\"L7611UIp7lgqYnW5l3t3zKqN3JAmW3xdWfjRmvaeRs0=\",\"IjUErPhII2oPfNlGyEKJxLSroOEjsduOWI/efeBu8vM=\",\"Edjo73izE3Q5N+FjlcEZPD5G1LhMeBiQdteUH7/wRiI=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"INLjYSXmgVNXhdwpTHUddVfjHcmcAcxF+2fQ4PcDHl8=\",\"IQgIWuYkaufddvez8+DnMbfkBnYC9gJsnMYTIYBtS2w=\",\"GQRqn7J6pZ/Xy7B1kFxl4WXRYkjZSMH6uatHLFfYrRo=\",\"CTqSb69o7ZLpQ1B6iTFjtDOFeh3FZPPybC9JcWSFLIY=\",\"KXGoeccHk9VIVPfM3roJkianA0+l2ZEdyBrugM9J8nk=\",\"D19bqbdK7XYlmhWTIeJsvhzX5YSa6FYv9JfBr5YoXR8=\",\"IOd4YiFwDkZ99k2Nc+TDh1OkSZaqcy2jjmIb0nChbg4=\",\"H0/ACKQaJXOb1BEYuqvPJGX8sOBWBbshk6rKFnc35rU=\",\"DEo+o/cI78iDpLzkoGUdhRfHChMk3kk1qlCMPAriTco=\",\"LnYQ/hA1KvR7YWiRCQcUxoAvP8H7nvshJIaU72JGrAc=\",\"LritQMU187ewXC/ZY7hWnpViWSJ+8hokt6/lRu/+QYQ=\",\"FUmJ5wXPnmK5QW4og0pKe85rVzoSNSZM6J1LBGtuu+E=\",\"GEdJoOG+wPlMjzxb4Mdth5dpUkScK/5jBEE96mEuLh0=\",\"JK1L+DwvM0HcoMcqNXX7EoBVaOksrkRy/hn9/yfxHVA=\",\"DniKCWstQZIEbudCmB+jiRh3e2UDDvU5V1ccO1+1Sm0=\",\"HiK51MJ0+tUtTlZAtKy/8sSBASegh8Qvm+mrWICdDVw=\",\"DIo/LuMkZxRASr8FIedKY7g1dklqr/hcK+dKcQaEbxI=\",\"Ia3elDRhv8vX6xA0WpQDOyXUcBFXxpRRn7K0CTt1Zwk=\",\"Hqma/6ponW8Z+Ka4LUuB39HxdoKDHgwA1/L4/Uk4o34=\",\"FpSRmf5KOHUN5z+nN6KDpqmtQKJ7Deq2MfkpWt4kI8w=\",\"Aeg71YGs1hw7VK/LegqaATjZrEyHOc2uiXWdpRUBOPo=\",\"BCphqEyUTc91T1qXsdyMLue9+94jP3iSEPUG7aVpc7M=\",\"K5PCixV84yv6O40PWFBh51oDt5w2anWFbNtcoic+ML0=\",\"H1Qhil2upgRfpgsGqyUgxSVgKCscw63hS2ZL+kl1K/U=\",\"D7/dNpva9wNmn6XjagCq8LJRpQkSBIra3IOq8JLn8t4=\",\"A2M71acqUf3spirv6UNBBLUuFSZVzELwbnBFXMFfji8=\",\"LA61S1+M7ouomKJC3KZN7wndo0bQYyOJKVf6MLPBOvc=\",\"FlA1mD9WOx47y+bIc/v5EdGU++VCQ+A5s897byr72CI=\",\"L9mCCzy7Ex41dd5Ozs40cTUlh+EMlucq2Ge7xX9Md4s=\",\"EgS5GdhqEs6nDpd3Bqsr54JZxsYI3KYo7uzOxQuCk0I=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"AvPNA9gugOhSGiNmv3no1P9c/DtPRtuZpJR+HOSZOys=\",\"HKw/3JZ0xkwWFKX0jWUjnapgHiZ2b8/PKcw4XWs3Nd0=\",\"BlQV5N/gjjV8Zp0UW+X6bMdLASbwmfrx1+hf6b79MNc=\",\"KO8Zq0uyYmkGcw9TlJfd5kihqWfaXqMZaf62INEVyLY=\",\"PojpcyoaVy5w18tlKIVxQ/tRqUn+ng+g+igbhbZLfQ==\",\"JIarXFMR5L3GWrSfxgsXL4UZCNZ1P2qcxA+bFTWvBy4=\",\"DFBGnGxr1TLG+AXSajCn5dcD4FN2V1GM2g4cYEQwHss=\",\"KPi+UlJ3sDRrzWZM+wokoCj5C4nKQCJUtPlYM8t+6HA=\",\"CmiZDaEvMnptebNWwdJ2QjkrGyzZzAtdZ12YQ2Bm5WM=\",\"Ihba+0F3ahlBsfF6XdjMocvg9g+BzqrEZYYbPcLrvmE=\",\"IObJfDdIkdkygFI2HZMjcu/LbAyEYotvO/zUHEfRUhw=\",\"CiVlzOvRA90URTTBCfU8XeJ1rFbpFwrZ4+0LYAqlHqA=\",\"HnmkWAK551kuYNfklk6JIKRYhiz0AhLblkg1QKYqzzw=\",\"KfVPGpZRS5tC7J10tdcV5hwmWxKacGG6wSa/1Q9pb84=\",\"Jrth1h/yeSQvHlx7zK5ifhlC744QOpFbZFJ/0OsxqTw=\",\"HtTWBtgl2G3e4WaJ8k7l2YMqFA9EtDcliWn0HUxELHo=\",\"JRMf4SeY8chxL07rvHIT6PgLI+fRvev9JVwYeTc08lE=\",\"DZIe2AU8onDWA0nYW6ON/NBbyWwFpoZ3GFlWcHOF1iY=\",\"JcerF/PKcv72MEL8++Gj1fHvXW5S2m1tu1qtRrHhdCE=\",\"HuA4OcokgwCb6/RhtY0RyrhSISZC040dM+SNmVb8SOE=\",\"FaWi7s0QfzB9lWVJZEjP270U70IyMnXAq2WXqvGJVHU=\",\"A/4A9GV2et1ICOwSqraH4Wz9cCwUUyZ7eiV1xstVe6c=\",\"FXeCGwfkuiuok78VzgYsApCix1fKcUD3bC8DtT2E7a8=\",\"DADyivXN0BGQffiRZp0KQ4kvv9JK59Kru5UbZzNBWOA=\",\"EfL0zeZo/LKLJxU/DA2FyG/bTQUG04/Vt20zc0ho9Mw=\",\"DxW8+C0dWDhpYFMJtY04KkdQ+oIh6+gSbuUirmlqv6M=\",\"KofIPFj1UUYViDDfUtdEA+MlaRebQJ2Ol8qKJ8dEa80=\",\"G2VbLEPqq1uNEE9HLY2EqDYkb683M9669HC4tos8YHg=\",\"K0x4kVcjGSY2gBFqeinp7jw5Ug3Yu/MwFuMbiERDado=\",\"DVekujCaOA7Y+QfGit7g4uwzajPWer+m0zwLNBkdXD8=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"Ak1wJrnfbe49/DZr+IMwHS9bDXaf/m9iVhRzHIFjil8=\",\"L/qSYNO8GpittdmkVmpnOkrIFdkh9mp4x7Z4H1pFv+0=\",\"AcSd2UOaE1iSRWwZTAuLcn9fjfuLRjMs/3mw6IrwiX4=\",\"INwNcwwYj1cflEzaZN8DhfMe5HeEZJs4vIswn6cxAC8=\",\"Klfk88HTQQMCIH1T/GU7CRuSFbmRT34hFDxew9YIAgY=\",\"GJJElqAR8dD3M0x178gqdWtfp7c5rCE3QudH8Lq4URA=\",\"C0iNqS25+0YN5Ze9/1kXvAc5PlYLdd90EqI/hnggCKw=\",\"GBcH7XOrxH7TAwAa5vw4jf0wvKpXt11GZ/ve3qOa3fI=\",\"Lz/ETBowvMNBm4jeZXByhD8+tzF4mJSE4BCmbHSkv0E=\",\"GfxHUUnzlF8/o8iKp7sWbgVss1OiuyjpjLLGR6pyYBs=\",\"Ak5Sx+zf5ZrDk6fjZZ/AOPWCop8JB9kTDhYVpg4NirA=\",\"B75vHPcZHYz4g0nOzT+D31ST7c4XCPZaMFw+dJ8G2mY=\",\"HyGk0UOjSWzWc29kYtUs4ktAYw2NyMyu4fT+g9LY+OU=\",\"LSbvpq31r1T0bGg19NbROHS18PMpshooCxk5n4VUAbo=\",\"GJ1V6cDqOQ8uIZ/kq95MDsb6+hto9aAp5NLV8mmMBXI=\",\"C4JUIPN3JSzQlNtA1vN4BqxQiW8BprVjYntvv0W6tZs=\",\"H7oMcAufMBEJuD+tYZZDhczeLN5pUQtmM0/rgNjcXhM=\",\"DUwDgcu7I/9BmZAP6emLBYginpXNq96Hc0t9pKlnKLE=\",\"B29dAOc+TfzxP1WM7Zb9hI00ul7Ei8wUEijCLRholDM=\",\"Ha5Cp+JFUyEOwdN6g+fjefEYrygzpjjPsvY3wnMbFno=\",\"CnzFvyTeK3plU82xA/e5OiylDnuLKUdWP7jq9Mlqwio=\",\"KwJ3ZcKYIoHz9VLJ/COblrBIW81rJGVnGJdgOH1UpTA=\",\"EAGXZmK2/x7D9lEDGOUY5tuj5prQY1pBFT4YQ1ZT4W4=\",\"Hwo3eBYYlSL3JOplQE7yKEe6wP6V4qbGZqqyfMTc5EY=\",\"HnqUrF6kP9hoeEwpQyBapFmUV1tJSgwMRp9r4yIHfHg=\",\"J5EgZ2b2KgazoKDXF1mURCXlDTkiGLmZqGu91ZAYQHU=\",\"Ea2HrKbCXgTLhesVV+Quz1hRqdJNIPntVUq53ppWGBQ=\",\"B9dv+D6ao/WSTtMTsNGDpXA/SesX25tRkrvB5ZNfQfs=\",\"GO7CEHLJGTflPZ/Q44AHodjs/vie4KhI5cQqczJMCJc=\",\"DX6h2KFBZw9VSUYcjmZJ58DdJpJ1bGwlzEUl1Ddyisk=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"HZ5KDSqF2+IOZAlkgG+h5RIuKCH29G69L2FPUlhmEsU=\",\"GwUp0rqZ+Zx+SVih3ZQBYORRrWCnMfSC4O7E8mgG3bY=\",\"LXjekLLLmQHM91gh22QeJhm+ygJOM1b80gsHRHc77B8=\",\"rLWKXGi/pDtGl3qdoC92cnl04k8T8ebnZG/MFyNb1A==\",\"EzRJ0IK4i1WzJOwRDNtNq3koQ+KRWgObUvE5kJarsT0=\",\"HkCwxXWXye/Z4hqgO55g7c/MYxPysyWhu1UqIn9GbPM=\",\"HcTtfGCJm0EHRe1ynqWgBmVouX3AB7bn6AR2nc1NfTY=\",\"EUbPG+NFWOZD4oUMv5DR4l4+4SL4KSoSuL5Mu8OwLxU=\",\"JMyPxMh1qI7KSGSwOJRfgTgbgprmMVbjFKsleClTGg8=\",\"Kflmjd3WEDWUwJK0lVvqQqeLdisBT4U9EsyKQ13q9Qc=\",\"BCP4rPtkJYV/B+Rbq0R0snRsmH7rPMzslPg4/iXVJOs=\",\"Im0hogbxfWSTBuoYpC5Q05XWUTbQgtkbCfIm5j+2VAs=\",\"UNjgICSF9u2SbxA20c/NwyUrSb7iVyGKoFj4t6IjIw==\",\"LGmYo6HUmIiT6rp0bPB+xmUInuFJhzahWA8qez+ECl8=\",\"CPB974+SkflAsEREOnIPFRCaZgLlRnDk3exPm+13P0o=\",\"Fa2clYSMTu5CKLHaJC2mQOzbrCym8hYwYEXHlODNQes=\",\"C2yUrVnnGV5HBG9eLb2zlbxF7GVLYMSdjznZ+LiV0cw=\",\"FpFaxiYjsZziEBwF/nJ2w3OzKfIOH+K4b4Xjuxjy7ts=\",\"JBwXQTmvoIZ/EIWG4zffMXO8o260GmadoSHMIcxS4Vc=\",\"L7xIpJPaNjKHHS3lqMIvIhEq+oix5xOV7O0BahSZQdQ=\",\"H67e9SdMrZ2KVcf3Y/qGhBlgoHRnRcNZUL7dqAtvQiQ=\",\"DlypBJb2qy2yc+VL3ZmuDYvBxvCQTeFJMpWPbIN8JvM=\",\"F4P17f/ALVcvqneYIACDuGsrHOIyDcfIoLHr/9vJ1Wc=\",\"EQj4myKFrQIoW0zqju0i0Pq4QfId89Tr+zmGBqa6OGk=\",\"CvM95zfD4fQjxR2JOEJC6iO8Vkv0AiggAs0w47FjRos=\",\"DFFSzgZfyzC+RAXNM42FylDWoG6TRPzHY02C4Ol1mnQ=\",\"KbhZUxrdC3IpJHhyVSM55Kwq49S2yoxwV2PMgZMQOqA=\",\"CHYirPJ4ECd/48rm4nBIPQ1TFYkA/KGEllCwtezwFQw=\",\"IohEiU8OzFFkEbC4ZNupiowm71EGJ/LecOHRO8MKbh4=\",\"GW1pUWxwHrAMZwy1dzNoBkKWQr6LDjAf4LsSKT28JUg=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"H3DYioUs0WyC9wY32dlz1Z9+d7gmiqzUhOTlNQD3KyQ=\",\"FBzc1SzDBFKPf5PyOUTdFrPMoahbKoRnDFBLl5K+uhk=\",\"DbVnRe4N0TOvbze/8fbawGHsfkAGn5qBHn0DTXowq/8=\",\"JWngHgDHJbSNVdJv2MSXhfw2JIKZ7air07krILFQILo=\",\"A1PBWYEh2qzVMviw/9F1MYswm94ot/+toyu3O3hNlfI=\",\"I90boretoY+xM3U1uTj91TGKGtIozwB0fQfv0VnMI80=\",\"CkSdI5xRQA3o8nWwB4d5CqUI4eFgu2bofQ9OMqxaW7U=\",\"K8w1rEfq78XOrpO5cYfxmfTql3YJWpjvpTU9ohVAuck=\",\"IuSaQ3i2tpVmUp9VuHTSME4ky6pdeQ92kA7i+EeOPAc=\",\"BmrVuAEz/QpjkcBbfiCxNBbkDCmgZGkyZ2jyQnb+GEE=\",\"A/IlMinCgQquXIQR1RMKtBi74Hew8RImIwZVMqJZuFc=\",\"JmLmyKETSgBYZ+EDkBpfbGesNzemYgrM+ANMuDvb1Kc=\",\"IKhgZu7Otpebqt3mojWb795Jh1urFC5X4XGwhwspIIY=\",\"E6+8VXPoQxKkMWD/QEUZCtwqnbA5gOcSY4H0CJ58kfM=\",\"B9bbbN3zUMwdWaR02E+6rQT6Dyv/kV8HdwjfQdWyp0Y=\",\"Jo6T5G/X8T4aNZ3fbrthmiHBBo3m2JlZCqEEi4gp3bI=\",\"D4iZKLMFswT84o8QPy5BlPKynN/yMbBe/lYeHP9OcLk=\",\"DFR927+Hwyv+RU2OiwrUQCybl5yqzq69nVlITUPNN6k=\",\"INqDGC+qwFmp0As13DRe8BFRF/0koV9rkbUBcoSXrlI=\",\"H2tkO2DlNdDycxoyYnNXbqcjZx5sUee3QoECj/sEYu8=\",\"LRTUOrIZb8cOJqa57z8unRj2ACavWDM1nypPaU/2+c8=\",\"DpuFhTvs3AVCmwoop+I7qlk3fZA3YVunQIk+uXGq36I=\",\"CmZGWLqxFSXXCG4SBq48aruewx40YdawslR6XWwu1U8=\",\"LgSY6FOdhXbfGHJF0LEiL0PPTT+PAgmv3LL2h2djNAY=\",\"Fsh8dmLmckJjtE3sCICAMzeTuiAC+5Zp62PcOxGJtus=\",\"CcXrp1rvwE0ENjgMg02jbSCmf9ThFlNJi07CGzCQD1Q=\",\"EGa1Iw7scLvebJjtTkjjkv6xiWe+caEqwY5zKgS6mEE=\",\"LdKprcH9PtBOslndpjC1jAeR1+55uF/CD/izfKDcBGQ=\",\"LpSpbqHxip2Zv//D/kPw91G81UnR5ZkuNmlDqFzPSvQ=\",\"CNcunf8g1PXEVDtyXkPgHxy9K9DZ6ozmsMGpsLLoSZ4=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"IwBQ65kB4tsvFt9Zp/W4ocRB5f6c84aaTtBzuiX10Tw=\",\"HC9/QB2hrZiebLtcgeNVmnkwzrGRZpG5stcC7M+j+EQ=\",\"CbORyrDDS5GxVUg6QTNKmulyA5QtdoOFAQCs+jXFFgA=\",\"E0gWtzMSqs8vVzQYKD8nvKWNTSNiSJD3o7nKgcEulxg=\",\"EktH+eqHyUEw3c93+H9LxT7gh2mdDl9iZjpjiRwWddE=\",\"D+WiElGmUmHmz8NwlARxH3J6YQ+UBXwwThumey8AZSY=\",\"Aoqztk9vbwzicH++hUKVYW1nbfsNZhd69mebP/pRLo0=\",\"GHBJnaj1jwCs9rETMRnXVyILtU7L15P57ULWXDF2D7k=\",\"INtwNW3Y2FWrkrKKlkKazVynfNnlIRqsRIuZHBZQiT0=\",\"Gh/xxYGS90gXRpGpjYxecz7YDqXC/tEbCY/LgVtDhRY=\",\"GrI5nH584fXT72w88z85uoPwVL1z2MXXQlZm7zkOT2k=\",\"HktfjqL6IuVol4z9kHd5N+/AcjOOFz9Jzfd2GpyqK3o=\",\"IwWyJIMofpVoFg8N+6Y39QxjRy3YnlbaBhG3bP6GkQQ=\",\"Hvx0cQFH5OffZYDQyliLbzOL7+tMb46KCWfPXJ3Ac5k=\",\"BDxeS6POrsQZCs0Fombo0zloHq8SR68Ef9Dc5y+zfA8=\",\"KtX5/lnLgbs+s66ZhakFrb8v7oQm/gzjwbEIIJrqhE8=\",\"Hza6DSKDmzF25Vqe0H3L8CVeOGvOoKW+mCPbszAP/DE=\",\"ClZbPOXCqjhhgSdnjYrsI1leNl9eUdl0dLhbFqEzYvc=\",\"Jx38KRRHMM+ngPmszJnKqn0U4FxC30ASk9JHWcEtjtM=\",\"ARGaeN0Mv4gBS5fm5XWLZMjBM6WYm3WK9g3y7gVANIo=\",\"FXlwpJ2tr4s51GraGf0Gs0eEpvM7TYVUfCST8n84ngs=\",\"CGlzV7rEExmEsm6o41KjxeXDP/IvCQGWRvQ7UTfU3zE=\",\"Kf7LPXDhvSEIcyKp0PDbksZfFB8CtFk22aW4U18LlV4=\",\"FCl6na1u490K2H7pwtxjaFyq5zkQEuJn2iGt4qqkNLE=\",\"DI86fKG0JCGZ1qCZmzDPPmHf2la5jcpMm7GZoHD5x4I=\",\"IQW8Agub+hojsLLtvf1M573tytV5BtL1gFO4qzXxG0M=\",\"LesE9vkMJKB9LzbkDVve80Y5sJLTlbtKT7SD+ErsvL8=\",\"KWTFlAmFgipkrBRD79xBzzfofb+FhTW8fIcYF2gJHGA=\",\"ILaMG17emcz8fNEjGxPpDVySNcNvL5Vdxv9TUhM+qd4=\",\"MAluEYlu0Wcmh7609nJbdJVQZn6NpBhxO+p9tfg478o=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"BuISKO2JSXi5Cl4LaR2JFqpjcgpceVuaBzgUUuIjgrk=\",\"DJvPgNxf2J6+tgRDcmJ2iulfpyY5JFAVQFUuek8kFKo=\",\"Caa+cwTG2gQ95MA61cdhAai8IfGqyNwQppXHxfwvkHI=\",\"HXiSPQHIrC9Z3fXwRstb/Iv9CD7GGxrwgMecLdsnqDI=\",\"JyrmSWQKXaKRvnkVsBy6hyUbxichQP9CCzbyd3RZQgk=\",\"BLFEHvFmxSD5MJ8vmEARoA38cdYTlgPukEluWdcV93U=\",\"Do0Sgax2rkX2+BFr90mCunYQnEKi6hYzV/6+BCJljEI=\",\"HF1CUNp2L6+/MTgEJXEm/qFQhajunBA6mZKVCrSvkuQ=\",\"E9VcfAtems+sIZYgHo5KHKCRUFsStwBk3O9vnTseGLc=\",\"A+igPh4l/tkTGz3nFQ2lrQtT2k/b6pcp285AziU18Pg=\",\"EmI8aZPxwwEIx8eYaMiOOUOmRZXre/tYFHkaqtWgnuU=\",\"HTgwMzSysTKNdFMBnFcfwo8bxeTjyUULSR64cNLI/ok=\",\"GSIx6+NGndECoAO0HqeSN0Kc/Erk19e19JFUqnC5GOA=\",\"Jlh9jSoHSSN5j6lbeNVYpzV/SJifVTugO76ADk1O5YI=\",\"Db7GBoGnZyX8+bAJAG4SNfK6LT8J7GK1ABHRntWAGcY=\",\"DXkgbIow0mq8+zdfuMWhF/PKscn9qN3uF8CZGxHGPhM=\",\"C8V+BIZ5dkuVjsVLgvo7xGkOmVkfQiFkR+xquJ5XUu4=\",\"Gbc6JWcBYOwmMYY/6Lk2kaMKXmzs/06R5LVt6k6ddag=\",\"CwLf1Ot51Z1mV5Ttgp0wHOCOLlKFvPb3WoPyOBX4xcQ=\",\"Lo7aSOXf63HjMCJ09RanQTH9M2phcSahQ1y+2O9snZA=\",\"KCwfHVYvKSfmlHFbYxoXa6r3YhxEpVuQrS8a9RLytJk=\",\"DiRVLnKicXslSVb84h34EP4/H7Zu4CJL50qsrE+br+4=\",\"BhnWu5+tf+egY5mN7JiIvuwqHCIGvJf2hTwQ5i7eLs0=\",\"EIVVgL+mE8IaTv27DzAtTTCoenmnfK2Cs3rHar5Qcaw=\",\"EufS3zMsxdYYoikA5mVSnywivSsqo4fZyzDalIP3EVU=\",\"EI+gVIARhaav9hnn3dncgJWITdzzyFuMkiqq3n/ej2Y=\",\"L4zd2PLF0UqxS5MYIZe4BztOnEHBOLZ2SuNWl3HmF+k=\",\"H0YipsBR42lkFLICSjk5F0NHmWi0r43PBxhtXC/weXI=\",\"DDecUUrbvczkUCzOC4X9A/rpjbnY820/PFbLmUKreHc=\",\"KxOXCDmfDCP7UaTSTnGJ+x5hn1x+A7y4yMMpRdjhkw4=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"Gmf6OJd4yUicSV3rJI51TDqqqmPFujxuXP2Wvk9RbAE=\",\"CoK37+7Bbmxa6l6ZWXsJhQSXPIJO29R6J8sz1l19Cd0=\",\"BYtdctD7mDbauQiQqanbGDlZYYt949a3sfwHYhZEvHo=\",\"JEEfyTMcRGXeOJwVcZnKJPMEQkwEgdEX57DqI2V68b0=\",\"IQNRpF+k7yayg3rQa0ZikFGkZGAuUrNu8k+udtHW004=\",\"HgXknbZsM0Dn2xSSHAJipzRsaHqMJhN0N7UQ4whA61k=\",\"Lmgz1MLUkqBaHCvkWNBqZfa+QocU0dRMLc6mYVcdpwM=\",\"J0fg+5PO7fkdC3A8zYjxeejxAzEJAyFmCYW8Y4lyQc0=\",\"ITc/5zQsKQdDCb6SVGyjMI4oIVFy1DiZ2LNOM24ML+s=\",\"B6ygfQBpoCPXjgqR9n3HSKtYmQrxL1SxTvv4P26j+Vk=\",\"DTGQjfkMHp3rwQR2sPF9q7OuFQ1zHCCjIfWtbSghO+Q=\",\"KLkK25Jt92kyd//SPKc3hSpEFReo7KKezNcyuQ3A21Y=\",\"EEFH0fYQFQx5x7z2HvHrHR1iCvh8SVFqGTeQ3FyxzXc=\",\"InBLDupUXpPYVnlH9XNhWbjHVZ2pNGhR7wNJQ6n2Tqg=\",\"ASzxOGfh9MZl2VKVVJcZevghGSl1DdcGpqZdxlS5now=\",\"JkDHl6tAnMOz7iGGlBjO1saqMsjZa5o9qFyZ2KK8lQE=\",\"Ej4BeY0JSHSf+O0kpzJwXkQWKCbCx9KAJdoTPsNYuCI=\",\"IvWYjEfDb0VPxcL5grhUtPT2SsadtYp4ILEO0FocG3s=\",\"DXGgsUjEZXJ67Im9xmAbO/NBFZ4OuSZy/SzSlnBQlVA=\",\"CcRFDA+rW3e3/t3I9MUAMaET35c9Pb/wEBVk9N2l62Q=\",\"IWkJuafskn/0voH0XzQAS4DeZI3Mtk6VbmiXVcHQjJw=\",\"GmdlNUIOFw/cx3hGaLQhUC1p5ZVZktExM/n1OCn7/HQ=\",\"L0XoA9tj2GumG47TrzjEigDQzmnBUH6FZHAi1vOe4gg=\",\"A8+JmTxGVO+0segE3Fq7Qj/1B/erxlzI0aZgZxJkoqQ=\",\"LrhAlhriLUfndr+feNjwl4ZlLrmXgglwEOEPzf3rnuM=\",\"E7P8w8FWBC3TDZyTWkZcUoJ9unjN4lzIekNoRaOMwdo=\",\"KsKUk1e83FPYojThlUqpSBOgglqTCO42WdXThrLxDlk=\",\"DhVGC/MU3jxn2GiXMohIO8YpJry9LnBC6oB4iPfZwZs=\",\"EcdnoxYxgtXusq6FelswEDlflkC0QPdam4WcMKsYAMw=\",\"DeS4MS0j/6R8zO3GXeVMzflZaiwmqBd7eIkPmgAA8as=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"IqMGdIu7cnagJbmY0FPHXa5fp44x1kVxiavJd2ZQZdc=\",\"EeibL1qfcIORvxFZkrKVxd9Q60eTN5E5dJzTcY3udsM=\",\"Fw0YAeFWunORGrSRxGv+0XfGy+xEvaZXMpjP1uklMk4=\",\"CZQlo0S9JIAf10hH7nUkBUssC+cqWMQpKACNcWM0BZM=\",\"DLEwdtYqHM6vxJW676LLA92/e6waiySvvwqEI2ofwe0=\",\"EFzRZ8vCmUE48kkqQuOckMcfoREhYMLDy4b0o9xvNvU=\",\"L+I1rQriUqCSMaut8YhHk+FHn4lTWH0I8P2EPHPO5g0=\",\"J7AodcKL/BIXSQ6upVLOOUQeY0imYKjf9GBWSzcAKr8=\",\"GkjuCe0WoDxP4sQzv4W99K5s6uyHBsl7/3ZJEr2h3N4=\",\"F1sUzEJFtGnb/6aXCZKhv9bGHeqxPF2rJrFIG55hb7s=\",\"DUawl0GVqtRpi/0XbuM/zYSnJb5MEwCcFdLQD9wXahY=\",\"Gq3O/LPyGt9LJdyQjh+qvLrUCMKyzCTKWjXlZJx4c2E=\",\"DugNIUuAhhLa+VnwnCMUMSz9CacFAkPmnNmTw1H4Zds=\",\"K5LtcvdQWD0QkTMqzDeowR/2FqyYztLiq0fiZQt4PsM=\",\"B7tsBHoKs3ND7SotGAk0X3LuCSGwZoX2NW3KhVBTaZ0=\",\"CyfFwfTwiBDExxsAMJIEpeoWAgZfGMfJVooHNjBVEnI=\",\"EOshY2rTzFuIL47vULFk9cDwXjpFJFsfRRezuhlpP+s=\",\"E5r6jXxwFti1A1HwUmCi8WYae+EWat0PKB/uOl+lfCI=\",\"EKgxZZdGiy8Zp+3oNP97pHReYU3c9Do3Olr+vEWEnXQ=\",\"DnvIjcpek0qQswwG/DPEbriDEdtf/RONLNsjdryvTOE=\",\"HtNSDx9+swhRDyD4rYcJnSjCYWWp3rMzjHb7x7FAtOc=\",\"ClsFf+CT7VHekO3sH0/FTCRhTDVA+NNq8WAir/3kLTQ=\",\"D+Gj3vKgEbp0j5ufJj6IqjIzX/sumFe7Oi4KHRTtvD8=\",\"H2q8A6DKupcysxOivD7jDTeQiLdyxu2ePZ08ykccJJw=\",\"AyzDX0lMe4Jt3BuxhdFEId7Nw1yJxDU+E4OOwN4Od3o=\",\"A1JrT7dZZeSb4Nc9Q+cG51bYT4Dbk6/eaGPMSbAX8Zk=\",\"GQM7w8QnGrW6++75mQd8MzhsBE8FQFYAsM8XT60SuOI=\",\"F3dRhIFzePY5/Mjb2X3w4Tusy9kMg/C0gHrppIa8DU0=\",\"Cp4clVIGULs/Yaj7FzMGn7XrdZWTyYnHyMkc+mEIw9w=\",\"BSYQBjQ9Dxfsh2hU7H1BMVVloHeW58FzWCXp3Svxbjk=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"Av1zd/kAb4cNDAecixC2Jke3x2y0gbKjMBE8x1B+/9E=\",\"GqbWfeP4a9WPBEmPXnEnCljH7MINgYkex7zCnZLIREc=\",\"JntSoXSsjp0RjdLQIQQ5Yf6WhscVbDJL/vhChqcKIMg=\",\"BxMbS3OvBpeip0TjSDplM3n5pvZuBYIbnRKqK4/H9S8=\",\"BnhlLqw4BcFja7YjkDI4YN2vbx6+ELFno5uXXN2Ju1Q=\",\"FSCbEGdcq29Q0ElncRF+BQzlEgEm0kFnLpkcLcwM0aI=\",\"Ghl3v2EYStNcU+v9s69Bd26rA7LbgmZS41rToS90W9Y=\",\"IpZEyEL5kHqTvssWKxKvMUSnx/JdBk1FfbcOnJzZwJk=\",\"F+2av7wOQQPp5M59H8yV8qig+K3eiRtV5CT3apP3qRU=\",\"IQQEDQe8Knmrx/5g5tK9jOebk313cuyuTiHNOM7395I=\",\"KbF2lgSLfIsoBefyrbhswUpsVFd9TUt0HIRCA4EsyYw=\",\"FVt8l1Q9UwwXhOsSqMjpWU1CPcRaWpOm4qsqolIQ8bE=\",\"Atlcuhf/Gi88yxZecAkxTFTR9dLqUUxUOC7JGPDRiCI=\",\"Cp2NuUkl7ojFNXjQMSFZukVoxMNbIWB0j32vzJnJZv0=\",\"C28ZsCDL8Ot0zNzrIteuRzD3LbX/9EYr05lBywuyKYs=\",\"L3Capw+4JgTmYUsHEn/q0NbIiflid9qAhfiGpZLYIz8=\",\"DAXV5xyP+WpmkZCWWw167YjRxd9ztw3heDmGv4hRUHw=\",\"CPrPE/jccxsvIWWB1LNfEPPVS2xBRX/YM0dBfMmk29A=\",\"G7IZpFWfaaXjyjJBpWuibjbIaVX+rDRnbC0TpnH0cO4=\",\"MgVMy/14QOD+/sHMr+SyEJHCuSYsAzeyade97/vWFQ==\",\"CtDiFl/wQROIPS52vI1RlwJkTB6Ti4DGFO+FuWbH6pU=\",\"BdDNb3bOFMLMMHshFAkymyn+DoB0LDKbZGjUy2xPiTg=\",\"KsIcBjXT0klhC1fYMSRDqcMP5PNT5111A9TMZGx8wvk=\",\"LJj1OtEsbS8sH0rgki8QyTGc7jtV4XIHmcFvo2xlryw=\",\"H6/pzdABwCioyYlbkHWhj5P4rSVjIxIAAVThsH1suvw=\",\"HGblhc0cVlGjtlHOuk4zvXlUr4CLafToFxpYM5tnVK4=\",\"K4AE1wZmcunFG177CBDaib3EgWWBSdl0ZB5DqOYVBRI=\",\"Dxmo/obsnJFGCDUg2b2DutYTh5oOQiwn4Jy65lWDFcw=\",\"Ehma3uFLj+8gBwIHpuv6d/T5IC3zeXKjHhHKucYio8Y=\",\"DzS78lDl7qFo8Xctk6t/U+HcVwxwbcmBhjnwGBF02PU=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"Cyh495VHJCOB+D9T1xtKW7UK55usOwlpDC7ATCeVKDE=\",\"AWNnliWdgZWWRB8kGODEJcz7/mf7e0l8Q2ESJ0giX/8=\",\"IwEB+yCGw+TbtOGbF9zIkduB0+7ztcAxsrFCnkb7lW0=\",\"IDPmYGMuCy6EEbQ7iw/J0juoEaZKqEawiCUW2VRzgxY=\",\"JEVk8MYlEKXm9poaj+d9a8IuyZibD5fcQROi/dzy/T4=\",\"DqIqq3OZNqeLO4XPUS3gjG6jA/U/tp4HPS2puU1g68o=\",\"BwGGjPwYgI7z+Blr23vyqK7pbNhdJp22CkzVof+bLog=\",\"CQTPEcC1jj/jqn1w2ONl9vIEJPfNoTSSw6EInD4gk3g=\",\"HVkw8IBF3hQYz+qzowwIAV93p6GauiCbmS/a4YN+Af4=\",\"E9B8y+kqyYSNpMVlG2ksOymL3QAsdsFnPjmwxWySzEw=\",\"Ap+rr+yFnQ6up7SagVFB4tXoJsG89P4uLE2A0NkCap4=\",\"GvWrMi4CahsoodwGy6hYVVDbG7/T7iNV2N0cfUExJg==\",\"DGD242ETzl07iCT2ijO853+Klj6wrEIIo1wP7GAagT8=\",\"F6xMHcBnjjr+7vOhH6vT1plFaDk0InfEtqVyVqlM0b8=\",\"GNFAon1KdtHarORuUgHCBXtOE1Pm5qkNJQeY5ZsFUgk=\",\"DxM2rFbGDEvJ4ndl9Du8SiWDDlFBJt7c9Rjx9QHKtmI=\",\"JA48On3s43qORnTKQRUTvFsu8gXWr+9Wl47NqjEKX8Y=\",\"DB8WyO4CRYTG5SQwONcyS9YxJj5ANunfVCL3jIsByco=\",\"I2tw97dubxa29NCPbGdVd2u78r7vOO2fGHKUYH+6Pk0=\",\"L66S2aQmDA62e4tcU1729DkT5QblRrOh8hfsrB6w7l4=\",\"AeaakmFI0EeF8IdgF226K+HuW06hm9CRNdW2jnVyzRw=\",\"KpbxFAjyFsWt5ANx+sK9RSpXjsI70iCJeqM3JRO8RTA=\",\"FSLnP6QcxMI+msam30bcM+aSG4Ar5yzK6wbeRzbP6Yg=\",\"BtLHh+ezNsBVYpOqimvPfTG+bYttSmRM53sxO+483QE=\",\"H4AFe+xQSUaj6NXo0xQS0vtkYbXxdJdAF/J5j/9XwwY=\",\"E55DMIaR2ieJROlekQ/zxJA+L6rHWmUz5/H88NyJhas=\",\"KVhxViOGi6mP2YKgkqnrGP0PLMnTrUTQOXC4wjYe040=\",\"A9A3wGiu/K9iv4S0/nWopGpdhdY7ZZJ4sElQj9MdZzw=\",\"JfhlTEEufWMPBGwTjfxMGDMlc9nyzd4maD+0cvyLLt8=\",\"AYdLnQeibPL7jGW41HxmRwCLQoBK8efOssfuRmorWAc=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"IrdPirasw/PvDZNSqtR58ts/UXFoRzTsbRjGnP4LFM0=\",\"KN3T4KhO/MYwkDRtXFwLn3priiCr0AHorQEyisX/kLI=\",\"Iboe4pkOK6mB9ufpfxqoee2m4+Sn8ZK+BV0H0jMqrCY=\",\"CJI/d1FF9yQwA+tQiRYNLgtL5raOdyEdeW5WewJukts=\",\"IWjhFY2wdr0sdQPY14dZt0Hz0J6MKGPxu/d+uKUvK9U=\",\"LZGmBG7mOFhwh/NPjzpFVD5aEugNsUYhIdN/PS9XTKQ=\",\"GaNis2CScUtQuGI4yjWz6RBu/i8c9KjwkaaHy3E0ShY=\",\"CTqzoexK1b5iNfuAUxTX6fB61ar7IUzq5+vc+B23L9A=\",\"Hm8jnxzZo3PkuKKDyGx91xClrrAKNTONq82A4UB5go4=\",\"D4snLYk/Ioi+VBUafG4+PidLlqOVYWl20me6MdWcC6w=\",\"Igc8RcuXUxJTioqL7SjAooWHk+HiojTV/Ypuu/gJj60=\",\"BaLN9GuJkZuTv/GNpEpM9HCg3mub2g7ZfZ7zCFZ4yaI=\",\"C5G2r3go9eI7BtLshKWswPb2cOZBRr+C26LNCdi5sWA=\",\"JpGbPuM+RulWgMyMIW1WGZa2WRVBioTXs9e8DSnj5W0=\",\"FhXWUeRxZ7HunHBzfBN2lyzkdaHGb9d4/1WRsuTpIBc=\",\"Hba6bhgBKt8vQ0gvIkVB3Ftf/VUi+TNkSfz+1v3t4zk=\",\"FXrueLo5ITewa9gQSHLsE1WHU3iOBE04ZEJJ3eSbY/Q=\",\"G+w/lCZTTWHvXOi0Dj2RmdkpopXEsuV2gDP6e6UfYo8=\",\"HMJhSjvg7vU5BWh7bWZtlXxvR7TzQNWRBvxa3ViLEnI=\",\"F8xez6S8tNQTi60NtNJbi92SGWlGXOQMN4MZCFXA+bY=\",\"K3HyGc3F/KXBuoYfO8tRqgj9/sbIYA6ibqP0MwkNnsc=\",\"IJCYsCkFgyzGJ2f6YON6lixMt+UbI7ZRA4m1bFENOmE=\",\"IiArQiNaDeI+9DMBBVBm0m2H0KxOv7jUORsF/cqxkLw=\",\"JwZ6Gpz6Q98fqnkENZzr0Gq8Qe9pTImVStB24pa8d/M=\",\"Hdouxv0PkqUVtLnwuAqmgmD9ZXD+KMNazY2lIzxlXJ4=\",\"IPy+VR5ijSnjYlyUjZIFffsWpIa+n9iP/jCLiGp/P1o=\",\"ECtjtjtllNug2VAoQaqgvfDSqtCNJRNfEJDw7ZTK31w=\",\"JmXSs7H0cRs2KyjBWBwTmqz2gfGJ0pzM3mCMf0TaxPc=\",\"JTTgp3C7ABeeb3Yh2W2rNC/5YNNhyRrbD4+upIZpPfA=\",\"Ey3jlleXlZy/r2GiOcXwnhZy07Y4eh40pTIU6dFcggE=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"G2Rmq2QffzDrLcoD3tuJCAgzsrznuEtqex7v0wZ30tg=\",\"BpDexID5FMb3es6HpHsIV6x/3ec0Y+SyRF1GVsU2U+4=\",\"Bl4NZcKj4XhsK7+/RxAuQn6eMdIhgRKobYIUlqMW1os=\",\"K1sa+BLPt3swuCG9smFMXwmqc+76n2pIvz6xRhSLAQw=\",\"Jg96gSccv9wnqF8UYiGzD6Eun/uiHWVKNxvKRFWje7Q=\",\"KitmAqSBwER12s6kGzYK85Js/NRicRKo7UGS8hOoI80=\",\"EUOThq9eJiId8JBavaNBQs5p9mFRGS0BQ9v93zrqrtg=\",\"IwUI5jLHFukD4ipExgAsLTmxoO4HK/+c0JAbPEgB5p4=\",\"I85OGO9HLtTkrrDcpSjxT7cwHGaR1D6WMqZfHsTnvH8=\",\"I33Y5wqhc77UIdTUiMQyavRWMiYgSD/ho5MGYYenzAg=\",\"JLCrBU0YDheXF5V1TgJ6dWvB9o7PnNyLkrMLSvLAeNM=\",\"C6p770yyosvRsz+VAa0i42VSahACc7jvGjkVLXeb3s8=\",\"H7mzVpw76SXkgP0QKjQyzuzbWdNGSGuZ0iKEFl3wgmI=\",\"DtNBgXnnEbCi2btE/dD/DIJ0G1MQWBEQMc0SP1CPx6A=\",\"LpKqYAdXak+BXGRauy6e4Q/nW6peE6sqCwqnAOCE8HE=\",\"JVf+5xPj7TZdf8fGwH8RNQbUjcy5hRDYRFe21hyaRI8=\",\"Dq7jcyFJKwWVzEd1hcn+lXPaAK0WGcdAnudsYlwR1Ec=\",\"G5ydQjBDOhk/MV+rT4y4p/SwlG9iQduy6FjzzsbDP4U=\",\"A1sdMEU4HVBT0MMp7xFFgxXWkzXNI3H+z+/IohSahYM=\",\"Kgv2SHWSk+IFti74WGEvTlTPp43PH9qEcVzd4grPSXg=\",\"AtH3f3uzTHrcqsPoi/NMwy5667guHf7DSR7UOca3HEo=\",\"BjIY0HaCf7GOj9TBR1VEPcw8v6W+21eoqh7UsaabUmE=\",\"KAi5F8lBf0fhiTxKWwBTxkoFQxmYjnIbQnE9Srw1ECQ=\",\"BMGyZWSPEaXtQME1Z1Fw/0hvbbEgBW0rQ+R2vNpOCHY=\",\"HJYlp4HDUw7PTVMsDxh26CgaRUq9yRTzTexiTa2CdsY=\",\"DZwu92OWYpKkWFwNe0oSVse0aHuMGa7+Dyxa/bjLEJM=\",\"EbrLuMgLPK3ce+QVxJ0ZyCB0Z+yjUtLWWzyVDfiZz3g=\",\"LzjKZN5IfVmwMy8ULAzJ7kCPlH4XvfG6f+IXzVDjsIg=\",\"CltC99PvMIwAfpGtC4WfRlgsqWuKP8EsaWS0464jC8E=\",\"DKZXhRXlHCx9qeiY+hVBpuk76ojtUp5cH0ERQYhHQ80=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"CYaVfLGcwQw224hkj+7v/AF7x/NE7KfieDE4h8Uhtm4=\",\"LfRRw2sXicOypnGYGKYtHUBZfGwogSJdm8yV/W0JD1A=\",\"K64iOpOwjTEVqUklLZBoh/u7KYjBJ8HiZoxVoA7yJIM=\",\"Bb6+9SuwhDG7uektIZtKCy/hXi9DRtDoN2ZDaa78GAM=\",\"GIQr/z/4mI0po3N6/BE/a/uAwI1aLNBkc7rO1AbT4q0=\",\"AveKj6vS6XcAq0ovK1dz7jSMuy7kkb8zpWccEOYya+Y=\",\"CLPxvNuhQQOHa39X9g0I7jqvnqJfVJVoCgwRh2EX/rU=\",\"DlNiISQqAvHHjmxZEz7Rdou3xYBa0aPlkGatI9yK1CI=\",\"LZBu7rnX7Qn3/FBNtC36eb33TQlOq10p/ZHnC+eLRy4=\",\"Al/8UNMre63BBmoGJozf4KMplXwQssRIz8of9qtuBFE=\",\"DnfZmBjV2VsVNmeRcFDoAPd4oHslIODLKo2fOUalm/M=\",\"JDSwlDyAeXzBOQXtfuNacAphv2AcfD3+IL1/o6YtDdE=\",\"Ffd9EftPx8FuSmZwYU2FtuuDPwyWye+W3Mhhv74uHI0=\",\"Lh21+VjO+unoMfTVXWyIOEei658bjqQExhMenP/K6KQ=\",\"IFlHVEwtXJ0RV7wmaX2OPBlJeG5iEKud7KIJLcVdRJg=\",\"ubpiGV0p9UBT5frc5OdecyORX7LQR/YVk8DP41HEBg==\",\"Iz7un150S85NQIssD80FEoUZn16Hb6PG9smaKJ22RUI=\",\"GBij8NFVLzTKp9xA3vux7WIHK613/1qCIf4bvGVefdo=\",\"Cow27S9k/xIczszaTXI6/IDhfB7RUNTUr9lhipvlL70=\",\"K7r/s3VBqfUh7jcINq47bwVV9JsFaQMvhI4V5dBUBU8=\",\"Lc5ThlrsYWz9gUOq/wXHv7tyikjyuBvGju1in/1lN/Y=\",\"JqSmPfJtv/mRoP6kudAAlDVN4zrqLwTwQxIlDeryAt0=\",\"BH2uhntq2kVQ4Y8kQ8RCgVhKmwfpEEqzeQ1l0L/C4Vs=\",\"GGcpQ/gn4oM6jZ25iClqooHKyIgWsR6izm/F6/+FZu4=\",\"GXk1P7RtjN87UY/+FFr2pTO56/uZBYL7NvMQhVRlVqQ=\",\"GzlMC0/xG2ehWR99GQx08VvYOBKrBW17oYaZit+1+9I=\",\"IhP7/t60b7m6sw1bv4VM0pRaMNERWj4srWt3G/U6nEU=\",\"MEWmuY/nE0FCfolONRQCNC2lkGf8RLih4yHei3W1OEs=\",\"HlYLki9BDvvHKrMTevwrS7nW0R49eOvAwe+XC4UQsNs=\",\"B5Os4uBF1tzn6wxQvGVHhcae6pKl/xKf/iuCJKTmaYc=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"UVyUAY7/svwkp7uJsaEFWidMznTNG7T6N1EzHFWoMA==\",\"IoiElH0tHKrK1ktFOFIUmOajd/H1McAypB6MWZnOf9U=\",\"Ate7gHw3pdujFJDImWCXVSqTDlUZigyPeHyrSY5K34w=\",\"FfXLEksKGL3gTbCB32Z+uQ1yL+OEIMemojQN1Xgj1O8=\",\"L9tvL4OhOMCar2elt/Ty0h+fty3vkkb4NQs9UP3P8JA=\",\"3Ph1vjw0zzjWK+Vv6Tbh920Q8Byay2V+Tf7AL5jITA==\",\"AvK/Kda3Y3mA0CZEuYAwKX5O6H1RR2v+AuQwcAmTtOM=\",\"Eh3WOxhaP7vx4mch4dySB7ps6DJGhWx4Dx/z9FeSXxs=\",\"IOebz7wUhV9gf/5+/cBAiyNmJB7oDTiPWPyD8RQLT8M=\",\"FT3DG+TNefvA8XV2EsYxb5lFYNiLoqCTaq2r5x06tP0=\",\"E4BLEr23fWPvX5gH5g4YlqUhLhzjFKUvHmXNYFFUWuQ=\",\"C2zs8LAVKEmY/yPCOnwANin47o+OUthe9q8TFH+4uyI=\",\"Jn+ZL7HF/Xoq3qZMR4lheiBWhsAfl0PinDo2kQkC+D0=\",\"B8c56BmyMBPGsrug2x+RRXPQvpjad4/N48RKgujbanY=\",\"AV2mUkFvxEBWIFKY5IN4YKluGsz0KvTdtLbuxC+9MDo=\",\"HDNzlHHRvU/GE6/h44tx/zVirN4p3Fi/bKv3OhkrNyo=\",\"Dt+MfbWYI/sfdsxn4OPr+N6N18vmnsRoUVpfVRHIwfU=\",\"CDNLcuotDTWrPfrE8mlrDZgLZdbg7GH+JyTIlr0/UXo=\",\"D0MprTfqIqFlF7mx5tOK/cdag5jfm5oyqi+PLDNG4ok=\",\"H40+Mc3hwrNWTsm4rLbT3Fa5Rv0eo8xgZ/BFFf6Aw1I=\",\"CUohwEiay1j8EYzeEBPwgQUFjZ6X1qeA7TBwXA5UqDg=\",\"EztjTRh/Yv0u9tY9runTQnrByeIVdJeGouF8ur2n2rQ=\",\"GOGwO/h1wA+XwtJL99rKlZNdixdrx2f1ZZN5k3ZY9Zk=\",\"GCQq0i2mdKJiBvNU2FvgZ2ATf6USzH8wpeOHN4VBWaA=\",\"KUJotf4r6qDJlojpqeT3zqtqh91Cu5UKJQIiR8eQu2s=\",\"HxODm2Xtp3h14w6uCCUn2LaKRQlODGMpWnEwt47o3fA=\",\"K6ofryWQLYmQISTto5hieSeMxgB7H3sPGTcy5VJ/xp4=\",\"JlzwMxQsbUM9cBoEDY+fNcFUdabH6lh110kn0346aWg=\",\"HE7d0UEvAjWChr8H3/SrLpDlrfBR/1rcNp6Tw/t4z+Y=\",\"L7kkIwyQ4mrG03NXpt8hTxPCTHNyWZWHPfN9pW96Pnc=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"GeSUhTrzK66gj801jSXDe6p7QuFKdOYnc3Ewg2eUibE=\",\"JGY+JZN3ldcjq6L0Ezd+RwuEQYBhzL8uerBlRdT2mxU=\",\"KBlM09qiDKauA6jcEswwyrAD8qG3hMm2RDaphIYq1Bo=\",\"AwBNlGlBTwp3LJn4lufyfI0Iq/DcfjD+uRtRgg5Fkfw=\",\"SpATiuY69tgxESwE3Oh5+UMwLzekYvDIS09LVDc3og==\",\"FjKP6LydPIg6zN0Jzyhh/zPwcrxYz+WAEThkkTpYILQ=\",\"JVNCuzdgFI3ASGF4gnaKTRmCMNpTtN34flF4/0gy8wE=\",\"CklCQPKdyJqY7H/Q+KcMPoL8EtKJTZKzbF5HK1HOwME=\",\"Jtl2S2XLZ3WJkWTluxea6vyqfCYoYb9YLF1kGfhpRto=\",\"DcZKzFGELyJaQ5tlDl6zJm0quA56xwXMrWRncKM46nc=\",\"BC0SLDlBZnmLlG8D2ps+Bv1bof27pJ08/J7OgkRCYEQ=\",\"IHFbkTXhX9A5pyj+NH1oJefLrcoMeS4nVZIQA7fPnO4=\",\"C4Rlr0/8cl4NnVAHnBbxpafY3x/HBncoU1sQ4ZzHDjI=\",\"Gz/jL9r0pMm1GGYE+0dGaVVhcgwaeIZ1FjWypBa0438=\",\"GuL9rHt9CzxHOd2esnN3s7rRJII5QOEtC8sRd8luB4g=\",\"HmuPlV7VbRRNFlDyULsPio2itjHTjXXmvKNKaH65al4=\",\"Ji3FNPaCyPh02HffFKz47X3GWm5CGYVw0V9JUgdFxwg=\",\"D5pPAnHVxqoCxCBTqNKx/YF5o1yt1PFimcwAN7CxbWw=\",\"BvB4xxeIrM5/SPzXJx2FB3xQ/6eoL/Z9gaEN2vcNkwE=\",\"JBbXTja0LdVRm9OgOTW1cSCzPAUmWkDMFfoLNuaVGF0=\",\"Ge++lkrdlLYBCc+OZ5W4r7MezgIb0emeBqObhoul2hg=\",\"IXgl3LD7Si3r0IVmedXxOLwoCDsFg7zdL+3YIm1x6iA=\",\"Ke2eG4oefQxdxOUepfJ3YUlwaTtldYZzYlprgeDqYwU=\",\"COcTm89eNdjCgmI0oAxWaWQAz/KwEqlKbt3T0eqU5L8=\",\"AjtFy0VmBBdI7UCfMqrzt9WeyF+K11vfAIpzPVAKJPc=\",\"BZ4anMQgjo9K3BfpWo3QoOCCSqRnGiQHURbvHNKasoA=\",\"AQhLanvcwpR4Nbt/AXxfpKAY2uehTbI8H0ToIaZUNOM=\",\"Cuku0RVHWQJgbX8+aZ2VZZrLFSEIxYajCpEnUO0YsNI=\",\"EVQLqFjTaIUrdb1ePTHiiaGC8waO1sJlTtTJLp1KmhI=\",\"IZrZ4IdhjRXq43gMOy+7vLaGZ7vtudUUkKBOSimGtzQ=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"GvQFvUlhId6L9o2xgsUvjc2GPl6dDQfDMnAsZS8QMVU=\",\"D7WttPLd7ix4a71jDhC2ryFWbhOIcmTSYn6WW4p2V8A=\",\"BXNdCiCYHDRDwmMhzmqusihnCH+0gvP8UlZCMf4fv6E=\",\"DV8l6nzQbJWRXKvBH2GipkC1EJdxI4tTUmZzvzU9jvo=\",\"J22dGbUMwWCHCAahYirPfPHfelwK/uwt13oJYqzxTLE=\",\"LVLadkKevvQjSpSiz2pBr9RxGTiItv32aIhaDFeNPAM=\",\"JPhKtNGsx8wbT4QuUChlomWRRHuL8kQ5eC4X4DK29TU=\",\"IQafP+sYptICVQEnDAcLG65gNcqqULxotrQCqQncomI=\",\"AUMN1qxZjeq5Qy5SJ/9fqdpJlPCOoop4H5/a5jCu90Y=\",\"BvwPVuqYZ9zBA4Uhd3G658GQHetZ2J1pShT9rQfvdFY=\",\"KuleOfUceTWlLzHR6SwvoeKipD7P/zhJNooia98QZ8w=\",\"K1PZq+iUxH25ougd3B6gz+6lyiV+jArmHUydtdipGPI=\",\"GN0JJeQ/gh+3w8mnLl1AnBPlxC81sSaOmzZoWrbGCoQ=\",\"D/dLbZao0Au5dQgoDpjBCh7/g0tGsV9HS59P5QF0Izo=\",\"GL+jgpcPNZgGHzDFwYs+cRBaUUXKPm3SH3eTlYcuNhY=\",\"He6fAPK3VI/6nMWjntrOY8RhxSinu6ihf1m3324ke5k=\",\"EsWBDplGSX4bb5KBgthRGFFoPs8jTemcZJvLPbuPHnY=\",\"DllTiB5y/zmOTDS1DD1m/Qc/55Bz9+vVk/79zHvE/jI=\",\"DSUGHSUo3VNR5Og2fJb+V0RkKZVllLL3Ung/BiUeHds=\",\"DNAhJLYnQUMfS6pk/Yp1nbH+hkZbNvJufpGtoaNw4DE=\",\"LVJOLAoWfRY75oY/s0VTnaOo/Os9tJa3Zeov18T+368=\",\"CfbvP9m4603Vz2OT9oHbVE5zOfahKfm/jjgAQeCkPNI=\",\"KL8riNOSupgj4tsJ0SzaWhA7bi9YGpo6u4ziXF2TR2w=\",\"IJ4Iy99VYrBRMApk88un11wl5QMqLNUzHmzDhts4w3M=\",\"DhjoDt2GeS3dks7kMu4zsV/FECzeCs6fj3yfoGY9UcU=\",\"J72HlSkrxotqjg/0Uc7zn5L3ry1AfBz89gKXEAqcSEE=\",\"CH0kJ6Nton5SW7GVYBW7LggRwDegzCcvIwzE8Yp1ahM=\",\"BeAX+Muj1Br/cP1CHt3WP0ZCVNZcCG5/XweYF5D//9k=\",\"Lqy5Wa5UKdIZxmtyL+6gCQYKCT0z3wzfIlVToN/I58g=\",\"J6jAfqdAVZksZuAAPAOwfAkNMNRblA0wPlEhKpdPBbE=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"JbcuOJRtjBRu41Y2eYHnTQAYA0MNSuAj0IqcaM6P1Y8=\",\"KdPX/or0WPj0RPxJxMuz/elw1u3469e9PQZ9RZlAde0=\",\"DcJaxvUt/GE9rgGXMiqYx3AM8E3Z0WJ8kAdr8jhLMtE=\",\"CvccC9FUKXMAe/8Q36yU7hj12pIh09b74EB4lx47gMA=\",\"FAbYz5eCe30lznHmLRfv+AxJO7Dh8qa5UXI0Md3hfBg=\",\"Chd9dTMvKq0gnJ7vgASHmv1qzVzlbbEW+DQFOrUSls0=\",\"HkL+6mD31Jh5ON1YvJtT1LWuT47hSyrVjXI8fIbBMNI=\",\"LFkh+kzNdn/SUz8wjRwYxjz9w/fY4Qshf8y+7irKDsc=\",\"CsTj2AOmxgK6b8NzwxmIwpRklHgTTUYnctu5HkDFZZU=\",\"aPsfCUVxrOcjtZ0aBZXNvSYx2TgGpfXHWM6YYons0A==\",\"9aRyZhr/2HMM78aY1miPvKO6B7EmN7648HIvL16MjQ==\",\"LtWvmY5J89nJKlutrk60OlFrGthAzAHRHIpEF4YxbGA=\",\"CZKaYIpSVlddfCh9uCqs31OBgwueGLI+vfoq3PtG29k=\",\"JmOeUgcQ6ZjtQPsTacfLA5vb4OLld4BVByyKVGb/m68=\",\"KzIlw1qI91fUx3M2O4JRkd9RsOHNQIJUHTgq/197Pzs=\",\"AcGjaMwCP5rucOPlM0GgboCVAixUE/8d5ChjY7ThuZs=\",\"GzkEmm9wiClCAtpl1luxkNRHRfuT9Ac6ANRz04/Dc5I=\",\"K5ZryKiX12wE+UPFp671UfPGBA0Fhu6+H0mJoCSK158=\",\"BnoghRQ66aJFvGa9M3TuqUYTX1ZcwO/bY1ijzN5bbGo=\",\"J8Pq09dgObEPO/4T8y3ygj+4yhRtmqaxTYzqGCqna7w=\",\"ATro5mvaX0CtPODoMwUXbV5zsD8pUNXdeLEIdlFEb2A=\",\"Jn5VrTSoeISXmYt5GThGwoIqJm6PYHmZeOZv++JwGLI=\",\"GpZMXEVQwpUWFxqKh2b6pxWaE3aoNtKYCdXpAaWEpoY=\",\"IWzOnltgYs0GOuk+U+/a5kz1R5rgHXVJ+Mx+Z6YA0YQ=\",\"F1EJ3Qi03kQbpYlgdwZ2n8UG/e3c9WrVfQ7ACPw4FsQ=\",\"IC7UasDmiCf/urB2Fnzuy8epYUI0/WYhxu7rcoPkOdA=\",\"AtJl5J813Ii2OrrTLRQwLTVVwiGujv8dM5mmaVnuh+Y=\",\"BZP4SlXJ468YXm6OaJmBqfvhq2KC85O/SsK3e+IdkdY=\",\"L8RCcpXVdaj6kxAaG5FuEj8mUufp6Uw2TEq64KQkM08=\",\"D9JqWpfDy9vsND5hbA2T8l18XrgndIEU5NphwBfiVHg=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"Fj4DlYeui+0kIQP5csWNezVwhG86ntO29lypk14FmeY=\",\"F7jJNHVAoM9GlV/kDCn+NmgJaaB0604bfEDODFQ99P8=\",\"KJOfI9Y9Ca29HdGW39c+tl/+L7oHp54gSahFPHyt7VU=\",\"IvQkahAWc6PVjOlTo3QL+AfyX+0Izr8cEkVlMQsQyqE=\",\"EzXG9QVJsiAj0qlzgHxRDYwbfiKOhinDW36jpwHtAnc=\",\"BcyIoqsD+fcg2EFYPMg4cxNQPoBL6V0zEaZNDMPM6cY=\",\"IADUcVdG+jbYq/IoYXGbI6rs/NrcvnHVZ7G+zndgGQQ=\",\"A8LAB2UgFyn+9Msa6M7zJqfeTz/VgDUh5xUlf4s5LoA=\",\"DFr/xh1RAB17DYqqb5nUTMaDr4BuoeodJBzlbzhrVGI=\",\"FTpDGYGtcSrhO3UweX5bKrd8ElvPUwiArIVmrTpaxBc=\",\"DSBHCB2aj/93c9gBG7wLYaYFf6b5oWJ6PPMh/dZm6No=\",\"Lq3vH9ARFiE437DgIAaDo7wn4a0S2/srlLMiAxhuWRo=\",\"IaBdBDQAD7BYhhEiQpWNdLrlTtK2837OALApMyLlMlM=\",\"GXMsj4NhcLpAOg03lWG8Wqbq7PIcT7n8Js1Eveukdeo=\",\"D/MFMun3MFyUwpiEjPDVTboBNBp52k2w8ql1wuQ4A3I=\",\"Aq/o0+oGQFyPzatQ1tblW2+qZ2zTbmrLh7ODZYGwa0Y=\",\"L9Io1uTBoayur8RZfWn6MOVigtjxHUy9CcNg3M9Ub4A=\",\"DCA6DqJbf5tAZtrMspKNz7TRzAzS0UZx+rWnkoYDyA==\",\"F+yyYFb2cIz6OutidMM1LWuuQC5NJBRSbkwqK8m44LA=\",\"K1dFsnpbpxx6/l0b+VXFeNHOPJFfTTCXTyJfb3utfI0=\",\"Gm62xItSnGoKFm5T+jmfto6LQUhpsT6nE8GgyrhIDCM=\",\"Csida3Qa7mwYBAjWAG8TDtlFGF7pohPf48i6pJMw7jY=\",\"CG7KOOZM3y4lITTXkWDUN9klNzJMqyXNhpjF6S6UYy8=\",\"K74rwEZ8ek2dG/IVfNXMPuUPEBZqDUQscG2Wke5guLA=\",\"IsTD0nUV8wDYeei7hbBEc0HLeoFtb9pRbNzzE4aZjXU=\",\"Aj4xJZ6P3GmiOmA7TltHqQOQlmqvux9OrwL3gyGazRs=\",\"IMDA+JnSRAG/cITW0L4xTbs+wmf4ei6NN2mh9ktGmoE=\",\"LaukcXVVilkwSQyt/x896vEAWJ9nZkmjovsdvZvP08A=\",\"HnWbdmqjENx6uiJFYI7Kr0+5D1Cc2raUFVtH52ivNBc=\",\"ATWq/rWyMOAwJz5CunBNpDCF0O+WQI6oMj576LVGZDw=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"LKLnCj2BRfYBYJhEUrJiIPMD6va/U5yAVf4qsDemSIM=\",\"CyWIHt5gFRN835m1OoWRqm4MBCpajGqeb7zRGjcCPPM=\",\"JYsZ0brJ5Tw8XMTFnIdUOw6bM6XmMf3aVimJl6V4Gno=\",\"DW5xd8qHqjMmyUIDaYA1g9Gh2Nlq3GrMM6PljN01h9k=\",\"I8vs9tn9e9xMQmA1kIve75yceoAWZ/8rYujq0oK7yrE=\",\"KEHiypfrfeNzP4ptMpnGA46LF/nRM+0S77TcbZI9gE8=\",\"K/Ioq5t0kPSwzgHL8xvtLuSm3cbVoApgjvHH68taIDo=\",\"Iusf3nocF18MFS1ff4UEWWHSsBOX2yTZ3pX/BQdifw4=\",\"EAkyVywSoL0fLujGsK8xfcUZHDvCoXfu55HW5Tnlsjc=\",\"J+iBVXtOwPESjvAGnCKm5c5P5I97ydl4nEjWlIvCTIU=\",\"JYYoU/0bRMaqJqQUq08pWqrg/kRX4PoMS8Xcn8KXIkY=\",\"A5R8erfXFPH41FA4KeLtzQa6qLqH1bhjVL1yVLhB7WQ=\",\"Jna1BqdWQ2Ceaw3YmGuIZakwAPw47rH2zzsCbWGR7Uc=\",\"H0XKg5W0how7aLEZEfUkJSAvzSEIqroCIw3dyns2VG4=\",\"G1/onlT1CLUYjISHMCg00ICVsUweCTiqgvk2XKOytE4=\",\"JYJvmuOQToD33tF7lUyJiaBKBgMmykA3HfogTgKwXrQ=\",\"K1Mk5CvsRTKGMmIsgmRL3pQeAVlG0tkhndC4BdurXCY=\",\"JeARyrgJIIyUR8512/bJD3bG1QZAgpuGHCOSJxpR7pE=\",\"BY/+z/YICZAG/Vn/fXXwOlKGE7NjPR3eP8tdbyOaZIw=\",\"JvBS2uqrdvLKjhhYS4WGrpqPWRqLl6Zz2C1QvpQ6oA8=\",\"FdMFvG4xOMQJklyvOWg2eFDG7tA4TkYAnTi65d+B/Mk=\",\"FvDD3puKdv8YNwzEidpGqb2WJ0L8uwoKsK7p0Sw8X7I=\",\"E3pPxeY9pKNmtu3UHiVfxLqnO6lmKrfStp4LfUmGtWI=\",\"AlpZ07RvXIt6djUYeX+vVcxHc5Z8F3KwHHwj8YanUXg=\",\"E98dYYFP2i4NJsqGGtv+m2qSwFvDr8lTz+AI0Xa+LDA=\",\"FbY/5YQ8Zhy0DdQv62ZNutuyeGbhGaKPntjTW1N4cLA=\",\"IzUqOjuujC40NZ11vMml2HC2lVXd9XlIyq8HRTgESoA=\",\"LSI8Utb7yw6C6f72ub1zhKK3icTZwnPrs1tO/o5R518=\",\"HyCPFMUbSMd3b66gGHi85lBxguoHFQVYFlgXMhdJKGM=\",\"GUmEoaUQbdyxvOEpmxsEPtrya4XEr9gMtnhcxcg7NG8=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"KL3wZS1JZKbp6i+qbOLYIyUzZNMRdiV4ch+Hc2qq2AM=\",\"EYMiTqgqaNtf32ohBSR3yMj/UA6XuM7cCUJ8vALVfm8=\",\"DGHSLJEr74UHxrCMvTb3y3l587VrNlSWE3lFFetOAtk=\",\"LujH+GhN7bscF3+p8ldKIMxP88EFYod7z7DVPJBkm3c=\",\"D1YZOZmBag9LFeOJdCc7XFhjQiuT2p6U9HxfEDUdRwU=\",\"kLcOyvuledN9bSETWFI+2ZLibVp3UlmLu2i2N6WSlQ==\",\"LelyZq8EaNxaWHIx8bHjqizdTR1yCCBb6QgmSR8mN1I=\",\"GYVT//iqRq3Jrzs41sAcwA8aZZTtDhqLjzcJZfiolmk=\",\"GSszAO8ldLSnBTwk19veqBwE2m88gDJp7oXCLBEHgrA=\",\"H0x6dtow/Q5gTRSDPQzq4l6q38+TfUulpr11B7cPzvM=\",\"ERlLRuqRdB92FmLVa2TJ0SfyvzYUL2gbylea8uiFbMY=\",\"EyM8uggrsVeUKL1KGYR670xQMZVoBfbiUi4A3JqSoIc=\",\"BvxUyaJ8q8oL111Tzv4pkr9LdE7h8eDPfCVEkuWEiG4=\",\"AUhwZF816Fkh9XmkfQE8+IEiAaEzvRS29WBPd8ELqLo=\",\"JGNE8czuTasOBAm8lvu2GJN+a8Yp2bG7g6ZpBV7p4hA=\",\"Hhxyxz2URNa8RqeDTGZCbOS7kURugEkJFT5r+GUR5ig=\",\"BmLFFJI+QQOM/QeP7kvb5yyPbpDlo8+lEIKhpPdSN1Q=\",\"JcfgasJQM084vWZNsLunhtVOnUDnwQS5WYkjK6B3bbA=\",\"HGN3S7aqcsNmcSyGeS2FZo+DO3rzXrkfNhdt43X7JSI=\",\"Du83LpFfMmPzHiw8TSFLTJrqhv2oE92+HLFUQYga3gU=\",\"KdsSRIxutzQirM71oqN5TH83LCg/N7KxlMvPCbI7SA4=\",\"Fhty2DT90mlXEYazhHCE0lH0dlpbn/r3f+cgMZ4Nx8E=\",\"JDQzITjJOmn+sGUhrw7zLAi2gLtQ62E5jjd0R97UYcI=\",\"FAhn+mHKo9zqEL6bRrdocdmD6KeVLj0fcaqy9TGoVxQ=\",\"Hjh35Y1/JamI9zfyKWUM3TRcMIo3xmNmaDdx+eJJrNA=\",\"LgD4CqW6BUVgBwo/IcC9N+MRzoBgp8wcZGUFYMlxUIg=\",\"CWc+oj26U3pKD23WahPfhdiIfcNDFmaoZzC+zXLwT8Q=\",\"KgWxDR+vaKt+YHOI98mz3lS8FR8LLaAnAuRx61t4alA=\",\"Lo+4vQCvZ0H+GO5nnuN46GAs6LvEKcqZhtAW4Xsvsi4=\",\"I88/BCpWx9LalHclIaIa5ryz/QQz+HeMv2j+HDZcjAg=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"DU0pW9a8tnFt2CkH2JuICaivaYWXKHc2ieBzvaQccJs=\",\"FPjfOKqVktWVGQVNjwrCx5tqEwOQWpdwcxo6cIGyvNo=\",\"J8qVM+KlamRNNcU/qctmGHp8DvcyIWiTLDMHJO2/vQ8=\",\"Gs6lKC3jXTUzdQPIyKIh/iK8JNORZIUO+pp6zfE3fwc=\",\"Dd4TX2nV7nJT0c//34eLPqdcosVrFZBzKRR5afsSDUY=\",\"CFZctWUUDULTPVuQeg4j9699r5HqWv91n9jKkWV5ziU=\",\"GTQ6UoUFtrMD7Rk+M4EKAFq+c4BXywDzTJozKcqAiw==\",\"Cc1H/IrEaz5J1zfrRxTVIs4jXBsP7/raCFLYFz1LCAo=\",\"K4fQdef6sphJKRp3AOroMXywFnajbA0sE4JXuFJzKi8=\",\"EGaU4WDbNbLTWZjk670XacacRIr9HOaqqOG8HOU9v0w=\",\"Fj2RpXAipHNOoXqwH7hdlGIqz/ZYLc9+S0bdCl1y2CM=\",\"K4y75m7R4dnFoTYe8KgFmd51Vzxi1uOqcYuiM+JZRAg=\",\"MF5MSpPZMfkn8KITzr4aWjsljscm/JEspZWQ/r2bYCA=\",\"JtDDSSBjlZzYw9wOXHkTVrGbm8bjm02hOk0qYS5WNW4=\",\"IHbKICbQS5j4Ibm9UtZPqxKVJvwuYm+vzJLQ0uI6M70=\",\"DYnESD5AxBXSZtPH8v9tHWZBITJ3C+cbzxF4hJUC0jE=\",\"E2cd3y9J6XQQ9B6tDhqAVk2GJ3HHVDZkvSB2IyT6/bw=\",\"GWlOQB0r1rbKTYkpEpqFyeiDTkD9H2CJ2pvWn2b4QKE=\",\"GoAcV0J5FkyTfzeYdIvxFfCfVgREYXcc39Z8lgbxoXA=\",\"BzWedmFVD0rxv9diDO2rKwMPuWRbBpRajBZqYXQj5Yg=\",\"DcMc4XjmD43RcQAuLlhJdZ2crvx9x6H8VRtne0EMQnQ=\",\"A7fVGyuLM5CSOyjQ8eGByDeL/QkQ8Dg1oe3OPe1Y/6M=\",\"IP6sp0AD91DH1Resp/LBgXRafSakcFHacgn9Gzumeu0=\",\"B8canYTcjZstIjszAuGAT21s3mcC6+mRxcl2pKqwlxo=\",\"H/LnpwRektlV0LOmeesRaKr3NafP/sXpD9Dkf8lG7js=\",\"HMrUrROr/ljQpp6pZ+lHfyBjDZKNyTlwAzeWyoBJ7dI=\",\"HSJ3pMisPnrpRfBUYdenLK7ttFbzDB4SkRyOPcw6ZrI=\",\"LsLSjc1+deEAwT71cunicNJRp3T0S3xZ33Z8pQ/hBDQ=\",\"LqRHwC4FmXDrktH9FLHssYndkAsoHmfWiz50JSPGqAE=\",\"K0rexe4BSzBf20YM2xrjB5YgLsD+EdE8I9/WVwPwQ08=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"F4S9F8sJZYeFSfxLDhtAvqN2aPlNjaiQyqe9J9Issv0=\",\"FJ8dl4c2a4Sz/EDtQw6WtkbrFpAQk1kOe2i6NgHDZO8=\",\"DhFh8TuR6oQy4S3zq1hwZBDaXmoQrSCx9i0cNMCc36k=\",\"B+bZlkMeIXtgvE0+dKo8M3Jj8Rg8ksxzgH0Z5ZxOaAQ=\",\"IIaDSyoD2yLHHnHcvIloiqAsw2JJbkmSvphF9X6L7p8=\",\"Glk4ZNByeD/m4e+KyDZlqq3Vk7Y7PdPUkZI3v1sscQY=\",\"AVcOyDP+jyHsSFOcauJzw0yuO/7grMVXjJbN6StJNoA=\",\"E7Yqk9sztvDpEU0/LxnAg7OXoZP27w9bCH8gecJYGps=\",\"Kri9JN2WPuRm4uDDOAzIik+COXz599raLYCtXqIduHU=\",\"DO3qCCoXvLpyW8ljPS5eZ/zUNlDiKyLfmqwwN9ru+OQ=\",\"Bd8g2JW+sjdLXtbYHtVJSmrg6cO8GE14Yb/75yQ7YWo=\",\"GrUp2wAUPXA4puAeI9Dp1Wzom9NAAnJwYcjlaUTkAD8=\",\"JUjFYsqy3lQFIMBQOT+UnhC7jZ7Uw/w4fiHkVPGsg8w=\",\"KQQtNcyXlVqA6wnxWhW2bwxBk6WBk6CAZitqXnnmgFE=\",\"BoW5a8Ho1wsae3Aha1x0pOXbMV3Db6pZ6qOfLgSUrAg=\",\"Ldu8Zv5p3RiKLpwwbPb33p+qEGdWGGuC8/tEDdC5EqY=\",\"GMcCYOUqZ6tBeu6mC10/iOruolCIKa5+o8BjRDzAlFs=\",\"D9QjhF+fmXBWHjP7D5E4IeHjGA29RYFakjitUVVDpjQ=\",\"BnFeh/Hap3PKtpV8EWBbDG/y7pNwVzc9r9wvKE2Vsak=\",\"IK8ytjvS5qpK220PR0zNEFt4otuyad+/zWFdTM2gZmo=\",\"CkMziZ43xBHLYzJR6pjYhY3ZRPc8Q3i2b9+lkE742cI=\",\"CSsFcYXmL7EbIrXzWD0ZQ9Vh+CfFSTbPINcQa5QW890=\",\"HtpRINX99fLPyeMDpFpKyHEL3HqcKLXoAeskj2CuCPY=\",\"EoKot5zFA57ciFLsG71YNfO4AEzLyaZp+IozHpZts9E=\",\"IzXgvGCIO1mxOQ0rNlLtC+8jAyTn/atyWl1HQ9X/+MI=\",\"LiPk2TpLcq0FUbdAh5/7DaTuZb3Bq3H4IH0tnaDybQE=\",\"Gwb+5//KQZYY07tkaiAzFoOKaE58h4AkvAWGRfrQHlU=\",\"Bm3bO61KSxN0/tazqIsb3IEt35pr6hsChzXc+Qp3vbw=\",\"KAtxrtu9N2EST+b61xnGkwzg72aVk4zOd3q3fqNTZjc=\",\"IdEw+iWPbh/iAQcbPQ9kODL0qtB6Opg+oAwmiQtUbls=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"MF9zN9/CxlkeWz1TpHg1VeHqke/ERkhSlEj6PkYzM+s=\",\"HWnhflZ4rFOhwEbtAyZmbIS5CbheWqnjTlFtJqtlVXM=\",\"H10L9anEWKPJybvj/kghGhEnoXbU9UVHqvNFib+RKMI=\",\"I4W60zKuljtgrnOGLPhsX3I9/TflawWRg3ORLY+XVK0=\",\"DWjb6HTSBvRe/Yckrf2bEJmafaEibDlMTnlZJpoXp5w=\",\"J/i/+YIrp2tDtUk5aGyu83ysaF1g79O7h7RogItIDB4=\",\"Dyy/L+0im4G/kcCKZCcwyWMxNtzx5okHwZLjRGRWCyQ=\",\"J+Z4NFHNYeIp8GLjjjYNnQIswkQiL/ISjUkB3gxbPBs=\",\"Cwv4UslfJHarUoC5RmCx2dLPVDnDTXtqko1ZaxNVXzI=\",\"K1Q8fh0vhPrEcEiURt+HbH9klW2CyIl+JozE4q8TCiw=\",\"BDZ6KFHpuE7OcXLtEm98+2PV+0ReoZ71oxpnUXr9L84=\",\"Hciiq/zkNwIf7VLoOx5nCKIOB9hCBuTGA4u5/zazJaA=\",\"shcUHTXCqt67rY2aQmtS3yPX23w8cvCRSWMEbhINWw==\",\"EGgsNQXOx3umX0r2iWPzMQViUnsr8cgSwEou/5TTM3Y=\",\"Lz+mHPRpZiKrwCvWZL5ijaj/X5tJ2T22WvEqDsDSVZM=\",\"A3mMiNp8HHAyL3KIj2/Xg1ha0nn0zAYCnzuyPzwy/To=\",\"FUs/L4hePWH6XCeHX8mwNQm582oYmBsT4a/00pt9I68=\",\"BF48qs/wbuOR9GrkPPeKK6HiE03gQFEgIoy60GlNL90=\",\"IaRDJozx2woe3D98Nm3my8aQ4ZOWWCeN6WeYFKWtSjA=\",\"D6V0OCUgsBcKwh0ADZq10lI7X4Z1gibUm6uW/BrZxZs=\",\"G48HImRzwo/Dz3j/4vX7OWe2vu7UKGaBTGSPXUrfX7Y=\",\"DcSEg959DfgyMuWkHMKHYYt5V60vo9sDVWQpKG7Wotg=\",\"IyfT2syPgPoF0HW3+bhUQ1bAT05gD1PY1NLQ8UdZDu8=\",\"FqYma9btQpJyxpqsV5yQMtm+foaXO1ePJ9XLjS9gRdo=\",\"CetOZihap8u2IhdGV2gTjXOVO69+tovK0Vt0lBklXiU=\",\"FfOmsnyKLOJ+kxy1maC7r2BCzG+NQR0trxlpwCxn9eE=\",\"JyfJI21DtBo0x0xSQgZ02q36/HbrMTsX/K4Od8yue/o=\",\"FJvQDrHaOeIqsNjceNer/1S9nBO6OKalMfaWzJk6P5Y=\",\"E+vPBqXJSF4XZ6Ekw+A1Ij6sa+WBYEH6B31cxvzRAig=\",\"Iq7H+Ic8dXAuDFXBsVKbEpCDHLTfc8OuZEHaZ8IegWk=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"HUX5+hEwf23ojiIOYzUZo/8Y2d2AcaObOO4p1ZEPrEc=\",\"IV/z6HXXCtS3qgiACuv0f4P90FokYYao7An2dO9aoWA=\",\"FVLeJqzxla9kP6JiXL0+FyMoTCz9Bb+8I0laDPiKo2k=\",\"H5g2oeq+5JstLmyx8fZmdTgT9SATI9MC+q4SjwjkUWg=\",\"H4z1ELzViy/iWPP4Etq/CKMBpx7XENRkfNYP31vrd5s=\",\"LERvZF62YRUt5Ehlo6wUm8IKdkR2FglIhMm2UV7UVnQ=\",\"BQo3GOSGQMtkS7eH/BhKph9ORARNwPPzAGzrqBuNyq4=\",\"CzcLcfmNwQcGcSx/NIR0/v5d13L2eG/pbM6UmZywn7c=\",\"KHRzk5tcR1aGErFQzbJbMICMBYtLWjYzwDr4P3p+JvI=\",\"H17HWY9tpXeCasWvzW7DchuWNWKZkSXZ01bqxR0NUTw=\",\"qYUAWPdPMZb1hYXm/IDOBAXcUQ6onjPrGpyH/5Hliw==\",\"AiIn1Z0f/DKK7i/5VvRcO2rb63glOICe27ah5w8mKiM=\",\"Cse4acr05xWF+fVn6Use5uDYAu1q9J0wsk1BsceE5Eg=\",\"BtZx6h/IvNDYJOEBw3MkJd5aRDX64bz9HIX1AcogXUM=\",\"Bs/0wpGNTOdPTr3obllRrRQ7CalR0TZhjKzJy0DdV5k=\",\"LZ8O5O1R6Xmg8aWCB36OX2Zp+J15Ilp9omh0RhhDR6o=\",\"Etxq0ODa8odo6FsCYXkwAxL+smWEsqS1D4MEmeFPXgY=\",\"L5TfayEdiopRT6z5MdcaPyPj2ailGhHSnAIh/Jhz11Y=\",\"Ap7nQSh/VFoZzQKvdg1WKGwnq11BIsAB/Cl9Q9sr0DA=\",\"fUO6UlxEqJTWS1AKyjto8uPCV3knOQ9gGB7TbA32jw==\",\"JShmYzR3s6qg+f2nMbTfoNeJBas5wXeuH0922l2eVUc=\",\"IwjsDbc0N/gyANuPkUczQx6+UUnmHPOv4+ZzBMj6jUQ=\",\"BRfk7iiJktmeWVFekcW+aVfoObi6jJx0MP0x6sRMVqI=\",\"KrFdiIdhXATiLx6Yi52EUM3cLPrytYK9sAYgSlDlls8=\",\"EW4zpxN0itkwBDka2wfVymSWLIryqINeUOt+G2ZipVc=\",\"BoFQ4SSOeuRO9WGRJ+jMKGFtcncJGvtMIJ3dUEkj9Q8=\",\"Hp49KWRZTdW8h6k+S7Z+atcbA3BJ+QSTFllU/NhqHk4=\",\"F1Hy6Zz4z2Q6Xsazy8gd71qoZ5l3y9J3nzT0dvlJaRE=\",\"JI7ykhvflox0263K4NtWywIsqYuYNijXEQxyTNrgSNY=\",\"L7bRvVfaHMNhCyAVNb1Cos1AXstSsowhUjdYElc1Q1I=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"DOQO9NN65YAIpNGwLniqT+xWPohAzCj9GvYRRJhoZv0=\",\"H5Sv7I+mL1PkuyD3VqCCNuQOmKNGr+qFx4KA8Ooz4zc=\",\"DyFkNSAhqqZBpxdsp2Z0pGWztyjYrxLHsqX5M51vXkc=\",\"G4bJp8uCh1ILOUOYc5fox6dC8wWf4SvqZkmJrgjQDls=\",\"EeTbUigXfzC7Ki+WCY6qfqlBIpGAvtGGmg0L4EzGCw4=\",\"BjeLzvLOkb8kNltRoJcAKN2inr19owVKhEAgfBXtqEQ=\",\"GS7wlJ67MiQkeoPHTro25HJS9N2MPyDu2qOUhOp4ymU=\",\"IcHK559fqCg9eowqyymk9Gp2uLP31R/ZOUG98y04/tg=\",\"D8Jg2uofRw/rzeuEzFjwOxEA/+I6tS6Ip4MsGLGxMhM=\",\"H297wHWJkW6+P+5QJWcq2a+aOreY/QHGwiKOzKIMOV4=\",\"GX4gWSPsEdr+62l7h62XO6SoXZ2dOBfDZMNgn/eMGNw=\",\"KTXDk6iEokSwiqMUstJhyZmVnUFdAIV82IMnfUOfwAo=\",\"LGOaxUSnUIjseu4BqFRHH3tlONg/wcdUHZAYwKh7GRY=\",\"JbLJwvQTdi6EPBDlRs7QVy4aMNGpssXHgdJN6GTvSXM=\",\"HShzXNbaCI/3L+jNTq24vCgmjhWp11Sl7t5T01E+Axc=\",\"IFwwm0HmyL8v6kZxpQKrzrvwqjPIBzaa25hpwNCxZhs=\",\"Lo6Nv4+as74k+06LlcIYgQOjhM28wrZfxbkxpzBBbg4=\",\"IOEpEXVVG+gPcPps5uERrVQD0XZcS/R/YRED/aZLCY4=\",\"C6kSDeDLKJ24qVG100iFOoOa80UpyXIpZwPbXCFwVN0=\",\"KJjDjyfGQxHZA0bfqvNVT/axBOVhJLNa98syJAImRiA=\",\"KG43YugVrf4c4Y5Zko4EvrQ9vcbU0etStXQTJto8aI4=\",\"LTFklcHJKoq1/EVt2Oex6pf1y3DpBiTRrz5LvBjLde8=\",\"DeuFbiuwyhG/GX3j2+jozF26rJmNzCdcq5Gs968/80c=\",\"JHuH4OppCvq7G+7M/8fBL7IPMUhNaEuXMC7mf1iNHu0=\",\"IAOv4P4pzudkG39BoxyKL8J73WGfhaj+U6RTaITWhPk=\",\"JdnC4tZgUsfVzz1WyIZdk5y6GOC/rHJdwE9GiDcRIlM=\",\"AacRuho+7OZZXE7k3uSrPoZd135rWHl8Nnfh9JTRMUQ=\",\"B8dPZv8ZmFbwd/KbBqzAMwW7A9ehvq4EXhmblZasmjE=\",\"Gk1RNQbGrmbQ4aB3uelgStQ1mmy6dzjZch2wuoJv5wQ=\",\"Fy+Ctcqn9l64BErj+u/oHYN+U7jmFcLUbtAuQDYULs8=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"HIGmTF1YEZH0CnCXiKT9YHxx5GHeKtFmubzKdC4Knbg=\",\"BlKElgvwnqsnczJOrQSMO+xUr3zrpQgF41MqWhG5a5Q=\",\"I09jW5IfnXoFbA/mOvRq+4ubVDDYGQW/sW7wUTaf7ns=\",\"FIgZlXfFACFNjZxL9tZNsIEdXmm0TzuGpYXZQQ+HW+U=\",\"IjehOIvYlikhzGN9ikxdD6prX7E41YnbmKUIvfnCJfY=\",\"G4m9vp6atA8qwgeT9BgqfzOtk+kHME+wRA0efUAGPtQ=\",\"IL/mEJLy5csFCKc8od2JgxJ6OV9oAMy+xO1WqpWtjH8=\",\"BazQx2Ec+pFwiW12Bqj1xnKIPOtCwrgpwpyNrgjfLsQ=\",\"Ljoi/TRJHxUwlMk7zxeo5FlA5KEZH80tF0HvhBaB4Kg=\",\"JlBLLVsHnErub1iPgluLKMM3E36awflF9xW4W1za6Xk=\",\"IB+9T0ycrCSyPYu/hu/hXYar6PGIOLtUKXX6EOnyqJU=\",\"CxPcav2ahWapDLUMgvGHb62E/9CSJBwCi57kcM1ky70=\",\"nAhT+uIHDE6oFqVNrs70OllAxkcim+D9hp7zbyMVng==\",\"GpJsrAO05vQb8CFGDLEpy0sgJTs8FypvK1MdV9en1kU=\",\"IzTAtWAV9sWpCDGTsX0iXqLZd5MlIfXX4yjD8Lqvelo=\",\"LL9zkFtUie07DFdj7uBP7WWUQRoTgdC9YXogip440gg=\",\"HgbE0eLt1VMPImZJhx+PyDuee1cI11vfa5oxuWO+e/s=\",\"JgwuXlNkvZFMy/t4XQGriYoqlh2vcI9fPjS/+VOySwA=\",\"JmifclnhBhFWlHsTbA29XowsGXK0gj9NzwTfM+lVMs0=\",\"KR3w5itWPaZw1E21jQBg4gk1hS62mdrubjQrPFm21zw=\",\"FOBVkbm4ibiJkTTIB5iG2Hgpz8OVOLeLemN4swvhxoM=\",\"K+a9+CTSzM1WzsbRlT4PazEX9sugNVkkM7fayhLtQ9s=\",\"HbvXw8PKDqoBzTCdzFfQxjMYFK6WQAccxruUg6tvmoo=\",\"Iiey0JeVkXMbh875QjfnBopcXgPWCeYd8kC395ROkmQ=\",\"HTUe1LWeRlceVydSntkubOVarts249VMvGwqc/xKJ4Y=\",\"IxK7c2TmkPZCEKyvaV5djQOpBZsmG59bwv0t146/5Jk=\",\"FTLTx/79qafoH8lJ9ylWvV9tVbxL5CHSfWSEfYHNy9Q=\",\"CJFsHKPcLSGmcf9JifX3rlgcIQLBcgVEcstj4l/VgQE=\",\"GZo1VuTHo3Dwgy/ThZUmiNRpF3x4oOdxB+5Yau7QJco=\",\"BCl+h/aXR9rRORWCrCalQknQBPvRa/xQ7BLX5rlfqpI=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"Bj2zpGw+HoIjV9tjfIkQcisi5TFFSh2ibydo9ZqEV78=\",\"CCeT5ezUS/5XKJBoyhvW3LGp2sCGv+ws6Zq6TQTEay8=\",\"C1IU5NHyInlHo6oT57V6TYXdlN9A4526zgLfDnwO7A8=\",\"Ff3on64L1Vk+jyvqBApvg3p7/VxeE7BFFMOesa4VYk0=\",\"J+fm7qh5GZEJ96FlWF/8tdpiak0MObJoH8e1VAJRDx0=\",\"CCtGB1s9oeF4zWNnlxyvh6NnYinbx0XgMbRRNmGCVds=\",\"F2ZoMwsU6X1Pd1R/O59DC3/c+xv8zUb6cIObrmPfSHI=\",\"EBBEUPWwOgY4vducHZ20GZgJTeLNioz30/BBQxIuWp4=\",\"GMhCh6ux2Br7fBa1OAqtLt8FSGdmHAfkSyUu0mzHto4=\",\"BNfx7e7XVq4FmP5LD/ftxIi3XwN2sZI/3EF/5987rns=\",\"FrO88uX+KFQwcvce+dg+MYh9xjLAyGtDie5zBEkgdlg=\",\"LynI83bUYpRlM8HzSTkYNPLsgmwI6rDu5qJj91mkN5c=\",\"INOUq7OyOWfiI/W58KVWzlghKMisUZP2b4yVmh78M0Q=\",\"CyB9ONdiUXupeP0YTM8VK6HEYzPb2XkZS5/wayenkqY=\",\"D63/4QClhhaVtwWfatjg1UJv/pLCv/DYGCW3L22lF7A=\",\"J5rr3eZHtBGCNNiGvRafBR7Rk7Dtz0b1SorKL00820w=\",\"EZ822v/osr519OZMMvwuzRGPMZQJSZ+gB4Gc6Vyi324=\",\"EkKmwYH+kPlf1r2wKRixTHvO9jTuPQLjC60MqhYbG7A=\",\"E7RUbD2nf9yHefarDXcLzTzXLZJ8csafwd0B3p6tjcM=\",\"CIj9Wak/EExCPswiccWSYwWrrfn0WPcOu74opvxAH3E=\",\"Jaj/NfhQcuT4rBSOU5kYgkCac74xVqhlzQDOT5/QXjk=\",\"Eevy+jswISGDNH8P5WMuOsMfk6aKO4/7R5YLUFYBp90=\",\"JOVHzwUvh5rtnUPncvvngJxQBgPq9O5p5B33XSzdITo=\",\"D8haIsBeXqISNf91zhEox72t/Z/N8Y8by2bl7rdhJeY=\",\"Kp8ldqhcgnOZZV7oVrlO51czVYLkdoRhBtvMxwKL8Z8=\",\"E6WwNyul7YsnGORrJdeXtWpssKLwPGIeiWmzcaXR8t0=\",\"LPMozVp/FjFpiQE7HbWfjowUjOoaCbvL78Rk7DV38lM=\",\"LG+K49CKUoBotP9NoFmhoNyI4xH4ehqcW6mXODaXYvI=\",\"IQj+N2+K6XaU429XXqoKoNrjBlBccNWgV19Wl9rd9TA=\",\"I6KZHnE7AQIsu40tO4HMW3ERfWY+O+D3FTdXIxrSLLk=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"Hp0SX7fDXfwAZNQ1GgVzG5Wzfl6+534coFXqdUkCx1w=\",\"EZ1knTYsDwnvq0B2xHnJgzzLyAovDabDYtZT7Ks4FZk=\",\"C2glk9CSUNw143YSfTOjTTDqIfefPxEgZmGPlHhyw1o=\",\"FmcMZBcJAzxfG7QJ9TC3eZ0oDnyQJd79u6cG2eE3FzM=\",\"FgE9Q5P7MWhxMRoicoql3pibzQMPKlT/CPvHMXN16No=\",\"Kn1FGLQ5MHDSKo2CS3XYpHT++O4+rkDKzDjUDLUlk3o=\",\"Cir0q5VffcbQmpxyu/9V0wygEBNlGzh1I3gkh/1r/bQ=\",\"BPzCHSWLJwRY62YuyLFt6uLIA51ozKt04ZtFc65BOUA=\",\"C1VH0AKPqQOqmizy65ui0wO//5zrHUBw+Hyyghz2hMA=\",\"BOsEtKoixqueDNjDMaBK6xVGtYVA9GBiHyaW9FPA4OM=\",\"J3V7X60g65mjBjF7hyJ1UyoxrkrDTcvyDoCEPyURryM=\",\"I8XNRL3D52GCfM//zwnUcKVaumnnrQ/IP9Lre//0Hmc=\",\"IbsaN8xqHKHWX+vn0YaHVL+F0IIhU5e4mF3y+oxHwlw=\",\"IFBgKi9tpBF9MlcGHSJghSdQjljopXjQDyw2hfYBhGw=\",\"KolsWY1A2ZIgcECl8WKdxhVJ+7Dbpl4zqMrpitRq/BY=\",\"Cy8QuWjHa0ocM4BX4cZ5hcw/VxOA22axw4/59tYw40o=\",\"B6Hm6d1RKxDrCBe1aDnju4W3NkQrUPMuGPB6Xr3zwZE=\",\"DApypIQ0UEA2WXp0zjYnlvkCHQ3I0xjvCGIlpVyhqfE=\",\"KOPjTeXB3hyFGG59YE5eSiStYDtnarvjZ0oO0tgCvnI=\",\"Cm1VvHgmseKwOFDWd5KPUBv0xjmBBMAJ7MvCsvxcvxc=\",\"LAQqaNBrX3EQUTGC1cVO/Wqw273OV/HutasSysJjIqQ=\",\"GMv7tmB/KPko8fou8hzovp1HGajXwzp/0SebZyLxUaM=\",\"LX5uA5+Bxm8ymy3ECtOxFrub9NuIvT5EvjmstnarNuw=\",\"K6PPNqBYBGWSjbGPYw5Hqu84jQSup/EKw8YA310hCM0=\",\"JAMRYADXX7Govz0KGKsGj8zAwUnEapNdkWeMRfyUiys=\",\"BitcNYoYkhlURJ/RSzotzz8pdHEOlha5gF9xXXqfnlA=\",\"FDB0MfdJ1CjRX6P8VqUXxnfCLgqAv9D6K/o/NfMj4VY=\",\"AsBIVMlqrOrjebwPdHTNI1Q2GGpfnwH00Fng/IMDelc=\",\"G6YQf/NKjLHsO0U2Ml8oRaBbDEuNptxcDgMnQZiAtIQ=\",\"Hnufzcq7Sbeq2xchn7Sgv02njU3Nu20UN+f6VuE/9P4=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"JpaElcvZn1R9lMgtJLcU48/qOHrhESvkUO9IqTdSrF8=\",\"Hd1PLr8eHuW4tnFead8T1YxSTGsL1RIHd7eOJqBUuXg=\",\"F3E5bgcvNC4U+kDjek+eRaOFtbrauKELi65rwyU5LHU=\",\"EzSz4StR1OZYc1ID3+JZwCLdxd6scr/JQr2JcMfT8x4=\",\"Lnrvj8An8PTtQsSsZ0/4aiMUuaiAlKIUMlrl92EdP10=\",\"L2bY8uTGPO/zety5aBIBDeyTvoShiyYKZZkJ8YrQB4k=\",\"HMgKToEUwghrkNfH8PMwB9M7YTREpjgjtGWTmvQJcF4=\",\"BO7kOWAZdE72f9Q/o3OVEaI3DyP4DitevFxaHJZVE1w=\",\"KLom7yhLxTXyiHeZgN/A2oUwWIgjovg6PV7belolr7k=\",\"L9hNhSAUagE5ishPM8+1V6woUBlf7gxbKNLuHWKbTZs=\",\"DYMeV7GtyyDCJ6Gt8qarUqChz0EE5JPDJ8vqiJfL/98=\",\"GGsba4rJigOOzithlxsMg/KPMuCX4ozc37B6qOaFAww=\",\"B2MMWTK0hudL/MxtBtbKmeSZyJE6Ohoqzj9lRmltmXU=\",\"LqP8DBZfONmqAu7GpG4ZpYVKC7JYTC01NU4cgUuruJY=\",\"HGLzGW5T9R/NpmIDF7TQiNITJTGnNnyOV5O/3V3Ac5U=\",\"HzUuJ92A0xWic6PuGhWfGIdXRMUWm/36XtaikRPKqwI=\",\"GT2JheP5Em2qpOyytP7ARCXq/XHa/Ib/Uh2B/PYs3M4=\",\"InHJBrlgXE3UjpJfqDHxJnk5NC7CpvLWjd22KlJBu5Q=\",\"AygX01oNV/4P0QWEEW07XEjd/W6+mQ6R/0abHmebffY=\",\"FkVAIQwYI5/Q5DAeDnKQGKf0GfQ4/PgpKUF5uywHYiE=\",\"LedJ0tXFyds2UoExkOSezYrR07OuMIw8nvtumIIujeo=\",\"KlYt7NW3BBkq30EZUjT04b2NnVi0zEjPV6Lsne5+5BA=\",\"DdV2L/eo9lKDGqlunHQ3DnGy4Pod3R24VCe9Lnn4RyQ=\",\"Jg8kyDbcB+/a5l25B/2DkLOPU0H67Q/FU8x8Ctf6VJo=\",\"Gp1AUN54lhhR/RJonMD5P99SeOFDDXKVz2IHE7AfKQE=\",\"J9JVpA3jgEFYf5B8xNhKirGlygf2q/bVNCJIwN9txEE=\",\"IYdjRicBPTD/8aROzT1aAYwGNSvl1IC9MUaJjMAEOFo=\",\"AuDu1JoJSGxBACVXreR45XuOwXX5yjb9SBU2GJdmKR0=\",\"GrrPN4CmDTBONzvS9A/2ESsGjAxdWWajMnw4bkgMkYE=\",\"KDmlPNFI/BjbKHw6ycvvo6R55BQJX+Znt0FR0reMY0I=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"EhqytquOLF7Pid/CvagzfX9S12z3ouREhZ+htxS+jwE=\",\"I6QFx2RPaptxBtTryZsPLGxVQzUtOR0xopZUeCMPLBM=\",\"PeHMuOJujb+vBqCL9Ribs46OXPGB0VT7sMSv7QPVUQ==\",\"DVlMOhkDq7Z77eJPZkR/psyPhpbdvdVIMKMu8gVJXkM=\",\"AtE8/ZdLBiRzT+SlEnsj2uFvaQM8mxsNeo/8u1UVhzc=\",\"BK1BSFBs9ubZeV73hMbBh14yKrDMO2OAMRsZ+UQdj4I=\",\"BbuhxNNeqb21k+GYSMNRDyRQq80kvDkkVtl6bk8Y5J4=\",\"CSNsNm6X10FHnVZcRTEUeKPJGOYtUtEsX1S3Nmxb9X0=\",\"KlYw/jPA1WFsQdCVPDBeZ1AzBvKraULkcu6JzzTkQD8=\",\"JFjlHwFkgh8O0JKkK5T+2vDYAannuu862lhs5ejNPGQ=\",\"CjIYZg/0dnrKW3eqowYKTh/I9fzA/NaBPJiS3u/X6W4=\",\"EMYo+0GDDK0N8dQEVldBLggzRR2fb7NBmHr8u5jKwwA=\",\"A2W48vwwt/DpEEaWa2foBLiPLh637GwTJFZGfgXReaM=\",\"C9547Z+5W42r3nnVXJLhGfDKUCvg7Qig3Dgfia2FzeE=\",\"Hpij8cjo+aNe6sJ4JhXJbhKVDmJ7qJqawLhzeX0wEH8=\",\"DAMIyv86R8yS9RFj4FoAvqBRf2IaTWnLnmgMeVd1Qqc=\",\"C7IJY5zergKe3jn5EuMwBzNId8AASEL3UDWn7ial5NU=\",\"E//AZdmPi6mXoRyrAP6hnR7+YuIPG9cQPeSFjiELAR0=\",\"JM5YmpndcUm4oKJfledmpEsIHl1HXRe3zsVNqgKEGOA=\",\"Krlx+Koo1/sRt87cbYW/uUe9ZGkObWzA/Zzt5sz8HhA=\",\"Gy4V3Z4lrYslBv+PAobzTSYlTStHMsq127cT0iA6woM=\",\"Hxw1WfeI/tGfhscWKFR80dUJKw0wtL5OpjS3RJI86iE=\",\"HIOz/5+jJLyaUxbwqFqGVxI6STqbAiAAa6EQCjk5GaA=\",\"KJWKWDFyftgAEBFohdx8ZqHCRfb8q1Y2LJhqyHyu4DU=\",\"KCw4YndYsWSAeLJBu+NVc3Wu0ug/GCeMpsliljKXoUI=\",\"Dd7q2PzM7c7Y5NQ3aivFMEZr70UFRzHVJDRU/0rNBME=\",\"C9sDLuE6Z9nHXfTERXAkTk944ZoDmzD58SxTLpsK1gE=\",\"BlG6LwSAPV93I1yvUDBd5eVUMaar+sF49SSloB+08bM=\",\"ZUH9RhsxHfzcZHssM+Jy2aNzO1/zjH4KLPUaZeIsGQ==\",\"AyKTsrbpRUXTYGtyP3oxSf9dmX/x6AlzWeDg6yRE+rQ=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"HkfZZVnz2etr0vr+IQwx9KgUC4U+q5htwS7iUnYTAW0=\",\"Gqo/uz8z+2PUUE+46oWfQVbuILWeGYtTFUbmiRokl9Q=\",\"BlyX8aItLGVh7Ws+i7aPvCmfpW5Au7VNSeAuwzrW2RM=\",\"LM9VauAd59vhW6UEQ3JxuKM2UdUkn8UoK4zTj9I+83g=\",\"CrS4I3xo2t7RjagcWmv7ZXtNh51BZNsrLm7kuFTzSTM=\",\"AsMymyZ9EQQbeIMX9Ww/uKaFtpwPeCqyIT05O+/IDws=\",\"IvYPH7wEa67vyuQNK3hDzZXI3/fUng4YhR9/2s86TrQ=\",\"HSLciHBigfgEBfZvtg++ZlY5lp3zLvxuR9M2NdpkSSI=\",\"Gq9Y290aFAGNM/SN4bmOb3qTfYGuRqpTE+mmrYhuf2A=\",\"BvE9Pdg7mfVrjYQOc9PGle+oyno4qJHJ31f7lFuFB94=\",\"LXw+xXPpzINQlkog0KLsA9LpSKP46qttUgQGgI2AV2s=\",\"KTouVauvFnzt0njcPTVZdbwfKdwzVDEPIfnOAVdLDSM=\",\"JoITLjc8GKF/eGAe3upPh3IkC/uImz25Oy6OoQsicOE=\",\"MBUI22wflxAoWx5uRNRqEzMQwpwoQm2QQX18IeTwsg0=\",\"GDTC1E5XdKfmO6MRo4lvpZXATJbfIW4/BO1AnC3psRI=\",\"B2xJ5jPxLrk7oD1ies8MldHWI7bLQvdz86IOAvIxIK8=\",\"D+orHfNRD2503Im+GgYex/glXP8O7Op3jhzKmb7KtYY=\",\"GcOo4juUbWRSZpZnAnD0kpjuTu5EAoiL8q087RH3rVM=\",\"CGy76uaeg6+NavUM1PFh80UBepJTGKzEa+XMqWlpcEI=\",\"GoqFHPQA6k6belHwvNW2NueJTQXz4Prt66Ziv4DpAc8=\",\"H7nx7Uz+VnuBg/sPn17dJuivVruuR8+2+2osUyMwN5c=\",\"D9W91CXgC0meV+NPGc+um/A5bkBfzZtN8jSnPRX5bwM=\",\"LdRZEwHc6JwlpraQzpjky2xWA1BQVfbITp+4mAzdMCU=\",\"ARy+AM82Skv6cccLaksYByR2WipMwPMQNeRM6kXBcZs=\",\"GRmrqerl1cvVfThR7kARr0e+COFRM50P6bMmAtH7uCc=\",\"BtwnhisMTzFIm9jAxuKp2OHI1SKE9POBuI9sqUSV95g=\",\"GRHDM1XO2cVR5ardUoveAS6ROyg6Z2Z/TyaWda2lkKA=\",\"L6zKgv3GMzCjYo7JQ10ZOkfK6o/S3mYX1gG7rYrbD6o=\",\"Fou30MezjfhWr5gx9LHaIA3ySO2rkqtB5jjmgAxXJS4=\",\"Azhkw8wKTMP8I8UboHvR95elU5T04MOcpN7B39ZHOuw=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"DHMmN91TqeIDXLBI+1rDK2hhPgzRL2iouNB/q8c4y8I=\",\"K0ToKly67DfiCHYrdbN9StS7xNgxkiQaSssiOD8m3QY=\",\"DPfmqIFfYSL87rd4hR2FFVOEeWvpod9TY59dgWMaJVU=\",\"CXZAHIwS1BXzidS7ZGIbcfIlYZ3ZOJdSW+noE0q5EqQ=\",\"GiPyqloMqTlJbuzuo9ep44b2QaJI+2iWgqhhbqmCAtM=\",\"EpX1A3eHXuorh1e9k+NUO1mnJ9p4dOZGzD71I//Lef0=\",\"H0pl+Bs/6Fj+5f4pLajSWU78CKOF+J3GC+l8nHy9ADI=\",\"EubZJVcDfcL8hcF8QUjpAY/KSJ6Q6glup/QAx0KXovc=\",\"AvHjkG5KW4fHFFVqveRZNNrUZsEERgmyyGXlqDVmezg=\",\"ECxNCi61aUhufGx4k/ZJHANiYlk4j8fVW1GaVeN3qSE=\",\"LEJ8dYdv0gszSkVmPcKDWZNzaAl8Rve2hetuP72hprs=\",\"EvGWix538U8PLpD1+kR5nPLVy7O3dVjRSTZn2yrlUmc=\",\"C4cwWY/rnuIVhNVdVEfYu2VAuE5Ax9TxS2Bi7AKuAMY=\",\"LhOFelO53VemKnkLIh7NPYrCfdfd9PEOxI5oDxoXBBs=\",\"CG+XUrd39rYmD1N3DJQFbBL0RK9oxAx1v3OW3Byn69U=\",\"FE1ePRFlHhgKFhUrMQb5N5QtSO50byF6idsuQQ8G4I8=\",\"J5VnlAltMC/jzsI/PNcT4eTH6/epWZrBs3NMwDKBGgM=\",\"JGQYLySLw/MufVZQhwp5w3Hdj8jWcDTc/KYhofG8WWs=\",\"CnXxwuQxxGRH2ljEtTtacHAwAD3VJaZ0aWOxRMmlGAM=\",\"BEHrOWuoMpuIiA2317KbV+cWUmKwIQhUQXAnjkROEeQ=\",\"HCcfFpQ8SLtI9OLReLd+TDHyI1VGbWQZdJV6WATnh2U=\",\"IJxG26+oHNTGIHGrhA+h8TioKJ6HFQF3ziDG+ZQt/zg=\",\"MALcjEhiTPf24gftPcRlb2xv1W8mDJbJNicU1M1mdyY=\",\"D8sr1DG2+ZcCwPayIIheV/k/rfeo06Nlrq+gzrH7dEc=\",\"KnQVTD99wGPxLeztzulTt+fT1x3Ej4Z/csinW13H72I=\",\"Ep7wuIIHCBas8JOojGYCRaTlgmGzB0V+uZ/Wxpfw7X8=\",\"JPduvxfhpDBW4eR2fPSv+VSy+f3knwX9psGO59KQlHE=\",\"HQmfDWOO+lNL2cdY+YVqeUPv8YNQ/rLZDde//EjoDBY=\",\"LJ9EHzHZrqQgJsDnzYdlrtMhrTkfTIadhxGLehEH6Us=\",\"B68T4kHPquxFeLUrkxW1AX2tMk/Wm/Gmpqp5znWwRK0=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"JVNFy4g1TjHTgXQtDVtCByZiRF35uYokfWF8kvJ82fE=\",\"F+XHxCXK0vuJ5qyweizqS9WxywL8BP4429s0G+HPfYk=\",\"AUb6Trl0yPqp+CH2Oso3J0edVI2fZj9pNMH0WK85ma0=\",\"ByeUKHbG7aLJD5hFjvT01u0BDgViI28f6/qnK9EaX/8=\",\"AbyEpWVw7Ide/fmFJytd9myGz+WKW+BS2ReHqOP41Jo=\",\"EFPr4UE7M7wYjgb+BHI13TAoYV/tWNvWwdAUmA7Xd38=\",\"ILEqtvS/7MBO5cdfQQjy2ELwBOhEN+kJOxVULcJoA80=\",\"HsDO+eX/w0cuvq7Gca1szR/IXi+nxeAuYZBTl26uXVY=\",\"KkLp7Kn8rvyEyjILcqBBXuzhUSsK/te89JOJhXJ7Yz8=\",\"GhcrLoHiVZ/zq5sxoQPnfHGy5he/cGT3qRCAPvfMn5o=\",\"Lyyy3OyT6ddopedzArmP4MKRRnqL85IuJwEj5F8GvFY=\",\"Bz6UfjsHHZGszv1k2SQuzzUWGBtYPiciLQWsZOV+Yco=\",\"IB4R3WVsMpKwXCAuo5FseHUrmnlvuXv9sv5nqTW3Yew=\",\"ErobB0+LVdpCIG1GN0MRY6GqbAiRaB/WBO4Xp7Sk0FQ=\",\"HK93lnaWgJ3U5HAYPQDJNYYP4nWLhe5sa4IS6rC62IA=\",\"LiyOaA3eyAHqGJ3WedLhbDZL8opp17ecuBhC7iRpuKE=\",\"Ap+hkp5/aGSmxIVunLLb9E1Md8yhNc7p6uYRy0LR6VA=\",\"D6I+V7zbl38YXfQli8GsVZV5CeZhMIakSmWBzSdacWA=\",\"K9GlukmhndM+zDaq0jaw4LSgOUL0KmL+gldQiJ1KFSQ=\",\"FgrErV7slbxZEPrO60YAiKt9JfoVy2mOntF+FhL+K/w=\",\"BMeM8+SFd87bjLUkWpYHzcklTKiocE940Y21jyVSsuM=\",\"Hp7zFd/cmREtDkEP1l/MycescoYXU32j6XfXr95BTGE=\",\"K0QhYW3xHf6UzStVAIkfB+rykAvdjujrQrAXW+Ur508=\",\"CKE/jbyC7JQ8jsquBpC9CkvVGpdi1nDI0FkDjUJZdE0=\",\"FBZ+6lxkH7EihjaYu/aJfLzXeNKJwoaFQX0C6G2zbKA=\",\"Gy2E6SSYSSbHQrQmt8zFhBxL0ZPT4Fu9XF7VhomRdBs=\",\"oUxAQGNCIaaGM89PRiIlHKNOQsmuJU630Cp+rxq8PQ==\",\"Gq5rL1bTrMftL6XzEKKdTlS9tOX1MfaMWcpbQw4fP4E=\",\"HGvvGnqQPU/SFaF1StjzABHmduSYo4EtTxXQqEIrNdQ=\",\"Jg0061UDZKAY1QnoMaKBy1sYcDPstIFO9C8kClweoRk=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"KUVRlBg/6pQQnJRSBvLBZCnQHAo0kZ/89CrDFKlpuig=\",\"EfTztqGnR/waoixmkm5lEaTL9iafMMYvNvVLWA+JGoY=\",\"LfHL/h6f95xE6seQneAdvuReiZ41ALzOgmm/yjEMXTk=\",\"AePtKm3U7AUFm43REGOpPQtsSCJhFdCbfljW0PYgvks=\",\"I16t4BmhrIkhAigIQZYGJLF5uCuyH3pXHPu49MrlQ0s=\",\"EGPcaS5CrOzCdlSWfYX4w7SHYMOyaVZfNYHDDOyutvw=\",\"FEwIfQu6ayZRUIATMyugHKNs+pJu+zdjPMlCPpslcnU=\",\"CNxEkJ005Pvt7W5biAL8uKw8MeDCqWaVbs8M9MAn6rw=\",\"DbsW5biHEeuJWhK6v7gdvt+N4pzlMK/wkaOhb502NGg=\",\"K89cnIY95XTz/G3X41uE0zP6q+Q+HWzYJ61YBhR2+84=\",\"E8xlaGI3eDGQYNAcfneA2d3z5v3BHb1uDR2vYcDKWQQ=\",\"F6Ltz4v0CsJDZi/bQeQVbph/xm4A1Qd1I8r3S5cM7ME=\",\"GT3N/SlQqTTMO5LBuegmoR5oKc3Wu/aZ1wLJAsnIvfA=\",\"HwSct9FOvWh6xhFBS2GG6naTjB0jn4u/X4OXK3eN3ls=\",\"BNlZWrTRi+1V7zw/0M2Z6CnY5VuMEB3wnCrNo6zKmvU=\",\"EaEOFlbBbTxT+IkHPZ+RCUVQavLgKarP1yI81FtFfyM=\",\"HITBuIj/jWOW7mOGYhmz4ddHOt48FM7tPB/fpEtR7f8=\",\"D1Ux7zqFFxyZqZJ72dHL4E6E3JTHrGjAYATZmjke0Go=\",\"buCPxpHwtCKdyHGzZ284AEL2t6weU0QUnNfWTMmrRg==\",\"I3Yo5CKle1FXeQWEfuyUnMCTitzaLpf8lgSSiY0MjU8=\",\"BLTjaNDUhrLUdyqfuAjbJR/fqtqrtZpbzCDJe/o4zns=\",\"KgSE2Qud5N4V3sqaT4eVphqM6j1e7Q6Ti9XCID++RcI=\",\"LPowE5/P5Q4HZzv8gCnf0I9RERjdSkvwp3p7s+HolK4=\",\"Anj9aLtZcfnYtSuekkgU8+B6+JMXlvwrXQlgXu66lcM=\",\"JOpDFfLf4+Nh4OxyE+UN2bJf+L1lTYP20mylYuKn3ck=\",\"CGElma4uSoeOzYjZGU7Fzu3Ra0DFHm7a4sxD9elKJTQ=\",\"IAPt9pqBC4o+uCCLRV+zpuBL/fp/YZjyoEdTEtodo3w=\",\"HtltngdIqzfWmEt76FtsQ0LTQRE9JVy6ynSdpUXTSYE=\",\"JJR2hllOklyM5PkZMJ1d3XifYtJo58Y0ACL+DUWouBY=\",\"CkKyaM9kbmmoQVLWMj4esxg5KhSCeuMkGYH27zQXPg==\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"LBb4ApOh1kfeVqSiar9ctoQOZ1cJmegE1DS6kjJrB1g=\",\"EAA7fEcgJnG9puW9RsJWTGNNYA4Psj+JjXOiF+sffL0=\",\"CPmcZB9aQ22uueJpFGtQV3Ho0Y+EfK3TAoyVnjnkf3c=\",\"F07NiA0OiWF9saUtB2gBu93Mj2PHU0Z+fktyhPnAZcY=\",\"EkgjAZyW/rQAl5+8nos+oCi6RRmamRGOW+SIXqJcWU4=\",\"FHbyu4uyZezudpuAktlofOa4IuotT8jZqnWSe+JL0Dw=\",\"GdrEVkPPDsRhhO8SGrfpocA3B8euxGILzMgK6D1M6rg=\",\"FGdOS46rP8H4DPV+NE0PyiCBdDJBiYvK2ZndeTnLm30=\",\"Htcrji2nov0W2KzNjq+0y7UcWanQXSIcxgj3S3IwNYs=\",\"HaWrRA8s25vAeezezrZz7NhrkG/8M1CSJcY2Tr30+dY=\",\"x1HQ6nlRXBrAWEh2Qx3BzmIm3YQgB31S3MZEY46ziQ==\",\"BqndqDZpEp1T1Jm+nRhHHMw97Nqn3bFMTBmYH3k3Az0=\",\"KApiJucpzFpf72tmJmAD+3KpmpfhmF+cGy89bhxfRpY=\",\"J3zLfyJqGSC/WriD4yDwXG7bWAA3vgIvmmmQecnqFQE=\",\"IH5MKh+dS/2kE5bSRMvDE6WldVzpy4eA9qbPj/Z7CQ8=\",\"CrcunyJhvH2s33MLAsl3LWezS3HBVPBkgOJXaZWrf74=\",\"JtyaZQV/3mjL8rUY5H5SwwiQhcMAFdhz2oGSTugReXA=\",\"DuTsYLKLiuG96Kt1UhUxdIB485e5kU7R1gD5T2Xtsss=\",\"JveqypKhOcXiplPp67EyqqOFqhku2eFwKwTyyJ2bt2Y=\",\"LS8cLlMmv4s0OTEO1DqHIdhwXm0cAxr5+s+xX0/43oU=\",\"H9argORalNnuU58yR/Itj6sWAmxdASbMVXBRRZnJSyI=\",\"D5Sj0Dum6zy7hOy/RDR0l2tLYQssfgvnvRjsAm8mgz0=\",\"Cf2mIhz14lk9eW1xhYZ6tldr8veYE/VbahrpofyzQ3w=\",\"JoRjlt5qixE7eEp9+5xjsLlQppog5jY0lUk29SBHAGM=\",\"GeQAou2WBqCjkEG7oiy76qhUfInKDrAGxhS11tG54Ko=\",\"Dio6X0JYfWCuwKu784kC/VTTksTPJvg1ne7KFgBhoC4=\",\"Flg20uX5S9mGiuRx3hsZT7QHw8J6OzIslW8TeJ2V+iM=\",\"K7opZ0Tq18t/pOZLDZhUgU4wOopoVDMFOtoSYoWxLdI=\",\"HEK4Pgv4zW4gcrVgLYX1FhumzJqnUjZnkc7J7uEihRA=\",\"KoNF5SGtdfYXcwI9kFvIc66HVLKMAnMGPUlwAwz2r9E=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"DcdpiJ5OYDKM7WfiMfReJBKD2UNWAqck3Y0finCbpQs=\",\"EAL5YtWUqbOhzy39yUC4Cmtn0/wxSL58DRG+UOJ38fo=\",\"EWBLVvKF7prK11e2LgqGeeyGikaMZxVQDLhOcr5yx6Y=\",\"LL7nUyiPaKkKPEqDeD0whituieIew64RKvGwFu6URc4=\",\"Lfhp7YWq0c96F7WNIX33c4wp5+5bDSVMHUl2q3GRa2o=\",\"BSsrovx2p8QOTuvAYrHDU+LHr4QwoRIi5kuPHAnle2k=\",\"I0RvtlO6B9kxFdNBP/fJZ29X0eF6CDKcFT6w6J0+MD0=\",\"EfH62Lgu+MBH/rN5BCKXzr5vKm1WYOepk/Z/wQ5Yrf8=\",\"AXrw8sX1FNKWZc3iAj2GYvRTlUEBu2bhX/WCYEuGFHo=\",\"EdfOt6WDYMiUq6/K+7sLCOMC6pQNKfXEA5ceenoBT6s=\",\"B0rQjczjhL0t8yTlauDsZfA1qpBHm/JdlArpTyW83pU=\",\"Cp4OK423KGD9MwjXmC1MUXZticzIk54Ah8P8HhXVNVg=\",\"EAU91y0+JMgEBIIhfqbWHD5BnL3v6HCbxYlR/SoHEaY=\",\"C4/reUmoEWrR7Cz+R5EDGL1dyeVO4Mr/sIoj5PoOois=\",\"Gz948YsXjujfS62M8vreIdFpjvE/eNNZjESgY/792iU=\",\"Fa8ej9cfB5n4x97IkcEtibtoe48U0PErSlIIS9aK900=\",\"FH1BmxmZ14lvfyyatok39OHd91zjYVtR4nWjPl+o/pY=\",\"KLfNraLyyysa4XBkph8Ds2/mT6+dt1K3Rw2oOYoVeOc=\",\"IWPpMbbT5mQdNDabuAizdFwQA3cdup3sm/nV/iTENXc=\",\"H+O/A7oXUuDZNIY5fij/KpNQxWq7lJ9/agJXWxQ2Y24=\",\"LsJPabInVQKXvucrBWGByRNk9U+csx4LFNOPwqw38Uc=\",\"CY2cplXhfZr1/Hkzvrj2sQDXhkTusZwec0a71gd/708=\",\"LiluYar9bSGdrvwrmU1SMQdwgwtXZ6PIIgwvUlHk14Y=\",\"L2iEsmAsUOTL37Re1khj3LaJrzuRf7EN+vnPqDB9ESw=\",\"XoHtlxmafDL1hEuePEjGDfyuLnA7sZhVJgR51lVrYw==\",\"B7MoHsRF06WGVNcqSLhr6KEDgJEKV2AkYMkeTvzIEv8=\",\"FOVe4ocdo7HgUcsIV63q76XpEB2bXXYjWA+nDN0EE4U=\",\"BT9qHGu6WkzpKWKmojzfIQlrXBwGUkRKUhdO+qpih6w=\",\"D1XBrdJdyV+WAjVqatAG7FVzeKA4sJ2fRtrwCzWdiOE=\",\"MC7yFMTE54aIz+IsWFRNPLiIi6xVEgRHCeHFb7OmpRM=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"Ael6vILdKdIoSmbt8dOBFajPnSMWx5siYq/FpDSHIXo=\",\"GMhEtUTsDaZwun/K2Gt+TMO3kMMmlQfODPYIMI5j1fI=\",\"J+iU5GPS2ZnFu2wp6fVXNgO04/VfpLHrMVsGZHlKiJc=\",\"HsPyaxr3YYXw3i2JQVfd9pboCqo2YelBY+kQap+93T4=\",\"IpeNmDolXq5oQNUNz1hiY9Wgr9W461UvcgzAr/yM9TM=\",\"FhjX17bXui2v0kaQraTPp+w+lh85W5x/v3120N2DcSU=\",\"HfLkupukTKbySHeRm+bYTJem9swxjHKX1gjxqk8FCEg=\",\"H6bHz677cf6IGR5i7B5pYRx2xQPKjGwrReCuKGWIys8=\",\"AvACZuULwXUU0nhz65Lu6AOGlq2m3ssBoROPCarvtiU=\",\"JLDvbI3djXSs00/Sl3onxuWE/rtcwe0RnkMzOTSl76E=\",\"LrpZD1FOtSdw0UC7sr/RkJ+7AFZVmluxj763L5vxx+U=\",\"HAFmT1ILElYvk7uT9Ah0MAcDyhGznrHouunyGUTwxKY=\",\"FYxuGkGEJheckhbPNQlXBTlRgMJkgCMCwrW92nW0pPY=\",\"Jgnbf+EMk54CiVlarZeAdELErFsoIFu2/W73v8tVrao=\",\"BovKFIzwDdtzvLMrWA25QjKSo9DKVHIHwoEiLFrGTwU=\",\"F7y9gakBAm35deGifKArfbK2x9ql3A/Jp9ceQhDBZxU=\",\"Lfq4S4s1gyDP1v4f2q3Y7gHUZY1wE3ZQaADOcAIMaAw=\",\"EggZquN7PZH8jAurrDiMU28/CRkjyhNYfI/JHSwnqcc=\",\"EjE7ab1gbKRscAj29PzPPd7wl0PzEa26EgBYEImYVQk=\",\"Eem5ksBKTuRYamIULzeGjWU1+Ujonr/FQVHGHh/EN4o=\",\"BfVX3qadq/j0kDKgegIbKSpM1z5R3IL5uOTZbYJWmlM=\",\"DOK8ZTBhsJonH2TVrFRvey86JwkQ8lBe0YbhGw1O6kQ=\",\"GVthvA0WwXYSgVjnRjs+PuDfR20xz2QeKXyMufXWNo8=\",\"HQ3319oz9GikOkE9/U5OGIOFxsh712dIbEpKa6vNosw=\",\"E5BFZIF6O/npixoh8fNg5YMHZNpKMA8FkmgRG1Gwt2E=\",\"DuAQ/KlfRSUKXOlKiakfvWTywRjidVEnpWLrsA/SfvU=\",\"J52GxIhxYQOn7CGq+dITn3LH9yoY6r/Vge9hngw7ILY=\",\"EbgD19aSdF8rp1TxbXlaLFG8VXZXbCRO22+AzXkN2NM=\",\"A9CT0lAMYUhSo4AuSYvdll27mT6NBzl7bM2cODKgkHs=\",\"FmUtX2mTL6BCcgaERgRhkPnIP4XpzLzTYhDFh3d48bg=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"KVm3wYx3SuXeF0mvAcZ4qI6zIhWvvZYqBWHW0ZhSXnk=\",\"DCar3F57CVpOIjfIcukLy+6KEGGFcuyaq+LXsaN31qg=\",\"FzA+ebsXKO7LiOGNi323hOoacOTu1n5/nm3rp2G4Y+w=\",\"CPE1G3ZVh3c/wlTU6cYhUXi4Fpim4TMr27FsViaHm5I=\",\"JFh8W+CHc6svwiUEIcSYizMr/EMs1OKD/IbeOIK3iYw=\",\"CXK8RvdSZi7HKsyYUft074+omgPyzuoBhJ6oOfmoDSo=\",\"GFOCUxVnGTv/wTfOChfx8IfaGRurNq9TlUWmkptEaXw=\",\"L4NfBopQCjPmtEs6SS2PCSKMLWYPhFWBI+YpLpP5BrI=\",\"FZq+5lj65t2vcym192qB5xPf/3HEOPfmeKW2Q2UoWUk=\",\"LOrM/gh05TTrOahrBmyptA4leT31E6LhqO3u6DmEiew=\",\"A+UlG3IdLNZ6RrTnvJABXDahE0qOxdJRlNXHwwnAsCk=\",\"EBjIsKPeHFKGgFA/+jke10+xuJ49wJsUD3YlJJ8GEkk=\",\"LAAV7K0YM/mwBNkCZE/uv94qJ+UK7p2jFOTnSAoeucA=\",\"JP63EE0WGjKM3y3HwSVCKHlXjM6JP8z4DluyZb++Lmw=\",\"KUTZhpf33ex45RZcuu4rvwzqY1mYGhPCe70XpgcJt8M=\",\"HrbpPL/QNbxPeb1tMuJcBb4oIWYWZVkI3TlPjkvrDBc=\",\"FSdMQhWzSYzs5QflqceMcoopJ64kty1YDKyiWIUVjAE=\",\"JEQ52HkU6nr2RHHAR9Gvs+8+TT60Gvxf9FUeNOCy4Ds=\",\"B8YNbZjIXv6nmcLTWa69HPhlAVcS+Z9vUHh3a0RFWJk=\",\"C0RI2FxYMhiG3lytAlCMsHnkda0GpWkWEISOUwz8q9w=\",\"LThfcedC/DaYxojfffKsDNBr8e2k23QkbVs+8jTWZgM=\",\"DDx6pyWBzwOTLqQNpkvwRUsmymwCsleY6qo+4Ik/FHk=\",\"L0CR2v15G7PPcInI5xSjS7wvX6sERBaHChEQvWjaMm4=\",\"CakgMVL3x6MiU188JEXcoL6GId+PDJvGOo42VBRbI4g=\",\"DJlEYS3Q+OGE0H7FpEyiV9Z1FKya4V5PW+SbbANWkVo=\",\"BGXIR8fRGb3v6Ja/RSx3944STuC7JFJw0h7SvXnhFyE=\",\"FyWFb1ETnekJftOEKkFPjo9j6mueZBTl6yIIQlg69bs=\",\"J2wbEJ+IzINO2MLmhnKlkiUMbL/qX5vd0INMVWP5qIY=\",\"K69UheGe28V3LgSibeookxdClm/fOQEbHBbygy/749c=\",\"IEKx4NSpYrlcXbzARPoOxToA6K1nem3Dnja0GgFusDY=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"Hrh+2Dg5EDyHQ045yRA5lEfZxjE01EIzX7PiJvhLR7I=\",\"CAoia4xbeuaBBYGM5weyRBoNpwhg13G7TVhYXqGmKGY=\",\"GwOMjVn6NuHf1Myov/fTi2Fhv/Af+q2elePIWRF0Uls=\",\"KunJJHD49NXvm5bZwcI1xGtconXU4I3R0ZOr7lgddjs=\",\"IftX2vm0zfgo103ncjmFs6GwIm2Q9WPvHLwNkjL+NCk=\",\"Ir/rpaWjbNUV+jG52lHvJqFa1gULtChT9Z/9oCd6mcQ=\",\"IPPfiIgwrolGRtEWYgSvBdmBdhPHGc2nRcCaoUFZDAI=\",\"BjsjVaza0aADKi8sei6l8wfjwDIdJhydf1+hCTQRnyg=\",\"Ft5gQ39GCYgrnq+mrG3tlVuCJbCYX8TjmD6mQK3VAow=\",\"AquEmhDSRUBJi6TH7nr6xOzbgeAIP7gu9WuR0CXjN1Y=\",\"JdYKJ0iRFsEtP7ivUsh39WkdV61kWUb8TdpT2xhuLFA=\",\"GxRC3DUa7ceRexAIu9xKBdkuRjnn868bf4we/Ju8ecg=\",\"JQJTfQNSPWTqzcTaJAoD9pgaicPzNS7VG5UjHRKfbvo=\",\"G3hgRLFTEvBPBX/LMveZ8BdiN6nlxwvzCamGCrkPxyQ=\",\"E6oesN3gnjgW6D75AntbEvyymPRp2FI7WI1yj2+8yEE=\",\"AV1y6HI+B3v7zW/Jg6R9x7WAaB8MTEIlxYARuuhPjho=\",\"E2lHFRLEInMw+gwlKZVw2wDi22JVT9quMVmYhQRwPPQ=\",\"AbcUIImhZfxtBTCQ9OJ5f369j68ghhYEs8o5/6eNj7Y=\",\"BlAoxJEhq0u23UtwztqAZeVGUhqAGzaQ2DZgLfXAek4=\",\"CwyTpMpgvWeCRAo+1+1hDkrhHbttc8vUO6uA5VwO8GI=\",\"BTj+V4rIhxDW3SmlkWqnOcmp/88PaSsfA9DokKJqeuc=\",\"Kq8IU5ClaCQl3gLZ/sprFxPQFtFoIEKpKD9wt3Prg4g=\",\"EtOjuBTBu+91TdI3aYynY4Z7Rk6agdm7AxzMkVdIeLI=\",\"JPtpmy1Te9N1pTpM/KglaaD3vzQX4dBcLwqZbF6F7e0=\",\"Ed/56cM/N4bFzO7JGWAclalWmgFQKEP31OoKcHgRGrM=\",\"Jh5AewzQtD9bnlwinhNyUAcH20Wspl08KEIaNYM2fks=\",\"I1G/AyexQ7IJTjNjN8FW79bepGG4wtI7qssYq9q3RUs=\",\"HM/4katyN5i03mRrta1tPj2llwp5pPJd7iWu593FQ9k=\",\"BHbksA76AZyXvTz1Rf56ZwqsBOvEGMSTeCfKNo7Ty8I=\",\"DB5pe45p2ebNFaW34tRGA44RoGJQ9pPiGn702e4R5Tw=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"GgnSt+ZGUh3VNdBsuMTeChtCkQ6gZu3CZPWTgOJs/+k=\",\"AXzZmhA6StwXJbVF75izy0WyvHYcrw7KUQiRNWwPa2s=\",\"Brm97tksSVqEqCjdU5voMnUpoFETG+oaGYvYSQGKWos=\",\"CGgAEpk6B5FOaOHfWdFPE/Ewy4wQmYM/wNLS0R+zEdM=\",\"JHt5r90KmfqA6CBFv4FHTvBdGRdLFd37al6u59mKZqc=\",\"6s6YmipkODnoapbl+KHpnoaLob7OxBce05x70qrP/A==\",\"FTf6HrReC43KgUdcNQ62RwH9FLrLCilIYJyfobnVf6w=\",\"CevEJu/+ZvzVu/9R4KofYDhdvAx/6w2cb0/gY4RFbqA=\",\"GEZ75dCk5UqrBVzH28T4dtVgl8XuxbJ/mhUmQFmw7qc=\",\"Lc3ACZMH9qVMBf5PgklOBhHEkJ6+ZkNpf0Ssky9TOTQ=\",\"A/s9aZDY6NpAWhEvwR+cqlZyOi9gk+GHCoZsIdLzQzs=\",\"B5A9/xylt4zW6V4ShPeocALwCoHWEvgoQrsq+C+4UKs=\",\"HMsXKnsPETm8gRjbumvajvMhy98VOk24JrCK0kUMuKQ=\",\"Ixy6s1qKDp3JmdujaEUctB10VvLMBIGhSip9cvIBZj8=\",\"EYXfifikCsYJjYmDNNB0els9AoXUHiA444cSzSYIHbo=\",\"L6Bk0oG+FWz5fdqRQcasINDhnYVHRHXuNZ4Qm8JaVnA=\",\"CiEU7LS7iCk+uiQbwPxKOzddpqujDMp26EgQFUoJMEQ=\",\"K9ViHUbS3LQc2PiiJiDvYl1vzuXW1QclDRV7OeRpJAs=\",\"FYRRflRUEexshJuC4P6M/nDNcVxaZX14/k36ks9pDWQ=\",\"BhK9GlMpyR9sb2wxgJlR4UPEtez5fi/4xrAkY/4prm4=\",\"JtPTSO50y+J+WkdF5zgVGz9h+6rDyjNLHG8O4Yp2MpQ=\",\"DWnAl/8TutFvBIJvy8keuZIhQQ/av7BqBMadr10NRq4=\",\"Gd+Fq7YDS4aiN/PCoYSYU+6nDaUi9yURG9eIMacPKbI=\",\"C2eUCnJwGsJNgeBWx61z49+tRfbBFHaT6OVq6HWcdfE=\",\"LQZzNP9Mq4kqJMtAhGtZEXasR0Udu83pysHedmv9Il4=\",\"JQ6L9tk54ilPZyPIsuABgJkjtxV7opfP4Qe4Igy/wAY=\",\"EGJl9ZpxPx3mBfBxRhzHdlxuss4St0lMAh4HteCwoSE=\",\"JoWRkyco/6RFq1JtnLYPah3mwQ4kTP9jO6Wbm9uVfgQ=\",\"KKJkzz7ustgdTBUy5j40SWs1ANqeYvyegHC9WWfFufU=\",\"Liieydn7dHxXeJjyEENzpJrcAKUZdLj7HGN5PyJBTy0=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"KSzcT6yUGWbz8v3NC2TO1evxdmJG4crEWrxAQjV12cA=\",\"CPkWa4hqZOJL1cufUyeULNZq7+iQS6s+po8ck9py/zA=\",\"HZNGtVz9vOYkcWdKSMkxc/IiA5ylQJRt+MrY8a3Eq7w=\",\"KERFr1DJdTMKHUhle3ZM97Gci12M/XK9jNGu2BJFiAQ=\",\"Dlyu/YlduuSsbZpQup2h/M8umRgoAeUN7xP2VsxS6CM=\",\"LFSeikzTy5ySXc9K8K85zF1BmVfoWhc0++DNSVtOYjk=\",\"L2kcKJDteuICRN0S7p+slMvKzqQrvTI0hBRrg77vOWQ=\",\"AYnBiHTpOXq8KBZDv6dHc54qtPUcLOHGTY4Pbg9l8GU=\",\"LrZwWgLH2pgGG3ThDKWU2fqF8uinaZExPScgJo9lIj0=\",\"C4x7BzyRkioKJawk3nxXgfW5XB0pZ2sJdAk4DG5PDSo=\",\"KyVMHJiTgTFfGwkcaFhzN3wF0dQOPSDUH1ZQZ1bOXOM=\",\"H55owqRLmiBqXRxCjCdgQDHekVcJJqIxkDKXgd2hTew=\",\"EH6CMx0aHbOqgUwOOFTO7w2wJwyEKUXgmzUsxp6Vn9s=\",\"F/yxhnxS1Q7/BKE3oYPT8NrpS1ZWyIGLT+Akt6ND39o=\",\"Jj+AIRGq3MmcwSnQUfkKzecCeIAfTcsXgbdEwgi2qlI=\",\"An7PjsI42AiboTk+i6zIVsm0u1VN+jfImm1rywpZVMk=\",\"Kqw7+iDmSgwAElEmEbVGCQhhbscoIZerc0UXLa9w9CE=\",\"+CK/kKbWx+BGr1BfpjxYFS+IDbpVzvxjkxPRBKmUNQ==\",\"HUgvdPc1LMOx4H8MTgykaFQX/0aFdLdpT2/36bQ4Mjs=\",\"Ce+z/V8q+V4SacpuQL/eytjtECl7ImHnonz6B2vag0g=\",\"DXC4VURYXXUgvEgEjnFtS6zIo1fD79c14QN2w6aOWPc=\",\"KpbC0sV/9/+KH+6Q1PMKQnxO5fqtG8DHZA3SYo174zc=\",\"BGcBT9dch9pLwIVCFQI33JSNpWaVbAOnc0+Ko9TOKgs=\",\"CybS+TOwtSiGfolvMOcEWvH0ltc6E+WPoUVvSq4akRw=\",\"Al1o5b75Qg9kxCpNRK7nGyFq2QVNlo2rcLxe/3dVbJ8=\",\"AXfwJ7DKtXKRRjylbjvlaf1Vediev1/VKHQvEjcYp58=\",\"LFEypEvoPYiHnqEUAW5nCSvZZqm6A2S6UB/AW2OIdJM=\",\"FL+NLkP30TOL2TxDUABwd/qewC7I5k4DlQ0X76GHEag=\",\"AwlBSqc3A63cl1YbvOzuRdJfGbRZHcbXcvz+CAGoXzA=\",\"BA6kFYfUpAuTVXGIDcrfReci5Cc/Dysy3aU+U+cKeoc=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"ELDTfKJukMbBOaAf8XhhxG6/tkbzSPpUOkT6kz3Gx+8=\",\"F12lGD+XTpYG631+Is0Sro4n2+y5vTxMErP27g91GPA=\",\"DtgnOizqg3kwosCaP3skGIz0S307L+QbE+A7zya5Jck=\",\"EhfIh1MuQlwVAvn6SW3Hkqy84Mx5xmGxbkw1AJ59hKY=\",\"GQN1Lxx5jAlcJO5xTRuBJKS0sU0u4v9J/3Fp3bzVtLE=\",\"KANUffiPq9ZpURc4/7F8/4kZwjPAU+KxDQG7OYYp3q8=\",\"BO5ezyuSUkajS/6q/JI5+aX3J3+x45ExkAtDK6rabf0=\",\"BMN7M1VcNiBQolAh2W8ADRodvBXJllslNrxO9ZtS/o8=\",\"GmhTBpnfR5o5/XHVaZiY+RxEC2HXE41MlaNT7Cpg8KQ=\",\"BiSS3pNizu8F5mOy4Uz8EGVBXE2r3KDUtJtgIiirmuo=\",\"D7XUtQDs0h5AJJas0MOaDOaqk3Qd2EZig4cyQASxXcc=\",\"F0e1W3BcmNvnw4kD/KUmCjE/sa53mEZx9sL9WUv92v0=\",\"LVqVPGXiHSd0WdasFzMAVVNryFxJIF5udc2jpY+vmyw=\",\"EiRrIvGd5CC3doWMF997V9PcudxIo0FnubkqQp/XpAM=\",\"ETPTIkZp+ZKFhjK1SpovPK6ahpeWhLymIdIfuKeoTe4=\",\"BCx/9BEscvluKpCjfQuXVak11DraMX3kkEfkW6zpIU8=\",\"IJSCVtKILXh72Xzrcaj5QTyihzgt6ta4DshRGg+CCpQ=\",\"GjYksL1DqIrHx95GDiRspI/3GlojCYzgpxPtTNO0K3s=\",\"HfDczFOd5UO7HML1oHR8Gh05OYt+XSVCrX3ziMuaLBs=\",\"Ah39XticJV4cWECT+Y2FT4HPxY+SZ0/g/o38qNfBxwo=\",\"IWGsNt1Q00rX/44q9Ju+EIjTMYZ446jY4OCz9DDVXSo=\",\"HtPMOQI2EDWVk78+SaWN++me4a+zOstVO/CAEq6sF0c=\",\"JMjYlE3hEnCN9Xso/QEtV2ho2ZjthydvcZL4/oIET7w=\",\"GD+3uro9EukFu3GE72kZgsHdSJhEwG6fegSHk8RqO54=\",\"BnwIPaFCjOUhlRukHM74NNmctB6LkqTEzHzo3eLeStw=\",\"GhipwcRelaVBrI37ls8ry1+Tzu3QE1vek0SBOztXYqo=\",\"Dd96wIeNtfTzhO0C1fyQrfchXkw7xX039MJ85DeduaQ=\",\"Ktq1YrT3mRlI2c675TqCH6CMlrkQCxepLSreQDL0kMU=\",\"HzbNbmaDJkaGHRpEN4+Bd3zuZu57Zv+kRm6fmCfT760=\",\"FsUUvGI1IKPGPXJP+fjiEo3jpOk+wmzWBZbSt0z5DfM=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"J2I15s1rStBzQzQUo5+HLEKuR9XK/2oP0rEdsiZifRM=\",\"KI/Db+Djm/f43rdNXtzF1qwLDhP3FakRppYhLIJEzzA=\",\"H253vK8uEBYNU+gapL0fuWIIQc183PVibNE0dxTxeQ8=\",\"LFDFE8zb5g3Z0UJi22AdCFvrUp+fmAnnNLEs7mOtYLI=\",\"EEipMrh89Dz2G5/n1eeCSpwL4tPYppJ4GaHbzk3nWUs=\",\"JYgC8BYgeT4riGupl4chiC5u3ilasFrUkt/LVgVWd9Q=\",\"H97+I/cfnE5LWie7jF756X+KJyNh+Oa6kzNNUpKrHE8=\",\"H0ZZL21Md0Z0ZqSDWMXBleEtskcHD2hLswyvMy4FCxU=\",\"GgYowGF+2UNARQ6LIS0Zu22A4MM2oMc+vUiXGNAkVRI=\",\"A2L+x+UKnr9cvBu9BjIKRIOfPhokxtzsLOqY3C7YlYo=\",\"FDTaQhZUi4EcJA8om2NMcL0CF8LHjTUVmBoI8LQiilY=\",\"KlopjuM4hmpRq3M81dkSrvymCau5JMO5EzT/MZaNsag=\",\"L+Nd5PgjnLcBlXmUy2ePp2tFrCymLRVavGvQBj2Ed/g=\",\"DoGHExO1kmS+FbTSRGXM36Ug8arl40di5IgUwVHq4g8=\",\"AdzPqEZjvRaP6tDWSKcCTMf0XeKZoVUsZcmu5pgAoh0=\",\"Ddy5XtTM1hVAUtA5m7s+7TVNE0iibn4+O3Z/iIt/wcE=\",\"C9te0E0TMFvHq9yaH3KjzTwyWo1dCzez9rwy9b8rww4=\",\"GjeRpdSA9YbiJfajQZ2SvHyT08LJQeIBq6LbDbnxXXM=\",\"CrJU2qXMqkfj6n3fiFoy6BktKA/4uWJUA28iVi4ygK8=\",\"ENCEsYBYXukADRU393tNbTvvujslhe2yhvnjgiV6y9I=\",\"DpnUSo17NjOkgQnoQ3qGYTm1Rt3DpDkRQT7fnAq+2VE=\",\"Grs2SE8wTijStAbt1dQjL1IkaiZCu4fl6ASWOaWn5I4=\",\"HyTIlurc0NX2sQZ4Rch8rjiXpFTmCT/AYrbp+p3DJ9s=\",\"H4xhMnLLLgCFw94Y0sAGNCK9Oj97NOvTlGKlT5ZpDdk=\",\"A/hgCBGReiHmiTsxR7damHp61EdDetJPpHKzAWEp+Go=\",\"ISaPWXuEdS21G+CKOmoqixsihNiwRCtUnuWq7jlcAgs=\",\"Ao0++D6zVafTBsq6M8cOboaQC6FTrWH2uLQc5J2q9Ss=\",\"Al0gDoO3KIUwCGtpAyKlMOyLUCUF8wgKekbm6CKskNI=\",\"Kn9rKuvjFCsmYtRzo1j8G7nYFkmLPC7f/4aGbirAAII=\",\"KZr6DQEh/CPG1C+xJ+qxTy3Y7LHuDAQ3a5xzLpelu3E=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"KS5d6010l05WAeBf3SoBpXzPzhli4/Ev/Efs9izM3dU=\",\"C3/gdieyuGueVgxcYFj2KiO5y0Fq9tdJMZpfCnMem5k=\",\"G+BGJcSq4gAOnhOnlZEz6Gt4iL4N6cS+2EMVeNh92/Y=\",\"DWshsQ2vP1idcfuJxycnjAzOktsNSwWN2zsj43n6XHs=\",\"II8U3oKnzfW48tLC13/pY3SIR1dNyPFoxTsdxoZ02u0=\",\"JhsyAqEKkvj4GPXJt2jYkbP+064DsYnlp0O2ovYxIQo=\",\"IdokuZ/BeQd6n47Njz7Ho6bU6MYsNyH1o/ShL+0HTZE=\",\"D4ITVwZYUalLb8nY1nlnmgXKnKgYOceGYDqY2SzTvnI=\",\"FGzy3e33BFECMGKFoDIqJrmzEtiuDVY44SL6QiIb0gM=\",\"H1WVFZ1L90xwRm9aXfJ/h4cn8DfGghvQtKFrmh+eIuE=\",\"LlVauB1K9QcRoil0WmXcl07LvxbYVXZ9Pulz8mHGlYs=\",\"CdiOuP7cbfytSraM6E4b8ylyXomtsJSqxaJeNvj6Ekg=\",\"Bb7K3baGZkdHryG/Wl5N3LAwogMUsSPFjcoFXMj0cgA=\",\"K1EzsytXg5P/NC5LoBabYK1y0Qgv2pfEtpZhDc8GvFA=\",\"IJ9LuYarsmccmsVVzigpSN0+wEnmeBLprdkPPYPWI0Y=\",\"KYbhkBvsNxvPPyv63MNAA6kBzzxsj85ahnFb+nDdBdE=\",\"NvIT9WDNoQKLyn2lNLi86/hM57Syddhz3hSwP7uOzA==\",\"Ig0bjNsRvnXRGyeTKrcCalQya1s0CrBl4eTjXSY5hnc=\",\"H81zcFdcytxgQpyWL8/Y9LPslhTAhdE4OpQ9fkh8Tjc=\",\"HEnqXlq0Y1vgzAfw1AqPa/aGIr7V2vXDquKiAB0ZzOQ=\",\"LDOjbFSZmqouVO/nAEhlT02PqL9wAajJLYbM4gd8jyY=\",\"DnDnKjo9LiZ6K2r1391VolQ1xvWBpG/1/UYfCNDp990=\",\"BswHKPSZMQfRrRzDwIPX8jhH3zA94g2SteyQ/4eF6NE=\",\"FK21Ap7s1OZbxYr4RAhpfIWR/F9vdLbLgzXndmqT7Rs=\",\"BV2ZQ+E40kz3LUABNKAg441P+rn1L4VhCw5eZ4tu9H8=\",\"JGWeX9W51CZCIhA5tATAlAx6Vg2sDngMWe8Z33+7ETQ=\",\"Dl2f+yl3XPHWP8VBEPHjhP9jo1MzHCk1vAYesLzve/Q=\",\"Ix8zlMWThbHov9Vwn9ldAOWAzfPjf4qUDEIT0D5vxjY=\",\"HXTYdqpRh/UYGIvs6NP0UQrXxzOAw2KtglLmxhxMvog=\",\"Ioc+qi/A8dJNg61OjAkPJ2zuSJGZZTBP/+I3pcVVoM4=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"HP3nsAVwrlbWELDs9GnG1UF9rpZWqbNqNcWnLdOPFKQ=\",\"GlERywqWGuIW9aHYOsjaONaRDC90R178HUmo5JTRYeU=\",\"DLGEbmZk2RndzZXHg1e/ICm3UN088C9HMbSXW0ysZPg=\",\"LPfWY/ktf7nCDb1JII/xe2agI8Rg7vWDehJL2J4+YHw=\",\"ID/y3kEIynVntSpFyjEAsYwwFa+6oBuVEBCkb+ezotY=\",\"AqvMQpFJopxAFZWVZ6Out37HgYR91izilaTMlIf1jS4=\",\"FyAysyLCYLZrVtEtnycye7FIWb5cwCON/LnR86inxCQ=\",\"Cg6HiVJ00Rk0NulD3kfY7gkJyZj6CKcUo3VlaHL8VwI=\",\"Ie7oEAS1Y5JMAInRYqKgtQR61gkQpZMbolEDNklnvUE=\",\"GSceT557in9UBBypP6UAXXbllgvG09wTLh3msuoHIyk=\",\"BC3BopvVgv0Ix4HvwOZ1Bq+s7Ptpl6yHGyA8v3HfcSA=\",\"BrjQiwehtYVYqd1VWWpnzXKWBRTbVVoMIca6Kfvh1WM=\",\"ARbIAPxnTC1pCcHlVWhlDKJDnOP8GsOoHvWtj+Lp7zA=\",\"IbnvgNGWea9XH7GF5sDqp4C7/zgui7fti700LECurwQ=\",\"Gu1b89O/aPLsMqr0PgtD44AkTyVmYlSyOgMhozpqWEA=\",\"J2rk6E80RqcHEDVQgFxSwFEMsMLiU+wy8vy6JV6Q7js=\",\"Bnfibs2yjyCn1WVRD3OyTANrtu4GNgEOa9JlShXOSao=\",\"FEtnnf5P32StzDPaeKN3WRQhxIbfGsEkf4lidi7sY1M=\",\"Kz5HQz4BiTuhQWupOqpOOd6O6T9nguGx+dcJcB0myus=\",\"IQB62nqM+FhnABfwK29FKrvuos/wW6Y1EaMkCL+MVd4=\",\"CZ6xHBCcp0/VidBkc5L/YFahAK4GWeYNDDS52j8nNl0=\",\"JW9Erg3K6+cWqpVpuTcwU7pvoCJpO9hlAXoJPgKSMeg=\",\"C0MELRdbEIoOnFU82ZpNKIuhvQq0ss/8BJvWPulJvCw=\",\"KCBlHQmSIoGkBQXXVcCVHbwVl32POsnJuuOSkEQDmhk=\",\"B8deela5TElC2JPBKw6Lo9fKSeJDX8r+Dsn99FILufg=\",\"JAcUDK1qbB1Ys+i7bwg7PR7EESKHY9xM7O+VxW75+AE=\",\"GfZxPfM5nMR2SLSX+AcH4RyWL2lNlIahiEIU1jseJCM=\",\"EmiAg2sxsq1NOUGmXusSAVKClZiIOCu6+2Yv/LFGzck=\",\"AQ9IuLXTWGAHqdo3QwHlJGq2aAlIUEUfYBMW+IkHO2Y=\",\"KzXaOF+drr/sYwETdIrc2+xTHoAyPgBifvqqVbm56Xc=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"BBPCqrveONlL8bugW2gPX761JhGOdd93QOA8ZJf8KpM=\",\"H1oanRESabj8nEvylfld8AaKF8ElRBYRMtPQbMbCjhc=\",\"IS0Hton3ermxHZxYuO7fvISg86XD0BHENVjQQJazxZU=\",\"B8aJrrhCa+zy046OUBqu6JfGqa7l5Hm0C/G4SlD+4yQ=\",\"AgrVB9LmvYyqi3uHnYoPIrA3/HeEmUV2ogU+FzuHmfY=\",\"Kae10d80AkYmvNTQFYbhrFrd/Aborn4g5IVnBdaSHn0=\",\"HLtfbCq0/h+16Btb8sWDt/D2o+I/UYmQceb+2jBhAIQ=\",\"Ad3+N5S/rM/xZt30/tdstc51YGsBauqBpN7NKV/Lc9Y=\",\"K0kpi9OkQVGYvS9ETeiaGtNZqpCxTK930a+yHOelCzA=\",\"LBCyswG+V1BMhokFSsMB8HHmqm2fYLnEKPzgmmCsrlo=\",\"JnLhwQPXo/i08lOJ1puITZv5l9xMq6Y8FfSuc/fblqM=\",\"BBStoMRXb1J5lS4RjkQkgKq8RhB8/u2p74NEEEg9dxY=\",\"HCBJIJX1wJWZ8Moy599pvnckNWKA95n74HSymHDmdwA=\",\"A6yW6OPqdAyOgIMJ6l3MNdYuvl1ytmwjnVvQe+lSPOk=\",\"GY9Fp/z0EOuBoS4bMJ8PlavGYI6EfFpo48NSq/crxGk=\",\"H0bWrON5g8wfLlMClv7xFCsbB0wOtQUh3oYxWe3DvX0=\",\"CV0O1nNbD+EB47fuBYbwYDVVE8RD3fSQca2Q3B0F5Nk=\",\"C5EqvRJhuCX55LP7oA+CUL76v87rAM610AYrceme/is=\",\"L7NMDsBIbxOcTWxnTaWT4qkt2ItFVqwFFRdUBQv3hw4=\",\"DT66Haog62GM4mW7HalmmX9MExs/8t2vwMcfwDWhL1E=\",\"I2QBgnN1XqrCnqrn4CHcDuHofcYDZWsy/TxnG3B2yEw=\",\"HwX51VCDQ65Fl9DwFQKhZgqOWXWkzPW4kVcSxOSngsQ=\",\"EpSYqPs1QPYQEj8xh/rsP70PSel42rN4Hl+wsRff9ng=\",\"IZ4IL2su688d53gILoR4gbkyf5Bvm44n0z6f8MENhII=\",\"FbZWjSpw/a4cyLCtAddG/y/suhRPUEJhmVuMLxFngOs=\",\"AW2jreaNd19kFGXfoUaJmZBvYZJuc9PgjadQm0p4iI0=\",\"AeCJny+20jhTFmVrXo9khnuD3SgAYzU4oZX2hgp1ACI=\",\"DVxJoM/Jrq+q1kFXh7jPp7/mLFabfWlVL0wTixLbJxA=\",\"BY6XjGwJKTkpTR5yOql8LmAApcoYdlOw3EhYzqyNHVY=\",\"GIpxpS+RTsS/8Et0KQe4TPbhxX6FWqAJdZX4bKp8sjs=\",\"K2/XvDo7WVwgbEParHUrdloSJVw3q1GuGDkzc3qLgJk=\",\"Lzp1ZqEM+NPqmnlMSt/y9VeAj8Q7B+dvpMYUMaIGNFM=\",\"CajjNJ7P0uhxtFTysukx1B3/mpb8yqftDLYDYe3UrEg=\",\"BqgbMO8iK6Cy+/FBZdRsF1mJ0yXK7a9YgBTRJudYWpY=\",\"J8hZrLUAReh+1LcKqaVhrPX7vI0KUhX78MXUkGPxIr4=\",\"DnhDgvTe/pf7GxBTZR/qpQArnRwstSKgzPlJ1Z7lluE=\",\"F56EvQa9YI0djOxyxNGCwTvH1lD/UQzysfTlhOskhy4=\",\"DyPRifV7dK4xqwS3bQzD9nBjrh/xepZI3lnMKB9U/Rw=\",\"AfDVUJieos6iYQi95HMpaCQ0D9JTGissIKwUMnsAnWI=\",\"FKNG1iLEZROl2jd/c+24A6cF7hj55Eff7YjVraXt5Co=\",\"CnHV536wgchXDSYBRmv76ifxQ/GyxyajQwNPAVyB7Oc=\",\"EfvRwDt6o6n1xgfaHEFk+SgFXPbioSclBt8kIjDplF4=\",\"C13L/yfWaFCbuordBjLWXuXdypusFGZIxsryvQnZ5G4=\",\"DKB+9uuqX/0eb3SMrHGS1kcLFwNVqFF+tpdyTMHDKJw=\",\"Dg3HEJAZgoi//6edIjfBYu2d+1NUxTLy1jae1z32N0s=\",\"GRCT8WTdQSDAarZtuuytilKEqWq2B6/hsK0QBIrIaSA=\",\"ER0EwIP1Gm/fh0EqU39mAQdtYfQ1CU6haUbvv6SJPpc=\",\"ATPFkT8l/16qhg0DGPaktDSf0i8tU1MOXHhbcJiKOog=\",\"CIdfR9b1GMjC31Gnhr8iB6reKEBnIo9EDn0DB1IKVs8=\",\"C6n0ShB6gcsj+6ZvK8NBUnKPX1ymhAZkmn7+R8lHPyE=\",\"BUKDKrI7bHpLVHoQZgNxUqJELpmMU4G6l2mEExU7pvE=\",\"C6H3ZDZzYJUpQsy27fBRyPk3kGqBZkHg0eni7SaQb6g=\",\"LgYR+kyjmF17+vUS8hpAgRQfTtDcSwIoNNPLbP2Lf/w=\",\"Dm8jwO9vFZ3saDQah4MPuGS2wIy5VKFKJQCHZpeJf7c=\",\"AaeipKCNh+dfcgMCvq18ohyPfC7S3rrO2bixstpGHLw=\",\"HYAF30jIVlmH27RCtILK5b/BDuSG7MW2cM6GE0WXnR0=\",\"KBIiVII/iSast+mPVX55YoLl4ScWGIWOdtSdCIbaFvM=\",\"JBTUrvx7SFffaBMo5opYLSOy3P/Veajmru1sYQUOBc0=\",\"L3EMctbaGcfYfL/9VWZbRysCZdE+IyapozuW6V03RrY=\",\"LihUQdC+2Qu0HWSAg2hQ5NdtqCEbBKI228fDwwMgwA4=\",\"KWSQGitC6a6hplk2Yq654SB3oodDS9pOwgEuNqGdyVw=\"],[\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"LL0mXOPlvsywm7MYnKCIMs1P4QLzn57iv+hRqAOM44M=\",\"HgIX8T5/ISBT4t6WanrX+95qfUczW7WLKxSKxK17jMA=\",\"D4hcQAjSpMKZKzM38cDrOyG8VWnn62rt4RZCDTP5geU=\",\"LpxZSyAj7mKMiPeozQAuBv3coToBSSLqT9SJ1/ANDMg=\",\"IXr9BcLlW4VnXLOfCqSGoRaRVXyp7ht+5C8GlSva4Fg=\",\"AfjwZ8FgL1S6V2eV4WvCacxPNEFvphmSASbrFtqYeMU=\",\"JfNjPJiJcUlMbDeg3ktzeojNW+nBTfxm/8xMUgDD1vw=\",\"GM3IsddUPvzN663Ua26QlhF3WKPixji9q3dn50+IdHw=\",\"HNi+BPGscqC32q74OjbmiARqQbfUuoOqXvOjpN6OWKU=\",\"GjH2m9dsZwoxgzNc+XdG9mdmmFFEZ98TGUAH6vjti4w=\",\"KrLD01aY7ANXRsQTHI1M2uO+d+rFbnCLb7apgyr7OGk=\",\"Ihe4ysPhSTQALiRoPLb7ltorKC0SRH+5d4lnDnFrO7k=\",\"Jtjswzz1JhCybVUUXymOWjh8G0WH1EvImv0sqBohy3A=\",\"GbX+9NlFbpP+B5nBtWji9t6vQwZ+EZ7onM57GwB06Kc=\",\"Lw7jF9Wh1sbWyLAfEA6vU4m//iaRMa+e/zb3Gzy39Lo=\",\"EAmkOmoA21Ky0OMlMSIgc4yZa3lBS3Cy0E9hv4R1dZs=\",\"KIHSQa0xbqWwS7BchkhJIsC2xvARc6HoSvg9i2m9I9I=\",\"CjqoHGEaV/UJsflxNS1oD3WgM2HnSlwSWUmHKHlyw5s=\",\"C/HrAaubRmOP6dChNRBe1lhIvdmSm5PTc2kkCm5awnY=\",\"Fmb60SS2TLGx+8wG7mGA4tPZi9/1NOoNT/+tJBOxWSU=\",\"EwBpR+He+8ulHs4YrdY30Iw4uXMjLsxotrL3/MDkD34=\",\"IM7y/c3L9YFSfV/dlELX2A6MEixgq6dKNJ4xgRmpsHc=\",\"KTCKvLuMPXGBJBlhHm4/MLZLizZwV55ffmCExX+BgNw=\",\"IKZRvY7/iYn3BiX34dsNoZtAjWM4XmP4sfBm0MORLg4=\",\"L+h3UAN1mvP0HC+SPwtoPCfPib+mCexvwmcUuP18Xqc=\",\"Im03/dkCNWOk1uKju80jE32Unzay2bG426+8ZE/yNx0=\",\"LxHq81MSW1txEKdf3jhMFDZcLiy7EUD4tSAgQRjOaJc=\",\"B8um0U8J+i7uwiQu5AH+D6CJwovHfwLwqpClZMELTik=\",\"B1fTm4YYl/TKhjcTRSq7nmwU+HNkF/zoNZxbTaxb4LI=\",\"BYmS9C/2KuCLPaynmlrIPSWCcoAtxlVqp1ezkKsi1sw=\",\"H6RwzGdkchPfUfxjb85rbmneOmZQRGlva9qTFvrbWh8=\",\"EQSSMNpijgGyoRrxshQyfFgJK94NlJ6MCKDJKbOaE8g=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"KeL6YrsRKCv/I83fvUSi2fypuwygmfNMYxU9MiV+j3Y=\",\"LsWERbE/ThsU1HqqjTwBSJ6Bg43Pao+y55rhxCDbrAo=\",\"KibYjaktszih3j1kqp94OJxFytJNrup0/KXFchzwsHk=\",\"JSQElagxsRKFaCV+8MQ4oidXYyg1HvUsw/ajYa0JdmY=\",\"EDVrhsa1tG/QkT/mMv73vLlQcAXfb+Rr6QiflgCPzrE=\",\"I5Z1OIM8m/LzojhyUQieaMgaRwUfjDFUtYY/54pv9vY=\",\"A9z5HSYI+UeDNDxsHJzSSEerLNZ3j1aEGFJ75ArCPok=\",\"EYUZWFeVm5ZRBNJChdL4M2VBLOMaarz8k210r5+4+hM=\",\"FO8eF9aOXLzDqQ6tQrjEOPtWtfu5UNiIPC0WYPstHe0=\",\"EXUQDG7S3faLpVK09AwnBH/gLN0rUzo7mXVFQ5kpQgU=\",\"IwFg9TjjWFz/S9PPe0/jM9Kyo1c4+xNa5trcB1+SraU=\",\"CIxOT8GyEnCpM6k39zm7x7bn6z4xbKGz6+VyfjgXQus=\",\"Dj40XevfXPvXu5pMtdNticIHE+QzI9Q0F5VEiqu9dqM=\",\"Gk7YfIA3rx0CVji95rl0yqJ2Zxq7rwIQzH6dsv3Jo0U=\",\"Ee1IRnZk3wBUjzz8cO7UA59qWegm5z3EuVmQwDoxOCk=\",\"GO0LzEGqNMVVan698nzPGlDzJWF5MFMhWgPZMcT3LrA=\",\"LnPl/znlggWhbgE8zQ3ZNb6/BlBc3NZQk1hABi6LH4o=\",\"D2a8c+ioewsChyDcQgU0Uo0v5WCbyz1gBQemwZ0gzVk=\",\"C8CVQFq8ASJHvEpyd89Z4l45g0vVg5VCyrlZrVNKI/E=\",\"H8OE/bieJ02tMw7vncUYVcEf2tsLmwUvoiDrPjjWElQ=\",\"KAWibSRkRTbaX36fUHFEMYml8QK5JhMJiowj2+iHzuA=\",\"Ki6rCCB5xg4ku12+NUm/Y5BwjozNA0oqlKcaqcQUz6E=\",\"BaqHvE/pDNSKWfz6giJs91nOj2D4wgjPljKij/e2gO0=\",\"IDiu/YGnPvCbfQ/UZtKzyK7ZmtnOVZ6yqoDX4GmWkJ8=\",\"D6+Xx7vemeiFPGevniGHuO43COSNo0RrPqw7MlKgV9Q=\",\"Bd1XC7Hg/rXm8Tudvq5in2860Go2XZ68vSwSDG923uo=\",\"EkVIeWuJBcrzhqYbyGjRRnJRyymUj/HzrkhHxySrl90=\",\"DfncJ4pl0G+MR33Li1YsJi3Lf5yk2HUHCzbpwuf88nc=\",\"ByXg6H22HmImn1bSWVX8/qZf04gjILoxh2Eee8pCwuU=\",\"LyBNRp2a57Nk/ETylZlWZU9hP2DPZpr+e2mpRLaQM5A=\",\"D0Fl/7jDzQyN8qHNzG2Z1IeyBM6ja6gCPmoXyQxQ08s=\",\"GrY2PMjoWUyvNkyTOFqrIbht5K6glZGzTfIVL2tmMHk=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"JzYmtwj+ybXR0TMLy7LYDZesHIS4mJXeBiig8V+nOsE=\",\"IywmCZW8KVceghBop/7ykPwfypdCFLRctutjwC9WEBw=\",\"IqkTF+TNDwSOdWt7QcEKmhD4VoPfkFGxqsQc+3PfqVk=\",\"F4nvMeVGnI+p4mW+yvP28LZpid/d38UkkZM/mQYkBis=\",\"J1AvgUI98PbyI7/LA4sDR76WiAtNmybWhbyH34ihL4A=\",\"FZRNaJSu173sHOvoHqFAZtxj5J2zi3m2O1cRzeoAR94=\",\"AtXXnHVjL/WJzqE0djumAsQzkOBfy2/46R/oN2wyfP4=\",\"H4PyI7OlWawJK1zhv+lfgb5k7Wm9KroGGB+ZYsCc5oA=\",\"HZEF3fITsBPP1Vid4HHpoZvsrCnL2fVpkxT3Fj8U9kI=\",\"LYh5ovAF1IKbVDmqFjD+A8tYHdMr437BEsvI+3ZxWHA=\",\"CJj0LTGmg49A3feHTdSvzjSBtuHtoExPIvguOnwzkHg=\",\"HlJz/M6R7BdKOS0rOE6u6yhWwb20NC4aOJdvl0l+Ubo=\",\"JKhjmIBh0kZLe8yNTtYw55pHH+B8gp2da17M3uF0B3k=\",\"DT8q8v3j3ABGH+Zfwl2O8y21Z0laeHdvD06sINTCMiI=\",\"ERMPgv4Fjb8E2Opr4xdfIuz++cSYNUWHCWfHMmfg3WQ=\",\"DzJ//BCimKtDdrNfKLfrkOeUtslhe5qcsf1g0eYgj8E=\",\"L8agjNwHIk257YXEhVXptnR9QB/DC0d6N2RwoZGJQo0=\",\"HDOtbQECakgwUBFpnc0cqJ0QqVsJbit9YDYzdMA4xi4=\",\"HlRX+6LZ2lbU6+lX4qSWCkXOm7jJQeKxvLhh8cHYi/o=\",\"KdKDnr9Yb6x905XOAANuBTC8+vAcZhlIlJT3im99XsQ=\",\"BNi8u95mIAXXvU/xbvkR3R/XTkTYUPZl+v/g1HJAY+E=\",\"HxEFZOFwjCcFy9lfWSphhAb6jMvOv+O0+pQgY2dkx7g=\",\"FYjYkf89hSbSgb+5AOorTelgpdKzdAwlYvao7VPzdLM=\",\"BjnyZ3cQ1Z0nCOPthRqA5xM/YDrgJ27FQrIxgf/zCQc=\",\"Ki4pcC8ex4pHQBWFVp97SOY+OXvWTdvvWf+s5i+1WR4=\",\"FyuR72V01dBE8+A+aeJwJX6Ayc0PEADLkdenGJcd3cY=\",\"CT9NO5abvAI7od5IV5em7PxC4unwNOrQSxeDDyl8FfM=\",\"AetYXlY80DtDDglHlV5bkG25sWmvM87xRnGGWgS73Hw=\",\"FRZ1FNMjUAKUaesnSAbYHWuoCYHEaU/QMPC9k8j/zzE=\",\"EkBYHGwIZ1dzWXudULkYfxYPp9enOWMPlD5N+bGAEjc=\",\"FZjaq5gorg+UkO66nT29YoKiSQ247EeJYFKJoxCaMHk=\",\"FfSPxe5B64y5f+5+eLVdP9pnT+2uqRU0u1BqS0QOpWA=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"axk5O+UoalytFLb9EsUSGUZ6odx8SSN1Pnsa3utGTw==\",\"EquHCeC3KJxxKgAqbwv+bnKEQXdyCgQnYxVAx2leCQU=\",\"FFZioHiKAdgbvA33LW6vDoh9IqHkrqwJCQDEMsQTL6U=\",\"HUA2VXVdzADCmBN7x+Ap8UC52ecdMOkUX23SoED+u5s=\",\"I3BDS5U90dJsTu7WyuUBo3WAFNutFL/vHD0mzQ9hWDc=\",\"HxOWiiOtkedL4FSJr8Sy3LQWIfb7i1L3PCe8L2TRmO8=\",\"MBL2OCwb/6nfAkCg9msxCnRj5J5890+swFTH/RJOIMg=\",\"HaXJOAMzkv/sNIh7+wbmMXZVwwlGcaaCR+r6cNYwwUQ=\",\"GpRBTSN8StKc3vJeRvSeXpOdlpnpo2gk9RqmX/KtywQ=\",\"CiNOeZmdn1WiHcA8Q+r14BgDXStYjV7IzS0d9y+DzYc=\",\"CfDIbXz0AE0HHgZzFqjah11EBQRLDnmWFuIslqEUDCY=\",\"Eb34gkoJVdBLX8lqusCAScD6nNZ4vwVf7C1DY0Fw8FI=\",\"IOdKR1qfr5L0mY61WboNjwVlnd4Oy3V5UOimq/AV1LU=\",\"E2YyGwbBK5d8LDlpdKKmsMTljwmlNTEhPGIG0HL00HQ=\",\"GytH4+qaOd9qBUh5zuH/0s/XiazXgj52XGdSQcOs9Jg=\",\"HpShROGOr8AUsarJFX7C+qma/6UKBfioro7LFSvbhco=\",\"L8levmK/1c/5+iRkv8Z7hUqyquZQ2mPElNhylHNTBag=\",\"HMrxEFBOH9Tuxsqx0g+GP+/zkQ2DL7eJ7H4xcT0mK9s=\",\"FRBm+Bv+e08ezQ96j+CaSO1AsMlFBHYEK8QwNgKJHQ0=\",\"IvBQKid88n8zbZ8+4ft9Z/o1WiQh1KAdEh8QIORK5Ds=\",\"AjRGXRfVyhFgf7a38+1dUtDAbat7F2E1bLvwIntXd94=\",\"DuDIzhSQncXXNgfboZ45cGeDSI8AuMrGSVRtk02+qlQ=\",\"waEvj2ALzQ3Slj/PtxctWEKxKv8IGoFj/M8ersMoTg==\",\"J4E/cgt6f+47RLL7+JiIxmTZYL/Nd1gWzrcAUObSYwg=\",\"DvEpriJ1RFCBBKec3Q+7noJHw1LJcZC5C15Ykv64KK4=\",\"AcWbysuS8wEsYpnMa0O6kmlIHNEHwWFAY0nbT3KL/mY=\",\"CJRKt9rrtohAeKjWGBBbiENQOpC6UYVcB5sTtqr1tPY=\",\"IVv5E2yLgfm9WyIdN/0Poyf5I9rJ1SuoJcvT0tYkWf0=\",\"DqYIoU8LS0BQF/pjcjeGNVKpjLubweFRt+2+jm14tZg=\",\"DBqtmmdd+I3szDhk+MbhbL7nTbVEGm//Qlor8qb4TWc=\",\"JD46lbrQNwXzUQmvTIw3eYPwb+9MrdlcA4M9wG6lEpY=\",\"Ka/fYdhrJVigz2CDBpFX5QOa0XKZfIrnaFf3PgXKPq4=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"GoXoBu/eB6VOnMg+rJJ+5fU0sB/UE4j4BimLKFAaXwQ=\",\"EJ2LutfDx3urGoUG1NWI5/W3AzYabOcNR0eOdGSnNXQ=\",\"EvBLH5MlEchZaow7Xz2/H38dkVVAIPxD2waNlbjmFos=\",\"HyhjbYcWTSIX+zk7I9C/v+wdkS3KP8AAuh8+LvRriyE=\",\"FheaHPqpLJBeA5BH2zjiiNM2s1UCmxzhBIFo5VvB1wE=\",\"FsPerBFz4U/ItUxNobH/Ybe8TuK5xiwocdcKFFg0MuA=\",\"F21hSGJMReIQg33X/YfU3J6J+O+k3qfDz/BwL8K/BC8=\",\"INu2k3Tpd1NvHNxKCE7e70678MnDzEGR/EpweWH6Oc8=\",\"K6sQ57WF1Bg5lFTH2A/Ti7IxkO7MX4X0ENhTAEh7nuk=\",\"G9uf9iGDNGigR2mGvm1tcZd57FgcwoOhGqpCxREdIyo=\",\"BmYLwr4IflBe7X8dTl2EGNVeeZAIzdT5G/1TaQDp97M=\",\"DUvq5jeHs0R/gT8kX9i31vScg9Y/50pADc1myz02OvU=\",\"HXZhP0R+03tkAAqSiztI4ujdUhquh02X2tf+m0xXiGw=\",\"H4Sg7J2tzTk3oEVWG2IFOFwSwupMVivUIPPSfOMmd+Y=\",\"H2Qk8S5pUFZHRbMFCAyIHqkx2Qg2SWMWh6WjAvHYb9Q=\",\"K/Ym3sazwTDr8TemVpiDl94GASUOOYIhUtMWU3qJH94=\",\"E0cxSCtm+Hd2Y5rlE/oyRVQPodNObXTTL36Vh7hR3jI=\",\"DMiUyb5DZjveExek41ka/2bBir3w2LkNhy2GAS4vyL0=\",\"IuaQ+EmRlAElxk2FE74UzT+oHB78EruApr6tqAxwkeE=\",\"FCh2WSFqbLlkluoZi/rhQIaWxVYfAelQTVkEBE2cwe4=\",\"I3tmcDu3l9pI4MZN1mM94Y7FBt7C1NcrKP6Tq6MLFiE=\",\"HrIBw+JmMyL4WsyNZBo2KsHrHatXXRBa8P6shtaOuxQ=\",\"DyWIcDQx4bmw0Fn5AFcvgiLfXndJ3A+TwJokKF/VPk0=\",\"GKiQXnZaSbUQYN3Abqy/v7/MBzb2ISFt4PmhoRzGZIQ=\",\"EOHhINv3UZjDQrWFtJvQmZYz/VMQhA5yVkKuhzr0pT8=\",\"DmUxAUjV3A+wD8E1rQcdmwfiizLf992PsaLgZwI43pk=\",\"G5JKbNgisOsMYifIEKUcVA/p2dB/kG4kpX7G/s52OeM=\",\"FPcI96fBQw6fat86I/HcOMkq4vF1s5Zxqil9WQ94Brs=\",\"LIcM1WmfekAqRzs2EK3AsbHfuheYswaB3pNZM0iRtdE=\",\"LCeTzUifKguo792oSzUDT4G8R8Exo8a2+BB/fLxasFg=\",\"DxK0hvdDuGE2ha8LUIw7PEFgjTS4LH3D2PFSd+MYQrY=\",\"DqI8zN6CUq3DWEEFSLo8U+IkoxaebKlYRYlA8xi776M=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"Hlptum/eYGMTbQ2X9G1fKS8GW4qduPKrB7wX0xVmyjs=\",\"L1u2KB+zCFyc9QgoioCUdqI8FCpFmUklT5ngRhSWiXw=\",\"IwEz+pwhS2zWNwHDoILuIRwtT/pwN9DQpMtjp371tpY=\",\"B7m+uM4d0TwVPTa2NqevVts4ANl8FkAChLVWOxkseAM=\",\"GKYr1mPzZL/Qx51/Ptu6q19Y6qRMD8IHKRyPcSIgWdM=\",\"CQnXJ2oCqsGQl03jRViSHT3I5s4ilk8Ol7aYWLvzkQg=\",\"GRziZuScrdUOtAPn+tB8yc7Y2B2NI989xlPMaajmIxA=\",\"Kc0CnbrygaW3LG1zBnS1PLx3PftUJCjUWhHUQ67gyQY=\",\"EjXy46oqVmOx3DLYbTKo4t3L3k6Xo+3YlMfPL3meVFw=\",\"ETEDCEZOgFA02ECpTSWjuL0MIG1mP0HRRfpmQVwtvBI=\",\"IAf2fDsdY42iljEgamvvpuITZaoe2zmm86Cr/pT9I5I=\",\"ASHVJ/EX23sKYUrRvm/qH4Q2mkxuRRwNXSU3mD+2uRM=\",\"HKSmx+4yro89Vee1+HU//dy8El4XDce3yLotYnAa64A=\",\"L0/5UF359dwO5VhGMebzMSE9ZUQ1tdJZPSSbP/TmSAI=\",\"GGr3B80ZJwRcuK0bFRDUFQko2DnQfIyaPZNBEmI1Eyc=\",\"KRyqOLLkCDEZxXmtCDKIB9Ss596yT3il1NIIzOlQVaM=\",\"J+YtVi0pNu9d/Qqu5ky0LWqpAAam+nSnzO55TXjA+qs=\",\"JwbsICHvbyj8ysVHz7GqstoC9FPaxbLa85Osm7+mNEQ=\",\"LGwLaXEDJuS/c4QGAWJtlMrnXJLKN6pbXG5hcGzeWls=\",\"A7xRmHQlUo7uekoxd6juRXHMvQKMcK2ku7P45to/WOs=\",\"ASc5QNQi8W17kY5ba8Pf26KyKrtCzWeqFU7XVJYYYCU=\",\"JTCU+8M0JAq2fIY3jJ2NdDXz2H1daPOukB+tIU4NrIU=\",\"HNpxjqC9SuQJIMVMnSA/iN7vPgCzpsOlvJJDlXwgEzo=\",\"ElMIWEdmpOyYFZUccqCZue9CP6speDycj4uhTvgiHsw=\",\"EwrxbvZykyeEc0TNyEOQedR4cXUe0/C4cdwkjGuFa0Q=\",\"L3MNXb0jAY2Mkb6TueZmz6npwHfTsnJMQ6FgkhcNcEA=\",\"J4rSdTTvGvpdN0LgO/vsgVaqZgsNZjsFSl/v8Emuosg=\",\"BtNcgxCV9d70r+wYQcdKrxsYiA6qtCVt26NOSWU8YWk=\",\"Kp6wO7KjrRECc8UGAx3m9DK2ZzZVJVxBif0tstmVbSQ=\",\"I3utbolV/gSF9PcrQCSFXzWQO215XP/SdGinvQ5HBWs=\",\"DuCRMZc2/MCmSLxssbMe42uVsgxNQPkTksMV5fzyYVA=\",\"BApzDzmmZf2csMk5ibKR0oGVgFfpuJjQtQx1L5NxqWw=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"AwR48lQ+kaOxybP6wj/IbAYDLKD8pL7pOHcihixEnPw=\",\"BBt6zNgFSoj07WQ5RHP7orE9m56gb8zQ91Q5yKCflo8=\",\"EbyqzKoA3EyAxDFyqDOm+lD6R4J7PU3wwiHu3LfpNbo=\",\"ASdrHsTVHPI8U7EEp9HhJwWLkfWkzSv+pCDBU1W0NVM=\",\"FE3I37whkYq7R+wGHH5qL3+psyur8nAEei9GW3+PbeU=\",\"HdBGvq8ehHYwivAImvGdoyKFI0axj/pYSvnZhhncj1M=\",\"D6fig9Vt7SPgOhbXnJQpgUPSWdjFPI4N4mHRl6ShwHE=\",\"LhqBmrrPrbVemO/bxby1fiFvp+2dYKTtkgsqHej9ExY=\",\"JWk47jsYJkL3ePdCvDvACmCqoluzzp9/yWVZzyGyhXA=\",\"DmozTjV3krUYLYtE2JPOMimWkTyrZAoAbBqLc8AjKE8=\",\"JAc+QVS2hEWeDL6mkO9YP+71VvCSsrF8gsMXdnJdqQY=\",\"LfvksXYICKw3kC37HhhpGQG0E7h8bYyK5U15iU3tbIA=\",\"IPRH9qZ9O4kp4e/d5miPpT1Hlkhz2G6gESbx4NRH2VE=\",\"LFArWrICV38BVDHMK2S2H4X0hhYaxOzWTJYD/m01PQE=\",\"Bcqitu0rhQpevMaGtxmGBJQdSNMJMqCeLekAb/phr7c=\",\"Cj0C7CYLAu8qTVHCl5zBsizaJ7VDobrXXZ5UezpcdR0=\",\"ByS/VIbJvSDCQn+8HWk26mXQUvRCpBchXNCJueRTeEM=\",\"HqhCacqrfCc9kuhsooeohQmVya3yYk2qhYkyZl/tZuo=\",\"HX5tNpWuUAO53GlQrziva1MZz1Kaeh1QdlEt/ZKwme8=\",\"CZZC2JEJLqqN8b+8RdebE5NMQvN/jh3Jaf1RyupPwkY=\",\"C5S/D9j5BwQMFMH8iqKQrqYfyIGqgtogrlaMNJkPxwU=\",\"KPsNdVM6gmPvLsa4XJe1ryHlJkcQVjVSU/xfb9M2E3U=\",\"EEgIQeRFG/NmwRHI0/2/CnrJwEuaotjVRyhd2JHnfrE=\",\"ESJ0xI3s40egia7JcfDPude7GhWzKtNnjnfRXPcQf/Y=\",\"AajG1BHdxuLe3S+sZMMk2Iq4qUb+8RdMlz3A9lgnX14=\",\"DQpKmYU2xJA5a+h00CwD3la8r6PPRVkBhPe1PvXDzYc=\",\"AiAWuVffgvpcgl9PuPz4Y05lSYi2PZ+ZM7x7fyVufGc=\",\"Am0qmw24Mln2x9CBotUDFwOQdrr2FR8XNIg/psMiskM=\",\"FZO08z3TBTJY2+qBF/Q18h1oduf9KQfpi9gdE+H4rv4=\",\"HsgK1+4raF/Xmzi4QrDUILaF48CQrPPnUHpXc5/3YYU=\",\"EFcxE7sNQcGFE87wg/u6kSZt+nF4Z0iIrOXVZuEwju4=\",\"LFvKI4wsO+bVz1lx7pLvMXTUoEDd1rBDE1TOQ03pibQ=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"L3cjjAV+GHeXlQxQ2s1Tmnt6G+e6o6Pzphf4jsBVE8E=\",\"Hksyfd8HzAZbN6mvf22XuJxAR5kIvmGy5jEsNRpNXvc=\",\"H6AEhAnaYM2xKiowE/tgJXlA7l9PjCsbtWNi4SGwyKU=\",\"HJLOLDU1gmisVqdW9cqUO0PbjH7JZXcNpitknEW68bg=\",\"JaYpErw5qsxmBV62y0BLak8JtwOjRLdSxSbcuT52jHM=\",\"Lz48kb5vWwNLANr6b9sz7QBzX0j7IwCng6szB6aqx5M=\",\"EmGAc/cmBlJbdD46uMJ0m8g+vDHNR+z/L4Ua3rOXtfg=\",\"B+GhSl/poSeTCx7ppLu687M+zAwj17O5BvWZJcBnD4U=\",\"GFhmwgch4QGKTq8kEDG2ntHyqiXgUxCkSgFa7UUANXY=\",\"GEX5ZWmQpos25H6Dtn5tU/Qt9qg8upWwFsNJ/xkd28E=\",\"KF21vQRRaqBBbCxSzGUcJpC8hGYh3ewv8wNxZcMERLE=\",\"IwaXzRp5wwNIkjLy0GAYLEEB4PtLbTrDi4KjcNWcopU=\",\"LV1CQ2sZvUkW8DXzI9as3a6aJS68dEWtsde/VgtGS/8=\",\"HvlDWMkEJGZpkHUkulv/vb18mlr88WDkTQDxnNgE/Yc=\",\"DckCwcL2Oq68Kmnts3MxymwFNRPymZG/yvbb+c2p+K8=\",\"A4z+xxAbLulU+lvRFW2lxWYrx34rThbTkTm78WX14zE=\",\"I5QOGwZX26Qe48ftvobX7586RQFqYcLc3DnwMhr1D6I=\",\"MA77YSqgmnIcj+tXdcY5IEwJK/Wtv51CaN0/JKQG6Wk=\",\"HNqrQdgUFST0A4lBhXYIj3yKumL+tp6JXTmEMGjdVnk=\",\"HwNbb5V+hMHq7sceMbGVGPPeyZZHU6LKoaM7oUh50OQ=\",\"Cf8bZm5HpDMIgyn5RUW8RKF5/2HnmI7IyGcVzdJSN/s=\",\"l60AStM5pqtG+SqA4wPl1DH813tGpbRDXzg69o99CA==\",\"IYm5NOFgKvbjDXhqDig/CHdyDLj+dzacN/esiViG3B4=\",\"AZA7zeON3eFOIiCdcoN/m4E+Q3CZ9xJj+E4YvGQU7nQ=\",\"CBiH5r6cFOG53tUenNv+uiAByeYJjW7OkFoPzqmPZFI=\",\"JsevHxzuhlY+kpIzb7ZXOglwryxtSdRptoIYitVVYa0=\",\"JD4hQFNnwCt4ydqCyRAt+cMqJt6iHaAL62LKnk5x/sU=\",\"FuPmu5XyjS8yHntj9qzd891sLpoFrvi6S5FRsd4Qp4o=\",\"CwERQsGML9N0DAdRNhJ5TBRQatMJT0QEINUmXyJahPQ=\",\"CDa1Gv2O8RClfT2CvLHClKPQyUKsIPb0B8sgrp8K3cM=\",\"HvEqVHcH190nUp6GdeXljD81vVDeRk1emxc1qyLZVWU=\",\"EvG0VqP8q7EWWGEH4InMs4uOoKwv3m9tRkMCxfYsV3Y=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"FuI7w7phLo1BBKWmCMzg0ovzoGxvkCT4+Cnt18hP9eE=\",\"DUrPzqI35EAJs1jZmJYbRxn+USqizdZDiqMN1bqm2rA=\",\"CTytF6rtQedZz+sVRh8CIq3feMOgrt6nGGQxxTXtRvw=\",\"JeaBZqzSQfwwHbWC+Ja44xTjmNrVbenykm+fExqB1cA=\",\"CNmxo4x8cbL9XayH75dN209xGVI9gfiLDX4W1XfbBgw=\",\"FQxb8GoHG+beKItt6wC27lHuQflvcc3MmAo2bkBJWA0=\",\"GCDgUz6nVATvJj5XAlDiX5wL6hIo35+pCl2oF2FU8Ik=\",\"Ip/HtjfPgxbtwpFF7V8GCpGI8Q9x4Hjby4h9GV6NqJk=\",\"HMVHDGvV1z7uY5lkgaKEZkmXUaCpx4Sr2xw/7+ZD3YE=\",\"DE2ni1MQ0EhTJCoR34IbqEhg+sGi/un8BOJcYDm+6PQ=\",\"CUzBVeEU/4JLI+Z+uyiyvaU6pSb9PxGSfbcGDt7dK8E=\",\"DdhyZ4uAjhEEWmVyUBchgeH8fZ4uq/iT8J/Dxr46k8g=\",\"IXfHgwrGssttAerSZqNxMg9waaDeBFTl3TolZv+etxY=\",\"Iy3Z/9l91QaLEEH+PtbgjhYiZenoFLhRFqZWFDCq9y4=\",\"CHcm/zyrtilNIQaTGzFggJ1NHmae194lN0OQr4yjm08=\",\"A2T2B7Ic+xKSns3WX3YY72XI6cqsxPQsRAmU2LXc01s=\",\"MEsZX6C/+ty7I64iZ2k8fadgfqr0DIgIQ7pxUh7e60A=\",\"GWYQNoqHZPz08CeGASMrwKWqe6bSDixUIKeGInKwZ0k=\",\"IY9SgmuOK4LobYfXvIf+XMaRcUMEiCggYtcAgGnInd4=\",\"KnDzmy2M8hL+cGVF0cwVTQdAXBQXcSs4jJGbNSY8E0M=\",\"Blvk6k1sqkElutrxa4MFOFJ0FOzXGKkjw0F8R0/PUDI=\",\"BSer+PprZFWchrae67PwrNlMnyOgFDj/ePA0yAKR2WQ=\",\"JjB4q+RXDLltJ86hf+m0k/rbOgIGBcxHS+CK0XPdQk4=\",\"Jhay4KiXDagBkggzXUzMqkicbLjaaoYvGGfiRuHzZzY=\",\"JV8t8fmG8VR2jw/IpaLO0fGNOV/wEWXnfWy9o+i3u9k=\",\"GAb/F5XZ1skpL5gMlXA4rPoCrDJVbJq4JrwUqWjazIA=\",\"CHG68BPy+xbAZ4WIRM05WlINiouxer4gfTE4vVkdz74=\",\"KPBJPVx0eICnGoJkTCDcI80734TgXL4MChpI+icxJIQ=\",\"KkXvAv4d1BZBx4e4YRETvsSIGlZ4T8+iG9iWqCBXmPs=\",\"B+0mJADixmk0uWjj+HE9ZuhfrnKrc8bNM+r1srSA9s4=\",\"F5hBYtOXorOzvzuwSvcFMsS+roGgdtC44bTFTl/rL3w=\",\"KW7ikfxjYF25WUJB3+tldmA6MMQtbWMdQSOYKtv1TOo=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"GZM/x9Guo27UUW6kdoYowI0gboyuEuU6YRR/IwHffDE=\",\"Lv15LFatGQMvTiMH9+4ziJVVbeZTvPUCOfVqb1laWeM=\",\"DWyUdQWOYCnKMWKw2zfnHKVwpibngS+JONtbufVPNSw=\",\"LW447RLto4VlkuA0jMtPrSR3YZvIo3I31OSKixLQ1+U=\",\"GyJ5i7a25XESNpM+JZaQXsGk6vPCJMuOGDhYV99HWuo=\",\"DuK/rcbHcbgnnYL1R3Csq3mOXX5rbJMSPNbYcawPnLI=\",\"IdyOfhlRti6spAVQYYzvDTL/gvQlJk3/J0Pih1lNfVQ=\",\"HnW/eCtgKyjLEfSJoXqzI9/ogadlSvF1z6ut92XStI4=\",\"LEm3BF9FNH6oSY3y9dXrVgFU81eQFnctwBf21Dz6Vj4=\",\"GgrDdzXqviV7nAwlwOjO1HeDPiNoZ4xkScGqS68PIxI=\",\"HzXiE5FMAaXr6zSDhhBXik+6LEoG0kjg1rdiEu8zlWA=\",\"I2qwgvLL0maPU+1amsXymCJEDksGVDtv85RHOe2wClI=\",\"EiYVNPCcS08UNxfsTosK/lj8OZZx/yn1/Iw90wLrcO4=\",\"FCHY0yI1yuuOkDebOrrOodfOQrsa6SiECoc52FrLMSc=\",\"DTMK/ovmPYrOOjqDt9oYgEkS47PBqKs+VWsyVvDFUck=\",\"FWO1Xt9EOJDEcppshNUj4RM9VL7DcAC5r9qOw5PA0v0=\",\"L2qsoAkTyKBWhn9C9kAW1ymC4+3dYvdQjEuGZR0vwlM=\",\"LzGSeiGM6NWTGQdUKQmpqKQkhXIYVzWF4aEarDSkrFk=\",\"IkXVbGnJvL5H7lcPosroAIqLwwQkENKfhM9lrfsdZfY=\",\"Cm0aUDJr+HCWvPtaz8OoS98RLv+Guf0Q6TWz6lz+UvI=\",\"Dcovyy/KNUGfOtZzdBc1Dk/ks0KOZdT0GBQ7lyBDVbs=\",\"Dv8NNYBsaS+T82XHzm1UibUTrKeeygpmY+m72IIPVow=\",\"B2GhpTbPI6ofV6WhAUDUscuWjp4wVIM80zt2nbHN0Ks=\",\"BP4KXyckmeERmEy5X2ka01MwCK5wY0uu+eYLsICP7sM=\",\"Dl4aaaDyUhpny6qWeDIUOZgYrc9RBMjamNRfOVHfPXk=\",\"MEL5mhdR6pYoKK1WPoptbcQ4RZ+bkSs7XyVnrjG3TPU=\",\"IZHy3VaZ5/Rt/HoPsBxau5o0dAxTRpDteJo77b4V+mU=\",\"F4hu1H8T0dScnCSDZlVoPPSB8+idK2W53ni1kal7h+Y=\",\"GRPRdUGyNNg/2feFF4JRbaS/T/6TVcGUAK28mVxBf8M=\",\"Jx6Z6tbfr/hADjkFQc7PUUauDzuG0NlImKd7Z9D1m4k=\",\"C1fBFvOmBwlK6LPnorfvEjY1vxMQicqPyNAmRxW7cuE=\",\"Hgl9R9SoK3l6WrZO7PvFAmrSXJqrlMvPvu0E5Hrsfng=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"Dv9lwBINaSkhK+Vejm7C5GjX/d63lRsBrQFJSMF0uXE=\",\"Klwd4b8X8fuzSYfUReIuO9qVEAYu6Bgh0glE3yfR1vE=\",\"EGF4Rwkx5p0CKI/XOr7peZRwTSz0whQkmP2ySHr//JE=\",\"Hy0X3rGiXsBFcIOOj1yqRyUMG8FsBAYBf1sq+yssi08=\",\"He0/nv3i3byhHiKAA43tN+r5pFQslZ2ep+2ylVcRjAA=\",\"EyYR0wwhtJCao55DMdL+Kh9TIZjzRYjmfckqN1sdlb0=\",\"L1dBBD7Ye3Jyx6DbIK1GJq9iEHHNCqZ1n6s1GPQg51E=\",\"IHScEFGSebfMuC3c8cq2ehSyazCAAimXwFzrR9oCEeA=\",\"L0sSy+/+icyODrj8zgGtkD0UdQU0sQfRpQlbU/LrmUw=\",\"GfQ3pM+dadkY4r0sGs5DCeEo+5EZJsQ5YDl5DbFnchE=\",\"IYkUK46OYtPqutfTqckqL/wHZ327OSelUDVDak/pkIQ=\",\"Jt65AoBMUPRDl2E0c63TF5n4WyDRIyzNwiA1fofgREs=\",\"Bg/rbRPcdTjN6mJ0lpUHunhDAep2zvivDrkUqyM5voI=\",\"B270LdC7BphA92FVjiAFr3k+pb6sNJw9+55hCTOxco0=\",\"IXGN8O29LSFnD6mQ/Ck/ifU8sWlzm/fNK3MpZ/1Ok2s=\",\"IenhAV0Fpny3oxT97N0drFY9vuK57asziOxO+eWO6yI=\",\"BfwXQQnI53edOTIdm4Q838Hg2J2IBuGZ4V7fPL1yT44=\",\"CWqntzFcGB1LtlJ8Gr5ddYkIoR0UQ+4wwHBrMbtD2j8=\",\"EAFx/4BfgI8XpAqegLT2UWul05yunPYpGeCF7ctG4NI=\",\"KKb2aYpNJXJqfnvLUCZLZqnzd/bdQumv/Ad7W+5WgKw=\",\"K+THLn81QhlITx8Yc+s4qKylkkUJyJLB/QciQdAsxiQ=\",\"Eg4JqbW6HRPbY6TQEaL/OIRVZOBXxkFlfsJL9c6OUy8=\",\"JsBEsecuLth+YgwwEKzzAtbxnLjU1chVSTHS4pqSPak=\",\"FiGpUCRLXTLa4n8YmXCuENFPCAPZL2fYkS63WIRpRx4=\",\"BQZd91XFNrpUvMgW8wjC40HwXRYlQRbQ4pusnNgnJQw=\",\"GBZa4QAWSMjZmH44v/hLr+00FLotwJ65N7c6HmNvQ8c=\",\"LoTdaMzNBpytb+5l3rJ8UBsqCox1+msBK2RRl3oc/RQ=\",\"KYaO0L7ZMtKuD073MSUaSuWUcMzkMlC+n3/VXFQ85jU=\",\"KWtBzkvIzdBu7wAhxWRkYzK77UqM1CFu/6SgmgFbHiI=\",\"LBVY81VS+x+f2W+/oc8YerKWyUHw3PGvGAY9uHICjVc=\",\"CLG8Xeuv4swB6SsxCpvRtiJ42a7694pCzhadvXzLx2k=\",\"LGTrlrKfoOB++9hrzaofz9NC/yb8wRrbFjo+d4CS+0Q=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"GULg5NxmZtBQVl4wQbCdefwg6Zs5Oyo8U/Z0Z8PcnNE=\",\"KmH9wheg/VG0TNpWaeuMgbTkzaM8B9lqOzq/dbu1k6E=\",\"J2dskkXfKa9J0WFLAyyG2Z29/gThrpUekcqIJn3p/lk=\",\"B5YWWlAgmGXwwS63aGge1xB/bnl2x2o2/hlqw2/bxbc=\",\"DD7gx8v4YjRHyQuQ4T0pDTE7bQxGbgxOFinlTuoXUJI=\",\"DKeJQw4JxylxukmrjPvojH7pFXHBvc69tRKtsGFZfyA=\",\"BVx4/yyk5gyNH748VbFezCj4bzDok/vAAYNswGMslV0=\",\"AbHtGY6lr/XodQ5P3RtRyeTbRaZRstnhshGsw7Ek4x4=\",\"BoCgExkh/xW29zftHvmbv1VOXEHvT9biAL93ETRRKpQ=\",\"HARXTU9DXfJKOKav0FbEnt1hzh3LsWDGnGq0kHFvS9U=\",\"H3n7NJ23BaJH5omi2wkSRMMGgNy9p2X7rPPzb7f+ujY=\",\"G29FvfDtE6gsMwpdJuuZLbyYAvEb/CZp4/7vHDELrq0=\",\"HOOMsrvdlMA4afa9geW3oMNZqTK2dsC6Y2n8TuknFYQ=\",\"LZGPYPjHvimgtustbETFbwzdhl/YoZ7XR/TIOkGi0p8=\",\"Kx5r7ybDwqX37DnDvk3hwKW7jB3ENFcNHPmBHHHB4tw=\",\"GCMaRiWhHgV0EtJ4mxAUSYWtFZZv2yaAmrgJGwbjzjw=\",\"K6F3fsBCIqn5jcq6OlwgI+d6gHGieccms1SC1jR/7OE=\",\"GD4tYwGx5HLgHiNg4CvIVbbxomKk0DUXvsoTrCU5+lA=\",\"BObDKbiGM8akW+b3f1qdDVTtqFpOAV73w2i7FFxpeOs=\",\"H30rU6JFbA05hBc4bYf092D7VBzCJdDYTZ0ACCi5T+4=\",\"Hn6PB/x717Ri82kkreKng+0q1H9qfUpQUbl3TWHcSAs=\",\"CO5txLm6o2LG2oL2w3h67Eju4fbtMxV9Gpvf8MqyB4E=\",\"H+30bOXwln8NJZp64Z5beBqAFGerl+ybjVAmWDJHHpI=\",\"BhCmIHmwyMAK00Aa0Ec/7UTcrSiv/d6Sx0ypJ6AYQD4=\",\"L43N1QGYj22h89gDCFMeomrS63AX6ufZfoZ8z55QENc=\",\"K8qa3mqgaPYMD9akTlSb/TffhJmlidv/tksA08SPtzA=\",\"GhRf0v3OjOP9AoMNTEyKaOMV/pKjj90PX/ejjWmMHB0=\",\"A4dLVUxbxsOYixYBYWxwdWo/X53kDt+/vgEgYx2lQPA=\",\"LrDLbQFcSK2dMGWlBf1CrYEftw2f21wtU3hD9js3jo4=\",\"EUVCId+6e9OJ6PAxh6ByOChCimu0NMbXvyC/5f0RS4M=\",\"KhDBQRCDjGkymoCwsmE72ZQ6P/0l9qHpUdCpD+1OqP8=\",\"HlKkLRUrhdingHKI9vcOaWNNp4RNmVslT1GHJOTDYJw=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"LVTeB9hDgWAQY7bpvFB8k83tPNq2ysOHjNw8KXICeLA=\",\"AtjUovdi899zNWumvt4bAHRJME0GKyJns4jgWMMNMh8=\",\"EJ85uq8/yU5z0E/MOTprYK9sbiDVlT7kobVyhXtMDnY=\",\"EtUBpxEq7/zAOeMweQ/7Zro5DR3eeatf/HI/n7rih1o=\",\"EEqMpTdgrV2aYw2Fvx0ogPyOIql8JoZPZZe3jM2o45o=\",\"FWvxheYYyC/VYi2Bd55VOJQSWNHqPSaSP1mwAq5/SMU=\",\"F3d0kjykJsu1SCfisO6pnTLFdhAbrAc5ShXYk1Tm7d8=\",\"ETpbzrWSdFSfwYAdFsGXQvyPwhOf5YTFKnu7oqMpkk4=\",\"DGUFynR8s45DXu0keGYX1b9pA0Eyp09kZMboAvofq9Y=\",\"EYBp1MS7R3mjwjG0+bsQyeUb17xXz81gLuem/A4av5U=\",\"A4WYDTXRTpDWTpdocB68zBJYkWVPu41reaTqF4QqSXU=\",\"GRYxM2Xgv+C7e+1bX3vQPbMU3nHOgEIgZcUDGBu2HCs=\",\"C/h0gnlyO6QF/DDBiyK00ci9LuihM7c8PjYXD74qBLo=\",\"GOYz4/k/UngFzHvfph6rDvwYm1VvfFSfFZbquZ0uDms=\",\"FSvHbQcDUrXjtPNQ9LB8jO/SPp+lxCWouXTWiqPAdzA=\",\"DSfeh+QH2JrtmDudsPgWIMnf5CPUfT3kTP47JzvCv4U=\",\"K1BEBXKgiSscg722/SA3ya1yDxMUF5j4hXKD4BsSkOA=\",\"C1sNj2J45B/1fL4YvgOONGfxvMJVFWpmDP0Wqi6prGo=\",\"HEu8abp86DwbIj3dsDBEKOtn3/RhtxlQTSpVx784Ck4=\",\"Ikt9dyx6XW/eJvK6leAA6vb7z6UDmFecCDMJPWq41+Y=\",\"Ew0GBJGmvZDD5e5rz/QYHZEm9SDFbX2CMxIOhEnwNw8=\",\"JuH3qqZoZVrD4JK5yImZlMqeWWupkvqIY7UrMTfNqSo=\",\"DZEN/N4vC5OUjyZehhVjr9ndYybN4qnJSJ0i1i29MHE=\",\"GpKm+6kyaLQ5hFMymIU1YkyTthbS6XJlb/sVF1RV5UI=\",\"DbNebue5dSxWTpEyaW8wUuOaRt8cSCP9BeJG6SiWPWQ=\",\"GQSE+4eX7/8zgSesaYd3icuA6qR/Z0yuIDXi2QO23Us=\",\"KBsV0UbE1W3r+fZrwMgTi3xb5UyyBqkYCYfxEENHZGw=\",\"L6Rtic5oBmvxq00wTY2RY8ggPxR1ju7LruwHJc1mOBM=\",\"AvLO0oVTzZP9ly4jHe2hyLU+wzAOlhfcqtDS0l8tYfo=\",\"Ku5UhGFmMsdRE0bUrJAOtd56BJlOuVtDQ9OvHjiPp0s=\",\"K8CFmBM3wlAPuA8iWdVelWlj7zd+weIHHIRjmhmlgfs=\",\"Iy2Rd9I4p+LZL/EmDmDh0RmTZfTNb5Ed0IMVKXu2xkg=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"FS4jKqLwtc6GqbuOx8kWpm6n0+ztIMMRn6SzIiekQiQ=\",\"LVQTgVVrLbDpNMJEvU+Ou+GY01vN+lbHetcCzitMDFw=\",\"AuPcC++CYkFNgCRc60EVEUZ0OYefU4cB6e4JT3wU5Ag=\",\"FqAR0H8F1qoFnVw57CleJ9aXuU4OuO6A0JAlNifVTOE=\",\"Dy5x+4se+mf53p+h8qCJz48amVvy76cztAzEBrbiXM4=\",\"EjHXd34twlOKagyFTNpZ1zTwzgqHe1JxodOMZ+aCBo4=\",\"JNeLhSbnscBjfyeXlokR8QFGJTXh3016TBUbxv8s4EA=\",\"IqmINkot6rws50dBjcAv7zjObIEe5gdP69QmqlnhNaQ=\",\"Fd4AqTLiZ58BQC22IfQiY0iwVDb5z0tNbWQZ53cNFWU=\",\"KZ4Dc81pylutLiygBP9tyhk6mqLg5R3hyJdw0sJg4ik=\",\"H0jbh0OO8olU3lcCmS/BgOEgSxOc2CWvZjHY6wpMm/4=\",\"G9/0ODrWUDamGTz9n3dgH0gJWttf+kS7MaSsuL9ot0w=\",\"F2RKpoKoUjNapbFTLG/ampgP/16UwrY1jKg6tYqad+0=\",\"G/3UYA3mlDaK9kR+FtxUT4VlU00w+VgbXYHMJKZQPiY=\",\"GMgjDUytfIFbO3HZBYJqlAIqgc0YomQn/boyNmZ7JP8=\",\"DhlJPxbwsFpsvIxu4T8zTwRYaMs2x+YBO1YA4urirvo=\",\"DS85PnEhTzbP1qj39PArFkwL9BFul/cZhED7kSJYPk8=\",\"D+4xLuYOGNPnprpr+pXoJvJ6jqCoZePHp/tOEw0cTAk=\",\"IqBWzX21gVNHotA17O/aBz3PdTv/6UFa/SVGIfw3Dqs=\",\"D16rybxfuxmGTvIRP8THVua189Ha+4q97dOwTQuArmY=\",\"fCNawZvZN5xMwBtFS0MhivW1c1Iq7TERSEBPOlx0PQ==\",\"LZQqr9RMRjX3zC9Y5LkxS6pG4YeukbaacM5a0IquQrE=\",\"GLdTbd8rrzGPfZXOrnwFmJiplwmbDgBrFKlhlzTRAa0=\",\"B4NUk3LYMIBMzPm/yt8buAXfDNdP39iljteLLNVJMDc=\",\"DQ/1ZYGJnaXF4Gkp+SESJKvBcBzFkFceQkOsU4AlHXU=\",\"EOssoB28ac8UOgfRrjPUZcIbAE2T/Yqz7MwzDoiXoG0=\",\"HK/3lMMveDzuOd7ivxMOqJMWp02b9laOHQvlojYvQnM=\",\"JuQ4c3h6l27mgFCNsmaPTmyO3gZ5XOVHYuqbfKdlTbo=\",\"CNN4qjmC0q7gj1HUzPda8rBvUqsDhk2V1Wq6m7/M5+g=\",\"L/XQ0DtLT50LAdPg2zGdwokG5Nyj37u0s3+ZqF0bOOI=\",\"GFINGgvqReDT2L9D8lujJcby/CqFRHfde+vdmslAOMU=\",\"SJgcUbd8rjIaJJtYDLl7MnB1+8wOeJthfo02lEd+Ug==\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"FIcBUhgTj/qgpZ+oU5asUeB12JJack/TJUJNkoxlSsQ=\",\"FY53CSVr5bRt8I0eGwvhk4qm9OXHAZdDH18oAcuBzpo=\",\"I+rTHjrbVa8N5A+OxOXkBJQZKhN/NtZGjKyLn466eIg=\",\"DaUrhCw5UplD+/86+pw6ddWAAl3zxwjKfjEjlufHumI=\",\"IGQaEs4yCUNwZSxjWSGu4Dgx3i276FS1LZg9xmmgz6Q=\",\"DoVMR528LkZ0qPspfzNRPqyn0XBecc1AOzv9p9WU0GM=\",\"IuO7TWV3IN+RdLW8ch7EnqITFX4KWdD6Ly7v6ai9I3Y=\",\"A/NdWrmocV2zeRi3kUgLMZBJMmZ0fpOyuSLxfEqNMDs=\",\"Bx2RhprEOaI8UY7/5hzmi91XggTccIeOqUm5gOjKV2U=\",\"Clr+ZnGzmogPKVPVITJ2ed/ALSz6c54Q7AzomKfmBvw=\",\"GhMWHunIPMXa0gGeMgtlycD7E6/mpHOwMkL9936AYHo=\",\"AwJs9AMqtzytP7U2NkezYXF5/0A9ywc4aIhIJS1bby4=\",\"JD4MfRPe3AClpm6KwwQd6cwPEHxp444KWsgH/FdSNCQ=\",\"Kp/MMdW6dc4Trdmi+91L+EePPShmOCZ+jZiJI2q0iZk=\",\"EjVdOqp3IFQHohjGe/KS9zieSAeOrTrYtEp/JrGTpXE=\",\"L6Bv1yGqxYGfuNchGM/DaDWpaldGbF2cfe1if/Xwklw=\",\"IAmhBH+a3K9dB366odgnunP/+B1IapveefZt3Pe5VnA=\",\"I6/T08Di6HWyqEfNKmhsH8PFg39Bk1yv+kvEE69FFJE=\",\"JybdHz/f0Fwz7+VH7Zcq02pgZ0iJuY0XhqUF9zvP4pY=\",\"Ch95+N62oXakogqJwvMTT38iiOXmmNja+WYveaffclM=\",\"Iz26z8m6jG5HWICFzvqQ98zyI6sFDEkAqysmLegjXBM=\",\"JOfB0YOFc1x76O2XshBlrTRGs6RFQOEpYF78rIsdJ+0=\",\"IhixFOakk9e1t2dzaq3Ql+ythrD1iXKsDvpUal8aRyY=\",\"D+YOJPhAgJUOefLdXcjvbcxeyjvGzWCPkbngWkV12zs=\",\"HT6+3zyR5WszMcI17fqwwd4bN8T8x1BnVafpC4apiO8=\",\"BbGFMNfq0d/Q0wXiQkTJD45mvj/1GV76LH+TF9ty8X4=\",\"Dd0FKZmIaOdhaogHk9S/udmiX3y89PiU18kUQ906Pg8=\",\"BYYR+zLeRfa4ACAKt2441NiBUr64bs4UYsISlQlzJnI=\",\"L0lUzhedgzNmpsrOC7IWI1tfyDMaDvNqtAzwCIGhWS8=\",\"ENrkZC1N4pFD3Vroty9W+3gA1mTuDBIcmZDoiXbOuHg=\",\"CdGz+DiIw7mgGPd5ymnHSAqmCGih3RriLTKN9GZ6xnI=\",\"AfjLBLXGFV3TIZIMEpRl+AMxYfZqZimsv2fQzoYJzy8=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"BpdGj6SP++8t72+IWcEnb0DthgO1TzNqn1v2yYbcRHI=\",\"FIRa5SVsz59S73VNbp+T3xMgqGsdCFtkLprDX8jGWdQ=\",\"IKDiDKlp1HxXpvvx18e+b6IhALfFnwcB1YncOhUO5ZU=\",\"GlSxBl35an/lK6vdHI/HCXXBkZDX4/DLb/ET7tCslgE=\",\"BgqVv3LUVCfvzx330DdM5WTYJL2Tca+/A7WKfCuCV70=\",\"DGuuLzX4M80QmWJqJUqN/aHvsqoZm3T5+pl3cxRojYw=\",\"LgddVOL3g3xYojBJxMW8IQcxd171ypNonY5BHT4lwFs=\",\"cxW2CucEzYCjZJr8MmCOhHXBuH/4iWbY5L3da9XKlw==\",\"HF+NIP2mQtzY20PpNh1BiKj0ja6QIbhAc8omGuUPMt8=\",\"E2cYIxAsrGJq5sEz+ubMQOKi4tf4oRkYiZiBVLYFp0A=\",\"EPOIns7hvsSl5sfwM299GTrLHNbMG13oFdrqSzt2D40=\",\"BikMSx+M5t3HQFDKXVgUI4nt/KrKCzsjUU6GTorq3nk=\",\"DDWdOo5pE3FcNpkIpX+Td1t+/MKNMAMXqcgIEtmRWh8=\",\"G3kGyMKeoeqlLqMHPIDGZqaGkSzVLg+IBNYQh9OWj4Y=\",\"FA52Nrua9soLwaJXV6fd8UMl+ZrAfjTCL6yVzCW0fSo=\",\"Gi/7dU9N8kNx4nSiCA3vHx6ukhsnKBNEYUK3CCGaQnc=\",\"CJJVdMPdbTk0fc8NGI5gO6hshditjHu5a1A74aSwH8A=\",\"DE1VdlL9GkBEm1JFSU9GGuBoh3HG9Mbih2Mu89nhnYY=\",\"LpwR+dhI9GH0ZzERdNaK823XXq7o/esJOP7zQSzQnkg=\",\"GYNQ7qSUibq2Z7rA9MeLGPMcDS+2FfNHWtAFC8DplSU=\",\"Af6qIftqpA5tO5nUZPDJ8hwObSn8RzO79lE6QP8V5Ns=\",\"C/5sh9ZYM7i3lj2MkJt4nTecCoIsA+M1kad73mmTZWE=\",\"CdMa1jNm8Z9d4xyib93xIjUzy5gJrHc8Zk6G75Q6XJc=\",\"IJKyvBRcQzIHSCWy3u0c9zWmBmh7S9Yta3AUdzTaR/I=\",\"LGUL4Z3LYAUJJXDGmBtsZwHJma74WFDddSTJmw61B3I=\",\"GYfaHgYwiOUF/hwiJ5ou7iukkuLa7b+bt/9/oOoMIkQ=\",\"LZZObJfxzp/pjsE+A+OaFBj3tYbva2JMmxT6elbUPlc=\",\"DkTi3RbNgTR6piMlI1zb6sdJb7NryYpAX7ZYiRvoM10=\",\"Kz87539Or17mWx3JQg+0eZJvcHtklORcDDRWybEUmsE=\",\"BFEBSM7KqjEeiBX2LgwRFVogS56EGUMHCPJwzJA2lUE=\",\"Eh9eUrXtbZdNXYtenVNetpwgfN+klOdamaJq/xPJw64=\",\"JQiXwI1bixCd+wpgox4lCev7WkU6VwRMtNHO4cs2JUo=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"Fw3tYuR6JNAx4NCalznBgaBf+mwHKgrkR2yEWQJqyS8=\",\"B6fZPwdyC3KdD8Eep8YKgZqRXPCD/FWQyANLPimboMc=\",\"KzhnSBkTTqdDYUVQoT/x6MSuLcpMCY265xecjso4JBE=\",\"JxKJ3BdngryAKkDiuYk14fDNnM4c91GH6L2/xf2t36U=\",\"BQ4NSXY/mWUWnIFa1tl28sFQLVBEJylOxlAWKzLRYkk=\",\"HhanYZNp9yI1YmCfhXEpT/MTS20pAIGJWKu4Ae0loqQ=\",\"BVvjJ+jpF320jngThcfLn6Hq9/lErVgGuAQNAhMo/0w=\",\"HiGPiiOBizWKkwqqxogCUOqoFPTl9Ks3ILy1PNsfBtc=\",\"A0T/vfc+AMWslgO7ggXt16ddRKhmPaAo/WQ9TW9MK6E=\",\"En/mvKAXivk/Yh1cuMDwAMgQlvC22X299ReFrh01WBo=\",\"KG3yI2B9lbuGGknwg7bdnqxYtj3umuqUuH9KcObgblI=\",\"COPlb/QFbqDM5yysfxqzo/A51ZSL/iTFlmcFbt5w4f8=\",\"BVMChsDn6uDGtpOgUD/QJxeFsamo0Vnq1osnd7B/tVI=\",\"DlqNxU9HYqgI44T5a5r0rFb+mgRqPONUzj97Av5fiEA=\",\"Eq4JGi086wUCYvcyNm0EYXJWge9qLJjmyyJG4IIUYvM=\",\"G7ErAdR2+y2Hnj2A44KUCRZwZUu6TyzCVWv0en+j5TM=\",\"GDQI9XWu6sCFpgXqmTTdRSlMdmW/NBfC7lX+15+j/04=\",\"E+0GjyMl1gmL+X9CAQE8nMNmwiEoFzA6VA+iGlMLIYY=\",\"CGoYVMwSYS3cKdgTCiJESPuz8H+s7vHEV7IShly69/M=\",\"KOCQX7KwzaJIBQdgVeepdEh8Fj9uJ13m8KecKVP0JoY=\",\"E0gqfovxfL8NcpqHe5N0ub3DgoGNCCnfd4UWHIRd9aQ=\",\"BBHx66mAocIkbp27/JXtUHhlkemXBu6pO1D9TrdzJ5I=\",\"Lk0u8p+nhVqEecOF7lheGRr+BeSUjTr7JhcTrjhGlEo=\",\"FNCwGLMyIj2NOkWFNv1LssirJ2WzXPvRtPWvK8fuu4U=\",\"B62msFoV4ijHA+od7tDYmgkMiI4ErquTuQMmDTH7Y6s=\",\"Ar+PFILUF4In2puoFB+Y12TX0lcj0SpHSgqvK29QD98=\",\"F3HsXo0gKvn7tabM2SgIBp/5ihA8o45gIW9MKb0TgCc=\",\"HMRYGDg+cfqrsfCUen8uLG/fhM5Dva6zEI65XIU7lRw=\",\"IcpPuzjF77SJqFjtm1VQy+gHZYB93rVAOVapHTvqOSE=\",\"CyZFRMEUdEut0UCoExJIbG7OFQhRB/5BdD/7xCRXGQs=\",\"Bj+XPY95VbIww/Yj6GdpqPH/9qLxb1QqpdJUUNd9+iY=\",\"DKVnyMYHS6+Jds+xxdby0zndabkcO4Y2C7crbN3yoFo=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"DoRUbUMVbspuqZRaHwv+DQcMe19ZahZdb1stsl1wyJg=\",\"JVIkRoE3+lcx9KeVMbDkFGf8Fnpz7/mi+GBupLiFQVc=\",\"XkROC/swAlku3zsaF7YaypbMT1U2nqC4WNAKJClBOw==\",\"LJVHzIwwJ5Vy9D9smOV9AHqNjgCv4yMvIshtks+zMC4=\",\"Eo0efdM7in7/OHcSEMPi4yVCknq4pb9wswTqxlpeiaU=\",\"EX6lUDh5iaJyZwWdBOqycXHZetF3tHIrkHaseFBGklk=\",\"CcLZYoAegUJ0JMO4KjwlkPPToBX10F364D8WRuhbg6g=\",\"JtEVHDTURNYTgPYYE3zRLThWpREsGiKQh9Ujf841JAI=\",\"Bx3iqpWTpr5g2CXfmPQzzK/1aej0VLV6GpKjoXlBm0A=\",\"B4r2lcoZJtAhGgx0sVymohshUwdRtsifFqdlPXt0knM=\",\"EPrAJK+pKXT09LQ3d8MfDq7IOAaOJBc0FuPlXxj3Qik=\",\"JSokFky2lpcPJpaCTterQKQizS9WHBrdWnuU2ch4hBY=\",\"LcHMo4BZm42cdFJPXzcOzEHSLEx5Jxen/5GJPJ6Hi9I=\",\"DxlwxWbIAspR8yjXphZocyZguEcB283HOI3dsNUD0ys=\",\"FEEK4Ua6GUQb38mfiP0kJaMEWO+BqXywdXJ43nxxtuM=\",\"DqndOXBsJ9p7B0ODh3FMjphqN8a8uc/gqkE+2x1CZiA=\",\"EqDsVyFNeDOW5z5mzY0WOuIHr96gk/YsoIwdA4SeuB4=\",\"FfbjzQhotOO97thnDMvTWwhLLsfZ9w4bDhv5F59OeqI=\",\"Jz/6P5a2+ZDlusPakSH+rUxV6aU6TMze2O93aHd+BLc=\",\"Jlx9UDAKzNRR+dEKBWoKnEthlgq8esB/QFVE0r6YHNM=\",\"JXBOyCvPJFgXwLDDhCj4Dgl9GB/kvmdMVqQxcEuBIgs=\",\"K8AEpw+Tgl/H3aRhFkKBnVZn0MhN4C0Qj6JOdVOo7Z4=\",\"LGew6T3s891D7PKv+2yOwmgbUw6J8ChZJkn7hTq2kT0=\",\"JdGVcJMAXE7d8PUJYOxmuwpx6Z3+Y184giJLpQ6ioZw=\",\"DAWq199hBTm+5pD/M4QmcA7lcBLf5EtFYEfBaNnyMPI=\",\"Cgn+tFtEFoX5YHhPIKnapnn/7YNDmX4Cj9Un8clhXxw=\",\"DDMXtuDxcCTz6NSNe+eN5R5gA3sJiTX3FcX3r+7uVVk=\",\"GGAC4AaHUBXHmVtRKrKXubairOL4sfIzhPVFpHoJ600=\",\"BgfyGaCkLWWHGAOUb0aP4amQl496fcCmVlKCJAvv6F0=\",\"CDBUxzFT8llCgvQlr7IbwGB2ggoqk2yi6IqpPRmK2J8=\",\"HSefGKSySLvGG/Jkc5S9ztD7lcis7m3QNsDt4MJQBJ4=\",\"Lp/eibotzs9KDRGBW23SqTrQB2YLZ8FOhOSEVSG0d1U=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"Bmv88Hpki86qGd7BAx+rxXOVxNyjUDAAqY66GcVP6XA=\",\"J2rH0VafZx7o8j6mizSyAEiLp/GNkF5nqwFIvKFS0lo=\",\"LyDy9CYYavDuMhKCsAoqZB7islE5lzTRXhmvJ+zULeM=\",\"HJakYOd49K9QFfUs04zyxBpqnoX2owu180NdvMt7nk4=\",\"In2nyZMP3ABHbKaShylBG55lvc02GtJ7ZuxMTltSmlc=\",\"J7ESexzm8GhuByLVxaDPiEesaN2OtJihovYSSk59Pso=\",\"ClEMy1L0RsSKnYhta3pnBWgDVlAOY7St/ENgijDA1a0=\",\"GHKXgRp4yEXcyCHYGT0q4szIvm/AVS8+gQ7ZotBE1/o=\",\"IpeT2YwZjjVYOK2UENFpMOiP8B4KhrgHT/dTNq//WW8=\",\"EhTPbGmcRu+I/zcTvp877sTqJ8r+7SkzJsfbQWazHOk=\",\"IJnPrMqqyyXowXMP+dkcb4L89DZYmxjRoJL2HHZq+cI=\",\"IyKGaFTQwD29iRvKA08XbkEd2gQgO0fKBMosKoKqXyM=\",\"Cv5BhPuK966Rd97ZOvtR3/VQyQ/Uq2JMlbngvbJ1/8U=\",\"GJgexOey3Vt1BXFxMyFQ1i4uvtW8Y+5jKmzLQUZ0X5Q=\",\"H7asCIb52vzaB30nDv/rk6oHTCamLqbP0UG4IyTf9VY=\",\"Kuraz6hBCkwHq9p0v4WAa3A0eFJ5qVsXxux6DsvE9y0=\",\"DmQNAeXtJDlhvUNh4tO2abzFvzW70wGB4jFQPg6gQyk=\",\"LoeLpXHwrkPF15zAS+zHyOZTFsm2uDwM1WEk3VGWb/w=\",\"DkZxVIME3GMB4wNgAW832CiehXDE/dEYnMf628AvZxk=\",\"BJ8yoRBDfhVSrmFj4IkNU0sES74v84OeuYCscrFcqD0=\",\"Kb5/0hTVrDoh6TB3PqRATK2Oe3UbAuGGcR4HeXNivms=\",\"BtQkf+dwtr9Rx7c5++zDqkGPWSDu92JGdoNawa4GHWY=\",\"IcAqnuyJShrC61bSdBCtYgEi46Wt+4qPg+5hf5Uly9I=\",\"IytHBVgRIfYs/yt50MjqQ9tHUU+tx0GzMGppAKC7kCE=\",\"AqMTfQ4KmYfQby/S3J9hwi499V1JKaIyIkLWprNuYUE=\",\"EoFCUKc0UAQB5Bxl2olJZj16/oxoaGQ6Hf0IY4nCnRU=\",\"HSIVh+as3NBBvA4WSpyoSXCAfeRqdnODxEJiy/ob+XI=\",\"EV7AhdqKODkhKuSekyQ6JfOy80xTtXhtVXbopeYmMZ4=\",\"DN0I1ccQ5JelgxZpIzYNFiFa2aOhYp2qqwWHtF3pULk=\",\"CSHEVPez0ZqMdmh1ljMF9LTW9/i+GixBGTFd/yXBEag=\",\"G4fRMtCP5aZHiyzk9A1zuNRSL+I6SybpazHJu2o77Wk=\",\"Iq4r5Vuzx2QEdyhr5ol3bhUUyIcuHgNh7jaxMTjQ9vw=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"I3rGqq0uKt54u75GttU2RsdASi+6MXlcMx242kFF5aw=\",\"KHcYn0wNn+AbqjOiuCC4Sko6i5KWTqnHshSeSiVH1Sc=\",\"E2puADHSdyiNWGgkmUzdPaMiIfyUvZyWHLtKNxxtFuQ=\",\"GKl+ehIOefJdyHZQpWpYBgStD+mae1yTspW3Ix/BPjU=\",\"KYqJAzBAjS6z5qoxNH5NaMG7l5oj2ccmbmO0dYD6yRM=\",\"GR1de5WnObt1vxnWP454fdFP6UVAiqmHx0msAaTl1HY=\",\"JEni1SbikgYn2ZPu189N5XFVoA5fBx8Fm5Tq7XNkWzU=\",\"AaA2TuaMucinoOgB2q4MzAfZK4Joa/W95ywHQkf2dno=\",\"Hoja7yJywPH5eSpthfKbQD3usfTyNFItKBEsRmeQznE=\",\"LEsNHGYGKvlvccayPqdw9eU8OZZ/DTsalQ32fJdmQy4=\",\"B62Gn50T2bJws3zyVbV3NGyihviXnlRhgsS5E5No0YY=\",\"IBXZaTfoI7SdjrL3vPO+gqi26pv1O1/bUqS/csQ3Wp4=\",\"GuguIijwCAs3rA13CDw2E/rYJCtCDeGiT9Y3bNyNefY=\",\"J/Dr+m4uyf7SOiXAfN9op92L7DnOBFwV+g6SG3XfMd0=\",\"GxKSEerfSNIo56E6m62gQu3VFk6lldUjUDcnQZpbalw=\",\"FUG0471C6Sh7XgveWtfDznbdMmoOU0GIkgZ6bPu8G/E=\",\"A8uc/1D02dF0/+RuOCGE2amTBvNQlxFWuFnXbROkIA4=\",\"IZEXbS/ms2ByJ/F67NcR0xrOGnGYeWLatZ4tTb39yj8=\",\"AzOpj4SiIKWbI7QabuxfEpOq5lqcFBL9vQW2xzDn/oY=\",\"HTEz3Eee0EF5Hv2fRJrGt6KrZwicKurcAzsSOJU0yMo=\",\"EalXyKzAQ+HdAiijvD4spQVNrRPBxoXT/RxwFdxUG4g=\",\"CasdV2TRqzcncOcqc08yNOlE8jHVW0gC/u6iH/AM/+0=\",\"KrB/ygCa43hNkXLNDeegOrG0EyB3VCSdVOARVnHGFkg=\",\"LybctbAUtyv4p98BAIR3VOwJv2mrIwUKpqtFuL1JqLQ=\",\"EoMZFDdfq0vwLVkj1PsH9Z6n7Hb8Qk6tqGIof6wBIao=\",\"DwG3ZkZN8qlHF+C1Zw22NUaBbQ7JUedPq9IHA2RRPhA=\",\"HuwVluByFfEgxx87f+LIcsDR8OzCRHzQOC/8Gz10zLk=\",\"E6nfP2ycA2PI6Buy7AasASTKzDqvv8uZzg0SsVwdlg8=\",\"CZQaF64e2Nac4UASXEkwbK6eoKA3VjzZPa3MCcG4mUo=\",\"B5D8PUR+0QWL1eylfTetuo1kXVxC50QeXFCObLKn1YE=\",\"DhH4lR7cVRrcBzMmE47zST7IEu1kNADFPaAtSQM5Y8A=\",\"HvUNQ44PsyYOYV8gRN9AvPcL+txrgZSBIi3cNuOc8cI=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"GabJ5RdUoboKxvKDgapFPpKZUUA3lNP1dWatylRZPO4=\",\"L+KzICegSKs8n+V+Dg5jFowb6r6cw/Uyi/xuJiDRwKg=\",\"JSo1OGXRv2304kO66mEtjWeljJuRtovm9quf1s+m8FI=\",\"JEW5RaZa/SyMbR4SIk8OG1p6TqFYpn3UYX+NQII5vWg=\",\"Ku3DqD3DJKIfwGsG8TlNalY2wvGR8lLp2SfMqzuKR9I=\",\"Ee88I3Ktjg/trSral0DPEE/d/l8mp0dZ4XTu+m9arkk=\",\"FlQKT22Gc4iGbnmk8yfFC8Bser+I30+rGvVblpPAgz0=\",\"ImqM87T9k/sCdgKoTlyE4Z+r2zxrBkGQMQcjjnRz9NA=\",\"FYKZSTMa7PAAap6PRvAooT77d1SXZyFiLWW2+crFdW8=\",\"IZoGM8v/oSm4vmZMMqFdjG8wf7APonJnYo3op8vU2hI=\",\"De884wTgsfhopANvtii844GpKTHejdZY+aTbaYCMLFw=\",\"K8y82iInDWxi7/uOOSu3+5djeZO8ECU4xc1Y6Ioiik4=\",\"GIFy/ngdexgEyYdecyrlupLaMOP+eRkxcqmyrSZrkS8=\",\"HzDl1wzFFMeKh4KZ9S8pjq77xzgR/WmorwTW4bI1+Pw=\",\"A23X6y03xY8AZO9TnECf8bKGbz43mVoOa2PS4SeUpl0=\",\"KUPRccxnjUs+e96fuozGvsEj/Z4YABcEB0xrU7LX+lU=\",\"FtO9mKE2zG7RfXHn7RUOZZvCHjBIWdfpHbSnUxGxLBc=\",\"LMRjYZVLFW8i3qS05YNtAXrV6Gbfb5F5aWg26wuezeU=\",\"IJNzKZNFjB3FB1qQdy7rKCOVA+vSruCwgx8lO1eV9DE=\",\"JvsKM9i6mfnWZv4iFJtLnCiPejVvfU1iygGcQm6uVvY=\",\"LKnlNEkotMX29tcuxLv58zFWO5P3jFtsaT+coFoDudc=\",\"D4as6e6s79Ez5vnlsn52jU3EH6ikttC2Q9WamblyuX4=\",\"FqplKMPlygcGDUDK8gUPx8EZnz6gjEvShB+IFvjdu7Y=\",\"Gq8KNRJ1FEGrr2Y7UbzMgrSqngMflfxa2DG29RBLMug=\",\"AWk9EtwzNzBlkhCUxv+1nx8DYbDFzhsg6PP08broBd8=\",\"Glse7F2FXMcWq6zWte95rUgTvHT6MmXg9JZnaAiOJKU=\",\"Gpghmql4RfA5MJrjFOFljK8zxyI11aBFoRIxBI3IWHE=\",\"J9OP6y88pzvm54svUduekEvXjT9+1JVjSyLCmyiEeUM=\",\"J7Iet1FqhCILx5xrpaNf3gxYBNTcK0afA0+TJFzVjmQ=\",\"EIgsxUx2wFfoTilthWj9aKQahrtZXP5kTe9d7hbitgw=\",\"KloBXu/3zUjF+dZrruZkfr9B/nPxWZm4Wqc4JJZn+Ak=\",\"C7VcqOwmNZMIGn8UDIj/DsqBVIzmwvxm08kEHn5hpS0=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"Ealfr3eCZE5m3WkHcL6NWK/5shwlKhc1MVno5qnNLQQ=\",\"GAm8T3T42g5WMgF5s1z8zwhTGjg/jzjwVVZ/VN5AiFY=\",\"KVduvotHKqs8QYhmtle0vq1a6+tGcxrBaGI0+ZfIBk0=\",\"AV/ddSp04HajusxCWsF++XSrTOANmOO3ZuTp2lBjOL8=\",\"Cjmv6xF3LyC9RCEsxSdNuq65EsBzqxIKDjpc/y+VMhs=\",\"G9PIOXZ4DbdPS/JhtglQW6F9QmmoI/rDYBOBQvtIK8I=\",\"JFUDWXWVIpmvq2eOkBeAF65ZwC6ItmrL/TOpqX5AU+w=\",\"D1TG5YJweUDTeoEFfgMxlnMo8EArE59AoVKlNwUNTuo=\",\"Dz7fSxAh357nW/dyiONcE1vvLmQTF62/8srNHNY9+mg=\",\"FaSynvLePmbk7L2Ztj/nhMPRY1NAh9bnUpNeOmaoEGE=\",\"Ai3gHFJe2sBM5kGORN9iz86Bq8MjjAgypXIegUEBJNs=\",\"L3XPuy1yqTZhaRs8MT1zy/SOVwr/SomBVlaR2+bnJE4=\",\"F2IV5t3kWLqU/mzTKIarSQxE0/NXCPuDrAMpV0d0cOU=\",\"ElIkZRYyvq4jYmifPymMPRzd4geGtwDPFU2t8ErqArI=\",\"Ja3ASAq5BmKs4Y7XHU7CQ7XRGL7fhmiA5REieGIWV+o=\",\"DxZWMjz1EsoT3Z1Ttv6kjQvAO3oKUQodHDdtfIecCm0=\",\"H3/KNfGdm8mpxRC9kER3qCp3nfUrPZOKNK03C8vhB6k=\",\"FlDxDXAgDEz5GIrnK2OKSO+ohdDVfk7vO60ZCBF8rkc=\",\"Lvperw2YSKK6BCa+yw7bQSf0r6C5Uy88yPY/3G+fFKM=\",\"CtQCwUqK78sNxntdPB3xiNHOzj3g9TyzE71jBZTiASM=\",\"CYdOeqyATgpywh7/aADZkydjbBvQV1LNOYwuGSEKksI=\",\"En1uZtxN5ycrwOYXTKQPSGGOHJDOcfFz4DYyeObibts=\",\"F4sNIZ3J+w1JH9yijYnU9B0OZQwp2Al6bvmCo9RWhu4=\",\"CFZWNhFifZ0Xb2KWaMGacZWwvvg6AgEUhVlsD7N1lbw=\",\"BPAeE+fgHw+2B/OaM05axaFGScZQB98uASXSwH8WX0w=\",\"L90fakdG/8NyH+YBsxM1h0ojwDU7IXzGpl+YtSxIwyw=\",\"F3MsyaerdWs+0k9LXNNIsnxHawgEpH6OgCT8oouFgCI=\",\"CPnkol72WITdaxWcOWRH8R83TPeBqJMrQ25CjYQH77A=\",\"GFU2NkAQiI7IJyY702KCoGCVVgIZIK2DSRWcgNaJU5g=\",\"H9CHn5Yot26vAy2wkrtsr4oDxDeo58wMgclTEhPWG4s=\",\"Ei/AKg0G3KqLwbpS3HkFyhPydmAjqOeBGHYHHLC8uvg=\",\"CBMAUv/vf73G0b04M0IS8083FfC9HfwbNutYMx9ekQY=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"IchUU7XI9Ts+Q0mRWczvUVL8m8OxTPHWfkqA5JvYOw==\",\"Jz007WDpRf6XK2fCwVVlPhxcOMTN/3xXU958aNO8MmE=\",\"Dtj4wLZEI4lWZO4EyZT/vxrtFuuPbSwFtG7fB6VtJ3c=\",\"CdvBYsOTdc9iR94xWoXhcwxFHllnFJm3urn3PsR8cMI=\",\"K8wyjbfFcfiS09k0rnwDF5JXHXFvUUlOixD61gufUq8=\",\"DyMz46ssejwTQg1DgPKo/IZ1ONt4gqX6ao2JnkmBiJo=\",\"G+u9fD6Itj7TfDc+NZp0GjjRuN5gitzAULBR3/e1FYA=\",\"EBsc/OCemvvMmVruhXEVdN43H/dqKT7LJrR5aha8V+k=\",\"CYZrh23lOXPVSqAaMJVxkDHgpep44mGUQi36qAx+Obg=\",\"DTS76t0QoFVqQMsOX4T/2WuqgmIdfYUCYBFTEv7xpc4=\",\"Hc3N3MCqfuKFIuWzMbKAX7laddLpD4dpQAkcTFc0VDM=\",\"IiAT4csEtW0jL4BmZPS5UL7hyJZdSd/lnH2afze+cKQ=\",\"FA6wpA9gCYm8cJN+L7PbDhy/TulTu137EcOsJXEFrL8=\",\"AcKhDAEEaivQbsoaeFDYgV26nctQAnENRpdj7hLOcz4=\",\"BL5cnBoW6vJPD9YmA+36sqcxSIxvAGaim92W+FlfkD8=\",\"KqG9dUbBXQVFLB7OwHvhqW0akW9jBvEer1IUW+PvxB0=\",\"HqnXEIBpWCxNtAAP6cmZ1QpnMv7/UAme1YY5lqD038I=\",\"AkSwI0bB56oiPhzXPMhN4canKeciQQvNnGwhwQ+BrKM=\",\"CBjzgilPDSrR5QyQjW1YsFZ+rORSSRx+fi7I8C3N8w8=\",\"GoidQXhh8HYDMEWBa9nRUtw4pkNEh2Q1xDFFVR6TjFc=\",\"AqdB4PGEJJf79IH9uDivdvAWx8f5AtDxz5GUbZsZuPA=\",\"BtpaV7oeHw4CtlJU17pBcK2fQvjC4gndNILZ0QDctpw=\",\"KwFdl+mGwi9jnUOZWOVYIZKuKjxeY6k4du4s7wHMZKo=\",\"Dm/YTs5EBTKx0qhHlKLAkF0U3t8h8cuI7wEdbUCkSWY=\",\"GAzED5saVR1vIaJhajH7FK495s0/kJBQkBEvCM0qUX8=\",\"ETva59zbVaWilEngGWp8oZeF6PQGqvgddPfGWGBNe1o=\",\"CuoaERuVYjjiA0vYLrZWZynWt0RzjQ+QfCTpHPDicNk=\",\"LYd8DTY33MvOb87RTeDbGJ6jfiGSWV0x73vjUEK0l4k=\",\"BkoTaeVDmAFZf19OKpUFjgAcw7fUSaqH+ZHIEhlZBZI=\",\"EzQFu25eJFoOw3hc0wDtVXBvRlGRzGrwXev8Cf8yPu0=\",\"IovKf5OQ4M/hElrwt86ysij+fTc+O/4Hc4VoJmndYjE=\",\"CQEWOE6laQgr30NzQcAwlKHziO4hfA5qujmHpVz2LT8=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"Lc7cwSlZq6G4FRUOwkBR+03YRAIIsPTu9wbzZHCf1k4=\",\"BKoFCeepRVRJCIXwvABVtPI6AD4Uos3FGo8VALc4USw=\",\"GtO2Y0pj0b2X2NdFiIOH5wML4r1SGchN5aSyH25tXJ8=\",\"JyL/kfqzEdXNSTMFyi5YHSOrNRA7ejHXQ2+0NR5RZ8I=\",\"F1bjT3rwvjLcQxLJFKxItg7YkuCpQYZrWZDEdTJqCgg=\",\"H5aBom1YGsh/xIbYRTgqqK+zF4L83BauPplr956JENo=\",\"LEB1k6pv6pRtDsEonlncmT28HWiaAu/v2RbEK1bU4FY=\",\"EtWh81o77nvoe+tpC+87Qi1NsZ8Y9Fc0XFsTcyIT3kE=\",\"HkRNRRDiy1QqS9GvUjKrg3blmY9pGTJDUJsFZItZ4xc=\",\"HFEYa9Vz9tjjncnl+FrZVO5klRuiRV3Nn0FbLvRIE64=\",\"JMhGF9DwJm/PGEZOsIQi9RYzkVOAaWtXHfzVL9yrOCU=\",\"SJTSb7uWlFQofhVgyB8L0z6ToP8ONg+ILwNiH/u3JA==\",\"DWaeFwxEKAibtJDorze/K0iF9h9JFU6vS8poZzITMM8=\",\"BU6tHnCmiipb8PmDHIs34MRpKECl7szi8QhCqp/0x30=\",\"Cv/LzKbTU9wAYPbA6Hp+1pJtZRji4gGB52sOvD5Vc4s=\",\"IfymIQFqdxoYHvyv9TZHz4rFXDCBPH4bfgxUsbFNT+E=\",\"EvLkaVe4iRDDDJVU/QF4DgdIcPud8CUstzXexw391t8=\",\"FrqtRTYaUFLGAIoCgDZWEI2Lzxq2Xz0e6chm4qBPFxM=\",\"ICz9xMuFznA7esQcv5BFk0gclR+fqlLkRZTD0K/18HA=\",\"J4KDc2Y2bC+blDcU5qEQlzITlHE1d/5Z2+cqePTZN0E=\",\"DdhjvG6aCr2UeyaEq+VVomnaHrekkepsXTxE4MvbwNY=\",\"KxqwpbVRbXpPMbaMk/IWOKO7ue0yG5kVQStCKSno1C0=\",\"JHxoTMhy31LCOW1S9caR5FnhgVRs1kT7pBhDvto18H8=\",\"F7Cb69/9rMbTq9/U/d6wodBBUFYxGd72DZrp3msT0Lk=\",\"IDd8asHWZ+6viOABZI2hSeom7LqsrwefCgif1uxCaU0=\",\"J7qui5qToJRZ/0yIFQuT6fo/3rTXGdN+T7A7Ka/eGw8=\",\"DhBbBNHW77De+d0/Q2VRgcvkoeoynnec7DNeJxkNCEA=\",\"FoSpRjsBKG5d2sdrmQxq4oXIH8T353FbHdyCflyqgvQ=\",\"GhFx0vDjwTG6tO1hP6ERu4XzYFAoAo9cEze0q1Qq81Y=\",\"IodC+SbBEsRDvC42K+ikTEntZuFwOPe+KX1RSCxUitQ=\",\"EL2E7qlF/rtH9yluW7gzN47Cb2HDbZVLh6VCN1Sw0dE=\",\"AtF8rJbyJYmAOOXsFlYPZWP3aKfhJ78Q/4zhu6Y9Ay8=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"IwkdYnTXLwUWwR5SxiqJ4sIYrPzsJp2FiCRrxj2v0wc=\",\"CUALfpeBK/gyG5azxLtpXatQmTThl++Tk9mSGjIP3F4=\",\"HJyOJpt7XSUn4gtdNA8peP5PC5aeKx8zta2KzgWTEDY=\",\"KbyvmXj+MB7mTwMvO2xa7kf6iaEYSQ7Ol15HZaaI4nc=\",\"LEPuRi5eqldAmISkv4IRb8dPBgzT7YeySQZr11PleDM=\",\"AQReqe/dLTdlTy9Bm8HB4H3/wTp454Mp1mqA6Ba3Xg8=\",\"C92ZDwnA+/yvsK1dLnYJ/GOfRkMmK5/mBksc2fWf6p8=\",\"HMOuy2XYjBF+B3dzsqwyHx41VSu4Ls+vwZptf1jMoLU=\",\"I0ynXtormNp6pLy9rwG5SguhFqfNTe8IZOJ7pWYjrFY=\",\"HlhEpHnvh0NJQW7+StFMaRu9TWC2oGn/b8zwtCaDaKg=\",\"Fc9LkJ7dzAr4TUWqKlzkDwBM6iM33oIhS1sbi8Jfr8c=\",\"Ify6oj25gW9Fn+XepgNfRBa/6p5GsasVAzX8mGpdNFQ=\",\"IwltGTxUIBX16nKUXkJ2AdjFITZSzHvtFaJhGECPNSg=\",\"Ee85MPrlVuVoiy5cW2Rqm88syMnthGmXmOOAU02huho=\",\"CygEoMOeBAYiDSPlGA6jR0O4IyWdxcA34n+hTZeqEjY=\",\"ApNhinE6524AFlQ5bx586YhfB1FdGlKuYYi7aEEc3hk=\",\"IIO8Uj9I8jEP0E20N45zs+SndMBMgnIcNH2EHNQpwe4=\",\"CvezYshIEt8gUtDgStB9gwEAB5MnVnp0Hw4zsF8go68=\",\"Lwqb+gJFcanq67i2yDjuFTKY+NZigmZbjUE+Z/uc/nU=\",\"COX5fPI5hGxLsiFRxPxrVPbAeDOdSINMtnQQjrzVM9g=\",\"Kte+YLNMEy1idYppnuK5uZArWmb00KFzKVf6MSaTEws=\",\"K9gT6oH9K+BM90Nhqp7AOJCuncnyxi45KqAHe871w58=\",\"LnIFUQEbC5nYoCZfhw7ID5uGagpfFYorr1ZH8H6+mYI=\",\"K/GLamktTGQYW1lSP9daBFpIRNjfLZMcc5+kU3QLPME=\",\"HBZvfMtppZ22s3SzVfsI1Q6vTfd2CywwhLIp6CLYWNQ=\",\"B5thDXfALppxYovblSTXWumCK5jTL1vIYk41EvrawJc=\",\"GRbeiE/pysE4BsT3BhSI8KV6vRrkA6sCV9IbSKDkEe4=\",\"DxB/ocnUp3TPwQvLw7OP1weODzdLXpvbOOHgTSbTw4M=\",\"Gz7xSCwVkjZm4c1drcqCZhv+wKOlj4nlT76P4kKGaek=\",\"Cie6JKKnrTXsU6EloER6v/zMaKkVhSP/iM/XOLAhKAI=\",\"GlJe1i7/Br0Tnz+ljQiMg2w4Gp74Wb8W0MTtJABGOk8=\",\"CCLrlkXJZdT2tncZEpTgtcdX1EjOUmb3auj/iJi20N8=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"GvRvCPbPGadeLeyiUKBiJEpUFBPMpxg837j/NJYoNnc=\",\"GDnOYbjHK9rBFvsm5o2xE2sh52KoDcJjQ0zq6T5x4iY=\",\"B7zSnnpGxXutMlYxudxw93l0bk4+g7YUnPfWUiQpnME=\",\"Cljes0oap6l/vW3lUpStbtkRcx2g8Zc7swzE5Q+XRjM=\",\"wYmGLXZ8nVUSi1X7rSxTw8fwnzzDgFQEurgdiBwfeQ==\",\"A/CPXbAsjEGX+7dDFj+pjiFQk7gzygwdcJowUX8b/2c=\",\"G9mXxa5i9GpPoIxx3YKB+iDaF3xFpbXg6ky+QqnXaLw=\",\"Hc3GFaHSl4bCprnTVuFfFLBRYCLaDII3Mp2c4x5skGQ=\",\"ISXBBl2MQq8NvA1EvilyPeMDFrsZDkh/rHnGxlGAxto=\",\"Kp3YRrmpJQMD6hjafdL2fYUlB01CWWVrnQ3vfy7gGNE=\",\"Kh2kYKtwfzFlOGKrbfC/r0dNOcuQnXuEMUSCrYAVvLg=\",\"L0YgvoPdQqmBDO+BaAHNinfVkUZ1P9lYmkQ39DxE4pU=\",\"I5C8PuIoqy3K4H/XfS8rgrOb5KP6nRWoJnjUh6TO1+M=\",\"CgJFrnyTqroRCXlWLxuzji1uR/j1gUbC4K8ppCqPIiU=\",\"J+PZ98DWwyqduMeaP/9yJ4JWebrEScxVZ/Ie3CE9lKk=\",\"IXLnQVH8A+sgHj4wCyoIV5jm0nQm2pueLs6sQDdMlbY=\",\"JGpoUkapQD6wHNs4Czm0mzXWSRNocJVCYK/CPlESlGA=\",\"BPBQ9wQ7GDzzX2XlWQvR75saiLmhFU5aa0i5A2dnnM8=\",\"GtWMcKwTcUtyHH4eQ0dJg1JL9e116go3WWTBfu+Jes0=\",\"CdNxnVIYZCHL6HCo3BbKEtR5RHu8G3IJmR0q2pzdBVI=\",\"Cy1gW4DS0WuLzJNr6RqbWL83IWDFghTV0FNAJo2yk+c=\",\"Fe/BvhcvDBz4DCiBYWPWKBeW/j92dEnc5wADGpgJOC4=\",\"GKcsp1gGGKZ3LcN9otDsNyETCpPtK69+6KRYIVNRxb0=\",\"GElfH6KwlXOwEipvO7xi3I7aDHc8JM/slGYxvSJqUiI=\",\"IoNeUVNQc5eDw2HLdFQZAyvm16FsJ83nds2aQ1CdUCc=\",\"D78fpTak104etRfctxXb1X6ch5/dEYSVbhrqdCxLDBE=\",\"G/pK1ZG8Ak8Vb2nBxs4DPmVQf28qG1D5o3Dqlt/7T+E=\",\"C0juAMGjuHPaBAgiyNhKfUE7B4BsXvbuFnBQKieXeI0=\",\"Gwwsn/Fkn9oGFVr5xAGVfa0GuhHJ1sKErD1/ay4CGW8=\",\"EbmFfHrB5V1mlrkyPqzSt16OZNhjIh9MSbUMCvTdyQc=\",\"BNKRPkNIZLytzQoPGHdR28/uaPjULtoAr9+fzCVKkpc=\",\"DUeoa6TkwzqzfwCq7++s9pLBuvmzfbBoCX9hn0QGH7E=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"LuCMDk1/Fj/NETU5tL521bjG3MMGmUAW4vULQGWsDGU=\",\"Lk7jdx5XDKw2Fmb7tiMAM/DS5d9aQyB/TIxGQvycpHM=\",\"IueMm9GDEdIlufiMEXyxjmWHR9UAu79hwpH+fr4r7Q==\",\"GwFc+kkPpwW+O59WRdTaojwgmMsJOfAZ0WlwGbAKRDU=\",\"FT1xZTKxhWtCWwfFz3P37EutNFj/ngMdbBkdoMUVD1o=\",\"Jd3/dkXBzaq7UqOuJpMWIKQYbtNcuRSwy3a+xR97Vho=\",\"Ib3qcXR6RRx+gl5QjuTEDfQEBMARzV991iztBfOEFDc=\",\"L+2mLbJVtlXzvpakhH0vFpHOZYRWaX7MYCWJw/8GdNs=\",\"DTGHVBAHk2ljzUu2yTWWt8+lbYKN852fj/Bdk03vD/4=\",\"JuYz+XDbugOP+jDXNf80VBEI4ve8Dlj7JbjQOOtXTB0=\",\"I8hHP5UEvAQmb6dr9wZNiYD6yEVPv0T2jF6T/De7/Zs=\",\"GHp6Mo6+MPP+92IOxYKuO0V+0djf+KMNYMUYwdP4UCo=\",\"EHKkGZ3VMq49NvLD8HNZFIvk2Byh8ewGvOwslLUAMNU=\",\"AdnJxkzO0Zc0xW9i9q3tzPVKrbFw1JmpFhfHvDTwIHo=\",\"GwmUUXmCJRG8Czsgr7dvFGsRkFHixsj1ud3gPMdhsXA=\",\"KdE3n0DAnZqBBfGBT5z0z6hBnVRCwiV1oPmDb/ZyghY=\",\"IAgJtucRQISiOyWcxt2NSqm+yj7oBlV6JQ+YUjNj1YM=\",\"Exafh/TVvNyAJ3/Uv5MXRKCdSwMy5OVNw1HsFvJW2yQ=\",\"IkhtzStQxabosIzb4BKQcIOBcHO5dahCdRqqSXOJoJI=\",\"mGrtexD8nP9KgNXjOPaerkqiW0XZMUmfvnCA/hOoQQ==\",\"KjNGyXSn+qjwIccrS1FtxScDPdlt2HopATpU/yNQadA=\",\"GsCEh7U1M48Y85u7JBDgwE/u0bAjwrMaacQoQ7Rse04=\",\"LbTrJCDVcSPchvgsKJeI9PWIIUPnAjfteu0rMY8vP2o=\",\"F54Vbw9iKeYlnctlba3bJz773Fe3ixgAs/1JKtTi7oU=\",\"GPHtQsLcqZW6aytBg3gVkAXaX9bUbzHUJOQE/fhezQ4=\",\"EtHdsxJcFcYeGgdwns0XgsrZKDEr9NMtq8DzJEuYwGc=\",\"GaVV7ppXsPJJ92LmPwL8ncQUIVaeQBRtJ7gF1pJtvRc=\",\"IpBQOeuS8GjaTafyuv5lsXQ/wqwV29HftQtqi4kPyTM=\",\"Kq0ws/2liMQzZzIDI8Zups8xN83PEwbpPRc/Gl9bqwo=\",\"BmHZXa/qPaZYRMcxR9hrihUqDHN8ZVDSpZBZe2viiYY=\",\"FJ9pvuaxJSnSoTMqIv9srkE7hk2lIyGB3OUoNDSI+5w=\",\"L0AQfaLrpOHYFs981IiGGGOkYOXgB4DDwH9WyUYJayQ=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"CJUXOZ/a/MCQ/6y/oPgrGjVsGCqbi+5aElr6FEFmk6A=\",\"AesDIM5o5cCoubbIzu3d8u7EqN/8d19DqpVF9EMvFZc=\",\"CbOzgCke1G2uXsZ3mvUX1MglPvYJ54o2EeCaap68+3Y=\",\"JxLqReqIpU5Imd4TP50CRUAEIJrqBDTtB80zyTBcAQc=\",\"E+TOxsX8t6VdLFyeDcqw/zo/fCbttcDF9bwAwDaBfp0=\",\"Ey9z86WnD+Er0HfDQHUuaDfr6+pOfowGZyw+DAmqJDY=\",\"JPWuhIx3Ze1MsgQXEUxgLoGG+wLSCbIiYu9rL59MLU8=\",\"HzID4pRsPnhNoZDqdmKNmM5GzsUNdyDGKJuaELApECs=\",\"BAWxewknNk74oZBHLPacyPuRM4rQoDemzNa3HT2KVyE=\",\"DXvpCcbSA/fruyb2iMEEWZ407a171Pp/wRxr6NIAUjQ=\",\"I7hDJmB282DCTjmvUKX3St87oAKFm2u31QOr9FzJ0zg=\",\"EuzcpA56WrUTp4hi13+QQ1zkygg1qWYRLkJFfJNSADk=\",\"JICWxHMHHHwtXI3YQAbCRcYVLg+GIh2C+dCy72igweo=\",\"EgAif2MVWOLYPFtsOG28zYwBmzJxkK5sIfXmq0S/xkQ=\",\"HXV6uxmabITZYKq0Q87+ttbkM7XOv+sZj4A+7j7/wK4=\",\"JzwZ7mvjW0uJmTSce3uDy1eqFl8LMCothSvmHoNAnZ0=\",\"LRyibKXV3OHqQtsZQmvQdBV9NeKKyY6dDiXMcQNU7Yg=\",\"Auy9LqKTQbcH15ogdEdAmCOQZVJ5VC+YN+d/ibEn1KY=\",\"JmpmQ/SxwyP9Iti9NMT5xDEDLwWwyFbhB9kscNS9UTQ=\",\"EGLpnV2+5KsMBHrEHMsBIbSS5gT+EOLbStQ932d/QmY=\",\"FfKxjQBvtfK/WAH4lzu5TsPUsD6NZWpZvAmVR4PuK2w=\",\"ByNowNXv97WfWweydUDoXqBCocgO8GNVT1OYK8WB3ds=\",\"F6pSFkUCDZpJFOVnm9xwwHcu2rrg+CwOxewpKJ4M8oY=\",\"L5aM0hJtuSYL6YrFpkJQ1rHcYNt1LOhjQt6p19bu4gk=\",\"GCTtCcqncWnDGIoKMof6ooTtelGXeCbx9kocK+MskJ8=\",\"K4+6vymdnaOPvQM9xhREriUAwSBbeFpfq4mW3Z/Szmg=\",\"G+WY7qYIKOEODEy+qVc2WE64PGrIQnMggC2Qg/Xm3TE=\",\"BGOvNMryDHss/DulQKwSj65EBpDB+/S9gV6iuFQYPqU=\",\"LbwaooC7Q8Blc/2Qq18FMK1FC5krzsJ5fOCt9gk36+8=\",\"Aqp81BYl7u0vjkYM5j0rr9ZDKZWdQMwub+HVxIvlxQE=\",\"DjyAQ5Y28rQLHtjTP3kvKl0uYC2mUUkZE7pF32Pnd94=\",\"OuTXjpD6iflD3AtMVtMvXIRnNAceob9rr+7Z6D9A9A==\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"Hzum8qCs5ngH/1T7N1KnQLkNQJj/VHGN8Hz2uZtKNhE=\",\"Ky2GiGIaC2KWjGTKsNsn9BpRsyqEmA7zF2DSNl0sPDE=\",\"J+yyh/PZqvETfUBYq9dJ/rwoC99w37flthp++9syNxo=\",\"DaehdpH2QEgzH9+hNdxWpjaxu44cCLp8sG6bsaj13CI=\",\"Io6Hz/SKwe7N3SL6P1AhT+BQXM61joqlFamyGiLN6UA=\",\"C7HglFJ0If3poSKf9IeO73ZhUt8pmPz6RKx7cZBr3vs=\",\"AhYuWxJ9fqX7Z1qmvjEBPCudlCkyT6tiupzhyiGzxfI=\",\"BefCqcWavpAYlhWhWtk+FGwnZCqtwp5OQLjdnLc19Oc=\",\"A7fnzQphyKlTzha7at+PYfSbVg4ZkUl+w69nhBNTXhI=\",\"K0im194IVT+ukGhS/H+xZh5vUDYYWj8adcmpq9DHhM8=\",\"FFHJYubV3STkXcfgeNxk/PWWNAc8E8vcW4eSpR/7jjc=\",\"Iquk1J68MG9Le04rx7eh/0QR2JiQ+fpbokCM/fv9GK4=\",\"CO3XamZrkmTDSwBpxi0sthu+7lWILqFiXT4XhUTK5KM=\",\"HPqb2p/jP52wsdGQ7qB/sNxoVbdO8WZ0Or+AqqFQT7s=\",\"IYJagiC8Q78UsG29K5JCRUej/NDosNesdUP1Y4L5hzI=\",\"IqA8n0NhKUYh+QKkMAiBLVv6ythxFywwBLe1gSZpDcA=\",\"LE1Fn897WOfXMIrwTZQ1MJVc7eAON9PtSRuG8FxJvq4=\",\"DgmWWalGgkgwsfxeF9TWA0Pyh570iPpFqeOzrz6AoUM=\",\"A7JWpUN/qO2vbXv5p7LmlfBty+gK69yk8w4oyMSkmII=\",\"BHPB3usBZkim1fPQ+kvzHR1Lm2zrDH9KdgUVFRBKYX0=\",\"CiFzXisQQNjfxGhcXFpC7QegLCFkZczdMTTBVzYZldM=\",\"AaC5buGGiXgI2RMFJXeOE9IlmkBigkVrLt+EQ04IFxY=\",\"EQ1dOGaqUqxiCyM9wNiSw5+eN2MHpzEMmUyK6sEjP00=\",\"H6nOnQi8nvQyAJKbVRIjaFLU/ftgf17yTMtmbb3wU8Q=\",\"CLj7V823ndrfQd09og773NUC6JyOITI+yZ8KqZsn3+o=\",\"IORR9Ie/fzCv5olSWN+YDHMkQFZ+8r5yD2g7TZvOk+Q=\",\"GJNMzWuU09J6+PzY8Cs7KuviFGW5JZx971F5nx2XGQE=\",\"JQKy/Las/fe/3aPpaK/GIrlJ5V1WcQDEAH+guUBZNuE=\",\"HiKpr4/f6RhTRuIqKOT6Q19kyODzgu8g8nwPGd9R5SA=\",\"G6zXh3AhnN5Hm43umdRgxzoi9nTtAGbsxV0jRMcqD+0=\",\"AcXcx3hMsaIwMEppBbBWIWGLiUmKgn6ncpO5bY+tn+M=\",\"FRT3phhNL13phRHTWFctfYnTO7LG0npf3XaBeK9Nd4k=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"KHHatK7Yzye/DpovAvDn+cRgV+qA+mTTWMSs0r+/Nco=\",\"FrSLwHGy2ddcZxXpWXiKXCxjSn7pUfYcbCUvn0yW4Tk=\",\"JCOZHizsuMfQy/H2x1qW/dnMPh00BIkQVAcIiM9YwCc=\",\"CvZInc/6BHEWbdt11GvLrlfSOekAUdNgEArK2GMJuzQ=\",\"Co+0yA8odk+0iZJvAy4Pa9a7h4q1YyuU5vlg6EF4AHI=\",\"KrPDHPndqzfwdCqu4mGQKSlSujketnZO1pQ00FUwheE=\",\"EopTcDNYO4dkQuS1J0SD0OdmoB7kqzEIOfbYpmwFK6Q=\",\"Dse/qmL4FG7yuxOvczzqZGMbIRBs1H1FaCOz2pLkFTA=\",\"HSbyeQDDzyYppUDKo/L+CJaXd4LOvsSnxfxhCq+fKI4=\",\"DNcpb8AIajiVdws9Cn4nMCyAODoBfkMraf4lAwAdFNU=\",\"Be+17o4izPeJRd3d6z9qsMzdKYCu7UdjaQEd0gF9LNw=\",\"L9MFjoJ2w+EEQQLjfIusn5zso9SJjexSJxUr2sSHYGM=\",\"MEHQ3icsxABzMaEhe6BGK0H5OWolFAeWTpD3fSDSvlQ=\",\"IrRLbceE23pAwuZwgA5GJ1i1JJ14khUWKT/hpRhm6+s=\",\"AUcvnGt0RxNILPfJ8sgu2wzcuB8jjdtTBaFOFkkJqWM=\",\"EcxQ5kcIaiHBjZJOXLQH4IldRDN7dg2V/BJUtpC4V6g=\",\"H2hwMYqXs0WEgsKy6PSJbRu/qzF9lUeGU4R7/if3OlY=\",\"BSe3eWe7RASlp42ORJRm6l3YXTbSl5L8rkribzDDklM=\",\"EUd2kGYIpFOASmqzyh+xNX7x5odyznjU+lPCGbR8Tss=\",\"Inyr8Rh6joyLmD5EUrQH060IIOnMAA6jjSKYzrr17RA=\",\"LNsW5xVNM2boghf/lDgrin3Ia0fs1QYgtl7NX5iq/Yk=\",\"C7qSpWfNFc0JI8t57EkfF1ldavgEY+m34rLJxuZi/kE=\",\"FiGgN3dOuF+7KuE2iTkkquXsA5R2TyvSBObjws0FPmY=\",\"Gy9LSXT+nE0va6jztRCEuIahFdraVU4xORDmoKKnNr4=\",\"F/BYlUVDuABdnlzwOTtml5AHblI9u1vORz1n2YtGYKE=\",\"KhMdDiwZOPU7+tUuX7MxIOsS2UEt+nwsebIKSp5hipY=\",\"Hh8XuCyOwGdHtjYp2Z5y9fPL6+i97SDAvX/Nf/hCIyE=\",\"D5La5bUHBTUkeqcGLRXf8NzVM/fveYVWsfcErMcqGpE=\",\"HibLHmfEykiEl1pdvUTfjAX2p6gT2cMmf6f3NcwUTbM=\",\"J45Gkxa80AgpYg5DivN3c0cZEk+DxQnUhHIpS+mRD5s=\",\"LZMeIca9cN0zeiHrAGzMxXDI4kg1jiVmVdTrQJ24glY=\",\"HzqudJyGwTkVFZBhX865tV14sENtaEbkqywwq+7WKKY=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"Fkzs2jrsOWPeXeqpGaQZ58Pn7WewDtP+N8lBvTrO7EE=\",\"GuXAhwQ9wZbnbywfzQBPB792IvkUgML0Pf83Rmgk4oo=\",\"IG0SGl1cDlDGaWpPajziPYboQttIuYAGERzfnrZQE2I=\",\"JzhTUW0DD5ZlA77QfZuyXpp42qqooW3UbOTq2LDOuSs=\",\"Kkc7F9qoBSAjSW+B/zRxx2uuJ+14CyO2WQViiPnIDo0=\",\"EmcArRKybIfI98kOim7cxhNTDwnQQljR0Ozwcy0UPPA=\",\"Bw9pAOIRotPtNZpEwZSURyZNUVgGefqE2s5Smg3hnUI=\",\"HRllNhZqr+mQBnVsu7FeYhkDzPsZNGzUWrlRsBNIq9E=\",\"FqZBO/02Pu6NKM7f8AyMhuFXRd7lCyrhXUX015YhPRU=\",\"FP459rwfsOCkH5zbFCuG/5XxADUZyzp3oF6WowFTEyw=\",\"LzcZhiGU7S3so3eh8bWOypqgtybT2ChZrFrLVRMVnwg=\",\"LKNl9mtZzDiFfWXhq1qEFXTVv7zQ+cJge3BCMtfYWgI=\",\"GCPTbhszhB6zSkYBZoWW/iDgjCj4dyyjlY/OU74sbCA=\",\"FdJyebfxt1FNAHNF9HAoUlB9B7ZKLxZlcY7+W3RXiJg=\",\"EbPvr71T+W7X0JNzU08plWIzUEWlHkPLGu30ACt9a7I=\",\"EqCpGmAlVGkRBo5vUP3RxuNopSr8dplSxPvZc09QBLg=\",\"qdf8ZPyQuRK0l0j6pKTcrqyPPhXfCfyS9wZrVZBFOA==\",\"FTcbdeit6kiUgiVEyNfLa2cHQa6x8cRl41eG/JxkXfg=\",\"JfsurdzeNFGeUR5lbVGpDbhRi2N1ZG/5LKpKkUAH1Rc=\",\"Lfu28eISAGw5vYndSmVD6w/PlIgv68HJWOuBAS8XzFM=\",\"KVk7t/lxuYfB76r5HNPXBHizuPUZ4hDRCUE63E3nKAc=\",\"E0zhlWqEi+xOz5tgM3EMZVtCX+ei5CqRQ9mJyHbge24=\",\"Iy5YmzJ0JKN03MZBUuwDApy8ax5pNeGHjIn32sovuMM=\",\"AqxPTZ0e1SDiH7/emLTpFpqtj3AblfeqbhonmdcrWZs=\",\"E4Q6waSAGaUArCqoMTqRQ7BF3TOBIL/EtOkcF1Cye7U=\",\"EjNm/mg/7oxYv+36BykS3Bv1DJBhFYgNSVR2PmSKfJI=\",\"FHvHfR9+9/BgSmacO7+jqlNXEaQ6jrwl94bbjJUd16k=\",\"K7XrhvKDf2mRHcOv5xbF/Il+1UocqEx+RzqSASOUFm8=\",\"JelTVZHfiD13BNvNjuh74296QPqdNguN+1o4iSk21H0=\",\"DPIqZ4fpPkrx1YUgXwOf4wKARg4CxktKpqD9Nh+gkhA=\",\"FdqolTYCMRn08yg2FACIvOkILNMtsY7cKkuWPtYWZbg=\",\"JqQavIsJadojyfURtKR6l4QG7RR/sGh9FG/3Pwo/KQg=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"JGA+PVIyY7pp0hYfe9PAG5kLlqpHm0fY57/aV3mzGnA=\",\"BvBoJ/ClKyQ0dR8b0jvvcO3IA3BIkBFKM7wbFzzT+hY=\",\"GIIazR0aGDs5dHFLTBW5qjONopmashmmXvBNZTjJ5oE=\",\"JdHHXBm9NMMeXerQ27q+y3ChlSrzuazJRea7t695q4U=\",\"LRbNSNXrnTiEeClg/F8nUpViGQxckgPxsLIgsH6+IlE=\",\"G7LrFUzqRRp1kbyJXPnLZWWBM8b2NTOntFNiGX2IPmc=\",\"LBwJnsVjNF/d8DpsVOKRXxp8iQtlVMxJaFZVPSshc8g=\",\"FN58im911cCYQ5YIrv2dPyIk/X/y0wHGKucowTzty1Y=\",\"KhKxZmaHqPOhTmFZCrAEWHoFjkLF9FhAvPDHoDSH80w=\",\"Ek9oEmgCj067ZnjgcJUcqpa8rwk1C/9PcsCTwpc9Fq4=\",\"DGHuGX5ZZ2lzyxsNzNo9YYmBuT0kKFRA8iMUanrtP4w=\",\"HWoTNFwWlj0Pw3KjOjzLnXET5CuDNs5KDPaMbBw7wk8=\",\"DpD+BEJl4JPoKgDLFAyeyEjDgHyiFq5coGCLNgVH5y4=\",\"KKAQarZIs/sZY+i1H2omzOirYtdasmIUw4ngxxlzcAI=\",\"GQOj8UzMxAU1Ggo7ojEGECgwwTTRTDeCJtOmWZ51Un4=\",\"Dmm2pF+Y3JTTbn+ABF5W+oknQW+Wv5srYDwyxtACZzA=\",\"JAKAgyQPBBWuJ9JQtenSYRxbr2uDygHF+giyw5hLo3s=\",\"ELl9ezK3VBzd9WnT+juk/HkvZ/tLyKvxQruXZas/u8Y=\",\"GFFOa2Zj6S0LcC9oMFQvhBhyqYZegRa2i/A9VTUu2Ug=\",\"B+hKkcIt9fIuRlw19mXGpWx9QebyDz1jWJq6ShaJgaA=\",\"JMZ8Peus/0x19atgEdOaa6kFp4mAYD+bUg3F8Hgm0s8=\",\"IwLXKkj3KEqp3UYBPyGKzxVRJJwi2DMd/kjBgaBsoo4=\",\"EzL7ntWlqGxfcM/biZzQU68c+5VXrxpRN74ecn4xaQ==\",\"Ds0+eVX6YDr0bmn80WmdXVfbXqw7kJXAx+C20k3H9UI=\",\"C3AS+VRGpuVrNbpf6ryBg++IKrXpm0jdpqAKpLUoLvQ=\",\"LZqd5AIB6K7bbIOqZNaAGvdJtGTKI9sqdDu23xPHKYY=\",\"Kb1KGcJncy0fITpHjJxnekeASlJd9SCumVurbHnww3U=\",\"FGL1rgVDGmSYM/TTPXGZxq8KJ6M8aqdFFNcGvF+ssRA=\",\"KR+WCDBDkR5FuHmVzuLVKgxMHxolN7bokNKTsfv8Bdo=\",\"BBHLqQ5gilGo02NdfoQv9YxBN9t+7vDvFkIkArWIdm8=\",\"D3tepVZYFru4wWv6lGxhRdYH53PsELdIRFERYUabr2A=\",\"AzjN+rTOj9yfCBx387elj1Mx0yIM9UginIvcn15Juq4=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"Ek9g/wCg5i3cCjVpJqg7iJKn+4YC1dO5VfQfkTSVMQc=\",\"B+xnMDmDCg8GcBrXB952LpfeJorYIY9OdxzP73D8qtY=\",\"B0Dl0GOrzmkGe3Gfsz4w5LPae2xm8mvS17UyCgTc45Y=\",\"eAis0+oMJJ+I78E2DxxuU5Vh8xII6GCSExGxwptZig==\",\"ESv38Q6hdKk5rc846RURx8AJkL8XbTR4ulxbz5xG2J8=\",\"GXsZslwq/pNjGnjPy+/uTX7E96XpyH9aowhhql9EEEk=\",\"HuMHDkDA4OdApnRJw3ibax9bZAR7mtxKGn+RlKftfGI=\",\"Lqf5cOrvJl3wun1lwgv0dJJbvX7/TJrwh8OLW9pcikA=\",\"CH42K2OMHhfNg34U+VT8AswaAgxi5Ba89RBsDoSkLk4=\",\"Bmxw7fmJOeVV/cKbxsjbcDr9X3MXqX7IBcGqKHWAgb8=\",\"C3zQGBPbIKbFa+5HHrFnGfrSc3GarNunxHW5zZ/W7S4=\",\"G6704oRwCtmedZR+UZiPiyGzBuhVUslYYVnNL6YtYgg=\",\"LXBDW7ew0iQrG/TPqb1IzvpPSUkwWVbwfGzp9ApPY8s=\",\"LJ9LBxJYQNCo2ymyyPcj2pFKvSNX3i0L38dh7R0ssZA=\",\"GmjG7s9hIQRZAPLRRvbg3B/6la/KATD0Aj7MhUrJCXk=\",\"K96bIXLgHgM8iZ59y2kQRB4LJrphiFgXwZJXxnpwRFk=\",\"GWNkaIvmwAfVyvfwqmDd56nU31pyIBoBCGb1HVuORNE=\",\"BeJb3rIDxMHBAnJCLET4g99hvYc6EYEAWTesaJe4IME=\",\"D5OSl1+zus7s7InOjd4z1hL3tRgJxwx5Vg5a7E6g+X4=\",\"CzqUoNf6aAjVQOp8lKyEMpUA/GHBySH24aAr5y4FUuU=\",\"BX8vd/bzn8wwnOIiesmH+IAgwRVqUh2LSmKY6jvsH5U=\",\"KHFBdI7leC1G2RQSCVuK6KgXNBeXc0zu0v3wAPe9LKY=\",\"HUV3FvXicRXxs71gJ0PdtiUkJXXOQH54zsXAMzgP6gs=\",\"E5MwQiG3r+Bk85ViolohyJamXCfNk+2J9QDp61s5stc=\",\"EACwrNg7i1ERMRn9F4PTBDAX2i6zKVRFa2xh+qoq4p4=\",\"GcnHk4+GBzECW9K7HNSt1K1ziUM2g+x/0cLApAhAQAs=\",\"IYvXi+n+g7iBSpWe+BCWi+DNjyDKd3hJb1IlGxpXA7o=\",\"JyS8nBeca2Y0GQUekBtFo8Ntn1nWP0Hd3MwSDfw6u8c=\",\"HpEw0K1dqoG4B9hsuXfu/kSbkIHN+6Wb+OG0O7pMEHc=\",\"LXXIS4glutInICiXB/JwnFldel/435shkDWUANLpJeE=\",\"J2KNJ0y8dsK79QBXAq0UvYtEq4zezGXC8yPyMtt4hVc=\",\"KjnLPTYzzb3c0LfMN0Tkav80UFJN1XO49no8fjucegk=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"CgmvscVPHbRUT2wAc6pDwP4X3e3k6y6WWgAgs3NLPkA=\",\"AYwbyXqsTNlzVYhBO+FzSOcdGn0Up78XXIpItbhem1Q=\",\"Gjcw3APn+EToh27c4qLQATVwLaA4oyY/rtOdBIr45GY=\",\"AlF24m+JFlXk7Lmjg4RqKqFbtJk2wftWhRlhWg0QMnw=\",\"ARkJIcosIFSvJ4vriufpAvL5/AMvHuLmYfwEXdZDVpo=\",\"AnMB9FYjOqLqpeWMpiNHFACliF4GZVbtrAaOgYe9U/w=\",\"FN97QMhTF4QnEzjrYQGnxWUpe7n9Fg9WM9H+iiTyKw8=\",\"IBt7ztw/iTKF3WqNcGQQhgkdsnfEfXIf2jWt4zVNN1Y=\",\"DX7H3Oho3uA/PMkUw1vQYcjAdasrOiTWNRTkPmETfyU=\",\"H0Nm+9IXMXI6Y3c2nK/B6tBm0OljNqbAzfREN6xpmfg=\",\"DU9yC9Gx2N0tpTMBVkOrviVpwhQrOCf3ab1Mj62et+M=\",\"JVUyW5hes39XrekxsHaE0xPF/XK63FPyGM3zY34orCA=\",\"GVd8mOvGGfkqD/CZz1w8eLGPTlIw6ufbXi+IoYFIu0s=\",\"CqsV0YvDmZaYePAwOynoWqPtW18NMC76lwc9BYC87lQ=\",\"AVpbdNX4Dv/wLbHfUH+yYHJCODcfnaIX2ySbgGUPwqs=\",\"B4Y2d7rBLZyKy44jX+1xnsp0SX4MhfEZETLnL4d7RZQ=\",\"BGIt1I6raGpjEvALrHflasYJgywaNxAGLi0Z+hOyUFk=\",\"G/03Og38pgBwqc0MX3AQY2bq+sNNdMrWUUmEHDHldlk=\",\"EsPBBNRVxyPDCiWCqf7QR4CJ7N1iVqahTV3Tpz5X5Ys=\",\"HbYtWpeD3W43IZgBYcjp9AspBmRx7CuzlbTecVIckzc=\",\"ChM44z0NecjBFDwelEB741DeAWqhkCN+D99qrRlOw9s=\",\"IwzYExCpl4+sKCjeSsOMGf41qrIXnx6DoxJ3RdxwmEY=\",\"HUZUU3T4uBF/5qr79AwWLPo7E/dDkZHENXL/jKcT2HQ=\",\"Lwu22v9pzL5B4RY10aRRgWwaOeO6pzWUk3VBEcDUU9E=\",\"ApMpaV8Wg3DjsxVuOuKCSmYu23eMKiPrAW0TXK9yzZ0=\",\"G5+PSk2M8IeMO1tX6CCWlyt9dzoZe2zUEpVtmZT0I5M=\",\"EVDKSFiW0fqIRF8Y3v+eRmOVeUU9yL2VLesQxT/GkCU=\",\"Dv/F6Y8iiFjknKFbuYMSOFzQaleomLgqVh9v2bWvEXA=\",\"dqnF7OQiFk12ifWGOjdSrTaBooOF4CLGbbo1uMh99w==\",\"HqRNwTZMpdGpwhdIjpaxE42l6sz6YqNBjWh9oTCBmaA=\",\"IjkOD7XJgogdYvevklWyxndVm1JecOHpkxIOOcs4b9c=\",\"KDiAya88XuKtF1uXqREOkE6m8RcrCr7dhyahlCvSG68=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"DrGw7OKvXN5CBDQwuccO1nnCuuEACQMHJVHsrabcCm8=\",\"LabpB3Ssm/WgeXEIVpjN/2M8KOtS8vV5NbcSxAbjcGY=\",\"CoEluTXo2h2y0a2ahB77EPqwlmtDjgptrCBMzIMrqVE=\",\"DU47JEBgK8TQGdqA8p7izoakTwmOMuakfFEvpzFz6ww=\",\"DKdTqlf6UrpXJYfqpHwYrZGqSYBISD2aAZRX0BTKCOI=\",\"D56oFBh7xtuljG98Hss9v2KrLqKdB1r7QPp1+v2mzN0=\",\"FiXjb6ywunVY9BY+L2m0gs/xACtuY6ApfdA1tREm4hQ=\",\"Go9ZhsOvR5qVDy94wc+55u78aTVo2zIVuj2ouVz1mZc=\",\"IJLOKDDZHOvZfmmtSqy/WUfI7dnoCdM6rf8KnETGDdI=\",\"LDQ5bepWfho7a78hUYuLeL0IUn2VXsjD9xwVM1GXWkg=\",\"J+9dkHwSskc6Ak7xzivzdwu3ZxGKuVeRFgirmfUBHj0=\",\"HykLIL70V+6/DMzgC7w56hnqTCYl5U4NzP49sRLgZ9E=\",\"HbV3iMMPLxj/85CM6RnqEKyFG4YrUFJG6B1hvbUeD3A=\",\"KwQdvPeEbE5y3loOXSAfpTBsjnl7wMQ3At7iFkl+uiM=\",\"IqMepVcmEXahD4A2x/mqMtc5KjPmTtkNrh+j2YAPAHc=\",\"Ls7QCCp6yQBRv9GQ2XMZ40AhvVcdmU9PtjPCmXWYdr8=\",\"Fx8/KVxnyA+XuwZ4rQXCFubfF8RplcfI+AGBG0f3Xbk=\",\"Am3gdvm5zUzY5/Q3OzVpycLthnsYK+aVUoxx4d/DRVM=\",\"GGhNCtj4QfwyFR3FDvYC5FYLKGM52aKZ5kUdU1WW9B0=\",\"F7rwttiWIeppQgKCwy+UrTpS23OUuqrMKhyjAyZWuDQ=\",\"GbrTjqqSxD7hv5KJ6eZuMqKFahQe8uNoaJdWF3ZcChM=\",\"BS7aaddyNIFddqWpsE6PckW5RXVBxBRdAP0mO8+axW8=\",\"LeXmQNjC/DrPKOmd8X/VbfuR/BCR0wR3NjikUwN7F7I=\",\"B7B14AS/6oDmn74cRgWGpQsmAom+zCbMkupu4YrVyJc=\",\"JOuzgZcFe73ABqLtbRwoDlAFOfmNxT+DwrWFA7r6jKY=\",\"HOUVc+JKQ111tlShu4DfjsOPEr+WYNKrrTZuyJdww/g=\",\"D/Iem8rpMkSwm97n/rGEEhnRS22ejObFqgeRW12BkD0=\",\"n38csYC4ERtqOyJFjPlNyyie+K3cSty6kT2ZVnvEPw==\",\"Ioowu5Fhg1o8pY6ta5dS0DMv14YIsUEqQC/ARe9DDw==\",\"Femx4FhRyWs71/CUWWadhS5lYj8baPn1l6t6DdpeIIs=\",\"GWs9ZSylnVlmNpbvF5iLoUraAuxQbLfkyvJwYAGVO+w=\",\"HIdJhVwVnytM+Dky858mdtxWJY08v94x1Sa0ta4+66A=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"Ih3Yp9SVreHf5qbhGYRa3SjU/KFzb+p082essvDCxrY=\",\"BLQjF3Ftyjxdgq3vmWEAk1zzgnkELem2v1Cyn2ogLzQ=\",\"BHWJTLZNuqb6ai3bdIFmcL3m7Sux9TWp1fhjSDaUlMY=\",\"AcOUazke0GnidJOc7oZqXz1Nfc1EvSjFm86qeVO6Rd0=\",\"GCW3k/0u2ECvaEjYjBD608FCNKfdODQSGWWhGSbFzl4=\",\"KC7G9iFZB+DL7OcuxQpakKLxfD9RTYWYa5mDu2j3PLc=\",\"DY94AWg6ZIj11U2SiebPM2MQB3caNYB0ZEbgXUjrt0E=\",\"AYVUErogKiqXtLxNFB+9VHpAGfI82k2nJv0arE1An0g=\",\"F5jxxpAQdqvXfXxAtAHJO9cR1YrxuXUQbecqb24rJQs=\",\"Lt2Xhl1/qkZJRprZal4FQsNWKOkD4r43Ogq38cpaIH0=\",\"E2ds15YewluH96uLYj0s+thstmI2OGzORpOG/XmY2VY=\",\"FsCpHp6cJ2lAHyZyjJNeRnaTr6w19kdtf0XDWTSWpLw=\",\"KVU9Bp8ROCKrk5qAfIlhQhTVhmovwX4y0hx4buJs2R4=\",\"DLZoCFgf43XNQbtUEJdzeSZcIN/kAtVAC8k6wktLA/M=\",\"JD3/ZIyfDHZUZpsGKIgskwnlvChYfMKyObriHb+vA+4=\",\"LhcRkZUc71KDMGT9TUBngW8unIktfslZX88VKG/FgwY=\",\"Ar25WSNVAgn6fLoqdG8MJoEZWw7MxebCUyJ7YsZX5mI=\",\"CFqhOlL0tiPdUWpqR4/NiOMMOWQsIvffwORyPjH9DV4=\",\"FfXfsvIuIM8Iwb+Mp/4Y7hJgdhXFw8Gnwsn+dAu5mQs=\",\"D8WJSb2KE2w4xwaZHFKIUR2idtb6uV7zFcetMEP19hk=\",\"KE6VafyLp3tARbhW2/8cKe7HHoUL7RfhUzAo4tB83Y0=\",\"BfuXiF2U8y6Js37YFs/nkRirX3B4SzpUalDDLFLF18o=\",\"FYj17dXbc+nkLhA48+aBf+z/ABpwTRj76W7VcCLWhTs=\",\"FoFJgQJP3OpavKUT5WdOfvdXOBO2UNquvzRDCpMNBuw=\",\"Gwt8BE5anMYGMd+t1iv3X3l2Rg0KHd1UyR9awARhups=\",\"F9aAmO1EtqbEKm5+b5/i2grHBZ0ezwsm6uAa+hF5Mb4=\",\"ajKhs1jLUoiDCyc2cTBtbhr2VxjDtO8aPCxt3w6/SA==\",\"EkiZIG74Zu49MlMCSJR0EWb1P0jvf4bClVGE2ZPLbZg=\",\"KC0bgAXnxeIa3xRrvDqApBIH0f9+57O9LD5r3VvzEhw=\",\"K6hgsOOSIU2+5v8jeYlmXDCURhertLMdZLKthfOX4zw=\",\"CN7kJckjClN7M0Rf/Q8DKozTNbsKbJVZHhvGQc+12sM=\",\"E+H3KeggMq4Fo34+zN+VWRthoBb1zf3mW51hyE4PCgk=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"I0x3CInuxaJLyI9aMdVudh90hxmSdsim7uWxpomXgSo=\",\"JFv/90d4MSBadtCqHpxV0kvAQUOzv13skBBWn5RZkaA=\",\"CPQGnAsQh1psWkdKZjL6qcpalx0gftCJX7kvirNjdx8=\",\"CDdynU/IUwHWsEem3HHS7XujPuXiXO8iruylnwFeqdw=\",\"KU7yDzKK5oUtf4eJGM/c6e2VC+WJJdmXrFM8kdW2r9U=\",\"H2K0um52UOiD+cU8Eq23rEGNPUinUU8YMhjI2Mny6IE=\",\"CI5i7ggFoS91EsWOu755JcjZTRPMrpM6+M5a0dnBH8k=\",\"KhWst5mjZTZpjBRxuT0gYyDychwToy3y0w9A+5sfz00=\",\"IlXvIzsuBR64/l+7TwPV0EUKsiX5Jswt304PDZ3lmfU=\",\"CzMk919Q+6iSSSKMN/LJoyY6G6A8Yk/2tB0cDupPb3o=\",\"Jnq7h2zxMOXsDlRbQcthTmsN+16ytmjKat5SIN5tJp4=\",\"GQQGeHItrJTMVo/zwLnt1y3us8/OPz2fyBr31JVUr98=\",\"CQFVCSZ9PXQ1X4uMtYPsTUxBsBd0+7dFyliy7jz+1gg=\",\"JXklh+7n5pOi37ftX9Qp9QGj7rkX5sF2FP082AtzVv4=\",\"JYgjBFXBZA7viDsmUN6kt0+nwLJnWGmzaAqGfz+Zg/4=\",\"Cl2OQm6KhjPLDa+r1PMtlG7mscnYDgFy0qmVLg+F7FY=\",\"L0eJRCbLaYPXHBAKAyYJDI7JeEVLNZoC1hittx+tgoI=\",\"I72kXkXiD7bCdPmpnHCD+k7FluwoOnjRs2grxExTI4M=\",\"BkKOJZQc+EJoYEysR7iYa/MGglfTvonD1trI9XCTplA=\",\"GZ2TuTV1aw5vHqYMcmZ7DlaG6xsS1s2I2tX11E2b9vo=\",\"FxzkYj8KSf8fCzMgX72ikJ+cGJsnXNenF/Sjilq9qRA=\",\"Dm2zeM5+HeAzSNP3t7FyZL5a3wmV3o4Cc8OarTgimg==\",\"F7K4bNZqc6YORlEazX3sD7OjLWy4v6789EebfTWPzoE=\",\"DSzncexJeauzDIooH7++cBqucRIGaoEzk95E5WFhIH0=\",\"CGmYqjWhn7hq01qRFsJyiHomyVdD2CFPHyofx1BQ+Gc=\",\"Bb4RNNoGkrj5JUXLMm3rhiE2JVeU+oOD4dPyZvMWIkM=\",\"G8trjen4ZqOXaEZtFfUhzx514endvDDAWkW1OstfWOk=\",\"G56SaGfsQC5PtL/SQKgvJA7affYcm16jrxmE90CJqTs=\",\"9Ajs0kE/MMV5Tnd7igvefdae4OJKkYJT6c77x9mJEw==\",\"LX8FLru5v1JwAW95Z1n5gFa4ko78NcCf6eGqJvGAEOc=\",\"LalRmE9PAxcUE+FzmDEgHnNGpFu+mvidOyP/otYVqVI=\",\"C1V+xGp7+4oLwhvKpW7bbhwL4VLYi1f7V1DNooUcYjE=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"E9P+8+r/m5VjoYJ2N60AeJJo0rVaH7ZoH4sFLQSaP7M=\",\"K8HMlZCZ9i7aUn1zhc6tYDtjeijJoiPoF8mEj9ePR1Q=\",\"DarId0My5QmYYXg0ToyvipHG0BonW5od9GnltzW9UII=\",\"J3c/IlAM35L+yA8VSEcYmj91+F6M3jXOkXEiXTzYtnY=\",\"ecSZ4TDth0oTg7l43TwA/VttDBi/O0kc/WN4cjDLnw==\",\"Hr/bNp/HTRRpxuRh9kIG5JB7b1tRsCSWNorvHFQZjLc=\",\"DKniPR9AcRElQ9TowbMDhlpAZO1OQRDuoRMTApLR4pk=\",\"I1ffvcvIaeqAaLss4FaFT3oKdlohevSgoxeIiwiuCvk=\",\"LJ59GtecSbN9/ZP/LUqkPIUy/MYGkn6XWyFWSpwQcPI=\",\"CDf/KIwKqc+z+nzTgxLKa4O5sqP/TexQasoa8RdqQkg=\",\"I9jeBNMriKG1EChjQWMYARtBKxHx5gk4bF2Nh9qHjlQ=\",\"DiVkQxztmq3d5DPnys7kKgTQnTAm88od0O4/swha29k=\",\"BhyuqroWP+95ZctmXwzzBd7u8WQstj4SLYRcX2sJW+E=\",\"IzVpQu9NJdKzVC9dy1SnfPF9j6ZLoGBGKjtxyztz1Q4=\",\"GGY3OQKpqVPAdoZG83lByAVljDH3Yd055rTSksjLzQ==\",\"CGu1u3jLEUmv62cOHvNHDFY08QsY6qJUUOh8WpvzUUY=\",\"JFHg8ae63near1TdimKLktnMint8AHQHb4YPh74vj7o=\",\"CEvzdApUYBK2EKW8eK6JeXO4XCvgSvsy+uDjnQwIUlU=\",\"De9+BSjqgg1wzJ+reTXWy1s/R/yLWrqSS7I3twd/AnU=\",\"G3r2ClefbW+WJaiw98T9sqavWY2vCFAfFVZlqzdvfsY=\",\"BPku44MtjEJTJ4936e2QC+GG+MGCo5Zi9Z5HACE8mNw=\",\"FHuUjus4XXGSK+zFS6EhMP9WQ+SfcbcyfDI/8OJXHJU=\",\"A2f6aMkZ74xqJMefa7oH5+g5yVErkqaQ0aZGvOCDiLo=\",\"Cq24/69rAqak9C6Xr6zytNSbXUIBvs86AT36v6BotaA=\",\"Hyn75B0zZ4jPZmpDeLHILVgZwI4nEVdiJ3Y3I1uQhK0=\",\"CUOX2jD6juSAzEy8DLM4MhjO+WAszR60ZVBxx73PMAE=\",\"FqCRuaXNlSZnsvETCcxOOfLGw6wutDRl2ZtAmrB3Efs=\",\"FiXPTi+7b3olU2okv+Z5x5PjvAFXTYrxI9Yda5jdsM8=\",\"F/Hd9hCIGa1yqpFBHggmTFoHVu7zEBNRq9Ex6DMugnY=\",\"JyrGr4Zw7wTqxdYhlJ88Tsftu2WjjEvX1f9EDKsfehU=\",\"Ksgevfg4yJOnTesaV1ySnaCm4S0ubhsHKb8EV81+E00=\",\"KBmKan3gmr5UXtQo+D+cqVp7yfkRhjBa3IDZpWEEXd8=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"Icj1IS5DqISgcpmG/BGvdbt9LOzfAHpxddAAqtHIniE=\",\"EuSpYeGAFmAii7WSIE/JiGUmC+EOHgKIRg9CtSfEhtg=\",\"CawAiB/8t/9FpPRTDRv2OvPeTD636JgvNU0RnQmbIMI=\",\"Irklkd6+rVv1Vt/QQGiHAZOaLcciZMG3TA57ibRVdnA=\",\"I4ii384DbVyJikZas8iPveP834gQyH5jn3q+vsnez4A=\",\"CeLfa1TZI90SvERAbCRygSQJJFZ6epk+QabrAn6VlgE=\",\"CwX8zAZ0r43uq31zZG4qKN8PTXaAOotv56Kl+fREA34=\",\"FIxywy4Coh29PEhZBGBi96CjoKnFQlpSkb6sXz9UNh0=\",\"DMckR682CMkJCvZ6Omg+jZiWiPIjm85Dc01YCN48BIs=\",\"DZI8AUSN0wmNEBQAZ6s/Xq7bCltz/W8p8oyx8zoWFfc=\",\"CRRWkKhCaVJIHpxfU8WHqtJfq6Lyr3o41GTGyG6InIA=\",\"DKNv/zobS+1/h2n9UBlcHM/3I/sb7A2zB2fpIu1cW7o=\",\"FR8alUbEOArIlJa9wHirVOwJ4c4wO8+Z9fcjfMexUOk=\",\"FsBG2EBMRB6wPlwIRvuVgkFBI+r5lnge4LcmjrSyBoI=\",\"JRw/OG6Oks1uy68swq2dkQ+UE11BRmaYYQ8HLnGMpBA=\",\"FHXmNJ++JlEreSAsAlVfD8aw34x08Soc9Fn6vfTsmCw=\",\"K0wAZ3cIMi168u1rKuxExJJkVrLTgps1F/QGSTPoW8o=\",\"CMBrWS6usvrSJ/3c0ILLxANZ16yOAb8W+MkH5kwXDKU=\",\"IR42Tg7sotzee35eReIZMf7HiYlj8gV57grMBxHWYFI=\",\"DNerKkSOA/VYRMS/trFpeQoMjXBjjX3cS15yN1lwpzg=\",\"GTCsLk4qtwOHTa6NbYTLbeJmsRRwrOtoHcYZiJ5h5FQ=\",\"Hv4/wDbaayKmZSnqjwRlG6iMSohRJxGjL03LqElSvf8=\",\"H8V1974UALDX9XIXoJk2SUlPb9Tcga+P9PRp7iX008o=\",\"D1me6v5K/nUqtnvJQ6Y7vVWbENbXNAsZxaSP6s6+2y4=\",\"ExYf8Swzjl/qPqtwhuobXJ4HToxDQ/WXjcqp/nfSO/s=\",\"GejOi8z002VIkFgwzML58TxuDZl/tXyJQV3M7yApjZQ=\",\"C613cM4gV7PMIPIck6abRL57lUA+bUzNNz2NhV9C1I4=\",\"DWjCWSnrcUJZWMe7MIJF2GpSxN1Xrx8D7BfXO9FKexU=\",\"GiD2yXzVnAM54JUjb7KVW1A1b6WSRPYXPxyvGN6sTAg=\",\"E/vWHuxSyD0t/Gtiyx0ctA5xxj/OFyZa6dYx3m1oPxc=\",\"DFwk/mpvzngxuciy28ML2dyDUseNRDH1r+xdlKGPJSI=\",\"Dm9jvtIfLLmyiG2pe7DY8OFV8AjB5QOcLtcIDWvnBDE=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"ATueSmacP6vgxD8zOZKl9pjgipq7qtd81ACykS9e9+g=\",\"Kwy7WCFGV2kz8ByRwN0rCVotpDz1KPInMTF4jxpph8s=\",\"LjD7hdGZ3KlUdVIbUHALaZxQ8deq5bLeTpuZB4DOKdY=\",\"BP98qH4mi0ojrxVMEQLItwXsRoLwis4Sc/q7OoZcr8Y=\",\"I7NxrDxeRdbZMN94n2CtUQt4Sv6e5OgodggewMp+9+U=\",\"KMX8gxYBmYuWzMqwHAKNYTwgDv8dDiyqcJjuoWXBGaA=\",\"GmSadi4VyeM7bdOkxdqu0IrC5aeEXfKJ0sfd/cN3H5c=\",\"G3aAlgiyyleT00bFJCaq9yKLfkoJCDwrVRvOj8MCKg0=\",\"JJ3m9s1lr6e/IGrGofyGSJilE10LDvqtD0yGd0oVPZ0=\",\"FiyLO19yVq8Ke9g7o30litfUq08p0ki90ArTbmEvYFU=\",\"A6ixl537lQwEUeu6TpE314lD2er4ib7NKRpmkDFoDR8=\",\"H7muZl3GD9F90LQoSy7qsIRebUpdb7gbd+n3xrQ9Fwo=\",\"DmHtsSpBdOSKe0e2YOgXX0KqeSb/Q4yQaS5DvDlrxv0=\",\"KiGtgkFDanXuipCGeq3hgFiajJxjsFJTvodvGSZBsfo=\",\"FmYgiVqTUlCU+L7OZa5vueFJUdS/fPEKIWnOXL2LTLg=\",\"IvdEH7DoFpNciBOFTtX9bMzl57aoXZHStaOnpcikzPA=\",\"JSNzOuUnWqX7icdN5+yACRcn9JXnKeqbxVdRayXizfs=\",\"FQ8qxPVz9fntoNjmX+hmWB8bwR5GrNOZzqQdwe47QII=\",\"LixqCBEnwRqA1g3hYsHVvXDJ4bExL9Mfl01BnXTnKkU=\",\"KI9eSjXWqI5BERPoMk0q9gsHqrtIZQ0nJh+eAXLAY/k=\",\"HpTEjWzOwHpq7EZ86dscfPL0jyBAZIO7hz9pbLYTnHw=\",\"IxdVUJnvEYrBpnA0kzNduJWuq2yx18seRsqqDp107PE=\",\"EStlMySRm0MApunKoI86NsNy2Gv91LzxBSbvPC6MhmU=\",\"ENZNnb/uhLfY5CZAT09jAs0vUHyVNlWfAFCyt3oVuF4=\",\"DONAmmkqzuU3ImbJfEfCVk0yaPUST9MJT/s10lLvzR0=\",\"GXYjLGtbxv9358bSZuo5DF+9T7PK2ezmI87VashgmWo=\",\"CF/pkFPT+UemZUlfaCka3ixwZgDlba6ZG2KDPnXSHF8=\",\"JTh19DlPWWL+B/eEx/yuHfbTbRhA6usOfCNuPWeG7/o=\",\"CBHvO9zTyDeqVB0N8y1EfsVDkZEZEePgc5t//Urv/Nw=\",\"C+4cVU+fyYz8ay+Yb98geFnXjidX0ZnpqSsVAe+SygY=\",\"LkbcOzC1SSXDE3MVAcXwA6qNFJCxbP4ou9oz/NC5sKg=\",\"KaVXJyZGqLCWstHorsFySRhSr48FV3l3kEPgSO2O3Gs=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"LPVn2vHjK34hKGBYPqoXg9hxoarMYbHhcnTSnUPD1Cs=\",\"DeToEhH2aYzxtVE5Y1MLe50LjswRQ1514fjTdD2+2xw=\",\"JEHGnjRRgJ2lrqVCLU4hY3RptDhDcvBsXW2cFMZoCYE=\",\"Kuq3cO0qy2POQCbJ+wveoCvNbQ5FsciYVMLIJ/Cfh0M=\",\"GAhr6kFzItFz07Z/C76nJwEdWKEwdmTSCGh9UAGMCEk=\",\"GlVUoQT/Q6bmS320dm4c5t9zXdfV0VvASyJKgUU7WmA=\",\"I3K7tVisyPCibt22IzOHVa6hsnk9fhEwGQ/ixuxjk6I=\",\"EMM9EfviK5dzYXTqrnnrpAvM8xvIRtjQqLREcMKvjLE=\",\"A0JhY9g2XcSEfVu/d5xVdzUuNP9rrauDNZfd7huuP1Q=\",\"HGMoHjaJNrogRvTH8LQnnb/AKuevAiTUuwPYR+FXdz4=\",\"IZK8zucba5VfFG78waF4HB4cXOJN2aVdJljwVGFHUe4=\",\"BGU4O4ykE2CVOZ4jxEqp+0VKR85lkOqq6FF7l+R2w5Y=\",\"BX5MJYgYBr1ElIHsNSCIYn+6IC20zUuT29FAnvzIA2w=\",\"kHWtdubrGVGIp3WrFqtloAGsbu0vsUVSgsv+2AoFlA==\",\"C+ho57/fqIQ0KBoS4XU80TtE3xO55PMa3nEI3iSkCek=\",\"LlEOg3VxN0eb9qd0eDRMELsH+rofl9qcBTfam+UVxeM=\",\"DaDqamEGBo71XNpBXTDzCsDjCHfi4Dq/YY6i152YCCA=\",\"JFLJFqJSrTx8J6Ulf0yDKNkCfWZTTZjMyaQ0IdcNg7I=\",\"D5x3u1HKxNWuOpckO1uWemX2R1mBl3IbSHr99Ap/aPc=\",\"H54EUFD6Fx4O4p32zUNra/QqV2tP9QwskTruvAhPkRU=\",\"Ln1Ftm7UanIFyK8bU0PR0/4y8icHQcRQBpeDpMW+DdM=\",\"JRaTXqHSSA5DUPlh53jXL1bgK1epjokrC62A/47r16Y=\",\"EF3hLnQp7FlLhXCBKIk/j/IB9vprblii+FQD4Es+OFI=\",\"H8n3ypFabLa2fvU9mFAh7CNGmXDF6vGAsN6w3s47660=\",\"KBG2adtbGjcchHCTJEyi+NZTU304LxbAct+RfNWc3dI=\",\"EXy/vP3NcYHqKxgr3GpD9yp4vJprHCfVpNTwc7Ul+Gs=\",\"HooFyE5SUsufP0yB2lxUGc7Vk4JUDzLPlJtEL2dRL3g=\",\"AkM3prHLoy/+U9ckQ5xFVKJDDELakCmXwJbCbno+iMg=\",\"L5CqbmVPy3QievkGCZHgpo1H2AIfeWjThEBLnUR2ck8=\",\"Cxgfx5Ay+EN8W/IUJbJkqiitxOkqsUoeV5ZMefFQIVs=\",\"CZ2mBY7X+V/kzIXzvXCGIPNxybMsGOI1xEtBX0wSvzA=\",\"CSEvBNgoHmKzbQIlMt9AW45dvYHBXwDdCUEw1DAJtM8=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"EQfZOec1ch1tv3nV8wYCR6OTFupSSrjA7GF7LsIBoms=\",\"Lxw0dSMpnZWfwVkPM1NPwqDlrfxd4Pzg+g7dr1VkyyE=\",\"FJ73N4jFFJ9kOg01Yjz6JGtrg/OINHUGDuYT90rsYW0=\",\"Ko/Rjo497QrR45teFZ6bEpi9oFZGrGbd21DmQoCIlnA=\",\"BH280hH2x8puYK0XGWXh3UnQewVbhGjTPrfBYrNidWU=\",\"I8oicLFCIcdrd6H5GXZKk5nbDew9tb0o/rLTY+Rd5gg=\",\"CuGLGTsRQuJioW0NEiFU5IhJ1c2CG4hSoswqLnQB6ZY=\",\"GFfRtt7wr0XvfT0k3HUp0oJv+wC8fHx6rnTHQMq6PK8=\",\"DzzIRibEWrlOC4csN3nf4/QVl8OQlIhGeN452MGWGJE=\",\"DoIJV4eL5ihaYwEJ3XHVq5js8cHjQcfwW+FEpoCJYek=\",\"Hd311xYF25qrAtcYZryqPzBHBwEOsSlj4w9UJwaE9oY=\",\"IstV64bGgszOZm7H/dUWevmKBMVzFHfO5BQB9wvwXIk=\",\"IoVoWzLjD6y6NreBOpSuFIZQL3xVDEm4Zc7IP0bCkYs=\",\"CJ64A0nD3LD1tWJN6/un2pDwQd6bvLXw3V6RXJI3cZc=\",\"GuamQOlSKZwq7S/9/uqzJzLpxeLclTFNIX8GQoFr46c=\",\"LuWMSNuH6Hh6Zbet2mioRKotzi67lbhaA3IhnVRpk00=\",\"GOQl8YFqP9I3FxewIQ3xShhqGEwUgRJFsNL7OONNp/g=\",\"LQtMAO8DmFncqPXsIkLe4H6wi0DBNIE93SDx5Jy0YAM=\",\"G78bnoQmpD2mnwtxipM0izOre/tJ8yeS0LQKHfV5Hyo=\",\"K8pz3kMRHMl+fIYP+Gx1wptmxcr9BPNqBnPQvjX7s0M=\",\"GnfTQ2TiGG7alqTAV2pjLKU6hXnqJLoXKR63Hcky5eU=\",\"EnV9vdHsG0gWSAQfSbYANQ7YOVgP5MAigQ4fnsroCxI=\",\"JJGnW7bDIxuQSDsPN1lvB5JqdGqmiE8Ifxt2lNGRtR0=\",\"CZiricdr2fYgq9Qc/4Kz00ID9OavDuDzLn9y+I5CCc4=\",\"InHDORQJGnsHYMJ1KhL/L8zU9RIXX/3ZSb3v6bVERIY=\",\"K3bZmMj7n9ehkuW/OtWUhDnMBhGCRW+ey2D87JfWnvE=\",\"C6CJ0k+qg92dNEJllvQwURnCuqwFxPcnNjzAfcN84A4=\",\"Fovlbzw4EHqzlXg1Wtj0msCoBmGXfDp1jCmgijp3M64=\",\"LN0PX+tER7USDmcK26hsEtceX5hg7Es+rihSSCXKbjo=\",\"A2r1+rorF3ersZmzUzTRKkoBqSSF1T/W6SEZScQzCbc=\",\"LB3LaFzEfB2+nbQ9gJ7Vbtb1+ayS12v7JxwQtmti/Hc=\",\"JGM9BcBjA2F2JPw3m0aniLDWm95AV9/DbrM1kFURi/8=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"IiTzWD8AeED3esYzca3ioigF/7mZpU/Q/qu6REzOvhg=\",\"JnFDEddXtDPJDLvvadp58nST3UjCaqAIkqafSUEtceE=\",\"L8xxb39XrcTpz3Zfp9DW+FsucbfUldEtQWV9qS1QtAI=\",\"KUo/XKUjm7WnsWVHBHSrWLWgfis9orRUPSz/Th8KFiQ=\",\"FLS+tj2Qk0XPwokdUr4YJ1/UNt/mTe8+6aBW2m3zFnQ=\",\"CERgr4fEakJ2z9Khzq+tyDrl6RdmnoOT7OnVIQLUTKA=\",\"FBvG7f09arDXbM1kUvdG4eKgTX2+oZfCyiptSYWF3mw=\",\"HnV6zakmkGQ6Nwucac/qxfLL3ccP6YSvr6fY6xUZhG8=\",\"CektqD4qa4uuKmXIDpT4rQ3Vqt2TdPm2ZuUpKxxD7cc=\",\"KLU5988bY2Ev4OPwGd2AVXYFQM0qmYtwvfXHVVVKYe0=\",\"BPExWh4xqz+O7YMSpD29G0tyNizNY37U3+utPTUPJGc=\",\"AQaqFYze27Is5cqj32RL3i2XY7MgEqX7OR36OnYeLjM=\",\"IFvNYOJyUdNWzuDJ+/5c7BBgaq3N333ue21QQpJIzyk=\",\"H6RTlRnvHMG8VzyK9bq23w74aXeHcBCfjeNJtga7ykE=\",\"F8qyGZwaE91GCKnh5LO8SWViLYtXTKZTOiUq7JOVqwU=\",\"LDTWWBCn5aS4UfAqZqxNGtVOrSq2M//diMld02SxZCA=\",\"EodFqaVfQG/5Mn6XaQ74E3ZIqKxYWx1IPoe+APseiGY=\",\"DXl+sFYwyHtyrFfav9Xol/Bnm88HmGUqMnu2oCv8684=\",\"LUmsP546yLjAs3RC6ATESHJJBHzWproyKCxV7nK59L0=\",\"JEe7T+7JHUsEi//ejeOd/fh8ipo2I8tWP/nWIDxtodE=\",\"B5DNZNmDxyH4g8u29KoV6naqoZ3Dmx9ExNupk7yQEM8=\",\"Fjo7YuGiboYE+reP8b4KNpmmsI0yn+6hNwYv2sIUsLE=\",\"Bk2QA/wSwGkj95j7wPSbM6YlDjUhgO7df9hGt/lZPdc=\",\"Hw2UrynxYtCErXDCsTimUy242WdXNBij7oLLMcyNqiY=\",\"DDDH34lWd0aH+B44gazOXFUfqJ6qX/c2nSybaM+XooM=\",\"GBRyO8fCOWuAuT9BrjdzVDojKw/MgNePktSMkIzsx3o=\",\"Hv0woIzwYuoQkimzvC385WQjLcaxgQMNLAPuSGvKbTU=\",\"FOkjzJGc52fI0MMIAx8VRnQNUSxoBaSLgc4r1+lc2dU=\",\"IddL6OND6T91lYjNfSnNZKOvpOu0jhIEo9VzrR1W9No=\",\"G44Aht5N5SLVyB6wqZaVXqcASqbpDT3J83s7+DSwhDA=\",\"AX5agOwTXgyTLwY5cteF2fietF/+RN2pqP/BFGgIFkU=\",\"GlyvdFMvLFkP7oUDoTuw7o6TG2y5Lo8eUsM388fhiPU=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"GsQtewpui48KCX0R2GUXmKpfJnZXRBjyO3/mFo8oJXs=\",\"HsZ1V9G/Dm+FHImDXCnSM0lnODuWd8ceEPEs7aNZPkE=\",\"L0erWKWOUjQN+EWngtbOmDNm+mafTZNz+EnA48+8onI=\",\"CPISpWUMSy9oqLehR4kZitLCJPrMVi4HNgkE8K2479M=\",\"JZLHJ2yftOliuPf1u7lQGNFzA6bopbUTsvPvh7ZtUTU=\",\"KO7jTBAp5u6gzBLiAtwfS1DnOGWs1qe2kwKhtF8sGQc=\",\"ARvZQH8MnhuevjeTQrKkJuoU2HM1Ui6KqogCNvUSn9A=\",\"Fp8pPzlv0BLSCzI/mz60U2Ll0nLSNCaW3fHj7+0DwGk=\",\"Hh9GiQ04mlCsFuVCL3nUSaYBHFvp5TwmYoWvzH9bJgg=\",\"Eo2njmCwdYGJmC69pDrNd8UetkVdcgRVlV/2MakiYzo=\",\"AQaSUfy50v3/UKBBFU5szHV5o2DOqxw2DSBARjDeVWU=\",\"HtODpNbEM8aAG2hTtcQPZ8xP7yfCYQqslUDVNVxs24g=\",\"BumzNXvYN9GluMdZhBLHghbaoCu7JZcBguCJhyzqTh0=\",\"Avti3Rc+RAI7PnhK5Fe/yTrd4eCOmPNjHG4BvGNDxbw=\",\"IEeX2bFtRbCTuzTG714nMEr5rHynxKJSE007YbaVS00=\",\"L6izXk6UBefvTy2AggOWyo8Cbz4zB3U2iFDUIzlLIwE=\",\"EMOOhZ6oVOLGu/46zWE+1Z1wBTdyxv10l+0tTZmykH4=\",\"H0QnCFMTLitxckAhv9dB45w0FOjGP3sUg3GpITVbUIU=\",\"LrTWpfFt4+WywsM4AUIcLe6HoiI3T0yywvyh/uT7HOg=\",\"Bx4kQ7S5AY0qfKBXs14gUOWUCcaI/cqSiclkRDeEhqw=\",\"FCOlEmoniQgrz8IaaQERG2tSmcT3bTQciwwuncRxJyY=\",\"JuHnti2Jp1+UYwghtThebEipe4xcWuGzsfEURE6KELg=\",\"FP0+3hCqe7OCmRoRKDQOsebOCo1XP2Q72K3VotjopFs=\",\"KqqQSOzfIeBtokGGhVHPVI9oOIBhU2imos+HVU2JOxE=\",\"Lgg6xC+oiTnUgKl25zxnc9JsRYMHQHPWwqn5AHG8gw0=\",\"EswqDcXAITFryX4mo1qfWwYgh7eCJFJlQfUorL3i0cQ=\",\"Iq23sOnUwzXlXHr/i8ogSKWcAQEJnoq5m3nmS+RuzH4=\",\"FYy+lOE5YgCQtwD5/e9jfXAIGq/fGv8u3bteL2vALdg=\",\"DLQvS8odyilOfol9CguebMclMcvIcniSZfqQSqwAJSs=\",\"BjFWI22H02c+B7c54Y15oipvHJnCpMPeS5grV2XE3kk=\",\"C38IGLZAdjwSaJEr5QIwSTORqG2d6VeBD7LRVIOXoIg=\",\"Kq7aWOgxQw1ppXBZ+TP6Xet/0E++27AWqRm/X02IV8U=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"HToBNETnd7xOgWxvkZRka2AJ1e0JkxvYAR9dO7sBN44=\",\"GOSSTyWJMEILH8Rc+qMfrn6+0383WhfxuOxul2dUA/E=\",\"J8YwIesFV3sX1QZ2ZpptWQU1thFPdNbBSrs+/TWJeBs=\",\"FZ0SpAuGlNnc2hFJ3Ji8Miju3rGQQGgqLFJUcjpgvGE=\",\"HAQRXoAr1xYi4bFCVJb5OUFHN7yo3LofBw2KRPbaLSE=\",\"BNCgbQzj3CrCjuX3d0iY15EHFEWbOFtYdKxG3ektedY=\",\"MBKNg0+mvSgRaqbMGUU7b3MaCXDfEkFsjE54MO8/bzc=\",\"GrfqqvPlMwVFlataFtN69LAou2YSAXI1QyF5gC40rmc=\",\"KjDEE7jNECFIl3sP0fUdTN0mhJleuJkVZDivt7tP35s=\",\"HrZ5Xx5j+JM+1I3OVdJX2/lyKY+RhsVtCICudv5WJzA=\",\"IdHvM5Fuan6+BVIzxeOOOI724r+6xVMOxYdxkYLMC0A=\",\"CeKverPZIGw/VN7Sigj4t4OWy6nePXaWlk0lKaBRfFk=\",\"JFZPsCR6ClPoGUb58DZcXUUlfs7yiNbWfQvckQVagNY=\",\"G53tnxH+W23XkGa9Dha5JTk16NC8K/wTDbI6ghXQ3hM=\",\"GScR0/gNRSg57L//ba4yySvedNBRp1vBQXC8aQ5p+cI=\",\"Gzrx+iXDLaGlRn/vHf+5zKG3uSxNUOP3rQVI/yxNocU=\",\"Iry7vmuaOeMQoDqb8OSRRRaY1Nh0qhkrgowaT8uG87s=\",\"A6lHxp4J1kvmjXvyMW9M3GR8kSprxKk2IyyyttMgr1I=\",\"LSH0WW2YrDti3ZGVUIWadZLlBACdJou39b6g841KqkY=\",\"KycIssr8gmIH+AGJcz5sU9bsHrs8VGVmicEKhSaWe7I=\",\"E+abx6XezWICdhFvQPl0Pkh8whnfHcHXabGquOt0MWo=\",\"EYqqjzZM/0hl35U1SIk1w0r6GUOx4oqgjUQKen1y2Ao=\",\"Ea07+glGlcI6dLHyPZz3gI55Frnw66kOxXHgbk8xAQY=\",\"L0tsBtC5lvrGiekicHrYFbQRU5+FeHHNGmuao0OG8Qg=\",\"piiDYO4QwbAqKmptNAUrE855+hypH43b7UhdupLuuQ==\",\"Jd246mC+QefpnJe2taeCLwcQJ5MpNmc8ApAOvd3aqI8=\",\"JMjIf4iyHqJKwDzxpJjWQVeov+J+4N9wGH9tEeuFbSw=\",\"L5WKiYJ+tTWquHGvjz4f2p4LbdBUHXyYMDISAtRnQQo=\",\"LSsyIdnXU5xicxXiQiribata4QPNiovRnYlc6X4Z+GY=\",\"E73fI3kdCYnBf9mb1DVDe9i89nbGicoFlaDQSv2cJgM=\",\"LBWhrjUoG9L+emEVI912e+mcWjKoUByhmxqJQOEGKCY=\",\"DOxeGOUL61qyx/XJ6tqf4/PoaJsJAa+sgJkt2ju/iAM=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"HSP/TyLbsUKl1EZa7o/NL73Y5FDRz28pGCRF1ElqLl4=\",\"Fy7lhoXoOnlcdhkXQs6d8Ydl7G8enRIzv3PuT7xTJ20=\",\"A1LPYfdVh9SoIibijtmjiGPX4/5mRxF80oxzbLKJO1o=\",\"HlcbU/EmCn/U7XngPTLiOyYngE6lwDhhiiObKHOWH90=\",\"FQ1+/T7Ey36qZwO7eJE1J8d7B+OMk6gAhBoSPr8+3rw=\",\"E82usAQ4tcakDA2KA5qBFyaeFfWAuARCFOVjjy6Ho3s=\",\"CddujaE/h1RbdMX1Ba8A4gTrJBShhrVObcO3uMJOJ/A=\",\"C27Ja392EkfrvCf2T7QnXxEoRy5+0R6KcSogbLnhZHc=\",\"HgZtoEjPA1vMF/vE+uGDSPS7EUDZUZ8bzoEUTaSZpTY=\",\"BCav66Y9KFdYFlqV213yqoaTK6n1AxTF98pECLw+qoY=\",\"LOaLo/QPpQJi8Tchn/peNDZQl2stXS0egLaH5A5CbRo=\",\"Hh28PszSCgqWhGh3GCsI69uovLFkkvzbYKyqQjF++Os=\",\"KCri+kJfkUGdze375oAKASKlIRNFUkucMgz3dqIBtGc=\",\"AUveCGz7GTcmkMU7DgStDsqniourviHeikenlq6XMOU=\",\"ARTnbSdVum+/AYUZVbBRy159Z32z/aWU1mWK1PwJkjY=\",\"J5bsXaIzfv+m/GXLhTbqgrXmCxTxCwBbBzCLUtMBHS4=\",\"JSxuN0ca/ZOLLIQLKBjtGOt5AK2+kgngOJOfiDojbyE=\",\"K24HISzy5DBKMHrP0W7cmEwXDZbnlTRg0crNPoTcnnU=\",\"KtqpnMClFQz91OF/9jkMlz8kkdTicjkY01rFW13u+0k=\",\"F3WcuJOG+TZfqHViC29ufLa1zuLXfwtzVdnDO6DmpGA=\",\"ERuwccLKFxId4R82unz3n2mZYN124JKVYQoTav0gDmE=\",\"DzlMuPvaq9MeQ9S661UjlF4p309yDQJv4RW9FpOoiBg=\",\"JB1Y4c8+1dlL2vnwxGP7ZFtl+hnFLBk61n8dOPyzQ/w=\",\"FnE6e12M8+1MJdeAp5aKgPcMVm5rogiFnmzWmAGZUkI=\",\"GZCbp/07j8sDtvgQ8kbzhFY+vFiW/WFJZzf2W1Ni3QI=\",\"Kp39LdMEiwNH3UKu9lYaJ3rfPYb+gyA98XeFNubCSso=\",\"GFMu4U6G5ghVXaAgiSCG8VXGhVYSchEef0tskXgYZNA=\",\"JQnNnr2WwNfNiKO6soC0IGhpHakuA/beWTCuZ//gT1E=\",\"EcCHcpDzNId6JjJs4ubKepbdcyKI0nPvyrvAKU4trwk=\",\"JgCdvk/v6mc54ooKb7Hf+zXYUW4GkUhi24c4u7r7/Rs=\",\"Dp91/VM/pQmkmZRQVc/dYD3ZkwpQY05BqTUJjVcQEqg=\",\"HzWSVXQo9AueZYJTau0rcmTJFmCTt23z7Wj/Azx/+To=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"Ab79bawqy+qDy8iCxmHoC1C4WvICHHzncMvU5M1I9pw=\",\"LdtVNp8CraCEE29AkiWO/wvo4XDMqe624rZTEe2s358=\",\"Et1nCRufHXEByyzvdP0hb79J1M8zVI5tgxBEblYst6k=\",\"HoJHZqN8sdHH514/nCYfSu+q9lCA+HDpcrFBMueqbNc=\",\"BK+PA4I9N87dQMF5GsdFt2jHNSNPV1bWOLIA4cE0ux0=\",\"G2WicdeH54OCqe5aFxXJqiPjVw6S2s11AErtRrXk93g=\",\"GyOdTruAzgmDVuhkYy7b5q/8Plo02S+5UYq4nxbKTyI=\",\"Cp8jM39NhqgsXdmpIWzBgqWmtutvxeQnl98CLidoRso=\",\"CG4PLswh4wgJ4fJpfNA2u9YkHWhmiybvy6WmO/r4QDc=\",\"Kb22A1C0mLXh/xT3Ng3u5qoDzKTe4alMQYGijw/Sqfc=\",\"LtZsHaHFTLaFxIoy1lDSTBcWKjx1jrGa65d5/TXOVJk=\",\"I3MdVkVgOFthGHejcfJu9TpkJEcoqOjF+3rx15Pgx8Y=\",\"BdIHHd2/4CCh1U076FSF/aVelGNMPH+StqDn34xUy0c=\",\"D0PiSCIAQZ59a9MkJZit0hyjx6bxKXQBpIru7d+MQsk=\",\"FHqEo3ExxORun5yll7mE17SkI5QloSzjL4/RFIdKjLQ=\",\"BqzsUGFholNt+GV8yunec9QAtzQSQ2jMTab9hu9nChk=\",\"I8oYfatlXKgOGvhdccslTwXSe2+AAONmRDr76DxMxyU=\",\"L4oXkizYbGBpFpX5O/D0MvHvnwXi5j6VMqsnf6R8Apc=\",\"GEa5dpqPMn7dwvpS4jWzxUgz8124x5ifQ0LWZ93yyvI=\",\"JDJwwuSjK7wZ0r1SJxuajaP3YCUa4vLXg9KFTXSdCrI=\",\"KeTwHA2hZV2YiH3AHqL6ozuvk0Zg8sk0GH6mkC9eDbo=\",\"A+Rt1VllpwrI0Ej273J0Lv6JeopcrCSgoyNFKnOKQnE=\",\"MDKtqSoG5yXP1c9xh5KTw7hixwYiG2BL8ASQAYJYjoc=\",\"CappYiWLpXVJ1UlhBL4dRNNq2tARjOd4D0cGVeenm54=\",\"JPTD+bL7fd4j9FWrSl52rGBhfka7eQDdl3aUIJEbWcs=\",\"EOQIz9zo1vm3txDSzJOTfNtD2G1ZWA/1QXFgdFyAt/0=\",\"DH4flDntb5cBDlU57PVr8VGilV+O4gsuyJh52BzSShY=\",\"IL9920LUydfIvB4bEQ8GVmXb5GYUVAK6Oj/rzg+/s9k=\",\"BIVyTghVW3PYTqr9qXAqY5uvTeAEaHXR8M9gmhJw1yA=\",\"Lme+A0IasfgiBHhhpyptCElOZbv9E8P3/m/0jLhjdJs=\",\"D3lQnAPaDBZVfHP7EShvn93Y+G0jUHHqp6pxqF9UcTM=\",\"HfHuCrEgyGc808yMbvLhXXSBCgOAnGHhbourPyCils8=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"IU429eBfJLPP9YbJYDGuk4+By4Ykt2aXp+HnmYbxy5Q=\",\"Am5fVq+TwlwcZqZER0SbAlZDPUfWQTwLL89iEO5fE4w=\",\"CzGkrZ7AZpiddCGw8csG12g79aZODDBn4LGjvKWmSio=\",\"CFYUdHd+fxeTQRI6t4KvrU/2Mt4Jhg7/br4p5PsaDDY=\",\"D/tXNlJSu/VlaVYjJ/jbMvM3ABoY5W/OsAZ0Gg3jA+0=\",\"GGmJgh57p1iKhjTYchBVLuyI+EbjcBuzNqW38FB9Abs=\",\"K2hlV1j4QtCqbayszUYer925gbdRZuVdwe4sIIMI5fM=\",\"LTmfWGyJxgVWp2UflAmwGquPfZ2TIuyu3JPFkNnND8A=\",\"LaW/nJ6dpMOUUZWAQFtB5lRYhgY6gwQ33sMtfxva3kc=\",\"K2VVToklhWiOVNW7SeMh9Qe8MF/lb7eA5B2BbdkVg2k=\",\"K6QTGc32pBbJ4RvKhEHMYQxufkXCEI2uRxhA9x3qxxQ=\",\"JA8jz5Bm+PUwiiyw8z4bQM9jSYCp92u2/wfihzCGj1Q=\",\"Ix/5oSIjR6sgoF+qjUO/jLYvD/nfVh968BXHPRkf/pg=\",\"BIL6JdwCQ2fI3VQptW56BzbIZv6E6hr//D9dD0If5lE=\",\"KSNzLaa4v27lxzzjTTrGD5Zg7aIHI10dWvl4QQPw+zs=\",\"F1P5a895EbwzK8/9FR6egiSKRFF0dCBLPpiIc45Yxfg=\",\"FeHSF62LzMuaezAJ8mwJV26ag6APN1H9SuSzlmZ74IQ=\",\"AY46HHT9ULTPWPMJbtEp7/HhKTAlB+bv3MRMV3/yNAM=\",\"K6Z4AHHWZG+9qA0j+r67rwJyqVP7oySeOvC1byLOgSA=\",\"H39eI4sQNylifVwix42S7eGaVplZcspGoxfv3Cf8cOA=\",\"LqG99txLs7psPQaOCFo2HshnbG/izmboQohbgwMVN4w=\",\"Cm/Kd+pvZDf8K/p/K+t2jdkI27voeqda0wPGJ5CzTRc=\",\"Bs5J1uPX9G0hda6aF2FTv9OjuPkyN6XkXKnE7gTrxdo=\",\"CgHNzQbD8kGHvvDUqDuOIaVHRvJ/Dw2Rngi3zw0kF3Y=\",\"E8aOb3UjTdhrlWjqVt2YvObBuNZPpL3pfc11YtCphEs=\",\"ChYtv+Wd4FLH8b/VpqDth8XWEg1TjEClN+zQ86wS2Is=\",\"KvTHja57IP1+M36Dr7H+ribFVaVE2MqPxclVVCP+HB0=\",\"L2x19DMBxKW9w9MvwdZv2qpPOwQjZCft6H683LbH/lk=\",\"KkqpuLlGS2q2xYRkXIcpWcn2i6ZcBXwjW34v3oFg5C0=\",\"LY3MeMZljBGI1g0ID7PNizTuX9GtzMikfUmeYspyWwU=\",\"FNY4BUfmxUoBfQTKKyy+MFpGOLMrQWMZW0WdsHP6mHI=\",\"BHi0PTX3jLNVeW4OoOjp9ai41sWc0s9Y3026waVd7+8=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"HvlsUcK3sw8eLFmhPp528HnJB6RxizsYJyKII7nYFy4=\",\"ApMhqXEh8okiDrZvU4LvY8Vqs9KJORxNthydrNRKgjo=\",\"FIG/JOe0XelnCv5X/epBuL7uz7I0Iug8g96faEXqlXY=\",\"Ae+EfTwblPfV3/QxnIFpGhNU92/HPbxgBjhHJXDIxGU=\",\"DCZmZt4vi7uqIKyntK8t40LPGTBVJ4TDADQvOJZwO54=\",\"FJuw9bnZBM3vfARe4ja8OKM9q4+rJDgbvRSqwwsS68E=\",\"LuF2rnapGWJisdm3jOIkfPITPnB8zNlS432S/XHYjZo=\",\"E3bFVz67cmX3CsuEP3Sf+rb2nTRsAej6WaHGEJHlPwM=\",\"EJinkgqY+1DKo1QMXvyPbbPf/pssgGrrIFAc0OCaW0U=\",\"CwHMcOi5/Uj3CT3MK6ZYmHcctDAjiOOdlQlbRG+/a8Y=\",\"AbDh1daGtcaHlBPfXFEPtnKm1mIr7oYAjzLAwy0je5Q=\",\"H3SrXlYaNgb/O5szTc58ZddyyiwdirDiWR17jbvXhw0=\",\"IN5/jmpJGreaHWOPerdg/FwnKF6QyHrVEuhqG/87JH8=\",\"LkhJHt7l2u+e5jrFLLFzSqaeFbaNjJ4NporXGIWDl9I=\",\"Dr3ch1vgJhOyJwHa3F860QIKeXRpoCwGRUWt/ftz2v8=\",\"Fx0EPyUbcBR1v4eziO4StaRpzwtfTBILNLe43zpQuJg=\",\"EcfCu3+s2MTQ438iACaBhJatlvAAmXXK3lqF3QsxnTo=\",\"ArhgWMCAVZ+EwR0zzg3Xfo9Kzv+GRKHM94kHtvAvKi4=\",\"G9Yx1n2aw1eh393hySpisMf8/dwGN2dGtFIxh4uD2nU=\",\"LL3Yb16q7aY0KNSjnHiN9+CMvmICfUI9MGD3oE/kDRM=\",\"Eg4JYMASgF82dDpUDDuJ9Rnjn6YxuhfSVC0T7ydGnLg=\",\"jhiKz223YeJtZUBLv9egtVN9TgXYX4Gd6LsIsfnm3Q==\",\"LaOnGeO5dzTeyJTN/2KELbyvj/w3BAvdPyJJ0y30LmU=\",\"F2rO2+LcjNutCTsqWRKSsjEomTk5GZG+O56/JydoedE=\",\"FZZBid+yA71csKScnQ/jMLyCpm5itL8pz5qHi3QTPJI=\",\"B+aDNyWhppTikKNM9tclQBt7psGwt0Aia/04tmrNGwI=\",\"Dk+kTEN8C3hx19uR/uQlrvTexUYcCMuPfomQq4qjByQ=\",\"Lj8L7f/r3TUJvmt5JTDyBBsEFx5yndyXGKLK8Vr4Szg=\",\"FQTcjQ3OzDTaVupVIqK8eWDQ3S4OokRmuE9Zql2wFac=\",\"F4yaOZkQawR5UvuTOVwhQSX5iPsc6//+ze9CeKB247I=\",\"GveDJZbu88TMhjBhWIOhQ7e2mT6QtDMuZvNs3xZ7yDg=\",\"KCLc7uzrei4c8/JaAY+Ovfz8cgo543DGfUMz5RXdxyQ=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"Jc4NGYQOgAt5ipAzJpsU8XJqT9Zgy9O23DyznAfyf1M=\",\"F1+CGVrDjp8R2wdziHqTM47gfShSWH+0Im8R2UIrgyg=\",\"AgF714ONC/o+onL/Log6gOY8coikQzmXsYtMXw2l9+M=\",\"GBiy2TpNgM4AaP2c5G3b0gC2BAOZ9DVRlO3J8sVbWsQ=\",\"F8WdgcIeb4P4ly/gfgyps1LQTvcw+3bdcpMZJcmnhCc=\",\"ATaUrmjhxV3QKluMGRX4eO373a8StF++n6J6KVSyE6k=\",\"EgIh2KhFcXJkc7/IStR/GwT/cOeo2OnB6R4RZem08Y8=\",\"FNZctvOy5Lrlrl7Ryvs+aOqGFE0n+o8zrqupKc/vTYA=\",\"GmEE2ulieZK2J7h9hOZWAJu2mjp6m/7piqgNvyG7bKY=\",\"Hjr4e9RSVVctHRTMug17L439ebeQaMbziDyp/uUoMKc=\",\"Dz0N9FqnvWKpdozSD4Rmw3t+xWYZaLLNGKvVc2cxkHk=\",\"E7ivAAQjS/NfIKfMe5/MyZnQ2OT1/28mwjeDWh/gQvw=\",\"FuC/DJok1GfjjDd4x2suIlD7HAb9Rln/+jCT9JOp7KI=\",\"JtKMNFOz1+ygjoemxGv4ppg4X/NY4j7bseF07+XCM8U=\",\"Jvz47uux6nsXVMBHusmtiI7b7OQoRA/iEC1Glp2q5kA=\",\"JzHMuvI0B5wQOOarGC7+Dx26PEfv/D4h0uGV4/AxlQM=\",\"DHhfD+Fl1dJva18qD/t97UQI60qS8+s9E5R+sJQpDZc=\",\"JYHH+qI94Yslls/BX/AdvIS+oPpIBsfRoKvEPnbuDzw=\",\"J+P3a3M1/5/M/8hl//uDs2iZVSHpib1N1qhs9ZXUoX4=\",\"EyNND+SfA8SijtXsK4BE6cfdIMuDHlQbfFQNtsGABjc=\",\"Eabq8qpVGDdO6kGZwR89k3pCZJS6YU3bxqxuodyAT/M=\",\"H8w2e23g6saMtSTPgAjmrb14PowTghiJAx+IZkdmSgw=\",\"FFgDi/vJPBKXT3R0r+W9yUy9U5yRMQAWnMy90UMVGiw=\",\"DySv/6qp8E6IWZ7WltvU6uKER8LwW5lxlOyDIYnN/iU=\",\"B8jhVzJUN66UXDxnxMdXSTB2uuOucgsA0MNcNkU/aCY=\",\"ERmBgZULSiR13AEIi3IRWpQoX/7EwqXKYU0TsaFPsxk=\",\"DtV8jUq+xeKQyiK+cLxedU4TV3HVNI99cR1zg2F+zzY=\",\"DOxrN+BwnUydWoziUoQK2m3V+5VgNyCvZIMZNwlBv8M=\",\"GS8LGM8XhVv+lCFKpHYE7sxZj430KdnHqfDIB6RnURw=\",\"EDI9bjhEFN2hEPUNZ70GYzNhlgo1f5xt5j+DdVPLWLU=\",\"Ct2QG95bZyvq0jhV/6pDGU5ma5MtYE9HAA8I0dJkBRE=\",\"Ft1l9BLPnxMlo89Omo8CwnNxssPZCIjn1O6CcT2+uq8=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"DIavo5NT7bObUrv/icXBor++K0EA3wiV+nyC2Od8SC4=\",\"DEZhPWfWborjEZGtblu64lORaRNMUxHSXAbKVOnzq3c=\",\"A5VnjyRJw+Gna1ud8Gjl2r524VuoWJ4HA++j/BJEGEo=\",\"Gc3QNQCBRq8nGNfC6nL6clvi0Q77BwswPICbhht4i1E=\",\"GgR8Uclkc1SJHqSstYIpbfuQvGXJfoiJ8dB1/PIXy0g=\",\"DGzf6aDUJxoVAYouPy2A37dGjiFjl+heE40gvnkLIwc=\",\"vFkQVHBAiljtLogWqu0cKd069Gni5+rz4aw2bUDTEg==\",\"K9caNgvCfs0PLO3beX/8WmYtyWzGTPFeA+LmOhmqBFM=\",\"BF4Sf+6rjV35V4nf2WQmroTDRyP8c1hl+A2Y7lPq3V0=\",\"FT38tRnK7ngNvPhdFK8f0D1oiKj4814PXRb+3i/DviA=\",\"FOaglTkpE1LYANzG0H4NChW1REYLagDACyNv5b7+xDE=\",\"LrAmozUKbZKzmar6flKl4XMNY7khLmQxRz3sNLIn62M=\",\"FkG7I4xSDXstqA10P2MlsBP38q8E+DFiMUykVU5MA0o=\",\"Lis4VwMshlnEUz/b1Z0+EY2BDvh5lDmI5iOfqAi6+00=\",\"LDfWieIrHzMtwS/LhJDsG2eaXhWx9Lm17cwWUHrb/ZI=\",\"MCWmDKXg1WuVBzEMyainptrHv26UKIPG9zNW+KDCr7c=\",\"B/nhRubHdc7ucrKO2r4PRzWsE275AKYUdXDw6m3geCo=\",\"Axi8cct9ydX4sJnBZdJlRf4LvxEhZ4YIJchMGASTxr8=\",\"LG/j9+GAEAJd9ea4RkjQZpBnpHPYSbThgcP04D1CsSg=\",\"K/ou4V0cBhklM5lFE1AOY4a9dnx4ORFg3E7X7DI+V6k=\",\"EvfgCF1yTJ4oVH9Pt1g6aw/UaF8fqdjAErr0cBeGJws=\",\"BY8ny55LuLxN+LZuqbWl+LkM3HKzRcSwowCx7LbiqmM=\",\"HzTKMvlW604JmrZG2VryeK2Ntc0A3bHIpEWT6i/vA+w=\",\"DHM0Pb0dYgRqLfDVVYErq/LuNbH8EDv2k414OtC0RJk=\",\"AY5f3jEVoZ0gesK2h+E15DjZFctJXHSgBp/aM3D0YIM=\",\"Eg/eTcxqdEd3X/ToceMh69/qaaWJrJBxTqT5qWCOHiM=\",\"LUYB3d/s/hMXXfjUgVXpr/j89Ena+jmiRbjWyxcG9JA=\",\"FzYytPYfIIPLs+BIU6y1uv7sjHXcRAcSPiEzwGCQXtU=\",\"JrKI4f+FSUjjjP95SZZZcQizNfZ7H6JZjFqyaRqSdzA=\",\"KmiK4WK62TnG3k2ImRDfE40ffcyJidSMr3Lh4iuVZCI=\",\"AWD0uPSbIm825yNZUJ49rDKbE3Kn+2PwVdf5sATVc0o=\",\"DdsGLQb5nzRULtA7yvB6WaRWIB0m8V1FuPEi6VZdQEQ=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"E3hcSWi7l8jHaSV2U65YpzuUokVT+uDgCYiyn0erVJw=\",\"Dskczgex6bd4/axcuf+NjmQ4KSeBNRvtw92kVK/uR0o=\",\"Iq1YX+Pd3bMjPzkOw89DpXDMT1YHbtNmpjpQtJOm1lU=\",\"EfUc1wf1GapNDwfeeb0Yofe2XSuWtgI9GKh0WTls/9Y=\",\"FtIpC/80L64+D2NmxKPMtExhF5fnfrwn1/WsMf3Gy1E=\",\"FtTkf4LuOz2B1IozW+KPRSH5CpNWQaRRCXuCmNrwomw=\",\"Jp5qgNWNvBnvceaCsfqn3HOUY2/BXHR9BKyVBJb24Rg=\",\"LBaEIp8OriSvFPiUAjzryrDjhHA+ca1WGZxMjHDi3QY=\",\"LZ7eLomTxFeUkoGQeBtib8xAasOpdyNfnW5QJn7xj7A=\",\"EdZ4BScctdhqknMDrNf8RSGAmKuZ7u+XVuYhNb932nA=\",\"FwIG+aTk4NfvVcXNZEqsziMfdyfH+Y2XQXtyC8N8eIE=\",\"FKMMa1U2x0+Y9/xX0AQSnU+IfPGLqfhpvVYw1m00EyQ=\",\"JYBMxpOw4RjoEfOhkanW5HpTfLZBKSk8lHIG2SkOfRA=\",\"GnoXtACTS+kpAdTpGtPPyYIxqoQeCWJ8zpdbq3wV8ts=\",\"LAYylz9gXO1pmENafQytdsjJwiPCgAgPtqjJIq0J2uU=\",\"MESxZyHl7YHTnyq9KdXwp2HBP+JrtPU9CdWgViCZf8E=\",\"Diy04Ysm5OpEXHBHSLx2grwoNM7zXOa9wEO+7ihgJdI=\",\"HAM93BqXIDEsw1QeiGyyJ9LTfqwc+GxFiOmCA2kpQfE=\",\"HvKM6C+rgGpJ+jEcb06NBCPQUeCjUA25eP9zGpN4vuI=\",\"BR19N4UjSgnbGTmuTOqvFKRpKBie/I6g+hiJ5a0NEiQ=\",\"BGLJ5TPkdFxS3yNiOwty88nrjjqfKiKnG1zmykGSdCU=\",\"JqMygDMdSOKqnF+PY8RCOm3IAZuWM/Sa6722pV6lzJM=\",\"CO2LG5YYott+R0YRXZbMJexRQRvLB5helSm2ERA56Q8=\",\"AY/l2ZHep3p7GPG9XBg6N3y55cnCWRhn6y+Oh2xAxB8=\",\"JaP1z2bQ6CvgXqkuOpgqazKJ2ajlFhj5sh6g45ow5bY=\",\"Bhgv1h4bNbbwCOmQn+mZBL+u9lGWGOQ1EwFV0o0d6i4=\",\"GvatFkQktskMpCQTgsoM0mYMo4h3WXOwjmcoVwoi2EQ=\",\"BrU0YBYZ5ViJqqhVwGOiztiJxrS6QZDaMnyKYSwlVUQ=\",\"BQVVvAPL+vuqo4GR8M3lTo3PT94cyvta9cfgDDFtZVw=\",\"BXnPQK38BpoLPKwCpJX7qrAXX+lI3Jeshfdpnsm+l6Q=\",\"HZZwtyDnr4/PZ7PIMtQ6Dps2wc4RtnlVQIbT69N0OBU=\",\"C58bQ3Ld8rVS+1Xn0Ckmeg7U8JxPldG5mgjB1lhabnQ=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"CAYQv4lGwsx4LIPsPq6jZoSiy2Y2apqAG2P60zMujsE=\",\"KDfIun8QTbx1A6vaAxcxtKeh3uPuj9xwhlGnOF5W/HI=\",\"DkNIYZqkBb3E+f2WXawmWuc9zfwPcb+jqUPPmJZWEP0=\",\"GZ6eJQzhKxZny3MPgBM0FX8pBEQQsdmLLW8qJhovd2g=\",\"CgQJpK7chIDfSpn5vQvbAVHl7Dy7ZwellNiq1jNNTHU=\",\"JxnZ8ehQFeoGtQ1AavWCw21ek3UiyXRyex56Turv2/M=\",\"EGahf+xebNIgJ5IBXa5VNFFn6jW2plq3p/KvkdpZyh8=\",\"DksKScNxRXug7abNlf3Dy4EmStcVIC5D4t7FaZ++TYI=\",\"AktYqSSuO/aslvwR/6uSIaIoODDpU3fesuUALCvdEyM=\",\"JZyGBr4MZGe27wVsakGSd2xsNTb/qCyJ8DjIVoYq8kw=\",\"IdbAoqVMWunvndXyqnN2TzjfHpI6r9JC5fUjtTMrvQU=\",\"A8CZzcP2HKqi5J1ISrsrMOlpQW9OGlZ4uwJTGOQWZ40=\",\"HU1LjFUu8NMYqajt2AovNjwcCh3NqzWIDcxr88VIJi8=\",\"fkz2SOksJ2GFxBbWzm9bDA58vC7vHiUFVWma/f7AoA==\",\"KZKwIwHdGOAEgqmUDVmmkGgSfwaqpQoyMi36KvIR89k=\",\"FocVMeb+gRc9gILYBZJw5wrEEl0JUWFv835LSqaXVZg=\",\"IhwIoLfcWso1elLwEneX+engHrBdc2VfbHef9D8pXx4=\",\"J1aj1E6IvWVH0C+kRgwJoumCpNUFo0IWJbm8omBL2GI=\",\"KSP9473ldR2OrHqaFW0kRNuStikYXgHlYAxPtaLqU6w=\",\"F56+DSsXEopn+Pzl/ELuJsZU0qiSxOs8ZXdEjV/VVro=\",\"ChgU7dT4Rm9yId2Y+O8pEHoYxmMgglrN3djeZP6wJ1s=\",\"HPA9AyJseLI2n3m+7xDwj943wVDU56oZeXg2WtC9MWw=\",\"L9PpI+45+rw4fSFw6muaYpsKfigpbIS6iEP48D7Du8I=\",\"Esa9TyXC0ELk0O06HlzAEkfHiukOSa5yLTKlhChuG00=\",\"EbeKCyQ71FqqTzzbHHmrIG6VxAESicRO1NjKmWhsm54=\",\"CJRTCBB7pWSGARiY5rsmqZ7A8LkHGtnOCvgg0nJ/RZ0=\",\"IXL4WvxFDNZ8Hv69a+y8ARFLyLO2K0CB5MyjQYaTsyM=\",\"LbgbzIXlSL71BZsllbTwa1U4a5rroS9IP0mXjsapz70=\",\"DvXQq4Br5Ix9C0aizsF2YIPu9LpDc6FquyImgDMFIH0=\",\"F8r4IulvTLaDJZQ0QuZXNsDx4BuEWqlwgko7GTzPizA=\",\"IxW48O6YmxG5g12K1622fgNfhcJINaTVPMfXtZ/xUEE=\",\"H1x96hqIKAqI4qV8EBWvXF1OhNqQC7MN5fuMUli0Z5Q=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"CSpnRnw3mvlCT/3NmoFlewQomZICfjqEG/4yKSTgALE=\",\"CMcPWPAkRkY5BokbJgTS+vMSysAObCVPMK6Fh0wRJUY=\",\"D0r2flOVtir5idAcH6n70hmtGqSqK+RiRGCUC8DBKjw=\",\"F/faCApxWTFqGZSocXfwpGduJJJHoqV3w/xU6oz3+yc=\",\"FZG7qcYg+HEyuM7qHeTExfCYcnFP4dYyWeDvgLXzM6g=\",\"DMMPFSgKvqR6vgEUXl81vYd1ULea5CYvYb5lpe0Msk0=\",\"H8nLZwpX+ELUe7kGIjsCqatjUrpiKAT/pR7pnaPtqsM=\",\"jot5irYC0WkQo07fPwkzMwQa7WcEpm14LXoxnc2gkQ==\",\"FUhxTHNAluLK3vSuiN3pyIhgKeIen/VpaXHxHc5spuI=\",\"ChM6OdKW1CdZj4rPchvcBX8s1jmjMXv+8+7RvzjGEN0=\",\"CkGQ7Qs8lmttfQvwv+TVhud7hM1Vu/Mi3WLEznomKRQ=\",\"JkR+4EaGVCKW0GyPU5AmcueVFHcLPWSQc17p9d81hZ4=\",\"LR1Rzbeo/bDNfaX9wz25S92NUSgSNpOrH0qj544XeHA=\",\"F7IEI2sRvVxcSO395h2Be3PXzy9aMqiIFEx7CI0//dk=\",\"GRUQa2b98ghgftaIjVA/RHI8h6XFrsnu1lhRTzaSgo8=\",\"AcFx8G6oLSGLJCE0eYVtZjlOFg2+CyfmWacpTgf6ppw=\",\"KkxAwi4XwLyfUJ6x4wrOvt0Y692hgl45FSOnTUqyP1A=\",\"IFFaXYZYGwL5F21yvsaeeFp3xBoW+saOG+sq1B7iHxI=\",\"DEAZRd09jbzKifr45YsEaefnUg8uiYIhSk3CRNzKXNE=\",\"KL8IDq93NjOM5hSmLLsoBe6iKwv66sHQzSzesoMK4N8=\",\"IO2H7OzVTcSc6VWoP9TbYYkYZbJL0Jw+rIUDe9acUsM=\",\"K699bnhjqmhVX4v9dkjRtEJvbDn+2CusGXNos9Iur/Y=\",\"H89plEzIiVaSacUDHMH+ih77CxlT7H+Vc79jZx7HqUc=\",\"CYC96zDgSY88Re1OF6SuTIw77pEJWmNAIHtptN2ruDo=\",\"JFVSJybDyV3BTn/LX8HACLVzblafgFBecUVPiqrPqsU=\",\"I1QVkKxmUCluqcO5NQCeecRGKA2b8QELjmbN2p+JcNk=\",\"HRSvT0tU8Mk5jgUdKiIxk8eJl9WRpjkQmBi4zdAvVWw=\",\"IqdHh3vTXcuXUgoPSoEse3hwK60YEjfAGgX+6EKEDk0=\",\"Aur+F0DKZ/gNiuWV6EwXA5oFYLy5YosISpfZ/0r69rI=\",\"HbqE6ZSlSiFmbe8ivvuBq/Sf7HbEPD8g2pBDyYdO8tg=\",\"E3tHzy89OvwC80aenRZeSaISrCVWkaG9NWW84Eb88VM=\",\"HusaDtwzo+abhEVYHujw3fhHSP2QFUfUlEDIY8oQyuo=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"A+VybyssYJBt6wCjFDN6nG5O7nBJekqVPqIG0gDbjWk=\",\"BSjQN0MQ3QQtX4Cy5yC2HEIAU5/R4aI+4fjzRwQa8Ns=\",\"HaQd5yCmHM9uO5uXyjbXQ52hLJJUmhHSOEdeBfkDegM=\",\"IcHZK6liqxJjHk9xD8mwZsNp70rtcJ/V9pkvV74lG5k=\",\"Lry29JS30Go00tCXwPRu+SlkbFKfbvyg7ern5zOwJ40=\",\"JroYvL5D7hoq5uG03YkVHsF+E0GDm5Tksr+9cHYar0k=\",\"DwXZs5wLmzyhd+5aixLeRX0AZD1aZoqPsw1sugJmrjE=\",\"DbsSAS7EZycdGJGE0Ibqy1MMG8kGiVhQvICvcutuSaQ=\",\"Hj1jdVSIR58FAsNOCXx0/tGSa2E+l51TpTU+qVnubJ8=\",\"KTn+Q/RpDebswlG3y//8oIL988hB1ewap33mQBbSPA0=\",\"KbMExK+VA6Wh7XTPs3yemCNUBKhR6RX5tHb5bPlyCOk=\",\"F/WPr/3duSiUynza1M03najBdAdqJQw6aUQdZJzgS8Y=\",\"GRRW/uh4hqeuPUGQGgXnVdijzColGcwBGoByTUMOkYo=\",\"BDAfuyYJPlnrWBiXFGfBN+t2M6AOjR9RhW8uOFlvPS8=\",\"En/p8zKbwzdZEUlQ2K/khKmOMwEdpuQKQdwfTKLOh6Y=\",\"IBrZkdpHXRRthdqoXFyj0tnKSP94hrBuN9us+372lmQ=\",\"JKPYUAbgzN09b8YmI/xbNrGCetV/dRGpZ3zDYyfOvmU=\",\"JzGT2bKYZ2e4k0hJk4x9EVfrwyV478x1KNmmoYo1SVM=\",\"K7ZKO4JaYfbItXeZOqY6wAZZIhyv6SQFvogQJtpylnY=\",\"D2Vuc1k90JBUf7WzuDYdFyyT+UozTl/t3AWf0DiQaQ4=\",\"KInBj6LrVy1HS27ugQt1CUJYbyeSsUb0VaAjuJVC01M=\",\"EO1ff2C6tbRzKFrL1Z8OPdKZ9tLR5kEjIuv5N49KoDE=\",\"CU0PLS2sS1SaGsax4RLstunrM3wAhsssOcW5ihgDkcw=\",\"G2lQKWyamJMNKswXPUHkeI5w5C4/VoqX2qD7etjS7rk=\",\"InwvaXnZyjTtFxYgfz1w54ubdrH9vz6peuS1SCYZDiE=\",\"Az7nDuCfwmT/HPqQYHeM93tyXSTFWWeEb2rrRoGJ9o4=\",\"EDq5hiKm3RvZAJSjtptjWHOkv7CxZFlkuNAzkBkqJko=\",\"BG9bsLormozBmvUL0f6dPnPk3zA27lab7vGftHu6F04=\",\"GVVoX29vk2qIf0iS/Wauli84/sIoZ4i9JG9+ykW11/M=\",\"B+qp3mae8UQtxtYW7AgNbJIflec7h7fDdSeC14RtWhY=\",\"EQPJi8YMsnasJUF4tmjnQ7Z5PeRjCf9yKRdn5pdRZSI=\",\"FOEUHgFjrSp5UiV4xQJRSdStC0hOoIN8Qn/9eYtcIRw=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"BLkT6CSQOkt4/7+pBDEXQC+BbSS2lb4UfSb7YzrOj7Y=\",\"EblZyVpNpF2doFYC8H5pa4rAzmeBcCoTaNgH0h6qty8=\",\"H7/Ib8WOH6QDIwkWUYSsi23IHcH4HAn/EAdYNHJD8ok=\",\"D6eGUyeu+CRvRaxz26lmaoU/qOceHtwkCWRyB5IqkEE=\",\"MCAXDee26GsrD80EQ569qqjOAQiWALgBlF3e0MkG2D0=\",\"EOctjkYprHyP/93KP4N0dZBA+PYeGyQZzyZiVdaEltM=\",\"BekPGJI2O5kWE0WrSTF+N5LrmlNvRz6F+kdIC5DdKoY=\",\"AkDhkNC5L5qnzXvOAIcZw/jV//WH3zlYyF9aEoYoj2M=\",\"FuhBsu5oJRPbJ+I7mD9fq75q06PUQwOWKRAwLq8whA8=\",\"CKOXtXX7hvrSiM60j0MxXXA5nIvZz0ryX66tk10CJ3o=\",\"LtrVIUWxCz0Ly9AhZXS1LMK0QvkwirUooBiniulwZ/E=\",\"HKyi7Dw9Zhf+++aQHEJS7AHsfN2nV729X5zGLpEc2mE=\",\"FXMD6f4RSXBJ7PUw20L+pch9exTMFTEgurt0OTXzDeA=\",\"INk4A6NfBtdqtdruwo5FkdAGYnHYTt8mZg4DUNMKkEk=\",\"CXDa4zYnopmpy/BJUF2UzmzRJWyApjIq1HR5RIvICKI=\",\"F4tmeL/Fwdn61vp66iR8trT6z/vUn9hGxk8UEbLC9rA=\",\"BlA7mKbMUlvShrVufsgas2g1yWnUEBrCSdPdZYNP2Zw=\",\"ISGOwKeD3JJK59nzgmB1DwoOA5pABMwJXVu4jh+b53E=\",\"DAKJySIGc5l/A5MmeymrBIdhA0oW9rbgdrBj7GAxhG0=\",\"GYTwN3n/TZtMz9h9I3APIEs4w6YGsCeTJ8qB/5VgtI0=\",\"F6pgQmdvODODJiBY4oq3xw09GbT4rU9UpDhp4DdHAlg=\",\"LuGwCaqaG6WJQRA5SnnnOXVNnyNWzPkpOy2FHdtqbFI=\",\"IqWG647zuCV0ebyi2RmvxW/QhG2/9POp255C5DNLhyc=\",\"BkOx3mMLS5olCw6xhXxDI7zhcBr9sC/yxlN6BIR6xbQ=\",\"ElurKPXrXBXcCz6c4rHmuyRuvFbET+mUPcHqSRWDADM=\",\"G8EK9w9xJdhfNK1O9uc0fuuioRMh2hmJTF+CaIDXcK0=\",\"D2uqYonPdtuG2RWsGa8FNXcxV+ObVCO0Ox89DfKk71w=\",\"LoDvdgU/bYFfWnefunTpsDv427ihnUBVDFGaNfORMBw=\",\"Ax79tdJF/RYoPOqrH7XUrBzQiRjAwiJl9/EUqe8iBYo=\",\"Al77jqyR86s9d+qO9SPIb6VVUW0yeYOXpq0AYiCVubA=\",\"FM3O6RUOhnk+Wf0mkKKqECwux/eNHaKGgmo3BoyIWbU=\",\"EBMgq/StW/3Xvzf9G15a+o8bRywC4GKnBYeA/CFTlsQ=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"BNBln+7miMxNuq6k8Fsln3YUz1pdlwCHAWyy8us0O/Q=\",\"KR3LJVEKNlUGboYK3kYeI/pPibwm9SO2W4iq1adTYjw=\",\"HEC1WJpRpbw+dG+TwY7ob1EzHo2jokaQm2owYzk6G24=\",\"BQU11YprIGdtnd4YehXJZ2eB62weRhWfnmPX23UMZBA=\",\"FTJ2XTr1qtM8fK5SNZKJTPNUrZiQR51mLOPNUXIReME=\",\"CKaBiz1EjUPBte81dIjACIPjQmkKIdP+0h99YhQt1Yk=\",\"F9tMXFn/Gt55wBxF28e2E0ySnKUpLNeJOgFlc+dpZ1Y=\",\"Kn4fLTZc6bWr0+6vmDxvZDTNul6lkiL2vTpdPs12P1o=\",\"BiYeW01xiKyehNNB8RUqRRj4jT5wHtW/1xEFd84d+o8=\",\"GZxajwcDdn/jLaooBBn4xnk7sIiOzfy7TrFjMvvAKKk=\",\"EziNnYeSmEWSTgeCQ6jX4kdtd8z4TxwF9/t8faNxve4=\",\"B9BEv3pP1pimdXwYbAjXw5wgg8jLxb4plk5IFZLuZoQ=\",\"KDzZX0dD0havBMF1kbGSNnKA3SRA70c0mo84T2OIfNg=\",\"E1Y5H3UW2xrQSB6/+nMDRBbKojYr0mEqn0IDTjXpPic=\",\"Jv1+H21lexvYMz4/m1SPVJQbnRODC8iLghDls1mwD2g=\",\"J+yUjKICiFCpd63dapzMxpdATU1LR+qttUVYxXQ1+RY=\",\"J1KdgV79q0+k8hgpujEDmCq3nmBS+oYwRDlPtfyNXcc=\",\"Hc4/YfNGOe76CjRP6nUKV1HaBpXld0NPIKOGWM7pbwk=\",\"CRfJfUbVtP+JtczkvXhcS2jzjFO+rpzsfozjH3sRq14=\",\"Hzifdc3gbHyjEForV2nPORUpLrtE5YGSKf4/M/8R0Do=\",\"LZqsHHKwo2oGfsd3bAziE47tPpDDw4HROyjEPyl/8wA=\",\"C496jkwNLVdXxQHkSlHl9RYKAUQCgevUR5uFhhTPwJ0=\",\"CqFVNt8uxZBYd+Lr+dB9N2Oj+U6bTetcZjm9ie+4aso=\",\"CwPdd6dCT6jZRUQPB3+EjkE3MjRC4R4bSi7+l98yFK4=\",\"BwiYpxlSr60+8AYuhCDpLZT6e93FW+s1Xc0dNSb1ONI=\",\"KdVBO6JBai20nBSxZcskc2KCFJTXOLV4l6C75stTooc=\",\"B/P4B4cruOxy3SzLIjQHoZxbZOCGzbDDinuSRYxffI0=\",\"L2kzCST1yono6kGwM0eWqZYd8krQq671EG2JljoDjwo=\",\"Kr3PGUC/JOZ6tMjAlC3300QNBDWdpChUGw8Sj29TGE4=\",\"IJ3jdjXVf5/w6opr587Fxw1wEVa7NOJcCUjHCQsxnsE=\",\"ebSF3iatWCaKOxvVzfOh284pHn4wodZFpyaNNAqPHw==\",\"Lacxt5Qt5zVmNpi10gVwQC0mbfRI2KgBEFV2Q6kGuj8=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"LI+EilbDOK/hKQ8StntX0A/46XToBKxTsXTqQsmXDv0=\",\"LQLxdxe/DbSKw2rQoZ5iHL9zsEk2TZRa0qli1IEAFDA=\",\"IVCwnH4Qq1II5jL439MLwyOAfFxrEipng7n+VFioWcg=\",\"BbEO8A5hiicN3G8xPoYZevK7ER7GI/KWRRiTjk0auM4=\",\"CBOu8IwauBFvLtjKp+rAB2KvrQ/PD+15B3hFsrgYiKM=\",\"IXeYQp3z9O/guAEKMwX2GM+kCzEian8Bqs8FdQ+F4wg=\",\"E93dmPB9o8hain5YSlQaPRwwEx5Y/RmnnTWD4eqwjbk=\",\"IAx16V0VTNXZ9CuUD9cJB2RZTgF521bkYsgNobV+CCY=\",\"JMYKp37sgNpWQgKAPjZ4BuhAVuqEVx53AucI7/IDULw=\",\"IAgGD5EM1XvQGKf+ee3FCOEYlxmRBjI6BDacCy8RAZM=\",\"FUsXMONXEda14Flqfp/fQKNpyW6YiVc3cuNRU3gNBqU=\",\"ILSPSlAZqw8CKchhPET0DWyn/4Drxr1vT1lZR8nj6aY=\",\"CNpmeMtFE8eecGGMf2okc3YpKij0uKJteyLP6JJiQi8=\",\"HjKUTssMjlOL6LcC9FdIy9kQxiG6jARioDptU26PPPg=\",\"EwODBl40IhQAO+9s16wiTfwip5mxOgic7+2ciHLAVsQ=\",\"K7HpRvkBng8KOm8xxU0T2QDpW5Jlf7SaC7HYsIWqe9w=\",\"EsZwZyRia0olEdXvTNwi5WnaV0M2P1mLCYXaP3TrzGY=\",\"EF9IdrNxUS/dho514CMyy0nyKPf2w86QEvyle5WH/ac=\",\"Hs32/M6e6mAXlJS+Uxe3YaM39cHup9S9ezbEsTa6iTw=\",\"Cc0u9tRdu8oNxlc4TdtWPzZwQgEN68JL8CakucWfDac=\",\"JUrGhV0FBGdFiJKVxIWqDRQUIcLn5GkHxq5gpQ7i+Lo=\",\"CpnAVLmji74ZkwkG5kwRJsnwqusWq2wz0eDilBjtzKQ=\",\"IgtAFvreV3golqw6yI5cadyl5Y8dbr4l98ruZzcbhaQ=\",\"Cxl52hwEj2714CMu95PxNNuyqeLI+DpxCUThzL2wjaU=\",\"Lu8tkkuIQUtfif+p39S2IEehLQ4IEY0NOaGh+pndkeU=\",\"Emrj0tysyokuyLmyM4lT070qCzQbftWYYTja4Utrq3c=\",\"GefDLPbiNfleL/bpU3sj+Psu9QtaH3NOt1c1KnTq9Jg=\",\"L5vLXgzVZgNQ6mFR5KUUrITcYGStrDk+m8Tapigpf8Y=\",\"GqSW+WNyWJp0zbFSNpGx/Qcr01Vg0wuMSBCdhsd3a3U=\",\"LqWo0NoT06AFGn8bGGs11vDrmGonaa7oUNOUXuJAlDk=\",\"CmM8Jf9ru9B+Nl7gGMdtw750tAYZiS8QbN7PPMT/g3I=\",\"D0EhSBWJVcaaMCubQuX+2zMNWrSmzzGyXU/R2BNcmQA=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"Ly7RSGmQuUMb6PwUhbbqyGn+9c2P0qlMfU1dp+SW2xI=\",\"DVFAiGwj8mceaYw3M6KWvh9Oy5f3UgsCfZBhif11WGA=\",\"DRuUJwgKmGVUO2++VQKJkZiyKNAvLukoe9G8G3FoA3A=\",\"JfFHhEGeDYbrpiqc8ssi8GPK7KUpvhivH6CExzKHw/0=\",\"HN92ea6xeEzYHmnkGAc3dnEWM3LKUBQ+WzDu9aMavqk=\",\"B6vW86TFPI067+SbJXs+fAqs6IYQemFoqfk+M3M8EiQ=\",\"GY6N3mLkuADkpQgcxD//zlugLds0l5Wpuo0so26uzv8=\",\"KhD8u8GF/3ridRFfVmQKmriN/ujS83HiH63jH/nn0kk=\",\"A/dOcCVZoUnDzLXdg5s/gM4QDCZnGSkjak1wPG5T1Ts=\",\"HpzSQfllWTZgeYCbA02Y3DRaSBSn6Ufhe0Ghm0oRm3U=\",\"B2QLO0iyzskGHIfOR0DSgcyupi2GXQs9pyb/zWfS1CY=\",\"DyJPKj7rACRS4l+lSzYIBNyd0aBlZVoxIw6RofeJbto=\",\"KWslZS/7ggQTVmNLUFrsDRG8j/6rBrbudvl9PpDhExY=\",\"JLHoUqYWjKBb/g6CP0qYSzuZ7Zvz9lHN08oxotk6Iek=\",\"EXA4DzWwwTHKXS6nH0L+2LPK78SuLdtC/85Mct+XVSE=\",\"KiEUZFiptc0iMlROyEucLjwHt1y8Si4n8UWJlaXPdmU=\",\"LPQMOA2h6EAm5YvKc/yIIaaVb3hmu8ZZEzDHsIdtHkg=\",\"Ck5ajCXHkpHm55Bqi7mJfb2RVnBhq75OsrgPflkautU=\",\"IZzMrB/4KO5Q2UE2KcgLhw7SkNWyGXoLnbYZYJE+sp4=\",\"GKSnQ6BUSIRLRqvhKQAZUzBiNuzMzhuMiF5xIISuQNk=\",\"I/XApl1tP0sBemjVE0E+cCqyGVoS0wB1iaetQjB5Kpk=\",\"JIZJ0iu9Nds8MX+28eIJRK34ByD9CFOU5gb+WMk7In4=\",\"HaRcunQNtLUPxLJXHkBZCtIMclr3OT0uIJb3gsqEUbA=\",\"BZyYlNOacozjX1aci1ms/yqYkDpz1pNSNqxquLtl59c=\",\"E3r8HaKh3RbkBJw+I5UfI+UyThL+BGZSvrTNpEmiHNM=\",\"HGfwC2g2CR1mQlkqQMJ7m4dfUcyeuAQiETDT+IPSl2U=\",\"vqzXkSm5tseTspRQzmRYyGR1lRym8JQf+qpzYicJvA==\",\"HXGU8LmXCxA+PUvVpGtQVKtFvUL1NzJMtv7DxnLNXwo=\",\"A4x0H4YHp48yhyWtGNK6+GQsAFQpxT9bf5uL5RyKUHs=\",\"AdMu6G0KENETuEAKMwHunfC0+WZsTJYgc7q38C8MVec=\",\"7HjoK6YC9Ktn6Yf/PrRWKwgYxIHG6P6/SkoVfs6hWg==\",\"Lg3mrs0YSm1HpqeuQrdjRvFfmLxPD2juGlWSmTmnhCo=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"CT0TzZsEOltqWsst4LxU3mi3HIjo1hwsPDvVL+v6tog=\",\"CA+rTi422pJ25GEBl7MtKOz/KNzxVfXbWWA35BooiK4=\",\"B9LSRXZMhWNyKXxJ/2Q2WpkTes+oEEGTK0Mkh34z2bY=\",\"CrajafPUeraLqa3YC0a2ENOVMeIqdaMN8/MvS+3hinM=\",\"B6aDzTxOaGIig4WO/xIc86XsLLSHY8KQpJhPfnWoYTk=\",\"H9RMhNniVLHG5gy4wWgvXnilyfnMiOU7i9HY6b8gY48=\",\"KsK93a4B7K1sCX7BOffUQrelxIxJHAqDoAbp3RxEybk=\",\"JKA4AN94q42sOxcquocO/eZjF2WY4kif4TcfG4/Zzgk=\",\"EuRTZSGU3cj/XySfBCFNLgVxrkbtolHtZsneb0EuCL8=\",\"BZKnmPQv5Y8n9QPyrFEihvyaAnHtu7Q9JjNYaXtzFmg=\",\"CpKpbVW14CyP6Eb4z++S8iQ8vVNbazwORNPG/K/AGWM=\",\"L0PixuivBjjhY+L000qt8t69s6XfUxKW7ivF39KqjUE=\",\"AxF+mGEw0cJe7Tnds+Hkr+94PgMdYLwX4GgSiPLZEMo=\",\"Jcr7tDSu4G31+QJBcCAYxv5ne6C/rEb2tbgxTvj11Ac=\",\"KLeXpJnCsQgramdKwC71zCRA1u7h6hvh7VpSem5czJU=\",\"I785OleTlAA+ZMw5lQaAeqaEMUopmS47uztn/uf1DiQ=\",\"KGVlZNZ31Y30QN5DEVCJoXkNGqlRg7OQNJaI6MiqPjI=\",\"AkGmlQD14TTJkyUv4QUsnNfiNdUBs7I0PuDkhX4tAgk=\",\"A3ROAs6F5ZkUcWKki4CVxh71gr0bQCdkmktwbp2Z81U=\",\"BZt6F+HA6ITe94kDNmTYi6ESmA7l185DIPS1kJKkk+o=\",\"Km79aOXavJEuwrX3gU5uG3uIk6zRDpPY6Ir1zs6eQz8=\",\"IIJv6YCAn75X1699YCYqvVZieNcOA8fb0keYycmRzls=\",\"GB5WLTeSK62XmslvViARMR8JGHYT4ZY5jTzqZOf8x8o=\",\"HE5w+9TJ4J07NB4an/h9CI5rxNiKXLILw5oiFumi54s=\",\"Fwxu43qPrlqUA4hxfB7YI3+cLFHgdx/hxRFPAgcgscI=\",\"BocS8A6umbMQkWLDocimuDYDH3s/6mFHfSdPw5z1O1M=\",\"GTegLnyOOdfzqIqCw43Bsran9DJs6veso/ii/RY/E4g=\",\"CLmbazOK2q7Ifw9OQQbhp2k4vcsLVdZrmvJX9G2lxt4=\",\"E20RCKjUvOqACQuu4zVW9Z3PJqg2W29lemYlAptz81Q=\",\"LYpWc4z23EeF/bxo9ED6Oy1N4NWrbS18bBFknsLk2mU=\",\"J/Fv6vb+FSXNZ+70WCl9FpbcRb9fjx6hjheAE5nzyk8=\",\"A0D41mShr+T70GeThCEzzUPuTgshc0Be+hBEX0Ohg2o=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"FK1DXPmp9B+/qmJpjqKwHXePpq0+bXXWKOU1zsZvYYM=\",\"Ip8UhFFHCChctshm+reIeLvDmuw2K5214ljBAac4KAY=\",\"BVEE7A3765EKoIGGS9WUl8/mWswgkcLMZ167fHsqMY8=\",\"DXWx8YFENx9aDeMtyRJCMESPF1hO+T7YQwAnC27z1M8=\",\"Ch2jpYHeIzfoI9EMAK9k7YFSozdavHyOA4WSiT4C+Hk=\",\"Fc5kTJx1PytQhZXSTAkFs3EkEfi9eMHd22CmHjV09Qo=\",\"AkklECmzp9g6RELvJ6LzvKPtvfyojDMJX1V87OyiP6c=\",\"IZDgZXt/RZLtF4hOSGqgmD+W0F1JfxLZuwj8umXhRqI=\",\"GOfn0DHqS4ZUdeypz6LxVtK+vY9XxsZmMPKz6b3zqhs=\",\"DCPdaM45d5D6nUjiIQgHKtAt8PgPaEkm/6S2bohxse4=\",\"E0a+OUWCcSgYsS5AnhovgPJYvgjo9Sc+QiMEim7GhZY=\",\"InQTo2rmFT5DHE3Fku61l60YsKEZ8cZE2HQcXRMCv10=\",\"CwrjcUJV65q+w8YNPp04UsM9uVDoe8F4GP8CQpVapZQ=\",\"H2X8RhFpElU8bJveF5oJKIvCmrAB+n9YsrNuEASdp6E=\",\"HDUoTtuhzTkdYYdUsX9kLuvtQSc4K4L3wosucKj3DUA=\",\"AQgKP94OQq192G3gQcq3/dAllRZBlCN0wavPYmJvSKM=\",\"FCjrKh8tkXB/VGry4KFP1vEe7iyhLv9NNmNKCKJQHYs=\",\"AzUDxDRIdzHXVOktbozjJ87suuZhcRBFBg4WXtKE/Sk=\",\"E3pdZ9jC19kvg0UaINBpjz7GnZvtyo/fI+TMdhwwiVw=\",\"Az/1SgVDqFnRDSORnZNT6xx9+MN8931xwDNCf4eF738=\",\"LvRdlep6Km6/fNQtG7Pu3kXM7rPBMST+Pkv5vUORmu8=\",\"FQPMLJ9oael8PzVvwIiM7hGxIldresGeU+IuZFQbhkw=\",\"E7fgC7FT3gfOyt0lJfBADsgcfz8BsvjA1NkjYm9QdNs=\",\"FWDoKkRDjHXL5ee/QkLpsxjoTQ9wwke0lBIUpU4uy90=\",\"FubL2gWeqYzTiLyXtAehUNA8vFTbRDFKzS/cuFbtWeo=\",\"Ik4RCcHrRQ1mXbmqWjJHVOneDzZFw2pPQsBlJaagLxc=\",\"H64elcwUWxthGumDUpIeViFWMBm87FTvmqCgBsXKnA8=\",\"KcLJJoNDr8JEhJMgXY7+PKEv9LpFGV4SWxpYWzwVNiw=\",\"F0WqAabez79HQspOtPtGk2xZOo+7F1Pksb2KwmEH3LY=\",\"K44UnwrUCtIcdLo1Am3dv4nc58Iiffz8lKVRMLKCNI0=\",\"Iesgs2+QbSaT835rJfEKJR2uiO6eW+2X0L/qnZXrYVU=\",\"Li02fr0Dq56GOicqDLQCQCIvMtHvP3p53pkWAjbN5Dk=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"LhQtUbs8Y+EWh76iewPSwfR/9GF9zxeE/LBhOXGL3A==\",\"L5oNjSK7F9yR+0AUarYRwk/Xr/JyETnuvGfxA6uqir4=\",\"HNNEb+dL089Oh5CGnKUCMV4steYb/VabeeS866fdGMU=\",\"BIgs3zaaa2JM3N8UBSHi9dTwVtW+iTjq/asCsrayg2U=\",\"Daq9ltCACJzAm3U6ET8Dx5zduHn81P6S9kCGrzVTIK8=\",\"Efradl2EA3EVnTk9k4OEanWEUhZHeLFWrQfS+XscgdU=\",\"Dxu3fGVofViPOv3S6B7TGwsU56azSz8ZQBMxCkMOcv8=\",\"G2y72iUEtscVcHDKsYpkz6Z7JRdEMK40+I9B0Gpd9hw=\",\"LKrbmBXt0LAIkciVL0OWVL/2HEgNNDBKVZsu4QboVVs=\",\"KdZHwv8X2Q2KxQDNhivHzzvNY8rkXRO6Ky9b2BnN8Ao=\",\"D5V3KBwBE751UFbFogDAO2Uc0XXvTBxRUmomLbeLYBI=\",\"HHpBBLHrNEqdEK40/p8Nm5RLHye5rWDnjQdvFLFXndE=\",\"KIM3ZDB8ByNrjWTx6HKhXya5PLqmMGLFcotqYSais9g=\",\"JF/5HTbfmpMBzJmKEeoCdgWuoNrDCiCjL8W5VG/18i0=\",\"CcO43cPIqDs9vAmM9Ue1HRl/oWVxymzhv6YD8jR0GIs=\",\"IxI7DxaQ88YaPXh38m8zxMJv64V5lmuHj5MT8qe7ByQ=\",\"L0LvLxdHSMRPY3Z7ldXmayVU91oWTgCDMzap2ZD+Qnk=\",\"HYAAdH4D6Tw3/iG4ib2+/cI0uqKQpoq6UdNReiYOaUQ=\",\"ED93mwiZ1CUNo/wl0n4ERKGEmP/AvwznrX+xBroxGhg=\",\"B/TJ6sq/GAuEDMMESNSSZpLkpNS2yXDg6BjF4R16mEs=\",\"F+XgPs8BQIpSDBxbuOGkR3sBEXiuwYQE5BRVT9eNp3k=\",\"EWzRpd6zF6wiANkXIctMeU/RvbngTIDSIrKud83+BBI=\",\"JZhH/NaUE6i3h6RSlQy5lwmBzoas6TMRLyBbGLIK8aw=\",\"ByRLQXSYCJkZP3AxjEwJI5oBFDGx8L0/XHno42NH5Sw=\",\"J6YSLFiCmWuLh5I6m2aipJcMmETNMDToR/7NkdaxP8w=\",\"LAvvaIXZpNdvQ6Kd3eYW+oF0zSSrWNTccHul+SRznEE=\",\"LQzUjjlS9NZOTzdHfiwKxl/LeGgtzY+kxOnXRMEgWvk=\",\"CNjtyegd+6bNcwXBv+c/QtclLbsZiJ4SXFya7xN4BMc=\",\"IIYKcxwVesG3rYVLO4UdDHOfERmVqBIqqnFHzmE1Whs=\",\"KyQs9R4/yEH5JRU7rGrpS4TA5IOdpww2Oa5VSi/7U4s=\",\"BxZC+PsAjKNmxWLOB1W9Dtwss7GFHZGHH3whfGwXuBI=\",\"EGKDkOuMlIndAFIMTR87y3kX7oSersXQPWYhkuQOTAU=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"LGV89VZVKsANPGoxL5QcIXUtgPb7lx9vI3ufBn9V71A=\",\"InTlr9QfSE1LuEbCP00V7siS7RKr/Feq3HHEMd7A7JQ=\",\"IePurYKSOEzU6auJaYZ0rPiZsxDE+xR0pQ7WirFe55s=\",\"J1sOCQiNGhQ7ODTtCbq/ykVpQwHrOWgMfgFFaRhZYUA=\",\"Ep6uDQ79ZinyhG4mWdERkPmV5/eXbbpnBtUnX4rkLis=\",\"I8Mpar6tmFspjS9zWdb8a2ZChGnv738zzOcvfSYeIA4=\",\"Eg6zlJobxtrbmet5fFCJ9sgbhIno0v22SHWfm32VDJI=\",\"J3soM4Vlvr5irREo39J35x3MD1y/FYhPP0QxqqAiriw=\",\"BPNuOJ/567O81oENiyM8DMzS0KmobwxuztAbzN9FOpQ=\",\"JUj6ZUdWWAZuKC4EP7fjouWRatY18nl30pKwrT7z5OU=\",\"BFZVd8VTc+7ZXJqvXJ0gLCcM433BoaIjLIVviN/5Nk8=\",\"Iz5yeEwR2oree58XKTXkSnSMjLlJWRIvnabH7WWmzxA=\",\"FYty8wh+Amczbif8OSHuOjpTS5Jf7LgnyiX33HdSMzQ=\",\"FcJg88MgIL5JOsgdaWns6cjoqrOcsRrYxpvZdRaIZSI=\",\"I5Y2LVdLIr9PKxYt22h5rkrugDYJxa+BsMyW4d13+2k=\",\"LQvfvZFHGVkH7TVoroMJ/rNJ/f85fDa1Zwma4Uo3cP8=\",\"LNSHxiOVdXSNzpobHpy6qqnfS9u/pk9oq27Z+WhYmOw=\",\"HnOjKXaEsJjP0+Jw7EKZ/IjZcKkkWWAU6af2Au6bCBs=\",\"JIhismZnv55xJVyEc8TU9Ji/Atb+bFVOnWqBlLRDx7E=\",\"Etre1lAtFcx8z9OZjgHDmFFhFin9mmVi9ijvg8eRC40=\",\"FemY8AzE3ST/VZCJzUO+xVZvJQW4E2xat02aQm2HXHU=\",\"IX+iPVsUqf+oN/zHRMSmT9E+b+Fid3/INL8RnfMGyMc=\",\"DK3PmMBqunxvNUzQW7KIV/N5i4MRFlLd2m4vj61qBRg=\",\"HFwJBvAtSm4/4xXyaJHa4RMkNrPP0Ej4l6KYirsU4AU=\",\"CEUsQTGnpPVzDod1Gd4bknoCJg9Wqw588j3UEBAJPO0=\",\"By5FGJmLsqp98aCU5KEDKk8WUUA6AGr/fY0/jgQxs5o=\",\"CrmIjSkjK+pNzXfJYnaTpPKSN11quBSC6wzXGK3MR1I=\",\"D8Ll32C7ShiSU+c/BwJbNNrJ+PbCFaJsU/pbOxSC4QU=\",\"BQ6C6QpBn5HmkGJcUa09oVavylHtE1MbDmejuJOFJzs=\",\"L4ikQV1+iM/TzfCltLvCayQzGeINDkzoYaLypQQuk8s=\",\"HhDndtXhXgeGzV0O+W0aszLrBXc4M+ogzVoZiR342pY=\",\"F95kcizSFt8jrF/CD0KYvFwj8X3oLIDTYaHMEMPzt6M=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"G5wsTuu+dRZIFSJxTM77z59Gsdms0ypwdPbiR61syGw=\",\"AbQMOdutEkxXASXrCyWG7JniYEEeDdhxz/eGnsOGTfk=\",\"AzzZsXGoPyGmQ8nbYXT9sKEu1w6W5NvNfNE4iMSz61U=\",\"GcuODAVEADR/rP/2bqzZfXlL1htZMjr0Ea0Pvi84CUI=\",\"JsIYUR+HC1XzBeF4fksZ4atoK4yCMVOr+H1rk9gI5Nk=\",\"KeEseUhIv+Ulq4HOZZ0s8REf6z/XEY+U4iqGtviLU88=\",\"OmZYqDTE42FtxfkX+gYtJRyLpMzNCVMuyg13mBsBcA==\",\"ForavWeDj6279Gydlxb3FJSrB39Cys+cReSJ00Kj4Vo=\",\"EXQoYwOaZ4jfNGTSZEwjmxkpw/FvQ++vUF4kFvXiOhw=\",\"Emq62V4rUf2YkXPrJNFw2zWHnS7ZWutT/EPze5Lg2kg=\",\"I8ISM1Vpzl85VT6zKBWf7726meo3vpc2X+gEnlUMk9o=\",\"L03RFwzVaB3UnP+isxEF5/F3LBAnfaZDYgiqGklsDKM=\",\"HxrdXbRgUC59d6Wr4GtTkb/ZNj7IRfc3ymwHL0bSYWQ=\",\"DeRkjBXuHClvS7xQ/PAzaAr+h2TJO1JNDH+WoXyPoME=\",\"KUDz+AO3mmnsE2cMO871izqmIlxf8bn9i88c59nag6k=\",\"YCKiwOZ6Vsoh8glSDreJicMkQ9bWamWd74+wnkHcOw==\",\"JhSyLtccHr9WMEivrXtkk05RxsF4f3nWyssM+kAWkvM=\",\"CuA1Gj84IY0/ZGgupbS70ZydojErbWbJik5Xk/VgN7Y=\",\"KssUJGqDcvNulrribQKY0N7CqANzJYSFQNCSknskevc=\",\"BKwfO/Wf+CWHVYeJGZESGckB5F02jkhf1YFwKTXlk7g=\",\"Y3w3IvWofzwUhFNFa0vZHd6GSo1om3OxI3lVjl/kJw==\",\"LtEPh8V+bk148x4Y8cfp7nwLWRF6bQNOLq0qrhFMqjI=\",\"LbU57/KbHE6TIYxuEOlVIXn7ewP8cwiIL6mtpanrR3Y=\",\"DK7cYuuI6hmm6l/eFY2ofHT1kQmcVqEQRn/LstzSH3k=\",\"BIXVgktNiLXDKnFWBUh6a1iuk0YbFREPKn9xiHBplA4=\",\"IPocGEY5P8d2xYaMbrC4QeZOr2E8IAXqNhsxfau8pT4=\",\"Lhf7NCCCVBctA5KN6MVrjMKfh+Keiu8febE7+1566Q0=\",\"HUX1d9sl9JAnYAg3bPi1mgjyDUadhnYBD38oHVzRrrE=\",\"BI6ozZKVoaPkjLIlB+cjfQplZrWOR0fAiW++/Xqgx8I=\",\"MFkZZCjgVNVY0OagkVWf9Bnd/quOKqG6eW6YhJCY9AQ=\",\"EXDrAC9oJHEVci0GOPzqfCt/cAJJU8czvIzZSobCPKc=\",\"Jfy183X/PVzEnKKTaxIdlZG+Pgn8iO/upM+QUhqgS5c=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"I0RHBzJfx2g6Rhwt6iFz2EcsC1sTcBs0uHIDv/6PSqQ=\",\"KycuANodHR12S32pOEzS77jbhgTAG58rgzp8FSA2njs=\",\"F7WaNbyhea/d8kmToqKEZoYjKNZs8Y136L5flQ1/lXw=\",\"IEYNXH5FSHcsYZ2+iiILR3iCAFGAiHN3wOy0tMIM5iU=\",\"DRNGro/PrvyWSWI16KS2ysMAooT5e+aPCkU8VVaeLhw=\",\"KdXI6QHW9lniybUfXahzx3alXen+CpWRDFiT2dZMGA0=\",\"EJKXxXlQ1ew043GvFP5AYV4m10pP0lYtuviwz8DaZ7U=\",\"CvopSwuJc+dMa8vN8JU3JmeSaN9LerOgrwSW2A9OkVo=\",\"HM2ueJSDQU78WWt6dNIMxa8t51ldU8gMZ2LlmcTBmRg=\",\"B9gN9Oly1ZYuhEdFQDPZEhJ9KTD9UinRJ0qsuTqzVGc=\",\"Gefd0FB3s3EPxs8VoXRv8/LOewrZNVvcxZnogogbeBI=\",\"GcUqQ7ilO7FG+vaB6Y/IZwgAtrnd5H6jioSbgsHxeSA=\",\"LtL9LzoveMNdTsVKQbmUHUBAv08HZphcd2tnJnRu/rc=\",\"EX6bku8wXhzs75DLQE9rF4sdLCFujDv2UK1bn2daJEY=\",\"J9vkmAllVGGilAhQqoxBzm29UiFACp3OSfnz/5sE3Vc=\",\"i8hasve50xUv7Df9HGbvaI4tceMl26QO7thNztTqEQ==\",\"GFUKeDCOR+WsdaPNgtQ4mjfGkY7UK/+ondEoxrTNb1M=\",\"ItBsT7bytyWpPLnpfwj0ZsLSB4lT9D9BWb2v46m7wtI=\",\"Hz8v9epLYETQ0ULChQqJB97OJKnnxQjAmzt8vx0tszo=\",\"KYWi5NZvGywYw/ZH1ERHTUMv1ZfcI2ccyzv2HBNR6ZA=\",\"F36Kg7zGg4BeGvfnRCBuBfyZ+FtgWxDz8IZ5E/9FpSE=\",\"CXZmh0cXaI26PZVG/3HLP6gp0QHyvsmhkbWRXsEgtlg=\",\"FQVdIXe9g65u825PET96U//yGJhPc1iJiKy3+JBGFpg=\",\"DgGXs48WccP7ageMtEPs4SK/3Z9HSG8/xd3Nr+/cnFw=\",\"B4uMAaZ8TlyxVzhBZJex1LPY/OdjHO+RnrSjkBW7W44=\",\"JvWBcdQ/XVJTVGj5fz9KdqVtQ7sMhWCsmK1vxAnGiVs=\",\"LbPYkvVUrosbWBn71K558jofRic4NlbJO+Lj/0L358E=\",\"GWt0/dQ8n6T3cRGRHc7WhWs5exnaR0dP4ajw3mK8V/w=\",\"BiONXjzaojjHZw79ZNvM5IGBWWX91V76irFwbXpDqjg=\",\"IjMqTOa3oiPUXHd8e9yWBmnkqAG0p2uItm0FA5pT7qA=\",\"H4j+ywjgEB5HD13O4si4RtJWL4nNJ9kuawD6rK4wOJ8=\",\"DCraU6X8+0hNCmXFCTBfo/ANuKL5YdRRXBScheZ3yNQ=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"GyiSbNg7Rliv0tnP39zmuHqpoHJjSIkyCjXNy5IV5bk=\",\"FdZEj3bPGyAmJCjx5Ba70a+GMPs2HX9kRjmtW2DY8YA=\",\"KvXfoZzMkY3kSdXTtZLm0E14vXlubwcJjmRjDyB50ck=\",\"GdD/FpmUtQ2cqJa/+9kffztcfZrVE2P+Xw0vthhcJBA=\",\"J1X+hm334tlbwsgHLlQCym9Yi38nNKKlSkxRnKgpdHQ=\",\"B3oHJYv6IeKsJV4goNMdmgHMhcrUvALmkhpQftXfRyg=\",\"Ls4lD2jNIx37vdNDw2dibzzEE6Mr4I66+ZbcgVAAO18=\",\"KNXyn13yobT7XceY3S+y2Qmam7FeBpM8yzgtP3EqvFY=\",\"Kvjh/PN9z19VaZ2ZKe9fxlBd+nngYXguvGpL2jEA/sU=\",\"GjkeCKOTdQAQrb36fGIdOCopuYiG0kHP4MVnuzd0iVQ=\",\"HaP0BYzCzmVUhCWI2v5fRRdmFzAYPwuZ+a6sq/x6z80=\",\"HjsYAgBf5yltEUQcB8vqYeMrr1SE1A4xXLSeIGO7SUI=\",\"HspnKKWLmX0JrJ2ergW82Gr67sWADf1z+wKA7cmW1hs=\",\"KZHa2iaXl14F4PdLSmlWBVfTS+8TL/c/PszlAUYfWcE=\",\"E6nknnh1wVRTnSDP71BlNckUIgVM0EqhleEmlaBzSHs=\",\"DpfvMyXsOZNUVsKjMENe8QbVCz0kp05VBFxY2neNJzM=\",\"I0/U5Q3cQrGkCxQQrX2bvifSHrYdG0qwVRZCIhQFnuY=\",\"DOFn4XXrAh/iuRsKu5DJRmfqdsmhE5uVjs8U1kxhdyI=\",\"FYcQEHWZcqh5sYpNGLrAhwAT7h9kbWP0vGP83ihHroc=\",\"Fo2B9ig5qw4pxOA8D1cPnkS9de7N43FhHpi6yaeMUcs=\",\"LAwVdHnUJo5aQBeasKkVByuRiJsesG4bsOMMWTberDs=\",\"LBxuoSxPk0OoD9U9QWloZwX/tR0/8nZv1MYfgD5kjoU=\",\"EsLJtwhqs5dS6koK+9hwO6L/ZsMJ1I9ATX607bkKrfo=\",\"FqkOkWR3hwyxPPwez6c/6TZdNoVO/ofblKLY8Bmj7oM=\",\"HlZ0tvkL417zQ1QLGRsO5FcHvdNEUkB62QNd070oJ5k=\",\"La8PutH+Zzf3vKQF403QQypLzVrKquKd357Y/8HwwzY=\",\"KQjNR3MLmwMdFPd4xTtkrsKDjzNw+IMqwf16stEKMuE=\",\"E4UjD9EJWlxHinmAcSlLihHJgF0Q1PJ7ZwqGje/wpFE=\",\"HRY8WM9Iu44C6zGTzf7j75yFEzwU+H2xgpZj500QYgo=\",\"LlV8OGdMQQ9NfHLuGjaJj5wWzL9b9HCfSeHnJ9/6KlU=\",\"HAXvCMBobiN8zNfJ9yeeWr28OfeifdpyOOc/N1JjRt8=\",\"JSfU10Sb5dICrsMyWaQ8Xa8l2wNbpViwMwggOg4z9xc=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"EKSSrltIfyWGUaOu0CJ8wC9seodhWGiUx05QuErYCBo=\",\"AkA9XARWQKOGfT//IsM9Wn1Mychvt/dG8M+qbPAAkWU=\",\"LV0deprytaQ0BmuoKa1RqdWWx3XXfc6bteU53whpCT0=\",\"CahjxwDdztF0q5ovUv6ram/FDWQPfNoSjT4Nt8xtVCE=\",\"KqsYD24xb62Jr+GMrJU/4Hla07Jn1jLUGSzfen8J+28=\",\"DZYEClUMqdpTQQwpG7A/JZdUa+IiwY7MPOGmuTTJ55w=\",\"Fi8n9YinaEsFnc/ofm9Q134LK3wqBNayv+peZnfAcSQ=\",\"C5IxlkRPZ7t7mjVJlH2g0dZcLYYwYoIBWee4oVdj++I=\",\"IATqt85kzloz0JO//bP1yMBiYpqC3xHBudAjchllOrc=\",\"Eie/h3dCt5rh8/lPSn2Z4u06ap5THyJPhl71BKW8rqA=\",\"IPd2+G2TwFxVn0J3XJFL7+6LanfOieE37p+vQUoJhdc=\",\"AXKqZcczpgNc2kvZMXM+ywXxYN6l+sGRyFt/lsA8dv8=\",\"CL5C8PuNC9CRiuDJoj1sNQmSoDZSoUQ+EGdu8Kq3dY8=\",\"H9C+bEmVIVHNJ4rlYx1nYPC3+qHaXPH4bojwQzKWKw0=\",\"+axQNC/RV6DPCsrHvOr0SYFAgX37Vz6BvGtFUSKrxw==\",\"DLPf3bqNcE9qvpyNTDHDa6eqvYszhm1cNJIKYaCXHKY=\",\"DncPMUfLDjIXAdduEJAXPTAXHWy0dhjpbwORz+iahXw=\",\"BzfYh+/m/o+UcpAUh8zl3WHmCyezo5h6UQfMDHR8c9M=\",\"GjheL9us7+P8UFwOiGbtNmV66T+WP02LmvQ1qYzJH6s=\",\"BHdlkB015bnIjEPdX0FBy6TevmvGdeSaCAabeHJSo8E=\",\"HaSk7eNvCOK28AAHYOAi5Mh7SCj13wZwN+B+0KPbcKo=\",\"CEfSxmV9L6AJtzbYPjPJhhsBkiEv6O3ZDdnf4W9S+GE=\",\"AwOe1akrK2rH4N2kdihSkszWSUQlCJNkQtTTzB1VI4M=\",\"d5Udzx0u2TvluRtyC1OH2zpAl+Vcx3gbacJ/Xu7+BA==\",\"C1hWIrH164/fyq0cPNf5RCVaRhjr/J+drPM56HTfYgo=\",\"Gip7vWLZe7Jl0SfUT+NLF9najudYE7XFG54W7o3XtAI=\",\"DcSOwtq9leBtKYf9GCSpWeCE1OYtGyxeUDsz2+azDQI=\",\"KQ3pWq5lhFvhJAakWF9xh9PWUov32vAKhNoB6N+2nh8=\",\"DAF+RqTzmhZpo1DuSV561oVisiLecRSmwQGt70eFMpM=\",\"LwtfsC0Yp4HnREA5IdguVMSRnRaG2CS/TmKy5MwIjPk=\",\"Dn5pmx3Zxg8AGNh06TZCEOuSBYPQ0tcVZ9OPQzO/pHQ=\",\"CUcsbtK2SUQzqTGfKwk/L9GSMFm2ACpuiW/uA+GVRrg=\",\"GWt2zv3Mf2pUxx1AEUoLuCaUyTbxVzrHrB6j/M4f6Tg=\",\"KopACT4ryWJ/45qoSreMHOEmXoy+KFaRNvi4Pb8eGg4=\",\"Idm59wlLNGKqphFIsnL7plVlFNyznPtHtUFKx3aUT4I=\",\"Ir4CMovGJgXKbYkFZblyboO52Pkl5wJBLt8pG3d98Cc=\",\"J7XX3e8BjhdWnTPYxOkAOuNjgrtXyvlrsiS3JM8jclQ=\",\"BU7BQcWUus5ciKQXZ+glF/jc2OAt1U+P3BxyI9NhSYI=\",\"F/dkVKfTsEncNMCQEnBlYDUd0S/wUhh7pSKMn9WrxkY=\",\"GJoIL1wQEX/7awZDKbMQJshSzUHgE1Lmx7nRJoYgBZg=\",\"DFl9rxwqj2AjIvJ5ahvKKqMQHLjJqHbuGVqb2pDaXVs=\",\"KsLhA3NX4piF1ziCiZZSxc2vhWCuNWu9997RHBOdxmM=\",\"BsqVDzivgHysO210yyk3rwoih1dreP3f1yAPBuZuXyI=\",\"BzYgm9+MGsZDuOzQlQ0rtNzYdFvnyM9kQy2iZPxMajM=\",\"HpbZ/Q8ttbzuFs54JAOjozrK1wsjcQZoatC72LvADR8=\",\"LX9WNeSxJ6qwZ5VJm7GmyXxUgG15gj/3hx5Rn0CBzBw=\",\"HY0YsY3Qe7if4MhKd0D67QmMaisM3l9Cb7jIt2Q7+Vw=\",\"KNUdRVGQS78E7Bab7YU0UzWAQu92oI6o0VX4Z3oFHM0=\",\"GJvjZfrOELmkGD1vIQSNbDbKnCiwcgxx1y7VKWVKpiQ=\",\"Ew/FRHf9lTN3/COrvXpBvmdkiSqHh8dZwUQP4BM8hS0=\",\"LJyR9IZhdxuu72d0V4p49pw1XI6QcVb98m2znSRGQT8=\",\"HewLr6PoGQYh5eCV73UeoDyDbbuARbKnP405fPuBUZI=\",\"Cl9SrW7EqKo3fY3SrjqvbuoMaMY6HQNPvaZxM8oLhcs=\",\"IKtzlL/as0TLtvISOACg4jUI4hJb/nlatKdnzstNkwY=\",\"EQ6jIrDCZHbGe/osG50XE/k7O5z4Mgzg3NS2Qoi9oHo=\",\"BU6r5hMWgfoB+8bb8+fVNZXQ+ICZhxghQriQrIr4nL4=\",\"Ik2BH73vjsCgBtN2oBnlfJO9WWIToHgjt9Srzh/Y5iE=\",\"DmkfykIxKKfUr8qlgrGpR5m6H10qXVO8K7pWu+yyJ6E=\",\"GJ4nnJLeC6tmcH5ubjEFJOYVzUxqrMZlNyo7jjctjOY=\",\"HZvLvRe5OxkT0vec3xKEREEjcgbwKUdG2T+OW9zrRyU=\",\"EXkYRjWpeA7hMS3MPRXH7wQrGK6UCWcOKMTH8PubYI4=\",\"DkhGYYKugzOvGJGmqhlzZ0HtBoDVfJMe3hP8B66C6Is=\",\"HJ1W9xwvIsRNOowXv1tARS4FRx8Lbf6f/kcl6yn3NGQ=\",\"IjRUb16FQej3KteUiRlQsysc2JHMZndcW2NZYWQunBU=\",\"FMCdFVxdQoGYwjS1U9ozjyJ8vBKw5C8rnOcVY+4UlcA=\"]]};var S=M.unstringifyBigInts(CI),zI=8,gI=[56,57,56,60,60,63,64,63,60,66,60,65,70,60,64,68],dI=16,k=31,L=new i(B.fromString(\"21888242871839275222246405745257275088548364400416034343698204186575808495617\")),x=G=>L.mul(G,L.square(L.square(G))),h=class h{static hash(I){if(!(I.length>0&&I.length<=gI.length))throw new Error(\"Invalid inputs\");let E=I.length+1,A=zI,o=gI[E-2],D=S.C[E-2],s=S.S[E-2],t=S.M[E-2],H=S.P[E-2],J=[L.zero,...I.map(K=>L.e(K))];J=J.map((K,C)=>L.add(K,D[C]));for(let K=0;K<A/2-1;K++)J=J.map(C=>x(C)),J=J.map((C,F)=>L.add(C,D[(K+1)*E+F])),J=J.map((C,F)=>J.reduce((c,g,r)=>L.add(c,L.mul(t[r][F],g)),L.zero));J=J.map(K=>x(K)),J=J.map((K,C)=>L.add(K,D[(A/2-1+1)*E+C])),J=J.map((K,C)=>J.reduce((F,c,g)=>L.add(F,L.mul(H[g][C],c)),L.zero));for(let K=0;K<o;K++){J[0]=x(J[0]),J[0]=L.add(J[0],D[(A/2+1)*E+K]);let C=J.reduce((F,c,g)=>L.add(F,L.mul(s[(E*2-1)*K+g],c)),L.zero);for(let F=1;F<E;F++)J[F]=L.add(J[F],L.mul(J[0],s[(E*2-1)*K+E+F-1]));J[0]=C}for(let K=0;K<A/2-1;K++)J=J.map(C=>x(C)),J=J.map((C,F)=>L.add(C,D[(A/2+1)*E+o+K*E+F])),J=J.map((C,F)=>J.reduce((c,g,r)=>L.add(c,L.mul(t[r][F],g)),L.zero));return J=J.map(K=>x(K)),J=J.map((K,C)=>J.reduce((F,c,g)=>L.add(F,L.mul(t[g][C],c)),L.zero)),L.normalize(J[0])}static hashBytes(I){return h.hashBytesX(I,dI)}static hashBytesX(I,E){let A=new Array(E).fill(BigInt(0)),o=!1,D,s=0;for(let t=0;t<parseInt(`${I.length/k}`);t+=1)if(o=!0,A[s]=M.beBuff2int(I.slice(k*t,k*(t+1))),s===E-1){D=h.hash(A),o=!1,A[0]=D,A.fill(BigInt(0),1,k);for(let H=1;H<E;H+=1)A[H]=BigInt(0);s=1}else s+=1;if(I.length%k!=0){let t=new Uint8Array(k);I.slice(parseInt(`${I.length/k}`)*k).forEach((J,K)=>{t[K]=J}),A[s]=M.beBuff2int(t),o=!0}return o&&(D=h.hash(A)),D}static spongeHashX(I,E){if(E<2||E>16)throw new Error(\"incorrect frame size\");let A=new Array(E).fill(BigInt(0)),o=!1,D,s=0;for(let t=0;t<I.length;t++)o=!0,A[s]=I[t],s===E-1?(D=this.hash(A),o=!1,A=new Array(E).fill(BigInt(0)),A[0]=D,s=1):s++;if(o&&(D=this.hash(A)),!D)throw new Error(\"hash is undefined\");return D}};h.F=L;var _=h,$=_;var jI=Uint8Array.from([1]),_I=Uint8Array.from([129]);function v(G,I,E,A){let o=G[I*2]^G[E*2],D=G[I*2+1]^G[E*2+1];A>=32&&(D=D^o,o=D^o,D=D^o,A-=32),A===0?(G[I*2]=o>>>0,G[I*2+1]=D>>>0):(G[I*2]=(o>>>A|D<<32-A)>>>0,G[I*2+1]=(D>>>A|o<<32-A)>>>0)}function Q(G,I,E,A,o,D,s,t){let H=Y.sigma,J=Y.u512,K;K=G[A*2+1]+((I[H[E][t]*2+1]^J[H[E][t+1]*2+1])>>>0)+G[o*2+1],G[A*2]=G[A*2]+((I[H[E][t]*2]^J[H[E][t+1]*2])>>>0)+G[o*2]+~~(K/4294967296)>>>0,G[A*2+1]=K>>>0,v(G,s,A,32),K=G[D*2+1]+G[s*2+1],G[D*2]=G[D*2]+G[s*2]+~~(K/4294967296)>>>0,G[D*2+1]=K>>>0,v(G,o,D,25),K=G[A*2+1]+((I[H[E][t+1]*2+1]^J[H[E][t]*2+1])>>>0)+G[o*2+1],G[A*2]=G[A*2]+((I[H[E][t+1]*2]^J[H[E][t]*2])>>>0)+G[o*2]+~~(K/4294967296)>>>0,G[A*2+1]=K>>>0,v(G,s,A,16),K=G[D*2+1]+G[s*2+1],G[D*2]=G[D*2]+G[s*2]+~~(K/4294967296)>>>0,G[D*2+1]=K>>>0,v(G,o,D,11)}var e=class e{constructor(){this._h=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209],this._s=[0,0,0,0,0,0,0,0],this._block=new Uint8Array(128),this._blockOffset=0,this._length=[0,0,0,0],this._nullt=!1,this._zo=jI,this._oo=_I}_lengthCarry(I){for(let E=0;E<I.length&&!(I[E]<4294967296);++E)I[E]-=4294967296,I[E+1]+=1}_compress(){let I=e.u512,E=new Array(32),A=new Array(32),o,D=new DataView(this._block.buffer);for(o=0;o<32;++o)A[o]=D.getUint32(o*4);for(o=0;o<16;++o)E[o]=this._h[o]>>>0;for(o=16;o<24;++o)E[o]=(this._s[o-16]^I[o-16])>>>0;for(o=24;o<32;++o)E[o]=I[o-16];for(this._nullt||(E[24]=(E[24]^this._length[1])>>>0,E[25]=(E[25]^this._length[0])>>>0,E[26]=(E[26]^this._length[1])>>>0,E[27]=(E[27]^this._length[0])>>>0,E[28]=(E[28]^this._length[3])>>>0,E[29]=(E[29]^this._length[2])>>>0,E[30]=(E[30]^this._length[3])>>>0,E[31]=(E[31]^this._length[2])>>>0),o=0;o<16;++o)Q(E,A,o,0,4,8,12,0),Q(E,A,o,1,5,9,13,2),Q(E,A,o,2,6,10,14,4),Q(E,A,o,3,7,11,15,6),Q(E,A,o,0,5,10,15,8),Q(E,A,o,1,6,11,12,10),Q(E,A,o,2,7,8,13,12),Q(E,A,o,3,4,9,14,14);for(o=0;o<16;++o)this._h[o%8*2]=(this._h[o%8*2]^E[o*2])>>>0,this._h[o%8*2+1]=(this._h[o%8*2+1]^E[o*2+1])>>>0;for(o=0;o<8;++o)this._h[o*2]=(this._h[o*2]^this._s[o%4*2])>>>0,this._h[o*2+1]=(this._h[o*2+1]^this._s[o%4*2+1])>>>0}_padding(){let I=this._length.slice();I[0]+=this._blockOffset*8,this._lengthCarry(I);let E=new Uint8Array(16),A=new DataView(E.buffer);for(let o=0;o<4;++o)A.setUint32(o*4,I[3-o]);this._blockOffset===111?(this._length[0]-=8,this.update(this._oo)):(this._blockOffset<111?(this._blockOffset===0&&(this._nullt=!0),this._length[0]-=(111-this._blockOffset)*8,this.update(e.padding.slice(0,111-this._blockOffset))):(this._length[0]-=(128-this._blockOffset)*8,this.update(e.padding.slice(0,128-this._blockOffset)),this._length[0]-=111*8,this.update(e.padding.slice(1,1+111)),this._nullt=!0),this.update(this._zo),this._length[0]-=8),this._length[0]-=128,this.update(new Uint8Array(A.buffer))}digest(){this._padding();let I=new Uint8Array(64),E=new DataView(I.buffer);for(let A=0;A<16;++A)E.setUint32(A*4,this._h[A]);return new Uint8Array(E.buffer)}update(I){let E=this._block,A=0;for(;this._blockOffset+I.length-A>=E.length;){for(let o=this._blockOffset;o<E.length;)E[o++]=I[A++];this._length[0]+=E.length*8,this._lengthCarry(this._length),this._compress(),this._blockOffset=0}for(;A<I.length;)E[this._blockOffset++]=I[A++];return this}};e.sigma=[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3],[11,8,12,0,5,2,15,13,10,14,3,6,7,1,9,4],[7,9,3,1,13,12,11,14,2,6,5,10,4,0,15,8],[9,0,5,7,2,4,10,15,14,1,11,12,6,8,3,13],[2,12,6,10,0,11,8,3,4,13,7,5,15,14,1,9],[12,5,1,15,14,13,4,10,0,7,6,3,9,2,8,11],[13,11,7,14,12,1,3,9,5,0,15,4,8,6,2,10],[6,15,14,9,11,3,0,8,12,2,13,7,1,4,10,5],[10,2,8,4,7,6,1,5,15,11,9,14,3,12,13,0],[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3],[11,8,12,0,5,2,15,13,10,14,3,6,7,1,9,4],[7,9,3,1,13,12,11,14,2,6,5,10,4,0,15,8],[9,0,5,7,2,4,10,15,14,1,11,12,6,8,3,13],[2,12,6,10,0,11,8,3,4,13,7,5,15,14,1,9]],e.u256=[608135816,2242054355,320440878,57701188,2752067618,698298832,137296536,3964562569,1160258022,953160567,3193202383,887688300,3232508343,3380367581,1065670069,3041331479],e.u512=[608135816,2242054355,320440878,57701188,2752067618,698298832,137296536,3964562569,1160258022,953160567,3193202383,887688300,3232508343,3380367581,1065670069,3041331479,2450970073,2306472731,3509652390,2564797868,805139163,3491422135,3101798381,1780907670,3128725573,4046225305,614570311,3012652279,134345442,2240740374,1667834072,1901547113],e.padding=Uint8Array.from([128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);var Y=e;var II=class G{constructor(){this.babyJub=n}static pruneBuffer(I){return I[0]=I[0]&248,I[31]=I[31]&127,I[31]=I[31]|64,I}static prv2pub(I){let E=this.pruneBuffer(new Y().update(I).digest()),A=B.fromRprLE(E,0,32);return n.mulPointEscalar(n.Base8,B.shr(A,3n))}static signPoseidon(I,E){let A=new Y().update(I).digest(),o=G.pruneBuffer(A.slice(0,32)),D=M.leBuff2int(o),s=n.mulPointEscalar(n.Base8,B.shr(D,3n)),t=M.leInt2Buff(E,32),H=new Uint8Array(64);H.set(A.slice(32,64),0),H.set(t,32);let J=new Y().update(H).digest(),K=M.leBuff2int(J),C=new i(n.subOrder);K=C.e(K);let F=n.mulPointEscalar(n.Base8,K),c=$.hash([F[0],F[1],s[0],s[1],E]),g=C.add(K,C.mul(c,D));return{R8:F,S:g}}static verifyPoseidon(I,E,A){if(typeof E!=\"object\"||!Array.isArray(E.R8)||E.R8.length!=2||!n.inCurve(E.R8)||!Array.isArray(A)||A.length!=2||!n.inCurve(A)||E.S>=n.subOrder)return!1;let D=$.hash([E.R8[0],E.R8[1],A[0],A[1],I]),s=n.mulPointEscalar(n.Base8,E.S),t=n.mulPointEscalar(A,B.mul(D,8n));return t=n.addPoint(E.R8,t),!(!n.F.eq(s[0],t[0])||!n.F.eq(s[1],t[1]))}static packSignature(I){let E=new Uint8Array(64),A=n.packPoint(I.R8);return E.set(A,0),B.toRprLE(E,32,I.S,32),E}static unpackSignature(I){return{R8:n.unpackPoint(I.slice(0,32)),S:B.fromRprLE(I,32,32)}}},a=II;var U=class U{static encodeLength(I){return I*2}static encode(I){let E=new Uint8Array(U.encodeLength(I.length)),A=0;for(let o=0;o<I.length;o++)E[A]=U.HEX_TABLE[I[o]>>4].charCodeAt(0),E[A+1]=U.HEX_TABLE[I[o]&15].charCodeAt(0),A+=2;return E}static decodeString(I){return U.decode(I)}static fromHexChar(I){if(\"0\".charCodeAt(0)<=I&&I<=\"9\".charCodeAt(0))return I-\"0\".charCodeAt(0);if(\"a\".charCodeAt(0)<=I&&I<=\"f\".charCodeAt(0))return I-\"a\".charCodeAt(0)+10;if(\"A\".charCodeAt(0)<=I&&I<=\"F\".charCodeAt(0))return I-\"A\".charCodeAt(0)+10;throw new Error(`Invalid byte char ${I}`)}static decode(I){let E=0,A=1,o=[];for(;A<I.length;A+=2){let D=U.fromHexChar(I[A-1].charCodeAt(0)),s=U.fromHexChar(I[A].charCodeAt(0));o[E]=D<<4|s,E++}if(I.length%2==1)throw new Error(\"Invalid hex string\");return Uint8Array.from(o)}static encodeString(I){return new TextDecoder().decode(U.encode(I))}};U.HEX_TABLE=\"0123456789abcdef\",U.textEncoder=new TextEncoder;var b=U;var EI=class G{constructor(I,E){this.R8=I,this.S=E}static newFromCompressed(I){if(I.length!==64)throw new Error(\"buf must be 64 bytes\");let E=a.unpackSignature(I);if(E.R8==null)throw new Error(\"unpackSignature failed\");return new G(E.R8,E.S)}compress(){return a.packSignature(this)}toString(){return this.compress().toString()}hex(){return b.encodeString(this.compress())}},AI=class G{constructor(I){this.p=I}static newFromCompressed(I){if(I.length!==32)throw new Error(\"buf must be 32 bytes\");let E=n.unpackPoint(I);if(E==null)throw new Error(\"unpackPoint failed\");return new G(E)}static newFromHex(I){let E=b.decodeString(I);return G.newFromCompressed(E)}compress(){return n.packPoint(this.p)}toString(){return this.compress().toString()}hex(){return b.encodeString(this.compress())}verifyPoseidon(I,E){return a.verifyPoseidon(I,E,this.p)}},LI=class{constructor(I){if(I.length!==32)throw new Error(\"buf must be 32 bytes\");this.sk=I}toString(){return this.sk.toString()}hex(){return b.encodeString(this.sk)}public(){return new AI(a.prv2pub(this.sk))}signPoseidon(I){let E=a.signPoseidon(this.sk,I);return new EI(E.R8,E.S)}};var FI=\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\",uE=G=>{let I=[],E=\"\",A=0,o=0,D;for(let s=0;s<G.length;s++)for(A=0,o=G[s],E+=o||E.length^s?\"\":\"1\";A in I||o;)D=I[A],D=D?D*256+o:o,o=D/58|0,I[A]=D%58,A++;for(;A--;)E+=FI[I[A]];return E},yE=G=>{let I=[],E=[],A=0,o=0,D=0;for(let s=0;s<G.length;s++){if(A=0,o=FI.indexOf(G[s]),o<0)throw new Error(`Can't convert base58 string ${G} to bytes`);for(o||E.length^s||E.push(0);A in I||o;)D=I[A],D=D?D*58+o:o,o=D>>8,I[A]=D%256,A++}for(;A--;)E.push(I[A]);return new Uint8Array(E)};var $I=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]);function GI(G,I,E,A,o){let D,s,t,H,J,K,C,F,c,g,r,u,O;for(;o>=64;){for(D=I[0],s=I[1],t=I[2],H=I[3],J=I[4],K=I[5],C=I[6],F=I[7],g=0;g<16;g++)r=A+g*4,G[g]=(E[r]&255)<<24|(E[r+1]&255)<<16|(E[r+2]&255)<<8|E[r+3]&255;for(g=16;g<64;g++)c=G[g-2],u=(c>>>17|c<<32-17)^(c>>>19|c<<32-19)^c>>>10,c=G[g-15],O=(c>>>7|c<<32-7)^(c>>>18|c<<32-18)^c>>>3,G[g]=(u+G[g-7]|0)+(O+G[g-16]|0);for(g=0;g<64;g++)u=(((J>>>6|J<<32-6)^(J>>>11|J<<32-11)^(J>>>25|J<<32-25))+(J&K^~J&C)|0)+(F+($I[g]+G[g]|0)|0)|0,O=((D>>>2|D<<32-2)^(D>>>13|D<<32-13)^(D>>>22|D<<32-22))+(D&s^D&t^s&t)|0,F=C,C=K,K=J,J=H+u|0,H=t,t=s,s=D,D=u+O|0;I[0]+=D,I[1]+=s,I[2]+=t,I[3]+=H,I[4]+=J,I[5]+=K,I[6]+=C,I[7]+=F,A+=64,o-=64}return A}var oI=class{constructor(){this.digestLength=32;this.blockSize=64;this.state=new Int32Array(8);this.temp=new Int32Array(64);this.buffer=new Uint8Array(128);this.bufferLength=0;this.bytesHashed=0;this.finished=!1;this.reset()}reset(){return this.state[0]=1779033703,this.state[1]=3144134277,this.state[2]=1013904242,this.state[3]=2773480762,this.state[4]=1359893119,this.state[5]=2600822924,this.state[6]=528734635,this.state[7]=1541459225,this.bufferLength=0,this.bytesHashed=0,this.finished=!1,this}clean(){for(let I=0;I<this.buffer.length;I++)this.buffer[I]=0;for(let I=0;I<this.temp.length;I++)this.temp[I]=0;this.reset()}update(I,E=I.length){if(this.finished)throw new Error(\"SHA256: can't update because hash was finished.\");let A=0;if(this.bytesHashed+=E,this.bufferLength>0){for(;this.bufferLength<64&&E>0;)this.buffer[this.bufferLength++]=I[A++],E--;this.bufferLength===64&&(GI(this.temp,this.state,this.buffer,0,64),this.bufferLength=0)}for(E>=64&&(A=GI(this.temp,this.state,I,A,E),E%=64);E>0;)this.buffer[this.bufferLength++]=I[A++],E--;return this}finish(I){if(!this.finished){let E=this.bytesHashed,A=this.bufferLength,o=E/536870912|0,D=E<<3,s=E%64<56?64:128;this.buffer[A]=128;for(let t=A+1;t<s-8;t++)this.buffer[t]=0;this.buffer[s-8]=o>>>24&255,this.buffer[s-7]=o>>>16&255,this.buffer[s-6]=o>>>8&255,this.buffer[s-5]=o>>>0&255,this.buffer[s-4]=D>>>24&255,this.buffer[s-3]=D>>>16&255,this.buffer[s-2]=D>>>8&255,this.buffer[s-1]=D>>>0&255,GI(this.temp,this.state,this.buffer,0,s),this.finished=!0}for(let E=0;E<8;E++)I[E*4+0]=this.state[E]>>>24&255,I[E*4+1]=this.state[E]>>>16&255,I[E*4+2]=this.state[E]>>>8&255,I[E*4+3]=this.state[E]>>>0&255;return this}digest(){let I=new Uint8Array(this.digestLength);return this.finish(I),I}_saveState(I){for(let E=0;E<this.state.length;E++)I[E]=this.state[E]}_restoreState(I,E){for(let A=0;A<this.state.length;A++)this.state[A]=I[A];this.bytesHashed=E,this.finished=!1,this.bufferLength=0}};function OE(G){let I=new oI().update(G),E=I.digest();return I.clean(),E}export{j as BabyJub,Y as Blake512,II as Eddsa,oI as Hash,b as Hex,S as OPT,_ as Poseidon,LI as PrivateKey,AI as PublicKey,EI as Signature,n as babyJub,uE as base58FromBytes,yE as base58ToBytes,a as eddsa,M as ffUtils,V as getRandomBytes,$ as poseidon,OE as sha256};\n//# sourceMappingURL=index.js.map\n","import{poseidon as t,sha256 as e,Hex as r,base58FromBytes as n,base58ToBytes as i}from\"@iden3/js-crypto\";const s=Object.freeze({ERRORS:{DATA_OVERFLOW:new Error(\"data does not fits SNARK size\"),INCORRECT_ID_POSITION:new Error(\"incorrect ID position\"),NO_ID:new Error(\"ID is not set\"),INVALID_SUBJECT_POSITION:new Error(\"invalid subject position\"),INCORRECT_MERKLIZED_POSITION:new Error(\"incorrect Merklize position\"),NO_MERKLIZED_ROOT:new Error(\"Merklized root is not set\"),NETWORK_NOT_SUPPORTED_FOR_DID:new Error(\"network in not supported for did\"),UNSUPPORTED_BLOCKCHAIN_FOR_DID:new Error(\"not supported blockchain for did\"),UNSUPPORTED_DID_METHOD:new Error(\"not supported DID method\"),UNKNOWN_DID_METHOD:new Error(\"unknown DID method\"),INCORRECT_DID:new Error(\"incorrect DID\"),UNSUPPORTED_ID:new Error(\"unsupported Id\")},SCHEMA:{HASH_LENGTH:16},ETH_ADDRESS_LENGTH:20,BYTES_LENGTH:32,ELEM_BYTES_LENGTH:4,NONCE_BYTES_LENGTH:8,Q:BigInt(\"21888242871839275222246405745257275088548364400416034343698204186575808495617\"),ID:{TYPE_DEFAULT:Uint8Array.from([0,0]),TYPE_READONLY:Uint8Array.from([0,1]),ID_LENGTH:31},DID:{DID_SCHEMA:\"did\"},GENESIS_LENGTH:27}),o={Ethereum:\"eth\",Polygon:\"polygon\",ZkEVM:\"zkevm\",Privado:\"privado\",Unknown:\"unknown\",NoChain:\"\",ReadOnly:\"readonly\"},a={Main:\"main\",Mumbai:\"mumbai\",Amoy:\"amoy\",Goerli:\"goerli\",Sepolia:\"sepolia\",Test:\"test\",Unknown:\"unknown\",NoNetwork:\"\"},h={Iden3:\"iden3\",PolygonId:\"polygonid\",Other:\"\"},u={[`${o.Ethereum}:${a.Main}`]:1,[`${o.Ethereum}:${a.Goerli}`]:5,[`${o.Ethereum}:${a.Sepolia}`]:11155111,[`${o.Polygon}:${a.Main}`]:137,[`${o.Polygon}:${a.Mumbai}`]:80001,[`${o.Polygon}:${a.Amoy}`]:80002,[`${o.ZkEVM}:${a.Main}`]:1101,[`${o.ZkEVM}:${a.Test}`]:1442,[`${o.Privado}:${a.Main}`]:21e3,[`${o.Privado}:${a.Test}`]:21001},l={[h.Iden3]:1,[h.PolygonId]:2,[h.Other]:255},c={[`${o.ReadOnly}:${a.NoNetwork}`]:0,[`${o.Polygon}:${a.Main}`]:17,[`${o.Polygon}:${a.Mumbai}`]:18,[`${o.Polygon}:${a.Amoy}`]:19,[`${o.Ethereum}:${a.Main}`]:33,[`${o.Ethereum}:${a.Goerli}`]:34,[`${o.Ethereum}:${a.Sepolia}`]:35,[`${o.ZkEVM}:${a.Main}`]:49,[`${o.ZkEVM}:${a.Test}`]:50,[`${o.Privado}:${a.Main}`]:161,[`${o.Privado}:${a.Test}`]:162},d={[h.Iden3]:{...c},[h.PolygonId]:{...c},[h.Other]:{[`${o.Unknown}:${a.Unknown}`]:255}},I=new TextEncoder;function E(t){const e=BigInt(256);let r=BigInt(0),n=BigInt(1);return t.forEach((t=>{r+=n*BigInt(t),n*=e})),r}function g(t){return E(t.reverse())}function f(t,e=31){const r=BigInt(256),n=new Uint8Array(e);let i=0;for(;t>BigInt(0);)n[i]=Number(t%r),t/=r,i+=1;return n}function y(t,e=31){return f(t,e).reverse()}function w(t){const e=new ArrayBuffer(4);return new DataView(e).setUint32(0,t,!0),new Uint8Array(e)}function m(t){const e=t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength);return new DataView(e).getUint32(0,!0)}function _(t){const e=new ArrayBuffer(8);return new DataView(e).setBigUint64(0,t,!0),new Uint8Array(e)}function S(t){const e=t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength);return new DataView(e).getBigUint64(0,!0)}function b(t){return Math.floor(t.getTime()/1e3)}function x(t){return new Date(1e3*t)}function p(t){return t<s.Q}function N(t){return t.every((t=>p(t)))}function D(e,r,n){return t.hash([e,r,n])}class O{static isNotValidIDChar(t){return O.isNotAlpha(t)&&O.isNotDigit(t)&&\".\"!==t&&\"-\"!==t}static isNotValidParamChar(t){return O.isNotAlpha(t)&&O.isNotDigit(t)&&\".\"!==t&&\"-\"!==t&&\"_\"!==t&&\":\"!==t}static isNotValidQueryOrFragmentChar(t){return O.isNotValidPathChar(t)&&\"/\"!==t&&\"?\"!==t}static isNotValidPathChar(t){return O.isNotUnreservedOrSubdelim(t)&&\":\"!==t&&\"@\"!==t}static isNotUnreservedOrSubdelim(t){switch(t){case\"-\":case\".\":case\"_\":case\"~\":case\"!\":case\"$\":case\"&\":case\"'\":case\"(\":case\")\":case\"*\":case\"+\":case\",\":case\";\":case\"=\":return!1;default:return!(!O.isNotAlpha(t)||!O.isNotDigit(t))}}static isNotHexDigit(t){return O.isNotDigit(t)&&(t<\"A\"||t>\"F\")&&(t<\"a\"||t>\"f\")}static isNotDigit(t){return t<\"0\"||t>\"9\"}static isNotAlpha(t){return O.isNotSmallLetter(t)&&O.isNotBigLetter(t)}static isNotBigLetter(t){return t<\"A\"||t>\"Z\"}static isNotSmallLetter(t){return t<\"a\"||t>\"z\"}}const T=t=>Uint8Array.from([...new Uint8Array(7),...t]);class R{static intToBytes(t){return R.intToNBytes(t,s.BYTES_LENGTH)}static intToNBytes(t,e){return Uint8Array.from(f(t,e))}static checkChecksum(t){const{typ:e,genesis:r,checksum:n}=R.decomposeBytes(t);if(!n.length||JSON.stringify(Uint8Array.from([0,0]))===JSON.stringify(n))return!1;const i=R.calculateChecksum(e,r);return JSON.stringify(i)===JSON.stringify(n)}static decomposeBytes(t){const e=t.length-2;return{typ:t.slice(0,2),genesis:t.slice(2,e),checksum:t.slice(-2)}}static calculateChecksum(t,e){const r=[...t,...e].reduce(((t,e)=>t+e),0),n=[r>>8,255&r];return Uint8Array.from(n.reverse())}static hashBytes(t){const r=e(I.encode(t));return new Uint8Array(r)}static hexToBytes(t){return r.decodeString(t)}static bytesToHex(t){const e=[];for(let r=0;r<t.length;r++){const n=t[r]<0?t[r]+256:t[r];e.push((n>>>4).toString(16)),e.push((15&n).toString(16))}return e.join(\"\")}static bytesToInt(t){return E(t)}}class B{constructor(t){if(this._bytes=new Uint8Array(s.BYTES_LENGTH),t&&(this._bytes=t),this._bytes.length!==s.BYTES_LENGTH)throw new Error(\"Invalid bytes length\")}get bytes(){return this._bytes}set bytes(t){this._bytes=t}toBigInt(){return R.bytesToInt(this._bytes)}setBigInt(t){if(!p(t))throw s.ERRORS.DATA_OVERFLOW;return this._bytes=R.intToBytes(t),this}slotFromHex(t){const e=r.decodeString(t);if(e.length!==s.BYTES_LENGTH)throw new Error(\"Invalid bytes length\");return this._bytes.set(e,0),this}hex(){return r.encodeString(this._bytes)}static elemBytesToInts(t){const e=[];for(let r=0;r<t.length;r++){const n=t[r];e.push(n.toBigInt())}return e}static fromInt(t){if(!p(t))throw s.ERRORS.DATA_OVERFLOW;const e=R.intToBytes(t);return new B(e)}}class k{constructor(t){if(this._bytes=new Uint8Array(s.SCHEMA.HASH_LENGTH),t&&(this._bytes=t),this.bytes.length!==s.SCHEMA.HASH_LENGTH)throw new Error(`Schema hash must be ${s.SCHEMA.HASH_LENGTH} bytes long`)}get bytes(){return this._bytes}marshalTextBytes(){return r.encode(this.bytes)}marshalText(){return r.encodeString(this.bytes)}static newSchemaHashFromHex(t){const e=r.decodeString(t);if(e.length!==s.SCHEMA.HASH_LENGTH)throw new Error(`invalid schema hash length: ${e.length}`);return new k(e)}static newSchemaHashFromInt(t){const e=R.intToNBytes(t,s.SCHEMA.HASH_LENGTH),r=s.SCHEMA.HASH_LENGTH-e.length;return new k(R.intToBytes(t).slice(r,s.SCHEMA.HASH_LENGTH))}bigInt(){return R.bytesToInt(this.bytes)}}k.authSchemaHash=new k(Uint8Array.from([204,163,55,26,108,177,183,21,0,68,7,227,37,189,153,60]));class H{constructor(t,e){this._checksum=R.calculateChecksum(t,e),this._bytes=Uint8Array.from([...t,...e,...this._checksum])}static getFromBytes(t){const{typ:e,genesis:r}=R.decomposeBytes(t);return new H(e,r)}checksum(){return this._checksum}string(){return n(this._bytes)}get bytes(){return this._bytes}set bytes(t){this._bytes=t}type(){return this._bytes.slice(0,2)}bigInt(){return E(this._bytes)}equal(t){return JSON.stringify(this._bytes)===JSON.stringify(t.bytes)}marshal(){return(new TextEncoder).encode(this.string())}static unMarshal(t){return H.fromString((new TextDecoder).decode(t))}static fromBytes(t){const e=t??Uint8Array.from([]);if(e.length!==s.ID.ID_LENGTH)throw new Error(\"fromBytes error: byte array incorrect length\");if(e.every((t=>0===t)))throw new Error(\"fromBytes error: byte array empty\");const r=H.getFromBytes(e);if(!R.checkChecksum(e))throw new Error(\"fromBytes error: checksum error\");return r}static fromString(t){const e=i(t);return H.fromBytes(e)}static fromBigInt(t){const e=R.intToNBytes(t,s.ID.ID_LENGTH);return H.fromBytes(e)}static profileId(e,r){const n=t.hash([e.bigInt(),r]),{typ:i}=R.decomposeBytes(e.bytes),s=R.intToNBytes(n,27);return new H(i,s)}static idGenesisFromIdenState(t,e){const r=B.fromInt(e),n=r.bytes.slice(r.bytes.length-27);return new H(t,n)}static ethAddressFromId(t){if(!t.bytes.slice(2,9).every((t=>0===t)))throw new Error(\"can't get Ethereum address: high bytes of genesis are not zero\");return t.bytes.slice(9).slice(0,s.ETH_ADDRESS_LENGTH)}}var A,$,U,V,v,M;!function(t){t.IndexA=\"IndexA\",t.IndexB=\"IndexB\",t.ValueA=\"ValueA\",t.ValueB=\"ValueB\"}(A||(A={}));class L extends Error{constructor(t){super(`Slot ${t} not in field (too large)`),Object.setPrototypeOf(this,L.prototype)}}!function(t){t[t.Self=0]=\"Self\",t[t.Invalid=1]=\"Invalid\",t[t.OtherIdenIndex=2]=\"OtherIdenIndex\",t[t.OtherIdenValue=3]=\"OtherIdenValue\"}($||($={})),function(t){t[t.None=0]=\"None\",t[t.Index=1]=\"Index\",t[t.Value=2]=\"Value\"}(U||(U={})),function(t){t[t.None=0]=\"None\",t[t.Index=32]=\"Index\",t[t.Value=64]=\"Value\",t[t.Invalid=128]=\"Invalid\"}(V||(V={})),function(t){t[t.None=0]=\"None\",t[t.Index=1]=\"Index\",t[t.Value=2]=\"Value\"}(v||(v={})),function(t){t[t.ByteIdx=16]=\"ByteIdx\",t[t.ExpirationBitIdx=3]=\"ExpirationBitIdx\",t[t.UpdatableBitIdx=4]=\"UpdatableBitIdx\"}(M||(M={}));class P{constructor(){this._index=[],this._value=[];for(let t=0;t<s.ELEM_BYTES_LENGTH;t++)this._index[t]=new B,this._value[t]=new B}static newClaim(t,...e){const r=new P;r.setSchemaHash(t);for(let t=0;t<e.length;t++){(0,e[t])(r)}return r}getSchemaHash(){return new k(this._index[0].bytes.slice(0,s.SCHEMA.HASH_LENGTH))}get value(){return this._value}set value(t){this._value=t}get index(){return this._index}set index(t){this._index=t}setSchemaHash(t){this._index[0]=new B(Uint8Array.from([...t.bytes,...new Array(s.SCHEMA.HASH_LENGTH).fill(0)]))}setSubject(t){this._index[0].bytes[M.ByteIdx]&=248,this._index[0].bytes[M.ByteIdx]|=t}getSubject(){let t=this._index[0].bytes[M.ByteIdx];return t&=7,t}setFlagExpiration(t){t?this._index[0].bytes[M.ByteIdx]|=1<<M.ExpirationBitIdx:this._index[0].bytes[M.ByteIdx]&=~(1<<M.ExpirationBitIdx)}getFlagExpiration(){const t=1<<M.ExpirationBitIdx;return(this._index[0].bytes[M.ByteIdx]&t)>0}getIdPosition(){switch(this.getSubject()){case $.Self:return U.None;case $.OtherIdenIndex:return U.Index;case $.OtherIdenValue:return U.Value;default:throw s.ERRORS.INVALID_SUBJECT_POSITION}}setValueDataInts(t,e){this._value[2]=this.setSlotInt(t,A.ValueA),this._value[3]=this.setSlotInt(e,A.ValueB)}setValueDataBytes(t,e){this._value[2]=this.setSlotBytes(t,A.ValueA),this._value[3]=this.setSlotBytes(e,A.ValueB)}setValueData(t,e){if(!N([t.toBigInt(),e.toBigInt()]))throw s.ERRORS.DATA_OVERFLOW;this._value[2]=t,this._value[3]=e}setIndexDataInts(t,e){this._index[2]=this.setSlotInt(t,A.IndexA),this._index[3]=this.setSlotInt(e,A.IndexB)}setIndexDataBytes(t,e){this._index[2]=this.setSlotBytes(t,A.IndexA),this._index[3]=this.setSlotBytes(e,A.IndexB)}setSlotBytes(t,e){const r=new B(t);if(!p(r.toBigInt()))throw new L(e);return r}setFlagMerklized(t){let e;switch(t){case v.Index:e=V.Index;break;case v.Value:e=V.Value;break;default:e=V.None}this.index[0].bytes[M.ByteIdx]&=31,this.index[0].bytes[M.ByteIdx]|=e}getMerklized(){let t=this.index[0].bytes[M.ByteIdx];return t&=224,t}getMerklizedPosition(){switch(this.getMerklized()){case V.None:return v.None;case V.Index:return v.Index;case V.Value:return v.Value;default:throw s.ERRORS.INCORRECT_MERKLIZED_POSITION}}setSlotInt(t,e){if(t||(t=BigInt(0)),!p(t))throw new L(e);return(new B).setBigInt(t)}setIndexData(t,e){if(!N([t.toBigInt(),e.toBigInt()]))throw s.ERRORS.DATA_OVERFLOW;this._index[2]=t,this._index[3]=e}resetExpirationDate(){this.setFlagExpiration(!1);const t=Array.from({length:s.NONCE_BYTES_LENGTH},(()=>0)),e=Array.from(this._value[0].bytes);e.splice(s.NONCE_BYTES_LENGTH,s.NONCE_BYTES_LENGTH,...t),this._value[0]=new B(Uint8Array.from(e))}getExpirationDate(){if(this.getFlagExpiration()){const t=S(this._value[0].bytes.slice(8,16));return x(Number(t))}return null}setExpirationDate(t){this.setFlagExpiration(!0);const e=_(BigInt(b(t))),r=Array.from(this._value[0].bytes);r.splice(s.NONCE_BYTES_LENGTH,s.NONCE_BYTES_LENGTH,...e),this._value[0]=new B(Uint8Array.from(r))}getRevocationNonce(){return S(this._value[0].bytes.slice(0,8))}setRevocationNonce(t){const e=_(t);if(e.length>s.NONCE_BYTES_LENGTH)throw new Error(\"Nonce length is not valid\");const r=Array.from(this._value[0].bytes);r.splice(0,s.NONCE_BYTES_LENGTH,...e),this._value[0]=new B(Uint8Array.from(r))}getValueId(){return H.fromBytes(this._value[1].bytes.slice(0,-1))}setValueId(t){this.resetIndexId(),this.setSubject($.OtherIdenValue);const e=Array.from(this._index[1].bytes);e.splice(0,t.bytes.length,...t.bytes),this._value[1]=new B(Uint8Array.from(e))}resetIndexId(){this._index[1]=new B(new Uint8Array(s.BYTES_LENGTH).fill(0))}resetValueId(){this._value[1]=new B(new Uint8Array(s.BYTES_LENGTH).fill(0))}getIndexId(){return H.fromBytes(this._index[1].bytes.slice(0,-1))}setIndexId(t){this.resetValueId(),this.setSubject($.OtherIdenIndex);const e=Array.from(this._index[1].bytes);e.splice(0,t.bytes.length,...t.bytes),this._index[1]=new B(Uint8Array.from(e))}setVersion(t){const e=w(t);this._index[0].bytes[20]=e[0],this._index[0].bytes[21]=e[1],this._index[0].bytes[22]=e[2],this._index[0].bytes[23]=e[3]}getVersion(){return m(this._index[0].bytes.slice(20,24))}setFlagUpdatable(t){t?this._index[0].bytes[M.ByteIdx]|=1<<M.UpdatableBitIdx:this._index[0].bytes[M.ByteIdx]&=~(1<<M.UpdatableBitIdx)}hIndex(){return t.hash(B.elemBytesToInts(this._index))}getFlagUpdatable(){const t=1<<M.UpdatableBitIdx;return(this._index[0].bytes[M.ByteIdx]&t)>0}hValue(){return t.hash(B.elemBytesToInts(this._value))}hiHv(){return{hi:this.hIndex(),hv:this.hValue()}}setIndexMerklizedRoot(t){this.resetValueMerklizedRoot(),this.setFlagMerklized(v.Index),this.index[2]=this.setSlotInt(t,A.IndexA)}resetIndexMerklizedRoot(){this._index[2]=new B(new Uint8Array(s.BYTES_LENGTH).fill(0))}setValueMerklizedRoot(t){this.resetIndexMerklizedRoot(),this.setFlagMerklized(v.Value),this.value[2]=this.setSlotInt(t,A.ValueA)}resetValueMerklizedRoot(){this._value[2]=new B(new Uint8Array(s.BYTES_LENGTH).fill(0))}getMerklizedRoot(){switch(this.getMerklized()){case V.Index:return this.index[2].toBigInt();case V.Value:return this.value[2].toBigInt();default:throw s.ERRORS.NO_MERKLIZED_ROOT}}resetId(){this.resetIndexId(),this.resetValueId(),this.setSubject($.Self)}getId(){switch(this.getSubject()){case $.OtherIdenIndex:return this.getIndexId();case $.OtherIdenValue:return this.getValueId();default:throw s.ERRORS.NO_ID}}rawSlots(){return{index:this._index,value:this._value}}rawSlotsAsInts(){return[...B.elemBytesToInts(this._index),...B.elemBytesToInts(this._value)]}clone(){return JSON.parse(JSON.stringify(this))}marshalJson(){return this.rawSlotsAsInts().map((t=>t.toString()))}unMarshalJson(t){const e=JSON.parse(t).map((t=>BigInt(t)));if(e.length!==this._index.length+this._value.length)throw new Error(\"invalid number of claim's slots\");this._index=[],this._value=[];for(let t=0,r=s.ELEM_BYTES_LENGTH;t<e.length/2;t++,r++)this._index[t]=new B,this._index[t].setBigInt(e[t]),this._value[t]=new B,this._value[t].setBigInt(e[r]);return this}marshalBinary(){const t=t=>t.reduce(((t,e)=>[...t,...e.bytes]),[]);return Uint8Array.from(t(this._index).concat(t(this._value)))}hex(){const t=this.marshalBinary();return r.encodeString(t)}fromHex(t){const e=r.decodeString(t);return this.unMarshalBinary(e),this}unMarshalBinary(t){const e=2*s.ELEM_BYTES_LENGTH*s.BYTES_LENGTH;if(t.length!==e)throw new Error(\"unexpected length of input data\");this._index=[],this._value=[];for(let e=0,r=s.ELEM_BYTES_LENGTH;e<s.ELEM_BYTES_LENGTH;e++,r++)this._index[e]=new B(t.slice(e*s.BYTES_LENGTH,(e+1)*s.BYTES_LENGTH)),this._value[e]=new B(t.slice(r*s.BYTES_LENGTH,(r+1)*s.BYTES_LENGTH))}}class C{static withFlagUpdatable(t){return e=>e.setFlagUpdatable(t)}static withVersion(t){return e=>e.setVersion(t)}static withIndexId(t){return e=>e.setIndexId(t)}static withValueId(t){return e=>e.setValueId(t)}static withFlagMerklized(t){return e=>e.setFlagMerklized(t)}static withId(t,e){return r=>{switch(e){case U.Index:r.setIndexId(t);break;case U.Value:r.setValueId(t);break;default:throw s.ERRORS.INCORRECT_ID_POSITION}}}static withRevocationNonce(t){return e=>e.setRevocationNonce(t)}static withExpirationDate(t){return e=>e.setExpirationDate(t)}static withIndexData(t,e){return r=>r.setIndexData(t,e)}static withIndexDataBytes(t,e){return r=>r.setIndexDataBytes(t,e)}static withIndexDataInts(t,e){return r=>r.setIndexDataInts(t,e)}static withValueData(t,e){return r=>r.setValueData(t,e)}static withValueDataBytes(t,e){return r=>r.setValueDataBytes(t,e)}static withValueDataInts(t,e){return r=>r.setValueDataInts(t,e)}static withIndexMerklizedRoot(t){return e=>{e.setFlagMerklized(v.Index),e.index[2]=e.setSlotInt(t,A.IndexA)}}static withValueMerklizedRoot(t){return e=>{e.setFlagMerklized(v.Value),e.value[2]=e.setSlotInt(t,A.ValueA)}}static withMerklizedRoot(t,e){return r=>{switch(e){case v.Index:r.setFlagMerklized(v.Index),r.index[2]=r.setSlotInt(t,A.IndexA);break;case v.Value:r.setFlagMerklized(v.Value),r.value[2]=r.setSlotInt(t,A.ValueA);break;default:throw s.ERRORS.INCORRECT_MERKLIZED_POSITION}}}}class F{constructor(t,e){this.blockchain=t,this.networkId=e}toString(){return`${this.blockchain}:${this.networkId}`}static fromString(t){const[e,r]=t.split(\":\");return new F(e.replace(\"_\",\"\"),r.replace(\"_\",\"\"))}}function G(t,e,r){const n=l[t];if(!n)throw s.ERRORS.UNSUPPORTED_DID_METHOD;const i=d[t];if(!i)throw s.ERRORS.NETWORK_NOT_SUPPORTED_FOR_DID;const o=i[new F(e,r).toString()];if(\"number\"!=typeof o)throw new Error(`blockchain ${e.toString()??\"-\"} and network ${r.toString()??\"-\"} is not defined in core lib`);return Uint8Array.from([n,o])}function z(t,e){const r=d[t];if(!r)throw s.ERRORS.UNSUPPORTED_DID_METHOD;for(const[t,n]of Object.entries(r))if(n===e)return F.fromString(t).networkId;throw s.ERRORS.NETWORK_NOT_SUPPORTED_FOR_DID}function Y(t,e){const r=d[t];if(!r)throw new Error(`${s.ERRORS.NETWORK_NOT_SUPPORTED_FOR_DID}: did method ${t} is not defined in core lib`);for(const[t,n]of Object.entries(r))if(n===e)return F.fromString(t).blockchain;throw s.ERRORS.UNSUPPORTED_BLOCKCHAIN_FOR_DID}function j(t){for(const[e,r]of Object.entries(l))if(r===t)return e;throw s.ERRORS.UNSUPPORTED_DID_METHOD}class K{constructor(t,e){this.name=t,this.value=e}toString(){return this.name?this.value?`${this.name}=${this.value}`:this.name:\"\"}}const J=Object.freeze({method:\"\",id:\"\",idStrings:[],params:[],path:\"\",pathSegments:[],query:\"\",fragment:\"\"});class W{constructor(t){this.input=t,this.currentIndex=0,this.out={...J}}checkLength(){if(this.input.length<7)throw new Error(\"input length is less than 7\");return this.parseScheme.bind(this)}parseScheme(){if(\"did:\"!==this.input.slice(0,4))throw new Error(\"input does not begin with 'did:' prefix\");return this.currentIndex=3,this.parseMethod.bind(this)}parseMethod(){const t=this.input,e=t.length;let r=this.currentIndex+1;const n=r;for(;;){if(r===e)throw new Error(\"input does not have a second `:` marking end of method name\");const i=t[r];if(\":\"===i){if(r===n)throw new Error(`method is empty, ${r}`);break}if(O.isNotDigit(i)&&O.isNotSmallLetter(i))throw new Error(`\"character is not a-z OR 0-9, ${r}`);r+=1}return this.currentIndex=r,this.out.method=t.slice(n,r),this.parseId.bind(this)}parseId(){const t=this.input,e=t.length;let r=this.currentIndex+1;const n=r;let i=null;for(;;){if(r===e){i=null;break}const n=t[r];if(\":\"===n){i=this.parseId;break}if(\";\"===n){i=this.parseParamName;break}if(\"/\"===n){i=this.parsePath;break}if(\"?\"===n){i=this.parseQuery;break}if(\"#\"===n){i=this.parseFragment;break}if(O.isNotValidIDChar(n))throw new Error(`byte is not ALPHA OR DIGIT OR '.' OR '-', ${r}`);r+=1}if(r===n)throw new Error(`idstring must be atleast one char long, ${r}`);return this.currentIndex=r,this.out.idStrings=[...this.out.idStrings,t.slice(n,r)],i?i.bind(this):null}parseParamName(){const t=this.input,e=this.currentIndex+1,r=this.paramTransition(),n=this.currentIndex;if(n===e)throw new Error(`Param name must be at least one char long, ${n}`);return this.out.params=[...this.out.params,new K(t.slice(e,n),\"\")],r?r.bind(this):null}parseParamValue(){const t=this.input,e=this.currentIndex+1,r=this.paramTransition(),n=this.currentIndex;return this.out.params[this.out.params.length-1].value=t.slice(e,n),r?r.bind(this):null}paramTransition(){const t=this.input,e=t.length;let r,n,i,s=this.currentIndex+1;for(;;){if(s===e){n=null;break}const o=t[s];if(\";\"===o){n=this.parseParamName;break}if(\"=\"===o){n=this.parseParamValue;break}if(\"/\"===o){n=this.parsePath;break}if(\"?\"===o){n=this.parseQuery;break}if(\"#\"==o){n=this.parseFragment;break}if(\"%\"==o){if(s+2>=e||O.isNotHexDigit(t[s+1])||O.isNotHexDigit(t[s+2]))throw new Error(`% is not followed by 2 hex digits', ${s}`);i=!0,r=3}else i=!1,r=1;if(!i&&O.isNotValidParamChar(o))throw new Error(`character is not allowed in param - ${o}',  ${s}`);s+=r}return this.currentIndex=s,n?n.bind(this):null}parsePath(){const t=this.input,e=t.length;let r=this.currentIndex+1;const n=r;let i,s,o;for(;;){if(r===e){s=null;break}const n=t[r];if(\"/\"===n){s=this.parsePath;break}if(\"?\"===n){s=this.parseQuery;break}if(\"%\"===n){if(r+2>=e||O.isNotHexDigit(t[r+1])||O.isNotHexDigit(t[r+2]))throw new Error(`% is not followed by 2 hex digits, ${r}`);o=!0,i=3}else o=!1,i=1;if(!o&&O.isNotValidPathChar(n))throw new Error(`character is not allowed in path, ${r}`);r+=i}if(r==n&&0===this.out.pathSegments.length)throw new Error(`first path segment must have atleast one character, ${r}`);return this.currentIndex=r,this.out.pathSegments=[...this.out.pathSegments,t.slice(n,r)],s?s.bind(this):null}parseQuery(){const t=this.input,e=t.length;let r=this.currentIndex+1;const n=r;let i,s,o=null;for(;r!==e;){const n=t[r];if(\"#\"===n){o=this.parseFragment;break}if(\"%\"===n){if(r+2>=e||O.isNotHexDigit(t[r+1])||O.isNotHexDigit(t[r+2]))throw new Error(`% is not followed by 2 hex digits, ${r}`);s=!0,i=3}else s=!1,i=1;if(!s&&O.isNotValidQueryOrFragmentChar(n))throw new Error(`character is not allowed in query - ${n}`);r+=i}return this.currentIndex=r,this.out.query=t.slice(n,r),o?o.bind(this):null}parseFragment(){const t=this.input,e=this.input.length;let r=this.currentIndex+1;const n=r;let i,s;for(;r!==e;){const n=t[r];if(\"%\"===n){if(r+2>=e||O.isNotHexDigit(t[r+1])||O.isNotHexDigit(t[r+2]))throw new Error(`% is not followed by 2 hex digits, ${r}`);s=!0,i=3}else s=!1,i=1;if(!s&&O.isNotValidQueryOrFragmentChar(n))throw new Error(`character is not allowed in fragment - ${n}`);r+=i}return this.currentIndex=r,this.out.fragment=t.slice(n,r),null}}class Z{constructor(t){this.method=\"\",this.id=\"\",this.idStrings=[],this.params=[],this.path=\"\",this.pathSegments=[],this.query=\"\",this.fragment=\"\",t&&Object.assign(this,t)}isUrl(){return this.params.length>0||!!this.path||this.pathSegments.length>0||!!this.query||!!this.fragment}string(){const t=[\"did:\"];if(!this.method)return\"\";if(t.push(`${this.method}:`),this.id)t.push(this.id);else{if(!this.idStrings.length)return\"\";t.push(this.idStrings.join(\":\"))}if(this.params.length)for(const e of this.params){const r=e.toString();if(!r)return\"\";t.push(`;${r}`)}return this.path?t.push(`/${this.path}`):this.pathSegments.length&&t.push(`/${this.pathSegments.join(\"/\")}`),this.query&&t.push(`?${this.query}`),this.fragment&&t.push(`#${this.fragment}`),t.join(\"\")}toJSON(){return this.string()}static parse(t){const e=new W(t);let r=e.checkLength();for(;r;)r=r();return e.out.id=e.out.idStrings.join(\":\"),e.out.path=e.out.pathSegments.join(\"/\"),new Z(e.out)}static decodePartsFromId(t){const e=j(t.bytes[0]);return{method:e,blockchain:Y(e,t.bytes[1]),networkId:z(e,t.bytes[1])}}static networkIdFromId(t){return Z.throwIfDIDUnsupported(t).networkId}static methodFromId(t){return Z.throwIfDIDUnsupported(t).method}static blockchainFromId(t){return Z.throwIfDIDUnsupported(t).blockchain}static throwIfDIDUnsupported(t){const{method:e,blockchain:r,networkId:n}=Z.decodePartsFromId(t);if(Z.isUnsupported(e,r,n))throw new Error(`${s.ERRORS.UNKNOWN_DID_METHOD.message}: unsupported DID`);return{method:e,blockchain:r,networkId:n}}static newFromIdenState(t,e){const r=H.idGenesisFromIdenState(t,e);return Z.parseFromId(r)}static new(t,e){return Z.parseFromId(new H(t,e))}static parseFromId(t){if(!R.checkChecksum(t.bytes))throw new Error(`${s.ERRORS.UNSUPPORTED_ID.message}: invalid checksum`);const{method:e,blockchain:r,networkId:n}=Z.throwIfDIDUnsupported(t),i=[s.DID.DID_SCHEMA,e.toString(),r.toString()];n&&i.push(n.toString()),i.push(t.string());const o=i.join(\":\");return Z.parse(o)}static idFromDID(t){let e;try{e=Z.getIdFromDID(t)}catch(e){if(e.message===s.ERRORS.UNKNOWN_DID_METHOD.message)return Z.idFromUnsupportedDID(t);throw e}return e}static isUnsupported(t,e,r){return t==h.Other&&e==o.Unknown&&r==a.Unknown}static idFromUnsupportedDID(t){const r=e(I.encode(t.string())),n=new Uint8Array(27),i=r.slice(r.length-s.GENESIS_LENGTH);for(let t=0;t<n.length;t++)n[t]=i[t]??0;const u=new F(o.Unknown,a.Unknown),c=Uint8Array.from([l[h.Other],d[h.Other][u.toString()]]);return new H(c,n)}static getIdFromDID(t){const e=t.method;if(!l[e]||e===h.Other)throw s.ERRORS.UNKNOWN_DID_METHOD;if(t.idStrings.length>3||t.idStrings.length<2)throw new Error(`${s.ERRORS.INCORRECT_DID}: unexpected number of ID strings`);const r=H.fromString(t.idStrings[t.idStrings.length-1]);if(!R.checkChecksum(r.bytes))throw new Error(`${s.ERRORS.INCORRECT_DID}: incorrect ID checksum`);const{method:n,blockchain:i,networkId:o}=Z.decodePartsFromId(r);if(n.toString()!==e.toString())throw new Error(`${s.ERRORS.INCORRECT_DID}: methods in Id and DID are different`);if(i.toString()!==t.idStrings[0])throw new Error(`${s.ERRORS.INCORRECT_DID}: blockchains in ID and DID are different`);if(t.idStrings.length>2&&o.toString()!=t.idStrings[1])throw new Error(`${s.ERRORS.INCORRECT_DID}: networkIDs in Id and DID are different`);return r}}const Q=t=>{o[t]=t},q=t=>{a[t]=t},X=(t,e)=>{const r=l[h.Other];if(e>=r)throw new Error(`Can't register DID method byte: current '${e.toString(2)}', maximum byte allowed: '${(r-1).toString(2)}'`);if(\"number\"!=typeof l[t]||l[t]!==e){if(Object.values(l).includes(e))throw new Error(`can't register method '${t}' because DID method byte '${e.toString(2)}' already registered for another method`);h[t]=t,l[t]=e}},tt=(t,e,r)=>{const n=`${t}:${e}`;if(\"number\"!=typeof u[n]||u[n]!==r){if(Object.values(u).includes(r))throw new Error(`can't register chainId ${r} for '${t}:${e}' because it's already registered for another chain id`);u[n]=r}},et=(t,e)=>{e&&(t+=`:${e}`);const r=u[t];if(!r)throw new Error(`chainId not found for ${t}`);return r},rt=t=>{const e=Z.idFromDID(t),r=Z.blockchainFromId(e),n=Z.networkIdFromId(e),i=u[`${r}:${n}`];if(\"number\"!=typeof i)throw new Error(`chainId not found for ${r}:${n}`);return i},nt=({method:t,methodByte:e,blockchain:r,network:n,chainId:i,networkFlag:s})=>{Q(r),q(n),\"number\"==typeof e&&X(t,e),d[t]||(d[t]={}),\"number\"==typeof i&&tt(r,n,i);const o=`${r}:${n}`,a=d[t][o];if(\"number\"!=typeof a||a!==s){if(Object.values(d[t]).includes(s))throw new Error(`DID network flag ${s.toString(2)} is already registered for the another network id for '${t}' method`);d[t][o]=s}};export{o as Blockchain,R as BytesHelper,u as ChainIds,P as Claim,C as ClaimOptions,s as Constants,Z as DID,F as DIDNetworkFlag,h as DidMethod,l as DidMethodByte,d as DidMethodNetwork,B as ElemBytes,L as ErrSlotOverflow,M as Flags,H as Id,U as IdPosition,V as MerklizedFlag,v as MerklizedRootPosition,a as NetworkId,K as Param,W as Parser,k as SchemaHash,A as SlotName,O as StringUtils,$ as SubjectFlag,G as buildDIDType,rt as chainIDfromDID,N as checkBigIntArrayInField,p as checkBigIntInField,I as encoder,Y as findBlockchainForDIDMethodByValue,j as findDIDMethodByValue,z as findNetworkIDForDIDMethodByValue,g as fromBigEndian,E as fromLittleEndian,T as genesisFromEthAddress,et as getChainId,x as getDateFromUnixTimestamp,m as getUint32,S as getUint64,b as getUnixTimestamp,D as idenState,J as initDIDParams,w as putUint32,_ as putUint64,Q as registerBlockchain,tt as registerChainId,X as registerDidMethod,nt as registerDidMethodNetwork,q as registerNetwork,y as toBigEndian,f as toLittleEndian};\n//# sourceMappingURL=index.js.map\n","import { fromBigEndian } from '@iden3/js-iden3-core';\nimport { poseidon, sha256 } from '@iden3/js-crypto';\n// Q is the order of the integer field (Zq) that fits inside the SNARK.\nexport const qString =\n  '21888242871839275222246405745257275088548364400416034343698204186575808495617';\n\nexport function hash(message: Uint8Array): bigint {\n  // 1. sha256 hash\n  const hashBytes = sha256(message);\n\n  // 2. swap hash before hashing\n  const bi = fromBigEndian(hashBytes.reverse());\n\n  let m = BigInt(0);\n  if (checkBigIntInField(bi)) {\n    m = bi;\n  } else {\n    m = bi % BigInt(qString);\n  }\n\n  return poseidon.hash([m]);\n}\n\n// checkBigIntInField checks if given *big.Int fits in a Field Q element\nexport function checkBigIntInField(a: bigint): boolean {\n  return a < BigInt(qString);\n}\n","export interface ZKProof {\n  proof: ProofData;\n  pub_signals: string[];\n}\nexport interface ProofData {\n  pi_a: string[];\n  pi_b: string[][];\n  pi_c: string[];\n  protocol: string;\n}\n\nexport class ProvingMethodAlg {\n  constructor(public readonly alg: string, public readonly circuitId: string) {}\n\n  toString(): string {\n    return `${this.alg}:${this.circuitId}`;\n  }\n}\n\nconst provingMethods = new Map<string, () => ProvingMethod>(); // map[string]func() ProvingMethod{}\n\n// ProvingMethod can be used add new methods for signing or verifying tokens.\nexport interface ProvingMethod {\n  // Returns true if proof is valid\n  verify(messageHash: Uint8Array, proof: ZKProof, verificationKey: Uint8Array): Promise<boolean>;\n  // Returns proof or error\n  prove(inputs: Uint8Array, provingKey: Uint8Array, wasm: Uint8Array): Promise<ZKProof>;\n\n  readonly methodAlg: ProvingMethodAlg;\n\n  readonly alg: string;\n  // Returns the alg identifier for this method (example: 'AUTH-GROTH-16')\n  readonly circuitId: string;\n}\n\n// RegisterProvingMethod registers the \"alg\" name and a factory function for proving method.\n// This is typically done during init() in the method's implementation\nexport function registerProvingMethod(\n  alg: ProvingMethodAlg,\n  f: () => ProvingMethod\n): Promise<void> {\n  return new Promise((res) => {\n    provingMethods.set(alg.toString(), f);\n    res();\n  });\n}\n\n// GetProvingMethod retrieves a proving method from an \"alg\" string\nexport function getProvingMethod(alg: ProvingMethodAlg): Promise<ProvingMethod> {\n  return new Promise((res, rej) => {\n    const func = provingMethods.get(alg.toString());\n    if (func) {\n      const method: ProvingMethod = func();\n      res(method);\n    } else {\n      rej('unknown alg');\n    }\n  });\n}\n\nexport function getAlgorithms(): Promise<string[]> {\n  return Promise.resolve(Array.from(provingMethods.keys()).map((k) => k.split(':')[0]));\n}\n\n// ProofInputsPreparerHandlerFunc prepares inputs using hash message and circuit id\nexport type ProofInputsPreparerHandlerFunc = (\n  hash: Uint8Array,\n  circuitId: string\n) => Promise<Uint8Array>;\n\n// Prepare function is responsible to call provided handler for inputs preparation\nexport function prepare(\n  f: ProofInputsPreparerHandlerFunc,\n  hash: Uint8Array,\n  circuitId: string\n): Promise<Uint8Array> {\n  return f(hash, circuitId);\n}\n","/* eslint-disable @typescript-eslint/strict-boolean-expressions */\nfunction parse(string, encoding, opts) {\n  var _opts$out;\n\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  // Build the character lookup table:\n  if (!encoding.codes) {\n    encoding.codes = {};\n\n    for (var i = 0; i < encoding.chars.length; ++i) {\n      encoding.codes[encoding.chars[i]] = i;\n    }\n  } // The string must have a whole number of bytes:\n\n\n  if (!opts.loose && string.length * encoding.bits & 7) {\n    throw new SyntaxError('Invalid padding');\n  } // Count the padding bytes:\n\n\n  var end = string.length;\n\n  while (string[end - 1] === '=') {\n    --end; // If we get a whole number of bytes, there is too much padding:\n\n    if (!opts.loose && !((string.length - end) * encoding.bits & 7)) {\n      throw new SyntaxError('Invalid padding');\n    }\n  } // Allocate the output:\n\n\n  var out = new ((_opts$out = opts.out) != null ? _opts$out : Uint8Array)(end * encoding.bits / 8 | 0); // Parse the data:\n\n  var bits = 0; // Number of bits currently in the buffer\n\n  var buffer = 0; // Bits waiting to be written out, MSB first\n\n  var written = 0; // Next byte to write\n\n  for (var _i = 0; _i < end; ++_i) {\n    // Read one character from the string:\n    var value = encoding.codes[string[_i]];\n\n    if (value === undefined) {\n      throw new SyntaxError('Invalid character ' + string[_i]);\n    } // Append the bits to the buffer:\n\n\n    buffer = buffer << encoding.bits | value;\n    bits += encoding.bits; // Write out some bits if the buffer has a byte's worth:\n\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 0xff & buffer >> bits;\n    }\n  } // Verify that we have received just enough bits:\n\n\n  if (bits >= encoding.bits || 0xff & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n\n  return out;\n}\nfunction stringify(data, encoding, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  var _opts = opts,\n      _opts$pad = _opts.pad,\n      pad = _opts$pad === void 0 ? true : _opts$pad;\n  var mask = (1 << encoding.bits) - 1;\n  var out = '';\n  var bits = 0; // Number of bits currently in the buffer\n\n  var buffer = 0; // Bits waiting to be written out, MSB first\n\n  for (var i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = buffer << 8 | 0xff & data[i];\n    bits += 8; // Write out as much as we can:\n\n    while (bits > encoding.bits) {\n      bits -= encoding.bits;\n      out += encoding.chars[mask & buffer >> bits];\n    }\n  } // Partial character:\n\n\n  if (bits) {\n    out += encoding.chars[mask & buffer << encoding.bits - bits];\n  } // Add padding characters until we hit a byte boundary:\n\n\n  if (pad) {\n    while (out.length * encoding.bits & 7) {\n      out += '=';\n    }\n  }\n\n  return out;\n}\n\n/* eslint-disable @typescript-eslint/strict-boolean-expressions */\nvar base16Encoding = {\n  chars: '0123456789ABCDEF',\n  bits: 4\n};\nvar base32Encoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bits: 5\n};\nvar base32HexEncoding = {\n  chars: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bits: 5\n};\nvar base64Encoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bits: 6\n};\nvar base64UrlEncoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bits: 6\n};\nvar base16 = {\n  parse: function parse$1(string, opts) {\n    return parse(string.toUpperCase(), base16Encoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base16Encoding, opts);\n  }\n};\nvar base32 = {\n  parse: function parse$1(string, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return parse(opts.loose ? string.toUpperCase().replace(/0/g, 'O').replace(/1/g, 'L').replace(/8/g, 'B') : string, base32Encoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base32Encoding, opts);\n  }\n};\nvar base32hex = {\n  parse: function parse$1(string, opts) {\n    return parse(string, base32HexEncoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base32HexEncoding, opts);\n  }\n};\nvar base64 = {\n  parse: function parse$1(string, opts) {\n    return parse(string, base64Encoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base64Encoding, opts);\n  }\n};\nvar base64url = {\n  parse: function parse$1(string, opts) {\n    return parse(string, base64UrlEncoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base64UrlEncoding, opts);\n  }\n};\nvar codec = {\n  parse: parse,\n  stringify: stringify\n};\n\nexport { base16, base32, base32hex, base64, base64url, codec };\n","import { hash } from './hash';\nimport {\n  ZKProof,\n  ProvingMethod,\n  ProvingMethodAlg,\n  ProofInputsPreparerHandlerFunc,\n  getProvingMethod,\n  prepare\n} from './proving';\n\nimport { base64url as base64 } from 'rfc4648';\nimport { toBigEndian } from '@iden3/js-iden3-core';\n\nexport enum Header {\n  Type = 'typ',\n  Alg = 'alg',\n  CircuitId = 'circuitId',\n  Critical = 'crit'\n}\n\nexport interface IRawJSONWebZeroknowledge {\n  payload: Uint8Array;\n  protectedHeaders: Uint8Array;\n  header: { [key: string]: unknown };\n  zkp: Uint8Array;\n\n  sanitized(): Promise<Token>;\n}\n\nexport class RawJSONWebZeroknowledge implements IRawJSONWebZeroknowledge {\n  constructor(\n    public payload: Uint8Array,\n    public protectedHeaders: Uint8Array,\n    public header: { [key: string]: unknown },\n    public zkp: Uint8Array\n  ) {}\n\n  async sanitized(): Promise<Token> {\n    if (!this.payload) {\n      throw new Error('iden3/js-jwz: missing payload in JWZ message');\n    }\n\n    const headers: { [key: string]: unknown } = JSON.parse(\n      new TextDecoder().decode(this.protectedHeaders)\n    );\n    const criticalHeaders = headers[Header.Critical] as string[];\n    criticalHeaders.forEach((key: string) => {\n      if (!headers[key]) {\n        throw new Error(`iden3/js-jwz: header is listed in critical ${key}, but not presented`);\n      }\n    });\n\n    const alg = headers[Header.Alg] as string;\n    const circuitId = headers[Header.CircuitId] as string;\n\n    const method = await getProvingMethod(new ProvingMethodAlg(alg, circuitId));\n    const zkp = JSON.parse(new TextDecoder().decode(this.zkp));\n    const token = new Token(method, new TextDecoder().decode(this.payload));\n    token.alg = alg;\n    token.circuitId = circuitId;\n    token.zkProof = zkp;\n    for (const [key, value] of Object.entries(headers)) {\n      token.setHeader(key, value);\n    }\n\n    return token;\n  }\n}\n\n// Token represents a JWZ Token.\nexport class Token {\n  public alg: string;\n  public circuitId: string;\n  private raw: IRawJSONWebZeroknowledge;\n  public zkProof: ZKProof = {} as ZKProof;\n\n  constructor(\n    public readonly method: ProvingMethod,\n    payload: string,\n    private readonly inputsPreparer?: ProofInputsPreparerHandlerFunc\n  ) {\n    this.alg = this.method.alg;\n    this.circuitId = this.method.circuitId;\n    this.raw = {} as IRawJSONWebZeroknowledge;\n    this.raw.header = this.getDefaultHeaders();\n\n    this.raw.payload = new TextEncoder().encode(payload);\n  }\n\n  public setHeader(key: string, value: unknown): void {\n    this.raw.header[key] = value;\n  }\n\n  public getPayload(): string {\n    return new TextDecoder().decode(this.raw.payload);\n  }\n\n  private getDefaultHeaders(): { [key: string]: string | string[] } {\n    return {\n      [Header.Alg]: this.alg,\n      [Header.Critical]: [Header.CircuitId],\n      [Header.CircuitId]: this.circuitId,\n      [Header.Type]: 'JWZ'\n    };\n  }\n\n  // Parse parses a jwz message in compact or full serialization format.\n  static parse(tokenStr: string): Promise<Token> {\n    // Parse parses a jwz message in compact or full serialization format.\n    const token = tokenStr?.trim();\n    return token.startsWith('{') ? Token.parseFull(tokenStr) : Token.parseCompact(tokenStr);\n  }\n\n  // parseCompact parses a message in compact format.\n  private static async parseCompact(tokenStr: string): Promise<Token> {\n    const parts = tokenStr.split('.');\n    if (parts.length != 3) {\n      throw new Error('iden3/js-jwz: compact JWZ format must have three segments');\n    }\n    const rawProtected = base64.parse(parts[0], { loose: true });\n\n    const rawPayload = base64.parse(parts[1], { loose: true });\n\n    const proof = base64.parse(parts[2], { loose: true });\n\n    const raw: IRawJSONWebZeroknowledge = new RawJSONWebZeroknowledge(\n      rawPayload,\n      rawProtected,\n      {},\n      proof\n    );\n\n    return await raw.sanitized();\n  }\n\n  // parseFull parses a message in full format.\n  private static async parseFull(tokenStr: string): Promise<Token> {\n    const raw: IRawJSONWebZeroknowledge = JSON.parse(tokenStr);\n    return await raw.sanitized();\n  }\n\n  // Prove creates and returns a complete, proved JWZ.\n  // The token is proven using the Proving Method specified in the token.\n  async prove(provingKey: Uint8Array, wasm: Uint8Array): Promise<string> {\n    // all headers must be protected\n    const headers = this.serializeHeaders();\n\n    this.raw.protectedHeaders = new TextEncoder().encode(headers);\n\n    const msgHash: Uint8Array = await this.getMessageHash();\n\n    if (!this.inputsPreparer) {\n      throw new Error('iden3/jwz: prepare func must be defined');\n    }\n    const inputs: Uint8Array = await prepare(this.inputsPreparer, msgHash, this.circuitId);\n\n    const proof: ZKProof = await this.method.prove(inputs, provingKey, wasm);\n\n    const marshaledProof = JSON.stringify(proof);\n\n    this.zkProof = proof;\n    this.raw.zkp = new TextEncoder().encode(marshaledProof);\n\n    return this.compactSerialize();\n  }\n\n  // CompactSerialize returns token serialized in three parts: base64 encoded headers, payload and proof.\n  compactSerialize(): string {\n    if (!this.raw.header || !this.raw.protectedHeaders || !this.zkProof) {\n      throw new Error(\"iden3/jwz:can't serialize without one of components\");\n    }\n\n    const serializedProtected = base64.stringify(this.raw.protectedHeaders, {\n      pad: false\n    });\n    const serializedProof = base64.stringify(this.raw.zkp, { pad: false });\n    const serializedPayload = base64.stringify(this.raw.payload, {\n      pad: false\n    });\n    return `${serializedProtected}.${serializedPayload}.${serializedProof}`;\n  }\n\n  // fullSerialize returns marshaled presentation of raw token as json string.\n  fullSerialize(): string {\n    return JSON.stringify(this.raw);\n  }\n\n  async getMessageHash(): Promise<Uint8Array> {\n    const serializedHeadersJSON = this.serializeHeaders();\n\n    const serializedHeaders = new TextEncoder().encode(serializedHeadersJSON);\n    const protectedHeaders = base64.stringify(serializedHeaders, {\n      pad: false\n    });\n\n    const payload = base64.stringify(this.raw.payload, { pad: false });\n\n    // JWZ ZkProof input value is ASCII(BASE64URL(UTF8(JWS Protected Header)) || '.' || BASE64URL(JWS Payload)).\n    const messageToProof = new TextEncoder().encode(`${protectedHeaders}.${payload}`);\n\n    const hashInt: bigint = await hash(messageToProof);\n\n    return toBigEndian(hashInt, 32);\n  }\n\n  // Verify  perform zero knowledge verification.\n  async verify(verificationKey: Uint8Array): Promise<boolean> {\n    // 1. prepare hash o payload message that had to be proven\n    const msgHash = await this.getMessageHash();\n\n    // 2. verify that zkp is valid\n\n    return this.method.verify(msgHash, this.zkProof, verificationKey);\n  }\n\n  serializeHeaders() {\n    return JSON.stringify(this.raw.header, Object.keys(this.raw.header).sort());\n  }\n}\n","/* eslint-disable require-await */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport async function witnessBuilder(code, options?) {\n  options = options || {};\n\n  let wasmModule;\n  try {\n    wasmModule = await WebAssembly.compile(code);\n  } catch (err) {\n    console.log(err);\n    console.log('\\nTry to run circom --c in order to generate c++ code instead\\n');\n    throw new Error(err);\n  }\n\n  let wc;\n\n  let errStr = '';\n  let msgStr = '';\n\n  const instance = await WebAssembly.instantiate(wasmModule, {\n    runtime: {\n      exceptionHandler: function (code) {\n        let err;\n        if (code == 1) {\n          err = 'Signal not found.\\n';\n        } else if (code == 2) {\n          err = 'Too many signals set.\\n';\n        } else if (code == 3) {\n          err = 'Signal already set.\\n';\n        } else if (code == 4) {\n          err = 'Assert Failed.\\n';\n        } else if (code == 5) {\n          err = 'Not enough memory.\\n';\n        } else if (code == 6) {\n          err = 'Input signal array access exceeds the size.\\n';\n        } else {\n          err = 'Unknown error.\\n';\n        }\n        throw new Error(err + errStr);\n      },\n      printErrorMessage: function () {\n        errStr += getMessage() + '\\n';\n        // console.error(getMessage());\n      },\n      writeBufferMessage: function () {\n        const msg = getMessage();\n        // Any calls to `log()` will always end with a `\\n`, so that's when we print and reset\n        if (msg === '\\n') {\n          console.log(msgStr);\n          msgStr = '';\n        } else {\n          // If we've buffered other content, put a space in between the items\n          if (msgStr !== '') {\n            msgStr += ' ';\n          }\n          // Then append the message to the message we are creating\n          msgStr += msg;\n        }\n      },\n      showSharedRWMemory: function () {\n        printSharedRWMemory();\n      }\n    }\n  });\n\n  const sanityCheck = options;\n  //        options &&\n  //        (\n  //            options.sanityCheck ||\n  //            options.logGetSignal ||\n  //            options.logSetSignal ||\n  //            options.logStartComponent ||\n  //            options.logFinishComponent\n  //        );\n\n  wc = new WitnessCalculator(instance, sanityCheck);\n  return wc;\n\n  function getMessage() {\n    let message = '';\n    let c = (instance as any).exports.getMessageChar();\n    while (c != 0) {\n      message += String.fromCharCode(c);\n      c = (instance as any).exports.getMessageChar();\n    }\n    return message;\n  }\n\n  function printSharedRWMemory() {\n    const shared_rw_memory_size = (instance as any).exports.getFieldNumLen32();\n    const arr = new Uint32Array(shared_rw_memory_size);\n    for (let j = 0; j < shared_rw_memory_size; j++) {\n      arr[shared_rw_memory_size - 1 - j] = (instance as any).exports.readSharedRWMemory(j);\n    }\n\n    // If we've buffered other content, put a space in between the items\n    if (msgStr !== '') {\n      msgStr += ' ';\n    }\n    // Then append the value to the message we are creating\n    msgStr += fromArray32(arr).toString();\n  }\n}\n\nclass WitnessCalculator {\n  version: any;\n  n32: any;\n  prime: any;\n  witnessSize: any;\n  sanityCheck: any;\n  constructor(private instance, sanityCheck) {\n    this.instance = instance;\n    this.version = (this.instance.exports as any).getVersion();\n    this.n32 = (this.instance.exports as any).getFieldNumLen32();\n\n    (this.instance.exports as any).getRawPrime();\n    const arr = new Uint32Array(this.n32);\n    for (let i = 0; i < this.n32; i++) {\n      arr[this.n32 - 1 - i] = (this.instance.exports as any).readSharedRWMemory(i);\n    }\n    this.prime = fromArray32(arr);\n\n    this.witnessSize = (this.instance.exports as any).getWitnessSize();\n\n    this.sanityCheck = sanityCheck;\n  }\n\n  circom_version() {\n    return (this.instance.exports as any).getVersion();\n  }\n\n  async _doCalculateWitness(input, sanityCheck) {\n    //input is assumed to be a map from signals to arrays of bigints\n    (this.instance.exports as any).init(this.sanityCheck || sanityCheck ? 1 : 0);\n    const keys = Object.keys(input);\n    let input_counter = 0;\n    keys.forEach((k) => {\n      const h = fnvHash(k);\n      const hMSB = parseInt(h.slice(0, 8), 16);\n      const hLSB = parseInt(h.slice(8, 16), 16);\n      const fArr = flatArray(input[k]);\n      let signalSize = (this.instance.exports as any).getInputSignalSize(hMSB, hLSB);\n      if (signalSize < 0) {\n        throw new Error(`Signal ${k} not found\\n`);\n      }\n      if (fArr.length < signalSize) {\n        throw new Error(`Not enough values for input signal ${k}\\n`);\n      }\n      if (fArr.length > signalSize) {\n        throw new Error(`Too many values for input signal ${k}\\n`);\n      }\n      for (let i = 0; i < fArr.length; i++) {\n        const arrFr = toArray32(BigInt(fArr[i]) % this.prime, this.n32);\n        for (let j = 0; j < this.n32; j++) {\n          (this.instance.exports as any).writeSharedRWMemory(j, arrFr[this.n32 - 1 - j]);\n        }\n        try {\n          (this.instance.exports as any).setInputSignal(hMSB, hLSB, i);\n          input_counter++;\n        } catch (err) {\n          // console.log(`After adding signal ${i} of ${k}`)\n          throw new Error(err);\n        }\n      }\n    });\n    if (input_counter < (this.instance.exports as any).getInputSize()) {\n      throw new Error(\n        `Not all inputs have been set. Only ${input_counter} out of ${(\n          this.instance.exports as any\n        ).getInputSize()}`\n      );\n    }\n  }\n\n  async calculateWitness(input, sanityCheck) {\n    const w: bigint[] = [];\n\n    await this._doCalculateWitness(input, sanityCheck);\n\n    for (let i = 0; i < this.witnessSize; i++) {\n      (this.instance.exports as any).getWitness(i);\n      const arr = new Uint32Array(this.n32);\n      for (let j = 0; j < this.n32; j++) {\n        arr[this.n32 - 1 - j] = (this.instance.exports as any).readSharedRWMemory(j);\n      }\n      w.push(fromArray32(arr));\n    }\n\n    return w;\n  }\n\n  async calculateBinWitness(input, sanityCheck) {\n    const buff32 = new Uint32Array(this.witnessSize * this.n32);\n    const buff = new Uint8Array(buff32.buffer);\n    await this._doCalculateWitness(input, sanityCheck);\n\n    for (let i = 0; i < this.witnessSize; i++) {\n      (this.instance.exports as any).getWitness(i);\n      const pos = i * this.n32;\n      for (let j = 0; j < this.n32; j++) {\n        buff32[pos + j] = (this.instance.exports as any).readSharedRWMemory(j);\n      }\n    }\n\n    return buff;\n  }\n\n  async calculateWTNSBin(input, sanityCheck) {\n    const buff32 = new Uint32Array(this.witnessSize * this.n32 + this.n32 + 11);\n    const buff = new Uint8Array(buff32.buffer);\n    await this._doCalculateWitness(input, sanityCheck);\n\n    //\"wtns\"\n    buff[0] = 'w'.charCodeAt(0);\n    buff[1] = 't'.charCodeAt(0);\n    buff[2] = 'n'.charCodeAt(0);\n    buff[3] = 's'.charCodeAt(0);\n\n    //version 2\n    buff32[1] = 2;\n\n    //number of sections: 2\n    buff32[2] = 2;\n\n    //id section 1\n    buff32[3] = 1;\n\n    const n8 = this.n32 * 4;\n    //id section 1 length in 64bytes\n    const idSection1length = 8 + n8;\n    const idSection1lengthHex = idSection1length.toString(16);\n    buff32[4] = parseInt(idSection1lengthHex.slice(0, 8), 16);\n    buff32[5] = parseInt(idSection1lengthHex.slice(8, 16), 16);\n\n    //this.n32\n    buff32[6] = n8;\n\n    //prime number\n    this.instance.exports.getRawPrime();\n\n    let pos = 7;\n    for (let j = 0; j < this.n32; j++) {\n      buff32[pos + j] = this.instance.exports.readSharedRWMemory(j);\n    }\n    pos += this.n32;\n\n    // witness size\n    buff32[pos] = this.witnessSize;\n    pos++;\n\n    //id section 2\n    buff32[pos] = 2;\n    pos++;\n\n    // section 2 length\n    const idSection2length = n8 * this.witnessSize;\n    const idSection2lengthHex = idSection2length.toString(16);\n    buff32[pos] = parseInt(idSection2lengthHex.slice(0, 8), 16);\n    buff32[pos + 1] = parseInt(idSection2lengthHex.slice(8, 16), 16);\n\n    pos += 2;\n    for (let i = 0; i < this.witnessSize; i++) {\n      this.instance.exports.getWitness(i);\n      for (let j = 0; j < this.n32; j++) {\n        buff32[pos + j] = this.instance.exports.readSharedRWMemory(j);\n      }\n      pos += this.n32;\n    }\n\n    return buff;\n  }\n}\n\nfunction toArray32(rem, size) {\n  const res: number[] = []; //new Uint32Array(size); //has no unshift\n  const radix = BigInt(0x100000000);\n  while (rem) {\n    res.unshift(Number(rem % radix));\n    rem = rem / radix;\n  }\n  if (size) {\n    let i = size - res.length;\n    while (i > 0) {\n      res.unshift(0);\n      i--;\n    }\n  }\n  return res;\n}\n\nfunction fromArray32(arr) {\n  //returns a BigInt\n  let res = BigInt(0);\n  const radix = BigInt(0x100000000);\n  for (let i = 0; i < arr.length; i++) {\n    res = res * radix + BigInt(arr[i]);\n  }\n  return res;\n}\n\nfunction flatArray(a) {\n  let res = [];\n  fillArray(res, a);\n  return res;\n\n  function fillArray(res, a) {\n    if (Array.isArray(a)) {\n      for (let i = 0; i < a.length; i++) {\n        fillArray(res, a[i]);\n      }\n    } else {\n      res.push(a);\n    }\n  }\n}\n\nfunction fnvHash(str) {\n  const uint64_max = BigInt(2) ** BigInt(64);\n  let hash = BigInt('0xCBF29CE484222325');\n  for (let i = 0; i < str.length; i++) {\n    hash ^= BigInt(str[i].charCodeAt());\n    hash *= BigInt(0x100000001b3);\n    hash %= uint64_max;\n  }\n  let shash = hash.toString(16);\n  let n = 16 - shash.length;\n  shash = '0'.repeat(n).concat(shash);\n  return shash;\n}\n","/* global BigInt */\nconst hexLen = [ 0, 1, 2, 2, 3, 3, 3, 3, 4 ,4 ,4 ,4 ,4 ,4 ,4 ,4];\n\nfunction fromString(s, radix) {\n    if ((!radix)||(radix==10)) {\n        return BigInt(s);\n    } else if (radix==16) {\n        if (s.slice(0,2) == \"0x\") {\n            return BigInt(s);\n        } else {\n            return BigInt(\"0x\"+s);\n        }\n    }\n}\n\nconst e = fromString;\n\nfunction fromArray(a, radix) {\n    let acc =BigInt(0);\n    radix = BigInt(radix);\n    for (let i=0; i<a.length; i++) {\n        acc = acc*radix + BigInt(a[i]);\n    }\n    return acc;\n}\n\nfunction bitLength$6(a) {\n    const aS =a.toString(16);\n    return (aS.length-1)*4 +hexLen[parseInt(aS[0], 16)];\n}\n\nfunction isNegative$4(a) {\n    return BigInt(a) < BigInt(0);\n}\n\nfunction isZero$1(a) {\n    return !a;\n}\n\nfunction shiftLeft(a, n) {\n    return BigInt(a) << BigInt(n);\n}\n\nfunction shiftRight(a, n) {\n    return BigInt(a) >> BigInt(n);\n}\n\nconst shl = shiftLeft;\nconst shr = shiftRight;\n\nfunction isOdd$5(a) {\n    return (BigInt(a) & BigInt(1)) == BigInt(1);\n}\n\n\nfunction naf(n) {\n    let E = BigInt(n);\n    const res = [];\n    while (E) {\n        if (E & BigInt(1)) {\n            const z = 2 - Number(E % BigInt(4));\n            res.push( z );\n            E = E - BigInt(z);\n        } else {\n            res.push( 0 );\n        }\n        E = E >> BigInt(1);\n    }\n    return res;\n}\n\n\nfunction bits(n) {\n    let E = BigInt(n);\n    const res = [];\n    while (E) {\n        if (E & BigInt(1)) {\n            res.push(1);\n        } else {\n            res.push( 0 );\n        }\n        E = E >> BigInt(1);\n    }\n    return res;\n}\n\nfunction toNumber$1(s) {\n    if (s>BigInt(Number.MAX_SAFE_INTEGER )) {\n        throw new Error(\"Number too big\");\n    }\n    return Number(s);\n}\n\nfunction toArray(s, radix) {\n    const res = [];\n    let rem = BigInt(s);\n    radix = BigInt(radix);\n    while (rem) {\n        res.unshift( Number(rem % radix));\n        rem = rem / radix;\n    }\n    return res;\n}\n\n\nfunction add(a, b) {\n    return BigInt(a) + BigInt(b);\n}\n\nfunction sub(a, b) {\n    return BigInt(a) - BigInt(b);\n}\n\nfunction neg(a) {\n    return -BigInt(a);\n}\n\nfunction mul(a, b) {\n    return BigInt(a) * BigInt(b);\n}\n\nfunction square$2(a) {\n    return BigInt(a) * BigInt(a);\n}\n\nfunction pow(a, b) {\n    return BigInt(a) ** BigInt(b);\n}\n\nfunction exp$1(a, b) {\n    return BigInt(a) ** BigInt(b);\n}\n\nfunction abs$1(a) {\n    return BigInt(a) >= 0 ? BigInt(a) : -BigInt(a);\n}\n\nfunction div(a, b) {\n    return BigInt(a) / BigInt(b);\n}\n\nfunction mod(a, b) {\n    return BigInt(a) % BigInt(b);\n}\n\nfunction eq(a, b) {\n    return BigInt(a) == BigInt(b);\n}\n\nfunction neq(a, b) {\n    return BigInt(a) != BigInt(b);\n}\n\nfunction lt(a, b) {\n    return BigInt(a) < BigInt(b);\n}\n\nfunction gt(a, b) {\n    return BigInt(a) > BigInt(b);\n}\n\nfunction leq(a, b) {\n    return BigInt(a) <= BigInt(b);\n}\n\nfunction geq(a, b) {\n    return BigInt(a) >= BigInt(b);\n}\n\nfunction band(a, b) {\n    return BigInt(a) & BigInt(b);\n}\n\nfunction bor(a, b) {\n    return BigInt(a) | BigInt(b);\n}\n\nfunction bxor(a, b) {\n    return BigInt(a) ^ BigInt(b);\n}\n\nfunction land(a, b) {\n    return BigInt(a) && BigInt(b);\n}\n\nfunction lor(a, b) {\n    return BigInt(a) || BigInt(b);\n}\n\nfunction lnot(a) {\n    return !BigInt(a);\n}\n\n// Returns a buffer with Little Endian Representation\nfunction toRprLE(buff, o, e, n8) {\n    const s = \"0000000\" + e.toString(16);\n    const v = new Uint32Array(buff.buffer, buff.byteOffset + o, n8/4);\n    const l = (((s.length-7)*4 - 1) >> 5)+1;    // Number of 32bit words;\n    for (let i=0; i<l; i++) v[i] = parseInt(s.substring(s.length-8*i-8, s.length-8*i), 16);\n    for (let i=l; i<v.length; i++) v[i] = 0;\n    for (let i=v.length*4; i<n8; i++) buff[i] = toNumber$1(band(shiftRight(e, i*8), 0xFF));\n}\n\n// Returns a buffer with Big Endian Representation\nfunction toRprBE(buff, o, e, n8) {\n    const s = \"0000000\" + e.toString(16);\n    const v = new DataView(buff.buffer, buff.byteOffset + o, n8);\n    const l = (((s.length-7)*4 - 1) >> 5)+1;    // Number of 32bit words;\n    for (let i=0; i<l; i++) v.setUint32(n8-i*4 -4, parseInt(s.substring(s.length-8*i-8, s.length-8*i), 16), false);\n    for (let i=0; i<n8/4-l; i++) v[i] = 0;\n}\n\n// Pases a buffer with Little Endian Representation\nfunction fromRprLE(buff, o, n8) {\n    n8 = n8 || buff.byteLength;\n    o = o || 0;\n    const v = new Uint32Array(buff.buffer, buff.byteOffset + o, n8/4);\n    const a = new Array(n8/4);\n    v.forEach( (ch,i) => a[a.length-i-1] = ch.toString(16).padStart(8,\"0\") );\n    return fromString(a.join(\"\"), 16);\n}\n\n// Pases a buffer with Big Endian Representation\nfunction fromRprBE(buff, o, n8) {\n    n8 = n8 || buff.byteLength;\n    o = o || 0;\n    const v = new DataView(buff.buffer, buff.byteOffset + o, n8);\n    const a = new Array(n8/4);\n    for (let i=0; i<n8/4; i++) {\n        a[i] = v.getUint32(i*4, false).toString(16).padStart(8, \"0\");\n    }\n    return fromString(a.join(\"\"), 16);\n}\n\nfunction toString(a, radix) {\n    return a.toString(radix);\n}\n\nfunction toLEBuff(a) {\n    const buff = new Uint8Array(Math.floor((bitLength$6(a) - 1) / 8) +1);\n    toRprLE(buff, 0, a, buff.byteLength);\n    return buff;\n}\n\nconst zero = e(0);\nconst one = e(1);\n\nvar _Scalar = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    abs: abs$1,\n    add: add,\n    band: band,\n    bitLength: bitLength$6,\n    bits: bits,\n    bor: bor,\n    bxor: bxor,\n    div: div,\n    e: e,\n    eq: eq,\n    exp: exp$1,\n    fromArray: fromArray,\n    fromRprBE: fromRprBE,\n    fromRprLE: fromRprLE,\n    fromString: fromString,\n    geq: geq,\n    gt: gt,\n    isNegative: isNegative$4,\n    isOdd: isOdd$5,\n    isZero: isZero$1,\n    land: land,\n    leq: leq,\n    lnot: lnot,\n    lor: lor,\n    lt: lt,\n    mod: mod,\n    mul: mul,\n    naf: naf,\n    neg: neg,\n    neq: neq,\n    one: one,\n    pow: pow,\n    shiftLeft: shiftLeft,\n    shiftRight: shiftRight,\n    shl: shl,\n    shr: shr,\n    square: square$2,\n    sub: sub,\n    toArray: toArray,\n    toLEBuff: toLEBuff,\n    toNumber: toNumber$1,\n    toRprBE: toRprBE,\n    toRprLE: toRprLE,\n    toString: toString,\n    zero: zero\n});\n\n/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n/*\n    This library does operations on polynomials with coefficients in a field F.\n\n    A polynomial P(x) = p0 + p1 * x + p2 * x^2 + ... + pn * x^n  is represented\n    by the array [ p0, p1, p2, ... , pn ].\n */\n\nclass PolField {\n    constructor (F) {\n        this.F = F;\n\n        let rem = F.sqrt_t;\n        let s = F.sqrt_s;\n\n        const five = this.F.add(this.F.add(this.F.two, this.F.two), this.F.one);\n\n        this.w = new Array(s+1);\n        this.wi = new Array(s+1);\n        this.w[s] = this.F.pow(five, rem);\n        this.wi[s] = this.F.inv(this.w[s]);\n\n        let n=s-1;\n        while (n>=0) {\n            this.w[n] = this.F.square(this.w[n+1]);\n            this.wi[n] = this.F.square(this.wi[n+1]);\n            n--;\n        }\n\n\n        this.roots = [];\n/*        for (let i=0; i<16; i++) {\n            let r = this.F.one;\n            n = 1 << i;\n            const rootsi = new Array(n);\n            for (let j=0; j<n; j++) {\n                rootsi[j] = r;\n                r = this.F.mul(r, this.w[i]);\n            }\n\n            this.roots.push(rootsi);\n        }\n    */\n        this._setRoots(15);\n    }\n\n    _setRoots(n) {\n        if (n > this.F.sqrt_s) n = this.s;\n        for (let i=n; (i>=0) && (!this.roots[i]); i--) {\n            let r = this.F.one;\n            const nroots = 1 << i;\n            const rootsi = new Array(nroots);\n            for (let j=0; j<nroots; j++) {\n                rootsi[j] = r;\n                r = this.F.mul(r, this.w[i]);\n            }\n            this.roots[i] = rootsi;\n        }\n    }\n\n    add(a, b) {\n        const m = Math.max(a.length, b.length);\n        const res = new Array(m);\n        for (let i=0; i<m; i++) {\n            res[i] = this.F.add(a[i] || this.F.zero, b[i] || this.F.zero);\n        }\n        return this.reduce(res);\n    }\n\n    double(a) {\n        return this.add(a,a);\n    }\n\n    sub(a, b) {\n        const m = Math.max(a.length, b.length);\n        const res = new Array(m);\n        for (let i=0; i<m; i++) {\n            res[i] = this.F.sub(a[i] || this.F.zero, b[i] || this.F.zero);\n        }\n        return this.reduce(res);\n    }\n\n    mulScalar(p, b) {\n        if (this.F.eq(b, this.F.zero)) return [];\n        if (this.F.eq(b, this.F.one)) return p;\n        const res = new Array(p.length);\n        for (let i=0; i<p.length; i++) {\n            res[i] = this.F.mul(p[i], b);\n        }\n        return res;\n    }\n\n\n\n    mul(a, b) {\n        if (a.length == 0) return [];\n        if (b.length == 0) return [];\n        if (a.length == 1) return this.mulScalar(b, a[0]);\n        if (b.length == 1) return this.mulScalar(a, b[0]);\n\n        if (b.length > a.length) {\n            [b, a] = [a, b];\n        }\n\n        if ((b.length <= 2) || (b.length < log2$2(a.length))) {\n            return this.mulNormal(a,b);\n        } else {\n            return this.mulFFT(a,b);\n        }\n    }\n\n    mulNormal(a, b) {\n        let res = [];\n        for (let i=0; i<b.length; i++) {\n            res = this.add(res, this.scaleX(this.mulScalar(a, b[i]), i) );\n        }\n        return res;\n    }\n\n    mulFFT(a,b) {\n        const longestN = Math.max(a.length, b.length);\n        const bitsResult = log2$2(longestN-1)+2;\n        this._setRoots(bitsResult);\n\n        const m = 1 << bitsResult;\n        const ea = this.extend(a,m);\n        const eb = this.extend(b,m);\n\n        const ta = __fft$1(this, ea, bitsResult, 0, 1);\n        const tb = __fft$1(this, eb, bitsResult, 0, 1);\n\n        const tres = new Array(m);\n\n        for (let i=0; i<m; i++) {\n            tres[i] = this.F.mul(ta[i], tb[i]);\n        }\n\n        const res = __fft$1(this, tres, bitsResult, 0, 1);\n\n        const twoinvm = this.F.inv( this.F.mulScalar(this.F.one, m) );\n        const resn = new Array(m);\n        for (let i=0; i<m; i++) {\n            resn[i] = this.F.mul(res[(m-i)%m], twoinvm);\n        }\n\n        return this.reduce(resn);\n    }\n\n\n\n    square(a) {\n        return this.mul(a,a);\n    }\n\n    scaleX(p, n) {\n        if (n==0) {\n            return p;\n        } else if (n>0) {\n            const z = new Array(n).fill(this.F.zero);\n            return z.concat(p);\n        } else {\n            if (-n >= p.length) return [];\n            return p.slice(-n);\n        }\n    }\n\n    eval2(p, x) {\n        let v = this.F.zero;\n        let ix = this.F.one;\n        for (let i=0; i<p.length; i++) {\n            v = this.F.add(v, this.F.mul(p[i], ix));\n            ix = this.F.mul(ix, x);\n        }\n        return v;\n    }\n\n    evaluate(p,x) {\n        const F = this.F;\n        if (p.length == 0) return F.zero;\n        const m = this._next2Power(p.length);\n        const ep = this.extend(p, m);\n\n        return _eval(ep, x, 0, 1, m);\n\n        function _eval(p, x, offset, step, n) {\n            if (n==1) return p[offset];\n            const newX = F.square(x);\n            const res= F.add(\n                _eval(p, newX, offset, step << 1, n >> 1),\n                F.mul(\n                    x,\n                    _eval(p, newX, offset+step , step << 1, n >> 1)));\n            return res;\n        }\n    }\n\n    lagrange(points) {\n        let roots = [this.F.one];\n        for (let i=0; i<points.length; i++) {\n            roots = this.mul(roots, [this.F.neg(points[i][0]), this.F.one]);\n        }\n\n        let sum = [];\n        for (let i=0; i<points.length; i++) {\n            let mpol = this.ruffini(roots, points[i][0]);\n            const factor =\n                this.F.mul(\n                    this.F.inv(this.evaluate(mpol, points[i][0])),\n                    points[i][1]);\n            mpol = this.mulScalar(mpol, factor);\n            sum = this.add(sum, mpol);\n        }\n        return sum;\n    }\n\n\n    fft(p) {\n        if (p.length <= 1) return p;\n        const bits = log2$2(p.length-1)+1;\n        this._setRoots(bits);\n\n        const m = 1 << bits;\n        const ep = this.extend(p, m);\n        const res = __fft$1(this, ep, bits, 0, 1);\n        return res;\n    }\n\n    fft2(p) {\n        if (p.length <= 1) return p;\n        const bits = log2$2(p.length-1)+1;\n        this._setRoots(bits);\n\n        const m = 1 << bits;\n        const ep = this.extend(p, m);\n        __bitReverse(ep, bits);\n        const res = __fft2(this, ep, bits);\n        return res;\n    }\n\n\n    ifft(p) {\n\n        if (p.length <= 1) return p;\n        const bits = log2$2(p.length-1)+1;\n        this._setRoots(bits);\n        const m = 1 << bits;\n        const ep = this.extend(p, m);\n        const res =  __fft$1(this, ep, bits, 0, 1);\n\n        const twoinvm = this.F.inv( this.F.mulScalar(this.F.one, m) );\n        const resn = new Array(m);\n        for (let i=0; i<m; i++) {\n            resn[i] = this.F.mul(res[(m-i)%m], twoinvm);\n        }\n\n        return resn;\n\n    }\n\n\n    ifft2(p) {\n\n        if (p.length <= 1) return p;\n        const bits = log2$2(p.length-1)+1;\n        this._setRoots(bits);\n        const m = 1 << bits;\n        const ep = this.extend(p, m);\n        __bitReverse(ep, bits);\n        const res =  __fft2(this, ep, bits);\n\n        const twoinvm = this.F.inv( this.F.mulScalar(this.F.one, m) );\n        const resn = new Array(m);\n        for (let i=0; i<m; i++) {\n            resn[i] = this.F.mul(res[(m-i)%m], twoinvm);\n        }\n\n        return resn;\n\n    }\n\n    _fft(pall, bits, offset, step) {\n\n        const n = 1 << bits;\n        if (n==1) {\n            return [ pall[offset] ];\n        }\n\n        const ndiv2 = n >> 1;\n        const p1 = this._fft(pall, bits-1, offset, step*2);\n        const p2 = this._fft(pall, bits-1, offset+step, step*2);\n\n        const out = new Array(n);\n\n        let m= this.F.one;\n        for (let i=0; i<ndiv2; i++) {\n            out[i] = this.F.add(p1[i], this.F.mul(m, p2[i]));\n            out[i+ndiv2] = this.F.sub(p1[i], this.F.mul(m, p2[i]));\n            m = this.F.mul(m, this.w[bits]);\n        }\n\n        return out;\n    }\n\n    extend(p, e) {\n        if (e == p.length) return p;\n        const z = new Array(e-p.length).fill(this.F.zero);\n\n        return p.concat(z);\n    }\n\n    reduce(p) {\n        if (p.length == 0) return p;\n        if (! this.F.eq(p[p.length-1], this.F.zero) ) return p;\n        let i=p.length-1;\n        while( i>0 && this.F.eq(p[i], this.F.zero) ) i--;\n        return p.slice(0, i+1);\n    }\n\n    eq(a, b) {\n        const pa = this.reduce(a);\n        const pb = this.reduce(b);\n\n        if (pa.length != pb.length) return false;\n        for (let i=0; i<pb.length; i++) {\n            if (!this.F.eq(pa[i], pb[i])) return false;\n        }\n\n        return true;\n    }\n\n    ruffini(p, r) {\n        const res = new Array(p.length-1);\n        res[res.length-1] = p[p.length-1];\n        for (let i = res.length-2; i>=0; i--) {\n            res[i] = this.F.add(this.F.mul(res[i+1], r), p[i+1]);\n        }\n        return res;\n    }\n\n    _next2Power(v) {\n        v--;\n        v |= v >> 1;\n        v |= v >> 2;\n        v |= v >> 4;\n        v |= v >> 8;\n        v |= v >> 16;\n        v++;\n        return v;\n    }\n\n    toString(p) {\n        const ap = this.normalize(p);\n        let S = \"\";\n        for (let i=ap.length-1; i>=0; i--) {\n            if (!this.F.eq(p[i], this.F.zero)) {\n                if (S!=\"\") S += \" + \";\n                S = S + p[i].toString(10);\n                if (i>0) {\n                    S = S + \"x\";\n                    if (i>1) {\n                        S = S + \"^\" +i;\n                    }\n                }\n            }\n        }\n        return S;\n    }\n\n    normalize(p) {\n        const res  = new Array(p.length);\n        for (let i=0; i<p.length; i++) {\n            res[i] = this.F.normalize(p[i]);\n        }\n        return res;\n    }\n\n\n    _reciprocal(p, bits) {\n        const k = 1 << bits;\n        if (k==1) {\n            return [ this.F.inv(p[0]) ];\n        }\n        const np = this.scaleX(p, -k/2);\n        const q = this._reciprocal(np, bits-1);\n        const a = this.scaleX(this.double(q), 3*k/2-2);\n        const b = this.mul( this.square(q), p);\n\n        return this.scaleX(this.sub(a,b),   -(k-2));\n    }\n\n    // divides x^m / v\n    _div2(m, v) {\n        const kbits = log2$2(v.length-1)+1;\n        const k = 1 << kbits;\n\n        const scaleV = k - v.length;\n\n        // rec = x^(k - 2) / v* x^scaleV =>\n        // rec = x^(k-2-scaleV)/ v\n        //\n        // res = x^m/v = x^(m + (2*k-2 - scaleV) - (2*k-2 - scaleV)) /v =>\n        // res = rec * x^(m - (2*k-2 - scaleV)) =>\n        // res = rec * x^(m - 2*k + 2 + scaleV)\n\n        const rec = this._reciprocal(this.scaleX(v, scaleV), kbits);\n        const res = this.scaleX(rec, m - 2*k + 2 + scaleV);\n\n        return res;\n    }\n\n    div(_u, _v) {\n        if (_u.length < _v.length) return [];\n        const kbits = log2$2(_v.length-1)+1;\n        const k = 1 << kbits;\n\n        const u = this.scaleX(_u, k-_v.length);\n        const v = this.scaleX(_v, k-_v.length);\n\n        const n = v.length-1;\n        let m = u.length-1;\n\n        const s = this._reciprocal(v, kbits);\n        let t;\n        if (m>2*n) {\n            t = this.sub(this.scaleX([this.F.one], 2*n), this.mul(s, v));\n        }\n\n        let q = [];\n        let rem = u;\n        let us, ut;\n        let finish = false;\n\n        while (!finish) {\n            us = this.mul(rem, s);\n            q = this.add(q, this.scaleX(us, -2*n));\n\n            if ( m > 2*n ) {\n                ut = this.mul(rem, t);\n                rem = this.scaleX(ut, -2*n);\n                m = rem.length-1;\n            } else {\n                finish = true;\n            }\n        }\n\n        return q;\n    }\n\n\n    // returns the ith nth-root of one\n    oneRoot(n, i) {\n        let nbits = log2$2(n-1)+1;\n        let res = this.F.one;\n        let r = i;\n\n        if(i>=n) {\n            throw new Error(\"Given 'i' should be lower than 'n'\");\n        }\n        else if (1<<nbits !== n) {\n            throw new Error(`Internal errlr: ${n} should equal ${1<<nbits}`);\n        }\n\n        while (r>0) {\n            if (r & 1 == 1) {\n                res = this.F.mul(res, this.w[nbits]);\n            }\n            r = r >> 1;\n            nbits --;\n        }\n        return res;\n    }\n\n    computeVanishingPolinomial(bits, t) {\n        const m = 1 << bits;\n        return this.F.sub(this.F.pow(t, m), this.F.one);\n    }\n\n    evaluateLagrangePolynomials(bits, t) {\n        const m= 1 << bits;\n        const tm = this.F.pow(t, m);\n        const u= new Array(m).fill(this.F.zero);\n        this._setRoots(bits);\n        const omega = this.w[bits];\n\n        if (this.F.eq(tm, this.F.one)) {\n            for (let i = 0; i < m; i++) {\n                if (this.F.eq(this.roots[bits][0],t)) { // i.e., t equals omega^i\n                    u[i] = this.F.one;\n                    return u;\n                }\n            }\n        }\n\n        const z = this.F.sub(tm, this.F.one);\n        //        let l = this.F.mul(z,  this.F.pow(this.F.twoinv, m));\n        let l = this.F.mul(z,  this.F.inv(this.F.e(m)));\n        for (let i = 0; i < m; i++) {\n            u[i] = this.F.mul(l, this.F.inv(this.F.sub(t,this.roots[bits][i])));\n            l = this.F.mul(l, omega);\n        }\n\n        return u;\n    }\n\n    log2(V) {\n        return log2$2(V);\n    }\n}\n\nfunction log2$2( V )\n{\n    return( ( ( V & 0xFFFF0000 ) !== 0 ? ( V &= 0xFFFF0000, 16 ) : 0 ) | ( ( V & 0xFF00FF00 ) !== 0 ? ( V &= 0xFF00FF00, 8 ) : 0 ) | ( ( V & 0xF0F0F0F0 ) !== 0 ? ( V &= 0xF0F0F0F0, 4 ) : 0 ) | ( ( V & 0xCCCCCCCC ) !== 0 ? ( V &= 0xCCCCCCCC, 2 ) : 0 ) | ( ( V & 0xAAAAAAAA ) !== 0 ) );\n}\n\n\nfunction __fft$1(PF, pall, bits, offset, step) {\n\n    const n = 1 << bits;\n    if (n==1) {\n        return [ pall[offset] ];\n    } else if (n==2) {\n        return [\n            PF.F.add(pall[offset], pall[offset + step]),\n            PF.F.sub(pall[offset], pall[offset + step])];\n    }\n\n    const ndiv2 = n >> 1;\n    const p1 = __fft$1(PF, pall, bits-1, offset, step*2);\n    const p2 = __fft$1(PF, pall, bits-1, offset+step, step*2);\n\n    const out = new Array(n);\n\n    for (let i=0; i<ndiv2; i++) {\n        out[i] = PF.F.add(p1[i], PF.F.mul(PF.roots[bits][i], p2[i]));\n        out[i+ndiv2] = PF.F.sub(p1[i], PF.F.mul(PF.roots[bits][i], p2[i]));\n    }\n\n    return out;\n}\n\n\nfunction __fft2(PF, pall, bits) {\n\n    const n = 1 << bits;\n    if (n==1) {\n        return [ pall[0] ];\n    }\n\n    const ndiv2 = n >> 1;\n    const p1 = __fft2(PF, pall.slice(0, ndiv2), bits-1);\n    const p2 = __fft2(PF, pall.slice(ndiv2), bits-1);\n\n    const out = new Array(n);\n\n    for (let i=0; i<ndiv2; i++) {\n        out[i] = PF.F.add(p1[i], PF.F.mul(PF.roots[bits][i], p2[i]));\n        out[i+ndiv2] = PF.F.sub(p1[i], PF.F.mul(PF.roots[bits][i], p2[i]));\n    }\n\n    return out;\n}\n\nconst _revTable$1 = [];\nfor (let i=0; i<256; i++) {\n    _revTable$1[i] = _revSlow$1(i, 8);\n}\n\nfunction _revSlow$1(idx, bits) {\n    let res =0;\n    let a = idx;\n    for (let i=0; i<bits; i++) {\n        res <<= 1;\n        res = res | (a &1);\n        a >>=1;\n    }\n    return res;\n}\n\nfunction rev(idx, bits) {\n    return (\n        _revTable$1[idx >>> 24] |\n        (_revTable$1[(idx >>> 16) & 0xFF] << 8) |\n        (_revTable$1[(idx >>> 8) & 0xFF] << 16) |\n        (_revTable$1[idx & 0xFF] << 24)\n    ) >>> (32-bits);\n}\n\nfunction __bitReverse(p, bits) {\n    for (let k=0; k<p.length; k++) {\n        const r = rev(k, bits);\n        if (r>k) {\n            const tmp= p[k];\n            p[k] = p[r];\n            p[r] = tmp;\n        }\n    }\n\n}\n\n/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\n\nfunction mulScalar(F, base, e) {\n    let res;\n\n    if (isZero$1(e)) return F.zero;\n\n    const n = naf(e);\n\n    if (n[n.length-1] == 1) {\n        res = base;\n    } else if (n[n.length-1] == -1) {\n        res = F.neg(base);\n    } else {\n        throw new Error(\"invlaud NAF\");\n    }\n\n    for (let i=n.length-2; i>=0; i--) {\n\n        res = F.double(res);\n\n        if (n[i] == 1) {\n            res = F.add(res, base);\n        } else if (n[i] == -1) {\n            res = F.sub(res, base);\n        }\n    }\n\n    return res;\n}\n\n\n/*\nexports.mulScalar = (F, base, e) =>{\n    let res = F.zero;\n    let rem = bigInt(e);\n    let exp = base;\n\n    while (! rem.eq(bigInt.zero)) {\n        if (rem.and(bigInt.one).eq(bigInt.one)) {\n            res = F.add(res, exp);\n        }\n        exp = F.double(exp);\n        rem = rem.shiftRight(1);\n    }\n\n    return res;\n};\n*/\n\n\nfunction exp(F, base, e) {\n\n    if (isZero$1(e)) return F.one;\n\n    const n = bits(e);\n\n    if (n.length==0) return F.one;\n\n    let res = base;\n\n    for (let i=n.length-2; i>=0; i--) {\n\n        res = F.square(res);\n\n        if (n[i]) {\n            res = F.mul(res, base);\n        }\n    }\n\n    return res;\n}\n\n// Check here: https://eprint.iacr.org/2012/685.pdf\n\nfunction buildSqrt (F) {\n    if ((F.m % 2) == 1) {\n        if (eq(mod(F.p, 4), 1 )) {\n            if (eq(mod(F.p, 8), 1 )) {\n                if (eq(mod(F.p, 16), 1 )) {\n                    // alg7_muller(F);\n                    alg5_tonelliShanks(F);\n                } else if (eq(mod(F.p, 16), 9 )) {\n                    alg4_kong(F);\n                } else {\n                    throw new Error(\"Field withot sqrt\");\n                }\n            } else if (eq(mod(F.p, 8), 5 )) {\n                alg3_atkin(F);\n            } else {\n                throw new Error(\"Field withot sqrt\");\n            }\n        } else if (eq(mod(F.p, 4), 3 )) {\n            alg2_shanks(F);\n        }\n    } else {\n        const pm2mod4 = mod(pow(F.p, F.m/2), 4);\n        if (pm2mod4 == 1) {\n            alg10_adj(F);\n        } else if (pm2mod4 == 3) {\n            alg9_adj(F);\n        } else {\n            alg8_complex(F);\n        }\n\n    }\n}\n\n\nfunction alg5_tonelliShanks(F) {\n    F.sqrt_q = pow(F.p, F.m);\n\n    F.sqrt_s = 0;\n    F.sqrt_t = sub(F.sqrt_q, 1);\n\n    while (!isOdd$5(F.sqrt_t)) {\n        F.sqrt_s = F.sqrt_s + 1;\n        F.sqrt_t = div(F.sqrt_t, 2);\n    }\n\n    let c0 = F.one;\n\n    while (F.eq(c0, F.one)) {\n        const c = F.random();\n        F.sqrt_z = F.pow(c, F.sqrt_t);\n        c0 = F.pow(F.sqrt_z, 2 ** (F.sqrt_s-1) );\n    }\n\n    F.sqrt_tm1d2 = div(sub(F.sqrt_t, 1),2);\n\n    F.sqrt = function(a) {\n        const F=this;\n        if (F.isZero(a)) return F.zero;\n        let w = F.pow(a, F.sqrt_tm1d2);\n        const a0 = F.pow( F.mul(F.square(w), a), 2 ** (F.sqrt_s-1) );\n        if (F.eq(a0, F.negone)) return null;\n\n        let v = F.sqrt_s;\n        let x = F.mul(a, w);\n        let b = F.mul(x, w);\n        let z = F.sqrt_z;\n        while (!F.eq(b, F.one)) {\n            let b2k = F.square(b);\n            let k=1;\n            while (!F.eq(b2k, F.one)) {\n                b2k = F.square(b2k);\n                k++;\n            }\n\n            w = z;\n            for (let i=0; i<v-k-1; i++) {\n                w = F.square(w);\n            }\n            z = F.square(w);\n            b = F.mul(b, z);\n            x = F.mul(x, w);\n            v = k;\n        }\n        return F.geq(x, F.zero) ? x : F.neg(x);\n    };\n}\n\nfunction alg4_kong(F) {\n    F.sqrt = function() {\n        throw new Error(\"Sqrt alg 4 not implemented\");\n    };\n}\n\nfunction alg3_atkin(F) {\n    F.sqrt = function() {\n        throw new Error(\"Sqrt alg 3 not implemented\");\n    };\n}\n\nfunction alg2_shanks(F) {\n\n    F.sqrt_q = pow(F.p, F.m);\n    F.sqrt_e1 = div( sub(F.sqrt_q, 3) , 4);\n\n    F.sqrt = function(a) {\n        if (this.isZero(a)) return this.zero;\n\n        // Test that have solution\n        const a1 = this.pow(a, this.sqrt_e1);\n\n        const a0 = this.mul(this.square(a1), a);\n\n        if ( this.eq(a0, this.negone) ) return null;\n\n        const x = this.mul(a1, a);\n\n        return F.geq(x, F.zero) ? x : F.neg(x);\n    };\n}\n\nfunction alg10_adj(F) {\n    F.sqrt = function() {\n        throw new Error(\"Sqrt alg 10 not implemented\");\n    };\n}\n\nfunction alg9_adj(F) {\n    F.sqrt_q = pow(F.p, F.m/2);\n    F.sqrt_e34 = div( sub(F.sqrt_q, 3) , 4);\n    F.sqrt_e12 = div( sub(F.sqrt_q, 1) , 2);\n\n    F.frobenius = function(n, x) {\n        if ((n%2) == 1) {\n            return F.conjugate(x);\n        } else {\n            return x;\n        }\n    };\n\n    F.sqrt = function(a) {\n        const F = this;\n        const a1 = F.pow(a, F.sqrt_e34);\n        const alfa = F.mul(F.square(a1), a);\n        const a0 = F.mul(F.frobenius(1, alfa), alfa);\n        if (F.eq(a0, F.negone)) return null;\n        const x0 = F.mul(a1, a);\n        let x;\n        if (F.eq(alfa, F.negone)) {\n            x = F.mul(x0, [F.F.zero, F.F.one]);\n        } else {\n            const b = F.pow(F.add(F.one, alfa), F.sqrt_e12);\n            x = F.mul(b, x0);\n        }\n        return F.geq(x, F.zero) ? x : F.neg(x);\n    };\n}\n\n\nfunction alg8_complex(F) {\n    F.sqrt = function() {\n        throw new Error(\"Sqrt alg 8 not implemented\");\n    };\n}\n\nfunction quarterRound(st, a, b, c, d) {\n\n    st[a] = (st[a] + st[b]) >>> 0;\n    st[d] = (st[d] ^ st[a]) >>> 0;\n    st[d] = ((st[d] << 16) | ((st[d]>>>16) & 0xFFFF)) >>> 0;\n\n    st[c] = (st[c] + st[d]) >>> 0;\n    st[b] = (st[b] ^ st[c]) >>> 0;\n    st[b] = ((st[b] << 12) | ((st[b]>>>20) & 0xFFF)) >>> 0;\n\n    st[a] = (st[a] + st[b]) >>> 0;\n    st[d] = (st[d] ^ st[a]) >>> 0;\n    st[d] = ((st[d] << 8) | ((st[d]>>>24) & 0xFF)) >>> 0;\n\n    st[c] = (st[c] + st[d]) >>> 0;\n    st[b] = (st[b] ^ st[c]) >>> 0;\n    st[b] = ((st[b] << 7) | ((st[b]>>>25) & 0x7F)) >>> 0;\n}\n\nfunction doubleRound(st) {\n    quarterRound(st, 0, 4, 8,12);\n    quarterRound(st, 1, 5, 9,13);\n    quarterRound(st, 2, 6,10,14);\n    quarterRound(st, 3, 7,11,15);\n\n    quarterRound(st, 0, 5,10,15);\n    quarterRound(st, 1, 6,11,12);\n    quarterRound(st, 2, 7, 8,13);\n    quarterRound(st, 3, 4, 9,14);\n}\n\nclass ChaCha {\n\n    constructor(seed) {\n        seed = seed || [0,0,0,0,0,0,0,0];\n        this.state = [\n            0x61707865,\n            0x3320646E,\n            0x79622D32,\n            0x6B206574,\n            seed[0],\n            seed[1],\n            seed[2],\n            seed[3],\n            seed[4],\n            seed[5],\n            seed[6],\n            seed[7],\n            0,\n            0,\n            0,\n            0\n        ];\n        this.idx = 16;\n        this.buff = new Array(16);\n    }\n\n    nextU32() {\n        if (this.idx == 16) this.update();\n        return this.buff[this.idx++];\n    }\n\n    nextU64() {\n        return add(mul(this.nextU32(), 0x100000000), this.nextU32());\n    }\n\n    nextBool() {\n        return (this.nextU32() & 1) == 1;\n    }\n\n    update() {\n        // Copy the state\n        for (let i=0; i<16; i++) this.buff[i] = this.state[i];\n\n        // Apply the rounds\n        for (let i=0; i<10; i++) doubleRound(this.buff);\n\n        // Add to the initial\n        for (let i=0; i<16; i++) this.buff[i] = (this.buff[i] + this.state[i]) >>> 0;\n\n        this.idx = 0;\n\n        this.state[12] = (this.state[12] + 1) >>> 0;\n        if (this.state[12] != 0) return;\n        this.state[13] = (this.state[13] + 1) >>> 0;\n        if (this.state[13] != 0) return;\n        this.state[14] = (this.state[14] + 1) >>> 0;\n        if (this.state[14] != 0) return;\n        this.state[15] = (this.state[15] + 1) >>> 0;\n    }\n}\n\nfunction getRandomBytes(n) {\n    let array = new Uint8Array(n);\n    { // Browser\n        if (typeof globalThis.crypto !== \"undefined\") { // Supported\n            globalThis.crypto.getRandomValues(array);\n        } else { // fallback\n            for (let i=0; i<n; i++) {\n                array[i] = (Math.random()*4294967296)>>>0;\n            }\n        }\n    }\n    return array;\n}\n\nfunction getRandomSeed() {\n    const arr = getRandomBytes(32);\n    const arrV = new Uint32Array(arr.buffer);\n    const seed = [];\n    for (let i=0; i<8; i++) {\n        seed.push(arrV[i]);\n    }\n    return seed;\n}\n\nlet threadRng = null;\n\nfunction getThreadRng() {\n    if (threadRng) return threadRng;\n    threadRng = new ChaCha(getRandomSeed());\n    return threadRng;\n}\n\n/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n/*\n    This library does operations on polynomials with coefficients in a field F.\n\n    A polynomial P(x) = p0 + p1 * x + p2 * x^2 + ... + pn * x^n  is represented\n    by the array [ p0, p1, p2, ... , pn ].\n */\n\nclass FFT {\n    constructor (G, F, opMulGF) {\n        this.F = F;\n        this.G = G;\n        this.opMulGF = opMulGF;\n\n        let rem = F.sqrt_t || F.t;\n        let s = F.sqrt_s || F.s;\n\n        let nqr = F.one;\n        while (F.eq(F.pow(nqr, F.half), F.one)) nqr = F.add(nqr, F.one);\n\n        this.w = new Array(s+1);\n        this.wi = new Array(s+1);\n        this.w[s] = this.F.pow(nqr, rem);\n        this.wi[s] = this.F.inv(this.w[s]);\n\n        let n=s-1;\n        while (n>=0) {\n            this.w[n] = this.F.square(this.w[n+1]);\n            this.wi[n] = this.F.square(this.wi[n+1]);\n            n--;\n        }\n\n\n        this.roots = [];\n        /*\n        for (let i=0; i<16; i++) {\n            let r = this.F.one;\n            n = 1 << i;\n            const rootsi = new Array(n);\n            for (let j=0; j<n; j++) {\n                rootsi[j] = r;\n                r = this.F.mul(r, this.w[i]);\n            }\n\n            this.roots.push(rootsi);\n        }\n        */\n        this._setRoots(Math.min(s, 15));\n    }\n\n    _setRoots(n) {\n        for (let i=n; (i>=0) && (!this.roots[i]); i--) {\n            let r = this.F.one;\n            const nroots = 1 << i;\n            const rootsi = new Array(nroots);\n            for (let j=0; j<nroots; j++) {\n                rootsi[j] = r;\n                r = this.F.mul(r, this.w[i]);\n            }\n\n            this.roots[i] = rootsi;\n        }\n    }\n\n    fft(p) {\n        if (p.length <= 1) return p;\n        const bits = log2$1(p.length-1)+1;\n        this._setRoots(bits);\n\n        const m = 1 << bits;\n        if (p.length != m) {\n            throw new Error(\"Size must be multiple of 2\");\n        }\n        const res = __fft(this, p, bits, 0, 1);\n        return res;\n    }\n\n    ifft(p) {\n\n        if (p.length <= 1) return p;\n        const bits = log2$1(p.length-1)+1;\n        this._setRoots(bits);\n        const m = 1 << bits;\n        if (p.length != m) {\n            throw new Error(\"Size must be multiple of 2\");\n        }\n        const res =  __fft(this, p, bits, 0, 1);\n        const twoinvm = this.F.inv( this.F.mulScalar(this.F.one, m) );\n        const resn = new Array(m);\n        for (let i=0; i<m; i++) {\n            resn[i] = this.opMulGF(res[(m-i)%m], twoinvm);\n        }\n\n        return resn;\n    }\n\n\n}\n\nfunction log2$1( V )\n{\n    return( ( ( V & 0xFFFF0000 ) !== 0 ? ( V &= 0xFFFF0000, 16 ) : 0 ) | ( ( V & 0xFF00FF00 ) !== 0 ? ( V &= 0xFF00FF00, 8 ) : 0 ) | ( ( V & 0xF0F0F0F0 ) !== 0 ? ( V &= 0xF0F0F0F0, 4 ) : 0 ) | ( ( V & 0xCCCCCCCC ) !== 0 ? ( V &= 0xCCCCCCCC, 2 ) : 0 ) | ( ( V & 0xAAAAAAAA ) !== 0 ) );\n}\n\n\nfunction __fft(PF, pall, bits, offset, step) {\n\n    const n = 1 << bits;\n    if (n==1) {\n        return [ pall[offset] ];\n    } else if (n==2) {\n        return [\n            PF.G.add(pall[offset], pall[offset + step]),\n            PF.G.sub(pall[offset], pall[offset + step])];\n    }\n\n    const ndiv2 = n >> 1;\n    const p1 = __fft(PF, pall, bits-1, offset, step*2);\n    const p2 = __fft(PF, pall, bits-1, offset+step, step*2);\n\n    const out = new Array(n);\n\n    for (let i=0; i<ndiv2; i++) {\n        out[i] = PF.G.add(p1[i], PF.opMulGF(p2[i], PF.roots[bits][i]));\n        out[i+ndiv2] = PF.G.sub(p1[i], PF.opMulGF(p2[i], PF.roots[bits][i]));\n    }\n\n    return out;\n}\n\n/* global BigInt */\n\nclass ZqField {\n    constructor(p) {\n        this.type=\"F1\";\n        this.one = BigInt(1);\n        this.zero = BigInt(0);\n        this.p = BigInt(p);\n        this.m = 1;\n        this.negone = this.p-this.one;\n        this.two = BigInt(2);\n        this.half = this.p >> this.one;\n        this.bitLength = bitLength$6(this.p);\n        this.mask = (this.one << BigInt(this.bitLength)) - this.one;\n\n        this.n64 = Math.floor((this.bitLength - 1) / 64)+1;\n        this.n32 = this.n64*2;\n        this.n8 = this.n64*8;\n        this.R = this.e(this.one << BigInt(this.n64*64));\n        this.Ri = this.inv(this.R);\n\n        const e = this.negone >> this.one;\n        this.nqr = this.two;\n        let r = this.pow(this.nqr, e);\n        while (!this.eq(r, this.negone)) {\n            this.nqr = this.nqr + this.one;\n            r = this.pow(this.nqr, e);\n        }\n\n\n        this.s = 0;\n        this.t = this.negone;\n\n        while ((this.t & this.one) == this.zero) {\n            this.s = this.s + 1;\n            this.t = this.t >> this.one;\n        }\n\n        this.nqr_to_t = this.pow(this.nqr, this.t);\n\n        buildSqrt(this);\n\n        this.FFT = new FFT(this, this, this.mul.bind(this));\n\n        this.fft = this.FFT.fft.bind(this.FFT);\n        this.ifft = this.FFT.ifft.bind(this.FFT);\n        this.w = this.FFT.w;\n        this.wi = this.FFT.wi; \n    \n        this.shift = this.square(this.nqr);\n        this.k = this.exp(this.nqr, 2**this.s);\n    }\n\n    e(a,b) {\n        let res;\n        if (!b) {\n            res = BigInt(a);\n        } else if (b==16) {\n            res = BigInt(\"0x\"+a);\n        }\n        if (res < 0) {\n            let nres = -res;\n            if (nres >= this.p) nres = nres % this.p;\n            return this.p - nres;\n        } else {\n            return (res>= this.p) ? res%this.p : res;\n        }\n\n    }\n\n    add(a, b) {\n        const res = a + b;\n        return res >= this.p ? res-this.p : res;\n    }\n\n    sub(a, b) {\n        return (a >= b) ? a-b : this.p-b+a;\n    }\n\n    neg(a) {\n        return a ? this.p-a : a;\n    }\n\n    mul(a, b) {\n        return (a*b)%this.p;\n    }\n\n    mulScalar(base, s) {\n        return (base * this.e(s)) % this.p;\n    }\n\n    square(a) {\n        return (a*a) % this.p;\n    }\n\n    eq(a, b) {\n        return a==b;\n    }\n\n    neq(a, b) {\n        return a!=b;\n    }\n\n    lt(a, b) {\n        const aa = (a > this.half) ? a - this.p : a;\n        const bb = (b > this.half) ? b - this.p : b;\n        return aa < bb;\n    }\n\n    gt(a, b) {\n        const aa = (a > this.half) ? a - this.p : a;\n        const bb = (b > this.half) ? b - this.p : b;\n        return aa > bb;\n    }\n\n    leq(a, b) {\n        const aa = (a > this.half) ? a - this.p : a;\n        const bb = (b > this.half) ? b - this.p : b;\n        return aa <= bb;\n    }\n\n    geq(a, b) {\n        const aa = (a > this.half) ? a - this.p : a;\n        const bb = (b > this.half) ? b - this.p : b;\n        return aa >= bb;\n    }\n\n    div(a, b) {\n        return this.mul(a, this.inv(b));\n    }\n\n    idiv(a, b) {\n        if (!b) throw new Error(\"Division by zero\");\n        return a / b;\n    }\n\n    inv(a) {\n        if (!a) throw new Error(\"Division by zero\");\n\n        let t = this.zero;\n        let r = this.p;\n        let newt = this.one;\n        let newr = a % this.p;\n        while (newr) {\n            let q = r/newr;\n            [t, newt] = [newt, t-q*newt];\n            [r, newr] = [newr, r-q*newr];\n        }\n        if (t<this.zero) t += this.p;\n        return t;\n    }\n\n    mod(a, b) {\n        return a % b;\n    }\n\n    pow(b, e) {\n        return exp(this, b, e);\n    }\n\n    exp(b, e) {\n        return exp(this, b, e);\n    }\n\n    band(a, b) {\n        const res =  ((a & b) & this.mask);\n        return res >= this.p ? res-this.p : res;\n    }\n\n    bor(a, b) {\n        const res =  ((a | b) & this.mask);\n        return res >= this.p ? res-this.p : res;\n    }\n\n    bxor(a, b) {\n        const res =  ((a ^ b) & this.mask);\n        return res >= this.p ? res-this.p : res;\n    }\n\n    bnot(a) {\n        const res = a ^ this.mask;\n        return res >= this.p ? res-this.p : res;\n    }\n\n    shl(a, b) {\n        if (Number(b) < this.bitLength) {\n            const res = (a << b) & this.mask;\n            return res >= this.p ? res-this.p : res;\n        } else {\n            const nb = this.p - b;\n            if (Number(nb) < this.bitLength) {\n                return a >> nb;\n            } else {\n                return this.zero;\n            }\n        }\n    }\n\n    shr(a, b) {\n        if (Number(b) < this.bitLength) {\n            return a >> b;\n        } else {\n            const nb = this.p - b;\n            if (Number(nb) < this.bitLength) {\n                const res = (a << nb) & this.mask;\n                return res >= this.p ? res-this.p : res;\n            } else {\n                return 0;\n            }\n        }\n    }\n\n    land(a, b) {\n        return (a && b) ? this.one : this.zero;\n    }\n\n    lor(a, b) {\n        return (a || b) ? this.one : this.zero;\n    }\n\n    lnot(a) {\n        return (a) ? this.zero : this.one;\n    }\n\n    sqrt_old(n) {\n\n        if (n == this.zero) return this.zero;\n\n        // Test that have solution\n        const res = this.pow(n, this.negone >> this.one);\n        if ( res != this.one ) return null;\n\n        let m = this.s;\n        let c = this.nqr_to_t;\n        let t = this.pow(n, this.t);\n        let r = this.pow(n, this.add(this.t, this.one) >> this.one );\n\n        while ( t != this.one ) {\n            let sq = this.square(t);\n            let i = 1;\n            while (sq != this.one ) {\n                i++;\n                sq = this.square(sq);\n            }\n\n            // b = c ^ m-i-1\n            let b = c;\n            for (let j=0; j< m-i-1; j ++) b = this.square(b);\n\n            m = i;\n            c = this.square(b);\n            t = this.mul(t, c);\n            r = this.mul(r, b);\n        }\n\n        if (r > (this.p >> this.one)) {\n            r = this.neg(r);\n        }\n\n        return r;\n    }\n\n    normalize(a, b) {\n        a = BigInt(a,b);\n        if (a < 0) {\n            let na = -a;\n            if (na >= this.p) na = na % this.p;\n            return this.p - na;\n        } else {\n            return (a>= this.p) ? a%this.p : a;\n        }\n    }\n\n    random() {\n        const nBytes = (this.bitLength*2 / 8);\n        let res =this.zero;\n        for (let i=0; i<nBytes; i++) {\n            res = (res << BigInt(8)) + BigInt(getRandomBytes(1)[0]);\n        }\n        return res % this.p;\n    }\n\n    toString(a, base) {\n        base = base || 10;\n        let vs;\n        if ((a > this.half)&&(base == 10)) {\n            const v = this.p-a;\n            vs = \"-\"+v.toString(base);\n        } else {\n            vs = a.toString(base);\n        }\n        return vs;\n    }\n\n    isZero(a) {\n        return a == this.zero;\n    }\n\n    fromRng(rng) {\n        let v;\n        do {\n            v=this.zero;\n            for (let i=0; i<this.n64; i++) {\n                v += rng.nextU64() << BigInt(64 *i);\n            }\n            v &= this.mask;\n        } while (v >= this.p);\n        v = (v * this.Ri) % this.p;   // Convert from montgomery\n        return v;\n    }\n\n    fft(a) {\n        return this.FFT.fft(a);\n    }\n\n    ifft(a) {\n        return this.FFT.ifft(a);\n    }\n\n    // Returns a buffer with Little Endian Representation\n    toRprLE(buff, o, e) {\n        toRprLE(buff, o, e, this.n64*8);\n    }\n\n    // Returns a buffer with Big Endian Representation\n    toRprBE(buff, o, e) {\n        toRprBE(buff, o, e, this.n64*8);\n    }\n\n    // Returns a buffer with Big Endian Montgomery Representation\n    toRprBEM(buff, o, e) {\n        return this.toRprBE(buff, o, this.mul(this.R, e));\n    }\n\n    toRprLEM(buff, o, e) {\n        return this.toRprLE(buff, o, this.mul(this.R, e));\n    }\n\n\n    // Pases a buffer with Little Endian Representation\n    fromRprLE(buff, o) {\n        return fromRprLE(buff, o, this.n8);\n    }\n\n    // Pases a buffer with Big Endian Representation\n    fromRprBE(buff, o) {\n        return fromRprBE(buff, o, this.n8);\n    }\n\n    fromRprLEM(buff, o) {\n        return this.mul(this.fromRprLE(buff, o), this.Ri);\n    }\n\n    fromRprBEM(buff, o) {\n        return this.mul(this.fromRprBE(buff, o), this.Ri);\n    }\n\n    toObject(a) {\n        return a;\n    }\n}\n\n/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\nclass F2Field {\n    constructor(F, nonResidue) {\n        this.type=\"F2\";\n        this.F = F;\n        this.zero = [this.F.zero, this.F.zero];\n        this.one = [this.F.one, this.F.zero];\n        this.negone = this.neg(this.one);\n        this.nonResidue = nonResidue;\n        this.m = F.m*2;\n        this.p = F.p;\n        this.n64 = F.n64*2;\n        this.n32 = this.n64*2;\n        this.n8 = this.n64*8;\n\n        buildSqrt(this);\n    }\n\n    _mulByNonResidue(a) {\n        return this.F.mul(this.nonResidue, a);\n    }\n\n    copy(a) {\n        return [this.F.copy(a[0]), this.F.copy(a[1])];\n    }\n\n    add(a, b) {\n        return [\n            this.F.add(a[0], b[0]),\n            this.F.add(a[1], b[1])\n        ];\n    }\n\n    double(a) {\n        return this.add(a,a);\n    }\n\n    sub(a, b) {\n        return [\n            this.F.sub(a[0], b[0]),\n            this.F.sub(a[1], b[1])\n        ];\n    }\n\n    neg(a) {\n        return this.sub(this.zero, a);\n    }\n\n    conjugate(a) {\n        return [\n            a[0],\n            this.F.neg(a[1])\n        ];\n    }\n\n    mul(a, b) {\n        const aA = this.F.mul(a[0] , b[0]);\n        const bB = this.F.mul(a[1] , b[1]);\n\n        return [\n            this.F.add( aA , this._mulByNonResidue(bB)),\n            this.F.sub(\n                this.F.mul(\n                    this.F.add(a[0], a[1]),\n                    this.F.add(b[0], b[1])),\n                this.F.add(aA, bB))];\n    }\n\n    inv(a) {\n        const t0 = this.F.square(a[0]);\n        const t1 = this.F.square(a[1]);\n        const t2 = this.F.sub(t0, this._mulByNonResidue(t1));\n        const t3 = this.F.inv(t2);\n        return [\n            this.F.mul(a[0], t3),\n            this.F.neg(this.F.mul( a[1], t3)) ];\n    }\n\n    div(a, b) {\n        return this.mul(a, this.inv(b));\n    }\n\n    square(a) {\n        const ab = this.F.mul(a[0] , a[1]);\n\n        /*\n        [\n            (a + b) * (a + non_residue * b) - ab - non_residue * ab,\n            ab + ab\n        ];\n        */\n\n        return [\n            this.F.sub(\n                this.F.mul(\n                    this.F.add(a[0], a[1]) ,\n                    this.F.add(\n                        a[0] ,\n                        this._mulByNonResidue(a[1]))),\n                this.F.add(\n                    ab,\n                    this._mulByNonResidue(ab))),\n            this.F.add(ab, ab)\n        ];\n    }\n\n    isZero(a) {\n        return this.F.isZero(a[0]) && this.F.isZero(a[1]);\n    }\n\n    eq(a, b) {\n        return this.F.eq(a[0], b[0]) && this.F.eq(a[1], b[1]);\n    }\n\n    mulScalar(base, e) {\n        return mulScalar(this, base, e);\n    }\n\n    pow(base, e) {\n        return exp(this, base, e);\n    }\n\n    exp(base, e) {\n        return exp(this, base, e);\n    }\n\n    toString(a) {\n        return `[ ${this.F.toString(a[0])} , ${this.F.toString(a[1])} ]`;\n    }\n\n    fromRng(rng) {\n        const c0 = this.F.fromRng(rng);\n        const c1 = this.F.fromRng(rng);\n        return [c0, c1];\n    }\n\n    gt(a, b) {\n        if (this.F.gt(a[0], b[0])) return true;\n        if (this.F.gt(b[0], a[0])) return false;\n        if (this.F.gt(a[1], b[1])) return true;\n        return false;\n    }\n\n    geq(a, b) {\n        return this.gt(a, b) || this.eq(a, b);\n    }\n\n    lt(a, b) {\n        return !this.geq(a,b);\n    }\n\n    leq(a, b) {\n        return !this.gt(a,b);\n    }\n\n    neq(a, b) {\n        return !this.eq(a,b);\n    }\n\n    random() {\n        return [this.F.random(), this.F.random()];\n    }\n\n\n    toRprLE(buff, o, e) {\n        this.F.toRprLE(buff, o, e[0]);\n        this.F.toRprLE(buff, o+this.F.n8, e[1]);\n    }\n\n    toRprBE(buff, o, e) {\n        this.F.toRprBE(buff, o, e[1]);\n        this.F.toRprBE(buff, o+this.F.n8, e[0]);\n    }\n\n    toRprLEM(buff, o, e) {\n        this.F.toRprLEM(buff, o, e[0]);\n        this.F.toRprLEM(buff, o+this.F.n8, e[1]);\n    }\n\n\n    toRprBEM(buff, o, e) {\n        this.F.toRprBEM(buff, o, e[1]);\n        this.F.toRprBEM(buff, o+this.F.n8, e[0]);\n    }\n\n    fromRprLE(buff, o) {\n        o = o || 0;\n        const c0 = this.F.fromRprLE(buff, o);\n        const c1 = this.F.fromRprLE(buff, o+this.F.n8);\n        return [c0, c1];\n    }\n\n    fromRprBE(buff, o) {\n        o = o || 0;\n        const c1 = this.F.fromRprBE(buff, o);\n        const c0 = this.F.fromRprBE(buff, o+this.F.n8);\n        return [c0, c1];\n    }\n\n    fromRprLEM(buff, o) {\n        o = o || 0;\n        const c0 = this.F.fromRprLEM(buff, o);\n        const c1 = this.F.fromRprLEM(buff, o+this.F.n8);\n        return [c0, c1];\n    }\n\n    fromRprBEM(buff, o) {\n        o = o || 0;\n        const c1 = this.F.fromRprBEM(buff, o);\n        const c0 = this.F.fromRprBEM(buff, o+this.F.n8);\n        return [c0, c1];\n    }\n\n    toObject(a) {\n        return a;\n    }\n\n}\n\n/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\nclass F3Field {\n    constructor(F, nonResidue) {\n        this.type=\"F3\";\n        this.F = F;\n        this.zero = [this.F.zero, this.F.zero, this.F.zero];\n        this.one = [this.F.one, this.F.zero, this.F.zero];\n        this.negone = this.neg(this.one);\n        this.nonResidue = nonResidue;\n        this.m = F.m*3;\n        this.p = F.p;\n        this.n64 = F.n64*3;\n        this.n32 = this.n64*2;\n        this.n8 = this.n64*8;\n    }\n\n    _mulByNonResidue(a) {\n        return this.F.mul(this.nonResidue, a);\n    }\n\n    copy(a) {\n        return [this.F.copy(a[0]), this.F.copy(a[1]), this.F.copy(a[2])];\n    }\n\n    add(a, b) {\n        return [\n            this.F.add(a[0], b[0]),\n            this.F.add(a[1], b[1]),\n            this.F.add(a[2], b[2])\n        ];\n    }\n\n    double(a) {\n        return this.add(a,a);\n    }\n\n    sub(a, b) {\n        return [\n            this.F.sub(a[0], b[0]),\n            this.F.sub(a[1], b[1]),\n            this.F.sub(a[2], b[2])\n        ];\n    }\n\n    neg(a) {\n        return this.sub(this.zero, a);\n    }\n\n    mul(a, b) {\n\n        const aA = this.F.mul(a[0] , b[0]);\n        const bB = this.F.mul(a[1] , b[1]);\n        const cC = this.F.mul(a[2] , b[2]);\n\n        return [\n            this.F.add(\n                aA,\n                this._mulByNonResidue(\n                    this.F.sub(\n                        this.F.mul(\n                            this.F.add(a[1], a[2]),\n                            this.F.add(b[1], b[2])),\n                        this.F.add(bB, cC)))),    // aA + non_residue*((b+c)*(B+C)-bB-cC),\n\n            this.F.add(\n                this.F.sub(\n                    this.F.mul(\n                        this.F.add(a[0], a[1]),\n                        this.F.add(b[0], b[1])),\n                    this.F.add(aA, bB)),\n                this._mulByNonResidue( cC)),   // (a+b)*(A+B)-aA-bB+non_residue*cC\n\n            this.F.add(\n                this.F.sub(\n                    this.F.mul(\n                        this.F.add(a[0], a[2]),\n                        this.F.add(b[0], b[2])),\n                    this.F.add(aA, cC)),\n                bB)];                           // (a+c)*(A+C)-aA+bB-cC)\n    }\n\n    inv(a) {\n        const t0 = this.F.square(a[0]);             // t0 = a^2 ;\n        const t1 = this.F.square(a[1]);             // t1 = b^2 ;\n        const t2 = this.F.square(a[2]);             // t2 = c^2;\n        const t3 = this.F.mul(a[0],a[1]);           // t3 = ab\n        const t4 = this.F.mul(a[0],a[2]);           // t4 = ac\n        const t5 = this.F.mul(a[1],a[2]);           // t5 = bc;\n        // c0 = t0 - non_residue * t5;\n        const c0 = this.F.sub(t0, this._mulByNonResidue(t5));\n        // c1 = non_residue * t2 - t3;\n        const c1 = this.F.sub(this._mulByNonResidue(t2), t3);\n        const c2 = this.F.sub(t1, t4);              // c2 = t1-t4\n\n        // t6 = (a * c0 + non_residue * (c * c1 + b * c2)).inv();\n        const t6 =\n            this.F.inv(\n                this.F.add(\n                    this.F.mul(a[0], c0),\n                    this._mulByNonResidue(\n                        this.F.add(\n                            this.F.mul(a[2], c1),\n                            this.F.mul(a[1], c2)))));\n\n        return [\n            this.F.mul(t6, c0),         // t6*c0\n            this.F.mul(t6, c1),         // t6*c1\n            this.F.mul(t6, c2)];        // t6*c2\n    }\n\n    div(a, b) {\n        return this.mul(a, this.inv(b));\n    }\n\n    square(a) {\n        const s0 = this.F.square(a[0]);                   // s0 = a^2\n        const ab = this.F.mul(a[0], a[1]);                // ab = a*b\n        const s1 = this.F.add(ab, ab);                    // s1 = 2ab;\n        const s2 = this.F.square(\n            this.F.add(this.F.sub(a[0],a[1]), a[2]));     // s2 = (a - b + c)^2;\n        const bc = this.F.mul(a[1],a[2]);                 // bc = b*c\n        const s3 = this.F.add(bc, bc);                    // s3 = 2*bc\n        const s4 = this.F.square(a[2]);                   // s4 = c^2\n\n\n        return [\n            this.F.add(\n                s0,\n                this._mulByNonResidue(s3)),           // s0 + non_residue * s3,\n            this.F.add(\n                s1,\n                this._mulByNonResidue(s4)),           // s1 + non_residue * s4,\n            this.F.sub(\n                this.F.add( this.F.add(s1, s2) , s3 ),\n                this.F.add(s0, s4))];                      // s1 + s2 + s3 - s0 - s4\n    }\n\n    isZero(a) {\n        return this.F.isZero(a[0]) && this.F.isZero(a[1]) && this.F.isZero(a[2]);\n    }\n\n    eq(a, b) {\n        return this.F.eq(a[0], b[0]) && this.F.eq(a[1], b[1]) && this.F.eq(a[2], b[2]);\n    }\n\n    affine(a) {\n        return [this.F.affine(a[0]), this.F.affine(a[1]), this.F.affine(a[2])];\n    }\n\n    mulScalar(base, e) {\n        return mulScalar(this, base, e);\n    }\n\n    pow(base, e) {\n        return exp(this, base, e);\n    }\n\n    exp(base, e) {\n        return exp(this, base, e);\n    }\n\n    toString(a) {\n        return `[ ${this.F.toString(a[0])} , ${this.F.toString(a[1])}, ${this.F.toString(a[2])} ]`;\n    }\n\n    fromRng(rng) {\n        const c0 = this.F.fromRng(rng);\n        const c1 = this.F.fromRng(rng);\n        const c2 = this.F.fromRng(rng);\n        return [c0, c1, c2];\n    }\n\n    gt(a, b) {\n        if (this.F.gt(a[0], b[0])) return true;\n        if (this.F.gt(b[0], a[0])) return false;\n        if (this.F.gt(a[1], b[1])) return true;\n        if (this.F.gt(b[1], a[1])) return false;\n        if (this.F.gt(a[2], b[2])) return true;\n        return false;\n    }\n\n\n    geq(a, b) {\n        return this.gt(a, b) || this.eq(a, b);\n    }\n\n    lt(a, b) {\n        return !this.geq(a,b);\n    }\n\n    leq(a, b) {\n        return !this.gt(a,b);\n    }\n\n    neq(a, b) {\n        return !this.eq(a,b);\n    }\n\n    random() {\n        return [this.F.random(), this.F.random(), this.F.random()];\n    }\n\n\n    toRprLE(buff, o, e) {\n        this.F.toRprLE(buff, o, e[0]);\n        this.F.toRprLE(buff, o+this.F.n8, e[1]);\n        this.F.toRprLE(buff, o+this.F.n8*2, e[2]);\n    }\n\n    toRprBE(buff, o, e) {\n        this.F.toRprBE(buff, o, e[2]);\n        this.F.toRprBE(buff, o+this.F.n8, e[1]);\n        this.F.toRprBE(buff, o+this.F.n8*2, e[0]);\n    }\n\n    toRprLEM(buff, o, e) {\n        this.F.toRprLEM(buff, o, e[0]);\n        this.F.toRprLEM(buff, o+this.F.n8, e[1]);\n        this.F.toRprLEM(buff, o+this.F.n8*2, e[2]);\n    }\n\n\n    toRprBEM(buff, o, e) {\n        this.F.toRprBEM(buff, o, e[2]);\n        this.F.toRprBEM(buff, o+this.F.n8, e[1]);\n        this.F.toRprBEM(buff, o+this.F.n8*2, e[0]);\n    }\n\n    fromRprLE(buff, o) {\n        o = o || 0;\n        const c0 = this.F.fromRprLE(buff, o);\n        const c1 = this.F.fromRprLE(buff, o+this.n8);\n        const c2 = this.F.fromRprLE(buff, o+this.n8*2);\n        return [c0, c1, c2];\n    }\n\n    fromRprBE(buff, o) {\n        o = o || 0;\n        const c2 = this.F.fromRprBE(buff, o);\n        const c1 = this.F.fromRprBE(buff, o+this.n8);\n        const c0 = this.F.fromRprBE(buff, o+this.n8*2);\n        return [c0, c1, c2];\n    }\n\n    fromRprLEM(buff, o) {\n        o = o || 0;\n        const c0 = this.F.fromRprLEM(buff, o);\n        const c1 = this.F.fromRprLEM(buff, o+this.n8);\n        const c2 = this.F.fromRprLEM(buff, o+this.n8*2);\n        return [c0, c1, c2];\n    }\n\n    fromRprBEM(buff, o) {\n        o = o || 0;\n        const c2 = this.F.fromRprBEM(buff, o);\n        const c1 = this.F.fromRprBEM(buff, o+this.n8);\n        const c0 = this.F.fromRprBEM(buff, o+this.n8*2);\n        return [c0, c1, c2];\n    }\n\n    toObject(a) {\n        return a;\n    }\n}\n\n/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\n\nfunction isGreatest(F, a) {\n    if (Array.isArray(a)) {\n        for (let i=a.length-1; i>=0; i--) {\n            if (!F.F.isZero(a[i])) {\n                return isGreatest(F.F, a[i]);\n            }\n        }\n        return 0;\n    } else {\n        const na = F.neg(a);\n        return gt(a, na);\n    }\n}\n\n\nclass EC {\n\n    constructor(F, g) {\n        this.F = F;\n        this.g = g;\n        if (this.g.length == 2) this.g[2] = this.F.one;\n        this.zero = [this.F.zero, this.F.one, this.F.zero];\n    }\n\n    add(p1, p2) {\n\n        const F = this.F;\n\n        if (this.eq(p1, this.zero)) return p2;\n        if (this.eq(p2, this.zero)) return p1;\n\n        const res = new Array(3);\n\n        const Z1Z1 = F.square( p1[2] );\n        const Z2Z2 = F.square( p2[2] );\n\n        const U1 = F.mul( p1[0] , Z2Z2 );     // U1 = X1  * Z2Z2\n        const U2 = F.mul( p2[0] , Z1Z1 );     // U2 = X2  * Z1Z1\n\n        const Z1_cubed = F.mul( p1[2] , Z1Z1);\n        const Z2_cubed = F.mul( p2[2] , Z2Z2);\n\n        const S1 = F.mul( p1[1] , Z2_cubed);  // S1 = Y1 * Z2 * Z2Z2\n        const S2 = F.mul( p2[1] , Z1_cubed);  // S2 = Y2 * Z1 * Z1Z1\n\n        if (F.eq(U1,U2) && F.eq(S1,S2)) {\n            return this.double(p1);\n        }\n\n        const H = F.sub( U2 , U1 );                    // H = U2-U1\n\n        const S2_minus_S1 = F.sub( S2 , S1 );\n\n        const I = F.square( F.add(H,H) );         // I = (2 * H)^2\n        const J = F.mul( H , I );                      // J = H * I\n\n        const r = F.add( S2_minus_S1 , S2_minus_S1 );  // r = 2 * (S2-S1)\n        const V = F.mul( U1 , I );                     // V = U1 * I\n\n        res[0] =\n            F.sub(\n                F.sub( F.square(r) , J ),\n                F.add( V , V ));                       // X3 = r^2 - J - 2 * V\n\n        const S1_J = F.mul( S1 , J );\n\n        res[1] =\n            F.sub(\n                F.mul( r , F.sub(V,res[0])),\n                F.add( S1_J,S1_J ));                   // Y3 = r * (V-X3)-2 S1 J\n\n        res[2] =\n            F.mul(\n                H,\n                F.sub(\n                    F.square( F.add(p1[2],p2[2]) ),\n                    F.add( Z1Z1 , Z2Z2 )));            // Z3 = ((Z1+Z2)^2-Z1Z1-Z2Z2) * H\n\n        return res;\n    }\n\n    neg(p) {\n        return [p[0], this.F.neg(p[1]), p[2]];\n    }\n\n    sub(a, b) {\n        return this.add(a, this.neg(b));\n    }\n\n    double(p) {\n        const F = this.F;\n\n        const res = new Array(3);\n\n        if (this.eq(p, this.zero)) return p;\n\n        const A = F.square( p[0] );                    // A = X1^2\n        const B = F.square( p[1] );                    // B = Y1^2\n        const C = F.square( B );                       // C = B^2\n\n        let D =\n            F.sub(\n                F.square( F.add(p[0] , B )),\n                F.add( A , C));\n        D = F.add(D,D);                    // D = 2 * ((X1 + B)^2 - A - C)\n\n        const E = F.add( F.add(A,A), A);          // E = 3 * A\n        const FF =F.square( E );                       // F = E^2\n\n        res[0] = F.sub( FF , F.add(D,D) );         // X3 = F - 2 D\n\n        let eightC = F.add( C , C );\n        eightC = F.add( eightC , eightC );\n        eightC = F.add( eightC , eightC );\n\n        res[1] =\n            F.sub(\n                F.mul(\n                    E,\n                    F.sub( D, res[0] )),\n                eightC);                                    // Y3 = E * (D - X3) - 8 * C\n\n        const Y1Z1 = F.mul( p[1] , p[2] );\n        res[2] = F.add( Y1Z1 , Y1Z1 );                 // Z3 = 2 * Y1 * Z1\n\n        return res;\n    }\n\n    timesScalar(base, e) {\n        return mulScalar(this, base, e);\n    }\n\n    mulScalar(base, e) {\n        return mulScalar(this, base, e);\n    }\n\n    affine(p) {\n        const F = this.F;\n        if (this.isZero(p)) {\n            return this.zero;\n        } else if (F.eq(p[2], F.one)) {\n            return p;\n        } else {\n            const Z_inv = F.inv(p[2]);\n            const Z2_inv = F.square(Z_inv);\n            const Z3_inv = F.mul(Z2_inv, Z_inv);\n\n            const res = new Array(3);\n            res[0] = F.mul(p[0],Z2_inv);\n            res[1] = F.mul(p[1],Z3_inv);\n            res[2] = F.one;\n\n            return res;\n        }\n    }\n\n    multiAffine(arr) {\n        const keys = Object.keys(arr);\n        const F = this.F;\n        const accMul = new Array(keys.length+1);\n        accMul[0] = F.one;\n        for (let i = 0; i< keys.length; i++) {\n            if (F.eq(arr[keys[i]][2], F.zero)) {\n                accMul[i+1] = accMul[i];\n            } else {\n                accMul[i+1] = F.mul(accMul[i], arr[keys[i]][2]);\n            }\n        }\n\n        accMul[keys.length] = F.inv(accMul[keys.length]);\n\n        for (let i = keys.length-1; i>=0; i--) {\n            if (F.eq(arr[keys[i]][2], F.zero)) {\n                accMul[i] = accMul[i+1];\n                arr[keys[i]] = this.zero;\n            } else {\n                const Z_inv = F.mul(accMul[i], accMul[i+1]);\n                accMul[i] = F.mul(arr[keys[i]][2], accMul[i+1]);\n\n                const Z2_inv = F.square(Z_inv);\n                const Z3_inv = F.mul(Z2_inv, Z_inv);\n\n                arr[keys[i]][0] = F.mul(arr[keys[i]][0],Z2_inv);\n                arr[keys[i]][1] = F.mul(arr[keys[i]][1],Z3_inv);\n                arr[keys[i]][2] = F.one;\n            }\n        }\n\n    }\n\n    eq(p1, p2) {\n        const F = this.F;\n\n        if (this.F.eq(p1[2], this.F.zero)) return this.F.eq(p2[2], this.F.zero);\n        if (this.F.eq(p2[2], this.F.zero)) return false;\n\n        const Z1Z1 = F.square( p1[2] );\n        const Z2Z2 = F.square( p2[2] );\n\n        const U1 = F.mul( p1[0] , Z2Z2 );\n        const U2 = F.mul( p2[0] , Z1Z1 );\n\n        const Z1_cubed = F.mul( p1[2] , Z1Z1);\n        const Z2_cubed = F.mul( p2[2] , Z2Z2);\n\n        const S1 = F.mul( p1[1] , Z2_cubed);\n        const S2 = F.mul( p2[1] , Z1_cubed);\n\n        return (F.eq(U1,U2) && F.eq(S1,S2));\n    }\n\n    isZero(p) {\n        return this.F.isZero(p[2]);\n    }\n\n    toString(p) {\n        const cp = this.affine(p);\n        return `[ ${this.F.toString(cp[0])} , ${this.F.toString(cp[1])} ]`;\n    }\n\n    fromRng(rng) {\n        const F = this.F;\n        let P = [];\n        let greatest;\n        do {\n            P[0] = F.fromRng(rng);\n            greatest = rng.nextBool();\n            const x3b = F.add(F.mul(F.square(P[0]), P[0]), this.b);\n            P[1] = F.sqrt(x3b);\n        } while ((P[1] == null)||(F.isZero[P]));\n\n        const s = isGreatest(F, P[1]);\n        if (greatest ^ s) P[1] = F.neg(P[1]);\n        P[2] = F.one;\n\n        if (this.cofactor) {\n            P = this.mulScalar(P, this.cofactor);\n        }\n\n        P = this.affine(P);\n\n        return P;\n\n    }\n\n    toRprLE(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprLE(buff, o, p[0]);\n        this.F.toRprLE(buff, o+this.F.n8, p[1]);\n    }\n\n    toRprBE(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprBE(buff, o, p[0]);\n        this.F.toRprBE(buff, o+this.F.n8, p[1]);\n    }\n\n    toRprLEM(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprLEM(buff, o, p[0]);\n        this.F.toRprLEM(buff, o+this.F.n8, p[1]);\n    }\n\n    toRprLEJM(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprLEM(buff, o, p[0]);\n        this.F.toRprLEM(buff, o+this.F.n8, p[1]);\n        this.F.toRprLEM(buff, o+2*this.F.n8, p[2]);\n    }\n\n\n    toRprBEM(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprBEM(buff, o, p[0]);\n        this.F.toRprBEM(buff, o+this.F.n8, p[1]);\n    }\n\n    fromRprLE(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprLE(buff, o);\n        const y = this.F.fromRprLE(buff, o+this.F.n8);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, this.F.one];\n    }\n\n    fromRprBE(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprBE(buff, o);\n        const y = this.F.fromRprBE(buff, o+this.F.n8);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, this.F.one];\n    }\n\n    fromRprLEM(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprLEM(buff, o);\n        const y = this.F.fromRprLEM(buff, o+this.F.n8);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, this.F.one];\n    }\n\n    fromRprLEJM(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprLEM(buff, o);\n        const y = this.F.fromRprLEM(buff, o+this.F.n8);\n        const z = this.F.fromRprLEM(buff, o+this.F.n8*2);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, z];\n    }\n\n    fromRprBEM(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprBEM(buff, o);\n        const y = this.F.fromRprBEM(buff, o+this.F.n8);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, this.F.one];\n    }\n\n    fromRprCompressed(buff, o) {\n        const F = this.F;\n        const v = new Uint8Array(buff.buffer, o, F.n8);\n        if (v[0] & 0x40) return this.zero;\n        const P = new Array(3);\n\n        const greatest = ((v[0] & 0x80) != 0);\n        v[0] = v[0] & 0x7F;\n        P[0] = F.fromRprBE(buff, o);\n        if (greatest) v[0] = v[0] | 0x80;  // set back again the old value\n\n        const x3b = F.add(F.mul(F.square(P[0]), P[0]), this.b);\n        P[1] = F.sqrt(x3b);\n\n        if (P[1] === null) {\n            throw new Error(\"Invalid Point!\");\n        }\n\n        const s = isGreatest(F, P[1]);\n        if (greatest ^ s) P[1] = F.neg(P[1]);\n        P[2] = F.one;\n\n        return P;\n    }\n\n    toRprCompressed(buff, o, p) {\n        p = this.affine(p);\n        const v = new Uint8Array(buff.buffer, o, this.F.n8);\n        if (this.isZero(p)) {\n            v.fill(0);\n            v[0] = 0x40;\n            return;\n        }\n        this.F.toRprBE(buff, o, p[0]);\n\n        if (isGreatest(this.F, p[1])) {\n            v[0] = v[0] | 0x80;\n        }\n    }\n\n\n    fromRprUncompressed(buff, o) {\n        if (buff[0] & 0x40) return this.zero;\n\n        return this.fromRprBE(buff, o);\n    }\n\n    toRprUncompressed(buff, o, p) {\n        this.toRprBE(buff, o, p);\n\n        if (this.isZero(p)) {\n            buff[o] = buff[o] | 0x40;\n        }\n    }\n\n\n}\n\nvar utils$6 = {};\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nutils$6.bigInt2BytesLE = function bigInt2BytesLE(_a, len) {\n    const b = Array(len);\n    let v = BigInt(_a);\n    for (let i=0; i<len; i++) {\n        b[i] = Number(v & 0xFFn);\n        v = v >> 8n;\n    }\n    return b;\n};\n\nutils$6.bigInt2U32LE = function bigInt2BytesLE(_a, len) {\n    const b = Array(len);\n    let v = BigInt(_a);\n    for (let i=0; i<len; i++) {\n        b[i] = Number(v & 0xFFFFFFFFn);\n        v = v >> 32n;\n    }\n    return b;\n};\n\nutils$6.isOcamNum = function(a) {\n    if (!Array.isArray(a)) return false;\n    if (a.length != 3) return false;\n    if (typeof a[0] !== \"number\") return false;\n    if (typeof a[1] !== \"number\") return false;\n    if (!Array.isArray(a[2])) return false;\n    return true;\n};\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nvar build_int = function buildInt(module, n64, _prefix) {\n\n    const prefix = _prefix || \"int\";\n    if (module.modules[prefix]) return prefix;  // already builded\n    module.modules[prefix] = {};\n\n    const n32 = n64*2;\n    const n8 = n64*8;\n\n    function buildCopy() {\n        const f = module.addFunction(prefix+\"_copy\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        for (let i=0; i<n64; i++) {\n            f.addCode(\n                c.i64_store(\n                    c.getLocal(\"pr\"),\n                    i*8,\n                    c.i64_load(\n                        c.getLocal(\"px\"),\n                        i*8\n                    )\n                )\n            );\n        }\n    }\n\n    function buildZero() {\n        const f = module.addFunction(prefix+\"_zero\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        for (let i=0; i<n64; i++) {\n            f.addCode(\n                c.i64_store(\n                    c.getLocal(\"pr\"),\n                    i*8,\n                    c.i64_const(0)\n                )\n            );\n        }\n    }\n\n    function buildOne() {\n        const f = module.addFunction(prefix+\"_one\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.i64_store(\n                c.getLocal(\"pr\"),\n                0,\n                c.i64_const(1)\n            )\n        );\n        for (let i=1; i<n64; i++) {\n            f.addCode(\n                c.i64_store(\n                    c.getLocal(\"pr\"),\n                    i*8,\n                    c.i64_const(0)\n                )\n            );\n        }\n    }\n\n    function buildIsZero() {\n        const f = module.addFunction(prefix+\"_isZero\");\n        f.addParam(\"px\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        function getCompCode(n) {\n            if (n==0) {\n                return  c.ret(c.i64_eqz(\n                    c.i64_load(c.getLocal(\"px\"))\n                ));\n            }\n            return c.if(\n                c.i64_eqz(\n                    c.i64_load(c.getLocal(\"px\"), n*8 )\n                ),\n                getCompCode(n-1),\n                c.ret(c.i32_const(0))\n            );\n        }\n\n        f.addCode(getCompCode(n64-1));\n        f.addCode(c.ret(c.i32_const(0)));\n    }\n\n    function buildEq() {\n        const f = module.addFunction(prefix+\"_eq\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"py\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        function getCompCode(n) {\n            if (n==0) {\n                return  c.ret(c.i64_eq(\n                    c.i64_load(c.getLocal(\"px\")),\n                    c.i64_load(c.getLocal(\"py\"))\n                ));\n            }\n            return c.if(\n                c.i64_eq(\n                    c.i64_load(c.getLocal(\"px\"), n*8 ),\n                    c.i64_load(c.getLocal(\"py\"), n*8 )\n                ),\n                getCompCode(n-1),\n                c.ret(c.i32_const(0))\n            );\n        }\n\n        f.addCode(getCompCode(n64-1));\n        f.addCode(c.ret(c.i32_const(0)));\n    }\n\n\n\n    function buildGte() {\n        const f = module.addFunction(prefix+\"_gte\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"py\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        function getCompCode(n) {\n            if (n==0) {\n                return  c.ret(c.i64_ge_u(\n                    c.i64_load(c.getLocal(\"px\")),\n                    c.i64_load(c.getLocal(\"py\"))\n                ));\n            }\n            return c.if(\n                c.i64_lt_u(\n                    c.i64_load(c.getLocal(\"px\"), n*8 ),\n                    c.i64_load(c.getLocal(\"py\"), n*8 )\n                ),\n                c.ret(c.i32_const(0)),\n                c.if(\n                    c.i64_gt_u(\n                        c.i64_load(c.getLocal(\"px\"), n*8 ),\n                        c.i64_load(c.getLocal(\"py\"), n*8 )\n                    ),\n                    c.ret(c.i32_const(1)),\n                    getCompCode(n-1)\n                )\n            );\n        }\n\n        f.addCode(getCompCode(n64-1));\n        f.addCode(c.ret(c.i32_const(0)));\n    }\n\n\n\n    function buildAdd() {\n\n        const f = module.addFunction(prefix+\"_add\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.setReturnType(\"i32\");\n        f.addLocal(\"c\", \"i64\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.setLocal(\n            \"c\",\n            c.i64_add(\n                c.i64_load32_u(c.getLocal(\"x\")),\n                c.i64_load32_u(c.getLocal(\"y\"))\n            )\n        ));\n\n        f.addCode(c.i64_store32(\n            c.getLocal(\"r\"),\n            c.getLocal(\"c\"),\n        ));\n\n        for (let i=1; i<n32; i++) {\n            f.addCode(c.setLocal( \"c\",\n                c.i64_add(\n                    c.i64_add(\n                        c.i64_load32_u(c.getLocal(\"x\"), 4*i),\n                        c.i64_load32_u(c.getLocal(\"y\"), 4*i)\n                    ),\n                    c.i64_shr_u (c.getLocal(\"c\"), c.i64_const(32))\n                )\n            ));\n\n            f.addCode(c.i64_store32(\n                c.getLocal(\"r\"),\n                i*4,\n                c.getLocal(\"c\")\n            ));\n        }\n\n        f.addCode(c.i32_wrap_i64(c.i64_shr_u (c.getLocal(\"c\"), c.i64_const(32))));\n    }\n\n\n    function buildSub() {\n\n        const f = module.addFunction(prefix+\"_sub\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.setReturnType(\"i32\");\n        f.addLocal(\"c\", \"i64\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.setLocal(\n            \"c\",\n            c.i64_sub(\n                c.i64_load32_u(c.getLocal(\"x\")),\n                c.i64_load32_u(c.getLocal(\"y\"))\n            )\n        ));\n\n        f.addCode(c.i64_store32(\n            c.getLocal(\"r\"),\n            c.i64_and(\n                c.getLocal(\"c\"),\n                c.i64_const(\"0xFFFFFFFF\")\n            )\n        ));\n\n        for (let i=1; i<n32; i++) {\n            f.addCode(c.setLocal( \"c\",\n                c.i64_add(\n                    c.i64_sub(\n                        c.i64_load32_u(c.getLocal(\"x\"), 4*i),\n                        c.i64_load32_u(c.getLocal(\"y\"), 4*i)\n                    ),\n                    c.i64_shr_s (c.getLocal(\"c\"), c.i64_const(32))\n                )\n            ));\n\n            f.addCode(c.i64_store32(\n                c.getLocal(\"r\"),\n                i*4,\n                c.i64_and( c.getLocal(\"c\"), c.i64_const(\"0xFFFFFFFF\"))\n            ));\n        }\n\n        f.addCode(c.i32_wrap_i64 ( c.i64_shr_s (c.getLocal(\"c\"), c.i64_const(32))));\n    }\n\n\n    function buildMul() {\n\n        const f = module.addFunction(prefix+\"_mul\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"c0\", \"i64\");\n        f.addLocal(\"c1\", \"i64\");\n\n\n        for (let i=0;i<n32; i++) {\n            f.addLocal(\"x\"+i, \"i64\");\n            f.addLocal(\"y\"+i, \"i64\");\n        }\n\n        const c = f.getCodeBuilder();\n\n        const loadX = [];\n        const loadY = [];\n        function mulij(i, j) {\n            let X,Y;\n            if (!loadX[i]) {\n                X = c.teeLocal(\"x\"+i, c.i64_load32_u( c.getLocal(\"x\"), i*4));\n                loadX[i] = true;\n            } else {\n                X = c.getLocal(\"x\"+i);\n            }\n            if (!loadY[j]) {\n                Y = c.teeLocal(\"y\"+j, c.i64_load32_u( c.getLocal(\"y\"), j*4));\n                loadY[j] = true;\n            } else {\n                Y = c.getLocal(\"y\"+j);\n            }\n\n            return c.i64_mul( X, Y );\n        }\n\n        let c0 = \"c0\";\n        let c1 = \"c1\";\n\n        for (let k=0; k<n32*2-1; k++) {\n            for (let i=Math.max(0, k-n32+1); (i<=k)&&(i<n32); i++) {\n                const j= k-i;\n\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulij(i,j)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n\n            }\n\n            f.addCode(\n                c.i64_store32(\n                    c.getLocal(\"r\"),\n                    k*4,\n                    c.getLocal(c0)\n                )\n            );\n            [c0, c1] = [c1, c0];\n            f.addCode(\n                c.setLocal(c1,\n                    c.i64_shr_u(\n                        c.getLocal(c0),\n                        c.i64_const(32)\n                    )\n                )\n            );\n        }\n        f.addCode(\n            c.i64_store32(\n                c.getLocal(\"r\"),\n                n32*4*2-4,\n                c.getLocal(c0)\n            )\n        );\n\n    }\n\n\n\n    function buildSquare() {\n\n        const f = module.addFunction(prefix+\"_square\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"c0\", \"i64\");\n        f.addLocal(\"c1\", \"i64\");\n        f.addLocal(\"c0_old\", \"i64\");\n        f.addLocal(\"c1_old\", \"i64\");\n\n\n        for (let i=0;i<n32; i++) {\n            f.addLocal(\"x\"+i, \"i64\");\n        }\n\n        const c = f.getCodeBuilder();\n\n        const loadX = [];\n        function mulij(i, j) {\n            let X,Y;\n            if (!loadX[i]) {\n                X = c.teeLocal(\"x\"+i, c.i64_load32_u( c.getLocal(\"x\"), i*4));\n                loadX[i] = true;\n            } else {\n                X = c.getLocal(\"x\"+i);\n            }\n            if (!loadX[j]) {\n                Y = c.teeLocal(\"x\"+j, c.i64_load32_u( c.getLocal(\"x\"), j*4));\n                loadX[j] = true;\n            } else {\n                Y = c.getLocal(\"x\"+j);\n            }\n\n            return c.i64_mul( X, Y );\n        }\n\n        let c0 = \"c0\";\n        let c1 = \"c1\";\n        let c0_old = \"c0_old\";\n        let c1_old = \"c1_old\";\n\n        for (let k=0; k<n32*2-1; k++) {\n            f.addCode(\n                c.setLocal(c0, c.i64_const(0)),\n                c.setLocal(c1, c.i64_const(0)),\n            );\n\n            for (let i=Math.max(0, k-n32+1); (i<((k+1)>>1) )&&(i<n32); i++) {\n                const j= k-i;\n\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulij(i,j)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n\n            // Multiply by 2\n            f.addCode(\n                c.setLocal(c0,\n                    c.i64_shl(\n                        c.i64_and(\n                            c.getLocal(c0),\n                            c.i64_const(0xFFFFFFFF)\n                        ),\n                        c.i64_const(1)\n                    )\n                )\n            );\n\n            f.addCode(\n                c.setLocal(c1,\n                    c.i64_add(\n                        c.i64_shl(\n                            c.getLocal(c1),\n                            c.i64_const(1)\n                        ),\n                        c.i64_shr_u(\n                            c.getLocal(c0),\n                            c.i64_const(32)\n                        )\n                    )\n                )\n            );\n\n            if (k%2 == 0) {\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulij(k>>1, k>>1)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n\n            // Add the old carry\n\n            if (k>0) {\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            c.i64_and(\n                                c.getLocal(c0_old),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.i64_add(\n                                c.getLocal(c1),\n                                c.i64_shr_u(\n                                    c.getLocal(c0),\n                                    c.i64_const(32)\n                                )\n                            ),\n                            c.getLocal(c1_old)\n                        )\n                    )\n                );\n            }\n\n            f.addCode(\n                c.i64_store32(\n                    c.getLocal(\"r\"),\n                    k*4,\n                    c.getLocal(c0)\n                )\n            );\n\n            f.addCode(\n                c.setLocal(\n                    c0_old,\n                    c.getLocal(c1)\n                ),\n                c.setLocal(\n                    c1_old,\n                    c.i64_shr_u(\n                        c.getLocal(c0_old),\n                        c.i64_const(32)\n                    )\n                )\n            );\n\n        }\n        f.addCode(\n            c.i64_store32(\n                c.getLocal(\"r\"),\n                n32*4*2-4,\n                c.getLocal(c0_old)\n            )\n        );\n\n    }\n\n\n    function buildSquareOld() {\n        const f = module.addFunction(prefix+\"_squareOld\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(prefix + \"_mul\", c.getLocal(\"x\"), c.getLocal(\"x\"), c.getLocal(\"r\")));\n    }\n\n    function _buildMul1() {\n        const f = module.addFunction(prefix+\"__mul1\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"y\", \"i64\");\n        f.addParam(\"pr\", \"i32\");\n        f.addLocal(\"c\", \"i64\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.setLocal(\n            \"c\",\n            c.i64_mul(\n                c.i64_load32_u(c.getLocal(\"px\"), 0, 0),\n                c.getLocal(\"y\")\n            )\n        ));\n\n        f.addCode(c.i64_store32(\n            c.getLocal(\"pr\"),\n            0,\n            0,\n            c.getLocal(\"c\"),\n        ));\n\n        for (let i=1; i<n32; i++) {\n            f.addCode(c.setLocal( \"c\",\n                c.i64_add(\n                    c.i64_mul(\n                        c.i64_load32_u(c.getLocal(\"px\"), 4*i, 0),\n                        c.getLocal(\"y\")\n                    ),\n                    c.i64_shr_u (c.getLocal(\"c\"), c.i64_const(32))\n                )\n            ));\n\n            f.addCode(c.i64_store32(\n                c.getLocal(\"pr\"),\n                i*4,\n                0,\n                c.getLocal(\"c\")\n            ));\n        }\n    }\n\n    function _buildAdd1() {\n        const f = module.addFunction(prefix+\"__add1\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i64\");\n        f.addLocal(\"c\", \"i64\");\n        f.addLocal(\"px\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.setLocal(\"px\", c.getLocal(\"x\")));\n\n        f.addCode(c.setLocal(\n            \"c\",\n            c.i64_add(\n                c.i64_load32_u(c.getLocal(\"px\"), 0, 0),\n                c.getLocal(\"y\")\n            )\n        ));\n\n        f.addCode(c.i64_store32(\n            c.getLocal(\"px\"),\n            0,\n            0,\n            c.getLocal(\"c\"),\n        ));\n\n        f.addCode(c.setLocal(\n            \"c\",\n            c.i64_shr_u(\n                c.getLocal(\"c\"),\n                c.i64_const(32)\n            )\n        ));\n\n        f.addCode(c.block(c.loop(\n            c.br_if(\n                1,\n                c.i64_eqz(c.getLocal(\"c\"))\n            ),\n            c.setLocal(\n                \"px\",\n                c.i32_add(\n                    c.getLocal(\"px\"),\n                    c.i32_const(4)\n                )\n            ),\n\n            c.setLocal(\n                \"c\",\n                c.i64_add(\n                    c.i64_load32_u(c.getLocal(\"px\"), 0, 0),\n                    c.getLocal(\"c\")\n                )\n            ),\n\n            c.i64_store32(\n                c.getLocal(\"px\"),\n                0,\n                0,\n                c.getLocal(\"c\"),\n            ),\n\n            c.setLocal(\n                \"c\",\n                c.i64_shr_u(\n                    c.getLocal(\"c\"),\n                    c.i64_const(32)\n                )\n            ),\n\n            c.br(0)\n        )));\n    }\n\n\n    function buildDiv() {\n        _buildMul1();\n        _buildAdd1();\n\n        const f = module.addFunction(prefix+\"_div\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"c\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"rr\", \"i32\");\n        f.addLocal(\"cc\", \"i32\");\n        f.addLocal(\"eX\", \"i32\");\n        f.addLocal(\"eY\", \"i32\");\n        f.addLocal(\"sy\", \"i64\");\n        f.addLocal(\"sx\", \"i64\");\n        f.addLocal(\"ec\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const Y = c.i32_const(module.alloc(n8));\n        const Caux = c.i32_const(module.alloc(n8));\n        const Raux = c.i32_const(module.alloc(n8));\n        const C = c.getLocal(\"cc\");\n        const R = c.getLocal(\"rr\");\n        const pr1 = module.alloc(n8*2);\n        const R1 = c.i32_const(pr1);\n        const R2 = c.i32_const(pr1+n8);\n\n        // Ic c is 0 then store it in an auxiliary buffer\n        f.addCode(c.if(\n            c.getLocal(\"c\"),\n            c.setLocal(\"cc\", c.getLocal(\"c\")),\n            c.setLocal(\"cc\", Caux)\n        ));\n\n        // Ic r is 0 then store it in an auxiliary buffer\n        f.addCode(c.if(\n            c.getLocal(\"r\"),\n            c.setLocal(\"rr\", c.getLocal(\"r\")),\n            c.setLocal(\"rr\", Raux)\n        ));\n\n        // Copy\n        f.addCode(c.call(prefix + \"_copy\", c.getLocal(\"x\"), R));\n        f.addCode(c.call(prefix + \"_copy\", c.getLocal(\"y\"), Y));\n        f.addCode(c.call(prefix + \"_zero\", C));\n        f.addCode(c.call(prefix + \"_zero\", R1));\n\n\n        f.addCode(c.setLocal(\"eX\", c.i32_const(n8-1)));\n        f.addCode(c.setLocal(\"eY\", c.i32_const(n8-1)));\n\n        // while (eY>3)&&(Y[eY]==0) ey--;\n        f.addCode(c.block(c.loop(\n            c.br_if(\n                1,\n                c.i32_or(\n                    c.i32_load8_u(\n                        c.i32_add(Y , c.getLocal(\"eY\")),\n                        0,\n                        0\n                    ),\n                    c.i32_eq(\n                        c.getLocal(\"eY\"),\n                        c.i32_const(3)\n                    )\n                )\n            ),\n            c.setLocal(\"eY\", c.i32_sub(c.getLocal(\"eY\"), c.i32_const(1))),\n            c.br(0)\n        )));\n\n        f.addCode(\n            c.setLocal(\n                \"sy\",\n                c.i64_add(\n                    c.i64_load32_u(\n                        c.i32_sub(\n                            c.i32_add( Y, c.getLocal(\"eY\")),\n                            c.i32_const(3)\n                        ),\n                        0,\n                        0\n                    ),\n                    c.i64_const(1)\n                )\n            )\n        );\n\n        // Force a divide by 0 if quotien is 0\n        f.addCode(\n            c.if(\n                c.i64_eq(\n                    c.getLocal(\"sy\"),\n                    c.i64_const(1)\n                ),\n                c.drop(c.i64_div_u(c.i64_const(0), c.i64_const(0)))\n            )\n        );\n\n        f.addCode(c.block(c.loop(\n\n            // while (eX>7)&&(Y[eX]==0) ex--;\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_or(\n                        c.i32_load8_u(\n                            c.i32_add(R , c.getLocal(\"eX\")),\n                            0,\n                            0\n                        ),\n                        c.i32_eq(\n                            c.getLocal(\"eX\"),\n                            c.i32_const(7)\n                        )\n                    )\n                ),\n                c.setLocal(\"eX\", c.i32_sub(c.getLocal(\"eX\"), c.i32_const(1))),\n                c.br(0)\n            )),\n\n            c.setLocal(\n                \"sx\",\n                c.i64_load(\n                    c.i32_sub(\n                        c.i32_add( R, c.getLocal(\"eX\")),\n                        c.i32_const(7)\n                    ),\n                    0,\n                    0\n                )\n            ),\n\n            c.setLocal(\n                \"sx\",\n                c.i64_div_u(\n                    c.getLocal(\"sx\"),\n                    c.getLocal(\"sy\")\n                )\n            ),\n            c.setLocal(\n                \"ec\",\n                c.i32_sub(\n                    c.i32_sub(\n                        c.getLocal(\"eX\"),\n                        c.getLocal(\"eY\")\n                    ),\n                    c.i32_const(4)\n                )\n            ),\n\n            // While greater than 32 bits or ec is neg, shr and inc exp\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_and(\n                        c.i64_eqz(\n                            c.i64_and(\n                                c.getLocal(\"sx\"),\n                                c.i64_const(\"0xFFFFFFFF00000000\")\n                            )\n                        ),\n                        c.i32_ge_s(\n                            c.getLocal(\"ec\"),\n                            c.i32_const(0)\n                        )\n                    )\n                ),\n\n                c.setLocal(\n                    \"sx\",\n                    c.i64_shr_u(\n                        c.getLocal(\"sx\"),\n                        c.i64_const(8)\n                    )\n                ),\n\n                c.setLocal(\n                    \"ec\",\n                    c.i32_add(\n                        c.getLocal(\"ec\"),\n                        c.i32_const(1)\n                    )\n                ),\n                c.br(0)\n            )),\n\n            c.if(\n                c.i64_eqz(c.getLocal(\"sx\")),\n                [\n                    ...c.br_if(\n                        2,\n                        c.i32_eqz(c.call(prefix + \"_gte\", R, Y))\n                    ),\n                    ...c.setLocal(\"sx\", c.i64_const(1)),\n                    ...c.setLocal(\"ec\", c.i32_const(0))\n                ]\n            ),\n\n            c.call(prefix + \"__mul1\", Y, c.getLocal(\"sx\"), R2),\n            c.drop(c.call(\n                prefix + \"_sub\",\n                R,\n                c.i32_sub(R2, c.getLocal(\"ec\")),\n                R\n            )),\n            c.call(\n                prefix + \"__add1\",\n                c.i32_add(C, c.getLocal(\"ec\")),\n                c.getLocal(\"sx\")\n            ),\n            c.br(0)\n        )));\n    }\n\n    function buildInverseMod() {\n\n        const f = module.addFunction(prefix+\"_inverseMod\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"pm\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n        f.addLocal(\"t\", \"i32\");\n        f.addLocal(\"newt\", \"i32\");\n        f.addLocal(\"r\", \"i32\");\n        f.addLocal(\"qq\", \"i32\");\n        f.addLocal(\"qr\", \"i32\");\n        f.addLocal(\"newr\", \"i32\");\n        f.addLocal(\"swp\", \"i32\");\n        f.addLocal(\"x\", \"i32\");\n        f.addLocal(\"signt\", \"i32\");\n        f.addLocal(\"signnewt\", \"i32\");\n        f.addLocal(\"signx\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const aux1 = c.i32_const(module.alloc(n8));\n        const aux2 = c.i32_const(module.alloc(n8));\n        const aux3 = c.i32_const(module.alloc(n8));\n        const aux4 = c.i32_const(module.alloc(n8));\n        const aux5 = c.i32_const(module.alloc(n8));\n        const aux6 = c.i32_const(module.alloc(n8));\n        const mulBuff = c.i32_const(module.alloc(n8*2));\n        const aux7 = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.setLocal(\"t\", aux1),\n            c.call(prefix + \"_zero\", aux1),\n            c.setLocal(\"signt\", c.i32_const(0)),\n        );\n\n        f.addCode(\n            c.setLocal(\"r\", aux2),\n            c.call(prefix + \"_copy\", c.getLocal(\"pm\"), aux2)\n        );\n\n        f.addCode(\n            c.setLocal(\"newt\", aux3),\n            c.call(prefix + \"_one\", aux3),\n            c.setLocal(\"signnewt\", c.i32_const(0)),\n        );\n\n        f.addCode(\n            c.setLocal(\"newr\", aux4),\n            c.call(prefix + \"_copy\", c.getLocal(\"px\"), aux4)\n        );\n\n\n\n\n        f.addCode(c.setLocal(\"qq\", aux5));\n        f.addCode(c.setLocal(\"qr\", aux6));\n        f.addCode(c.setLocal(\"x\", aux7));\n\n        f.addCode(c.block(c.loop(\n            c.br_if(\n                1,\n                c.call(prefix + \"_isZero\", c.getLocal(\"newr\") )\n            ),\n            c.call(prefix + \"_div\", c.getLocal(\"r\"), c.getLocal(\"newr\"), c.getLocal(\"qq\"), c.getLocal(\"qr\")),\n\n            c.call(prefix + \"_mul\", c.getLocal(\"qq\"), c.getLocal(\"newt\"), mulBuff),\n\n            c.if(\n                c.getLocal(\"signt\"),\n                c.if(\n                    c.getLocal(\"signnewt\"),\n                    c.if (\n                        c.call(prefix + \"_gte\", mulBuff, c.getLocal(\"t\")),\n                        [\n                            ...c.drop(c.call(prefix + \"_sub\", mulBuff, c.getLocal(\"t\"), c.getLocal(\"x\"))),\n                            ...c.setLocal(\"signx\", c.i32_const(0))\n                        ],\n                        [\n                            ...c.drop(c.call(prefix + \"_sub\", c.getLocal(\"t\"), mulBuff, c.getLocal(\"x\"))),\n                            ...c.setLocal(\"signx\", c.i32_const(1))\n                        ],\n                    ),\n                    [\n                        ...c.drop(c.call(prefix + \"_add\", mulBuff, c.getLocal(\"t\"), c.getLocal(\"x\"))),\n                        ...c.setLocal(\"signx\", c.i32_const(1))\n                    ]\n                ),\n                c.if(\n                    c.getLocal(\"signnewt\"),\n                    [\n                        ...c.drop(c.call(prefix + \"_add\", mulBuff, c.getLocal(\"t\"), c.getLocal(\"x\"))),\n                        ...c.setLocal(\"signx\", c.i32_const(0))\n                    ],\n                    c.if (\n                        c.call(prefix + \"_gte\", c.getLocal(\"t\"), mulBuff),\n                        [\n                            ...c.drop(c.call(prefix + \"_sub\", c.getLocal(\"t\"), mulBuff, c.getLocal(\"x\"))),\n                            ...c.setLocal(\"signx\", c.i32_const(0))\n                        ],\n                        [\n                            ...c.drop(c.call(prefix + \"_sub\", mulBuff, c.getLocal(\"t\"), c.getLocal(\"x\"))),\n                            ...c.setLocal(\"signx\", c.i32_const(1))\n                        ]\n                    )\n                )\n            ),\n\n            c.setLocal(\"swp\", c.getLocal(\"t\")),\n            c.setLocal(\"t\", c.getLocal(\"newt\")),\n            c.setLocal(\"newt\", c.getLocal(\"x\")),\n            c.setLocal(\"x\", c.getLocal(\"swp\")),\n\n            c.setLocal(\"signt\", c.getLocal(\"signnewt\")),\n            c.setLocal(\"signnewt\", c.getLocal(\"signx\")),\n\n            c.setLocal(\"swp\", c.getLocal(\"r\")),\n            c.setLocal(\"r\", c.getLocal(\"newr\")),\n            c.setLocal(\"newr\", c.getLocal(\"qr\")),\n            c.setLocal(\"qr\", c.getLocal(\"swp\")),\n\n            c.br(0)\n        )));\n\n        f.addCode(c.if(\n            c.getLocal(\"signt\"),\n            c.drop(c.call(prefix + \"_sub\", c.getLocal(\"pm\"), c.getLocal(\"t\"), c.getLocal(\"pr\"))),\n            c.call(prefix + \"_copy\", c.getLocal(\"t\"), c.getLocal(\"pr\"))\n        ));\n    }\n\n\n    buildCopy();\n    buildZero();\n    buildIsZero();\n    buildOne();\n    buildEq();\n    buildGte();\n    buildAdd();\n    buildSub();\n    buildMul();\n    buildSquare();\n    buildSquareOld();\n    buildDiv();\n    buildInverseMod();\n    module.exportFunction(prefix+\"_copy\");\n    module.exportFunction(prefix+\"_zero\");\n    module.exportFunction(prefix+\"_one\");\n    module.exportFunction(prefix+\"_isZero\");\n    module.exportFunction(prefix+\"_eq\");\n    module.exportFunction(prefix+\"_gte\");\n    module.exportFunction(prefix+\"_add\");\n    module.exportFunction(prefix+\"_sub\");\n    module.exportFunction(prefix+\"_mul\");\n    module.exportFunction(prefix+\"_square\");\n    module.exportFunction(prefix+\"_squareOld\");\n    module.exportFunction(prefix+\"_div\");\n    module.exportFunction(prefix+\"_inverseMod\");\n\n    return prefix;\n};\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nvar build_timesscalar = function buildTimesScalar(module, fnName, elementLen, opAB, opAA, opCopy, opInit) {\n\n    const f = module.addFunction(fnName);\n    f.addParam(\"base\", \"i32\");\n    f.addParam(\"scalar\", \"i32\");\n    f.addParam(\"scalarLength\", \"i32\");\n    f.addParam(\"r\", \"i32\");\n    f.addLocal(\"i\", \"i32\");\n    f.addLocal(\"b\", \"i32\");\n\n    const c = f.getCodeBuilder();\n\n    const aux = c.i32_const(module.alloc(elementLen));\n\n    f.addCode(\n        c.if(\n            c.i32_eqz(c.getLocal(\"scalarLength\")),\n            [\n                ...c.call(opInit, c.getLocal(\"r\")),\n                ...c.ret([])\n            ]\n        )\n    );\n    f.addCode(c.call(opCopy, c.getLocal(\"base\"), aux));\n    f.addCode(c.call(opInit, c.getLocal(\"r\")));\n    f.addCode(c.setLocal(\"i\", c.getLocal(\"scalarLength\")));\n    f.addCode(c.block(c.loop(\n        c.setLocal(\"i\", c.i32_sub(c.getLocal(\"i\"), c.i32_const(1))),\n\n        c.setLocal(\n            \"b\",\n            c.i32_load8_u(\n                c.i32_add(\n                    c.getLocal(\"scalar\"),\n                    c.getLocal(\"i\")\n                )\n            )\n        ),\n        ...innerLoop(),\n        c.br_if(1, c.i32_eqz ( c.getLocal(\"i\") )),\n        c.br(0)\n    )));\n\n\n    function innerLoop() {\n        const code = [];\n        for (let i=0; i<8; i++) {\n            code.push(\n                ...c.call(opAA, c.getLocal(\"r\"), c.getLocal(\"r\")),\n                ...c.if(\n                    c.i32_ge_u( c.getLocal(\"b\"), c.i32_const(0x80 >> i)),\n                    [\n                        ...c.setLocal(\n                            \"b\",\n                            c.i32_sub(\n                                c.getLocal(\"b\"),\n                                c.i32_const(0x80 >> i)\n                            )\n                        ),\n                        ...c.call(opAB, c.getLocal(\"r\"),aux, c.getLocal(\"r\"))\n                    ]\n                )\n            );\n        }\n        return code;\n    }\n\n};\n\nvar build_batchinverse = buildBatchInverse$3;\n\nfunction buildBatchInverse$3(module, prefix) {\n\n\n    const n8 = module.modules[prefix].n64*8;\n\n    const f = module.addFunction(prefix+\"_batchInverse\");\n    f.addParam(\"pIn\", \"i32\");\n    f.addParam(\"inStep\", \"i32\");\n    f.addParam(\"n\", \"i32\");\n    f.addParam(\"pOut\", \"i32\");\n    f.addParam(\"outStep\", \"i32\");\n    f.addLocal(\"itAux\", \"i32\");\n    f.addLocal(\"itIn\", \"i32\");\n    f.addLocal(\"itOut\",\"i32\");\n    f.addLocal(\"i\",\"i32\");\n\n    const c = f.getCodeBuilder();\n\n    const AUX = c.i32_const(module.alloc(n8));\n\n\n    // Alloc Working space for accumulated umltiplications\n    f.addCode(\n        c.setLocal(\"itAux\", c.i32_load( c.i32_const(0) )),\n        c.i32_store(\n            c.i32_const(0),\n            c.i32_add(\n                c.getLocal(\"itAux\"),\n                c.i32_mul(\n                    c.i32_add(\n                        c.getLocal(\"n\"),\n                        c.i32_const(1)\n                    ),\n                    c.i32_const(n8)\n                )\n            )\n        )\n    );\n\n    f.addCode(\n\n        // aux[0] = a;\n        c.call(prefix+\"_one\", c.getLocal(\"itAux\")),\n        // for (i=0;i<n;i++) aux[i] = aux[i-1]*in[i]\n        c.setLocal(\"itIn\", c.getLocal(\"pIn\")),\n        c.setLocal(\"itAux\", c.i32_add(c.getLocal(\"itAux\"), c.i32_const(n8))),\n        c.setLocal(\"i\", c.i32_const(0)),\n\n        c.block(c.loop(\n            c.br_if(1, c.i32_eq ( c.getLocal(\"i\"), c.getLocal(\"n\") )),\n            c.if(\n                c.call(prefix+\"_isZero\", c.getLocal(\"itIn\")),\n                c.call(\n                    prefix + \"_copy\",\n                    c.i32_sub(c.getLocal(\"itAux\"), c.i32_const(n8)),\n                    c.getLocal(\"itAux\")\n                ),\n                c.call(\n                    prefix+\"_mul\",\n                    c.getLocal(\"itIn\"),\n                    c.i32_sub(c.getLocal(\"itAux\"), c.i32_const(n8)),\n                    c.getLocal(\"itAux\")\n                )\n            ),\n            c.setLocal(\"itIn\", c.i32_add(c.getLocal(\"itIn\"), c.getLocal(\"inStep\"))),\n            c.setLocal(\"itAux\", c.i32_add(c.getLocal(\"itAux\"), c.i32_const(n8))),\n            c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n            c.br(0)\n        )),\n\n        // point to the last\n        c.setLocal(\"itIn\", c.i32_sub(c.getLocal(\"itIn\"), c.getLocal(\"inStep\"))),\n        c.setLocal(\"itAux\", c.i32_sub(c.getLocal(\"itAux\"), c.i32_const(n8))),\n        // itOut = pOut + (n-1)*stepOut   // Point to the last\n        c.setLocal(\n            \"itOut\",\n            c.i32_add(\n                c.getLocal(\"pOut\"),\n                c.i32_mul(\n                    c.i32_sub(c.getLocal(\"n\"), c.i32_const(1)),\n                    c.getLocal(\"outStep\"),\n                )\n            )\n        ),\n\n        // aux[n-1] = 1/aux[n-1]\n        c.call(prefix+\"_inverse\", c.getLocal(\"itAux\"), c.getLocal(\"itAux\") ),\n\n        c.block(c.loop(\n            c.br_if(1, c.i32_eqz( c.getLocal(\"i\"))),\n            c.if(\n                c.call(prefix+\"_isZero\", c.getLocal(\"itIn\")),\n                [\n                    ...c.call(\n                        prefix + \"_copy\",\n                        c.getLocal(\"itAux\"),\n                        c.i32_sub(c.getLocal(\"itAux\"), c.i32_const(n8)),\n                    ),\n                    ...c.call(\n                        prefix + \"_zero\",\n                        c.getLocal(\"itOut\")\n                    )\n                ],[\n                    ...c.call(prefix + \"_copy\", c.i32_sub(c.getLocal(\"itAux\"), c.i32_const(n8)), AUX),\n                    ...c.call(\n                        prefix+\"_mul\",\n                        c.getLocal(\"itAux\"),\n                        c.getLocal(\"itIn\"),\n                        c.i32_sub(c.getLocal(\"itAux\"), c.i32_const(n8)),\n                    ),\n                    ...c.call(\n                        prefix+\"_mul\",\n                        c.getLocal(\"itAux\"),\n                        AUX,\n                        c.getLocal(\"itOut\")\n                    )\n                ]\n            ),\n            c.setLocal(\"itIn\", c.i32_sub(c.getLocal(\"itIn\"), c.getLocal(\"inStep\"))),\n            c.setLocal(\"itOut\", c.i32_sub(c.getLocal(\"itOut\"), c.getLocal(\"outStep\"))),\n            c.setLocal(\"itAux\", c.i32_sub(c.getLocal(\"itAux\"), c.i32_const(n8))),\n            c.setLocal(\"i\", c.i32_sub(c.getLocal(\"i\"), c.i32_const(1))),\n            c.br(0)\n        ))\n\n    );\n\n\n    // Recover Old memory\n    f.addCode(\n        c.i32_store(\n            c.i32_const(0),\n            c.getLocal(\"itAux\")\n        )\n    );\n\n}\n\nvar build_batchconvertion = buildBatchConvertion$3;\n\nfunction buildBatchConvertion$3(module, fnName, internalFnName, sizeIn, sizeOut, reverse) {\n    if (typeof reverse === \"undefined\") {\n        // Set the reverse in a way that allows to use the same buffer as in/out.\n        if (sizeIn < sizeOut) {\n            reverse = true;\n        } else {\n            reverse = false;\n        }\n    }\n\n    const f = module.addFunction(fnName);\n    f.addParam(\"pIn\", \"i32\");\n    f.addParam(\"n\", \"i32\");\n    f.addParam(\"pOut\", \"i32\");\n    f.addLocal(\"i\", \"i32\");\n    f.addLocal(\"itIn\", \"i32\");\n    f.addLocal(\"itOut\", \"i32\");\n\n    const c = f.getCodeBuilder();\n\n    if (reverse) {\n        f.addCode(\n            c.setLocal(\"itIn\",\n                c.i32_add(\n                    c.getLocal(\"pIn\"),\n                    c.i32_mul(\n                        c.i32_sub(\n                            c.getLocal(\"n\"),\n                            c.i32_const(1)\n                        ),\n                        c.i32_const(sizeIn)\n                    )\n                )\n            ),\n            c.setLocal(\"itOut\",\n                c.i32_add(\n                    c.getLocal(\"pOut\"),\n                    c.i32_mul(\n                        c.i32_sub(\n                            c.getLocal(\"n\"),\n                            c.i32_const(1)\n                        ),\n                        c.i32_const(sizeOut)\n                    )\n                )\n            ),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(1, c.i32_eq ( c.getLocal(\"i\"), c.getLocal(\"n\") )),\n\n                c.call(internalFnName, c.getLocal(\"itIn\"), c.getLocal(\"itOut\")),\n\n                c.setLocal(\"itIn\", c.i32_sub(c.getLocal(\"itIn\"), c.i32_const(sizeIn))),\n                c.setLocal(\"itOut\", c.i32_sub(c.getLocal(\"itOut\"), c.i32_const(sizeOut))),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            )),\n        );\n    } else {\n        f.addCode(\n            c.setLocal(\"itIn\", c.getLocal(\"pIn\")),\n            c.setLocal(\"itOut\", c.getLocal(\"pOut\")),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(1, c.i32_eq ( c.getLocal(\"i\"), c.getLocal(\"n\") )),\n\n                c.call(internalFnName, c.getLocal(\"itIn\"), c.getLocal(\"itOut\")),\n\n                c.setLocal(\"itIn\", c.i32_add(c.getLocal(\"itIn\"), c.i32_const(sizeIn))),\n                c.setLocal(\"itOut\", c.i32_add(c.getLocal(\"itOut\"), c.i32_const(sizeOut))),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            )),\n        );\n    }\n}\n\nvar build_batchop = buildBatchConvertion$2;\n\nfunction buildBatchConvertion$2(module, fnName, internalFnName, sizeIn, sizeOut, reverse) {\n    if (typeof reverse === \"undefined\") {\n        // Set the reverse in a way that allows to use the same buffer as in/out.\n        if (sizeIn < sizeOut) {\n            reverse = true;\n        } else {\n            reverse = false;\n        }\n    }\n\n    const f = module.addFunction(fnName);\n    f.addParam(\"pIn1\", \"i32\");\n    f.addParam(\"pIn2\", \"i32\");\n    f.addParam(\"n\", \"i32\");\n    f.addParam(\"pOut\", \"i32\");\n    f.addLocal(\"i\", \"i32\");\n    f.addLocal(\"itIn1\", \"i32\");\n    f.addLocal(\"itIn2\", \"i32\");\n    f.addLocal(\"itOut\", \"i32\");\n\n    const c = f.getCodeBuilder();\n\n    if (reverse) {\n        f.addCode(\n            c.setLocal(\"itIn1\",\n                c.i32_add(\n                    c.getLocal(\"pIn1\"),\n                    c.i32_mul(\n                        c.i32_sub(\n                            c.getLocal(\"n\"),\n                            c.i32_const(1)\n                        ),\n                        c.i32_const(sizeIn)\n                    )\n                )\n            ),\n            c.setLocal(\"itIn2\",\n                c.i32_add(\n                    c.getLocal(\"pIn2\"),\n                    c.i32_mul(\n                        c.i32_sub(\n                            c.getLocal(\"n\"),\n                            c.i32_const(1)\n                        ),\n                        c.i32_const(sizeIn)\n                    )\n                )\n            ),\n            c.setLocal(\"itOut\",\n                c.i32_add(\n                    c.getLocal(\"pOut\"),\n                    c.i32_mul(\n                        c.i32_sub(\n                            c.getLocal(\"n\"),\n                            c.i32_const(1)\n                        ),\n                        c.i32_const(sizeOut)\n                    )\n                )\n            ),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(1, c.i32_eq ( c.getLocal(\"i\"), c.getLocal(\"n\") )),\n\n                c.call(internalFnName, c.getLocal(\"itIn1\"), c.getLocal(\"itIn2\"), c.getLocal(\"itOut\")),\n\n                c.setLocal(\"itIn1\", c.i32_sub(c.getLocal(\"itIn1\"), c.i32_const(sizeIn))),\n                c.setLocal(\"itIn2\", c.i32_sub(c.getLocal(\"itIn2\"), c.i32_const(sizeIn))),\n                c.setLocal(\"itOut\", c.i32_sub(c.getLocal(\"itOut\"), c.i32_const(sizeOut))),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            )),\n        );\n    } else {\n        f.addCode(\n            c.setLocal(\"itIn1\", c.getLocal(\"pIn1\")),\n            c.setLocal(\"itIn2\", c.getLocal(\"pIn2\")),\n            c.setLocal(\"itOut\", c.getLocal(\"pOut\")),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(1, c.i32_eq ( c.getLocal(\"i\"), c.getLocal(\"n\") )),\n\n                c.call(internalFnName, c.getLocal(\"itIn1\"), c.getLocal(\"itIn2\"), c.getLocal(\"itOut\")),\n\n                c.setLocal(\"itIn1\", c.i32_add(c.getLocal(\"itIn1\"), c.i32_const(sizeIn))),\n                c.setLocal(\"itIn2\", c.i32_add(c.getLocal(\"itIn2\"), c.i32_const(sizeIn))),\n                c.setLocal(\"itOut\", c.i32_add(c.getLocal(\"itOut\"), c.i32_const(sizeOut))),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            )),\n        );\n    }\n}\n\nvar bigint = {};\n\n// Many of these utilities are from the `big-integer` library,\n// but adjusted to only work with native BigInt type\n// Ref https://github.com/peterolson/BigInteger.js/blob/e5d2154d3c417069c51e7116bafc3b91d0b9fe41/BigInteger.js\n// Originally licensed The Unlicense\n\nfunction compare(a, b) {\n    return a === b ? 0 : a > b ? 1 : -1;\n}\n\nfunction square$1(n) {\n    return n * n;\n}\n\nfunction isOdd$4(n) {\n    return n % 2n !== 0n;\n}\n\nfunction isEven(n) {\n    return n % 2n === 0n;\n}\n\nfunction isNegative$3(n) {\n    return n < 0n;\n}\n\nfunction isPositive(n) {\n    return n > 0n;\n}\n\nfunction bitLength$5(n) {\n    if (isNegative$3(n)) {\n        return n.toString(2).length - 1; // discard the - sign\n    } else {\n        return n.toString(2).length;\n    }\n}\n\nfunction abs(n) {\n    return n < 0n ? -n : n;\n}\n\nfunction isUnit(n) {\n    return abs(n) === 1n;\n}\n\nfunction modInv$3(a, n) {\n    var t = 0n, newT = 1n, r = n, newR = abs(a), q, lastT, lastR;\n    while (newR !== 0n) {\n        q = r / newR;\n        lastT = t;\n        lastR = r;\n        t = newT;\n        r = newR;\n        newT = lastT - (q * newT);\n        newR = lastR - (q * newR);\n    }\n    if (!isUnit(r)) throw new Error(a.toString() + \" and \" + n.toString() + \" are not co-prime\");\n    if (compare(t, 0n) === -1) {\n        t = t + n;\n    }\n    if (isNegative$3(a)) {\n        return -t;\n    }\n    return t;\n}\n\nfunction modPow$2(n, exp, mod) {\n    if (mod === 0n) throw new Error(\"Cannot take modPow with modulus 0\");\n    var r = 1n,\n        base = n % mod;\n    if (isNegative$3(exp)) {\n        exp = exp * -1n;\n        base = modInv$3(base, mod);\n    }\n    while (isPositive(exp)) {\n        if (base === 0n) return 0n;\n        if (isOdd$4(exp)) r = r * base % mod;\n        exp = exp / 2n;\n        base = square$1(base) % mod;\n    }\n    return r;\n}\n\nfunction compareAbs(a, b) {\n    a = a >= 0n ? a : -a;\n    b = b >= 0n ? b : -b;\n    return a === b ? 0 : a > b ? 1 : -1;\n}\n\nfunction isDivisibleBy(a, n) {\n    if (n === 0n) return false;\n    if (isUnit(n)) return true;\n    if (compareAbs(n, 2n) === 0) return isEven(a);\n    return a % n === 0n;\n}\n\nfunction isBasicPrime(v) {\n    var n = abs(v);\n    if (isUnit(n)) return false;\n    if (n === 2n || n === 3n || n === 5n) return true;\n    if (isEven(n) || isDivisibleBy(n, 3n) || isDivisibleBy(n, 5n)) return false;\n    if (n < 49n) return true;\n    // we don't know if it's prime: let the other functions figure it out\n}\n\nfunction prev(n) {\n    return n - 1n;\n}\n\nfunction millerRabinTest(n, a) {\n    var nPrev = prev(n),\n        b = nPrev,\n        r = 0,\n        d, i, x;\n    while (isEven(b)) b = b / 2n, r++;\n    next: for (i = 0; i < a.length; i++) {\n        if (n < a[i]) continue;\n        x = modPow$2(BigInt(a[i]), b, n);\n        if (isUnit(x) || x === nPrev) continue;\n        for (d = r - 1; d != 0; d--) {\n            x = square$1(x) % n;\n            if (isUnit(x)) return false;\n            if (x === nPrev) continue next;\n        }\n        return false;\n    }\n    return true;\n}\n\nfunction isPrime$1(p) {\n    var isPrime = isBasicPrime(p);\n    if (isPrime !== undefined) return isPrime;\n    var n = abs(p);\n    var bits = bitLength$5(n);\n    if (bits <= 64)\n        return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\n    var logN = Math.log(2) * Number(bits);\n    var t = Math.ceil(logN);\n    for (var a = [], i = 0; i < t; i++) {\n        a.push(BigInt(i + 2));\n    }\n    return millerRabinTest(n, a);\n}\n\nbigint.bitLength = bitLength$5;\nbigint.isOdd = isOdd$4;\nbigint.isNegative = isNegative$3;\nbigint.abs = abs;\nbigint.isUnit = isUnit;\nbigint.compare = compare;\nbigint.modInv = modInv$3;\nbigint.modPow = modPow$2;\nbigint.isPrime = isPrime$1;\nbigint.square = square$1;\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nconst buildInt = build_int;\nconst utils$5 = utils$6;\nconst buildExp$2 = build_timesscalar;\nconst buildBatchInverse$2 = build_batchinverse;\nconst buildBatchConvertion$1 = build_batchconvertion;\nconst buildBatchOp = build_batchop;\nconst { bitLength: bitLength$4, modInv: modInv$2, modPow: modPow$1, isPrime, isOdd: isOdd$3, square } = bigint;\n\nvar build_f1m = function buildF1m(module, _q, _prefix, _intPrefix) {\n    const q = BigInt(_q);\n    const n64 = Math.floor((bitLength$4(q - 1n) - 1)/64) +1;\n    const n32 = n64*2;\n    const n8 = n64*8;\n\n    const prefix = _prefix || \"f1m\";\n    if (module.modules[prefix]) return prefix;  // already builded\n\n    const intPrefix = buildInt(module, n64, _intPrefix);\n    const pq = module.alloc(n8, utils$5.bigInt2BytesLE(q, n8));\n\n    const pR2 = module.alloc(utils$5.bigInt2BytesLE(square(1n << BigInt(n64*64)) % q, n8));\n    const pOne = module.alloc(utils$5.bigInt2BytesLE((1n << BigInt(n64*64)) % q, n8));\n    const pZero = module.alloc(utils$5.bigInt2BytesLE(0n, n8));\n    const _minusOne = q - 1n;\n    const _e = _minusOne >> 1n; // e = (p-1)/2\n    const pe = module.alloc(n8, utils$5.bigInt2BytesLE(_e, n8));\n\n    const _ePlusOne = _e + 1n; // e = (p-1)/2\n    const pePlusOne = module.alloc(n8, utils$5.bigInt2BytesLE(_ePlusOne, n8));\n\n    module.modules[prefix] = {\n        pq: pq,\n        pR2: pR2,\n        n64: n64,\n        q: q,\n        pOne: pOne,\n        pZero: pZero,\n        pePlusOne: pePlusOne\n    };\n\n    function buildOne() {\n        const f = module.addFunction(prefix+\"_one\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(intPrefix + \"_copy\", c.i32_const(pOne), c.getLocal(\"pr\")));\n    }\n\n    function buildAdd() {\n        const f = module.addFunction(prefix+\"_add\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.if(\n                c.call(intPrefix+\"_add\", c.getLocal(\"x\"),  c.getLocal(\"y\"), c.getLocal(\"r\")),\n                c.drop(c.call(intPrefix+\"_sub\", c.getLocal(\"r\"), c.i32_const(pq), c.getLocal(\"r\"))),\n                c.if(\n                    c.call(intPrefix+\"_gte\", c.getLocal(\"r\"), c.i32_const(pq)  ),\n                    c.drop(c.call(intPrefix+\"_sub\", c.getLocal(\"r\"), c.i32_const(pq), c.getLocal(\"r\"))),\n                )\n            )\n        );\n    }\n\n    function buildSub() {\n        const f = module.addFunction(prefix+\"_sub\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.if(\n                c.call(intPrefix+\"_sub\", c.getLocal(\"x\"),  c.getLocal(\"y\"), c.getLocal(\"r\")),\n                c.drop(c.call(intPrefix+\"_add\", c.getLocal(\"r\"),  c.i32_const(pq), c.getLocal(\"r\")))\n            )\n        );\n    }\n\n    function buildNeg() {\n        const f = module.addFunction(prefix+\"_neg\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.call(prefix + \"_sub\", c.i32_const(pZero), c.getLocal(\"x\"), c.getLocal(\"r\"))\n        );\n    }\n\n\n    function buildIsNegative() {\n        const f = module.addFunction(prefix+\"_isNegative\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const AUX = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.call(prefix + \"_fromMontgomery\", c.getLocal(\"x\"), AUX),\n            c.call(intPrefix + \"_gte\", AUX, c.i32_const(pePlusOne) )\n        );\n    }\n\n    function buildSign() {\n        const f = module.addFunction(prefix+\"_sign\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const AUX = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if (\n                c.call(intPrefix + \"_isZero\", c.getLocal(\"x\")),\n                c.ret(c.i32_const(0))\n            ),\n            c.call(prefix + \"_fromMontgomery\", c.getLocal(\"x\"), AUX),\n            c.if(\n                c.call(intPrefix + \"_gte\", AUX, c.i32_const(pePlusOne)),\n                c.ret(c.i32_const(-1))\n            ),\n            c.ret(c.i32_const(1))\n        );\n    }\n\n\n    function buildMReduct() {\n        const carries = module.alloc(n32*n32*8);\n\n        const f = module.addFunction(prefix+\"_mReduct\");\n        f.addParam(\"t\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"np32\", \"i64\");\n        f.addLocal(\"c\", \"i64\");\n        f.addLocal(\"m\", \"i64\");\n\n        const c = f.getCodeBuilder();\n\n        const np32 = Number(0x100000000n - modInv$2(q, 0x100000000n));\n\n        f.addCode(c.setLocal(\"np32\", c.i64_const(np32)));\n\n        for (let i=0; i<n32; i++) {\n            f.addCode(c.setLocal(\"c\", c.i64_const(0)));\n\n            f.addCode(\n                c.setLocal(\n                    \"m\",\n                    c.i64_and(\n                        c.i64_mul(\n                            c.i64_load32_u(c.getLocal(\"t\"), i*4),\n                            c.getLocal(\"np32\")\n                        ),\n                        c.i64_const(\"0xFFFFFFFF\")\n                    )\n                )\n            );\n\n            for (let j=0; j<n32; j++) {\n\n                f.addCode(\n                    c.setLocal(\"c\",\n                        c.i64_add(\n                            c.i64_add(\n                                c.i64_load32_u(c.getLocal(\"t\"), (i+j)*4),\n                                c.i64_shr_u(c.getLocal(\"c\"), c.i64_const(32))\n                            ),\n                            c.i64_mul(\n                                c.i64_load32_u(c.i32_const(pq), j*4),\n                                c.getLocal(\"m\")\n                            )\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.i64_store32(\n                        c.getLocal(\"t\"),\n                        (i+j)*4,\n                        c.getLocal(\"c\")\n                    )\n                );\n            }\n\n            f.addCode(\n                c.i64_store32(\n                    c.i32_const(carries),\n                    i*4,\n                    c.i64_shr_u(c.getLocal(\"c\"), c.i64_const(32))\n                )\n            );\n        }\n\n        f.addCode(\n            c.call(\n                prefix+\"_add\",\n                c.i32_const(carries),\n                c.i32_add(\n                    c.getLocal(\"t\"),\n                    c.i32_const(n32*4)\n                ),\n                c.getLocal(\"r\")\n            )\n        );\n    }\n\n\n\n    function buildMul() {\n\n        const f = module.addFunction(prefix+\"_mul\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"c0\", \"i64\");\n        f.addLocal(\"c1\", \"i64\");\n        f.addLocal(\"np32\", \"i64\");\n\n\n        for (let i=0;i<n32; i++) {\n            f.addLocal(\"x\"+i, \"i64\");\n            f.addLocal(\"y\"+i, \"i64\");\n            f.addLocal(\"m\"+i, \"i64\");\n            f.addLocal(\"q\"+i, \"i64\");\n        }\n\n        const c = f.getCodeBuilder();\n\n        const np32 = Number(0x100000000n - modInv$2(q, 0x100000000n));\n\n        f.addCode(c.setLocal(\"np32\", c.i64_const(np32)));\n\n\n        const loadX = [];\n        const loadY = [];\n        const loadQ = [];\n        function mulij(i, j) {\n            let X,Y;\n            if (!loadX[i]) {\n                X = c.teeLocal(\"x\"+i, c.i64_load32_u( c.getLocal(\"x\"), i*4));\n                loadX[i] = true;\n            } else {\n                X = c.getLocal(\"x\"+i);\n            }\n            if (!loadY[j]) {\n                Y = c.teeLocal(\"y\"+j, c.i64_load32_u( c.getLocal(\"y\"), j*4));\n                loadY[j] = true;\n            } else {\n                Y = c.getLocal(\"y\"+j);\n            }\n\n            return c.i64_mul( X, Y );\n        }\n\n        function mulqm(i, j) {\n            let Q,M;\n            if (!loadQ[i]) {\n                Q = c.teeLocal(\"q\"+i, c.i64_load32_u(c.i32_const(0), pq+i*4 ));\n                loadQ[i] = true;\n            } else {\n                Q = c.getLocal(\"q\"+i);\n            }\n            M = c.getLocal(\"m\"+j);\n\n            return c.i64_mul( Q, M );\n        }\n\n\n        let c0 = \"c0\";\n        let c1 = \"c1\";\n\n        for (let k=0; k<n32*2-1; k++) {\n            for (let i=Math.max(0, k-n32+1); (i<=k)&&(i<n32); i++) {\n                const j= k-i;\n\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulij(i,j)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n\n\n            for (let i=Math.max(1, k-n32+1); (i<=k)&&(i<n32); i++) {\n                const j= k-i;\n\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulqm(i,j)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n            if (k<n32) {\n                f.addCode(\n                    c.setLocal(\n                        \"m\"+k,\n                        c.i64_and(\n                            c.i64_mul(\n                                c.i64_and(\n                                    c.getLocal(c0),\n                                    c.i64_const(0xFFFFFFFF)\n                                ),\n                                c.getLocal(\"np32\")\n                            ),\n                            c.i64_const(\"0xFFFFFFFF\")\n                        )\n                    )\n                );\n\n\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulqm(0,k)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n\n\n            if (k>=n32) {\n                f.addCode(\n                    c.i64_store32(\n                        c.getLocal(\"r\"),\n                        (k-n32)*4,\n                        c.getLocal(c0)\n                    )\n                );\n            }\n            [c0, c1] = [c1, c0];\n            f.addCode(\n                c.setLocal(c1,\n                    c.i64_shr_u(\n                        c.getLocal(c0),\n                        c.i64_const(32)\n                    )\n                )\n            );\n        }\n        f.addCode(\n            c.i64_store32(\n                c.getLocal(\"r\"),\n                n32*4-4,\n                c.getLocal(c0)\n            )\n        );\n\n        f.addCode(\n            c.if(\n                c.i32_wrap_i64(c.getLocal(c1)),\n                c.drop(c.call(intPrefix+\"_sub\", c.getLocal(\"r\"), c.i32_const(pq), c.getLocal(\"r\"))),\n                c.if(\n                    c.call(intPrefix+\"_gte\", c.getLocal(\"r\"), c.i32_const(pq)  ),\n                    c.drop(c.call(intPrefix+\"_sub\", c.getLocal(\"r\"), c.i32_const(pq), c.getLocal(\"r\"))),\n                )\n            )\n        );\n    }\n\n\n    function buildSquare() {\n\n        const f = module.addFunction(prefix+\"_square\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"c0\", \"i64\");\n        f.addLocal(\"c1\", \"i64\");\n        f.addLocal(\"c0_old\", \"i64\");\n        f.addLocal(\"c1_old\", \"i64\");\n        f.addLocal(\"np32\", \"i64\");\n\n\n        for (let i=0;i<n32; i++) {\n            f.addLocal(\"x\"+i, \"i64\");\n            f.addLocal(\"m\"+i, \"i64\");\n            f.addLocal(\"q\"+i, \"i64\");\n        }\n\n        const c = f.getCodeBuilder();\n\n        const np32 = Number(0x100000000n - modInv$2(q, 0x100000000n));\n\n        f.addCode(c.setLocal(\"np32\", c.i64_const(np32)));\n\n\n        const loadX = [];\n        const loadQ = [];\n        function mulij(i, j) {\n            let X,Y;\n            if (!loadX[i]) {\n                X = c.teeLocal(\"x\"+i, c.i64_load32_u( c.getLocal(\"x\"), i*4));\n                loadX[i] = true;\n            } else {\n                X = c.getLocal(\"x\"+i);\n            }\n            if (!loadX[j]) {\n                Y = c.teeLocal(\"x\"+j, c.i64_load32_u( c.getLocal(\"x\"), j*4));\n                loadX[j] = true;\n            } else {\n                Y = c.getLocal(\"x\"+j);\n            }\n\n            return c.i64_mul( X, Y );\n        }\n\n        function mulqm(i, j) {\n            let Q,M;\n            if (!loadQ[i]) {\n                Q = c.teeLocal(\"q\"+i, c.i64_load32_u(c.i32_const(0), pq+i*4 ));\n                loadQ[i] = true;\n            } else {\n                Q = c.getLocal(\"q\"+i);\n            }\n            M = c.getLocal(\"m\"+j);\n\n            return c.i64_mul( Q, M );\n        }\n\n\n        let c0 = \"c0\";\n        let c1 = \"c1\";\n        let c0_old = \"c0_old\";\n        let c1_old = \"c1_old\";\n\n        for (let k=0; k<n32*2-1; k++) {\n            f.addCode(\n                c.setLocal(c0, c.i64_const(0)),\n                c.setLocal(c1, c.i64_const(0)),\n            );\n            for (let i=Math.max(0, k-n32+1); (i<((k+1)>>1) )&&(i<n32); i++) {\n                const j= k-i;\n\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulij(i,j)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n\n            // Multiply by 2\n            f.addCode(\n                c.setLocal(c0,\n                    c.i64_shl(\n                        c.i64_and(\n                            c.getLocal(c0),\n                            c.i64_const(0xFFFFFFFF)\n                        ),\n                        c.i64_const(1)\n                    )\n                )\n            );\n\n            f.addCode(\n                c.setLocal(c1,\n                    c.i64_add(\n                        c.i64_shl(\n                            c.getLocal(c1),\n                            c.i64_const(1)\n                        ),\n                        c.i64_shr_u(\n                            c.getLocal(c0),\n                            c.i64_const(32)\n                        )\n                    )\n                )\n            );\n\n            if (k%2 == 0) {\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulij(k>>1, k>>1)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n\n            // Add the old carry\n\n            if (k>0) {\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            c.i64_and(\n                                c.getLocal(c0_old),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.i64_add(\n                                c.getLocal(c1),\n                                c.i64_shr_u(\n                                    c.getLocal(c0),\n                                    c.i64_const(32)\n                                )\n                            ),\n                            c.getLocal(c1_old)\n                        )\n                    )\n                );\n            }\n\n\n            for (let i=Math.max(1, k-n32+1); (i<=k)&&(i<n32); i++) {\n                const j= k-i;\n\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulqm(i,j)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n            if (k<n32) {\n                f.addCode(\n                    c.setLocal(\n                        \"m\"+k,\n                        c.i64_and(\n                            c.i64_mul(\n                                c.i64_and(\n                                    c.getLocal(c0),\n                                    c.i64_const(0xFFFFFFFF)\n                                ),\n                                c.getLocal(\"np32\")\n                            ),\n                            c.i64_const(\"0xFFFFFFFF\")\n                        )\n                    )\n                );\n\n\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulqm(0,k)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n\n            if (k>=n32) {\n                f.addCode(\n                    c.i64_store32(\n                        c.getLocal(\"r\"),\n                        (k-n32)*4,\n                        c.getLocal(c0)\n                    )\n                );\n            }\n            f.addCode(\n                c.setLocal(\n                    c0_old,\n                    c.getLocal(c1)\n                ),\n                c.setLocal(\n                    c1_old,\n                    c.i64_shr_u(\n                        c.getLocal(c0_old),\n                        c.i64_const(32)\n                    )\n                )\n            );\n        }\n        f.addCode(\n            c.i64_store32(\n                c.getLocal(\"r\"),\n                n32*4-4,\n                c.getLocal(c0_old)\n            )\n        );\n\n        f.addCode(\n            c.if(\n                c.i32_wrap_i64(c.getLocal(c1_old)),\n                c.drop(c.call(intPrefix+\"_sub\", c.getLocal(\"r\"), c.i32_const(pq), c.getLocal(\"r\"))),\n                c.if(\n                    c.call(intPrefix+\"_gte\", c.getLocal(\"r\"), c.i32_const(pq)  ),\n                    c.drop(c.call(intPrefix+\"_sub\", c.getLocal(\"r\"), c.i32_const(pq), c.getLocal(\"r\"))),\n                )\n            )\n        );\n    }\n\n\n    function buildSquareOld() {\n        const f = module.addFunction(prefix+\"_squareOld\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(prefix + \"_mul\", c.getLocal(\"x\"), c.getLocal(\"x\"), c.getLocal(\"r\")));\n    }\n\n    function buildToMontgomery() {\n        const f = module.addFunction(prefix+\"_toMontgomery\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n        f.addCode(c.call(prefix+\"_mul\", c.getLocal(\"x\"), c.i32_const(pR2), c.getLocal(\"r\")));\n    }\n\n    function buildFromMontgomery() {\n\n        const pAux2 = module.alloc(n8*2);\n\n        const f = module.addFunction(prefix+\"_fromMontgomery\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n        f.addCode(c.call(intPrefix + \"_copy\", c.getLocal(\"x\"), c.i32_const(pAux2) ));\n        f.addCode(c.call(intPrefix + \"_zero\", c.i32_const(pAux2 + n8) ));\n        f.addCode(c.call(prefix+\"_mReduct\", c.i32_const(pAux2), c.getLocal(\"r\")));\n    }\n\n    function buildInverse() {\n\n        const f = module.addFunction(prefix+ \"_inverse\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n        f.addCode(c.call(prefix + \"_fromMontgomery\", c.getLocal(\"x\"), c.getLocal(\"r\")));\n        f.addCode(c.call(intPrefix + \"_inverseMod\", c.getLocal(\"r\"), c.i32_const(pq), c.getLocal(\"r\")));\n        f.addCode(c.call(prefix + \"_toMontgomery\", c.getLocal(\"r\"), c.getLocal(\"r\")));\n    }\n\n    // Calculate various valuse needed for sqrt\n\n\n    let _nqr = 2n;\n    if (isPrime(q)) {\n        while (modPow$1(_nqr, _e, q) !== _minusOne) _nqr = _nqr + 1n;\n    }\n\n    let s2 = 0;\n    let _t = _minusOne;\n\n    while ((!isOdd$3(_t))&&(_t !== 0n)) {\n        s2++;\n        _t = _t >> 1n;\n    }\n    const pt = module.alloc(n8, utils$5.bigInt2BytesLE(_t, n8));\n\n    const _nqrToT = modPow$1(_nqr, _t, q);\n    const pNqrToT = module.alloc(utils$5.bigInt2BytesLE((_nqrToT << BigInt(n64*64)) % q, n8));\n\n    const _tPlusOneOver2 = (_t + 1n) >> 1n;\n    const ptPlusOneOver2 = module.alloc(n8, utils$5.bigInt2BytesLE(_tPlusOneOver2, n8));\n\n    function buildSqrt() {\n\n        const f = module.addFunction(prefix+ \"_sqrt\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"m\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"j\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const ONE = c.i32_const(pOne);\n        const C = c.i32_const(module.alloc(n8));\n        const T = c.i32_const(module.alloc(n8));\n        const R = c.i32_const(module.alloc(n8));\n        const SQ = c.i32_const(module.alloc(n8));\n        const B = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n\n            // If (n==0) return 0\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"n\")),\n                c.ret(\n                    c.call(prefix + \"_zero\", c.getLocal(\"r\"))\n                )\n            ),\n\n            c.setLocal(\"m\", c.i32_const(s2)),\n            c.call(prefix + \"_copy\", c.i32_const(pNqrToT), C),\n            c.call(prefix + \"_exp\", c.getLocal(\"n\"), c.i32_const(pt), c.i32_const(n8), T),\n            c.call(prefix + \"_exp\", c.getLocal(\"n\"), c.i32_const(ptPlusOneOver2), c.i32_const(n8), R),\n\n            c.block(c.loop(\n                c.br_if(1, c.call(prefix + \"_eq\", T, ONE)),\n\n                c.call(prefix + \"_square\", T, SQ),\n                c.setLocal(\"i\", c.i32_const(1)),\n                c.block(c.loop(\n                    c.br_if(1, c.call(prefix + \"_eq\", SQ, ONE)),\n                    c.call(prefix + \"_square\", SQ, SQ),\n                    c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                    c.br(0)\n                )),\n\n                c.call(prefix + \"_copy\", C, B),\n                c.setLocal(\"j\", c.i32_sub(c.i32_sub( c.getLocal(\"m\"), c.getLocal(\"i\")), c.i32_const(1)) ),\n                c.block(c.loop(\n                    c.br_if(1, c.i32_eqz(c.getLocal(\"j\"))),\n                    c.call(prefix + \"_square\", B, B),\n                    c.setLocal(\"j\", c.i32_sub(c.getLocal(\"j\"), c.i32_const(1))),\n                    c.br(0)\n                )),\n\n                c.setLocal(\"m\", c.getLocal(\"i\")),\n                c.call(prefix + \"_square\", B, C),\n                c.call(prefix + \"_mul\", T, C, T),\n                c.call(prefix + \"_mul\", R, B, R),\n\n                c.br(0)\n            )),\n\n            c.if(\n                c.call(prefix + \"_isNegative\", R),\n                c.call(prefix + \"_neg\", R, c.getLocal(\"r\")),\n                c.call(prefix + \"_copy\", R, c.getLocal(\"r\")),\n            )\n        );\n    }\n\n    function buildIsSquare() {\n        const f = module.addFunction(prefix+\"_isSquare\");\n        f.addParam(\"n\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const ONE = c.i32_const(pOne);\n        const AUX = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"n\")),\n                c.ret(c.i32_const(1))\n            ),\n            c.call(prefix + \"_exp\", c.getLocal(\"n\"), c.i32_const(pe), c.i32_const(n8), AUX),\n            c.call(prefix + \"_eq\", AUX, ONE)\n        );\n    }\n\n\n    function buildLoad() {\n        const f = module.addFunction(prefix+\"_load\");\n        f.addParam(\"scalar\", \"i32\");\n        f.addParam(\"scalarLen\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"p\", \"i32\");\n        f.addLocal(\"l\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"j\", \"i32\");\n        const c = f.getCodeBuilder();\n\n        const R = c.i32_const(module.alloc(n8));\n        const pAux = module.alloc(n8);\n        const AUX = c.i32_const(pAux);\n\n        f.addCode(\n            c.call(intPrefix + \"_zero\", c.getLocal(\"r\")),\n            c.setLocal(\"i\", c.i32_const(n8)),\n            c.setLocal(\"p\", c.getLocal(\"scalar\")),\n            c.block(c.loop(\n                c.br_if(1, c.i32_gt_u(c.getLocal(\"i\"), c.getLocal(\"scalarLen\"))),\n\n                c.if(\n                    c.i32_eq(c.getLocal(\"i\"), c.i32_const(n8)),\n                    c.call(prefix + \"_one\", R),\n                    c.call(prefix + \"_mul\", R, c.i32_const(pR2), R)\n                ),\n                c.call(prefix + \"_mul\", c.getLocal(\"p\"), R, AUX),\n                c.call(prefix + \"_add\", c.getLocal(\"r\"), AUX, c.getLocal(\"r\")),\n\n                c.setLocal(\"p\", c.i32_add(c.getLocal(\"p\"), c.i32_const(n8))),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(n8))),\n                c.br(0)\n            )),\n\n            c.setLocal(\"l\", c.i32_rem_u( c.getLocal(\"scalarLen\"), c.i32_const(n8))),\n            c.if(c.i32_eqz(c.getLocal(\"l\")), c.ret([])),\n            c.call(intPrefix + \"_zero\", AUX),\n            c.setLocal(\"j\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(1, c.i32_eq(c.getLocal(\"j\"), c.getLocal(\"l\"))),\n\n                c.i32_store8(\n                    c.getLocal(\"j\"),\n                    pAux,\n                    c.i32_load8_u(c.getLocal(\"p\")),\n                ),\n                c.setLocal(\"p\", c.i32_add(c.getLocal(\"p\"), c.i32_const(1))),\n                c.setLocal(\"j\", c.i32_add(c.getLocal(\"j\"), c.i32_const(1))),\n                c.br(0)\n            )),\n\n            c.if(\n                c.i32_eq(c.getLocal(\"i\"), c.i32_const(n8)),\n                c.call(prefix + \"_one\", R),\n                c.call(prefix + \"_mul\", R, c.i32_const(pR2), R)\n            ),\n            c.call(prefix + \"_mul\", AUX, R, AUX),\n            c.call(prefix + \"_add\", c.getLocal(\"r\"), AUX, c.getLocal(\"r\")),\n        );\n    }\n\n    function buildTimesScalar() {\n        const f = module.addFunction(prefix+\"_timesScalar\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"scalar\", \"i32\");\n        f.addParam(\"scalarLen\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const AUX = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.call(prefix + \"_load\", c.getLocal(\"scalar\"), c.getLocal(\"scalarLen\"), AUX),\n            c.call(prefix + \"_toMontgomery\", AUX, AUX),\n            c.call(prefix + \"_mul\", c.getLocal(\"x\"), AUX, c.getLocal(\"r\")),\n        );\n    }\n\n    function buildIsOne() {\n        const f = module.addFunction(prefix+\"_isOne\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n        f.addCode(\n            c.ret(c.call(intPrefix + \"_eq\", c.getLocal(\"x\"), c.i32_const(pOne)))\n        );\n    }\n\n\n    module.exportFunction(intPrefix + \"_copy\", prefix+\"_copy\");\n    module.exportFunction(intPrefix + \"_zero\", prefix+\"_zero\");\n    module.exportFunction(intPrefix + \"_isZero\", prefix+\"_isZero\");\n    module.exportFunction(intPrefix + \"_eq\", prefix+\"_eq\");\n\n    buildIsOne();\n    buildAdd();\n    buildSub();\n    buildNeg();\n    buildMReduct();\n    buildMul();\n    buildSquare();\n    buildSquareOld();\n    buildToMontgomery();\n    buildFromMontgomery();\n    buildIsNegative();\n    buildSign();\n    buildInverse();\n    buildOne();\n    buildLoad();\n    buildTimesScalar();\n    buildBatchInverse$2(module, prefix);\n    buildBatchConvertion$1(module, prefix + \"_batchToMontgomery\", prefix + \"_toMontgomery\", n8, n8);\n    buildBatchConvertion$1(module, prefix + \"_batchFromMontgomery\", prefix + \"_fromMontgomery\", n8, n8);\n    buildBatchConvertion$1(module, prefix + \"_batchNeg\", prefix + \"_neg\", n8, n8);\n    buildBatchOp(module, prefix + \"_batchAdd\", prefix + \"_add\", n8, n8);\n    buildBatchOp(module, prefix + \"_batchSub\", prefix + \"_sub\", n8, n8);\n    buildBatchOp(module, prefix + \"_batchMul\", prefix + \"_mul\", n8, n8);\n\n    module.exportFunction(prefix + \"_add\");\n    module.exportFunction(prefix + \"_sub\");\n    module.exportFunction(prefix + \"_neg\");\n    module.exportFunction(prefix + \"_isNegative\");\n    module.exportFunction(prefix + \"_isOne\");\n    module.exportFunction(prefix + \"_sign\");\n    module.exportFunction(prefix + \"_mReduct\");\n    module.exportFunction(prefix + \"_mul\");\n    module.exportFunction(prefix + \"_square\");\n    module.exportFunction(prefix + \"_squareOld\");\n    module.exportFunction(prefix + \"_fromMontgomery\");\n    module.exportFunction(prefix + \"_toMontgomery\");\n    module.exportFunction(prefix + \"_inverse\");\n    module.exportFunction(prefix + \"_one\");\n    module.exportFunction(prefix + \"_load\");\n    module.exportFunction(prefix + \"_timesScalar\");\n    buildExp$2(\n        module,\n        prefix + \"_exp\",\n        n8,\n        prefix + \"_mul\",\n        prefix + \"_square\",\n        intPrefix + \"_copy\",\n        prefix + \"_one\",\n    );\n    module.exportFunction(prefix + \"_exp\");\n    module.exportFunction(prefix + \"_batchInverse\");\n    if (isPrime(q)) {\n        buildSqrt();\n        buildIsSquare();\n        module.exportFunction(prefix + \"_sqrt\");\n        module.exportFunction(prefix + \"_isSquare\");\n    }\n    module.exportFunction(prefix + \"_batchToMontgomery\");\n    module.exportFunction(prefix + \"_batchFromMontgomery\");\n    // console.log(module.functionIdxByName);\n\n    return prefix;\n};\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nconst buildF1m$2 =build_f1m;\nconst { bitLength: bitLength$3 } = bigint;\n\nvar build_f1 = function buildF1(module, _q, _prefix, _f1mPrefix, _intPrefix) {\n\n    const q = BigInt(_q);\n    const n64 = Math.floor((bitLength$3(q - 1n) - 1)/64) +1;\n    const n8 = n64*8;\n\n    const prefix = _prefix || \"f1\";\n    if (module.modules[prefix]) return prefix;  // already builded\n    module.modules[prefix] = {\n        n64: n64\n    };\n\n    const intPrefix = _intPrefix || \"int\";\n    const f1mPrefix = buildF1m$2(module, q, _f1mPrefix, intPrefix);\n\n\n    const pR2 =     module.modules[f1mPrefix].pR2;\n    const pq =     module.modules[f1mPrefix].pq;\n    const pePlusOne = module.modules[f1mPrefix].pePlusOne;\n\n    function buildMul() {\n        const pAux1 = module.alloc(n8);\n\n        const f = module.addFunction(prefix+ \"_mul\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n        f.addCode(c.call(f1mPrefix + \"_mul\", c.getLocal(\"x\"), c.getLocal(\"y\"), c.i32_const(pAux1)));\n        f.addCode(c.call(f1mPrefix + \"_mul\", c.i32_const(pAux1), c.i32_const(pR2), c.getLocal(\"r\")));\n    }\n\n    function buildSquare() {\n        const f = module.addFunction(prefix+\"_square\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(prefix + \"_mul\", c.getLocal(\"x\"), c.getLocal(\"x\"), c.getLocal(\"r\")));\n    }\n\n\n    function buildInverse() {\n\n        const f = module.addFunction(prefix+ \"_inverse\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n        f.addCode(c.call(intPrefix + \"_inverseMod\", c.getLocal(\"x\"), c.i32_const(pq), c.getLocal(\"r\")));\n    }\n\n    function buildIsNegative() {\n        const f = module.addFunction(prefix+\"_isNegative\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.call(intPrefix + \"_gte\", c.getLocal(\"x\"), c.i32_const(pePlusOne) )\n        );\n    }\n\n\n    buildMul();\n    buildSquare();\n    buildInverse();\n    buildIsNegative();\n    module.exportFunction(f1mPrefix + \"_add\", prefix + \"_add\");\n    module.exportFunction(f1mPrefix + \"_sub\", prefix + \"_sub\");\n    module.exportFunction(f1mPrefix + \"_neg\", prefix + \"_neg\");\n    module.exportFunction(prefix + \"_mul\");\n    module.exportFunction(prefix + \"_square\");\n    module.exportFunction(prefix + \"_inverse\");\n    module.exportFunction(prefix + \"_isNegative\");\n    module.exportFunction(f1mPrefix + \"_copy\", prefix+\"_copy\");\n    module.exportFunction(f1mPrefix + \"_zero\", prefix+\"_zero\");\n    module.exportFunction(f1mPrefix + \"_one\", prefix+\"_one\");\n    module.exportFunction(f1mPrefix + \"_isZero\", prefix+\"_isZero\");\n    module.exportFunction(f1mPrefix + \"_eq\", prefix+\"_eq\");\n\n    return prefix;\n};\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nconst buildExp$1 = build_timesscalar;\nconst buildBatchInverse$1 = build_batchinverse;\nconst utils$4 = utils$6;\n\nvar build_f2m = function buildF2m(module, mulNonResidueFn, prefix, f1mPrefix) {\n\n    if (module.modules[prefix]) return prefix;  // already builded\n\n    const f1n8 = module.modules[f1mPrefix].n64*8;\n    const q = module.modules[f1mPrefix].q;\n\n    module.modules[prefix] = {\n        n64: module.modules[f1mPrefix].n64*2\n    };\n\n    function buildAdd() {\n        const f = module.addFunction(prefix+\"_add\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const y0 = c.getLocal(\"y\");\n        const y1 = c.i32_add(c.getLocal(\"y\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_add\", x0, y0, r0),\n            c.call(f1mPrefix+\"_add\", x1, y1, r1),\n        );\n    }\n\n    function buildTimesScalar() {\n        const f = module.addFunction(prefix+\"_timesScalar\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"scalar\", \"i32\");\n        f.addParam(\"scalarLen\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_timesScalar\", x0, c.getLocal(\"scalar\"), c.getLocal(\"scalarLen\"), r0),\n            c.call(f1mPrefix+\"_timesScalar\", x1, c.getLocal(\"scalar\"), c.getLocal(\"scalarLen\"), r1),\n        );\n    }\n\n    function buildSub() {\n        const f = module.addFunction(prefix+\"_sub\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const y0 = c.getLocal(\"y\");\n        const y1 = c.i32_add(c.getLocal(\"y\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_sub\", x0, y0, r0),\n            c.call(f1mPrefix+\"_sub\", x1, y1, r1),\n        );\n    }\n\n    function buildNeg() {\n        const f = module.addFunction(prefix+\"_neg\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_neg\", x0, r0),\n            c.call(f1mPrefix+\"_neg\", x1, r1),\n        );\n    }\n\n    function buildConjugate() {\n        const f = module.addFunction(prefix+\"_conjugate\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_copy\", x0, r0),\n            c.call(f1mPrefix+\"_neg\", x1, r1),\n        );\n    }\n\n\n    function buildIsNegative() {\n        const f = module.addFunction(prefix+\"_isNegative\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.if(\n                c.call(f1mPrefix+\"_isZero\", x1),\n                c.ret(c.call(f1mPrefix+\"_isNegative\", x0))\n            ),\n            c.ret(c.call(f1mPrefix+\"_isNegative\", x1))\n        );\n    }\n\n    function buildMul() {\n        const f = module.addFunction(prefix+\"_mul\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const y0 = c.getLocal(\"y\");\n        const y1 = c.i32_add(c.getLocal(\"y\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        const A = c.i32_const(module.alloc(f1n8));\n        const B = c.i32_const(module.alloc(f1n8));\n        const C = c.i32_const(module.alloc(f1n8));\n        const D = c.i32_const(module.alloc(f1n8));\n\n\n        f.addCode(\n            c.call(f1mPrefix + \"_mul\", x0, y0, A),             // A = x0*y0\n            c.call(f1mPrefix + \"_mul\", x1, y1, B),             // B = x1*y1\n\n            c.call(f1mPrefix + \"_add\", x0, x1, C),             // C = x0 + x1\n            c.call(f1mPrefix + \"_add\", y0, y1, D),             // D = y0 + y1\n            c.call(f1mPrefix + \"_mul\", C, D, C),               // C = (x0 + x1)*(y0 + y1) = x0*y0+x0*y1+x1*y0+x1*y1\n\n            //  c.call(f1mPrefix + \"_mul\", B, c.i32_const(pNonResidue), r0),  // r0 = nr*(x1*y1)\n            c.call(mulNonResidueFn, B, r0),  // r0 = nr*(x1*y1)\n            c.call(f1mPrefix + \"_add\", A, r0, r0),             // r0 = x0*y0 + nr*(x1*y1)\n            c.call(f1mPrefix + \"_add\", A, B, r1),             // r1 = x0*y0+x1*y1\n            c.call(f1mPrefix + \"_sub\", C, r1, r1)              // r1 = x0*y0+x0*y1+x1*y0+x1*y1 - x0*y0+x1*y1 = x0*y1+x1*y0\n        );\n\n    }\n\n    function buildMul1() {\n        const f = module.addFunction(prefix+\"_mul1\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const y = c.getLocal(\"y\");\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n\n        f.addCode(\n            c.call(f1mPrefix + \"_mul\", x0, y, r0),             // A = x0*y\n            c.call(f1mPrefix + \"_mul\", x1, y, r1),             // B = x1*y\n        );\n    }\n\n    function buildSquare() {\n        const f = module.addFunction(prefix+\"_square\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        const AB = c.i32_const(module.alloc(f1n8));\n        const APB = c.i32_const(module.alloc(f1n8));\n        const APNB = c.i32_const(module.alloc(f1n8));\n        const ABPNAB = c.i32_const(module.alloc(f1n8));\n\n\n        f.addCode(\n            // AB = x0*y1\n            c.call(f1mPrefix + \"_mul\", x0, x1, AB),\n\n            // APB = x0+y1\n            c.call(f1mPrefix + \"_add\", x0, x1, APB),\n\n            // APBN0 = x0 + nr*x1\n            c.call(mulNonResidueFn, x1, APNB),\n            c.call(f1mPrefix + \"_add\", x0, APNB, APNB),\n\n            // ABPNAB = ab + nr*ab\n            c.call(mulNonResidueFn, AB, ABPNAB),\n            c.call(f1mPrefix + \"_add\", ABPNAB, AB, ABPNAB),\n\n            // r0 = APB * APNB - ABPNAB\n            c.call(f1mPrefix + \"_mul\", APB, APNB, r0),\n            c.call(f1mPrefix + \"_sub\", r0, ABPNAB, r0),\n\n            // r1 = AB + AB\n            c.call(f1mPrefix + \"_add\", AB, AB, r1),\n        );\n\n    }\n\n\n    function buildToMontgomery() {\n        const f = module.addFunction(prefix+\"_toMontgomery\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_toMontgomery\", x0, r0),\n            c.call(f1mPrefix+\"_toMontgomery\", x1, r1)\n        );\n    }\n\n    function buildFromMontgomery() {\n        const f = module.addFunction(prefix+\"_fromMontgomery\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_fromMontgomery\", x0, r0),\n            c.call(f1mPrefix+\"_fromMontgomery\", x1, r1)\n        );\n    }\n\n    function buildCopy() {\n        const f = module.addFunction(prefix+\"_copy\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_copy\", x0, r0),\n            c.call(f1mPrefix+\"_copy\", x1, r1)\n        );\n    }\n\n    function buildZero() {\n        const f = module.addFunction(prefix+\"_zero\");\n        f.addParam(\"x\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_zero\", x0),\n            c.call(f1mPrefix+\"_zero\", x1)\n        );\n    }\n\n    function buildOne() {\n        const f = module.addFunction(prefix+\"_one\");\n        f.addParam(\"x\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_one\", x0),\n            c.call(f1mPrefix+\"_zero\", x1)\n        );\n    }\n\n    function buildEq() {\n        const f = module.addFunction(prefix+\"_eq\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const y0 = c.getLocal(\"y\");\n        const y1 = c.i32_add(c.getLocal(\"y\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.i32_and(\n                c.call(f1mPrefix+\"_eq\", x0, y0),\n                c.call(f1mPrefix+\"_eq\", x1, y1)\n            )\n        );\n    }\n\n    function buildIsZero() {\n        const f = module.addFunction(prefix+\"_isZero\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.i32_and(\n                c.call(f1mPrefix+\"_isZero\", x0),\n                c.call(f1mPrefix+\"_isZero\", x1)\n            )\n        );\n    }\n\n    function buildInverse() {\n        const f = module.addFunction(prefix+\"_inverse\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        const t0 = c.i32_const(module.alloc(f1n8));\n        const t1 = c.i32_const(module.alloc(f1n8));\n        const t2 = c.i32_const(module.alloc(f1n8));\n        const t3 = c.i32_const(module.alloc(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_square\", x0, t0),\n            c.call(f1mPrefix+\"_square\", x1, t1),\n            // c.call(f1mPrefix+\"_mul\", t1, c.i32_const(pNonResidue), t2),\n            c.call(mulNonResidueFn, t1, t2),\n\n            c.call(f1mPrefix+\"_sub\", t0, t2, t2),\n            c.call(f1mPrefix+\"_inverse\", t2, t3),\n\n            c.call(f1mPrefix+\"_mul\", x0, t3, r0),\n            c.call(f1mPrefix+\"_mul\", x1, t3, r1),\n            c.call(f1mPrefix+\"_neg\", r1, r1),\n        );\n    }\n\n\n    function buildSign() {\n        const f = module.addFunction(prefix+\"_sign\");\n        f.addParam(\"x\", \"i32\");\n        f.addLocal(\"s\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.setLocal(\"s\" , c.call( f1mPrefix + \"_sign\", x1)),\n            c.if(\n                c.getLocal(\"s\"),\n                c.ret(c.getLocal(\"s\"))\n            ),\n            c.ret(c.call( f1mPrefix + \"_sign\", x0))\n        );\n    }\n\n    function buildIsOne() {\n        const f = module.addFunction(prefix+\"_isOne\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.ret(c.i32_and(\n                c.call(f1mPrefix + \"_isOne\", x0),\n                c.call(f1mPrefix + \"_isZero\", x1),\n            ))\n        );\n    }\n\n\n    // Check here: https://eprint.iacr.org/2012/685.pdf\n    // Alg 9adj\n    function buildSqrt() {\n\n        const f = module.addFunction(prefix+\"_sqrt\");\n        f.addParam(\"a\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        // BigInt can't take `undefined` so we use `|| 0`\n        const e34 = c.i32_const(module.alloc(utils$4.bigInt2BytesLE((BigInt(q || 0) - 3n) / 4n, f1n8 )));\n        // BigInt can't take `undefined` so we use `|| 0`\n        const e12 = c.i32_const(module.alloc(utils$4.bigInt2BytesLE((BigInt(q || 0) - 1n) / 2n, f1n8 )));\n\n        const a = c.getLocal(\"a\");\n        const a1 = c.i32_const(module.alloc(f1n8*2));\n        const alpha = c.i32_const(module.alloc(f1n8*2));\n        const a0 = c.i32_const(module.alloc(f1n8*2));\n        const pn1 = module.alloc(f1n8*2);\n        const n1 = c.i32_const(pn1);\n        const n1a = c.i32_const(pn1);\n        const n1b = c.i32_const(pn1+f1n8);\n        const x0 = c.i32_const(module.alloc(f1n8*2));\n        const b = c.i32_const(module.alloc(f1n8*2));\n\n        f.addCode(\n\n            c.call(prefix + \"_one\", n1),\n            c.call(prefix + \"_neg\", n1, n1),\n\n            // const a1 = F.pow(a, F.sqrt_e34);\n            c.call(prefix + \"_exp\", a, e34, c.i32_const(f1n8), a1),\n\n            // const a1 = F.pow(a, F.sqrt_e34);\n            c.call(prefix + \"_square\", a1, alpha),\n            c.call(prefix + \"_mul\", a, alpha, alpha),\n\n            // const a0 = F.mul(F.frobenius(1, alfa), alfa);\n            c.call(prefix + \"_conjugate\", alpha, a0),\n            c.call(prefix + \"_mul\", a0, alpha, a0),\n\n            // if (F.eq(a0, F.negone)) return null;\n            c.if(c.call(prefix + \"_eq\",a0,n1), c.unreachable() ),\n\n            // const x0 = F.mul(a1, a);\n            c.call(prefix + \"_mul\", a1, a, x0),\n\n            // if (F.eq(alfa, F.negone)) {\n            c.if(\n                c.call(prefix + \"_eq\", alpha, n1),\n                [\n                    // x = F.mul(x0, [F.F.zero, F.F.one]);\n                    ...c.call(f1mPrefix + \"_zero\", n1a),\n                    ...c.call(f1mPrefix + \"_one\", n1b),\n                    ...c.call(prefix + \"_mul\", n1, x0, c.getLocal(\"pr\")),\n                ],\n                [\n                    // const b = F.pow(F.add(F.one, alfa), F.sqrt_e12);\n                    ...c.call(prefix + \"_one\", b),\n                    ...c.call(prefix + \"_add\", b, alpha, b),\n                    ...c.call(prefix + \"_exp\", b, e12, c.i32_const(f1n8), b),\n\n                    // x = F.mul(b, x0);\n                    ...c.call(prefix + \"_mul\", b, x0, c.getLocal(\"pr\")),\n                ]\n            )\n        );\n\n    }\n\n\n    function buildIsSquare() {\n\n        const f = module.addFunction(prefix+\"_isSquare\");\n        f.addParam(\"a\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        // BigInt can't take `undefined` so we use `|| 0`\n        const e34 = c.i32_const(module.alloc(utils$4.bigInt2BytesLE((BigInt(q || 0) - 3n) / 4n, f1n8 )));\n\n        const a = c.getLocal(\"a\");\n        const a1 = c.i32_const(module.alloc(f1n8*2));\n        const alpha = c.i32_const(module.alloc(f1n8*2));\n        const a0 = c.i32_const(module.alloc(f1n8*2));\n        const pn1 = module.alloc(f1n8*2);\n        const n1 = c.i32_const(pn1);\n\n        f.addCode(\n\n            c.call(prefix + \"_one\", n1),\n            c.call(prefix + \"_neg\", n1, n1),\n\n            // const a1 = F.pow(a, F.sqrt_e34);\n            c.call(prefix + \"_exp\", a, e34, c.i32_const(f1n8), a1),\n\n            // const a1 = F.pow(a, F.sqrt_e34);\n            c.call(prefix + \"_square\", a1, alpha),\n            c.call(prefix + \"_mul\", a, alpha, alpha),\n\n            // const a0 = F.mul(F.frobenius(1, alfa), alfa);\n            c.call(prefix + \"_conjugate\", alpha, a0),\n            c.call(prefix + \"_mul\", a0, alpha, a0),\n\n            // if (F.eq(a0, F.negone)) return null;\n            c.if(\n                c.call(\n                    prefix + \"_eq\",\n                    a0,\n                    n1\n                ),\n                c.ret(c.i32_const(0))\n            ),\n            c.ret(c.i32_const(1))\n        );\n\n    }\n\n\n    buildIsZero();\n    buildIsOne();\n    buildZero();\n    buildOne();\n    buildCopy();\n    buildMul();\n    buildMul1();\n    buildSquare();\n    buildAdd();\n    buildSub();\n    buildNeg();\n    buildConjugate();\n    buildToMontgomery();\n    buildFromMontgomery();\n    buildEq();\n    buildInverse();\n    buildTimesScalar();\n    buildSign();\n    buildIsNegative();\n\n    module.exportFunction(prefix + \"_isZero\");\n    module.exportFunction(prefix + \"_isOne\");\n    module.exportFunction(prefix + \"_zero\");\n    module.exportFunction(prefix + \"_one\");\n    module.exportFunction(prefix + \"_copy\");\n    module.exportFunction(prefix + \"_mul\");\n    module.exportFunction(prefix + \"_mul1\");\n    module.exportFunction(prefix + \"_square\");\n    module.exportFunction(prefix + \"_add\");\n    module.exportFunction(prefix + \"_sub\");\n    module.exportFunction(prefix + \"_neg\");\n    module.exportFunction(prefix + \"_sign\");\n    module.exportFunction(prefix + \"_conjugate\");\n    module.exportFunction(prefix + \"_fromMontgomery\");\n    module.exportFunction(prefix + \"_toMontgomery\");\n    module.exportFunction(prefix + \"_eq\");\n    module.exportFunction(prefix + \"_inverse\");\n    buildBatchInverse$1(module, prefix);\n    buildExp$1(\n        module,\n        prefix + \"_exp\",\n        f1n8*2,\n        prefix + \"_mul\",\n        prefix + \"_square\",\n        prefix + \"_copy\",\n        prefix + \"_one\",\n    );\n    buildSqrt();\n    buildIsSquare();\n\n    module.exportFunction(prefix + \"_exp\");\n    module.exportFunction(prefix + \"_timesScalar\");\n    module.exportFunction(prefix + \"_batchInverse\");\n    module.exportFunction(prefix + \"_sqrt\");\n    module.exportFunction(prefix + \"_isSquare\");\n    module.exportFunction(prefix + \"_isNegative\");\n\n\n    return prefix;\n};\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nconst buildExp = build_timesscalar;\nconst buildBatchInverse = build_batchinverse;\n\nvar build_f3m = function buildF3m(module, mulNonResidueFn, prefix, f1mPrefix) {\n\n    if (module.modules[prefix]) return prefix;  // already builded\n\n    const f1n8 = module.modules[f1mPrefix].n64*8;\n    module.modules[prefix] = {\n        n64: module.modules[f1mPrefix].n64*3\n    };\n\n    function buildAdd() {\n        const f = module.addFunction(prefix+\"_add\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const y0 = c.getLocal(\"y\");\n        const y1 = c.i32_add(c.getLocal(\"y\"), c.i32_const(f1n8));\n        const y2 = c.i32_add(c.getLocal(\"y\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_add\", x0, y0, r0),\n            c.call(f1mPrefix+\"_add\", x1, y1, r1),\n            c.call(f1mPrefix+\"_add\", x2, y2, r2),\n        );\n    }\n\n    function buildTimesScalar() {\n        const f = module.addFunction(prefix+\"_timesScalar\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"scalar\", \"i32\");\n        f.addParam(\"scalarLen\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_timesScalar\", x0, c.getLocal(\"scalar\"), c.getLocal(\"scalarLen\"), r0),\n            c.call(f1mPrefix+\"_timesScalar\", x1, c.getLocal(\"scalar\"), c.getLocal(\"scalarLen\"), r1),\n            c.call(f1mPrefix+\"_timesScalar\", x2, c.getLocal(\"scalar\"), c.getLocal(\"scalarLen\"), r2),\n        );\n    }\n\n\n    function buildSub() {\n        const f = module.addFunction(prefix+\"_sub\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const y0 = c.getLocal(\"y\");\n        const y1 = c.i32_add(c.getLocal(\"y\"), c.i32_const(f1n8));\n        const y2 = c.i32_add(c.getLocal(\"y\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_sub\", x0, y0, r0),\n            c.call(f1mPrefix+\"_sub\", x1, y1, r1),\n            c.call(f1mPrefix+\"_sub\", x2, y2, r2),\n        );\n    }\n\n    function buildNeg() {\n        const f = module.addFunction(prefix+\"_neg\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_neg\", x0, r0),\n            c.call(f1mPrefix+\"_neg\", x1, r1),\n            c.call(f1mPrefix+\"_neg\", x2, r2),\n        );\n    }\n\n    function buildIsNegative() {\n        const f = module.addFunction(prefix+\"_isNegative\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.if(\n                c.call(f1mPrefix+\"_isZero\", x2),\n                c.if(\n                    c.call(f1mPrefix+\"_isZero\", x1),\n                    c.ret(c.call(f1mPrefix+\"_isNegative\", x0)),\n                    c.ret(c.call(f1mPrefix+\"_isNegative\", x1))\n                )\n            ),\n            c.ret(c.call(f1mPrefix+\"_isNegative\", x2))\n        );\n    }\n\n\n    function buildMul() {\n        const f = module.addFunction(prefix+\"_mul\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const cd = f.getCodeBuilder();\n\n        const a = cd.getLocal(\"x\");\n        const b = cd.i32_add(cd.getLocal(\"x\"), cd.i32_const(f1n8));\n        const c = cd.i32_add(cd.getLocal(\"x\"), cd.i32_const(2*f1n8));\n        const A = cd.getLocal(\"y\");\n        const B = cd.i32_add(cd.getLocal(\"y\"), cd.i32_const(f1n8));\n        const C = cd.i32_add(cd.getLocal(\"y\"), cd.i32_const(2*f1n8));\n        const r0 = cd.getLocal(\"r\");\n        const r1 = cd.i32_add(cd.getLocal(\"r\"), cd.i32_const(f1n8));\n        const r2 = cd.i32_add(cd.getLocal(\"r\"), cd.i32_const(2*f1n8));\n\n        const aA = cd.i32_const(module.alloc(f1n8));\n        const bB = cd.i32_const(module.alloc(f1n8));\n        const cC = cd.i32_const(module.alloc(f1n8));\n        const a_b = cd.i32_const(module.alloc(f1n8));\n        const A_B = cd.i32_const(module.alloc(f1n8));\n        const a_c = cd.i32_const(module.alloc(f1n8));\n        const A_C = cd.i32_const(module.alloc(f1n8));\n        const b_c = cd.i32_const(module.alloc(f1n8));\n        const B_C = cd.i32_const(module.alloc(f1n8));\n        const aA_bB = cd.i32_const(module.alloc(f1n8));\n        const aA_cC = cd.i32_const(module.alloc(f1n8));\n        const bB_cC = cd.i32_const(module.alloc(f1n8));\n        const AUX = cd.i32_const(module.alloc(f1n8));\n\n\n        f.addCode(\n            cd.call(f1mPrefix + \"_mul\", a, A, aA),\n            cd.call(f1mPrefix + \"_mul\", b, B, bB),\n            cd.call(f1mPrefix + \"_mul\", c, C, cC),\n\n            cd.call(f1mPrefix + \"_add\", a, b, a_b),\n            cd.call(f1mPrefix + \"_add\", A, B, A_B),\n            cd.call(f1mPrefix + \"_add\", a, c, a_c),\n            cd.call(f1mPrefix + \"_add\", A, C, A_C),\n            cd.call(f1mPrefix + \"_add\", b, c, b_c),\n            cd.call(f1mPrefix + \"_add\", B, C, B_C),\n\n            cd.call(f1mPrefix + \"_add\", aA, bB, aA_bB),\n            cd.call(f1mPrefix + \"_add\", aA, cC, aA_cC),\n            cd.call(f1mPrefix + \"_add\", bB, cC, bB_cC),\n\n            cd.call(f1mPrefix + \"_mul\", b_c, B_C, r0),\n            cd.call(f1mPrefix + \"_sub\", r0, bB_cC, r0),\n            cd.call(mulNonResidueFn, r0, r0),\n            cd.call(f1mPrefix + \"_add\", aA, r0, r0),\n\n            cd.call(f1mPrefix + \"_mul\", a_b, A_B, r1),\n            cd.call(f1mPrefix + \"_sub\", r1, aA_bB, r1),\n            cd.call(mulNonResidueFn, cC, AUX),\n            cd.call(f1mPrefix + \"_add\", r1, AUX, r1),\n\n            cd.call(f1mPrefix + \"_mul\", a_c, A_C, r2),\n            cd.call(f1mPrefix + \"_sub\", r2, aA_cC, r2),\n            cd.call(f1mPrefix + \"_add\", r2, bB, r2),\n        );\n\n    }\n\n    function buildSquare() {\n        const f = module.addFunction(prefix+\"_square\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const A = c.getLocal(\"x\");\n        const B = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const C = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        const s0 = c.i32_const(module.alloc(f1n8));\n        const ab = c.i32_const(module.alloc(f1n8));\n        const s1 = c.i32_const(module.alloc(f1n8));\n        const s2 = c.i32_const(module.alloc(f1n8));\n        const bc = c.i32_const(module.alloc(f1n8));\n        const s3 = c.i32_const(module.alloc(f1n8));\n        const s4 = c.i32_const(module.alloc(f1n8));\n\n\n        f.addCode(\n\n            c.call(f1mPrefix + \"_square\", A, s0),\n            c.call(f1mPrefix + \"_mul\", A, B, ab),\n            c.call(f1mPrefix + \"_add\", ab, ab, s1),\n\n            c.call(f1mPrefix + \"_sub\", A, B, s2),\n            c.call(f1mPrefix + \"_add\", s2, C, s2),\n            c.call(f1mPrefix + \"_square\", s2, s2),\n\n            c.call(f1mPrefix + \"_mul\", B, C, bc),\n            c.call(f1mPrefix + \"_add\", bc, bc, s3),\n\n            c.call(f1mPrefix + \"_square\", C, s4),\n\n            c.call(mulNonResidueFn, s3, r0),\n            c.call(f1mPrefix + \"_add\", s0, r0, r0),\n\n            c.call(mulNonResidueFn, s4, r1),\n            c.call(f1mPrefix + \"_add\", s1, r1, r1),\n\n            c.call(f1mPrefix + \"_add\", s0, s4, r2),\n            c.call(f1mPrefix + \"_sub\", s3, r2, r2),\n            c.call(f1mPrefix + \"_add\", s2, r2, r2),\n            c.call(f1mPrefix + \"_add\", s1, r2, r2),\n        );\n\n    }\n\n\n    function buildToMontgomery() {\n        const f = module.addFunction(prefix+\"_toMontgomery\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_toMontgomery\", x0, r0),\n            c.call(f1mPrefix+\"_toMontgomery\", x1, r1),\n            c.call(f1mPrefix+\"_toMontgomery\", x2, r2)\n        );\n    }\n\n    function buildFromMontgomery() {\n        const f = module.addFunction(prefix+\"_fromMontgomery\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_fromMontgomery\", x0, r0),\n            c.call(f1mPrefix+\"_fromMontgomery\", x1, r1),\n            c.call(f1mPrefix+\"_fromMontgomery\", x2, r2)\n        );\n    }\n\n    function buildCopy() {\n        const f = module.addFunction(prefix+\"_copy\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_copy\", x0, r0),\n            c.call(f1mPrefix+\"_copy\", x1, r1),\n            c.call(f1mPrefix+\"_copy\", x2, r2),\n        );\n    }\n\n    function buildZero() {\n        const f = module.addFunction(prefix+\"_zero\");\n        f.addParam(\"x\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_zero\", x0),\n            c.call(f1mPrefix+\"_zero\", x1),\n            c.call(f1mPrefix+\"_zero\", x2),\n        );\n    }\n\n    function buildOne() {\n        const f = module.addFunction(prefix+\"_one\");\n        f.addParam(\"x\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_one\", x0),\n            c.call(f1mPrefix+\"_zero\", x1),\n            c.call(f1mPrefix+\"_zero\", x2),\n        );\n    }\n\n    function buildEq() {\n        const f = module.addFunction(prefix+\"_eq\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const y0 = c.getLocal(\"y\");\n        const y1 = c.i32_add(c.getLocal(\"y\"), c.i32_const(f1n8));\n        const y2 = c.i32_add(c.getLocal(\"y\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.i32_and(\n                c.i32_and(\n                    c.call(f1mPrefix+\"_eq\", x0, y0),\n                    c.call(f1mPrefix+\"_eq\", x1, y1),\n                ),\n                c.call(f1mPrefix+\"_eq\", x2, y2)\n            )\n        );\n    }\n\n    function buildIsZero() {\n        const f = module.addFunction(prefix+\"_isZero\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.i32_and(\n                c.i32_and(\n                    c.call(f1mPrefix+\"_isZero\", x0),\n                    c.call(f1mPrefix+\"_isZero\", x1)\n                ),\n                c.call(f1mPrefix+\"_isZero\", x2)\n            )\n        );\n    }\n\n    function buildInverse() {\n        const f = module.addFunction(prefix+\"_inverse\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        const t0 = c.i32_const(module.alloc(f1n8));\n        const t1 = c.i32_const(module.alloc(f1n8));\n        const t2 = c.i32_const(module.alloc(f1n8));\n        const t3 = c.i32_const(module.alloc(f1n8));\n        const t4 = c.i32_const(module.alloc(f1n8));\n        const t5 = c.i32_const(module.alloc(f1n8));\n        const c0 = c.i32_const(module.alloc(f1n8));\n        const c1 = c.i32_const(module.alloc(f1n8));\n        const c2 = c.i32_const(module.alloc(f1n8));\n        const t6 = c.i32_const(module.alloc(f1n8));\n        const AUX = c.i32_const(module.alloc(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_square\", x0, t0),\n            c.call(f1mPrefix+\"_square\", x1, t1),\n            c.call(f1mPrefix+\"_square\", x2, t2),\n            c.call(f1mPrefix+\"_mul\", x0, x1, t3),\n            c.call(f1mPrefix+\"_mul\", x0, x2, t4),\n            c.call(f1mPrefix+\"_mul\", x1, x2, t5),\n\n            c.call(mulNonResidueFn, t5, c0),\n            c.call(f1mPrefix+\"_sub\", t0, c0, c0),\n\n            c.call(mulNonResidueFn, t2, c1),\n            c.call(f1mPrefix+\"_sub\", c1, t3, c1),\n\n            c.call(f1mPrefix+\"_sub\", t1, t4, c2),\n\n            c.call(f1mPrefix+\"_mul\", x2, c1, t6),\n            c.call(f1mPrefix+\"_mul\", x1, c2, AUX),\n            c.call(f1mPrefix+\"_add\", t6, AUX, t6),\n            c.call(mulNonResidueFn, t6, t6),\n            c.call(f1mPrefix+\"_mul\", x0, c0, AUX),\n            c.call(f1mPrefix+\"_add\", AUX, t6, t6),\n\n            c.call(f1mPrefix+\"_inverse\", t6, t6),\n\n            c.call(f1mPrefix+\"_mul\", t6, c0, r0),\n            c.call(f1mPrefix+\"_mul\", t6, c1, r1),\n            c.call(f1mPrefix+\"_mul\", t6, c2, r2)\n        );\n    }\n\n\n    function buildSign() {\n        const f = module.addFunction(prefix+\"_sign\");\n        f.addParam(\"x\", \"i32\");\n        f.addLocal(\"s\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.setLocal(\"s\" , c.call( f1mPrefix + \"_sign\", x2)),\n            c.if(\n                c.getLocal(\"s\"),\n                c.ret(c.getLocal(\"s\"))\n            ),\n            c.setLocal(\"s\" , c.call( f1mPrefix + \"_sign\", x1)),\n            c.if(\n                c.getLocal(\"s\"),\n                c.ret(c.getLocal(\"s\"))\n            ),\n            c.ret(c.call( f1mPrefix + \"_sign\", x0))\n        );\n    }\n\n    function buildIsOne() {\n        const f = module.addFunction(prefix+\"_isOne\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8*2));\n\n        f.addCode(\n            c.ret(\n                c.i32_and(\n                    c.i32_and(\n                        c.call(f1mPrefix + \"_isOne\", x0),\n                        c.call(f1mPrefix + \"_isZero\", x1)\n                    ),\n                    c.call(f1mPrefix + \"_isZero\", x2)\n                )\n            )\n        );\n    }\n\n    buildIsZero();\n    buildIsOne();\n    buildZero();\n    buildOne();\n    buildCopy();\n    buildMul();\n    buildSquare();\n    buildAdd();\n    buildSub();\n    buildNeg();\n    buildSign();\n    buildToMontgomery();\n    buildFromMontgomery();\n    buildEq();\n    buildInverse();\n    buildTimesScalar();\n    buildIsNegative();\n\n    module.exportFunction(prefix + \"_isZero\");\n    module.exportFunction(prefix + \"_isOne\");\n    module.exportFunction(prefix + \"_zero\");\n    module.exportFunction(prefix + \"_one\");\n    module.exportFunction(prefix + \"_copy\");\n    module.exportFunction(prefix + \"_mul\");\n    module.exportFunction(prefix + \"_square\");\n    module.exportFunction(prefix + \"_add\");\n    module.exportFunction(prefix + \"_sub\");\n    module.exportFunction(prefix + \"_neg\");\n    module.exportFunction(prefix + \"_sign\");\n    module.exportFunction(prefix + \"_fromMontgomery\");\n    module.exportFunction(prefix + \"_toMontgomery\");\n    module.exportFunction(prefix + \"_eq\");\n    module.exportFunction(prefix + \"_inverse\");\n    buildBatchInverse(module, prefix);\n    buildExp(\n        module,\n        prefix + \"_exp\",\n        f1n8*3,\n        prefix + \"_mul\",\n        prefix + \"_square\",\n        prefix + \"_copy\",\n        prefix + \"_one\"\n    );\n    module.exportFunction(prefix + \"_exp\");\n    module.exportFunction(prefix + \"_timesScalar\");\n    module.exportFunction(prefix + \"_batchInverse\");\n    module.exportFunction(prefix + \"_isNegative\");\n\n    return prefix;\n};\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nvar build_timesscalarnaf = function buildTimesScalarNAF(module, fnName, elementLen, opAB, opAA, opAmB, opCopy, opInit) {\n\n    const f = module.addFunction(fnName);\n    f.addParam(\"base\", \"i32\");\n    f.addParam(\"scalar\", \"i32\");\n    f.addParam(\"scalarLength\", \"i32\");\n    f.addParam(\"r\", \"i32\");\n    f.addLocal(\"old0\", \"i32\");\n    f.addLocal(\"nbits\", \"i32\");\n    f.addLocal(\"i\", \"i32\");\n    f.addLocal(\"last\", \"i32\");\n    f.addLocal(\"cur\", \"i32\");\n    f.addLocal(\"carry\", \"i32\");\n    f.addLocal(\"p\", \"i32\");\n\n    const c = f.getCodeBuilder();\n\n    const aux = c.i32_const(module.alloc(elementLen));\n\n    function getBit(IDX) {\n        return c.i32_and(\n            c.i32_shr_u(\n                c.i32_load(\n                    c.i32_add(\n                        c.getLocal(\"scalar\"),\n                        c.i32_and(\n                            c.i32_shr_u(\n                                IDX,\n                                c.i32_const(3)\n                            ),\n                            c.i32_const(0xFFFFFFFC)\n                        )\n                    )\n                ),\n                c.i32_and(\n                    IDX,\n                    c.i32_const(0x1F)\n                )\n            ),\n            c.i32_const(1)\n        );\n    }\n\n    function pushBit(b) {\n        return [\n            ...c.i32_store8(\n                c.getLocal(\"p\"),\n                c.i32_const(b)\n            ),\n            ...c.setLocal(\n                \"p\",\n                c.i32_add(\n                    c.getLocal(\"p\"),\n                    c.i32_const(1)\n                )\n            )\n        ];\n    }\n\n    f.addCode(\n        c.if(\n            c.i32_eqz(c.getLocal(\"scalarLength\")),\n            [\n                ...c.call(opInit, c.getLocal(\"r\")),\n                ...c.ret([])\n            ]\n        ),\n        c.setLocal(\"nbits\", c.i32_shl(c.getLocal(\"scalarLength\"), c.i32_const(3))),\n        c.setLocal(\"old0\", c.i32_load(c.i32_const(0))),\n        c.setLocal(\"p\", c.getLocal(\"old0\")),\n        c.i32_store(\n            c.i32_const(0),\n            c.i32_and(\n                c.i32_add(\n                    c.i32_add(\n                        c.getLocal(\"old0\"),\n                        c.i32_const(32)\n                    ),\n                    c.getLocal(\"nbits\")\n                ),\n                c.i32_const(0xFFFFFFF8)\n            )\n        ),\n        c.setLocal(\"i\", c.i32_const(1)),\n\n        c.setLocal(\"last\",getBit(c.i32_const(0))),\n        c.setLocal(\"carry\",c.i32_const(0)),\n\n        c.block(c.loop(\n            c.br_if(1, c.i32_eq( c.getLocal(\"i\"), c.getLocal(\"nbits\"))),\n\n            c.setLocal(\"cur\", getBit(c.getLocal(\"i\"))),\n            c.if( c.getLocal(\"last\"),\n                c.if( c.getLocal(\"cur\"),\n                    c.if(c.getLocal(\"carry\"),\n                        [\n                            ...c.setLocal(\"last\", c.i32_const(0)),\n                            ...c.setLocal(\"carry\", c.i32_const(1)),\n                            ...pushBit(1)\n                        ]\n                        ,\n                        [\n                            ...c.setLocal(\"last\", c.i32_const(0)),\n                            ...c.setLocal(\"carry\", c.i32_const(1)),\n                            ...pushBit(255)\n                        ],\n                    ),\n                    c.if(c.getLocal(\"carry\"),\n                        [\n                            ...c.setLocal(\"last\", c.i32_const(0)),\n                            ...c.setLocal(\"carry\", c.i32_const(1)),\n                            ...pushBit(255)\n                        ]\n                        ,\n                        [\n                            ...c.setLocal(\"last\", c.i32_const(0)),\n                            ...c.setLocal(\"carry\", c.i32_const(0)),\n                            ...pushBit(1)\n                        ],\n                    ),\n                ),\n                c.if( c.getLocal(\"cur\"),\n                    c.if(c.getLocal(\"carry\"),\n                        [\n                            ...c.setLocal(\"last\", c.i32_const(0)),\n                            ...c.setLocal(\"carry\", c.i32_const(1)),\n                            ...pushBit(0)\n                        ]\n                        ,\n                        [\n                            ...c.setLocal(\"last\", c.i32_const(1)),\n                            ...c.setLocal(\"carry\", c.i32_const(0)),\n                            ...pushBit(0)\n                        ],\n                    ),\n                    c.if(c.getLocal(\"carry\"),\n                        [\n                            ...c.setLocal(\"last\", c.i32_const(1)),\n                            ...c.setLocal(\"carry\", c.i32_const(0)),\n                            ...pushBit(0)\n                        ]\n                        ,\n                        [\n                            ...c.setLocal(\"last\", c.i32_const(0)),\n                            ...c.setLocal(\"carry\", c.i32_const(0)),\n                            ...pushBit(0)\n                        ],\n                    ),\n                )\n            ),\n            c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n            c.br(0)\n        )),\n\n        c.if( c.getLocal(\"last\"),\n            c.if(c.getLocal(\"carry\"),\n                [\n                    ...pushBit(255),\n                    ...pushBit(0),\n                    ...pushBit(1)\n                ]\n                ,\n                [\n                    ...pushBit(1)\n                ],\n            ),\n            c.if(c.getLocal(\"carry\"),\n                [\n                    ...pushBit(0),\n                    ...pushBit(1)\n                ]\n            ),\n        ),\n\n        c.setLocal(\"p\", c.i32_sub(c.getLocal(\"p\"), c.i32_const(1))),\n\n        // p already points to the last bit\n\n        c.call(opCopy, c.getLocal(\"base\"), aux),\n\n        c.call(opInit, c.getLocal(\"r\")),\n\n        c.block(c.loop(\n\n\n            c.call(opAA, c.getLocal(\"r\"), c.getLocal(\"r\")),\n\n\n            c.setLocal(\"cur\",\n                c.i32_load8_u(\n                    c.getLocal(\"p\")\n                )\n            ),\n\n            c.if(\n                c.getLocal(\"cur\"),\n                c.if(\n                    c.i32_eq(c.getLocal(\"cur\"), c.i32_const(1)),\n                    c.call(opAB,  c.getLocal(\"r\"), aux, c.getLocal(\"r\")),\n                    c.call(opAmB, c.getLocal(\"r\"), aux, c.getLocal(\"r\")),\n                )\n            ),\n\n            c.br_if(1, c.i32_eq( c.getLocal(\"old0\"), c.getLocal(\"p\"))),\n            c.setLocal(\"p\", c.i32_sub(c.getLocal(\"p\"), c.i32_const(1))),\n            c.br(0)\n\n        )),\n\n        c.i32_store( c.i32_const(0), c.getLocal(\"old0\"))\n\n    );\n\n};\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nvar build_multiexp = function buildMultiexp(module, prefix, fnName, opAdd, n8b) {\n\n    const n64g = module.modules[prefix].n64;\n    const n8g = n64g*8;\n\n    function buildGetChunk() {\n        const f = module.addFunction(fnName + \"_getChunk\");\n        f.addParam(\"pScalar\", \"i32\");\n        f.addParam(\"scalarSize\", \"i32\");  // Number of bytes of the scalar\n        f.addParam(\"startBit\", \"i32\");  // Bit to start extract\n        f.addParam(\"chunkSize\", \"i32\");  // Chunk size in bits\n        f.addLocal(\"bitsToEnd\", \"i32\");\n        f.addLocal(\"mask\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.setLocal(\"bitsToEnd\",\n                c.i32_sub(\n                    c.i32_mul(\n                        c.getLocal(\"scalarSize\"),\n                        c.i32_const(8)\n                    ),\n                    c.getLocal(\"startBit\")\n                )\n            ),\n            c.if(\n                c.i32_gt_s(\n                    c.getLocal(\"chunkSize\"),\n                    c.getLocal(\"bitsToEnd\")\n                ),\n                c.setLocal(\n                    \"mask\",\n                    c.i32_sub(\n                        c.i32_shl(\n                            c.i32_const(1),\n                            c.getLocal(\"bitsToEnd\")\n                        ),\n                        c.i32_const(1)\n                    )\n                ),\n                c.setLocal(\n                    \"mask\",\n                    c.i32_sub(\n                        c.i32_shl(\n                            c.i32_const(1),\n                            c.getLocal(\"chunkSize\")\n                        ),\n                        c.i32_const(1)\n                    )\n                )\n            ),\n            c.i32_and(\n                c.i32_shr_u(\n                    c.i32_load(\n                        c.i32_add(\n                            c.getLocal(\"pScalar\"),\n                            c.i32_shr_u(\n                                c.getLocal(\"startBit\"),\n                                c.i32_const(3)\n                            )\n                        ),\n                        0,  // offset\n                        0   // align to byte.\n                    ),\n                    c.i32_and(\n                        c.getLocal(\"startBit\"),\n                        c.i32_const(0x7)\n                    )\n                ),\n                c.getLocal(\"mask\")\n            )\n        );\n    }\n\n    function buildMutiexpChunk() {\n        const f = module.addFunction(fnName + \"_chunk\");\n        f.addParam(\"pBases\", \"i32\");\n        f.addParam(\"pScalars\", \"i32\");\n        f.addParam(\"scalarSize\", \"i32\");  // Number of points\n        f.addParam(\"n\", \"i32\");  // Number of points\n        f.addParam(\"startBit\", \"i32\");  // bit where it starts the chunk\n        f.addParam(\"chunkSize\", \"i32\");  // bit where it starts the chunk\n        f.addParam(\"pr\", \"i32\");\n        f.addLocal(\"nChunks\", \"i32\");\n        f.addLocal(\"itScalar\", \"i32\");\n        f.addLocal(\"endScalar\", \"i32\");\n        f.addLocal(\"itBase\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"j\", \"i32\");\n        f.addLocal(\"nTable\", \"i32\");\n        f.addLocal(\"pTable\", \"i32\");\n        f.addLocal(\"idx\", \"i32\");\n        f.addLocal(\"pIdxTable\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.if(\n                c.i32_eqz(c.getLocal(\"n\")),\n                [\n                    ...c.call(prefix + \"_zero\", c.getLocal(\"pr\")),\n                    ...c.ret([])\n                ]\n            ),\n\n            // Allocate memory\n\n            c.setLocal(\n                \"nTable\",\n                c.i32_shl(\n                    c.i32_const(1),\n                    c.getLocal(\"chunkSize\")\n                )\n            ),\n            c.setLocal(\"pTable\", c.i32_load( c.i32_const(0) )),\n            c.i32_store(\n                c.i32_const(0),\n                c.i32_add(\n                    c.getLocal(\"pTable\"),\n                    c.i32_mul(\n                        c.getLocal(\"nTable\"),\n                        c.i32_const(n8g)\n                    )\n                )\n            ),\n\n            // Reset Table\n            c.setLocal(\"j\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"j\"),\n                        c.getLocal(\"nTable\")\n                    )\n                ),\n\n                c.call(\n                    prefix + \"_zero\",\n                    c.i32_add(\n                        c.getLocal(\"pTable\"),\n                        c.i32_mul(\n                            c.getLocal(\"j\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.setLocal(\"j\", c.i32_add(c.getLocal(\"j\"), c.i32_const(1))),\n                c.br(0)\n            )),\n\n            // Distribute elements\n            c.setLocal(\"itBase\", c.getLocal(\"pBases\")),\n            c.setLocal(\"itScalar\", c.getLocal(\"pScalars\")),\n            c.setLocal(\"endScalar\",\n                c.i32_add(\n                    c.getLocal(\"pScalars\"),\n                    c.i32_mul(\n                        c.getLocal(\"n\"),\n                        c.getLocal(\"scalarSize\")\n                    )\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"itScalar\"),\n                        c.getLocal(\"endScalar\")\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx\",\n                    c.call(fnName + \"_getChunk\",\n                        c.getLocal(\"itScalar\"),\n                        c.getLocal(\"scalarSize\"),\n                        c.getLocal(\"startBit\"),\n                        c.getLocal(\"chunkSize\")\n                    )\n                ),\n\n                c.if(\n                    c.getLocal(\"idx\"),\n                    [\n                        ...c.setLocal(\n                            \"pIdxTable\",\n                            c.i32_add(\n                                c.getLocal(\"pTable\"),\n                                c.i32_mul(\n                                    c.i32_sub(\n                                        c.getLocal(\"idx\"),\n                                        c.i32_const(1)\n                                    ),\n                                    c.i32_const(n8g)\n                                )\n                            )\n                        ),\n                        ...c.call(\n                            opAdd,\n                            c.getLocal(\"pIdxTable\"),\n                            c.getLocal(\"itBase\"),\n                            c.getLocal(\"pIdxTable\"),\n                        )\n                    ]\n                ),\n\n                c.setLocal(\"itScalar\", c.i32_add(c.getLocal(\"itScalar\"), c.getLocal(\"scalarSize\"))),\n                c.setLocal(\"itBase\", c.i32_add(c.getLocal(\"itBase\"), c.i32_const(n8b))),\n                c.br(0)\n            )),\n\n            c.call(fnName + \"_reduceTable\", c.getLocal(\"pTable\"), c.getLocal(\"chunkSize\")),\n            c.call(\n                prefix + \"_copy\",\n                c.getLocal(\"pTable\"),\n                c.getLocal(\"pr\")\n            ),\n\n\n            c.i32_store(\n                c.i32_const(0),\n                c.getLocal(\"pTable\")\n            )\n\n        );\n    }\n\n    function buildMultiexp() {\n        const f = module.addFunction(fnName);\n        f.addParam(\"pBases\", \"i32\");\n        f.addParam(\"pScalars\", \"i32\");\n        f.addParam(\"scalarSize\", \"i32\");  // Number of points\n        f.addParam(\"n\", \"i32\");  // Number of points\n        f.addParam(\"pr\", \"i32\");\n        f.addLocal(\"chunkSize\", \"i32\");\n        f.addLocal(\"nChunks\", \"i32\");\n        f.addLocal(\"itScalar\", \"i32\");\n        f.addLocal(\"endScalar\", \"i32\");\n        f.addLocal(\"itBase\", \"i32\");\n        f.addLocal(\"itBit\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"j\", \"i32\");\n        f.addLocal(\"nTable\", \"i32\");\n        f.addLocal(\"pTable\", \"i32\");\n        f.addLocal(\"idx\", \"i32\");\n        f.addLocal(\"pIdxTable\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const aux = c.i32_const(module.alloc(n8g));\n\n        const pTSizes = module.alloc([\n            17, 17, 17, 17,   17, 17, 17, 17,\n            17, 17, 16, 16,   15, 14, 13, 13,\n            12, 11, 10,  9,    8,  7,  7,  6,\n            5 ,  4,  3,  2,    1,  1,  1,  1\n        ]);\n\n        f.addCode(\n            c.call(prefix + \"_zero\", c.getLocal(\"pr\")),\n            c.if(\n                c.i32_eqz(c.getLocal(\"n\")),\n                c.ret([])\n            ),\n            c.setLocal(\"chunkSize\", c.i32_load8_u( c.i32_clz(c.getLocal(\"n\")),  pTSizes )),\n            c.setLocal(\n                \"nChunks\",\n                c.i32_add(\n                    c.i32_div_u(\n                        c.i32_sub(\n                            c.i32_shl(\n                                c.getLocal(\"scalarSize\"),\n                                c.i32_const(3)\n                            ),\n                            c.i32_const(1)\n                        ),\n                        c.getLocal(\"chunkSize\")\n                    ),\n                    c.i32_const(1)\n                )\n            ),\n\n\n            // Allocate memory\n\n            c.setLocal(\n                \"itBit\",\n                c.i32_mul(\n                    c.i32_sub(\n                        c.getLocal(\"nChunks\"),\n                        c.i32_const(1)\n                    ),\n                    c.getLocal(\"chunkSize\")\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_lt_s(\n                        c.getLocal(\"itBit\"),\n                        c.i32_const(0)\n                    )\n                ),\n\n                // Double nChunk times\n                c.if(\n                    c.i32_eqz(c.call(prefix + \"_isZero\", c.getLocal(\"pr\"))),\n                    [\n                        ...c.setLocal(\"j\", c.i32_const(0)),\n                        ...c.block(c.loop(\n                            c.br_if(\n                                1,\n                                c.i32_eq(\n                                    c.getLocal(\"j\"),\n                                    c.getLocal(\"chunkSize\")\n                                )\n                            ),\n\n                            c.call(prefix + \"_double\", c.getLocal(\"pr\"), c.getLocal(\"pr\")),\n\n                            c.setLocal(\"j\", c.i32_add(c.getLocal(\"j\"), c.i32_const(1))),\n                            c.br(0)\n                        ))\n                    ]\n                ),\n\n                c.call(\n                    fnName + \"_chunk\",\n                    c.getLocal(\"pBases\"),\n                    c.getLocal(\"pScalars\"),\n                    c.getLocal(\"scalarSize\"),\n                    c.getLocal(\"n\"),\n                    c.getLocal(\"itBit\"),\n                    c.getLocal(\"chunkSize\"),\n                    aux\n                ),\n\n                c.call(\n                    prefix + \"_add\",\n                    c.getLocal(\"pr\"),\n                    aux,\n                    c.getLocal(\"pr\")\n                ),\n                c.setLocal(\"itBit\", c.i32_sub(c.getLocal(\"itBit\"), c.getLocal(\"chunkSize\"))),\n                c.br(0)\n            ))\n        );\n    }\n\n    function buildReduceTable() {\n        const f = module.addFunction(fnName + \"_reduceTable\");\n        f.addParam(\"pTable\", \"i32\");\n        f.addParam(\"p\", \"i32\");  // Number of bits of the table\n        f.addLocal(\"half\", \"i32\");\n        f.addLocal(\"it1\", \"i32\");\n        f.addLocal(\"it2\", \"i32\");\n        f.addLocal(\"pAcc\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.if(\n                c.i32_eq(c.getLocal(\"p\"), c.i32_const(1)),\n                c.ret([])\n            ),\n            c.setLocal(\n                \"half\",\n                c.i32_shl(\n                    c.i32_const(1),\n                    c.i32_sub(\n                        c.getLocal(\"p\"),\n                        c.i32_const(1)\n                    )\n                )\n            ),\n\n            c.setLocal(\"it1\", c.getLocal(\"pTable\")),\n            c.setLocal(\n                \"it2\",\n                c.i32_add(\n                    c.getLocal(\"pTable\"),\n                    c.i32_mul(\n                        c.getLocal(\"half\"),\n                        c.i32_const(n8g)\n                    )\n                )\n            ),\n            c.setLocal(\"pAcc\",\n                c.i32_sub(\n                    c.getLocal(\"it2\"),\n                    c.i32_const(n8g)\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"it1\"),\n                        c.getLocal(\"pAcc\")\n                    )\n                ),\n                c.call(\n                    prefix + \"_add\",\n                    c.getLocal(\"it1\"),\n                    c.getLocal(\"it2\"),\n                    c.getLocal(\"it1\")\n                ),\n                c.call(\n                    prefix + \"_add\",\n                    c.getLocal(\"pAcc\"),\n                    c.getLocal(\"it2\"),\n                    c.getLocal(\"pAcc\")\n                ),\n                c.setLocal(\"it1\", c.i32_add(c.getLocal(\"it1\"), c.i32_const(n8g))),\n                c.setLocal(\"it2\", c.i32_add(c.getLocal(\"it2\"), c.i32_const(n8g))),\n                c.br(0)\n            )),\n\n            c.call(\n                fnName + \"_reduceTable\",\n                c.getLocal(\"pTable\"),\n                c.i32_sub(\n                    c.getLocal(\"p\"),\n                    c.i32_const(1)\n                )\n            ),\n\n            c.setLocal(\"p\", c.i32_sub(c.getLocal(\"p\"), c.i32_const(1))),\n            c.block(c.loop(\n                c.br_if(1, c.i32_eqz(c.getLocal(\"p\"))),\n                c.call(prefix + \"_double\", c.getLocal(\"pAcc\"), c.getLocal(\"pAcc\")),\n                c.setLocal(\"p\", c.i32_sub(c.getLocal(\"p\"), c.i32_const(1))),\n                c.br(0)\n            )),\n\n            c.call(prefix + \"_add\", c.getLocal(\"pTable\"), c.getLocal(\"pAcc\"), c.getLocal(\"pTable\"))\n        );\n    }\n\n    buildGetChunk();\n    buildReduceTable();\n    buildMutiexpChunk();\n    buildMultiexp();\n\n    module.exportFunction(fnName);\n    module.exportFunction(fnName +\"_chunk\");\n\n\n};\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nconst buildTimesScalarNAF = build_timesscalarnaf;\n//const buildTimesScalar = require(\"./build_timesscalar\");\nconst buildBatchConvertion = build_batchconvertion;\nconst buildMultiexp$1 = build_multiexp;\n\nvar build_curve_jacobian_a0 = function buildCurve(module, prefix, prefixField, pB) {\n\n\n    const n64 = module.modules[prefixField].n64;\n    const n8 = n64*8;\n\n    if (module.modules[prefix]) return prefix;  // already builded\n    module.modules[prefix] = {\n        n64: n64*3\n    };\n\n    function buildIsZero() {\n        const f = module.addFunction(prefix + \"_isZero\");\n        f.addParam(\"p1\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(\n            prefixField + \"_isZero\",\n            c.i32_add(\n                c.getLocal(\"p1\"),\n                c.i32_const(n8*2)\n            )\n        ));\n    }\n    function buildIsZeroAffine() {\n        const f = module.addFunction(prefix + \"_isZeroAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.i32_and(\n                c.call(\n                    prefixField + \"_isZero\",\n                    c.getLocal(\"p1\")\n                ),\n                c.call(\n                    prefixField + \"_isZero\",\n                    c.i32_add(\n                        c.getLocal(\"p1\"),\n                        c.i32_const(n8)\n                    )\n                )\n            )\n        );\n    }\n\n    function buildCopy() {\n        const f = module.addFunction(prefix + \"_copy\");\n        f.addParam(\"ps\", \"i32\");\n        f.addParam(\"pd\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        for (let i=0; i<n64*3; i++) {\n            f.addCode(\n                c.i64_store(\n                    c.getLocal(\"pd\"),\n                    i*8,\n                    c.i64_load(\n                        c.getLocal(\"ps\"),\n                        i*8\n                    )\n                )\n            );\n        }\n    }\n\n\n    function buildCopyAffine() {\n        const f = module.addFunction(prefix + \"_copyAffine\");\n        f.addParam(\"ps\", \"i32\");\n        f.addParam(\"pd\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        for (let i=0; i<n64*2; i++) {\n            f.addCode(\n                c.i64_store(\n                    c.getLocal(\"pd\"),\n                    i*8,\n                    c.i64_load(\n                        c.getLocal(\"ps\"),\n                        i*8\n                    )\n                )\n            );\n        }\n\n    }\n\n\n    function buildZero() {\n        const f = module.addFunction(prefix + \"_zero\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(\n            prefixField + \"_zero\",\n            c.getLocal(\"pr\")\n        ));\n\n        f.addCode(c.call(\n            prefixField + \"_one\",\n            c.i32_add(\n                c.getLocal(\"pr\"),\n                c.i32_const(n8)\n            )\n        ));\n\n        f.addCode(c.call(\n            prefixField + \"_zero\",\n            c.i32_add(\n                c.getLocal(\"pr\"),\n                c.i32_const(n8*2)\n            )\n        ));\n    }\n\n\n    function buildZeroAffine() {\n        const f = module.addFunction(prefix + \"_zeroAffine\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(\n            prefixField + \"_zero\",\n            c.getLocal(\"pr\")\n        ));\n\n        f.addCode(c.call(\n            prefixField + \"_zero\",\n            c.i32_add(\n                c.getLocal(\"pr\"),\n                c.i32_const(n8)\n            )\n        ));\n    }\n\n    function buildEq() {\n        const f = module.addFunction(prefix + \"_eq\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.setReturnType(\"i32\");\n        f.addLocal(\"z1\", \"i32\");\n        f.addLocal(\"z2\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x1 = c.getLocal(\"p1\");\n        const y1 = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        f.addCode(c.setLocal(\"z1\", c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2))));\n        const z1 = c.getLocal(\"z1\");\n        const x2 = c.getLocal(\"p2\");\n        const y2 = c.i32_add(c.getLocal(\"p2\"), c.i32_const(n8));\n        f.addCode(c.setLocal(\"z2\", c.i32_add(c.getLocal(\"p2\"), c.i32_const(n8*2))));\n        const z2 = c.getLocal(\"z2\");\n\n        const Z1Z1 = c.i32_const(module.alloc(n8));\n        const Z2Z2 = c.i32_const(module.alloc(n8));\n        const U1 = c.i32_const(module.alloc(n8));\n        const U2 = c.i32_const(module.alloc(n8));\n        const Z1_cubed = c.i32_const(module.alloc(n8));\n        const Z2_cubed = c.i32_const(module.alloc(n8));\n        const S1 = c.i32_const(module.alloc(n8));\n        const S2 = c.i32_const(module.alloc(n8));\n\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p1\")),\n                c.ret( c.call(prefix + \"_isZero\", c.getLocal(\"p2\"))),\n            ),\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p2\")),\n                c.ret(c.i32_const(0))\n            ),\n            c.if(\n                c.call(prefixField + \"_isOne\", z1),\n                c.ret(c.call(prefix + \"_eqMixed\", c.getLocal(\"p2\"), c.getLocal(\"p1\")))\n            ),\n            c.if(\n                c.call(prefixField + \"_isOne\", z2),\n                c.ret(c.call(prefix + \"_eqMixed\", c.getLocal(\"p1\"), c.getLocal(\"p2\")))\n            ),\n\n            c.call(prefixField + \"_square\", z1, Z1Z1),\n            c.call(prefixField + \"_square\", z2, Z2Z2),\n            c.call(prefixField + \"_mul\", x1, Z2Z2, U1),\n            c.call(prefixField + \"_mul\", x2, Z1Z1, U2),\n            c.call(prefixField + \"_mul\", z1, Z1Z1, Z1_cubed),\n            c.call(prefixField + \"_mul\", z2, Z2Z2, Z2_cubed),\n            c.call(prefixField + \"_mul\", y1, Z2_cubed, S1),\n            c.call(prefixField + \"_mul\", y2, Z1_cubed, S2),\n\n            c.if(\n                c.call(prefixField + \"_eq\", U1, U2),\n                c.if(\n                    c.call(prefixField + \"_eq\", S1, S2),\n                    c.ret(c.i32_const(1))\n                )\n            ),\n            c.ret(c.i32_const(0))\n        );\n    }\n\n\n    function buildEqMixed() {\n        const f = module.addFunction(prefix + \"_eqMixed\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.setReturnType(\"i32\");\n        f.addLocal(\"z1\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x1 = c.getLocal(\"p1\");\n        const y1 = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        f.addCode(c.setLocal(\"z1\", c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2))));\n        const z1 = c.getLocal(\"z1\");\n        const x2 = c.getLocal(\"p2\");\n        const y2 = c.i32_add(c.getLocal(\"p2\"), c.i32_const(n8));\n\n        const Z1Z1 = c.i32_const(module.alloc(n8));\n        const U2 = c.i32_const(module.alloc(n8));\n        const Z1_cubed = c.i32_const(module.alloc(n8));\n        const S2 = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p1\")),\n                c.ret( c.call(prefix + \"_isZeroAffine\", c.getLocal(\"p2\"))),\n            ),\n            c.if(\n                c.call(prefix + \"_isZeroAffine\", c.getLocal(\"p2\")),\n                c.ret(c.i32_const(0))\n            ),\n            c.if(\n                c.call(prefixField + \"_isOne\", z1),\n                c.ret(c.call(prefix + \"_eqAffine\", c.getLocal(\"p1\"), c.getLocal(\"p2\")))\n            ),\n            c.call(prefixField + \"_square\", z1, Z1Z1),\n            c.call(prefixField + \"_mul\", x2, Z1Z1, U2),\n            c.call(prefixField + \"_mul\", z1, Z1Z1, Z1_cubed),\n            c.call(prefixField + \"_mul\", y2, Z1_cubed, S2),\n\n            c.if(\n                c.call(prefixField + \"_eq\", x1, U2),\n                c.if(\n                    c.call(prefixField + \"_eq\", y1, S2),\n                    c.ret(c.i32_const(1))\n                )\n            ),\n            c.ret(c.i32_const(0))\n        );\n    }\n\n    function buildDouble() {\n        const f = module.addFunction(prefix + \"_double\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"p1\");\n        const y = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        const z = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2));\n\n        const A = c.i32_const(module.alloc(n8));\n        const B = c.i32_const(module.alloc(n8));\n        const C = c.i32_const(module.alloc(n8));\n        const D = c.i32_const(module.alloc(n8));\n        const E = c.i32_const(module.alloc(n8));\n        const F = c.i32_const(module.alloc(n8));\n        const G = c.i32_const(module.alloc(n8));\n        const eightC = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p1\")),\n                [\n                    ...c.call(prefix + \"_copy\", c.getLocal(\"p1\"), c.getLocal(\"pr\")),\n                    ...c.ret([])\n                ]\n            ),\n            c.if(\n                c.call(prefixField + \"_isOne\", z),\n                [\n                    ...c.ret(c.call(prefix + \"_doubleAffine\", c.getLocal(\"p1\"), c.getLocal(\"pr\"))),\n                    ...c.ret([])\n                ]\n            ),\n\n            c.call(prefixField + \"_square\", x, A),\n            c.call(prefixField + \"_square\", y, B),\n            c.call(prefixField + \"_square\", B, C),\n\n            c.call(prefixField + \"_add\", x, B, D),\n            c.call(prefixField + \"_square\", D, D),\n            c.call(prefixField + \"_sub\", D, A, D),\n            c.call(prefixField + \"_sub\", D, C, D),\n            c.call(prefixField + \"_add\", D, D, D),\n\n            c.call(prefixField + \"_add\", A, A, E),\n            c.call(prefixField + \"_add\", E, A, E),\n            c.call(prefixField + \"_square\", E, F),\n\n            c.call(prefixField + \"_mul\", y, z, G),\n\n            c.call(prefixField + \"_add\", D, D, x3),\n            c.call(prefixField + \"_sub\", F, x3, x3),\n\n            c.call(prefixField + \"_add\", C, C, eightC),\n            c.call(prefixField + \"_add\", eightC, eightC, eightC),\n            c.call(prefixField + \"_add\", eightC, eightC, eightC),\n\n            c.call(prefixField + \"_sub\", D, x3, y3),\n            c.call(prefixField + \"_mul\", y3, E, y3),\n            c.call(prefixField + \"_sub\", y3, eightC, y3),\n\n            c.call(prefixField + \"_add\", G, G, z3),\n        );\n    }\n\n\n    function buildDoubleAffine() {\n        const f = module.addFunction(prefix + \"_doubleAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"p1\");\n        const y = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2));\n\n        const XX = c.i32_const(module.alloc(n8));\n        const YY = c.i32_const(module.alloc(n8));\n        const YYYY = c.i32_const(module.alloc(n8));\n        const S = c.i32_const(module.alloc(n8));\n        const M = c.i32_const(module.alloc(n8));\n        const eightYYYY = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZeroAffine\", c.getLocal(\"p1\")),\n                [\n                    ...c.call(prefix + \"_toJacobian\", c.getLocal(\"p1\"), c.getLocal(\"pr\")),\n                    ...c.ret([])\n                ]\n            ),\n\n            // XX = X1^2\n            c.call(prefixField + \"_square\", x, XX),\n\n            // YY = Y1^2\n            c.call(prefixField + \"_square\", y, YY),\n\n            // YYYY = YY^2\n            c.call(prefixField + \"_square\", YY, YYYY),\n\n            // S = 2*((X1+YY)^2-XX-YYYY)\n            c.call(prefixField + \"_add\", x, YY, S),\n            c.call(prefixField + \"_square\", S, S),\n            c.call(prefixField + \"_sub\", S, XX, S),\n            c.call(prefixField + \"_sub\", S, YYYY, S),\n            c.call(prefixField + \"_add\", S, S, S),\n\n            // M = 3*XX+a  (Hera a=0)\n            c.call(prefixField + \"_add\", XX, XX, M),\n            c.call(prefixField + \"_add\", M, XX, M),\n\n            // Z3 = 2*Y1\n            c.call(prefixField + \"_add\", y, y, z3),\n\n            // T = M^2-2*S\n            // X3 = T\n            c.call(prefixField + \"_square\", M, x3),\n            c.call(prefixField + \"_sub\", x3, S, x3),\n            c.call(prefixField + \"_sub\", x3, S, x3),\n\n            // Y3 = M*(S-T)-8*YYYY\n            c.call(prefixField + \"_add\", YYYY, YYYY, eightYYYY),\n            c.call(prefixField + \"_add\", eightYYYY, eightYYYY, eightYYYY),\n            c.call(prefixField + \"_add\", eightYYYY, eightYYYY, eightYYYY),\n            c.call(prefixField + \"_sub\", S, x3, y3),\n            c.call(prefixField + \"_mul\", y3, M, y3),\n            c.call(prefixField + \"_sub\", y3, eightYYYY, y3),\n        );\n    }\n\n\n    function buildEqAffine() {\n        const f = module.addFunction(prefix + \"_eqAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.setReturnType(\"i32\");\n        f.addLocal(\"z1\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.ret(c.i32_and(\n                c.call(\n                    prefixField + \"_eq\",\n                    c.getLocal(\"p1\"),\n                    c.getLocal(\"p2\")\n                ),\n                c.call(\n                    prefixField + \"_eq\",\n                    c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8)),\n                    c.i32_add(c.getLocal(\"p2\"), c.i32_const(n8))\n                )\n            ))\n        );\n    }\n\n    function buildToMontgomery() {\n        const f = module.addFunction(prefix + \"_toMontgomery\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(\n            prefixField + \"_toMontgomery\",\n            c.getLocal(\"p1\"),\n            c.getLocal(\"pr\")\n        ));\n        for (let i=1; i<3; i++) {\n            f.addCode(c.call(\n                prefixField + \"_toMontgomery\",\n                c.i32_add(c.getLocal(\"p1\"), c.i32_const(i*n8)),\n                c.i32_add(c.getLocal(\"pr\"), c.i32_const(i*n8))\n            ));\n        }\n    }\n\n    function buildToMontgomeryAffine() {\n        const f = module.addFunction(prefix + \"_toMontgomeryAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(\n            prefixField + \"_toMontgomery\",\n            c.getLocal(\"p1\"),\n            c.getLocal(\"pr\")\n        ));\n        for (let i=1; i<2; i++) {\n            f.addCode(c.call(\n                prefixField + \"_toMontgomery\",\n                c.i32_add(c.getLocal(\"p1\"), c.i32_const(i*n8)),\n                c.i32_add(c.getLocal(\"pr\"), c.i32_const(i*n8))\n            ));\n        }\n    }\n\n    function buildFromMontgomery() {\n        const f = module.addFunction(prefix + \"_fromMontgomery\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(\n            prefixField + \"_fromMontgomery\",\n            c.getLocal(\"p1\"),\n            c.getLocal(\"pr\")\n        ));\n        for (let i=1; i<3; i++) {\n            f.addCode(c.call(\n                prefixField + \"_fromMontgomery\",\n                c.i32_add(c.getLocal(\"p1\"), c.i32_const(i*n8)),\n                c.i32_add(c.getLocal(\"pr\"), c.i32_const(i*n8))\n            ));\n        }\n    }\n\n\n    function buildFromMontgomeryAffine() {\n        const f = module.addFunction(prefix + \"_fromMontgomeryAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(\n            prefixField + \"_fromMontgomery\",\n            c.getLocal(\"p1\"),\n            c.getLocal(\"pr\")\n        ));\n        for (let i=1; i<2; i++) {\n            f.addCode(c.call(\n                prefixField + \"_fromMontgomery\",\n                c.i32_add(c.getLocal(\"p1\"), c.i32_const(i*n8)),\n                c.i32_add(c.getLocal(\"pr\"), c.i32_const(i*n8))\n            ));\n        }\n    }\n\n    function buildAdd() {\n\n        const f = module.addFunction(prefix + \"_add\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n        f.addLocal(\"z1\", \"i32\");\n        f.addLocal(\"z2\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x1 = c.getLocal(\"p1\");\n        const y1 = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        f.addCode(c.setLocal(\"z1\", c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2))));\n        const z1 = c.getLocal(\"z1\");\n        const x2 = c.getLocal(\"p2\");\n        const y2 = c.i32_add(c.getLocal(\"p2\"), c.i32_const(n8));\n        f.addCode(c.setLocal(\"z2\", c.i32_add(c.getLocal(\"p2\"), c.i32_const(n8*2))));\n        const z2 = c.getLocal(\"z2\");\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2));\n\n        const Z1Z1 = c.i32_const(module.alloc(n8));\n        const Z2Z2 = c.i32_const(module.alloc(n8));\n        const U1 = c.i32_const(module.alloc(n8));\n        const U2 = c.i32_const(module.alloc(n8));\n        const Z1_cubed = c.i32_const(module.alloc(n8));\n        const Z2_cubed = c.i32_const(module.alloc(n8));\n        const S1 = c.i32_const(module.alloc(n8));\n        const S2 = c.i32_const(module.alloc(n8));\n        const H = c.i32_const(module.alloc(n8));\n        const S2_minus_S1 = c.i32_const(module.alloc(n8));\n        const I = c.i32_const(module.alloc(n8));\n        const J = c.i32_const(module.alloc(n8));\n        const r = c.i32_const(module.alloc(n8));\n        const r2 = c.i32_const(module.alloc(n8));\n        const V = c.i32_const(module.alloc(n8));\n        const V2 = c.i32_const(module.alloc(n8));\n        const S1_J2 = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p1\")),\n                [\n                    ...c.call(prefix + \"_copy\", c.getLocal(\"p2\"), c.getLocal(\"pr\")),\n                    ...c.ret([])\n                ]\n            ),\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p2\")),\n                [\n                    ...c.call(prefix + \"_copy\", c.getLocal(\"p1\"), c.getLocal(\"pr\")),\n                    ...c.ret([])\n                ]\n            ),\n            c.if(\n                c.call(prefixField + \"_isOne\", z1),\n                [\n                    ...c.call(prefix + \"_addMixed\", x2, x1, x3),\n                    ...c.ret([])\n                ]\n            ),\n            c.if(\n                c.call(prefixField + \"_isOne\", z2),\n                [\n                    ...c.call(prefix + \"_addMixed\", x1, x2, x3),\n                    ...c.ret([])\n                ]\n            ),\n            c.call(prefixField + \"_square\", z1, Z1Z1),\n            c.call(prefixField + \"_square\", z2, Z2Z2),\n            c.call(prefixField + \"_mul\", x1, Z2Z2, U1),\n            c.call(prefixField + \"_mul\", x2, Z1Z1, U2),\n            c.call(prefixField + \"_mul\", z1, Z1Z1, Z1_cubed),\n            c.call(prefixField + \"_mul\", z2, Z2Z2, Z2_cubed),\n            c.call(prefixField + \"_mul\", y1, Z2_cubed, S1),\n            c.call(prefixField + \"_mul\", y2, Z1_cubed, S2),\n\n            c.if(\n                c.call(prefixField + \"_eq\", U1, U2),\n                c.if(\n                    c.call(prefixField + \"_eq\", S1, S2),\n                    [\n                        ...c.call(prefix + \"_double\", c.getLocal(\"p1\"), c.getLocal(\"pr\")),\n                        ...c.ret([])\n                    ]\n                )\n            ),\n\n            c.call(prefixField + \"_sub\", U2, U1, H),\n            c.call(prefixField + \"_sub\", S2, S1, S2_minus_S1),\n            c.call(prefixField + \"_add\", H, H, I),\n            c.call(prefixField + \"_square\", I, I),\n            c.call(prefixField + \"_mul\", H, I, J),\n            c.call(prefixField + \"_add\", S2_minus_S1, S2_minus_S1, r),\n            c.call(prefixField + \"_mul\", U1, I, V),\n            c.call(prefixField + \"_square\", r, r2),\n            c.call(prefixField + \"_add\", V, V, V2),\n\n            c.call(prefixField + \"_sub\", r2, J, x3),\n            c.call(prefixField + \"_sub\", x3, V2, x3),\n\n            c.call(prefixField + \"_mul\", S1, J, S1_J2),\n            c.call(prefixField + \"_add\", S1_J2, S1_J2, S1_J2),\n\n            c.call(prefixField + \"_sub\", V, x3, y3),\n            c.call(prefixField + \"_mul\", y3, r, y3),\n            c.call(prefixField + \"_sub\", y3, S1_J2, y3),\n\n            c.call(prefixField + \"_add\", z1, z2, z3),\n            c.call(prefixField + \"_square\", z3, z3),\n            c.call(prefixField + \"_sub\", z3, Z1Z1, z3),\n            c.call(prefixField + \"_sub\", z3, Z2Z2, z3),\n            c.call(prefixField + \"_mul\", z3, H, z3),\n        );\n\n    }\n\n\n    function buildAddMixed() {\n\n        const f = module.addFunction(prefix + \"_addMixed\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n        f.addLocal(\"z1\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x1 = c.getLocal(\"p1\");\n        const y1 = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        f.addCode(c.setLocal(\"z1\", c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2))));\n        const z1 = c.getLocal(\"z1\");\n        const x2 = c.getLocal(\"p2\");\n        const y2 = c.i32_add(c.getLocal(\"p2\"), c.i32_const(n8));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2));\n\n        const Z1Z1 = c.i32_const(module.alloc(n8));\n        const U2 = c.i32_const(module.alloc(n8));\n        const Z1_cubed = c.i32_const(module.alloc(n8));\n        const S2 = c.i32_const(module.alloc(n8));\n        const H = c.i32_const(module.alloc(n8));\n        const HH = c.i32_const(module.alloc(n8));\n        const S2_minus_y1 = c.i32_const(module.alloc(n8));\n        const I = c.i32_const(module.alloc(n8));\n        const J = c.i32_const(module.alloc(n8));\n        const r = c.i32_const(module.alloc(n8));\n        const r2 = c.i32_const(module.alloc(n8));\n        const V = c.i32_const(module.alloc(n8));\n        const V2 = c.i32_const(module.alloc(n8));\n        const y1_J2 = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p1\")),\n                [\n                    ...c.call(prefix + \"_copyAffine\", c.getLocal(\"p2\"), c.getLocal(\"pr\")),\n                    ...c.call(prefixField + \"_one\", c.i32_add(c.getLocal(\"pr\") , c.i32_const(n8*2))),\n                    ...c.ret([])\n                ]\n            ),\n            c.if(\n                c.call(prefix + \"_isZeroAffine\", c.getLocal(\"p2\")),\n                [\n                    ...c.call(prefix + \"_copy\", c.getLocal(\"p1\"), c.getLocal(\"pr\")),\n                    ...c.ret([])\n                ]\n            ),\n            c.if(\n                c.call(prefixField + \"_isOne\", z1),\n                [\n                    ...c.call(prefix + \"_addAffine\", x1, x2, x3),\n                    ...c.ret([])\n                ]\n            ),\n            c.call(prefixField + \"_square\", z1, Z1Z1),\n            c.call(prefixField + \"_mul\", x2, Z1Z1, U2),\n            c.call(prefixField + \"_mul\", z1, Z1Z1, Z1_cubed),\n            c.call(prefixField + \"_mul\", y2, Z1_cubed, S2),\n\n            c.if(\n                c.call(prefixField + \"_eq\", x1, U2),\n                c.if(\n                    c.call(prefixField + \"_eq\", y1, S2),\n                    [\n                        ...c.call(prefix + \"_doubleAffine\", c.getLocal(\"p2\"), c.getLocal(\"pr\")),\n                        ...c.ret([])\n                    ]\n                )\n            ),\n\n            c.call(prefixField + \"_sub\", U2, x1, H),\n            c.call(prefixField + \"_sub\", S2, y1, S2_minus_y1),\n            c.call(prefixField + \"_square\", H, HH),\n            c.call(prefixField + \"_add\", HH , HH, I),\n            c.call(prefixField + \"_add\", I , I, I),\n            c.call(prefixField + \"_mul\", H, I, J),\n            c.call(prefixField + \"_add\", S2_minus_y1, S2_minus_y1, r),\n            c.call(prefixField + \"_mul\", x1, I, V),\n            c.call(prefixField + \"_square\", r, r2),\n            c.call(prefixField + \"_add\", V, V, V2),\n\n            c.call(prefixField + \"_sub\", r2, J, x3),\n            c.call(prefixField + \"_sub\", x3, V2, x3),\n\n            c.call(prefixField + \"_mul\", y1, J, y1_J2),\n            c.call(prefixField + \"_add\", y1_J2, y1_J2, y1_J2),\n\n            c.call(prefixField + \"_sub\", V, x3, y3),\n            c.call(prefixField + \"_mul\", y3, r, y3),\n            c.call(prefixField + \"_sub\", y3, y1_J2, y3),\n\n            c.call(prefixField + \"_add\", z1, H, z3),\n            c.call(prefixField + \"_square\", z3, z3),\n            c.call(prefixField + \"_sub\", z3, Z1Z1, z3),\n            c.call(prefixField + \"_sub\", z3, HH, z3),\n        );\n    }\n\n\n    function buildAddAffine() {\n\n        const f = module.addFunction(prefix + \"_addAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n        f.addLocal(\"z1\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x1 = c.getLocal(\"p1\");\n        const y1 = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        f.addCode(c.setLocal(\"z1\", c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2))));\n        const x2 = c.getLocal(\"p2\");\n        const y2 = c.i32_add(c.getLocal(\"p2\"), c.i32_const(n8));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2));\n\n        const H = c.i32_const(module.alloc(n8));\n        const HH = c.i32_const(module.alloc(n8));\n        const y2_minus_y1 = c.i32_const(module.alloc(n8));\n        const I = c.i32_const(module.alloc(n8));\n        const J = c.i32_const(module.alloc(n8));\n        const r = c.i32_const(module.alloc(n8));\n        const r2 = c.i32_const(module.alloc(n8));\n        const V = c.i32_const(module.alloc(n8));\n        const V2 = c.i32_const(module.alloc(n8));\n        const y1_J2 = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZeroAffine\", c.getLocal(\"p1\")),\n                [\n                    ...c.call(prefix + \"_copyAffine\", c.getLocal(\"p2\"), c.getLocal(\"pr\")),\n                    ...c.call(prefixField + \"_one\", c.i32_add(c.getLocal(\"pr\") , c.i32_const(n8*2))),\n                    ...c.ret([])\n                ]\n            ),\n            c.if(\n                c.call(prefix + \"_isZeroAffine\", c.getLocal(\"p2\")),\n                [\n                    ...c.call(prefix + \"_copyAffine\", c.getLocal(\"p1\"), c.getLocal(\"pr\")),\n                    ...c.call(prefixField + \"_one\", c.i32_add(c.getLocal(\"pr\") , c.i32_const(n8*2))),\n                    ...c.ret([])\n                ]\n            ),\n\n\n            c.if(\n                c.call(prefixField + \"_eq\", x1, x2),\n                c.if(\n                    c.call(prefixField + \"_eq\", y1, y2),\n                    [\n                        ...c.call(prefix + \"_doubleAffine\", c.getLocal(\"p2\"), c.getLocal(\"pr\")),\n                        ...c.ret([])\n                    ]\n                )\n            ),\n\n            c.call(prefixField + \"_sub\", x2, x1, H),\n            c.call(prefixField + \"_sub\", y2, y1, y2_minus_y1),\n            c.call(prefixField + \"_square\", H, HH),\n            c.call(prefixField + \"_add\", HH , HH, I),\n            c.call(prefixField + \"_add\", I , I, I),\n            c.call(prefixField + \"_mul\", H, I, J),\n            c.call(prefixField + \"_add\", y2_minus_y1, y2_minus_y1, r),\n            c.call(prefixField + \"_mul\", x1, I, V),\n            c.call(prefixField + \"_square\", r, r2),\n            c.call(prefixField + \"_add\", V, V, V2),\n\n            c.call(prefixField + \"_sub\", r2, J, x3),\n            c.call(prefixField + \"_sub\", x3, V2, x3),\n\n            c.call(prefixField + \"_mul\", y1, J, y1_J2),\n            c.call(prefixField + \"_add\", y1_J2, y1_J2, y1_J2),\n\n            c.call(prefixField + \"_sub\", V, x3, y3),\n            c.call(prefixField + \"_mul\", y3, r, y3),\n            c.call(prefixField + \"_sub\", y3, y1_J2, y3),\n\n            c.call(prefixField + \"_add\", H, H, z3),\n        );\n    }\n\n    function buildNeg() {\n        const f = module.addFunction(prefix + \"_neg\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"p1\");\n        const y = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        const z = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2));\n\n        f.addCode(\n            c.call(prefixField + \"_copy\", x, x3),\n            c.call(prefixField + \"_neg\", y, y3),\n            c.call(prefixField + \"_copy\", z, z3)\n        );\n    }\n\n\n    function buildNegAffine() {\n        const f = module.addFunction(prefix + \"_negAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"p1\");\n        const y = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n\n        f.addCode(\n            c.call(prefixField + \"_copy\", x, x3),\n            c.call(prefixField + \"_neg\", y, y3),\n        );\n    }\n\n\n    function buildSub() {\n        const f = module.addFunction(prefix + \"_sub\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const AUX = c.i32_const(module.alloc(n8*3));\n\n        f.addCode(\n            c.call(prefix + \"_neg\", c.getLocal(\"p2\"), AUX),\n            c.call(prefix + \"_add\", c.getLocal(\"p1\"), AUX, c.getLocal(\"pr\")),\n        );\n    }\n\n    function buildSubMixed() {\n        const f = module.addFunction(prefix + \"_subMixed\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const AUX = c.i32_const(module.alloc(n8*3));\n\n        f.addCode(\n            c.call(prefix + \"_negAffine\", c.getLocal(\"p2\"), AUX),\n            c.call(prefix + \"_addMixed\", c.getLocal(\"p1\"), AUX, c.getLocal(\"pr\")),\n        );\n    }\n\n\n    function buildSubAffine() {\n        const f = module.addFunction(prefix + \"_subAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const AUX = c.i32_const(module.alloc(n8*3));\n\n        f.addCode(\n            c.call(prefix + \"_negAffine\", c.getLocal(\"p2\"), AUX),\n            c.call(prefix + \"_addAffine\", c.getLocal(\"p1\"), AUX, c.getLocal(\"pr\")),\n        );\n    }\n\n    // This sets Z to One\n    function buildNormalize() {\n        const f = module.addFunction(prefix + \"_normalize\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"p1\");\n        const y = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        const z = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2));\n\n\n        const Z_inv = c.i32_const(module.alloc(n8));\n        const Z2_inv = c.i32_const(module.alloc(n8));\n        const Z3_inv = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p1\")),\n                c.call(prefix + \"_zero\", c.getLocal(\"pr\")),\n                [\n                    ...c.call(prefixField + \"_inverse\", z, Z_inv),\n                    ...c.call(prefixField + \"_square\", Z_inv, Z2_inv),\n                    ...c.call(prefixField + \"_mul\", Z_inv, Z2_inv, Z3_inv),\n                    ...c.call(prefixField + \"_mul\", x, Z2_inv, x3),\n                    ...c.call(prefixField + \"_mul\", y, Z3_inv, y3),\n                    ...c.call(prefixField + \"_one\", z3),\n                ]\n            )\n        );\n    }\n\n\n    // Does not set Z.\n    function buildToAffine() {\n        const f = module.addFunction(prefix + \"_toAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"p1\");\n        const y = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        const z = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n\n\n        const Z_inv = c.i32_const(module.alloc(n8));\n        const Z2_inv = c.i32_const(module.alloc(n8));\n        const Z3_inv = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p1\")),\n                [\n                    ...c.call(prefixField + \"_zero\", x3),\n                    ...c.call(prefixField + \"_zero\", y3),\n                ],\n                [\n                    ...c.call(prefixField + \"_inverse\", z, Z_inv),\n                    ...c.call(prefixField + \"_square\", Z_inv, Z2_inv),\n                    ...c.call(prefixField + \"_mul\", Z_inv, Z2_inv, Z3_inv),\n                    ...c.call(prefixField + \"_mul\", x, Z2_inv, x3),\n                    ...c.call(prefixField + \"_mul\", y, Z3_inv, y3),\n                ]\n            )\n        );\n    }\n\n\n    function buildToJacobian() {\n        const f = module.addFunction(prefix + \"_toJacobian\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"p1\");\n        const y = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZeroAffine\", c.getLocal(\"p1\")),\n                c.call(prefix + \"_zero\", c.getLocal(\"pr\")),\n                [\n                    ...c.call(prefixField + \"_one\", z3),\n                    ...c.call(prefixField + \"_copy\", y, y3),\n                    ...c.call(prefixField + \"_copy\", x, x3)\n                ]\n            )\n        );\n    }\n\n    function buildBatchToAffine() {\n        const f = module.addFunction(prefix + \"_batchToAffine\");\n        f.addParam(\"pIn\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"pOut\", \"i32\");\n        f.addLocal(\"pAux\", \"i32\");\n        f.addLocal(\"itIn\", \"i32\");\n        f.addLocal(\"itAux\", \"i32\");\n        f.addLocal(\"itOut\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const tmp = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.setLocal(\"pAux\", c.i32_load( c.i32_const(0) )),\n            c.i32_store(\n                c.i32_const(0),\n                c.i32_add(\n                    c.getLocal(\"pAux\"),\n                    c.i32_mul(c.getLocal(\"n\"), c.i32_const(n8))\n                )\n            ),\n\n            c.call(\n                prefixField + \"_batchInverse\",\n                c.i32_add(c.getLocal(\"pIn\"), c.i32_const(n8*2)),\n                c.i32_const(n8*3),\n                c.getLocal(\"n\"),\n                c.getLocal(\"pAux\"),\n                c.i32_const(n8)\n            ),\n\n            c.setLocal(\"itIn\", c.getLocal(\"pIn\")),\n            c.setLocal(\"itAux\", c.getLocal(\"pAux\")),\n            c.setLocal(\"itOut\", c.getLocal(\"pOut\")),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(1, c.i32_eq ( c.getLocal(\"i\"), c.getLocal(\"n\") )),\n\n                c.if(\n                    c.call(prefixField + \"_isZero\", c.getLocal(\"itAux\")),\n                    [\n                        ...c.call(prefixField + \"_zero\", c.getLocal(\"itOut\")),\n                        ...c.call(prefixField + \"_zero\", c.i32_add(c.getLocal(\"itOut\"), c.i32_const(n8)))\n                    ],\n                    [\n                        ...c.call(\n                            prefixField+\"_mul\",\n                            c.getLocal(\"itAux\"),\n                            c.i32_add(c.getLocal(\"itIn\"), c.i32_const(n8)),\n                            tmp,\n                        ),\n                        ...c.call(\n                            prefixField+\"_square\",\n                            c.getLocal(\"itAux\"),\n                            c.getLocal(\"itAux\")\n                        ),\n                        ...c.call(\n                            prefixField+\"_mul\",\n                            c.getLocal(\"itAux\"),\n                            c.getLocal(\"itIn\"),\n                            c.getLocal(\"itOut\"),\n                        ),\n                        ...c.call(\n                            prefixField+\"_mul\",\n                            c.getLocal(\"itAux\"),\n                            tmp,\n                            c.i32_add(c.getLocal(\"itOut\"), c.i32_const(n8)),\n                        ),\n                    ]\n                ),\n\n                c.setLocal(\"itIn\", c.i32_add(c.getLocal(\"itIn\"), c.i32_const(n8*3))),\n                c.setLocal(\"itOut\", c.i32_add(c.getLocal(\"itOut\"), c.i32_const(n8*2))),\n                c.setLocal(\"itAux\", c.i32_add(c.getLocal(\"itAux\"), c.i32_const(n8))),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            )),\n            c.i32_store(\n                c.i32_const(0),\n                c.getLocal(\"pAux\")\n            )\n        );\n    }\n\n\n    // This function is private and does not allow to OVERLAP buffers.\n    function buildReverseBytes() {\n        const f = module.addFunction(prefix + \"__reverseBytes\");\n        f.addParam(\"pIn\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"pOut\", \"i32\");\n        f.addLocal(\"itOut\", \"i32\");\n        f.addLocal(\"itIn\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.setLocal(\n                \"itOut\",\n                c.i32_sub(\n                    c.i32_add(\n                        c.getLocal(\"pOut\"),\n                        c.getLocal(\"n\")\n                    ),\n                    c.i32_const(1)\n                )\n            ),\n            c.setLocal(\n                \"itIn\",\n                c.getLocal(\"pIn\")\n            ),\n            c.block(c.loop(\n                c.br_if(1, c.i32_lt_s( c.getLocal(\"itOut\"), c.getLocal(\"pOut\") )),\n                c.i32_store8(\n                    c.getLocal(\"itOut\"),\n                    c.i32_load8_u(c.getLocal(\"itIn\")),\n                ),\n                c.setLocal(\"itOut\", c.i32_sub(c.getLocal(\"itOut\"), c.i32_const(1))),\n                c.setLocal(\"itIn\", c.i32_add(c.getLocal(\"itIn\"), c.i32_const(1))),\n                c.br(0)\n            )),\n        );\n\n    }\n\n    function buildLEMtoC() {\n        const f = module.addFunction(prefix + \"_LEMtoC\");\n        f.addParam(\"pIn\", \"i32\");\n        f.addParam(\"pOut\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const tmp = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZeroAffine\", c.getLocal(\"pIn\")),\n                [\n                    ...c.call(prefixField + \"_zero\", c.getLocal(\"pOut\")),\n                    ...c.i32_store8(\n                        c.getLocal(\"pOut\"),\n                        c.i32_const(0x40)\n                    ),\n                    ...c.ret([])\n                ]\n            ),\n            c.call(prefixField + \"_fromMontgomery\", c.getLocal(\"pIn\"), tmp),\n            c.call(prefix + \"__reverseBytes\", tmp, c.i32_const(n8), c.getLocal(\"pOut\")),\n            c.if(\n                c.i32_eq(\n                    c.call(prefixField + \"_sign\", c.i32_add(c.getLocal(\"pIn\"), c.i32_const(n8))),\n                    c.i32_const(-1)\n                ),\n                c.i32_store8(\n                    c.getLocal(\"pOut\"),\n                    c.i32_or(\n                        c.i32_load8_u(c.getLocal(\"pOut\")),\n                        c.i32_const(0x80)\n                    )\n                )\n            ),\n        );\n    }\n\n    function buildLEMtoU() {\n        const f = module.addFunction(prefix + \"_LEMtoU\");\n        f.addParam(\"pIn\", \"i32\");\n        f.addParam(\"pOut\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const pTmp = module.alloc(n8*2);\n        const tmp = c.i32_const(pTmp);\n        const tmpX = c.i32_const(pTmp);\n        const tmpY = c.i32_const(pTmp + n8);\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZeroAffine\", c.getLocal(\"pIn\")),\n                [\n                    ...c.call(prefix + \"_zeroAffine\", c.getLocal(\"pOut\")),\n                    ...c.ret([])\n                ]\n            ),\n\n            c.call(prefix + \"_fromMontgomeryAffine\", c.getLocal(\"pIn\"), tmp),\n\n            c.call(prefix + \"__reverseBytes\", tmpX, c.i32_const(n8), c.getLocal(\"pOut\")),\n            c.call(prefix + \"__reverseBytes\", tmpY, c.i32_const(n8), c.i32_add(c.getLocal(\"pOut\"), c.i32_const(n8))),\n        );\n    }\n\n    function buildUtoLEM() {\n        const f = module.addFunction(prefix + \"_UtoLEM\");\n        f.addParam(\"pIn\", \"i32\");\n        f.addParam(\"pOut\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const pTmp = module.alloc(n8*2);\n        const tmp = c.i32_const(pTmp);\n        const tmpX = c.i32_const(pTmp);\n        const tmpY = c.i32_const(pTmp + n8);\n\n        f.addCode(\n            c.if(\n                c.i32_and(c.i32_load8_u(c.getLocal(\"pIn\")), c.i32_const(0x40)),\n                [\n                    ...c.call(prefix + \"_zeroAffine\", c.getLocal(\"pOut\")),\n                    ...c.ret([])\n                ]\n            ),\n            c.call(prefix + \"__reverseBytes\", c.getLocal(\"pIn\"), c.i32_const(n8), tmpX),\n            c.call(prefix + \"__reverseBytes\", c.i32_add(c.getLocal(\"pIn\"), c.i32_const(n8)), c.i32_const(n8), tmpY),\n            c.call(prefix + \"_toMontgomeryAffine\", tmp,  c.getLocal(\"pOut\"))\n        );\n    }\n\n    function buildCtoLEM() {\n        const f = module.addFunction(prefix + \"_CtoLEM\");\n        f.addParam(\"pIn\", \"i32\");\n        f.addParam(\"pOut\", \"i32\");\n        f.addLocal(\"firstByte\", \"i32\");\n        f.addLocal(\"greatest\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const pTmp = module.alloc(n8*2);\n        const tmpX = c.i32_const(pTmp);\n        const tmpY = c.i32_const(pTmp + n8);\n\n        f.addCode(\n            c.setLocal(\"firstByte\", c.i32_load8_u(c.getLocal(\"pIn\"))),\n            c.if(\n                c.i32_and(\n                    c.getLocal(\"firstByte\"),\n                    c.i32_const(0x40)\n                ),\n                [\n                    ...c.call(prefix + \"_zeroAffine\", c.getLocal(\"pOut\")),\n                    ...c.ret([])\n                ]\n            ),\n            c.setLocal(\n                \"greatest\",\n                c.i32_and(\n                    c.getLocal(\"firstByte\"),\n                    c.i32_const(0x80)\n                )\n            ),\n\n            c.call(prefixField + \"_copy\", c.getLocal(\"pIn\"), tmpY),\n            c.i32_store8(tmpY, c.i32_and(c.getLocal(\"firstByte\"), c.i32_const(0x3F))),\n            c.call(prefix + \"__reverseBytes\", tmpY, c.i32_const(n8), tmpX),\n            c.call(prefixField + \"_toMontgomery\", tmpX, c.getLocal(\"pOut\")),\n\n            c.call(prefixField + \"_square\", c.getLocal(\"pOut\"), tmpY),\n            c.call(prefixField + \"_mul\", c.getLocal(\"pOut\"), tmpY,  tmpY),\n            c.call(prefixField + \"_add\", tmpY, c.i32_const(pB),  tmpY),\n\n            c.call(prefixField + \"_sqrt\", tmpY, tmpY),\n            c.call(prefixField + \"_neg\", tmpY, tmpX),\n\n            c.if(\n                c.i32_eq(\n                    c.call(prefixField + \"_sign\", tmpY),\n                    c.i32_const(-1)\n                ),\n                c.if(\n                    c.getLocal(\"greatest\"),\n                    c.call(prefixField + \"_copy\", tmpY, c.i32_add(c.getLocal(\"pOut\"), c.i32_const(n8))),\n                    c.call(prefixField + \"_neg\", tmpY, c.i32_add(c.getLocal(\"pOut\"), c.i32_const(n8)))\n                ),\n                c.if(\n                    c.getLocal(\"greatest\"),\n                    c.call(prefixField + \"_neg\", tmpY, c.i32_add(c.getLocal(\"pOut\"), c.i32_const(n8))),\n                    c.call(prefixField + \"_copy\", tmpY, c.i32_add(c.getLocal(\"pOut\"), c.i32_const(n8)))\n                ),\n            )\n\n        );\n    }\n\n    function buildInCurveAffine() {\n        const f = module.addFunction(prefix + \"_inCurveAffine\");\n        f.addParam(\"pIn\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"pIn\");\n        const y = c.i32_add(c.getLocal(\"pIn\"), c.i32_const(n8));\n\n        const y2 = c.i32_const(module.alloc(n8));\n        const x3b = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.call(prefixField + \"_square\", y, y2),\n            c.call(prefixField + \"_square\", x, x3b),\n            c.call(prefixField + \"_mul\", x, x3b, x3b),\n            c.call(prefixField + \"_add\", x3b, c.i32_const(pB), x3b),\n\n            c.ret(\n                c.call(prefixField + \"_eq\", y2, x3b)\n            )\n        );\n    }\n\n    function buildInCurve() {\n        const f = module.addFunction(prefix + \"_inCurve\");\n        f.addParam(\"pIn\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const aux = c.i32_const(module.alloc(n8*2));\n\n        f.addCode(\n            c.call(prefix + \"_toAffine\", c.getLocal(\"pIn\"), aux),\n\n            c.ret(\n                c.call(prefix + \"_inCurveAffine\", aux),\n            )\n        );\n    }\n\n    buildIsZeroAffine();\n    buildIsZero();\n    buildZeroAffine();\n    buildZero();\n    buildCopyAffine();\n    buildCopy();\n    buildToJacobian();\n    buildEqAffine();\n    buildEqMixed();\n    buildEq();\n    buildDoubleAffine();\n    buildDouble();\n    buildAddAffine();\n    buildAddMixed();\n    buildAdd();\n    buildNegAffine();\n    buildNeg();\n    buildSubAffine();\n    buildSubMixed();\n    buildSub();\n    buildFromMontgomeryAffine();\n    buildFromMontgomery();\n    buildToMontgomeryAffine();\n    buildToMontgomery();\n    buildToAffine();\n    buildInCurveAffine();\n    buildInCurve();\n\n    buildBatchToAffine();\n\n    buildNormalize();\n\n\n    buildReverseBytes();\n\n    buildLEMtoU();\n    buildLEMtoC();\n    buildUtoLEM();\n    buildCtoLEM();\n\n    buildBatchConvertion(module, prefix + \"_batchLEMtoU\", prefix + \"_LEMtoU\", n8*2, n8*2);\n    buildBatchConvertion(module, prefix + \"_batchLEMtoC\", prefix + \"_LEMtoC\", n8*2, n8);\n    buildBatchConvertion(module, prefix + \"_batchUtoLEM\", prefix + \"_UtoLEM\", n8*2, n8*2);\n    buildBatchConvertion(module, prefix + \"_batchCtoLEM\", prefix + \"_CtoLEM\", n8, n8*2, true);\n\n    buildBatchConvertion(module, prefix + \"_batchToJacobian\", prefix + \"_toJacobian\", n8*2, n8*3, true);\n\n    buildMultiexp$1(module, prefix, prefix + \"_multiexp\", prefix + \"_add\", n8*3);\n    buildMultiexp$1(module, prefix, prefix + \"_multiexpAffine\", prefix + \"_addMixed\", n8*2);\n\n    /*\n    buildTimesScalar(\n        module,\n        prefix + \"_timesScalarOld\",\n        n8*3,\n        prefix + \"_add\",\n        prefix + \"_double\",\n        prefix + \"_copy\",\n        prefix + \"_zero\",\n    );\n    */\n    buildTimesScalarNAF(\n        module,\n        prefix + \"_timesScalar\",\n        n8*3,\n        prefix + \"_add\",\n        prefix + \"_double\",\n        prefix + \"_sub\",\n        prefix + \"_copy\",\n        prefix + \"_zero\"\n    );\n\n    buildTimesScalarNAF(\n        module,\n        prefix + \"_timesScalarAffine\",\n        n8*2,\n        prefix + \"_addMixed\",\n        prefix + \"_double\",\n        prefix + \"_subMixed\",\n        prefix + \"_copyAffine\",\n        prefix + \"_zero\"\n    );\n\n    module.exportFunction(prefix + \"_isZero\");\n    module.exportFunction(prefix + \"_isZeroAffine\");\n\n    module.exportFunction(prefix + \"_eq\");\n    module.exportFunction(prefix + \"_eqMixed\");\n    module.exportFunction(prefix + \"_eqAffine\");\n\n    module.exportFunction(prefix + \"_copy\");\n    module.exportFunction(prefix + \"_copyAffine\");\n\n    module.exportFunction(prefix + \"_zero\");\n    module.exportFunction(prefix + \"_zeroAffine\");\n\n    module.exportFunction(prefix + \"_double\");\n    module.exportFunction(prefix + \"_doubleAffine\");\n\n    module.exportFunction(prefix + \"_add\");\n    module.exportFunction(prefix + \"_addMixed\");\n    module.exportFunction(prefix + \"_addAffine\");\n\n    module.exportFunction(prefix + \"_neg\");\n    module.exportFunction(prefix + \"_negAffine\");\n\n    module.exportFunction(prefix + \"_sub\");\n    module.exportFunction(prefix + \"_subMixed\");\n    module.exportFunction(prefix + \"_subAffine\");\n\n    module.exportFunction(prefix + \"_fromMontgomery\");\n    module.exportFunction(prefix + \"_fromMontgomeryAffine\");\n\n    module.exportFunction(prefix + \"_toMontgomery\");\n    module.exportFunction(prefix + \"_toMontgomeryAffine\");\n\n    module.exportFunction(prefix + \"_timesScalar\");\n    module.exportFunction(prefix + \"_timesScalarAffine\");\n\n    module.exportFunction(prefix + \"_normalize\");\n\n    // Convertion functions\n    module.exportFunction(prefix + \"_LEMtoU\");\n    module.exportFunction(prefix + \"_LEMtoC\");\n    module.exportFunction(prefix + \"_UtoLEM\");\n    module.exportFunction(prefix + \"_CtoLEM\");\n\n    module.exportFunction(prefix + \"_batchLEMtoU\");\n    module.exportFunction(prefix + \"_batchLEMtoC\");\n    module.exportFunction(prefix + \"_batchUtoLEM\");\n    module.exportFunction(prefix + \"_batchCtoLEM\");\n\n    module.exportFunction(prefix + \"_toAffine\");\n    module.exportFunction(prefix + \"_toJacobian\");\n\n    module.exportFunction(prefix + \"_batchToAffine\");\n    module.exportFunction(prefix + \"_batchToJacobian\");\n\n    module.exportFunction(prefix + \"_inCurve\");\n    module.exportFunction(prefix + \"_inCurveAffine\");\n\n    /*\n    buildG1MulScalar(module, zq);\n    module.exportFunction(\"g1MulScalar\");\n    */\n\n    return prefix;\n};\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nconst { isOdd: isOdd$2, modInv: modInv$1, modPow } = bigint;\nconst utils$3 = utils$6;\n\nvar build_fft = function buildFFT(module, prefix, gPrefix, fPrefix, opGtimesF) {\n\n    const n64f = module.modules[fPrefix].n64;\n    const n8f = n64f*8;\n\n    const n64g = module.modules[gPrefix].n64;\n    const n8g = n64g*8;\n\n    const q = module.modules[fPrefix].q;\n\n    let rem = q - 1n;\n    let maxBits = 0;\n    while (!isOdd$2(rem)) {\n        maxBits ++;\n        rem = rem >> 1n;\n    }\n\n    let nr = 2n;\n\n    while ( modPow(nr, q >> 1n, q) === 1n ) nr = nr + 1n;\n\n    // console.log(nr);\n\n    const w = new Array(maxBits+1);\n    w[maxBits] = modPow(nr, rem, q);\n\n    let n=maxBits-1;\n    while (n>=0) {\n        w[n] = modPow(w[n+1], 2n, q);\n        n--;\n    }\n\n    const bytes = [];\n    const R = (1n << BigInt(n8f*8)) % q;\n\n    for (let i=0; i<w.length; i++) {\n        const m = w[i] * R % q;\n        bytes.push(...utils$3.bigInt2BytesLE(m, n8f));\n    }\n\n    const ROOTs = module.alloc(bytes);\n\n    const i2 = new Array(maxBits+1);\n    i2[0] = 1n;\n\n    for (let i=1; i<=maxBits; i++) {\n        i2[i] = i2[i-1] * 2n;\n    }\n\n    const bytesi2 =[];\n    for (let i=0; i<=maxBits; i++) {\n        const m = modInv$1(i2[i], q) * R % q;\n        bytesi2.push(...utils$3.bigInt2BytesLE(m, n8f));\n    }\n\n    const INV2 = module.alloc(bytesi2);\n\n    const shift = modPow(nr, 2n, q);\n    const bytesShiftToSmallM =[];\n    const bytesSConst =[];\n    for (let i=0; i<=maxBits; i++) {\n        const shiftToSmallM = modPow(shift, 2n ** BigInt(i), q);\n        const sConst = modInv$1(q + 1n - shiftToSmallM, q);\n        bytesShiftToSmallM.push(...utils$3.bigInt2BytesLE(shiftToSmallM * R % q, n8f));\n        bytesSConst.push(...utils$3.bigInt2BytesLE(sConst * R % q, n8f));\n    }\n\n    const SHIFT_TO_M = module.alloc( bytesShiftToSmallM  );\n    const SCONST = module.alloc( bytesSConst  );\n\n    function rev(x) {\n        let r=0;\n        for (let i=0; i<8; i++) {\n            if (x & (1 << i)) {\n                r = r | (0x80 >> i);\n            }\n        }\n        return r;\n    }\n\n    const rtable = Array(256);\n    for (let i=0; i<256; i++) {\n        rtable[i] = rev(i);\n    }\n\n    const REVTABLE = module.alloc(rtable);\n\n\n    function buildLog2() {\n        const f = module.addFunction(prefix+\"__log2\");\n        f.addParam(\"n\", \"i32\");\n        f.setReturnType(\"i32\");\n        f.addLocal(\"bits\", \"i32\");\n        f.addLocal(\"aux\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.setLocal(\n                \"aux\",\n                c.i32_shr_u(\n                    c.getLocal(\"n\"),\n                    c.i32_const(1)\n                )\n            )\n        );\n        f.addCode(c.setLocal(\"bits\", c.i32_const(0)));\n\n        f.addCode(c.block(c.loop(\n            c.br_if(\n                1,\n                c.i32_eqz(c.getLocal(\"aux\"))\n            ),\n\n            c.setLocal(\n                \"aux\",\n                c.i32_shr_u(\n                    c.getLocal(\"aux\"),\n                    c.i32_const(1)\n                )\n            ),\n\n            c.setLocal(\n                \"bits\",\n                c.i32_add(\n                    c.getLocal(\"bits\"),\n                    c.i32_const(1)\n                )\n            ),\n\n            c.br(0)\n        )));\n\n        f.addCode(c.if(\n            c.i32_ne(\n                c.getLocal(\"n\"),\n                c.i32_shl(\n                    c.i32_const(1),\n                    c.getLocal(\"bits\")\n                )\n            ),\n            c.unreachable()\n        ));\n\n        f.addCode(c.if(\n            c.i32_gt_u(\n                c.getLocal(\"bits\"),\n                c.i32_const(maxBits)\n            ),\n            c.unreachable()\n        ));\n\n        f.addCode(c.getLocal(\"bits\"));\n    }\n\n    function buildFFT() {\n        const f = module.addFunction(prefix+\"_fft\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n\n        f.addLocal(\"bits\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const One = c.i32_const(module.alloc(n8f));\n\n        f.addCode(\n            c.setLocal(\n                \"bits\",\n                c.call(\n                    prefix + \"__log2\",\n                    c.getLocal(\"n\")\n                )\n            ),\n            c.call(fPrefix + \"_one\", One),\n            c.call(\n                prefix+\"_rawfft\",\n                c.getLocal(\"px\"),\n                c.getLocal(\"bits\"),\n                c.i32_const(0),\n                One\n            )\n        );\n\n    }\n\n    function buildIFFT() {\n        const f = module.addFunction(prefix+\"_ifft\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addLocal(\"bits\", \"i32\");\n        f.addLocal(\"pInv2\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.setLocal(\n                \"bits\",\n                c.call(\n                    prefix + \"__log2\",\n                    c.getLocal(\"n\")\n                )\n            ),\n            c.setLocal(\n                \"pInv2\",\n                c.i32_add(\n                    c.i32_const(INV2),\n                    c.i32_mul(\n                        c.getLocal(\"bits\"),\n                        c.i32_const(n8f)\n                    )\n                )\n            ),\n\n            c.call(\n                prefix+\"_rawfft\",\n                c.getLocal(\"px\"),\n                c.getLocal(\"bits\"),\n                c.i32_const(1),\n                c.getLocal(\"pInv2\")\n            ),\n        );\n    }\n\n    function buildRawFFT() {\n        const f = module.addFunction(prefix+\"_rawfft\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"bits\", \"i32\"); // 2 power\n        f.addParam(\"reverse\", \"i32\");\n        f.addParam(\"mulFactor\", \"i32\");\n\n        f.addLocal(\"s\", \"i32\");\n        f.addLocal(\"k\", \"i32\");\n        f.addLocal(\"j\", \"i32\");\n        f.addLocal(\"m\", \"i32\");\n        f.addLocal(\"mdiv2\", \"i32\");\n        f.addLocal(\"n\", \"i32\");\n        f.addLocal(\"pwm\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const W = c.i32_const(module.alloc(n8f));\n        const T = c.i32_const(module.alloc(n8g));\n        const U = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n            c.call(prefix + \"__reversePermutation\", c.getLocal(\"px\"), c.getLocal(\"bits\")),\n            c.setLocal(\"n\", c.i32_shl(c.i32_const(1), c.getLocal(\"bits\"))),\n            c.setLocal(\"s\", c.i32_const(1)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_gt_u(\n                        c.getLocal(\"s\"),\n                        c.getLocal(\"bits\")\n                    )\n                ),\n                c.setLocal(\"m\", c.i32_shl(c.i32_const(1), c.getLocal(\"s\"))),\n                c.setLocal(\"pwm\",\n                    c.i32_add(\n                        c.i32_const(ROOTs),\n                        c.i32_mul(\n                            c.getLocal(\"s\"),\n                            c.i32_const(n8f)\n                        )\n                    )\n                ),\n                c.setLocal(\"k\", c.i32_const(0)),\n                c.block(c.loop(\n                    c.br_if(\n                        1,\n                        c.i32_ge_u(\n                            c.getLocal(\"k\"),\n                            c.getLocal(\"n\")\n                        )\n                    ),\n\n                    c.call(fPrefix + \"_one\", W),\n\n                    c.setLocal(\"mdiv2\", c.i32_shr_u(c.getLocal(\"m\"), c.i32_const(1)) ),\n                    c.setLocal(\"j\", c.i32_const(0)),\n                    c.block(c.loop(\n                        c.br_if(\n                            1,\n                            c.i32_ge_u(\n                                c.getLocal(\"j\"),\n                                c.getLocal(\"mdiv2\")\n                            )\n                        ),\n\n                        c.setLocal(\n                            \"idx1\",\n                            c.i32_add(\n                                c.getLocal(\"px\"),\n                                c.i32_mul(\n                                    c.i32_add(\n                                        c.getLocal(\"k\"),\n                                        c.getLocal(\"j\")\n                                    ),\n                                    c.i32_const(n8g)\n                                )\n                            )\n                        ),\n\n                        c.setLocal(\n                            \"idx2\",\n                            c.i32_add(\n                                c.getLocal(\"idx1\"),\n                                c.i32_mul(\n                                    c.getLocal(\"mdiv2\"),\n                                    c.i32_const(n8g)\n                                )\n                            )\n                        ),\n\n                        c.call(\n                            opGtimesF,\n                            c.getLocal(\"idx2\"),\n                            W,\n                            T\n                        ),\n\n                        c.call(\n                            gPrefix + \"_copy\",\n                            c.getLocal(\"idx1\"),\n                            U\n                        ),\n\n                        c.call(\n                            gPrefix + \"_add\",\n                            U,\n                            T,\n                            c.getLocal(\"idx1\"),\n                        ),\n\n                        c.call(\n                            gPrefix + \"_sub\",\n                            U,\n                            T,\n                            c.getLocal(\"idx2\"),\n                        ),\n\n                        c.call(\n                            fPrefix + \"_mul\",\n                            W,\n                            c.getLocal(\"pwm\"),\n                            W,\n                        ),\n\n                        c.setLocal(\"j\", c.i32_add(c.getLocal(\"j\"), c.i32_const(1))),\n                        c.br(0)\n                    )),\n\n                    c.setLocal(\"k\", c.i32_add(c.getLocal(\"k\"), c.getLocal(\"m\"))),\n                    c.br(0)\n                )),\n\n                c.setLocal(\"s\", c.i32_add(c.getLocal(\"s\"), c.i32_const(1))),\n                c.br(0)\n            )),\n            c.call(\n                prefix + \"__fftFinal\",\n                c.getLocal(\"px\"),\n                c.getLocal(\"bits\"),\n                c.getLocal(\"reverse\"),\n                c.getLocal(\"mulFactor\")\n            )\n        );\n    }\n\n\n    function buildFinalInverse() {\n        const f = module.addFunction(prefix+\"__fftFinal\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"bits\", \"i32\");\n        f.addParam(\"reverse\", \"i32\");\n        f.addParam(\"mulFactor\", \"i32\");\n        f.addLocal(\"n\", \"i32\");\n        f.addLocal(\"ndiv2\", \"i32\");\n        f.addLocal(\"pInv2\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"mask\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const T = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n            c.if(\n                c.i32_and(\n                    c.i32_eqz(c.getLocal(\"reverse\")),\n                    c.call(fPrefix + \"_isOne\", c.getLocal(\"mulFactor\"))\n                ),\n                c.ret([])\n            ),\n            c.setLocal(\"n\", c.i32_shl( c.i32_const(1), c.getLocal(\"bits\"))),\n\n            c.setLocal(\"mask\", c.i32_sub( c.getLocal(\"n\") , c.i32_const(1))),\n            c.setLocal(\"i\", c.i32_const(1)),\n            c.setLocal(\n                \"ndiv2\",\n                c.i32_shr_u(\n                    c.getLocal(\"n\"),\n                    c.i32_const(1)\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_ge_u(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"ndiv2\")\n                    )\n                ),\n\n                c.setLocal(\"idx1\",\n                    c.i32_add(\n                        c.getLocal(\"px\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.setLocal(\"idx2\",\n                    c.i32_add(\n                        c.getLocal(\"px\"),\n                        c.i32_mul(\n                            c.i32_sub(\n                                c.getLocal(\"n\"),\n                                c.getLocal(\"i\")\n                            ),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.if(\n                    c.getLocal(\"reverse\"),\n                    c.if(\n                        c.call(fPrefix + \"_isOne\", c.getLocal(\"mulFactor\")),\n                        [\n                            ...c.call(gPrefix + \"_copy\", c.getLocal(\"idx1\"), T),\n                            ...c.call(gPrefix + \"_copy\", c.getLocal(\"idx2\") , c.getLocal(\"idx1\") ),\n                            ...c.call(gPrefix + \"_copy\", T , c.getLocal(\"idx2\")),\n                        ],\n                        [\n                            ...c.call(gPrefix + \"_copy\", c.getLocal(\"idx1\"), T),\n                            ...c.call(opGtimesF , c.getLocal(\"idx2\") , c.getLocal(\"mulFactor\"), c.getLocal(\"idx1\") ),\n                            ...c.call(opGtimesF , T , c.getLocal(\"mulFactor\"), c.getLocal(\"idx2\")),\n                        ]\n                    ),\n                    c.if(\n                        c.call(fPrefix + \"_isOne\", c.getLocal(\"mulFactor\")),\n                        [\n                            // Do nothing (It should not be here)\n                        ],\n                        [\n                            ...c.call(opGtimesF , c.getLocal(\"idx1\") , c.getLocal(\"mulFactor\"), c.getLocal(\"idx1\") ),\n                            ...c.call(opGtimesF , c.getLocal(\"idx2\") , c.getLocal(\"mulFactor\"), c.getLocal(\"idx2\")),\n                        ]\n                    )\n                ),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n\n                c.br(0)\n            )),\n\n            c.if(\n                c.call(fPrefix + \"_isOne\", c.getLocal(\"mulFactor\")),\n                [\n                    // Do nothing (It should not be here)\n                ],\n                [\n                    ...c.call(opGtimesF, c.getLocal(\"px\") , c.getLocal(\"mulFactor\"), c.getLocal(\"px\")),\n                    ...c.setLocal(\"idx2\",\n                        c.i32_add(\n                            c.getLocal(\"px\"),\n                            c.i32_mul(\n                                c.getLocal(\"ndiv2\"),\n                                c.i32_const(n8g)\n                            )\n                        )\n                    ),\n                    ...c.call(opGtimesF, c.getLocal(\"idx2\"),c.getLocal(\"mulFactor\"), c.getLocal(\"idx2\"))\n                ]\n            )\n        );\n    }\n\n    function buildReversePermutation() {\n        const f = module.addFunction(prefix+\"__reversePermutation\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"bits\", \"i32\");\n        f.addLocal(\"n\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"ri\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const T = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n            c.setLocal(\"n\", c.i32_shl( c.i32_const(1), c.getLocal(\"bits\"))),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"n\")\n                    )\n                ),\n\n                c.setLocal(\"idx1\",\n                    c.i32_add(\n                        c.getLocal(\"px\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.setLocal(\"ri\", c.call(prefix + \"__rev\", c.getLocal(\"i\"), c.getLocal(\"bits\"))),\n\n                c.setLocal(\"idx2\",\n                    c.i32_add(\n                        c.getLocal(\"px\"),\n                        c.i32_mul(\n                            c.getLocal(\"ri\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.if(\n                    c.i32_lt_u(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"ri\")\n                    ),\n                    [\n                        ...c.call(gPrefix + \"_copy\", c.getLocal(\"idx1\"), T),\n                        ...c.call(gPrefix + \"_copy\", c.getLocal(\"idx2\") , c.getLocal(\"idx1\")),\n                        ...c.call(gPrefix + \"_copy\", T , c.getLocal(\"idx2\"))\n                    ]\n                ),\n\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n\n                c.br(0)\n            ))\n        );\n    }\n\n    function buildRev() {\n        const f = module.addFunction(prefix+\"__rev\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"bits\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.i32_rotl(\n                c.i32_add(\n                    c.i32_add(\n                        c.i32_shl(\n                            c.i32_load8_u(\n                                c.i32_and(\n                                    c.getLocal(\"x\"),\n                                    c.i32_const(0xFF)\n                                ),\n                                REVTABLE,\n                                0\n                            ),\n                            c.i32_const(24)\n                        ),\n                        c.i32_shl(\n                            c.i32_load8_u(\n                                c.i32_and(\n                                    c.i32_shr_u(\n                                        c.getLocal(\"x\"),\n                                        c.i32_const(8)\n                                    ),\n                                    c.i32_const(0xFF)\n                                ),\n                                REVTABLE,\n                                0\n                            ),\n                            c.i32_const(16)\n                        ),\n                    ),\n                    c.i32_add(\n                        c.i32_shl(\n                            c.i32_load8_u(\n                                c.i32_and(\n                                    c.i32_shr_u(\n                                        c.getLocal(\"x\"),\n                                        c.i32_const(16)\n                                    ),\n                                    c.i32_const(0xFF)\n                                ),\n                                REVTABLE,\n                                0\n                            ),\n                            c.i32_const(8)\n                        ),\n                        c.i32_load8_u(\n                            c.i32_and(\n                                c.i32_shr_u(\n                                    c.getLocal(\"x\"),\n                                    c.i32_const(24)\n                                ),\n                                c.i32_const(0xFF)\n                            ),\n                            REVTABLE,\n                            0\n                        ),\n                    )\n                ),\n                c.getLocal(\"bits\")\n            )\n        );\n    }\n\n\n    function buildFFTJoin() {\n        const f = module.addFunction(prefix+\"_fftJoin\");\n        f.addParam(\"pBuff1\", \"i32\");\n        f.addParam(\"pBuff2\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"first\", \"i32\");\n        f.addParam(\"inc\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const W = c.i32_const(module.alloc(n8f));\n        const T = c.i32_const(module.alloc(n8g));\n        const U = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n            c.call( fPrefix + \"_copy\", c.getLocal(\"first\"), W),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"n\")\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx1\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff1\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx2\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff2\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx2\"),\n                    W,\n                    T\n                ),\n\n                c.call(\n                    gPrefix + \"_copy\",\n                    c.getLocal(\"idx1\"),\n                    U\n                ),\n\n                c.call(\n                    gPrefix + \"_add\",\n                    U,\n                    T,\n                    c.getLocal(\"idx1\"),\n                ),\n\n                c.call(\n                    gPrefix + \"_sub\",\n                    U,\n                    T,\n                    c.getLocal(\"idx2\"),\n                ),\n\n                c.call(\n                    fPrefix + \"_mul\",\n                    W,\n                    c.getLocal(\"inc\"),\n                    W,\n                ),\n\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n    }\n\n\n    function buildFFTJoinExt() {\n        const f = module.addFunction(prefix+\"_fftJoinExt\");\n        f.addParam(\"pBuff1\", \"i32\");\n        f.addParam(\"pBuff2\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"first\", \"i32\");\n        f.addParam(\"inc\", \"i32\");\n        f.addParam(\"totalBits\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"pShiftToM\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const W = c.i32_const(module.alloc(n8f));\n        const U = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n\n            c.setLocal(\"pShiftToM\",\n                c.i32_add(\n                    c.i32_const(SHIFT_TO_M),\n                    c.i32_mul(\n                        c.getLocal(\"totalBits\"),\n                        c.i32_const(n8f)\n                    )\n                )\n            ),\n\n\n            c.call( fPrefix + \"_copy\", c.getLocal(\"first\"), W),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"n\")\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx1\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff1\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx2\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff2\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.call(\n                    gPrefix + \"_add\",\n                    c.getLocal(\"idx1\"),\n                    c.getLocal(\"idx2\"),\n                    U\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx2\"),\n                    c.getLocal(\"pShiftToM\"),\n                    c.getLocal(\"idx2\")\n                ),\n\n                c.call(\n                    gPrefix + \"_add\",\n                    c.getLocal(\"idx1\"),\n                    c.getLocal(\"idx2\"),\n                    c.getLocal(\"idx2\")\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx2\"),\n                    W,\n                    c.getLocal(\"idx2\"),\n                ),\n\n                c.call(\n                    gPrefix + \"_copy\",\n                    U,\n                    c.getLocal(\"idx1\")\n                ),\n\n                c.call(\n                    fPrefix + \"_mul\",\n                    W,\n                    c.getLocal(\"inc\"),\n                    W\n                ),\n\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n    }\n\n    function buildFFTJoinExtInv() {\n        const f = module.addFunction(prefix+\"_fftJoinExtInv\");\n        f.addParam(\"pBuff1\", \"i32\");\n        f.addParam(\"pBuff2\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"first\", \"i32\");\n        f.addParam(\"inc\", \"i32\");\n        f.addParam(\"totalBits\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"pShiftToM\", \"i32\");\n        f.addLocal(\"pSConst\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const W = c.i32_const(module.alloc(n8f));\n        const U = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n\n            c.setLocal(\"pShiftToM\",\n                c.i32_add(\n                    c.i32_const(SHIFT_TO_M),\n                    c.i32_mul(\n                        c.getLocal(\"totalBits\"),\n                        c.i32_const(n8f)\n                    )\n                )\n            ),\n            c.setLocal(\"pSConst\",\n                c.i32_add(\n                    c.i32_const(SCONST),\n                    c.i32_mul(\n                        c.getLocal(\"totalBits\"),\n                        c.i32_const(n8f)\n                    )\n                )\n            ),\n\n\n            c.call( fPrefix + \"_copy\", c.getLocal(\"first\"), W),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"n\")\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx1\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff1\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx2\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff2\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx2\"),\n                    W,\n                    U\n                ),\n\n                c.call(\n                    gPrefix + \"_sub\",\n                    c.getLocal(\"idx1\"),\n                    U,\n                    c.getLocal(\"idx2\"),\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx2\"),\n                    c.getLocal(\"pSConst\"),\n                    c.getLocal(\"idx2\")\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx1\"),\n                    c.getLocal(\"pShiftToM\"),\n                    c.getLocal(\"idx1\")\n                ),\n\n                c.call(\n                    gPrefix + \"_sub\",\n                    U,\n                    c.getLocal(\"idx1\"),\n                    c.getLocal(\"idx1\")\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx1\"),\n                    c.getLocal(\"pSConst\"),\n                    c.getLocal(\"idx1\")\n                ),\n\n                c.call(\n                    fPrefix + \"_mul\",\n                    W,\n                    c.getLocal(\"inc\"),\n                    W\n                ),\n\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n    }\n\n\n\n    function buildPrepareLagrangeEvaluation() {\n        const f = module.addFunction(prefix+\"_prepareLagrangeEvaluation\");\n        f.addParam(\"pBuff1\", \"i32\");\n        f.addParam(\"pBuff2\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"first\", \"i32\");\n        f.addParam(\"inc\", \"i32\");\n        f.addParam(\"totalBits\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"pShiftToM\", \"i32\");\n        f.addLocal(\"pSConst\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const W = c.i32_const(module.alloc(n8f));\n        const U = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n\n            c.setLocal(\"pShiftToM\",\n                c.i32_add(\n                    c.i32_const(SHIFT_TO_M),\n                    c.i32_mul(\n                        c.getLocal(\"totalBits\"),\n                        c.i32_const(n8f)\n                    )\n                )\n            ),\n            c.setLocal(\"pSConst\",\n                c.i32_add(\n                    c.i32_const(SCONST),\n                    c.i32_mul(\n                        c.getLocal(\"totalBits\"),\n                        c.i32_const(n8f)\n                    )\n                )\n            ),\n\n\n            c.call( fPrefix + \"_copy\", c.getLocal(\"first\"), W),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"n\")\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx1\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff1\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx2\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff2\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx1\"),\n                    c.getLocal(\"pShiftToM\"),\n                    U\n                ),\n\n                c.call(\n                    gPrefix + \"_sub\",\n                    c.getLocal(\"idx2\"),\n                    U,\n                    U\n                ),\n\n                c.call(\n                    gPrefix + \"_sub\",\n                    c.getLocal(\"idx1\"),\n                    c.getLocal(\"idx2\"),\n                    c.getLocal(\"idx2\"),\n                ),\n\n                c.call(\n                    opGtimesF,\n                    U,\n                    c.getLocal(\"pSConst\"),\n                    c.getLocal(\"idx1\"),\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx2\"),\n                    W,\n                    c.getLocal(\"idx2\"),\n                ),\n\n                c.call(\n                    fPrefix + \"_mul\",\n                    W,\n                    c.getLocal(\"inc\"),\n                    W\n                ),\n\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n    }\n\n    function buildFFTMix() {\n        const f = module.addFunction(prefix+\"_fftMix\");\n        f.addParam(\"pBuff\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"exp\", \"i32\");\n        f.addLocal(\"nGroups\", \"i32\");\n        f.addLocal(\"nPerGroup\", \"i32\");\n        f.addLocal(\"nPerGroupDiv2\", \"i32\");\n        f.addLocal(\"pairOffset\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"j\", \"i32\");\n        f.addLocal(\"pwm\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const W = c.i32_const(module.alloc(n8f));\n        const T = c.i32_const(module.alloc(n8g));\n        const U = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n            c.setLocal(\"nPerGroup\", c.i32_shl(c.i32_const(1), c.getLocal(\"exp\"))),\n            c.setLocal(\"nPerGroupDiv2\", c.i32_shr_u(c.getLocal(\"nPerGroup\"), c.i32_const(1))),\n            c.setLocal(\"nGroups\", c.i32_shr_u(c.getLocal(\"n\"), c.getLocal(\"exp\"))),\n            c.setLocal(\"pairOffset\", c.i32_mul(c.getLocal(\"nPerGroupDiv2\"), c.i32_const(n8g))),\n            c.setLocal(\"pwm\",\n                c.i32_add(\n                    c.i32_const(ROOTs),\n                    c.i32_mul(\n                        c.getLocal(\"exp\"),\n                        c.i32_const(n8f)\n                    )\n                )\n            ),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"nGroups\")\n                    )\n                ),\n                c.call( fPrefix + \"_one\", W),\n                c.setLocal(\"j\", c.i32_const(0)),\n                c.block(c.loop(\n                    c.br_if(\n                        1,\n                        c.i32_eq(\n                            c.getLocal(\"j\"),\n                            c.getLocal(\"nPerGroupDiv2\")\n                        )\n                    ),\n\n                    c.setLocal(\n                        \"idx1\",\n                        c.i32_add(\n                            c.getLocal(\"pBuff\"),\n                            c.i32_mul(\n                                c.i32_add(\n                                    c.i32_mul(\n                                        c.getLocal(\"i\"),\n                                        c.getLocal(\"nPerGroup\")\n                                    ),\n                                    c.getLocal(\"j\")\n                                ),\n                                c.i32_const(n8g)\n                            )\n                        )\n                    ),\n\n                    c.setLocal(\n                        \"idx2\",\n                        c.i32_add(\n                            c.getLocal(\"idx1\"),\n                            c.getLocal(\"pairOffset\")\n                        )\n                    ),\n\n                    c.call(\n                        opGtimesF,\n                        c.getLocal(\"idx2\"),\n                        W,\n                        T\n                    ),\n\n                    c.call(\n                        gPrefix + \"_copy\",\n                        c.getLocal(\"idx1\"),\n                        U\n                    ),\n\n                    c.call(\n                        gPrefix + \"_add\",\n                        U,\n                        T,\n                        c.getLocal(\"idx1\"),\n                    ),\n\n                    c.call(\n                        gPrefix + \"_sub\",\n                        U,\n                        T,\n                        c.getLocal(\"idx2\"),\n                    ),\n\n                    c.call(\n                        fPrefix + \"_mul\",\n                        W,\n                        c.getLocal(\"pwm\"),\n                        W,\n                    ),\n                    c.setLocal(\"j\", c.i32_add(c.getLocal(\"j\"), c.i32_const(1))),\n                    c.br(0)\n                )),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n    }\n\n\n    // Reverse all and multiply by factor\n    function buildFFTFinal() {\n        const f = module.addFunction(prefix+\"_fftFinal\");\n        f.addParam(\"pBuff\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"factor\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"ndiv2\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const T = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n            c.setLocal(\"ndiv2\", c.i32_shr_u(c.getLocal(\"n\"), c.i32_const(1))),\n            c.if(\n                c.i32_and(\n                    c.getLocal(\"n\"),\n                    c.i32_const(1)\n                ),\n                c.call(\n                    opGtimesF,\n                    c.i32_add(\n                        c.getLocal(\"pBuff\"),\n                        c.i32_mul(\n                            c.getLocal(\"ndiv2\"),\n                            c.i32_const(n8g)\n                        )\n                    ),\n                    c.getLocal(\"factor\"),\n                    c.i32_add(\n                        c.getLocal(\"pBuff\"),\n                        c.i32_mul(\n                            c.getLocal(\"ndiv2\"),\n                            c.i32_const(n8g)\n                        )\n                    ),\n                ),\n            ),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_ge_u(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"ndiv2\")\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx1\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx2\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff\"),\n                        c.i32_mul(\n                            c.i32_sub(\n                                c.i32_sub(\n                                    c.getLocal(\"n\"),\n                                    c.i32_const(1)\n                                ),\n                                c.getLocal(\"i\")\n                            ),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx2\"),\n                    c.getLocal(\"factor\"),\n                    T\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx1\"),\n                    c.getLocal(\"factor\"),\n                    c.getLocal(\"idx2\"),\n                ),\n\n                c.call(\n                    gPrefix + \"_copy\",\n                    T,\n                    c.getLocal(\"idx1\"),\n                ),\n\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n    }\n\n    buildRev();\n    buildReversePermutation();\n    buildFinalInverse();\n    buildRawFFT();\n    buildLog2();\n    buildFFT();\n    buildIFFT();\n    buildFFTJoin();\n    buildFFTJoinExt();\n    buildFFTJoinExtInv();\n    buildFFTMix();\n    buildFFTFinal();\n    buildPrepareLagrangeEvaluation();\n\n    module.exportFunction(prefix+\"_fft\");\n    module.exportFunction(prefix+\"_ifft\");\n    module.exportFunction(prefix+\"_rawfft\");\n    module.exportFunction(prefix+\"_fftJoin\");\n    module.exportFunction(prefix+\"_fftJoinExt\");\n    module.exportFunction(prefix+\"_fftJoinExtInv\");\n    module.exportFunction(prefix+\"_fftMix\");\n    module.exportFunction(prefix+\"_fftFinal\");\n    module.exportFunction(prefix+\"_prepareLagrangeEvaluation\");\n\n};\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nvar build_pol = function buildPol(module, prefix, prefixField) {\n\n    const n64 = module.modules[prefixField].n64;\n    const n8 = n64*8;\n\n\n    function buildZero() {\n        const f = module.addFunction(prefix+\"_zero\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addLocal(\"lastp\", \"i32\");\n        f.addLocal(\"p\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.setLocal(\"p\", c.getLocal(\"px\")),\n            c.setLocal(\n                \"lastp\",\n                c.i32_add(\n                    c.getLocal(\"px\"),\n                    c.i32_mul(\n                        c.getLocal(\"n\"),\n                        c.i32_const(n8)\n                    )\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"p\"),\n                        c.getLocal(\"lastp\")\n                    )\n                ),\n                c.call(prefixField + \"_zero\", c.getLocal(\"p\")),\n                c.setLocal(\"p\", c.i32_add(c.getLocal(\"p\"), c.i32_const(n8))),\n                c.br(0)\n            ))\n        );\n    }\n\n    function buildConstructLC() {\n        const f = module.addFunction(prefix+\"_constructLC\");\n        f.addParam(\"ppolynomials\", \"i32\");\n        f.addParam(\"psignals\", \"i32\");\n        f.addParam(\"nSignals\", \"i32\");\n        f.addParam(\"pres\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"j\", \"i32\");\n        f.addLocal(\"pp\", \"i32\");\n        f.addLocal(\"ps\", \"i32\");\n        f.addLocal(\"pd\", \"i32\");\n        f.addLocal(\"ncoefs\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const aux = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.setLocal(\"pp\", c.getLocal(\"ppolynomials\")),\n            c.setLocal(\"ps\", c.getLocal(\"psignals\")),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"nSignals\")\n                    )\n                ),\n\n                c.setLocal(\"ncoefs\", c.i32_load(c.getLocal(\"pp\"))),\n                c.setLocal(\"pp\", c.i32_add(c.getLocal(\"pp\"), c.i32_const(4))),\n\n                c.setLocal(\"j\", c.i32_const(0)),\n                c.block(c.loop(\n                    c.br_if(\n                        1,\n                        c.i32_eq(\n                            c.getLocal(\"j\"),\n                            c.getLocal(\"ncoefs\")\n                        )\n                    ),\n\n                    c.setLocal(\n                        \"pd\",\n                        c.i32_add(\n                            c.getLocal(\"pres\"),\n                            c.i32_mul(\n                                c.i32_load(c.getLocal(\"pp\")),\n                                c.i32_const(n8)\n                            )\n                        )\n                    ),\n\n                    c.setLocal(\"pp\", c.i32_add(c.getLocal(\"pp\"), c.i32_const(4))),\n\n\n                    c.call(\n                        prefixField + \"_mul\",\n                        c.getLocal(\"ps\"),\n                        c.getLocal(\"pp\"),\n                        aux\n                    ),\n\n                    c.call(\n                        prefixField + \"_add\",\n                        aux,\n                        c.getLocal(\"pd\"),\n                        c.getLocal(\"pd\")\n                    ),\n\n                    c.setLocal(\"pp\", c.i32_add(c.getLocal(\"pp\"), c.i32_const(n8))),\n                    c.setLocal(\"j\", c.i32_add(c.getLocal(\"j\"), c.i32_const(1))),\n                    c.br(0)\n                )),\n\n                c.setLocal(\"ps\", c.i32_add(c.getLocal(\"ps\"), c.i32_const(n8))),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n\n    }\n\n    buildZero();\n    buildConstructLC();\n\n\n    module.exportFunction(prefix + \"_zero\");\n    module.exportFunction(prefix + \"_constructLC\");\n\n    return prefix;\n\n\n\n\n};\n\nvar build_qap = function buildQAP(module, prefix, prefixField) {\n\n    const n64 = module.modules[prefixField].n64;\n    const n8 = n64*8;\n\n\n    function buildBuildABC() {\n        const f = module.addFunction(prefix+\"_buildABC\");\n        f.addParam(\"pCoefs\", \"i32\");\n        f.addParam(\"nCoefs\", \"i32\");\n        f.addParam(\"pWitness\", \"i32\");\n        f.addParam(\"pA\", \"i32\");\n        f.addParam(\"pB\", \"i32\");\n        f.addParam(\"pC\", \"i32\");\n        f.addParam(\"offsetOut\", \"i32\");\n        f.addParam(\"nOut\", \"i32\");\n        f.addParam(\"offsetWitness\", \"i32\");\n        f.addParam(\"nWitness\", \"i32\");\n        f.addLocal(\"it\", \"i32\");\n        f.addLocal(\"ita\", \"i32\");\n        f.addLocal(\"itb\", \"i32\");\n        f.addLocal(\"last\", \"i32\");\n        f.addLocal(\"m\", \"i32\");\n        f.addLocal(\"c\", \"i32\");\n        f.addLocal(\"s\", \"i32\");\n        f.addLocal(\"pOut\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const aux = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n\n            // Set output a and b to 0\n            c.setLocal(\"ita\", c.getLocal(\"pA\")),\n            c.setLocal(\"itb\", c.getLocal(\"pB\")),\n            c.setLocal(\n                \"last\",\n                c.i32_add(\n                    c.getLocal(\"pA\"),\n                    c.i32_mul(\n                        c.getLocal(\"nOut\"),\n                        c.i32_const(n8)\n                    )\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"ita\"),\n                        c.getLocal(\"last\")\n                    )\n                ),\n                c.call(prefixField + \"_zero\", c.getLocal(\"ita\")),\n                c.call(prefixField + \"_zero\", c.getLocal(\"itb\")),\n                c.setLocal(\"ita\", c.i32_add(c.getLocal(\"ita\"), c.i32_const(n8))),\n                c.setLocal(\"itb\", c.i32_add(c.getLocal(\"itb\"), c.i32_const(n8))),\n                c.br(0)\n            )),\n\n\n            c.setLocal(\"it\", c.getLocal(\"pCoefs\")),\n            c.setLocal(\n                \"last\",\n                c.i32_add(\n                    c.getLocal(\"pCoefs\"),\n                    c.i32_mul(\n                        c.getLocal(\"nCoefs\"),\n                        c.i32_const(n8+12)\n                    )\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"it\"),\n                        c.getLocal(\"last\")\n                    )\n                ),\n                c.setLocal(\n                    \"s\",\n                    c.i32_load(c.getLocal(\"it\"), 8)\n                ),\n                c.if(\n                    c.i32_or(\n                        c.i32_lt_u(\n                            c.getLocal(\"s\"),\n                            c.getLocal(\"offsetWitness\"),\n                        ),\n                        c.i32_ge_u(\n                            c.getLocal(\"s\"),\n                            c.i32_add(\n                                c.getLocal(\"offsetWitness\"),\n                                c.getLocal(\"nWitness\"),\n                            )\n                        )\n                    ),\n                    [\n                        ...c.setLocal(\"it\", c.i32_add(c.getLocal(\"it\"), c.i32_const(n8+12))),\n                        ...c.br(1)\n                    ]\n                ),\n\n                c.setLocal(\n                    \"m\",\n                    c.i32_load(c.getLocal(\"it\"))\n                ),\n                c.if(\n                    c.i32_eq(c.getLocal(\"m\"), c.i32_const(0)),\n                    c.setLocal(\"pOut\", c.getLocal(\"pA\")),\n                    c.if(\n                        c.i32_eq(c.getLocal(\"m\"), c.i32_const(1)),\n                        c.setLocal(\"pOut\", c.getLocal(\"pB\")),\n                        [\n                            ...c.setLocal(\"it\", c.i32_add(c.getLocal(\"it\"), c.i32_const(n8+12))),\n                            ...c.br(1)\n                        ]\n                    )\n                ),\n                c.setLocal(\n                    \"c\",\n                    c.i32_load(c.getLocal(\"it\"), 4)\n                ),\n                c.if(\n                    c.i32_or(\n                        c.i32_lt_u(\n                            c.getLocal(\"c\"),\n                            c.getLocal(\"offsetOut\"),\n                        ),\n                        c.i32_ge_u(\n                            c.getLocal(\"c\"),\n                            c.i32_add(\n                                c.getLocal(\"offsetOut\"),\n                                c.getLocal(\"nOut\"),\n                            )\n                        )\n                    ),\n                    [\n                        ...c.setLocal(\"it\", c.i32_add(c.getLocal(\"it\"), c.i32_const(n8+12))),\n                        ...c.br(1)\n                    ]\n                ),\n                c.setLocal(\n                    \"pOut\",\n                    c.i32_add(\n                        c.getLocal(\"pOut\"),\n                        c.i32_mul(\n                            c.i32_sub(\n                                c.getLocal(\"c\"),\n                                c.getLocal(\"offsetOut\")\n                            ),\n                            c.i32_const(n8)\n                        )\n                    )\n                ),\n                c.call(\n                    prefixField + \"_mul\",\n                    c.i32_add(\n                        c.getLocal(\"pWitness\"),\n                        c.i32_mul(\n                            c.i32_sub(c.getLocal(\"s\"), c.getLocal(\"offsetWitness\")),\n                            c.i32_const(n8)\n                        )\n                    ),\n                    c.i32_add( c.getLocal(\"it\"), c.i32_const(12)),\n                    aux\n                ),\n                c.call(\n                    prefixField + \"_add\",\n                    c.getLocal(\"pOut\"),\n                    aux,\n                    c.getLocal(\"pOut\"),\n                ),\n                c.setLocal(\"it\", c.i32_add(c.getLocal(\"it\"), c.i32_const(n8+12))),\n                c.br(0)\n            )),\n\n            c.setLocal(\"ita\", c.getLocal(\"pA\")),\n            c.setLocal(\"itb\", c.getLocal(\"pB\")),\n            c.setLocal(\"it\", c.getLocal(\"pC\")),\n            c.setLocal(\n                \"last\",\n                c.i32_add(\n                    c.getLocal(\"pA\"),\n                    c.i32_mul(\n                        c.getLocal(\"nOut\"),\n                        c.i32_const(n8)\n                    )\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"ita\"),\n                        c.getLocal(\"last\")\n                    )\n                ),\n                c.call(\n                    prefixField + \"_mul\",\n                    c.getLocal(\"ita\"),\n                    c.getLocal(\"itb\"),\n                    c.getLocal(\"it\")\n                ),\n                c.setLocal(\"ita\", c.i32_add(c.getLocal(\"ita\"), c.i32_const(n8))),\n                c.setLocal(\"itb\", c.i32_add(c.getLocal(\"itb\"), c.i32_const(n8))),\n                c.setLocal(\"it\", c.i32_add(c.getLocal(\"it\"), c.i32_const(n8))),\n                c.br(0)\n            )),\n\n        );\n    }\n\n    function buildJoinABC() {\n        const f = module.addFunction(prefix+\"_joinABC\");\n        f.addParam(\"pA\", \"i32\");\n        f.addParam(\"pB\", \"i32\");\n        f.addParam(\"pC\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"pP\", \"i32\");\n        f.addLocal(\"ita\", \"i32\");\n        f.addLocal(\"itb\", \"i32\");\n        f.addLocal(\"itc\", \"i32\");\n        f.addLocal(\"itp\", \"i32\");\n        f.addLocal(\"last\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const aux = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.setLocal(\"ita\", c.getLocal(\"pA\")),\n            c.setLocal(\"itb\", c.getLocal(\"pB\")),\n            c.setLocal(\"itc\", c.getLocal(\"pC\")),\n            c.setLocal(\"itp\", c.getLocal(\"pP\")),\n            c.setLocal(\n                \"last\",\n                c.i32_add(\n                    c.getLocal(\"pA\"),\n                    c.i32_mul(\n                        c.getLocal(\"n\"),\n                        c.i32_const(n8)\n                    )\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"ita\"),\n                        c.getLocal(\"last\")\n                    )\n                ),\n                c.call(\n                    prefixField + \"_mul\",\n                    c.getLocal(\"ita\"),\n                    c.getLocal(\"itb\"),\n                    aux\n                ),\n                c.call(\n                    prefixField + \"_sub\",\n                    aux,\n                    c.getLocal(\"itc\"),\n                    c.getLocal(\"itp\"),\n                ),\n                c.setLocal(\"ita\", c.i32_add(c.getLocal(\"ita\"), c.i32_const(n8))),\n                c.setLocal(\"itb\", c.i32_add(c.getLocal(\"itb\"), c.i32_const(n8))),\n                c.setLocal(\"itc\", c.i32_add(c.getLocal(\"itc\"), c.i32_const(n8))),\n                c.setLocal(\"itp\", c.i32_add(c.getLocal(\"itp\"), c.i32_const(n8))),\n                c.br(0)\n            ))\n        );\n    }\n\n    function buildBatchAdd() {\n        const f = module.addFunction(prefix+\"_batchAdd\");\n        f.addParam(\"pa\", \"i32\");\n        f.addParam(\"pb\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n        f.addLocal(\"ita\", \"i32\");\n        f.addLocal(\"itb\", \"i32\");\n        f.addLocal(\"itr\", \"i32\");\n        f.addLocal(\"last\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.setLocal(\"ita\", c.getLocal(\"pa\")),\n            c.setLocal(\"itb\", c.getLocal(\"pb\")),\n            c.setLocal(\"itr\", c.getLocal(\"pr\")),\n            c.setLocal(\n                \"last\",\n                c.i32_add(\n                    c.getLocal(\"pa\"),\n                    c.i32_mul(\n                        c.getLocal(\"n\"),\n                        c.i32_const(n8)\n                    )\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"ita\"),\n                        c.getLocal(\"last\")\n                    )\n                ),\n                c.call(\n                    prefixField + \"_add\",\n                    c.getLocal(\"ita\"),\n                    c.getLocal(\"itb\"),\n                    c.getLocal(\"itr\"),\n                ),\n                c.setLocal(\"ita\", c.i32_add(c.getLocal(\"ita\"), c.i32_const(n8))),\n                c.setLocal(\"itb\", c.i32_add(c.getLocal(\"itb\"), c.i32_const(n8))),\n                c.setLocal(\"itr\", c.i32_add(c.getLocal(\"itr\"), c.i32_const(n8))),\n                c.br(0)\n            ))\n        );\n    }\n\n    buildBuildABC();\n    buildJoinABC();\n    buildBatchAdd();\n\n    module.exportFunction(prefix + \"_buildABC\");\n    module.exportFunction(prefix + \"_joinABC\");\n    module.exportFunction(prefix + \"_batchAdd\");\n\n    return prefix;\n\n};\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nvar build_applykey = function buildApplyKey(module, fnName, gPrefix, frPrefix, sizeGIn, sizeGOut, sizeF, opGtimesF) {\n\n    const f = module.addFunction(fnName);\n    f.addParam(\"pIn\", \"i32\");\n    f.addParam(\"n\", \"i32\");\n    f.addParam(\"pFirst\", \"i32\");\n    f.addParam(\"pInc\", \"i32\");\n    f.addParam(\"pOut\", \"i32\");\n    f.addLocal(\"pOldFree\", \"i32\");\n    f.addLocal(\"i\", \"i32\");\n    f.addLocal(\"pFrom\", \"i32\");\n    f.addLocal(\"pTo\", \"i32\");\n\n    const c = f.getCodeBuilder();\n\n    const t = c.i32_const(module.alloc(sizeF));\n\n    f.addCode(\n        c.setLocal(\"pFrom\", c.getLocal(\"pIn\")),\n        c.setLocal(\"pTo\", c.getLocal(\"pOut\")),\n    );\n\n    // t = first\n    f.addCode(\n        c.call(\n            frPrefix + \"_copy\",\n            c.getLocal(\"pFirst\"),\n            t\n        )\n    );\n    f.addCode(\n        c.setLocal(\"i\", c.i32_const(0)),\n        c.block(c.loop(\n            c.br_if(1, c.i32_eq ( c.getLocal(\"i\"), c.getLocal(\"n\") )),\n\n            c.call(\n                opGtimesF,\n                c.getLocal(\"pFrom\"),\n                t,\n                c.getLocal(\"pTo\")\n            ),\n            c.setLocal(\"pFrom\", c.i32_add(c.getLocal(\"pFrom\"), c.i32_const(sizeGIn))),\n            c.setLocal(\"pTo\", c.i32_add(c.getLocal(\"pTo\"), c.i32_const(sizeGOut))),\n\n            // t = t* inc\n            c.call(\n                frPrefix + \"_mul\",\n                t,\n                c.getLocal(\"pInc\"),\n                t\n            ),\n            c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n            c.br(0)\n        ))\n    );\n\n    module.exportFunction(fnName);\n\n};\n\nconst utils$2 = utils$6;\n\nconst buildF1m$1 =build_f1m;\nconst buildF1$1 =build_f1;\nconst buildF2m$1 =build_f2m;\nconst buildF3m$1 =build_f3m;\nconst buildCurve$1 =build_curve_jacobian_a0;\nconst buildFFT$2 = build_fft;\nconst buildPol$1 = build_pol;\nconst buildQAP$1 = build_qap;\nconst buildApplyKey$1 = build_applykey;\nconst { bitLength: bitLength$2, modInv, isOdd: isOdd$1, isNegative: isNegative$2 } = bigint;\n\nvar build_bn128 = function buildBN128(module, _prefix) {\n\n    const prefix = _prefix || \"bn128\";\n\n    if (module.modules[prefix]) return prefix;  // already builded\n\n    const q = 21888242871839275222246405745257275088696311157297823662689037894645226208583n;\n    const r = 21888242871839275222246405745257275088548364400416034343698204186575808495617n;\n\n\n    const n64 = Math.floor((bitLength$2(q - 1n) - 1)/64) +1;\n    const n8 = n64*8;\n    const frsize = n8;\n    const f1size = n8;\n    const f2size = f1size * 2;\n    const ftsize = f1size * 12;\n\n    const pr = module.alloc(utils$2.bigInt2BytesLE( r, frsize ));\n\n    const f1mPrefix = buildF1m$1(module, q, \"f1m\");\n    buildF1$1(module, r, \"fr\", \"frm\");\n\n    const pG1b = module.alloc(utils$2.bigInt2BytesLE( toMontgomery(3n), f1size ));\n    const g1mPrefix = buildCurve$1(module, \"g1m\", \"f1m\", pG1b);\n\n    buildFFT$2(module, \"frm\", \"frm\", \"frm\", \"frm_mul\");\n\n    buildPol$1(module, \"pol\", \"frm\");\n    buildQAP$1(module, \"qap\", \"frm\");\n\n    const f2mPrefix = buildF2m$1(module, \"f1m_neg\", \"f2m\", \"f1m\");\n    const pG2b = module.alloc([\n        ...utils$2.bigInt2BytesLE( toMontgomery(19485874751759354771024239261021720505790618469301721065564631296452457478373n), f1size ),\n        ...utils$2.bigInt2BytesLE( toMontgomery(266929791119991161246907387137283842545076965332900288569378510910307636690n), f1size )\n    ]);\n    const g2mPrefix = buildCurve$1(module, \"g2m\", \"f2m\", pG2b);\n\n\n    function buildGTimesFr(fnName, opMul) {\n        const f = module.addFunction(fnName);\n        f.addParam(\"pG\", \"i32\");\n        f.addParam(\"pFr\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const AUX = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.call(\"frm_fromMontgomery\", c.getLocal(\"pFr\"), AUX),\n            c.call(\n                opMul,\n                c.getLocal(\"pG\"),\n                AUX,\n                c.i32_const(n8),\n                c.getLocal(\"pr\")\n            )\n        );\n\n        module.exportFunction(fnName);\n    }\n    buildGTimesFr(\"g1m_timesFr\", \"g1m_timesScalar\");\n    buildFFT$2(module, \"g1m\", \"g1m\", \"frm\", \"g1m_timesFr\");\n\n    buildGTimesFr(\"g2m_timesFr\", \"g2m_timesScalar\");\n    buildFFT$2(module, \"g2m\", \"g2m\", \"frm\", \"g2m_timesFr\");\n\n    buildGTimesFr(\"g1m_timesFrAffine\", \"g1m_timesScalarAffine\");\n    buildGTimesFr(\"g2m_timesFrAffine\", \"g2m_timesScalarAffine\");\n\n    buildApplyKey$1(module, \"frm_batchApplyKey\", \"fmr\", \"frm\", n8, n8, n8, \"frm_mul\");\n    buildApplyKey$1(module, \"g1m_batchApplyKey\", \"g1m\", \"frm\", n8*3, n8*3, n8, \"g1m_timesFr\");\n    buildApplyKey$1(module, \"g1m_batchApplyKeyMixed\", \"g1m\", \"frm\", n8*2, n8*3, n8, \"g1m_timesFrAffine\");\n    buildApplyKey$1(module, \"g2m_batchApplyKey\", \"g2m\", \"frm\", n8*2*3, n8*3*2, n8, \"g2m_timesFr\");\n    buildApplyKey$1(module, \"g2m_batchApplyKeyMixed\", \"g2m\", \"frm\", n8*2*2, n8*3*2, n8, \"g2m_timesFrAffine\");\n\n    function toMontgomery(a) {\n        return BigInt(a) * ( 1n << BigInt(f1size*8)) % q;\n    }\n\n    const G1gen = [\n        1n,\n        2n,\n        1n\n    ];\n\n    const pG1gen = module.alloc(\n        [\n            ...utils$2.bigInt2BytesLE( toMontgomery(G1gen[0]), f1size ),\n            ...utils$2.bigInt2BytesLE( toMontgomery(G1gen[1]), f1size ),\n            ...utils$2.bigInt2BytesLE( toMontgomery(G1gen[2]), f1size ),\n        ]\n    );\n\n    const G1zero = [\n        0n,\n        1n,\n        0n\n    ];\n\n    const pG1zero = module.alloc(\n        [\n            ...utils$2.bigInt2BytesLE( toMontgomery(G1zero[0]), f1size ),\n            ...utils$2.bigInt2BytesLE( toMontgomery(G1zero[1]), f1size ),\n            ...utils$2.bigInt2BytesLE( toMontgomery(G1zero[2]), f1size )\n        ]\n    );\n\n    const G2gen = [\n        [\n            10857046999023057135944570762232829481370756359578518086990519993285655852781n,\n            11559732032986387107991004021392285783925812861821192530917403151452391805634n,\n        ],[\n            8495653923123431417604973247489272438418190587263600148770280649306958101930n,\n            4082367875863433681332203403145435568316851327593401208105741076214120093531n,\n        ],[\n            1n,\n            0n,\n        ]\n    ];\n\n    const pG2gen = module.alloc(\n        [\n            ...utils$2.bigInt2BytesLE( toMontgomery(G2gen[0][0]), f1size ),\n            ...utils$2.bigInt2BytesLE( toMontgomery(G2gen[0][1]), f1size ),\n            ...utils$2.bigInt2BytesLE( toMontgomery(G2gen[1][0]), f1size ),\n            ...utils$2.bigInt2BytesLE( toMontgomery(G2gen[1][1]), f1size ),\n            ...utils$2.bigInt2BytesLE( toMontgomery(G2gen[2][0]), f1size ),\n            ...utils$2.bigInt2BytesLE( toMontgomery(G2gen[2][1]), f1size ),\n        ]\n    );\n\n    const G2zero = [\n        [\n            0n,\n            0n,\n        ],[\n            1n,\n            0n,\n        ],[\n            0n,\n            0n,\n        ]\n    ];\n\n    const pG2zero = module.alloc(\n        [\n            ...utils$2.bigInt2BytesLE( toMontgomery(G2zero[0][0]), f1size ),\n            ...utils$2.bigInt2BytesLE( toMontgomery(G2zero[0][1]), f1size ),\n            ...utils$2.bigInt2BytesLE( toMontgomery(G2zero[1][0]), f1size ),\n            ...utils$2.bigInt2BytesLE( toMontgomery(G2zero[1][1]), f1size ),\n            ...utils$2.bigInt2BytesLE( toMontgomery(G2zero[2][0]), f1size ),\n            ...utils$2.bigInt2BytesLE( toMontgomery(G2zero[2][1]), f1size ),\n        ]\n    );\n\n    const pOneT = module.alloc([\n        ...utils$2.bigInt2BytesLE( toMontgomery(1), f1size ),\n        ...utils$2.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils$2.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils$2.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils$2.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils$2.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils$2.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils$2.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils$2.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils$2.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils$2.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils$2.bigInt2BytesLE( toMontgomery(0), f1size ),\n    ]);\n\n    const pNonResidueF6 = module.alloc([\n        ...utils$2.bigInt2BytesLE( toMontgomery(9), f1size ),\n        ...utils$2.bigInt2BytesLE( toMontgomery(1), f1size ),\n    ]);\n\n    const pTwoInv = module.alloc([\n        ...utils$2.bigInt2BytesLE( toMontgomery(  modInv(2n, q)), f1size ),\n        ...utils$2.bigInt2BytesLE( 0n, f1size )\n    ]);\n\n    const pAltBn128Twist = pNonResidueF6;\n\n    const pTwistCoefB = module.alloc([\n        ...utils$2.bigInt2BytesLE( toMontgomery(19485874751759354771024239261021720505790618469301721065564631296452457478373n), f1size ),\n        ...utils$2.bigInt2BytesLE( toMontgomery(266929791119991161246907387137283842545076965332900288569378510910307636690n), f1size ),\n    ]);\n\n    function build_mulNR6() {\n        const f = module.addFunction(prefix + \"_mulNR6\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.call(\n                f2mPrefix + \"_mul\",\n                c.i32_const(pNonResidueF6),\n                c.getLocal(\"x\"),\n                c.getLocal(\"pr\")\n            )\n        );\n    }\n    build_mulNR6();\n\n    const f6mPrefix = buildF3m$1(module, prefix+\"_mulNR6\", \"f6m\", \"f2m\");\n\n    function build_mulNR12() {\n        const f = module.addFunction(prefix + \"_mulNR12\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.call(\n                f2mPrefix + \"_mul\",\n                c.i32_const(pNonResidueF6),\n                c.i32_add(c.getLocal(\"x\"), c.i32_const(n8*4)),\n                c.getLocal(\"pr\")\n            ),\n            c.call(\n                f2mPrefix + \"_copy\",\n                c.getLocal(\"x\"),\n                c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2)),\n            ),\n            c.call(\n                f2mPrefix + \"_copy\",\n                c.i32_add(c.getLocal(\"x\"), c.i32_const(n8*2)),\n                c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*4)),\n            )\n        );\n    }\n    build_mulNR12();\n\n    const ftmPrefix = buildF2m$1(module, prefix+\"_mulNR12\", \"ftm\", f6mPrefix);\n\n\n    const ateLoopCount = 29793968203157093288n;\n    const ateLoopBitBytes = bits(ateLoopCount);\n    const pAteLoopBitBytes = module.alloc(ateLoopBitBytes);\n\n    const ateCoefSize = 3 * f2size;\n    const ateNDblCoefs = ateLoopBitBytes.length-1;\n    const ateNAddCoefs = ateLoopBitBytes.reduce((acc, b) =>  acc + ( b!=0 ? 1 : 0)   ,0);\n    const ateNCoefs = ateNAddCoefs + ateNDblCoefs + 1;\n    const prePSize = 3*2*n8;\n    const preQSize = 3*n8*2 + ateNCoefs*ateCoefSize;\n\n\n    module.modules[prefix] = {\n        n64: n64,\n        pG1gen: pG1gen,\n        pG1zero: pG1zero,\n        pG1b: pG1b,\n        pG2gen: pG2gen,\n        pG2zero: pG2zero,\n        pG2b: pG2b,\n        pq: module.modules[\"f1m\"].pq,\n        pr: pr,\n        pOneT: pOneT,\n        prePSize: prePSize,\n        preQSize: preQSize,\n        r: r.toString(),\n        q: q.toString()\n    };\n\n    // console.log(\"PrePSize: \" +prePSize);\n    // console.log(\"PreQSize: \" +preQSize);\n\n    const finalExpZ = 4965661367192848881n;\n\n    function naf(n) {\n        let E = n;\n        const res = [];\n        while (E > 0n) {\n            if (isOdd$1(E)) {\n                const z = 2 - Number(E % 4n);\n                res.push( z );\n                E = E - BigInt(z);\n            } else {\n                res.push( 0 );\n            }\n            E = E >> 1n;\n        }\n        return res;\n    }\n\n    function bits(n) {\n        let E = n;\n        const res = [];\n        while (E > 0n) {\n            if (isOdd$1(E)) {\n                res.push( 1 );\n            } else {\n                res.push( 0 );\n            }\n            E = E >> 1n;\n        }\n        return res;\n    }\n\n    function buildPrepareG1() {\n        const f = module.addFunction(prefix+ \"_prepareG1\");\n        f.addParam(\"pP\", \"i32\");\n        f.addParam(\"ppreP\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.call(g1mPrefix + \"_normalize\", c.getLocal(\"pP\"), c.getLocal(\"ppreP\")),  // TODO Remove if already in affine\n        );\n    }\n\n    function buildPrepAddStep() {\n        const f = module.addFunction(prefix+ \"_prepAddStep\");\n        f.addParam(\"pQ\", \"i32\");\n        f.addParam(\"pR\", \"i32\");\n        f.addParam(\"pCoef\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const X2  = c.getLocal(\"pQ\");\n        const Y2  = c.i32_add(c.getLocal(\"pQ\"), c.i32_const(f2size));\n\n        const X1  = c.getLocal(\"pR\");\n        const Y1  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(f2size));\n        const Z1  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(2*f2size));\n\n        const ELL_0  = c.getLocal(\"pCoef\");\n        const ELL_VW = c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(f2size));\n        const ELL_VV  = c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(2*f2size));\n\n        const D = ELL_VW;\n        const E = c.i32_const(module.alloc(f2size));\n        const F = c.i32_const(module.alloc(f2size));\n        const G = c.i32_const(module.alloc(f2size));\n        const H = c.i32_const(module.alloc(f2size));\n        const I = c.i32_const(module.alloc(f2size));\n        const J = c.i32_const(module.alloc(f2size));\n        const AUX = c.i32_const(module.alloc(f2size));\n\n        f.addCode(\n            // D = X1 - X2*Z1\n            c.call(f2mPrefix + \"_mul\", X2, Z1, D),\n            c.call(f2mPrefix + \"_sub\", X1, D, D),\n\n            // E = Y1 - Y2*Z1\n            c.call(f2mPrefix + \"_mul\", Y2, Z1, E),\n            c.call(f2mPrefix + \"_sub\", Y1, E, E),\n\n            // F = D^2\n            c.call(f2mPrefix + \"_square\", D, F),\n\n            // G = E^2\n            c.call(f2mPrefix + \"_square\", E, G),\n\n            // H = D*F\n            c.call(f2mPrefix + \"_mul\", D, F, H),\n\n            // I = X1 * F\n            c.call(f2mPrefix + \"_mul\", X1, F, I),\n\n            // J = H + Z1*G - (I+I)\n            c.call(f2mPrefix + \"_add\", I, I, AUX),\n            c.call(f2mPrefix + \"_mul\", Z1, G, J),\n            c.call(f2mPrefix + \"_add\", H, J, J),\n            c.call(f2mPrefix + \"_sub\", J, AUX, J),\n\n\n            // X3 (X1) = D*J\n            c.call(f2mPrefix + \"_mul\", D, J, X1),\n\n            // Y3 (Y1) = E*(I-J)-(H*Y1)\n            c.call(f2mPrefix + \"_mul\", H, Y1, Y1),\n            c.call(f2mPrefix + \"_sub\", I, J, AUX),\n            c.call(f2mPrefix + \"_mul\", E, AUX, AUX),\n            c.call(f2mPrefix + \"_sub\", AUX, Y1, Y1),\n\n            // Z3 (Z1) = Z1*H\n            c.call(f2mPrefix + \"_mul\", Z1, H, Z1),\n\n            // ell_0 = xi * (E * X2 - D * Y2)\n            c.call(f2mPrefix + \"_mul\", D, Y2, AUX),\n            c.call(f2mPrefix + \"_mul\", E, X2, ELL_0),\n            c.call(f2mPrefix + \"_sub\", ELL_0, AUX, ELL_0),\n            c.call(f2mPrefix + \"_mul\", ELL_0, c.i32_const(pAltBn128Twist), ELL_0),\n\n\n            // ell_VV = - E (later: * xP)\n            c.call(f2mPrefix + \"_neg\", E, ELL_VV),\n\n            // ell_VW = D (later: * yP    )\n            // Already assigned\n\n        );\n    }\n\n\n\n    function buildPrepDoubleStep() {\n        const f = module.addFunction(prefix+ \"_prepDblStep\");\n        f.addParam(\"pR\", \"i32\");\n        f.addParam(\"pCoef\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const X1  = c.getLocal(\"pR\");\n        const Y1  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(f2size));\n        const Z1  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(2*f2size));\n\n        const ELL_0  = c.getLocal(\"pCoef\");\n        const ELL_VW = c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(f2size));\n        const ELL_VV  = c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(2*f2size));\n\n        const A = c.i32_const(module.alloc(f2size));\n        const B = c.i32_const(module.alloc(f2size));\n        const C = c.i32_const(module.alloc(f2size));\n        const D = c.i32_const(module.alloc(f2size));\n        const E = c.i32_const(module.alloc(f2size));\n        const F = c.i32_const(module.alloc(f2size));\n        const G = c.i32_const(module.alloc(f2size));\n        const H = c.i32_const(module.alloc(f2size));\n        const I = c.i32_const(module.alloc(f2size));\n        const J = c.i32_const(module.alloc(f2size));\n        const E2 = c.i32_const(module.alloc(f2size));\n        const AUX = c.i32_const(module.alloc(f2size));\n\n        f.addCode(\n\n            // A = X1 * Y1 / 2\n            c.call(f2mPrefix + \"_mul\", Y1, c.i32_const(pTwoInv), A),\n            c.call(f2mPrefix + \"_mul\", X1, A, A),\n\n            // B = Y1^2\n            c.call(f2mPrefix + \"_square\", Y1, B),\n\n            // C = Z1^2\n            c.call(f2mPrefix + \"_square\", Z1, C),\n\n            // D = 3 * C\n            c.call(f2mPrefix + \"_add\", C, C, D),\n            c.call(f2mPrefix + \"_add\", D, C, D),\n\n            // E = twist_b * D\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pTwistCoefB), D, E),\n\n            // F = 3 * E\n            c.call(f2mPrefix + \"_add\", E, E, F),\n            c.call(f2mPrefix + \"_add\", E, F, F),\n\n            // G = (B+F)/2\n            c.call(f2mPrefix + \"_add\", B, F, G),\n            c.call(f2mPrefix + \"_mul\", G, c.i32_const(pTwoInv), G),\n\n            // H = (Y1+Z1)^2-(B+C)\n            c.call(f2mPrefix + \"_add\", B, C, AUX),\n            c.call(f2mPrefix + \"_add\", Y1, Z1, H),\n            c.call(f2mPrefix + \"_square\", H, H),\n            c.call(f2mPrefix + \"_sub\", H, AUX, H),\n\n            // I = E-B\n            c.call(f2mPrefix + \"_sub\", E, B, I),\n\n            // J = X1^2\n            c.call(f2mPrefix + \"_square\", X1, J),\n\n            // E_squared = E^2\n            c.call(f2mPrefix + \"_square\", E, E2),\n\n            // X3 (X1) = A * (B-F)\n            c.call(f2mPrefix + \"_sub\", B, F, AUX),\n            c.call(f2mPrefix + \"_mul\", A, AUX, X1),\n\n            // Y3 (Y1) = G^2 - 3*E^2\n            c.call(f2mPrefix + \"_add\", E2, E2, AUX),\n            c.call(f2mPrefix + \"_add\", E2, AUX, AUX),\n            c.call(f2mPrefix + \"_square\", G, Y1),\n            c.call(f2mPrefix + \"_sub\", Y1, AUX, Y1),\n\n            // Z3 (Z1) = B * H\n            c.call(f2mPrefix + \"_mul\", B, H, Z1),\n\n            // ell_0 = xi * I\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pAltBn128Twist), I, ELL_0),\n\n            // ell_VW = - H (later: * yP)\n            c.call(f2mPrefix + \"_neg\", H, ELL_VW),\n\n            // ell_VV = 3*J (later: * xP)\n            c.call(f2mPrefix + \"_add\", J, J, ELL_VV),\n            c.call(f2mPrefix + \"_add\", J, ELL_VV, ELL_VV),\n\n        );\n    }\n\n    function buildMulByQ() {\n        const f = module.addFunction(prefix + \"_mulByQ\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"p1\");\n        const y = c.i32_add(c.getLocal(\"p1\"), c.i32_const(f2size));\n        const z = c.i32_add(c.getLocal(\"p1\"), c.i32_const(f2size*2));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(f2size));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(f2size*2));\n\n        const MulByQX = c.i32_const(module.alloc([\n            ...utils$2.bigInt2BytesLE( toMontgomery(\"21575463638280843010398324269430826099269044274347216827212613867836435027261\"), f1size ),\n            ...utils$2.bigInt2BytesLE( toMontgomery(\"10307601595873709700152284273816112264069230130616436755625194854815875713954\"), f1size ),\n        ]));\n\n        const MulByQY = c.i32_const(module.alloc([\n            ...utils$2.bigInt2BytesLE( toMontgomery(\"2821565182194536844548159561693502659359617185244120367078079554186484126554\"), f1size ),\n            ...utils$2.bigInt2BytesLE( toMontgomery(\"3505843767911556378687030309984248845540243509899259641013678093033130930403\"), f1size ),\n        ]));\n\n        f.addCode(\n            // The frobeniusMap(1) in this field, is the conjugate\n            c.call(f2mPrefix + \"_conjugate\", x, x3),\n            c.call(f2mPrefix + \"_mul\", MulByQX, x3, x3),\n            c.call(f2mPrefix + \"_conjugate\", y, y3),\n            c.call(f2mPrefix + \"_mul\", MulByQY, y3, y3),\n            c.call(f2mPrefix + \"_conjugate\", z, z3),\n        );\n    }\n\n\n    function buildPrepareG2() {\n        buildMulByQ();\n        const f = module.addFunction(prefix+ \"_prepareG2\");\n        f.addParam(\"pQ\", \"i32\");\n        f.addParam(\"ppreQ\", \"i32\");\n        f.addLocal(\"pCoef\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const QX = c.getLocal(\"pQ\");\n\n        const pR = module.alloc(f2size*3);\n        const R = c.i32_const(pR);\n        const RX = c.i32_const(pR);\n        const RY = c.i32_const(pR+f2size);\n        const RZ = c.i32_const(pR+2*f2size);\n\n        const cQX = c.i32_add( c.getLocal(\"ppreQ\"), c.i32_const(0));\n        const cQY = c.i32_add( c.getLocal(\"ppreQ\"), c.i32_const(f2size));\n\n        const pQ1 = module.alloc(f2size*3);\n        const Q1 = c.i32_const(pQ1);\n\n        const pQ2 = module.alloc(f2size*3);\n        const Q2 = c.i32_const(pQ2);\n        const Q2Y = c.i32_const(pQ2 + f2size);\n\n        f.addCode(\n            c.call(g2mPrefix + \"_normalize\", QX, cQX),  // TODO Remove if already in affine\n            c.call(f2mPrefix + \"_copy\", cQX, RX),\n            c.call(f2mPrefix + \"_copy\", cQY, RY),\n            c.call(f2mPrefix + \"_one\", RZ),\n        );\n\n        f.addCode(\n            c.setLocal(\"pCoef\", c.i32_add( c.getLocal(\"ppreQ\"), c.i32_const(f2size*3))),\n            c.setLocal(\"i\", c.i32_const(ateLoopBitBytes.length-2)),\n            c.block(c.loop(\n\n                c.call(prefix + \"_prepDblStep\", R, c.getLocal(\"pCoef\")),\n                c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n\n                c.if(\n                    c.i32_load8_s(c.getLocal(\"i\"), pAteLoopBitBytes),\n                    [\n                        ...c.call(prefix + \"_prepAddStep\", cQX, R, c.getLocal(\"pCoef\")),\n                        ...c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n                    ]\n                ),\n                c.br_if(1, c.i32_eqz ( c.getLocal(\"i\") )),\n                c.setLocal(\"i\", c.i32_sub(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n\n        f.addCode(\n            c.call(prefix + \"_mulByQ\", cQX, Q1),\n            c.call(prefix + \"_mulByQ\", Q1, Q2)\n        );\n\n        f.addCode(\n            c.call(f2mPrefix + \"_neg\", Q2Y, Q2Y),\n\n            c.call(prefix + \"_prepAddStep\", Q1, R, c.getLocal(\"pCoef\")),\n            c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n\n            c.call(prefix + \"_prepAddStep\", Q2, R, c.getLocal(\"pCoef\")),\n            c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n        );\n    }\n\n    function buildMulBy024Old() {\n        const f = module.addFunction(prefix+ \"__mulBy024Old\");\n        f.addParam(\"pEll0\", \"i32\");\n        f.addParam(\"pEllVW\", \"i32\");\n        f.addParam(\"pEllVV\", \"i32\");\n        f.addParam(\"pR\", \"i32\");            // Result in F12\n\n        const c = f.getCodeBuilder();\n\n        const x0  = c.getLocal(\"pEll0\");\n        const x2  = c.getLocal(\"pEllVV\");\n        const x4  = c.getLocal(\"pEllVW\");\n\n        const z0  = c.getLocal(\"pR\");\n\n        const pAUX12 = module.alloc(ftsize);\n        const AUX12 = c.i32_const(pAUX12);\n        const AUX12_0 = c.i32_const(pAUX12);\n        const AUX12_2 = c.i32_const(pAUX12+f2size);\n        const AUX12_4 = c.i32_const(pAUX12+f2size*2);\n        const AUX12_6 = c.i32_const(pAUX12+f2size*3);\n        const AUX12_8 = c.i32_const(pAUX12+f2size*4);\n        const AUX12_10 = c.i32_const(pAUX12+f2size*5);\n\n        f.addCode(\n\n            c.call(f2mPrefix + \"_copy\", x0, AUX12_0),\n            c.call(f2mPrefix + \"_zero\", AUX12_2),\n            c.call(f2mPrefix + \"_copy\", x2, AUX12_4),\n            c.call(f2mPrefix + \"_zero\", AUX12_6),\n            c.call(f2mPrefix + \"_copy\", x4, AUX12_8),\n            c.call(f2mPrefix + \"_zero\", AUX12_10),\n            c.call(ftmPrefix + \"_mul\", AUX12, z0, z0),\n        );\n    }\n\n    function buildMulBy024() {\n        const f = module.addFunction(prefix+ \"__mulBy024\");\n        f.addParam(\"pEll0\", \"i32\");\n        f.addParam(\"pEllVW\", \"i32\");\n        f.addParam(\"pEllVV\", \"i32\");\n        f.addParam(\"pR\", \"i32\");            // Result in F12\n\n        const c = f.getCodeBuilder();\n\n        const x0  = c.getLocal(\"pEll0\");\n        const x2  = c.getLocal(\"pEllVV\");\n        const x4  = c.getLocal(\"pEllVW\");\n\n        const z0  = c.getLocal(\"pR\");\n        const z1  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(2*n8));\n        const z2  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(4*n8));\n        const z3  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(6*n8));\n        const z4  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(8*n8));\n        const z5  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(10*n8));\n\n        const t0 = c.i32_const(module.alloc(f2size));\n        const t1 = c.i32_const(module.alloc(f2size));\n        const t2 = c.i32_const(module.alloc(f2size));\n        const s0 = c.i32_const(module.alloc(f2size));\n        const T3 = c.i32_const(module.alloc(f2size));\n        const T4 = c.i32_const(module.alloc(f2size));\n        const D0 = c.i32_const(module.alloc(f2size));\n        const D2 = c.i32_const(module.alloc(f2size));\n        const D4 = c.i32_const(module.alloc(f2size));\n        const S1 = c.i32_const(module.alloc(f2size));\n        const AUX = c.i32_const(module.alloc(f2size));\n\n        f.addCode(\n\n            // D0 = z0 * x0;\n            c.call(f2mPrefix + \"_mul\", z0, x0, D0),\n            // D2 = z2 * x2;\n            c.call(f2mPrefix + \"_mul\", z2, x2, D2),\n            // D4 = z4 * x4;\n            c.call(f2mPrefix + \"_mul\", z4, x4, D4),\n            // t2 = z0 + z4;\n            c.call(f2mPrefix + \"_add\", z0, z4, t2),\n            // t1 = z0 + z2;\n            c.call(f2mPrefix + \"_add\", z0, z2, t1),\n            // s0 = z1 + z3 + z5;\n            c.call(f2mPrefix + \"_add\", z1, z3, s0),\n            c.call(f2mPrefix + \"_add\", s0, z5, s0),\n\n\n            // For z.a_.a_ = z0.\n            // S1 = z1 * x2;\n            c.call(f2mPrefix + \"_mul\", z1, x2, S1),\n            // T3 = S1 + D4;\n            c.call(f2mPrefix + \"_add\", S1, D4, T3),\n            // T4 = my_Fp6::non_residue * T3 + D0;\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pNonResidueF6), T3, T4),\n            c.call(f2mPrefix + \"_add\", T4, D0, z0),\n            // z0 = T4;\n\n            // For z.a_.b_ = z1\n            // T3 = z5 * x4;\n            c.call(f2mPrefix + \"_mul\", z5, x4, T3),\n            // S1 = S1 + T3;\n            c.call(f2mPrefix + \"_add\", S1, T3, S1),\n            // T3 = T3 + D2;\n            c.call(f2mPrefix + \"_add\", T3, D2, T3),\n            // T4 = my_Fp6::non_residue * T3;\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pNonResidueF6), T3, T4),\n            // T3 = z1 * x0;\n            c.call(f2mPrefix + \"_mul\", z1, x0, T3),\n            // S1 = S1 + T3;\n            c.call(f2mPrefix + \"_add\", S1, T3, S1),\n            // T4 = T4 + T3;\n            c.call(f2mPrefix + \"_add\", T4, T3, z1),\n            // z1 = T4;\n\n\n\n            // For z.a_.c_ = z2\n            // t0 = x0 + x2;\n            c.call(f2mPrefix + \"_add\", x0, x2, t0),\n            // T3 = t1 * t0 - D0 - D2;\n            c.call(f2mPrefix + \"_mul\", t1, t0, T3),\n            c.call(f2mPrefix + \"_add\", D0, D2, AUX),\n            c.call(f2mPrefix + \"_sub\", T3, AUX, T3),\n            // T4 = z3 * x4;\n            c.call(f2mPrefix + \"_mul\", z3, x4, T4),\n            // S1 = S1 + T4;\n            c.call(f2mPrefix + \"_add\", S1, T4, S1),\n\n\n            // For z.b_.a_ = z3 (z3 needs z2)\n            // t0 = z2 + z4;\n            c.call(f2mPrefix + \"_add\", z2, z4, t0),\n            // T3 = T3 + T4;\n            // z2 = T3;\n            c.call(f2mPrefix + \"_add\", T3, T4, z2),\n            // t1 = x2 + x4;\n            c.call(f2mPrefix + \"_add\", x2, x4, t1),\n            // T3 = t0 * t1 - D2 - D4;\n            c.call(f2mPrefix + \"_mul\", t1, t0, T3),\n            c.call(f2mPrefix + \"_add\", D2, D4, AUX),\n            c.call(f2mPrefix + \"_sub\", T3, AUX, T3),\n            // T4 = my_Fp6::non_residue * T3;\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pNonResidueF6), T3, T4),\n            // T3 = z3 * x0;\n            c.call(f2mPrefix + \"_mul\", z3, x0, T3),\n            // S1 = S1 + T3;\n            c.call(f2mPrefix + \"_add\", S1, T3, S1),\n            // T4 = T4 + T3;\n            c.call(f2mPrefix + \"_add\", T4, T3, z3),\n            // z3 = T4;\n\n            // For z.b_.b_ = z4\n            // T3 = z5 * x2;\n            c.call(f2mPrefix + \"_mul\", z5, x2, T3),\n            // S1 = S1 + T3;\n            c.call(f2mPrefix + \"_add\", S1, T3, S1),\n            // T4 = my_Fp6::non_residue * T3;\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pNonResidueF6), T3, T4),\n            // t0 = x0 + x4;\n            c.call(f2mPrefix + \"_add\", x0, x4, t0),\n            // T3 = t2 * t0 - D0 - D4;\n            c.call(f2mPrefix + \"_mul\", t2, t0, T3),\n            c.call(f2mPrefix + \"_add\", D0, D4, AUX),\n            c.call(f2mPrefix + \"_sub\", T3, AUX, T3),\n            // T4 = T4 + T3;\n            c.call(f2mPrefix + \"_add\", T4, T3, z4),\n            // z4 = T4;\n\n            // For z.b_.c_ = z5.\n            // t0 = x0 + x2 + x4;\n            c.call(f2mPrefix + \"_add\", x0, x2, t0),\n            c.call(f2mPrefix + \"_add\", t0, x4, t0),\n            // T3 = s0 * t0 - S1;\n            c.call(f2mPrefix + \"_mul\", s0, t0, T3),\n            c.call(f2mPrefix + \"_sub\", T3, S1, z5),\n            // z5 = T3;\n\n        );\n    }\n\n\n    function buildMillerLoop() {\n        const f = module.addFunction(prefix+ \"_millerLoop\");\n        f.addParam(\"ppreP\", \"i32\");\n        f.addParam(\"ppreQ\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"pCoef\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const preP_PX = c.getLocal(\"ppreP\");\n        const preP_PY = c.i32_add(c.getLocal(\"ppreP\"), c.i32_const(f1size));\n\n        const ELL_0  = c.getLocal(\"pCoef\");\n        const ELL_VW = c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(f2size));\n        const ELL_VV  = c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(2*f2size));\n\n\n        const pVW = module.alloc(f2size);\n        const VW = c.i32_const(pVW);\n        const pVV = module.alloc(f2size);\n        const VV = c.i32_const(pVV);\n\n        const F = c.getLocal(\"r\");\n\n\n        f.addCode(\n            c.call(ftmPrefix + \"_one\", F),\n\n            c.setLocal(\"pCoef\", c.i32_add( c.getLocal(\"ppreQ\"), c.i32_const(f2size*3))),\n\n            c.setLocal(\"i\", c.i32_const(ateLoopBitBytes.length-2)),\n            c.block(c.loop(\n\n\n                c.call(ftmPrefix + \"_square\", F, F),\n\n                c.call(f2mPrefix + \"_mul1\", ELL_VW,preP_PY, VW),\n                c.call(f2mPrefix + \"_mul1\", ELL_VV, preP_PX, VV),\n                c.call(prefix + \"__mulBy024\", ELL_0, VW, VV, F),\n                c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n\n                c.if(\n                    c.i32_load8_s(c.getLocal(\"i\"), pAteLoopBitBytes),\n                    [\n                        ...c.call(f2mPrefix + \"_mul1\", ELL_VW, preP_PY, VW),\n                        ...c.call(f2mPrefix + \"_mul1\", ELL_VV, preP_PX, VV),\n\n                        ...c.call(prefix + \"__mulBy024\", ELL_0, VW, VV, F),\n                        ...c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n\n                    ]\n                ),\n                c.br_if(1, c.i32_eqz ( c.getLocal(\"i\") )),\n                c.setLocal(\"i\", c.i32_sub(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n\n        );\n\n        f.addCode(\n            c.call(f2mPrefix + \"_mul1\", ELL_VW, preP_PY, VW),\n            c.call(f2mPrefix + \"_mul1\", ELL_VV, preP_PX, VV),\n            c.call(prefix + \"__mulBy024\", ELL_0, VW, VV, F),\n            c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n\n            c.call(f2mPrefix + \"_mul1\", ELL_VW, preP_PY, VW),\n            c.call(f2mPrefix + \"_mul1\", ELL_VV, preP_PX, VV),\n            c.call(prefix + \"__mulBy024\", ELL_0, VW, VV, F),\n            c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n\n        );\n\n    }\n\n\n    function buildFrobeniusMap(n) {\n        const F12 = [\n            [\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n            ],\n            [\n                [1n, 0n],\n                [8376118865763821496583973867626364092589906065868298776909617916018768340080n, 16469823323077808223889137241176536799009286646108169935659301613961712198316n],\n                [21888242871839275220042445260109153167277707414472061641714758635765020556617n, 0n],\n                [11697423496358154304825782922584725312912383441159505038794027105778954184319n, 303847389135065887422783454877609941456349188919719272345083954437860409601n],\n                [21888242871839275220042445260109153167277707414472061641714758635765020556616n, 0n],\n                [3321304630594332808241809054958361220322477375291206261884409189760185844239n, 5722266937896532885780051958958348231143373700109372999374820235121374419868n],\n                [21888242871839275222246405745257275088696311157297823662689037894645226208582n, 0n],\n                [13512124006075453725662431877630910996106405091429524885779419978626457868503n, 5418419548761466998357268504080738289687024511189653727029736280683514010267n],\n                [2203960485148121921418603742825762020974279258880205651966n, 0n],\n                [10190819375481120917420622822672549775783927716138318623895010788866272024264n, 21584395482704209334823622290379665147239961968378104390343953940207365798982n],\n                [2203960485148121921418603742825762020974279258880205651967n, 0n],\n                [18566938241244942414004596690298913868373833782006617400804628704885040364344n, 16165975933942742336466353786298926857552937457188450663314217659523851788715n],\n            ]\n        ];\n\n        const F6 = [\n            [\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n            ],\n            [\n                [1n, 0n],\n                [21575463638280843010398324269430826099269044274347216827212613867836435027261n, 10307601595873709700152284273816112264069230130616436755625194854815875713954n],\n                [21888242871839275220042445260109153167277707414472061641714758635765020556616n, 0n],\n                [3772000881919853776433695186713858239009073593817195771773381919316419345261n, 2236595495967245188281701248203181795121068902605861227855261137820944008926n],\n                [2203960485148121921418603742825762020974279258880205651966n, 0n],\n                [18429021223477853657660792034369865839114504446431234726392080002137598044644n, 9344045779998320333812420223237981029506012124075525679208581902008406485703n],\n            ],\n            [\n                [1n, 0n],\n                [2581911344467009335267311115468803099551665605076196740867805258568234346338n, 19937756971775647987995932169929341994314640652964949448313374472400716661030n],\n                [2203960485148121921418603742825762020974279258880205651966n, 0n],\n                [5324479202449903542726783395506214481928257762400643279780343368557297135718n, 16208900380737693084919495127334387981393726419856888799917914180988844123039n],\n                [21888242871839275220042445260109153167277707414472061641714758635765020556616n, 0n],\n                [13981852324922362344252311234282257507216387789820983642040889267519694726527n, 7629828391165209371577384193250820201684255241773809077146787135900891633097n],\n            ]\n        ];\n\n        const f = module.addFunction(prefix+ \"__frobeniusMap\"+n);\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        for (let i=0; i<6; i++) {\n            const X = (i==0) ? c.getLocal(\"x\") : c.i32_add(c.getLocal(\"x\"), c.i32_const(i*f2size));\n            const Xc0 = X;\n            const Xc1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(i*f2size + f1size));\n            const R = (i==0) ? c.getLocal(\"r\") : c.i32_add(c.getLocal(\"r\"), c.i32_const(i*f2size));\n            const Rc0 = R;\n            const Rc1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(i*f2size + f1size));\n            const coef = mul2(F12[Math.floor(i/3)][n%12] , F6[i%3][n%6]);\n            const pCoef = module.alloc([\n                ...utils$2.bigInt2BytesLE(toMontgomery(coef[0]), 32),\n                ...utils$2.bigInt2BytesLE(toMontgomery(coef[1]), 32),\n            ]);\n            if (n%2 == 1) {\n                f.addCode(\n                    c.call(f1mPrefix + \"_copy\", Xc0, Rc0),\n                    c.call(f1mPrefix + \"_neg\", Xc1, Rc1),\n                    c.call(f2mPrefix + \"_mul\", R, c.i32_const(pCoef), R),\n                );\n            } else {\n                f.addCode(c.call(f2mPrefix + \"_mul\", X, c.i32_const(pCoef), R));\n            }\n        }\n\n        function mul2(a, b) {\n            const ac0 = BigInt(a[0]);\n            const ac1 = BigInt(a[1]);\n            const bc0 = BigInt(b[0]);\n            const bc1 = BigInt(b[1]);\n            const res = [\n                (ac0 * bc0 - (  ac1 * bc1)  ) % q,\n                (ac0 * bc1 + (  ac1 * bc0)  ) % q,\n            ];\n            if (isNegative$2(res[0])) res[0] = res[0] + q;\n            return res;\n        }\n\n    }\n\n\n\n    function buildFinalExponentiationFirstChunk() {\n\n        const f = module.addFunction(prefix+ \"__finalExponentiationFirstChunk\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const elt = c.getLocal(\"x\");\n        const eltC0 = elt;\n        const eltC1 = c.i32_add(elt, c.i32_const(n8*6));\n        const r = c.getLocal(\"r\");\n        const pA = module.alloc(ftsize);\n        const A = c.i32_const(pA);\n        const Ac0 = A;\n        const Ac1 = c.i32_const(pA + n8*6);\n        const B = c.i32_const(module.alloc(ftsize));\n        const C = c.i32_const(module.alloc(ftsize));\n        const D = c.i32_const(module.alloc(ftsize));\n\n        f.addCode(\n            // const alt_bn128_Fq12 A = alt_bn128_Fq12(elt.c0,-elt.c1);\n            c.call(f6mPrefix + \"_copy\", eltC0, Ac0),\n            c.call(f6mPrefix + \"_neg\", eltC1, Ac1),\n\n            // const alt_bn128_Fq12 B = elt.inverse();\n            c.call(ftmPrefix + \"_inverse\", elt, B),\n\n            // const alt_bn128_Fq12 C = A * B;\n            c.call(ftmPrefix + \"_mul\", A, B, C),\n            // const alt_bn128_Fq12 D = C.Frobenius_map(2);\n            c.call(prefix + \"__frobeniusMap2\", C, D),\n            // const alt_bn128_Fq12 result = D * C;\n            c.call(ftmPrefix + \"_mul\", C, D, r),\n        );\n    }\n\n    function buildCyclotomicSquare() {\n        const f = module.addFunction(prefix+ \"__cyclotomicSquare\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x4 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f2size));\n        const x3 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f2size));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(3*f2size));\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(4*f2size));\n        const x5 = c.i32_add(c.getLocal(\"x\"), c.i32_const(5*f2size));\n\n        const r0 = c.getLocal(\"r\");\n        const r4 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f2size));\n        const r3 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f2size));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(3*f2size));\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(4*f2size));\n        const r5 = c.i32_add(c.getLocal(\"r\"), c.i32_const(5*f2size));\n\n        const t0 = c.i32_const(module.alloc(f2size));\n        const t1 = c.i32_const(module.alloc(f2size));\n        const t2 = c.i32_const(module.alloc(f2size));\n        const t3 = c.i32_const(module.alloc(f2size));\n        const t4 = c.i32_const(module.alloc(f2size));\n        const t5 = c.i32_const(module.alloc(f2size));\n        const tmp = c.i32_const(module.alloc(f2size));\n        const AUX = c.i32_const(module.alloc(f2size));\n\n\n        f.addCode(\n            //    // t0 + t1*y = (z0 + z1*y)^2 = a^2\n            //    tmp = z0 * z1;\n            //    t0 = (z0 + z1) * (z0 + my_Fp6::non_residue * z1) - tmp - my_Fp6::non_residue * tmp;\n            //    t1 = tmp + tmp;\n            c.call(f2mPrefix + \"_mul\", x0, x1, tmp),\n            c.call(f2mPrefix + \"_mul\", x1, c.i32_const(pNonResidueF6), t0),\n            c.call(f2mPrefix + \"_add\", x0, t0, t0),\n            c.call(f2mPrefix + \"_add\", x0, x1, AUX),\n            c.call(f2mPrefix + \"_mul\", AUX, t0, t0),\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pNonResidueF6), tmp, AUX),\n            c.call(f2mPrefix + \"_add\", tmp, AUX, AUX),\n            c.call(f2mPrefix + \"_sub\", t0, AUX, t0),\n            c.call(f2mPrefix + \"_add\", tmp, tmp, t1),\n\n            //  // t2 + t3*y = (z2 + z3*y)^2 = b^2\n            //  tmp = z2 * z3;\n            //  t2 = (z2 + z3) * (z2 + my_Fp6::non_residue * z3) - tmp - my_Fp6::non_residue * tmp;\n            //  t3 = tmp + tmp;\n            c.call(f2mPrefix + \"_mul\", x2, x3, tmp),\n            c.call(f2mPrefix + \"_mul\", x3, c.i32_const(pNonResidueF6), t2),\n            c.call(f2mPrefix + \"_add\", x2, t2, t2),\n            c.call(f2mPrefix + \"_add\", x2, x3, AUX),\n            c.call(f2mPrefix + \"_mul\", AUX, t2, t2),\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pNonResidueF6), tmp, AUX),\n            c.call(f2mPrefix + \"_add\", tmp, AUX, AUX),\n            c.call(f2mPrefix + \"_sub\", t2, AUX, t2),\n            c.call(f2mPrefix + \"_add\", tmp, tmp, t3),\n\n            //  // t4 + t5*y = (z4 + z5*y)^2 = c^2\n            //  tmp = z4 * z5;\n            //  t4 = (z4 + z5) * (z4 + my_Fp6::non_residue * z5) - tmp - my_Fp6::non_residue * tmp;\n            //  t5 = tmp + tmp;\n            c.call(f2mPrefix + \"_mul\", x4, x5, tmp),\n            c.call(f2mPrefix + \"_mul\", x5, c.i32_const(pNonResidueF6), t4),\n            c.call(f2mPrefix + \"_add\", x4, t4, t4),\n            c.call(f2mPrefix + \"_add\", x4, x5, AUX),\n            c.call(f2mPrefix + \"_mul\", AUX, t4, t4),\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pNonResidueF6), tmp, AUX),\n            c.call(f2mPrefix + \"_add\", tmp, AUX, AUX),\n            c.call(f2mPrefix + \"_sub\", t4, AUX, t4),\n            c.call(f2mPrefix + \"_add\", tmp, tmp, t5),\n\n            // For A\n            // z0 = 3 * t0 - 2 * z0\n            c.call(f2mPrefix + \"_sub\", t0, x0, r0),\n            c.call(f2mPrefix + \"_add\", r0, r0, r0),\n            c.call(f2mPrefix + \"_add\", t0, r0, r0),\n            // z1 = 3 * t1 + 2 * z1\n            c.call(f2mPrefix + \"_add\", t1, x1, r1),\n            c.call(f2mPrefix + \"_add\", r1, r1, r1),\n            c.call(f2mPrefix + \"_add\", t1, r1, r1),\n\n            // For B\n            // z2 = 3 * (xi * t5) + 2 * z2\n            c.call(f2mPrefix + \"_mul\", t5, c.i32_const(pAltBn128Twist), AUX),\n            c.call(f2mPrefix + \"_add\", AUX, x2, r2),\n            c.call(f2mPrefix + \"_add\", r2, r2, r2),\n            c.call(f2mPrefix + \"_add\", AUX, r2, r2),\n            // z3 = 3 * t4 - 2 * z3\n            c.call(f2mPrefix + \"_sub\", t4, x3, r3),\n            c.call(f2mPrefix + \"_add\", r3, r3, r3),\n            c.call(f2mPrefix + \"_add\", t4, r3, r3),\n\n            // For C\n            // z4 = 3 * t2 - 2 * z4\n            c.call(f2mPrefix + \"_sub\", t2, x4, r4),\n            c.call(f2mPrefix + \"_add\", r4, r4, r4),\n            c.call(f2mPrefix + \"_add\", t2, r4, r4),\n            // z5 = 3 * t3 + 2 * z5\n            c.call(f2mPrefix + \"_add\", t3, x5, r5),\n            c.call(f2mPrefix + \"_add\", r5, r5, r5),\n            c.call(f2mPrefix + \"_add\", t3, r5, r5),\n\n        );\n    }\n\n\n    function buildCyclotomicExp(exponent, fnName) {\n        const exponentNafBytes = naf(exponent).map( (b) => (b==-1 ? 0xFF: b) );\n        const pExponentNafBytes = module.alloc(exponentNafBytes);\n\n        const f = module.addFunction(prefix+ \"__cyclotomicExp_\"+fnName);\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"bit\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"x\");\n\n        const res = c.getLocal(\"r\");\n\n        const inverse = c.i32_const(module.alloc(ftsize));\n\n\n        f.addCode(\n            c.call(ftmPrefix + \"_conjugate\", x, inverse),\n            c.call(ftmPrefix + \"_one\", res),\n\n            c.if(\n                c.teeLocal(\"bit\", c.i32_load8_s(c.i32_const(exponentNafBytes.length-1), pExponentNafBytes)),\n                c.if(\n                    c.i32_eq(\n                        c.getLocal(\"bit\"),\n                        c.i32_const(1)\n                    ),\n                    c.call(ftmPrefix + \"_mul\", res, x, res),\n                    c.call(ftmPrefix + \"_mul\", res, inverse, res),\n                )\n            ),\n\n            c.setLocal(\"i\", c.i32_const(exponentNafBytes.length-2)),\n            c.block(c.loop(\n                c.call(prefix + \"__cyclotomicSquare\", res, res),\n                c.if(\n                    c.teeLocal(\"bit\", c.i32_load8_s(c.getLocal(\"i\"), pExponentNafBytes)),\n                    c.if(\n                        c.i32_eq(\n                            c.getLocal(\"bit\"),\n                            c.i32_const(1)\n                        ),\n                        c.call(ftmPrefix + \"_mul\", res, x, res),\n                        c.call(ftmPrefix + \"_mul\", res, inverse, res),\n                    )\n                ),\n                c.br_if(1, c.i32_eqz ( c.getLocal(\"i\") )),\n                c.setLocal(\"i\", c.i32_sub(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n    }\n\n\n\n    function buildFinalExponentiationLastChunk() {\n        buildCyclotomicSquare();\n        buildCyclotomicExp(finalExpZ, \"w0\");\n\n        const f = module.addFunction(prefix+ \"__finalExponentiationLastChunk\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const elt = c.getLocal(\"x\");\n        const result = c.getLocal(\"r\");\n        const A = c.i32_const(module.alloc(ftsize));\n        const B = c.i32_const(module.alloc(ftsize));\n        const C = c.i32_const(module.alloc(ftsize));\n        const D = c.i32_const(module.alloc(ftsize));\n        const E = c.i32_const(module.alloc(ftsize));\n        const F = c.i32_const(module.alloc(ftsize));\n        const G = c.i32_const(module.alloc(ftsize));\n        const H = c.i32_const(module.alloc(ftsize));\n        const I = c.i32_const(module.alloc(ftsize));\n        const J = c.i32_const(module.alloc(ftsize));\n        const K = c.i32_const(module.alloc(ftsize));\n        const L = c.i32_const(module.alloc(ftsize));\n        const M = c.i32_const(module.alloc(ftsize));\n        const N = c.i32_const(module.alloc(ftsize));\n        const O = c.i32_const(module.alloc(ftsize));\n        const P = c.i32_const(module.alloc(ftsize));\n        const Q = c.i32_const(module.alloc(ftsize));\n        const R = c.i32_const(module.alloc(ftsize));\n        const S = c.i32_const(module.alloc(ftsize));\n        const T = c.i32_const(module.alloc(ftsize));\n        const U = c.i32_const(module.alloc(ftsize));\n\n        f.addCode(\n\n\n            // A = exp_by_neg_z(elt)  // = elt^(-z)\n            c.call(prefix + \"__cyclotomicExp_w0\", elt, A),\n            c.call(ftmPrefix + \"_conjugate\", A, A),\n            // B = A^2                // = elt^(-2*z)\n            c.call(prefix + \"__cyclotomicSquare\", A, B),\n            // C = B^2                // = elt^(-4*z)\n            c.call(prefix + \"__cyclotomicSquare\", B, C),\n            // D = C * B              // = elt^(-6*z)\n            c.call(ftmPrefix + \"_mul\", C, B, D),\n            // E = exp_by_neg_z(D)    // = elt^(6*z^2)\n            c.call(prefix + \"__cyclotomicExp_w0\", D, E),\n            c.call(ftmPrefix + \"_conjugate\", E, E),\n            // F = E^2                // = elt^(12*z^2)\n            c.call(prefix + \"__cyclotomicSquare\", E, F),\n            // G = epx_by_neg_z(F)    // = elt^(-12*z^3)\n            c.call(prefix + \"__cyclotomicExp_w0\", F, G),\n            c.call(ftmPrefix + \"_conjugate\", G, G),\n            // H = conj(D)            // = elt^(6*z)\n            c.call(ftmPrefix + \"_conjugate\", D, H),\n            // I = conj(G)            // = elt^(12*z^3)\n            c.call(ftmPrefix + \"_conjugate\", G, I),\n            // J = I * E              // = elt^(12*z^3 + 6*z^2)\n            c.call(ftmPrefix + \"_mul\", I, E, J),\n            // K = J * H              // = elt^(12*z^3 + 6*z^2 + 6*z)\n            c.call(ftmPrefix + \"_mul\", J, H, K),\n            // L = K * B              // = elt^(12*z^3 + 6*z^2 + 4*z)\n            c.call(ftmPrefix + \"_mul\", K, B, L),\n            // M = K * E              // = elt^(12*z^3 + 12*z^2 + 6*z)\n            c.call(ftmPrefix + \"_mul\", K, E, M),\n\n            // N = M * elt            // = elt^(12*z^3 + 12*z^2 + 6*z + 1)\n            c.call(ftmPrefix + \"_mul\", M, elt, N),\n\n            // O = L.Frobenius_map(1) // = elt^(q*(12*z^3 + 6*z^2 + 4*z))\n            c.call(prefix + \"__frobeniusMap1\", L, O),\n            // P = O * N              // = elt^(q*(12*z^3 + 6*z^2 + 4*z) * (12*z^3 + 12*z^2 + 6*z + 1))\n            c.call(ftmPrefix + \"_mul\", O, N, P),\n            // Q = K.Frobenius_map(2) // = elt^(q^2 * (12*z^3 + 6*z^2 + 6*z))\n            c.call(prefix + \"__frobeniusMap2\", K, Q),\n            // R = Q * P              // = elt^(q^2 * (12*z^3 + 6*z^2 + 6*z) + q*(12*z^3 + 6*z^2 + 4*z) * (12*z^3 + 12*z^2 + 6*z + 1))\n            c.call(ftmPrefix + \"_mul\", Q, P, R),\n            // S = conj(elt)          // = elt^(-1)\n            c.call(ftmPrefix + \"_conjugate\", elt, S),\n            // T = S * L              // = elt^(12*z^3 + 6*z^2 + 4*z - 1)\n            c.call(ftmPrefix + \"_mul\", S, L, T),\n            // U = T.Frobenius_map(3) // = elt^(q^3(12*z^3 + 6*z^2 + 4*z - 1))\n            c.call(prefix + \"__frobeniusMap3\", T, U),\n            // V = U * R              // = elt^(q^3(12*z^3 + 6*z^2 + 4*z - 1) + q^2 * (12*z^3 + 6*z^2 + 6*z) + q*(12*z^3 + 6*z^2 + 4*z) * (12*z^3 + 12*z^2 + 6*z + 1))\n            c.call(ftmPrefix + \"_mul\", U, R, result),\n            // result = V\n        );\n    }\n\n\n    function buildFinalExponentiation() {\n        buildFinalExponentiationFirstChunk();\n        buildFinalExponentiationLastChunk();\n        const f = module.addFunction(prefix+ \"_finalExponentiation\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const elt = c.getLocal(\"x\");\n        const result = c.getLocal(\"r\");\n        const eltToFirstChunk = c.i32_const(module.alloc(ftsize));\n\n        f.addCode(\n            c.call(prefix + \"__finalExponentiationFirstChunk\", elt, eltToFirstChunk ),\n            c.call(prefix + \"__finalExponentiationLastChunk\", eltToFirstChunk, result )\n        );\n    }\n\n\n    function buildFinalExponentiationOld() {\n        const f = module.addFunction(prefix+ \"_finalExponentiationOld\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const exponent = 552484233613224096312617126783173147097382103762957654188882734314196910839907541213974502761540629817009608548654680343627701153829446747810907373256841551006201639677726139946029199968412598804882391702273019083653272047566316584365559776493027495458238373902875937659943504873220554161550525926302303331747463515644711876653177129578303191095900909191624817826566688241804408081892785725967931714097716709526092261278071952560171111444072049229123565057483750161460024353346284167282452756217662335528813519139808291170539072125381230815729071544861602750936964829313608137325426383735122175229541155376346436093930287402089517426973178917569713384748081827255472576937471496195752727188261435633271238710131736096299798168852925540549342330775279877006784354801422249722573783561685179618816480037695005515426162362431072245638324744480n;\n\n        const pExponent = module.alloc(utils$2.bigInt2BytesLE( exponent, 352 ));\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.call(ftmPrefix + \"_exp\", c.getLocal(\"x\"), c.i32_const(pExponent), c.i32_const(352), c.getLocal(\"r\")),\n        );\n    }\n\n\n\n\n    const pPreP = module.alloc(prePSize);\n    const pPreQ = module.alloc(preQSize);\n\n    function buildPairingEquation(nPairings) {\n\n        const f = module.addFunction(prefix+ \"_pairingEq\"+nPairings);\n        for (let i=0; i<nPairings; i++) {\n            f.addParam(\"p_\"+i, \"i32\");\n            f.addParam(\"q_\"+i, \"i32\");\n        }\n        f.addParam(\"c\", \"i32\");\n        f.setReturnType(\"i32\");\n\n\n        const c = f.getCodeBuilder();\n\n        const resT = c.i32_const(module.alloc(ftsize));\n        const auxT = c.i32_const(module.alloc(ftsize));\n\n        f.addCode(c.call(ftmPrefix + \"_one\", resT ));\n\n        for (let i=0; i<nPairings; i++) {\n\n            f.addCode(c.call(prefix + \"_prepareG1\", c.getLocal(\"p_\"+i), c.i32_const(pPreP) ));\n            f.addCode(c.call(prefix + \"_prepareG2\", c.getLocal(\"q_\"+i), c.i32_const(pPreQ) ));\n            f.addCode(c.call(prefix + \"_millerLoop\", c.i32_const(pPreP), c.i32_const(pPreQ), auxT ));\n\n            f.addCode(c.call(ftmPrefix + \"_mul\", resT, auxT, resT ));\n        }\n\n        f.addCode(c.call(prefix + \"_finalExponentiation\", resT, resT ));\n\n        f.addCode(c.call(ftmPrefix + \"_eq\", resT, c.getLocal(\"c\")));\n    }\n\n\n    function buildPairing() {\n\n        const f = module.addFunction(prefix+ \"_pairing\");\n        f.addParam(\"p\", \"i32\");\n        f.addParam(\"q\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const resT = c.i32_const(module.alloc(ftsize));\n\n        f.addCode(c.call(prefix + \"_prepareG1\", c.getLocal(\"p\"), c.i32_const(pPreP) ));\n        f.addCode(c.call(prefix + \"_prepareG2\", c.getLocal(\"q\"), c.i32_const(pPreQ) ));\n        f.addCode(c.call(prefix + \"_millerLoop\", c.i32_const(pPreP), c.i32_const(pPreQ), resT ));\n        f.addCode(c.call(prefix + \"_finalExponentiation\", resT, c.getLocal(\"r\") ));\n    }\n\n\n    buildPrepAddStep();\n    buildPrepDoubleStep();\n\n    buildPrepareG1();\n    buildPrepareG2();\n\n    buildMulBy024();\n    buildMulBy024Old();\n    buildMillerLoop();\n\n\n    for (let i=0; i<10; i++) {\n        buildFrobeniusMap(i);\n        module.exportFunction(prefix + \"__frobeniusMap\"+i);\n    }\n\n    buildFinalExponentiationOld();\n    buildFinalExponentiation();\n\n    for (let i=1; i<=5; i++) {\n        buildPairingEquation(i);\n        module.exportFunction(prefix + \"_pairingEq\"+i);\n    }\n\n    buildPairing();\n\n    module.exportFunction(prefix + \"_pairing\");\n\n    module.exportFunction(prefix + \"_prepareG1\");\n    module.exportFunction(prefix + \"_prepareG2\");\n    module.exportFunction(prefix + \"_millerLoop\");\n    module.exportFunction(prefix + \"_finalExponentiation\");\n    module.exportFunction(prefix + \"_finalExponentiationOld\");\n    module.exportFunction(prefix + \"__mulBy024\");\n    module.exportFunction(prefix + \"__mulBy024Old\");\n    module.exportFunction(prefix + \"__cyclotomicSquare\");\n    module.exportFunction(prefix + \"__cyclotomicExp_w0\");\n\n    // console.log(module.functionIdxByName);\n\n};\n\nconst utils$1 = utils$6;\n\nconst buildF1m =build_f1m;\nconst buildF1 =build_f1;\nconst buildF2m =build_f2m;\nconst buildF3m =build_f3m;\nconst buildCurve =build_curve_jacobian_a0;\nconst buildFFT$1 = build_fft;\nconst buildPol = build_pol;\nconst buildQAP = build_qap;\nconst buildApplyKey = build_applykey;\nconst { bitLength: bitLength$1, isOdd, isNegative: isNegative$1 } = bigint;\n\n// Definition here: https://electriccoin.co/blog/new-snark-curve/\n\nvar build_bls12381 = function buildBLS12381(module, _prefix) {\n\n    const prefix = _prefix || \"bls12381\";\n\n    if (module.modules[prefix]) return prefix;  // already builded\n\n    const q = 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    const r = 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001n;\n\n    const n64q = Math.floor((bitLength$1(q - 1n) - 1)/64) +1;\n    const n8q = n64q*8;\n    const f1size = n8q;\n    const f2size = f1size * 2;\n    const ftsize = f1size * 12;\n\n    const n64r = Math.floor((bitLength$1(r - 1n) - 1)/64) +1;\n    const n8r = n64r*8;\n    const frsize = n8r;\n\n\n    const pr = module.alloc(utils$1.bigInt2BytesLE( r, frsize ));\n\n    const f1mPrefix = buildF1m(module, q, \"f1m\", \"intq\");\n    buildF1(module, r, \"fr\", \"frm\", \"intr\");\n    const pG1b = module.alloc(utils$1.bigInt2BytesLE( toMontgomery(4n), f1size ));\n    const g1mPrefix = buildCurve(module, \"g1m\", \"f1m\", pG1b);\n\n    buildFFT$1(module, \"frm\", \"frm\", \"frm\", \"frm_mul\");\n\n    buildPol(module, \"pol\", \"frm\");\n    buildQAP(module, \"qap\", \"frm\");\n\n    const f2mPrefix = buildF2m(module, \"f1m_neg\", \"f2m\", \"f1m\");\n    const pG2b = module.alloc([\n        ...utils$1.bigInt2BytesLE( toMontgomery(4n), f1size ),\n        ...utils$1.bigInt2BytesLE( toMontgomery(4n), f1size )\n    ]);\n    const g2mPrefix = buildCurve(module, \"g2m\", \"f2m\", pG2b);\n\n\n    function buildGTimesFr(fnName, opMul) {\n        const f = module.addFunction(fnName);\n        f.addParam(\"pG\", \"i32\");\n        f.addParam(\"pFr\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const AUX = c.i32_const(module.alloc(n8r));\n\n        f.addCode(\n            c.call(\"frm_fromMontgomery\", c.getLocal(\"pFr\"), AUX),\n            c.call(\n                opMul,\n                c.getLocal(\"pG\"),\n                AUX,\n                c.i32_const(n8r),\n                c.getLocal(\"pr\")\n            )\n        );\n\n        module.exportFunction(fnName);\n    }\n    buildGTimesFr(\"g1m_timesFr\", \"g1m_timesScalar\");\n    buildFFT$1(module, \"g1m\", \"g1m\", \"frm\", \"g1m_timesFr\");\n\n    buildGTimesFr(\"g2m_timesFr\", \"g2m_timesScalar\");\n    buildFFT$1(module, \"g2m\", \"g2m\", \"frm\", \"g2m_timesFr\");\n\n    buildGTimesFr(\"g1m_timesFrAffine\", \"g1m_timesScalarAffine\");\n    buildGTimesFr(\"g2m_timesFrAffine\", \"g2m_timesScalarAffine\");\n\n    buildApplyKey(module, \"frm_batchApplyKey\", \"fmr\", \"frm\", n8r, n8r, n8r, \"frm_mul\");\n    buildApplyKey(module, \"g1m_batchApplyKey\", \"g1m\", \"frm\", n8q*3, n8q*3, n8r, \"g1m_timesFr\");\n    buildApplyKey(module, \"g1m_batchApplyKeyMixed\", \"g1m\", \"frm\", n8q*2, n8q*3, n8r, \"g1m_timesFrAffine\");\n    buildApplyKey(module, \"g2m_batchApplyKey\", \"g2m\", \"frm\", n8q*2*3, n8q*3*2, n8r, \"g2m_timesFr\");\n    buildApplyKey(module, \"g2m_batchApplyKeyMixed\", \"g2m\", \"frm\", n8q*2*2, n8q*3*2, n8r, \"g2m_timesFrAffine\");\n\n\n    function toMontgomery(a) {\n        return BigInt(a) * (1n << BigInt(f1size*8)) % q;\n    }\n\n    const G1gen = [\n        3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507n,\n        1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569n,\n        1n\n    ];\n\n    const pG1gen = module.alloc(\n        [\n            ...utils$1.bigInt2BytesLE( toMontgomery(G1gen[0]), f1size ),\n            ...utils$1.bigInt2BytesLE( toMontgomery(G1gen[1]), f1size ),\n            ...utils$1.bigInt2BytesLE( toMontgomery(G1gen[2]), f1size ),\n        ]\n    );\n\n    const G1zero = [\n        0n,\n        1n,\n        0n\n    ];\n\n    const pG1zero = module.alloc(\n        [\n            ...utils$1.bigInt2BytesLE( toMontgomery(G1zero[0]), f1size ),\n            ...utils$1.bigInt2BytesLE( toMontgomery(G1zero[1]), f1size ),\n            ...utils$1.bigInt2BytesLE( toMontgomery(G1zero[2]), f1size )\n        ]\n    );\n\n    const G2gen = [\n        [\n            352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160n,\n            3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758n,\n        ],[\n            1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905n,\n            927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582n,\n        ],[\n            1n,\n            0n,\n        ]\n    ];\n\n    const pG2gen = module.alloc(\n        [\n            ...utils$1.bigInt2BytesLE( toMontgomery(G2gen[0][0]), f1size ),\n            ...utils$1.bigInt2BytesLE( toMontgomery(G2gen[0][1]), f1size ),\n            ...utils$1.bigInt2BytesLE( toMontgomery(G2gen[1][0]), f1size ),\n            ...utils$1.bigInt2BytesLE( toMontgomery(G2gen[1][1]), f1size ),\n            ...utils$1.bigInt2BytesLE( toMontgomery(G2gen[2][0]), f1size ),\n            ...utils$1.bigInt2BytesLE( toMontgomery(G2gen[2][1]), f1size ),\n        ]\n    );\n\n    const G2zero = [\n        [\n            0n,\n            0n,\n        ],[\n            1n,\n            0n,\n        ],[\n            0n,\n            0n,\n        ]\n    ];\n\n    const pG2zero = module.alloc(\n        [\n            ...utils$1.bigInt2BytesLE( toMontgomery(G2zero[0][0]), f1size ),\n            ...utils$1.bigInt2BytesLE( toMontgomery(G2zero[0][1]), f1size ),\n            ...utils$1.bigInt2BytesLE( toMontgomery(G2zero[1][0]), f1size ),\n            ...utils$1.bigInt2BytesLE( toMontgomery(G2zero[1][1]), f1size ),\n            ...utils$1.bigInt2BytesLE( toMontgomery(G2zero[2][0]), f1size ),\n            ...utils$1.bigInt2BytesLE( toMontgomery(G2zero[2][1]), f1size ),\n        ]\n    );\n\n    const pOneT = module.alloc([\n        ...utils$1.bigInt2BytesLE( toMontgomery(1n), f1size ),\n        ...utils$1.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils$1.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils$1.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils$1.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils$1.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils$1.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils$1.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils$1.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils$1.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils$1.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils$1.bigInt2BytesLE( toMontgomery(0n), f1size ),\n    ]);\n\n    const pBls12381Twist =  module.alloc([\n        ...utils$1.bigInt2BytesLE( toMontgomery(1n), f1size ),\n        ...utils$1.bigInt2BytesLE( toMontgomery(1n), f1size ),\n    ]);\n\n    function build_mulNR2() {\n        const f = module.addFunction(f2mPrefix + \"_mulNR\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0c = c.i32_const(module.alloc(f1size));\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1size));\n        const r0 = c.getLocal(\"pr\");\n        const r1 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(f1size));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_copy\", x0, x0c),\n            c.call(f1mPrefix+\"_sub\", x0, x1, r0),\n            c.call(f1mPrefix+\"_add\", x0c, x1, r1),\n        );\n    }\n    build_mulNR2();\n\n    const f6mPrefix = buildF3m(module, f2mPrefix+\"_mulNR\", \"f6m\", \"f2m\");\n\n    function build_mulNR6() {\n        const f = module.addFunction(f6mPrefix + \"_mulNR\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const c0copy = c.i32_const(module.alloc(f1size*2));\n\n        f.addCode(\n            c.call(\n                f2mPrefix + \"_copy\",\n                c.getLocal(\"x\"),\n                c0copy\n            ),\n            c.call(\n                f2mPrefix + \"_mulNR\",\n                c.i32_add(c.getLocal(\"x\"), c.i32_const(n8q*4)),\n                c.getLocal(\"pr\")\n            ),\n            c.call(\n                f2mPrefix + \"_copy\",\n                c.i32_add(c.getLocal(\"x\"), c.i32_const(n8q*2)),\n                c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8q*4)),\n            ),\n            c.call(\n                f2mPrefix + \"_copy\",\n                c0copy,\n                c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8q*2)),\n            ),\n        );\n    }\n    build_mulNR6();\n\n    const ftmPrefix = buildF2m(module, f6mPrefix+\"_mulNR\", \"ftm\", f6mPrefix);\n\n    const ateLoopCount = 0xd201000000010000n;\n    const ateLoopBitBytes = bits(ateLoopCount);\n    const pAteLoopBitBytes = module.alloc(ateLoopBitBytes);\n\n    const ateCoefSize = 3 * f2size;\n    const ateNDblCoefs = ateLoopBitBytes.length-1;\n    const ateNAddCoefs = ateLoopBitBytes.reduce((acc, b) =>  acc + ( b!=0 ? 1 : 0)   ,0);\n    const ateNCoefs = ateNAddCoefs + ateNDblCoefs + 1;\n    const prePSize = 3*2*n8q;\n    const preQSize = 3*n8q*2 + ateNCoefs*ateCoefSize;\n    const finalExpIsNegative = true;\n\n    const finalExpZ = 15132376222941642752n;\n\n\n    module.modules[prefix] = {\n        n64q: n64q,\n        n64r: n64r,\n        n8q: n8q,\n        n8r: n8r,\n        pG1gen: pG1gen,\n        pG1zero: pG1zero,\n        pG1b: pG1b,\n        pG2gen: pG2gen,\n        pG2zero: pG2zero,\n        pG2b: pG2b,\n        pq: module.modules[\"f1m\"].pq,\n        pr: pr,\n        pOneT: pOneT,\n        r: r,\n        q: q,\n        prePSize: prePSize,\n        preQSize: preQSize\n    };\n\n\n    function naf(n) {\n        let E = n;\n        const res = [];\n        while (E > 0n) {\n            if (isOdd(E)) {\n                const z = 2 - Number(E % 4n);\n                res.push( z );\n                E = E - BigInt(z);\n            } else {\n                res.push( 0 );\n            }\n            E = E >> 1n;\n        }\n        return res;\n    }\n\n    function bits(n) {\n        let E = n;\n        const res = [];\n        while (E > 0n) {\n            if (isOdd(E)) {\n                res.push( 1 );\n            } else {\n                res.push( 0 );\n            }\n            E = E >> 1n;\n        }\n        return res;\n    }\n\n    function buildPrepareG1() {\n        const f = module.addFunction(prefix+ \"_prepareG1\");\n        f.addParam(\"pP\", \"i32\");\n        f.addParam(\"ppreP\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.call(g1mPrefix + \"_normalize\", c.getLocal(\"pP\"), c.getLocal(\"ppreP\")),  // TODO Remove if already in affine\n        );\n    }\n\n\n\n    function buildPrepDoubleStep() {\n        const f = module.addFunction(prefix+ \"_prepDblStep\");\n        f.addParam(\"R\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const Rx  = c.getLocal(\"R\");\n        const Ry  = c.i32_add(c.getLocal(\"R\"), c.i32_const(2*n8q));\n        const Rz  = c.i32_add(c.getLocal(\"R\"), c.i32_const(4*n8q));\n\n        const t0  = c.getLocal(\"r\");\n        const t3  = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*n8q));\n        const t6  = c.i32_add(c.getLocal(\"r\"), c.i32_const(4*n8q));\n\n\n        const zsquared = c.i32_const(module.alloc(f2size));\n        const t1 = c.i32_const(module.alloc(f2size));\n        const t2 = c.i32_const(module.alloc(f2size));\n        const t4 = c.i32_const(module.alloc(f2size));\n        const t5 = c.i32_const(module.alloc(f2size));\n\n        f.addCode(\n\n            // tmp0 = r.x.square();\n            c.call(f2mPrefix + \"_square\", Rx, t0),\n\n            // tmp1 = r.y.square();\n            c.call(f2mPrefix + \"_square\", Ry, t1),\n\n            // tmp2 = tmp1.square();\n            c.call(f2mPrefix + \"_square\", t1, t2),\n\n            // tmp3 = (tmp1 + r.x).square() - tmp0 - tmp2;\n            c.call(f2mPrefix + \"_add\", t1, Rx, t3),\n            c.call(f2mPrefix + \"_square\", t3, t3),\n            c.call(f2mPrefix + \"_sub\", t3, t0, t3),\n            c.call(f2mPrefix + \"_sub\", t3, t2, t3),\n\n            // tmp3 = tmp3 + tmp3;\n            c.call(f2mPrefix + \"_add\", t3, t3, t3),\n\n            // tmp4 = tmp0 + tmp0 + tmp0;\n            c.call(f2mPrefix + \"_add\", t0, t0, t4),\n            c.call(f2mPrefix + \"_add\", t4, t0, t4),\n\n            // tmp6 = r.x + tmp4;\n            c.call(f2mPrefix + \"_add\", Rx, t4, t6),\n\n            // tmp5 = tmp4.square();\n            c.call(f2mPrefix + \"_square\", t4, t5),\n\n            // zsquared = r.z.square();\n            c.call(f2mPrefix + \"_square\", Rz, zsquared),\n\n            // r.x = tmp5 - tmp3 - tmp3;\n            c.call(f2mPrefix + \"_sub\", t5, t3, Rx),\n            c.call(f2mPrefix + \"_sub\", Rx, t3, Rx),\n\n            // r.z = (r.z + r.y).square() - tmp1 - zsquared;\n            c.call(f2mPrefix + \"_add\", Rz, Ry, Rz),\n            c.call(f2mPrefix + \"_square\", Rz, Rz),\n            c.call(f2mPrefix + \"_sub\", Rz, t1, Rz),\n            c.call(f2mPrefix + \"_sub\", Rz, zsquared, Rz),\n\n            // r.y = (tmp3 - r.x) * tmp4;\n            c.call(f2mPrefix + \"_sub\", t3, Rx, Ry),\n            c.call(f2mPrefix + \"_mul\", Ry, t4, Ry),\n\n            // tmp2 = tmp2 + tmp2;\n            c.call(f2mPrefix + \"_add\", t2, t2, t2),\n\n            // tmp2 = tmp2 + tmp2;\n            c.call(f2mPrefix + \"_add\", t2, t2, t2),\n\n            // tmp2 = tmp2 + tmp2;\n            c.call(f2mPrefix + \"_add\", t2, t2, t2),\n\n            // r.y -= tmp2;\n            c.call(f2mPrefix + \"_sub\", Ry, t2, Ry),\n\n            // tmp3 = tmp4 * zsquared;\n            c.call(f2mPrefix + \"_mul\", t4, zsquared, t3),\n\n            // tmp3 = tmp3 + tmp3;\n            c.call(f2mPrefix + \"_add\", t3, t3, t3),\n\n            // tmp3 = -tmp3;\n            c.call(f2mPrefix + \"_neg\", t3, t3),\n\n            // tmp6 = tmp6.square() - tmp0 - tmp5;\n            c.call(f2mPrefix + \"_square\", t6, t6),\n            c.call(f2mPrefix + \"_sub\", t6, t0, t6),\n            c.call(f2mPrefix + \"_sub\", t6, t5, t6),\n\n            // tmp1 = tmp1 + tmp1;\n            c.call(f2mPrefix + \"_add\", t1, t1, t1),\n\n            // tmp1 = tmp1 + tmp1;\n            c.call(f2mPrefix + \"_add\", t1, t1, t1),\n\n            // tmp6 = tmp6 - tmp1;\n            c.call(f2mPrefix + \"_sub\", t6, t1, t6),\n\n            // tmp0 = r.z * zsquared;\n            c.call(f2mPrefix + \"_mul\", Rz, zsquared, t0),\n\n            // tmp0 = tmp0 + tmp0;\n            c.call(f2mPrefix + \"_add\", t0, t0, t0),\n\n        );\n    }\n\n    function buildPrepAddStep() {\n        const f = module.addFunction(prefix+ \"_prepAddStep\");\n        f.addParam(\"R\", \"i32\");\n        f.addParam(\"Q\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const Rx  = c.getLocal(\"R\");\n        const Ry  = c.i32_add(c.getLocal(\"R\"), c.i32_const(2*n8q));\n        const Rz  = c.i32_add(c.getLocal(\"R\"), c.i32_const(4*n8q));\n\n        const Qx  = c.getLocal(\"Q\");\n        const Qy  = c.i32_add(c.getLocal(\"Q\"), c.i32_const(2*n8q));\n\n        const t10  = c.getLocal(\"r\");\n        const t1  = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*n8q));\n        const t9  = c.i32_add(c.getLocal(\"r\"), c.i32_const(4*n8q));\n\n        const zsquared = c.i32_const(module.alloc(f2size));\n        const ysquared = c.i32_const(module.alloc(f2size));\n        const ztsquared = c.i32_const(module.alloc(f2size));\n        const t0 = c.i32_const(module.alloc(f2size));\n        const t2 = c.i32_const(module.alloc(f2size));\n        const t3 = c.i32_const(module.alloc(f2size));\n        const t4 = c.i32_const(module.alloc(f2size));\n        const t5 = c.i32_const(module.alloc(f2size));\n        const t6 = c.i32_const(module.alloc(f2size));\n        const t7 = c.i32_const(module.alloc(f2size));\n        const t8 = c.i32_const(module.alloc(f2size));\n\n        f.addCode(\n\n            // zsquared = r.z.square();\n            c.call(f2mPrefix + \"_square\", Rz, zsquared),\n\n            // ysquared = q.y.square();\n            c.call(f2mPrefix + \"_square\", Qy, ysquared),\n\n            // t0 = zsquared * q.x;\n            c.call(f2mPrefix + \"_mul\", zsquared, Qx, t0),\n\n            // t1 = ((q.y + r.z).square() - ysquared - zsquared) * zsquared;\n            c.call(f2mPrefix + \"_add\", Qy, Rz, t1),\n            c.call(f2mPrefix + \"_square\", t1, t1),\n            c.call(f2mPrefix + \"_sub\", t1, ysquared, t1),\n            c.call(f2mPrefix + \"_sub\", t1, zsquared, t1),\n            c.call(f2mPrefix + \"_mul\", t1, zsquared, t1),\n\n            // t2 = t0 - r.x;\n            c.call(f2mPrefix + \"_sub\", t0, Rx, t2),\n\n            // t3 = t2.square();\n            c.call(f2mPrefix + \"_square\", t2, t3),\n\n            // t4 = t3 + t3;\n            c.call(f2mPrefix + \"_add\", t3, t3, t4),\n\n            // t4 = t4 + t4;\n            c.call(f2mPrefix + \"_add\", t4, t4, t4),\n\n            // t5 = t4 * t2;\n            c.call(f2mPrefix + \"_mul\", t4, t2, t5),\n\n            // t6 = t1 - r.y - r.y;\n            c.call(f2mPrefix + \"_sub\", t1, Ry, t6),\n            c.call(f2mPrefix + \"_sub\", t6, Ry, t6),\n\n            // t9 = t6 * q.x;\n            c.call(f2mPrefix + \"_mul\", t6, Qx, t9),\n\n            // t7 = t4 * r.x;\n            c.call(f2mPrefix + \"_mul\", t4, Rx, t7),\n\n            // r.x = t6.square() - t5 - t7 - t7;\n            c.call(f2mPrefix + \"_square\", t6, Rx),\n            c.call(f2mPrefix + \"_sub\", Rx, t5, Rx),\n            c.call(f2mPrefix + \"_sub\", Rx, t7, Rx),\n            c.call(f2mPrefix + \"_sub\", Rx, t7, Rx),\n\n            // r.z = (r.z + t2).square() - zsquared - t3;\n            c.call(f2mPrefix + \"_add\", Rz, t2, Rz),\n            c.call(f2mPrefix + \"_square\", Rz, Rz),\n            c.call(f2mPrefix + \"_sub\", Rz, zsquared, Rz),\n            c.call(f2mPrefix + \"_sub\", Rz, t3, Rz),\n\n            // t10 = q.y + r.z;\n            c.call(f2mPrefix + \"_add\", Qy, Rz, t10),\n\n            // t8 = (t7 - r.x) * t6;\n            c.call(f2mPrefix + \"_sub\", t7, Rx, t8),\n            c.call(f2mPrefix + \"_mul\", t8, t6, t8),\n\n            // t0 = r.y * t5;\n            c.call(f2mPrefix + \"_mul\", Ry, t5, t0),\n\n            // t0 = t0 + t0;\n            c.call(f2mPrefix + \"_add\", t0, t0, t0),\n\n            // r.y = t8 - t0;\n            c.call(f2mPrefix + \"_sub\", t8, t0, Ry),\n\n            // t10 = t10.square() - ysquared;\n            c.call(f2mPrefix + \"_square\", t10, t10),\n            c.call(f2mPrefix + \"_sub\", t10, ysquared, t10),\n\n            // ztsquared = r.z.square();\n            c.call(f2mPrefix + \"_square\", Rz, ztsquared),\n\n            // t10 = t10 - ztsquared;\n            c.call(f2mPrefix + \"_sub\", t10, ztsquared, t10),\n\n            // t9 = t9 + t9 - t10;\n            c.call(f2mPrefix + \"_add\", t9, t9, t9),\n            c.call(f2mPrefix + \"_sub\", t9, t10, t9),\n\n            // t10 = r.z + r.z;\n            c.call(f2mPrefix + \"_add\", Rz, Rz, t10),\n\n            // t6 = -t6;\n            c.call(f2mPrefix + \"_neg\", t6, t6),\n\n            // t1 = t6 + t6;\n            c.call(f2mPrefix + \"_add\", t6, t6, t1),\n        );\n    }\n\n\n    function buildPrepareG2() {\n        const f = module.addFunction(prefix+ \"_prepareG2\");\n        f.addParam(\"pQ\", \"i32\");\n        f.addParam(\"ppreQ\", \"i32\");\n        f.addLocal(\"pCoef\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n\n        const Q = c.getLocal(\"pQ\");\n\n        const pR = module.alloc(f2size*3);\n        const R = c.i32_const(pR);\n\n        const base = c.getLocal(\"ppreQ\");\n\n        f.addCode(\n            c.call(g2mPrefix + \"_normalize\", Q, base),\n            c.if(\n                c.call(g2mPrefix + \"_isZero\", base),\n                c.ret([])\n            ),\n            c.call(g2mPrefix + \"_copy\", base, R),\n            c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"ppreQ\"), c.i32_const(f2size*3))),\n        );\n\n        f.addCode(\n            c.setLocal(\"i\", c.i32_const(ateLoopBitBytes.length-2)),\n            c.block(c.loop(\n\n                c.call(prefix + \"_prepDblStep\", R, c.getLocal(\"pCoef\")),\n                c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n\n                c.if(\n                    c.i32_load8_s(c.getLocal(\"i\"), pAteLoopBitBytes),\n                    [\n                        ...c.call(prefix + \"_prepAddStep\", R, base, c.getLocal(\"pCoef\")),\n                        ...c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n                    ]\n                ),\n                c.br_if(1, c.i32_eqz ( c.getLocal(\"i\") )),\n                c.setLocal(\"i\", c.i32_sub(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n    }\n\n\n    function buildF6Mul1() {\n        const f = module.addFunction(f6mPrefix+ \"_mul1\");\n        f.addParam(\"pA\", \"i32\");    // F6\n        f.addParam(\"pC1\", \"i32\");   // F2\n        f.addParam(\"pR\", \"i32\");    // F6\n\n        const c = f.getCodeBuilder();\n\n        const A_c0 = c.getLocal(\"pA\");\n        const A_c1 = c.i32_add(c.getLocal(\"pA\"), c.i32_const(f1size*2));\n        const A_c2 = c.i32_add(c.getLocal(\"pA\"), c.i32_const(f1size*4));\n\n        const c1  = c.getLocal(\"pC1\");\n\n        const t1 = c.getLocal(\"pR\");\n        const t2 = c.i32_add(c.getLocal(\"pR\"), c.i32_const(f1size*2));\n        const b_b = c.i32_add(c.getLocal(\"pR\"), c.i32_const(f1size*4));\n\n        const Ac0_Ac1 = c.i32_const(module.alloc(f1size*2));\n        const Ac1_Ac2 = c.i32_const(module.alloc(f1size*2));\n\n        f.addCode(\n\n            c.call(f2mPrefix + \"_add\", A_c0, A_c1, Ac0_Ac1),\n            c.call(f2mPrefix + \"_add\", A_c1, A_c2, Ac1_Ac2),\n\n            // let b_b = self.c1 * c1;\n            c.call(f2mPrefix + \"_mul\", A_c1, c1, b_b),\n\n            // let t1 = (self.c1 + self.c2) * c1 - b_b;\n            c.call(f2mPrefix + \"_mul\", Ac1_Ac2, c1, t1),\n            c.call(f2mPrefix + \"_sub\", t1, b_b, t1),\n\n            // let t1 = t1.mul_by_nonresidue();\n            c.call(f2mPrefix + \"_mulNR\", t1, t1),\n\n            // let t2 = (self.c0 + self.c1) * c1 - b_b;\n            c.call(f2mPrefix + \"_mul\", Ac0_Ac1, c1, t2),\n            c.call(f2mPrefix + \"_sub\", t2, b_b, t2),\n        );\n    }\n    buildF6Mul1();\n\n    function buildF6Mul01() {\n        const f = module.addFunction(f6mPrefix+ \"_mul01\");\n        f.addParam(\"pA\", \"i32\");    // F6\n        f.addParam(\"pC0\", \"i32\");   // F2\n        f.addParam(\"pC1\", \"i32\");   // F2\n        f.addParam(\"pR\", \"i32\");    // F6\n\n        const c = f.getCodeBuilder();\n\n        const A_c0 = c.getLocal(\"pA\");\n        const A_c1 = c.i32_add(c.getLocal(\"pA\"), c.i32_const(f1size*2));\n        const A_c2 = c.i32_add(c.getLocal(\"pA\"), c.i32_const(f1size*4));\n\n        const c0  = c.getLocal(\"pC0\");\n        const c1  = c.getLocal(\"pC1\");\n\n        const t1 = c.getLocal(\"pR\");\n        const t2 = c.i32_add(c.getLocal(\"pR\"), c.i32_const(f1size*2));\n        const t3 = c.i32_add(c.getLocal(\"pR\"), c.i32_const(f1size*4));\n\n        const a_a = c.i32_const(module.alloc(f1size*2));\n        const b_b = c.i32_const(module.alloc(f1size*2));\n        const Ac0_Ac1 = c.i32_const(module.alloc(f1size*2));\n        const Ac0_Ac2 = c.i32_const(module.alloc(f1size*2));\n\n        f.addCode(\n            // let a_a = self.c0 * c0;\n            c.call(f2mPrefix + \"_mul\", A_c0, c0, a_a),\n\n            // let b_b = self.c1 * c1;\n            c.call(f2mPrefix + \"_mul\", A_c1, c1, b_b),\n\n\n            c.call(f2mPrefix + \"_add\", A_c0, A_c1, Ac0_Ac1),\n            c.call(f2mPrefix + \"_add\", A_c0, A_c2, Ac0_Ac2),\n\n            // let t1 = (self.c1 + self.c2) * c1 - b_b;\n            c.call(f2mPrefix + \"_add\", A_c1, A_c2, t1),\n            c.call(f2mPrefix + \"_mul\", t1, c1, t1),\n            c.call(f2mPrefix + \"_sub\", t1, b_b, t1),\n\n            // let t1 = t1.mul_by_nonresidue() + a_a;\n            c.call(f2mPrefix + \"_mulNR\", t1, t1),\n            c.call(f2mPrefix + \"_add\", t1, a_a, t1),\n\n            // let t2 = (c0 + c1) * (self.c0 + self.c1) - a_a - b_b;\n            c.call(f2mPrefix + \"_add\", c0, c1, t2),\n            c.call(f2mPrefix + \"_mul\", t2, Ac0_Ac1, t2),\n            c.call(f2mPrefix + \"_sub\", t2, a_a, t2),\n            c.call(f2mPrefix + \"_sub\", t2, b_b, t2),\n\n            // let t3 = (self.c0 + self.c2) * c0 - a_a + b_b;\n            c.call(f2mPrefix + \"_mul\", Ac0_Ac2, c0, t3),\n            c.call(f2mPrefix + \"_sub\", t3, a_a, t3),\n            c.call(f2mPrefix + \"_add\", t3, b_b, t3),\n\n\n        );\n    }\n    buildF6Mul01();\n\n\n    function buildF12Mul014() {\n\n        const f = module.addFunction(ftmPrefix+ \"_mul014\");\n        f.addParam(\"pA\", \"i32\");    // F12\n        f.addParam(\"pC0\", \"i32\");   // F2\n        f.addParam(\"pC1\", \"i32\");   // F2\n        f.addParam(\"pC4\", \"i32\");   // F2\n        f.addParam(\"pR\", \"i32\");    // F12\n\n        const c = f.getCodeBuilder();\n\n\n        const A_c0 = c.getLocal(\"pA\");\n        const A_c1 = c.i32_add(c.getLocal(\"pA\"), c.i32_const(f1size*6));\n\n        const c0  = c.getLocal(\"pC0\");\n        const c1  = c.getLocal(\"pC1\");\n        const c4  = c.getLocal(\"pC4\");\n\n        const aa = c.i32_const(module.alloc(f1size*6));\n        const bb = c.i32_const(module.alloc(f1size*6));\n        const o = c.i32_const(module.alloc(f1size*2));\n\n        const R_c0 = c.getLocal(\"pR\");\n        const R_c1 = c.i32_add(c.getLocal(\"pR\"), c.i32_const(f1size*6));\n\n        f.addCode(\n            // let aa = self.c0.mul_by_01(c0, c1);\n            c.call(f6mPrefix + \"_mul01\", A_c0, c0, c1, aa),\n\n            // let bb = self.c1.mul_by_1(c4);\n            c.call(f6mPrefix + \"_mul1\", A_c1, c4, bb),\n\n            // let o = c1 + c4;\n            c.call(f2mPrefix + \"_add\", c1, c4, o),\n\n            // let c1 = self.c1 + self.c0;\n            c.call(f6mPrefix + \"_add\", A_c1, A_c0, R_c1),\n\n            // let c1 = c1.mul_by_01(c0, &o);\n            c.call(f6mPrefix + \"_mul01\", R_c1, c0, o, R_c1),\n\n            // let c1 = c1 - aa - bb;\n            c.call(f6mPrefix + \"_sub\", R_c1, aa, R_c1),\n            c.call(f6mPrefix + \"_sub\", R_c1, bb, R_c1),\n\n            // let c0 = bb;\n            c.call(f6mPrefix + \"_copy\", bb, R_c0),\n\n            // let c0 = c0.mul_by_nonresidue();\n            c.call(f6mPrefix + \"_mulNR\", R_c0, R_c0),\n\n            // let c0 = c0 + aa;\n            c.call(f6mPrefix + \"_add\", R_c0, aa, R_c0),\n        );\n    }\n    buildF12Mul014();\n\n\n    function buildELL() {\n        const f = module.addFunction(prefix+ \"_ell\");\n        f.addParam(\"pP\", \"i32\");\n        f.addParam(\"pCoefs\", \"i32\");\n        f.addParam(\"pF\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const Px  = c.getLocal(\"pP\");\n        const Py  = c.i32_add(c.getLocal(\"pP\"), c.i32_const(n8q));\n\n        const F  = c.getLocal(\"pF\");\n\n        const coef0_0  = c.getLocal(\"pCoefs\");\n        const coef0_1  = c.i32_add(c.getLocal(\"pCoefs\"), c.i32_const(f1size));\n        const coef1_0  = c.i32_add(c.getLocal(\"pCoefs\"), c.i32_const(f1size*2));\n        const coef1_1  = c.i32_add(c.getLocal(\"pCoefs\"), c.i32_const(f1size*3));\n        const coef2  = c.i32_add(c.getLocal(\"pCoefs\"), c.i32_const(f1size*4));\n\n        const pc0 = module.alloc(f1size*2);\n        const c0  = c.i32_const(pc0);\n        const c0_c0 = c.i32_const(pc0);\n        const c0_c1 = c.i32_const(pc0+f1size);\n\n        const pc1 = module.alloc(f1size*2);\n        const c1  = c.i32_const(pc1);\n        const c1_c0 = c.i32_const(pc1);\n        const c1_c1 = c.i32_const(pc1+f1size);\n        f.addCode(\n            //     let mut c0 = coeffs.0;\n            //     let mut c1 = coeffs.1;\n            //\n            //    c0.c0 *= p.y;\n            //    c0.c1 *= p.y;\n            //\n            //    c1.c0 *= p.x;\n            //    c1.c1 *= p.x;\n            //\n            //     f.mul_by_014(&coeffs.2, &c1, &c0)\n\n            c.call(f1mPrefix + \"_mul\", coef0_0, Py, c0_c0),\n            c.call(f1mPrefix + \"_mul\", coef0_1, Py, c0_c1),\n            c.call(f1mPrefix + \"_mul\", coef1_0, Px, c1_c0),\n            c.call(f1mPrefix + \"_mul\", coef1_1, Px, c1_c1),\n\n            c.call(ftmPrefix + \"_mul014\", F, coef2, c1, c0, F),\n\n        );\n\n    }\n    buildELL();\n\n    function buildMillerLoop() {\n        const f = module.addFunction(prefix+ \"_millerLoop\");\n        f.addParam(\"ppreP\", \"i32\");\n        f.addParam(\"ppreQ\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"pCoef\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const preP = c.getLocal(\"ppreP\");\n\n        const coefs  = c.getLocal(\"pCoef\");\n\n        const F = c.getLocal(\"r\");\n\n\n        f.addCode(\n            c.call(ftmPrefix + \"_one\", F),\n\n            c.if(\n                c.call(g1mPrefix + \"_isZero\", preP),\n                c.ret([])\n            ),\n            c.if(\n                c.call(g1mPrefix + \"_isZero\", c.getLocal(\"ppreQ\")),\n                c.ret([])\n            ),\n            c.setLocal(\"pCoef\", c.i32_add( c.getLocal(\"ppreQ\"), c.i32_const(f2size*3))),\n\n            c.setLocal(\"i\", c.i32_const(ateLoopBitBytes.length-2)),\n            c.block(c.loop(\n\n\n                c.call(prefix + \"_ell\", preP, coefs,  F),\n                c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n\n                c.if(\n                    c.i32_load8_s(c.getLocal(\"i\"), pAteLoopBitBytes),\n                    [\n                        ...c.call(prefix + \"_ell\", preP, coefs,  F),\n                        ...c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n                    ]\n                ),\n                c.call(ftmPrefix + \"_square\", F, F),\n\n                c.br_if(1, c.i32_eq ( c.getLocal(\"i\"), c.i32_const(1) )),\n                c.setLocal(\"i\", c.i32_sub(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            )),\n            c.call(prefix + \"_ell\", preP, coefs,  F),\n\n        );\n\n\n        {\n            f.addCode(\n                c.call(ftmPrefix + \"_conjugate\", F, F),\n            );\n        }\n    }\n\n\n    function buildFrobeniusMap(n) {\n        const F12 = [\n            [\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n            ],\n            [\n                [1n, 0n],\n                [3850754370037169011952147076051364057158807420970682438676050522613628423219637725072182697113062777891589506424760n, 151655185184498381465642749684540099398075398968325446656007613510403227271200139370504932015952886146304766135027n],\n                [793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620351n, 0n],\n                [2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530n, 1028732146235106349975324479215795277384839936929757896155643118032610843298655225875571310552543014690878354869257n],\n                [793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350n, 0n],\n                [3125332594171059424908108096204648978570118281977575435832422631601824034463382777937621250592425535493320683825557n, 877076961050607968509681729531255177986764537961432449499635504522207616027455086505066378536590128544573588734230n],\n                [4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559786n, 0n],\n                [151655185184498381465642749684540099398075398968325446656007613510403227271200139370504932015952886146304766135027n, 3850754370037169011952147076051364057158807420970682438676050522613628423219637725072182697113062777891589506424760n],\n                [4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436n, 0n],\n                [1028732146235106349975324479215795277384839936929757896155643118032610843298655225875571310552543014690878354869257n, 2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530n],\n                [4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939437n, 0n],\n                [877076961050607968509681729531255177986764537961432449499635504522207616027455086505066378536590128544573588734230n, 3125332594171059424908108096204648978570118281977575435832422631601824034463382777937621250592425535493320683825557n],\n            ]\n        ];\n\n        const F6 = [\n            [\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n            ],\n            [\n                [1n, 0n],\n                [0n, 4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436n],\n                [793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350n, 0n],\n                [0n, 1n],\n                [4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436n, 0n],\n                [0n, 793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350n],\n            ],\n            [\n                [1n, 0n],\n                [4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939437n, 0n],\n                [4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436n, 0n],\n                [4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559786n, 0n],\n                [793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350n, 0n],\n                [793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620351n, 0n],\n            ]\n        ];\n\n        const f = module.addFunction(ftmPrefix + \"_frobeniusMap\"+n);\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        for (let i=0; i<6; i++) {\n            const X = (i==0) ? c.getLocal(\"x\") : c.i32_add(c.getLocal(\"x\"), c.i32_const(i*f2size));\n            const Xc0 = X;\n            const Xc1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(i*f2size + f1size));\n            const R = (i==0) ? c.getLocal(\"r\") : c.i32_add(c.getLocal(\"r\"), c.i32_const(i*f2size));\n            const Rc0 = R;\n            const Rc1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(i*f2size + f1size));\n            const coef = mul2(F12[Math.floor(i/3)][n%12] , F6[i%3][n%6]);\n            const pCoef = module.alloc([\n                ...utils$1.bigInt2BytesLE(toMontgomery(coef[0]), n8q),\n                ...utils$1.bigInt2BytesLE(toMontgomery(coef[1]), n8q),\n            ]);\n            if (n%2 == 1) {\n                f.addCode(\n                    c.call(f1mPrefix + \"_copy\", Xc0, Rc0),\n                    c.call(f1mPrefix + \"_neg\", Xc1, Rc1),\n                    c.call(f2mPrefix + \"_mul\", R, c.i32_const(pCoef), R),\n                );\n            } else {\n                f.addCode(c.call(f2mPrefix + \"_mul\", X, c.i32_const(pCoef), R));\n            }\n        }\n\n        function mul2(a, b) {\n            const ac0 = a[0];\n            const ac1 = a[1];\n            const bc0 = b[0];\n            const bc1 = b[1];\n            const res = [\n                (ac0 * bc0 - (ac1 * bc1)) % q,\n                (ac0 * bc1 + (ac1 * bc0)) % q,\n            ];\n            if (isNegative$1(res[0])) res[0] = res[0] + q;\n            return res;\n        }\n\n    }\n\n\n    function buildCyclotomicSquare() {\n        const f = module.addFunction(prefix+ \"__cyclotomicSquare\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x4 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f2size));\n        const x3 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f2size));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(3*f2size));\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(4*f2size));\n        const x5 = c.i32_add(c.getLocal(\"x\"), c.i32_const(5*f2size));\n\n        const r0 = c.getLocal(\"r\");\n        const r4 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f2size));\n        const r3 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f2size));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(3*f2size));\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(4*f2size));\n        const r5 = c.i32_add(c.getLocal(\"r\"), c.i32_const(5*f2size));\n\n        const t0 = c.i32_const(module.alloc(f2size));\n        const t1 = c.i32_const(module.alloc(f2size));\n        const t2 = c.i32_const(module.alloc(f2size));\n        const t3 = c.i32_const(module.alloc(f2size));\n        const t4 = c.i32_const(module.alloc(f2size));\n        const t5 = c.i32_const(module.alloc(f2size));\n        const tmp = c.i32_const(module.alloc(f2size));\n        const AUX = c.i32_const(module.alloc(f2size));\n\n\n        f.addCode(\n            //    // t0 + t1*y = (z0 + z1*y)^2 = a^2\n            //    tmp = z0 * z1;\n            //    t0 = (z0 + z1) * (z0 + my_Fp6::non_residue * z1) - tmp - my_Fp6::non_residue * tmp;\n            //    t1 = tmp + tmp;\n            c.call(f2mPrefix + \"_mul\", x0, x1, tmp),\n            c.call(f2mPrefix + \"_mulNR\", x1, t0),\n            c.call(f2mPrefix + \"_add\", x0, t0, t0),\n            c.call(f2mPrefix + \"_add\", x0, x1, AUX),\n            c.call(f2mPrefix + \"_mul\", AUX, t0, t0),\n            c.call(f2mPrefix + \"_mulNR\", tmp, AUX),\n            c.call(f2mPrefix + \"_add\", tmp, AUX, AUX),\n            c.call(f2mPrefix + \"_sub\", t0, AUX, t0),\n            c.call(f2mPrefix + \"_add\", tmp, tmp, t1),\n\n            //  // t2 + t3*y = (z2 + z3*y)^2 = b^2\n            //  tmp = z2 * z3;\n            //  t2 = (z2 + z3) * (z2 + my_Fp6::non_residue * z3) - tmp - my_Fp6::non_residue * tmp;\n            //  t3 = tmp + tmp;\n            c.call(f2mPrefix + \"_mul\", x2, x3, tmp),\n            c.call(f2mPrefix + \"_mulNR\", x3, t2),\n            c.call(f2mPrefix + \"_add\", x2, t2, t2),\n            c.call(f2mPrefix + \"_add\", x2, x3, AUX),\n            c.call(f2mPrefix + \"_mul\", AUX, t2, t2),\n            c.call(f2mPrefix + \"_mulNR\", tmp, AUX),\n            c.call(f2mPrefix + \"_add\", tmp, AUX, AUX),\n            c.call(f2mPrefix + \"_sub\", t2, AUX, t2),\n            c.call(f2mPrefix + \"_add\", tmp, tmp, t3),\n\n            //  // t4 + t5*y = (z4 + z5*y)^2 = c^2\n            //  tmp = z4 * z5;\n            //  t4 = (z4 + z5) * (z4 + my_Fp6::non_residue * z5) - tmp - my_Fp6::non_residue * tmp;\n            //  t5 = tmp + tmp;\n            c.call(f2mPrefix + \"_mul\", x4, x5, tmp),\n            c.call(f2mPrefix + \"_mulNR\", x5, t4),\n            c.call(f2mPrefix + \"_add\", x4, t4, t4),\n            c.call(f2mPrefix + \"_add\", x4, x5, AUX),\n            c.call(f2mPrefix + \"_mul\", AUX, t4, t4),\n            c.call(f2mPrefix + \"_mulNR\", tmp, AUX),\n            c.call(f2mPrefix + \"_add\", tmp, AUX, AUX),\n            c.call(f2mPrefix + \"_sub\", t4, AUX, t4),\n            c.call(f2mPrefix + \"_add\", tmp, tmp, t5),\n\n            // For A\n            // z0 = 3 * t0 - 2 * z0\n            c.call(f2mPrefix + \"_sub\", t0, x0, r0),\n            c.call(f2mPrefix + \"_add\", r0, r0, r0),\n            c.call(f2mPrefix + \"_add\", t0, r0, r0),\n            // z1 = 3 * t1 + 2 * z1\n            c.call(f2mPrefix + \"_add\", t1, x1, r1),\n            c.call(f2mPrefix + \"_add\", r1, r1, r1),\n            c.call(f2mPrefix + \"_add\", t1, r1, r1),\n\n            // For B\n            // z2 = 3 * (xi * t5) + 2 * z2\n            c.call(f2mPrefix + \"_mul\", t5, c.i32_const(pBls12381Twist), AUX),\n            c.call(f2mPrefix + \"_add\", AUX, x2, r2),\n            c.call(f2mPrefix + \"_add\", r2, r2, r2),\n            c.call(f2mPrefix + \"_add\", AUX, r2, r2),\n            // z3 = 3 * t4 - 2 * z3\n            c.call(f2mPrefix + \"_sub\", t4, x3, r3),\n            c.call(f2mPrefix + \"_add\", r3, r3, r3),\n            c.call(f2mPrefix + \"_add\", t4, r3, r3),\n\n            // For C\n            // z4 = 3 * t2 - 2 * z4\n            c.call(f2mPrefix + \"_sub\", t2, x4, r4),\n            c.call(f2mPrefix + \"_add\", r4, r4, r4),\n            c.call(f2mPrefix + \"_add\", t2, r4, r4),\n            // z5 = 3 * t3 + 2 * z5\n            c.call(f2mPrefix + \"_add\", t3, x5, r5),\n            c.call(f2mPrefix + \"_add\", r5, r5, r5),\n            c.call(f2mPrefix + \"_add\", t3, r5, r5),\n\n        );\n    }\n\n\n    function buildCyclotomicExp(exponent, isExpNegative, fnName) {\n        const exponentNafBytes = naf(exponent).map( (b) => (b==-1 ? 0xFF: b) );\n        const pExponentNafBytes = module.alloc(exponentNafBytes);\n        // const pExponent = module.alloc(utils.bigInt2BytesLE(exponent, n8));\n\n        const f = module.addFunction(prefix+ \"__cyclotomicExp_\"+fnName);\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"bit\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"x\");\n\n        const res = c.getLocal(\"r\");\n\n        const inverse = c.i32_const(module.alloc(ftsize));\n\n\n        f.addCode(\n            c.call(ftmPrefix + \"_conjugate\", x, inverse),\n            c.call(ftmPrefix + \"_one\", res),\n\n            c.if(\n                c.teeLocal(\"bit\", c.i32_load8_s(c.i32_const(exponentNafBytes.length-1), pExponentNafBytes)),\n                c.if(\n                    c.i32_eq(\n                        c.getLocal(\"bit\"),\n                        c.i32_const(1)\n                    ),\n                    c.call(ftmPrefix + \"_mul\", res, x, res),\n                    c.call(ftmPrefix + \"_mul\", res, inverse, res),\n                )\n            ),\n\n            c.setLocal(\"i\", c.i32_const(exponentNafBytes.length-2)),\n            c.block(c.loop(\n                c.call(prefix + \"__cyclotomicSquare\", res, res),\n                c.if(\n                    c.teeLocal(\"bit\", c.i32_load8_s(c.getLocal(\"i\"), pExponentNafBytes)),\n                    c.if(\n                        c.i32_eq(\n                            c.getLocal(\"bit\"),\n                            c.i32_const(1)\n                        ),\n                        c.call(ftmPrefix + \"_mul\", res, x, res),\n                        c.call(ftmPrefix + \"_mul\", res, inverse, res),\n                    )\n                ),\n                c.br_if(1, c.i32_eqz ( c.getLocal(\"i\") )),\n                c.setLocal(\"i\", c.i32_sub(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n\n        if (isExpNegative) {\n            f.addCode(\n                c.call(ftmPrefix + \"_conjugate\", res, res),\n            );\n        }\n\n    }\n\n    function buildFinalExponentiation() {\n        buildCyclotomicSquare();\n        buildCyclotomicExp(finalExpZ, finalExpIsNegative, \"w0\");\n\n        const f = module.addFunction(prefix+ \"_finalExponentiation\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const elt = c.getLocal(\"x\");\n        const res = c.getLocal(\"r\");\n        const t0 = c.i32_const(module.alloc(ftsize));\n        const t1 = c.i32_const(module.alloc(ftsize));\n        const t2 = c.i32_const(module.alloc(ftsize));\n        const t3 = c.i32_const(module.alloc(ftsize));\n        const t4 = c.i32_const(module.alloc(ftsize));\n        const t5 = c.i32_const(module.alloc(ftsize));\n        const t6 = c.i32_const(module.alloc(ftsize));\n\n        f.addCode(\n\n            // let mut t0 = f.frobenius_map(6)\n            c.call(ftmPrefix + \"_frobeniusMap6\", elt, t0),\n\n            // let t1 = f.invert()\n            c.call(ftmPrefix + \"_inverse\", elt, t1),\n\n            // let mut t2 = t0 * t1;\n            c.call(ftmPrefix + \"_mul\", t0, t1, t2),\n\n            // t1 = t2.clone();\n            c.call(ftmPrefix + \"_copy\", t2, t1),\n\n            // t2 = t2.frobenius_map().frobenius_map();\n            c.call(ftmPrefix + \"_frobeniusMap2\", t2, t2),\n\n            // t2 *= t1;\n            c.call(ftmPrefix + \"_mul\", t2, t1, t2),\n\n\n            // t1 = cyclotomic_square(t2).conjugate();\n            c.call(prefix + \"__cyclotomicSquare\", t2, t1),\n            c.call(ftmPrefix + \"_conjugate\", t1, t1),\n\n            // let mut t3 = cycolotomic_exp(t2);\n            c.call(prefix + \"__cyclotomicExp_w0\", t2, t3),\n\n            // let mut t4 = cyclotomic_square(t3);\n            c.call(prefix + \"__cyclotomicSquare\", t3, t4),\n\n            // let mut t5 = t1 * t3;\n            c.call(ftmPrefix + \"_mul\", t1, t3, t5),\n\n            // t1 = cycolotomic_exp(t5);\n            c.call(prefix + \"__cyclotomicExp_w0\", t5, t1),\n\n            // t0 = cycolotomic_exp(t1);\n            c.call(prefix + \"__cyclotomicExp_w0\", t1, t0),\n\n            // let mut t6 = cycolotomic_exp(t0);\n            c.call(prefix + \"__cyclotomicExp_w0\", t0, t6),\n\n            // t6 *= t4;\n            c.call(ftmPrefix + \"_mul\", t6, t4, t6),\n\n            // t4 = cycolotomic_exp(t6);\n            c.call(prefix + \"__cyclotomicExp_w0\", t6, t4),\n\n            // t5 = t5.conjugate();\n            c.call(ftmPrefix + \"_conjugate\", t5, t5),\n\n            // t4 *= t5 * t2;\n            c.call(ftmPrefix + \"_mul\", t4, t5, t4),\n            c.call(ftmPrefix + \"_mul\", t4, t2, t4),\n\n            // t5 = t2.conjugate();\n            c.call(ftmPrefix + \"_conjugate\", t2, t5),\n\n            // t1 *= t2;\n            c.call(ftmPrefix + \"_mul\", t1, t2, t1),\n\n            // t1 = t1.frobenius_map().frobenius_map().frobenius_map();\n            c.call(ftmPrefix + \"_frobeniusMap3\", t1, t1),\n\n            // t6 *= t5;\n            c.call(ftmPrefix + \"_mul\", t6, t5, t6),\n\n            // t6 = t6.frobenius_map();\n            c.call(ftmPrefix + \"_frobeniusMap1\", t6, t6),\n\n            // t3 *= t0;\n            c.call(ftmPrefix + \"_mul\", t3, t0, t3),\n\n            // t3 = t3.frobenius_map().frobenius_map();\n            c.call(ftmPrefix + \"_frobeniusMap2\", t3, t3),\n\n            // t3 *= t1;\n            c.call(ftmPrefix + \"_mul\", t3, t1, t3),\n\n            // t3 *= t6;\n            c.call(ftmPrefix + \"_mul\", t3, t6, t3),\n\n            // f = t3 * t4;\n            c.call(ftmPrefix + \"_mul\", t3, t4, res),\n\n        );\n    }\n\n\n    function buildFinalExponentiationOld() {\n        const f = module.addFunction(prefix+ \"_finalExponentiationOld\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const exponent = 322277361516934140462891564586510139908379969514828494218366688025288661041104682794998680497580008899973249814104447692778988208376779573819485263026159588510513834876303014016798809919343532899164848730280942609956670917565618115867287399623286813270357901731510188149934363360381614501334086825442271920079363289954510565375378443704372994881406797882676971082200626541916413184642520269678897559532260949334760604962086348898118982248842634379637598665468817769075878555493752214492790122785850202957575200176084204422751485957336465472324810982833638490904279282696134323072515220044451592646885410572234451732790590013479358343841220074174848221722017083597872017638514103174122784843925578370430843522959600095676285723737049438346544753168912974976791528535276317256904336520179281145394686565050419250614107803233314658825463117900250701199181529205942363159325765991819433914303908860460720581408201373164047773794825411011922305820065611121544561808414055302212057471395719432072209245600258134364584636810093520285711072578721435517884103526483832733289802426157301542744476740008494780363354305116978805620671467071400711358839553375340724899735460480144599782014906586543813292157922220645089192130209334926661588737007768565838519456601560804957985667880395221049249803753582637708560n;\n\n        const pExponent = module.alloc(utils$1.bigInt2BytesLE( exponent, 544 ));\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.call(ftmPrefix + \"_exp\", c.getLocal(\"x\"), c.i32_const(pExponent), c.i32_const(544), c.getLocal(\"r\")),\n        );\n    }\n\n\n    const pPreP = module.alloc(prePSize);\n    const pPreQ = module.alloc(preQSize);\n\n    function buildPairingEquation(nPairings) {\n\n        const f = module.addFunction(prefix+ \"_pairingEq\"+nPairings);\n        for (let i=0; i<nPairings; i++) {\n            f.addParam(\"p_\"+i, \"i32\");\n            f.addParam(\"q_\"+i, \"i32\");\n        }\n        f.addParam(\"c\", \"i32\");\n        f.setReturnType(\"i32\");\n\n\n        const c = f.getCodeBuilder();\n\n        const resT = c.i32_const(module.alloc(ftsize));\n        const auxT = c.i32_const(module.alloc(ftsize));\n\n        f.addCode(c.call(ftmPrefix + \"_one\", resT ));\n\n        for (let i=0; i<nPairings; i++) {\n\n            f.addCode(c.call(prefix + \"_prepareG1\", c.getLocal(\"p_\"+i), c.i32_const(pPreP) ));\n            f.addCode(c.call(prefix + \"_prepareG2\", c.getLocal(\"q_\"+i), c.i32_const(pPreQ) ));\n\n            // Checks\n            f.addCode(\n                c.if(\n                    c.i32_eqz(c.call(g1mPrefix + \"_inGroupAffine\", c.i32_const(pPreP))),\n                    c.ret(c.i32_const(0))\n                ),\n                c.if(\n                    c.i32_eqz(c.call(g2mPrefix + \"_inGroupAffine\", c.i32_const(pPreQ))),\n                    c.ret(c.i32_const(0))\n                )\n            );\n\n            f.addCode(c.call(prefix + \"_millerLoop\", c.i32_const(pPreP), c.i32_const(pPreQ), auxT ));\n\n            f.addCode(c.call(ftmPrefix + \"_mul\", resT, auxT, resT ));\n        }\n\n        f.addCode(c.call(prefix + \"_finalExponentiation\", resT, resT ));\n\n        f.addCode(c.call(ftmPrefix + \"_eq\", resT, c.getLocal(\"c\")));\n    }\n\n\n    function buildPairing() {\n\n        const f = module.addFunction(prefix+ \"_pairing\");\n        f.addParam(\"p\", \"i32\");\n        f.addParam(\"q\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const resT = c.i32_const(module.alloc(ftsize));\n\n        f.addCode(c.call(prefix + \"_prepareG1\", c.getLocal(\"p\"), c.i32_const(pPreP) ));\n        f.addCode(c.call(prefix + \"_prepareG2\", c.getLocal(\"q\"), c.i32_const(pPreQ) ));\n        f.addCode(c.call(prefix + \"_millerLoop\", c.i32_const(pPreP), c.i32_const(pPreQ), resT ));\n        f.addCode(c.call(prefix + \"_finalExponentiation\", resT, c.getLocal(\"r\") ));\n    }\n\n\n    function buildInGroupG2() {\n        const f = module.addFunction(g2mPrefix+ \"_inGroupAffine\");\n        f.addParam(\"p\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const WINV = [\n            2001204777610833696708894912867952078278441409969503942666029068062015825245418932221343814564507832018947136279894n,\n            2001204777610833696708894912867952078278441409969503942666029068062015825245418932221343814564507832018947136279893n\n        ];\n\n        const FROB2X = 4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436n;\n        const FROB3Y = [\n            2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530n,\n            2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530n\n        ];\n\n        const wInv = c.i32_const(module.alloc([\n            ...utils$1.bigInt2BytesLE(toMontgomery(WINV[0]), n8q),\n            ...utils$1.bigInt2BytesLE(toMontgomery(WINV[1]), n8q),\n        ]));\n\n        const frob2X = c.i32_const(module.alloc(utils$1.bigInt2BytesLE(toMontgomery(FROB2X), n8q)));\n        const frob3Y = c.i32_const(module.alloc([\n            ...utils$1.bigInt2BytesLE(toMontgomery(FROB3Y[0]), n8q),\n            ...utils$1.bigInt2BytesLE(toMontgomery(FROB3Y[1]), n8q),\n        ]));\n\n        const z = c.i32_const(module.alloc(utils$1.bigInt2BytesLE(finalExpZ, 8)));\n\n        const px = c.getLocal(\"p\");\n        const py = c.i32_add(c.getLocal(\"p\"), c.i32_const(f2size));\n\n        const aux = c.i32_const(module.alloc(f1size));\n\n        const x_winv = c.i32_const(module.alloc(f2size));\n        const y_winv = c.i32_const(module.alloc(f2size));\n        const pf2 = module.alloc(f2size*2);\n        const f2 = c.i32_const(pf2);\n        const f2x = c.i32_const(pf2);\n        const f2x_c1 = c.i32_const(pf2);\n        const f2x_c2 = c.i32_const(pf2+f1size);\n        const f2y = c.i32_const(pf2+f2size);\n        const f2y_c1 = c.i32_const(pf2+f2size);\n        const f2y_c2 = c.i32_const(pf2+f2size+f1size);\n        const pf3 = module.alloc(f2size*3);\n        const f3 = c.i32_const(pf3);\n        const f3x = c.i32_const(pf3);\n        const f3x_c1 = c.i32_const(pf3);\n        const f3x_c2 = c.i32_const(pf3+f1size);\n        const f3y = c.i32_const(pf3+f2size);\n        const f3y_c1 = c.i32_const(pf3+f2size);\n        const f3y_c2 = c.i32_const(pf3+f2size+f1size);\n        const f3z = c.i32_const(pf3+f2size*2);\n\n\n        f.addCode(\n            c.if(\n                c.call(g2mPrefix + \"_isZeroAffine\", c.getLocal(\"p\")),\n                c.ret( c.i32_const(1)),\n            ),\n            c.if(\n                c.i32_eqz(c.call(g2mPrefix + \"_inCurveAffine\", c.getLocal(\"p\"))),\n                c.ret( c.i32_const(0)),\n            ),\n            c.call(f2mPrefix + \"_mul\", px, wInv, x_winv),\n            c.call(f2mPrefix + \"_mul\", py, wInv, y_winv),\n\n            c.call(f2mPrefix + \"_mul1\", x_winv, frob2X, f2x),\n            c.call(f2mPrefix + \"_neg\", y_winv, f2y),\n\n            c.call(f2mPrefix + \"_neg\", x_winv, f3x),\n            c.call(f2mPrefix + \"_mul\", y_winv, frob3Y, f3y),\n\n            c.call(f1mPrefix + \"_sub\", f2x_c1, f2x_c2, aux),\n            c.call(f1mPrefix + \"_add\", f2x_c1, f2x_c2, f2x_c2),\n            c.call(f1mPrefix + \"_copy\", aux, f2x_c1),\n\n            c.call(f1mPrefix + \"_sub\", f2y_c1, f2y_c2, aux),\n            c.call(f1mPrefix + \"_add\", f2y_c1, f2y_c2, f2y_c2),\n            c.call(f1mPrefix + \"_copy\", aux, f2y_c1),\n\n            c.call(f1mPrefix + \"_add\", f3x_c1, f3x_c2, aux),\n            c.call(f1mPrefix + \"_sub\", f3x_c1, f3x_c2, f3x_c2),\n            c.call(f1mPrefix + \"_copy\", aux, f3x_c1),\n\n            c.call(f1mPrefix + \"_sub\", f3y_c2, f3y_c1, aux),\n            c.call(f1mPrefix + \"_add\", f3y_c1, f3y_c2, f3y_c2),\n            c.call(f1mPrefix + \"_copy\", aux, f3y_c1),\n\n            c.call(f2mPrefix + \"_one\", f3z),\n\n            c.call(g2mPrefix + \"_timesScalar\", f3, z, c.i32_const(8), f3),\n            c.call(g2mPrefix + \"_addMixed\", f3, f2, f3),\n\n            c.ret(\n                c.call(g2mPrefix + \"_eqMixed\", f3, c.getLocal(\"p\"))\n            )\n        );\n\n        const fInGroup = module.addFunction(g2mPrefix + \"_inGroup\");\n        fInGroup.addParam(\"pIn\", \"i32\");\n        fInGroup.setReturnType(\"i32\");\n\n        const c2 = fInGroup.getCodeBuilder();\n\n        const aux2 = c2.i32_const(module.alloc(f2size*2));\n\n        fInGroup.addCode(\n            c2.call(g2mPrefix + \"_toAffine\", c2.getLocal(\"pIn\"), aux2),\n\n            c2.ret(\n                c2.call(g2mPrefix + \"_inGroupAffine\", aux2),\n            )\n        );\n\n    }\n\n    function buildInGroupG1() {\n        const f = module.addFunction(g1mPrefix+ \"_inGroupAffine\");\n        f.addParam(\"p\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const BETA = 4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436n;\n        const BETA2 = 793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350n;\n        const Z2M1D3 = (finalExpZ * finalExpZ - 1n) / 3n;\n\n        const beta = c.i32_const(module.alloc(utils$1.bigInt2BytesLE(toMontgomery(BETA), n8q)));\n        const beta2 = c.i32_const(module.alloc(utils$1.bigInt2BytesLE(toMontgomery(BETA2), n8q)));\n\n        const z2m1d3 = c.i32_const(module.alloc(utils$1.bigInt2BytesLE(Z2M1D3, 16)));\n\n\n        const px = c.getLocal(\"p\");\n        const py = c.i32_add(c.getLocal(\"p\"), c.i32_const(f1size));\n\n        const psp = module.alloc(f1size*3);\n        const sp = c.i32_const(psp);\n        const spx = c.i32_const(psp);\n        const spy = c.i32_const(psp+f1size);\n\n        const ps2p = module.alloc(f1size*2);\n        const s2p = c.i32_const(ps2p);\n        const s2px = c.i32_const(ps2p);\n        const s2py = c.i32_const(ps2p+f1size);\n\n        f.addCode(\n            c.if(\n                c.call(g1mPrefix + \"_isZeroAffine\", c.getLocal(\"p\")),\n                c.ret( c.i32_const(1)),\n            ),\n            c.if(\n                c.i32_eqz(c.call(g1mPrefix + \"_inCurveAffine\", c.getLocal(\"p\"))),\n                c.ret( c.i32_const(0)),\n            ),\n\n            c.call(f1mPrefix + \"_mul\", px, beta, spx),\n            c.call(f1mPrefix + \"_copy\", py, spy),\n\n            c.call(f1mPrefix + \"_mul\", px, beta2, s2px),\n            c.call(f1mPrefix + \"_copy\", py, s2py),\n\n\n            c.call(g1mPrefix + \"_doubleAffine\", sp, sp),\n            c.call(g1mPrefix + \"_subMixed\", sp, c.getLocal(\"p\"), sp),\n            c.call(g1mPrefix + \"_subMixed\", sp, s2p, sp),\n\n            c.call(g1mPrefix + \"_timesScalar\", sp, z2m1d3, c.i32_const(16), sp),\n\n            c.ret(\n                c.call(g1mPrefix + \"_eqMixed\", sp, s2p)\n            )\n\n        );\n\n        const fInGroup = module.addFunction(g1mPrefix + \"_inGroup\");\n        fInGroup.addParam(\"pIn\", \"i32\");\n        fInGroup.setReturnType(\"i32\");\n\n        const c2 = fInGroup.getCodeBuilder();\n\n        const aux2 = c2.i32_const(module.alloc(f1size*2));\n\n        fInGroup.addCode(\n            c2.call(g1mPrefix + \"_toAffine\", c2.getLocal(\"pIn\"), aux2),\n\n            c2.ret(\n                c2.call(g1mPrefix + \"_inGroupAffine\", aux2),\n            )\n        );\n    }\n\n    for (let i=0; i<10; i++) {\n        buildFrobeniusMap(i);\n        module.exportFunction(ftmPrefix + \"_frobeniusMap\"+i);\n    }\n\n\n    buildInGroupG1();\n    buildInGroupG2();\n\n    buildPrepAddStep();\n    buildPrepDoubleStep();\n\n    buildPrepareG1();\n    buildPrepareG2();\n\n    buildMillerLoop();\n\n    buildFinalExponentiationOld();\n    buildFinalExponentiation();\n\n    for (let i=1; i<=5; i++) {\n        buildPairingEquation(i);\n        module.exportFunction(prefix + \"_pairingEq\"+i);\n    }\n\n    buildPairing();\n\n    module.exportFunction(prefix + \"_pairing\");\n\n\n    module.exportFunction(prefix + \"_prepareG1\");\n    module.exportFunction(prefix + \"_prepareG2\");\n    module.exportFunction(prefix + \"_millerLoop\");\n    module.exportFunction(prefix + \"_finalExponentiation\");\n    module.exportFunction(prefix + \"_finalExponentiationOld\");\n    module.exportFunction(prefix + \"__cyclotomicSquare\");\n    module.exportFunction(prefix + \"__cyclotomicExp_w0\");\n\n    module.exportFunction(f6mPrefix + \"_mul1\");\n    module.exportFunction(f6mPrefix + \"_mul01\");\n    module.exportFunction(ftmPrefix + \"_mul014\");\n\n    module.exportFunction(g1mPrefix + \"_inGroupAffine\");\n    module.exportFunction(g1mPrefix + \"_inGroup\");\n    module.exportFunction(g2mPrefix + \"_inGroupAffine\");\n    module.exportFunction(g2mPrefix + \"_inGroup\");\n\n    // console.log(module.functionIdxByName);\n};\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// module.exports.bn128_wasm = require(\"./build/bn128_wasm.js\");\n// module.exports.bls12381_wasm = require(\"./build/bls12381_wasm.js\");\n// module.exports.mnt6753_wasm = require(\"./build/mnt6753_wasm.js\");\n\nvar buildBn128$1 = build_bn128;\nvar buildBls12381$1 = build_bls12381;\n\n/* global BigInt */\n\nfunction stringifyBigInts(o) {\n    if (typeof o == \"bigint\" || o.eq !== undefined) {\n        return o.toString(10);\n    } else if (o instanceof Uint8Array) {\n        return fromRprLE(o, 0);\n    } else if (Array.isArray(o)) {\n        return o.map(stringifyBigInts);\n    } else if (typeof o == \"object\") {\n        const res = {};\n        const keys = Object.keys(o);\n        keys.forEach((k) => {\n            res[k] = stringifyBigInts(o[k]);\n        });\n        return res;\n    } else {\n        return o;\n    }\n}\n\nfunction unstringifyBigInts(o) {\n    if (typeof o == \"string\" && /^[0-9]+$/.test(o)) {\n        return BigInt(o);\n    } else if (typeof o == \"string\" && /^0x[0-9a-fA-F]+$/.test(o)) {\n        return BigInt(o);\n    } else if (Array.isArray(o)) {\n        return o.map(unstringifyBigInts);\n    } else if (typeof o == \"object\") {\n        if (o === null) return null;\n        const res = {};\n        const keys = Object.keys(o);\n        keys.forEach((k) => {\n            res[k] = unstringifyBigInts(o[k]);\n        });\n        return res;\n    } else {\n        return o;\n    }\n}\n\nfunction beBuff2int(buff) {\n    let res = BigInt(0);\n    let i = buff.length;\n    let offset = 0;\n    const buffV = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);\n    while (i > 0) {\n        if (i >= 4) {\n            i -= 4;\n            res += BigInt(buffV.getUint32(i)) << BigInt(offset * 8);\n            offset += 4;\n        } else if (i >= 2) {\n            i -= 2;\n            res += BigInt(buffV.getUint16(i)) << BigInt(offset * 8);\n            offset += 2;\n        } else {\n            i -= 1;\n            res += BigInt(buffV.getUint8(i)) << BigInt(offset * 8);\n            offset += 1;\n        }\n    }\n    return res;\n}\n\nfunction beInt2Buff(n, len) {\n    let r = n;\n    const buff = new Uint8Array(len);\n    const buffV = new DataView(buff.buffer);\n    let o = len;\n    while (o > 0) {\n        if (o - 4 >= 0) {\n            o -= 4;\n            buffV.setUint32(o, Number(r & BigInt(0xffffffff)));\n            r = r >> BigInt(32);\n        } else if (o - 2 >= 0) {\n            o -= 2;\n            buffV.setUint16(o, Number(r & BigInt(0xffff)));\n            r = r >> BigInt(16);\n        } else {\n            o -= 1;\n            buffV.setUint8(o, Number(r & BigInt(0xff)));\n            r = r >> BigInt(8);\n        }\n    }\n    if (r) {\n        throw new Error(\"Number does not fit in this length\");\n    }\n    return buff;\n}\n\nfunction leBuff2int(buff) {\n    let res = BigInt(0);\n    let i = 0;\n    const buffV = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);\n    while (i < buff.length) {\n        if (i + 4 <= buff.length) {\n            res += BigInt(buffV.getUint32(i, true)) << BigInt(i * 8);\n            i += 4;\n        } else if (i + 2 <= buff.length) {\n            res += BigInt(buffV.getUint16(i, true)) << BigInt(i * 8);\n            i += 2;\n        } else {\n            res += BigInt(buffV.getUint8(i, true)) << BigInt(i * 8);\n            i += 1;\n        }\n    }\n    return res;\n}\n\nfunction leInt2Buff(n, len) {\n    let r = n;\n    if (typeof len === \"undefined\") {\n        len = Math.floor((bitLength$6(n) - 1) / 8) + 1;\n        if (len == 0) len = 1;\n    }\n    const buff = new Uint8Array(len);\n    const buffV = new DataView(buff.buffer);\n    let o = 0;\n    while (o < len) {\n        if (o + 4 <= len) {\n            buffV.setUint32(o, Number(r & BigInt(0xffffffff)), true);\n            o += 4;\n            r = r >> BigInt(32);\n        } else if (o + 2 <= len) {\n            buffV.setUint16(o, Number(r & BigInt(0xffff)), true);\n            o += 2;\n            r = r >> BigInt(16);\n        } else {\n            buffV.setUint8(o, Number(r & BigInt(0xff)), true);\n            o += 1;\n            r = r >> BigInt(8);\n        }\n    }\n    if (r) {\n        throw new Error(\"Number does not fit in this length\");\n    }\n    return buff;\n}\n\nfunction stringifyFElements(F, o) {\n    if (typeof o == \"bigint\" || o.eq !== undefined) {\n        return o.toString(10);\n    } else if (o instanceof Uint8Array) {\n        return F.toString(F.e(o));\n    } else if (Array.isArray(o)) {\n        return o.map(stringifyFElements.bind(this, F));\n    } else if (typeof o == \"object\") {\n        const res = {};\n        const keys = Object.keys(o);\n        keys.forEach((k) => {\n            res[k] = stringifyFElements(F, o[k]);\n        });\n        return res;\n    } else {\n        return o;\n    }\n}\n\nfunction unstringifyFElements(F, o) {\n    if (typeof o == \"string\" && /^[0-9]+$/.test(o)) {\n        return F.e(o);\n    } else if (typeof o == \"string\" && /^0x[0-9a-fA-F]+$/.test(o)) {\n        return F.e(o);\n    } else if (Array.isArray(o)) {\n        return o.map(unstringifyFElements.bind(this, F));\n    } else if (typeof o == \"object\") {\n        if (o === null) return null;\n        const res = {};\n        const keys = Object.keys(o);\n        keys.forEach((k) => {\n            res[k] = unstringifyFElements(F, o[k]);\n        });\n        return res;\n    } else {\n        return o;\n    }\n}\n\nconst _revTable = [];\nfor (let i = 0; i < 256; i++) {\n    _revTable[i] = _revSlow(i, 8);\n}\n\nfunction _revSlow(idx, bits) {\n    let res = 0;\n    let a = idx;\n    for (let i = 0; i < bits; i++) {\n        res <<= 1;\n        res = res | (a & 1);\n        a >>= 1;\n    }\n    return res;\n}\n\nfunction bitReverse(idx, bits) {\n    return (\n        (_revTable[idx >>> 24] |\n        (_revTable[(idx >>> 16) & 0xff] << 8) |\n        (_revTable[(idx >>> 8) & 0xff] << 16) |\n        (_revTable[idx & 0xff] << 24)) >>>\n        (32 - bits)\n    );\n}\n\nfunction log2(V) {\n    return (\n        ((V & 0xffff0000) !== 0 ? ((V &= 0xffff0000), 16) : 0) |\n        ((V & 0xff00ff00) !== 0 ? ((V &= 0xff00ff00), 8) : 0) |\n        ((V & 0xf0f0f0f0) !== 0 ? ((V &= 0xf0f0f0f0), 4) : 0) |\n        ((V & 0xcccccccc) !== 0 ? ((V &= 0xcccccccc), 2) : 0) |\n        ((V & 0xaaaaaaaa) !== 0)\n    );\n}\n\nfunction buffReverseBits(buff, eSize) {\n    const n = buff.byteLength / eSize;\n    const bits = log2(n);\n    if (n != 1 << bits) {\n        throw new Error(\"Invalid number of pointers\");\n    }\n    for (let i = 0; i < n; i++) {\n        const r = bitReverse(i, bits);\n        if (i > r) {\n            const tmp = buff.slice(i * eSize, (i + 1) * eSize);\n            buff.set(buff.slice(r * eSize, (r + 1) * eSize), i * eSize);\n            buff.set(tmp, r * eSize);\n        }\n    }\n}\n\nfunction array2buffer(arr, sG) {\n    const buff = new Uint8Array(sG * arr.length);\n\n    for (let i = 0; i < arr.length; i++) {\n        buff.set(arr[i], i * sG);\n    }\n\n    return buff;\n}\n\nfunction buffer2array(buff, sG) {\n    const n = buff.byteLength / sG;\n    const arr = new Array(n);\n    for (let i = 0; i < n; i++) {\n        arr[i] = buff.slice(i * sG, i * sG + sG);\n    }\n    return arr;\n}\n\nvar _utils = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    array2buffer: array2buffer,\n    beBuff2int: beBuff2int,\n    beInt2Buff: beInt2Buff,\n    bitReverse: bitReverse,\n    buffReverseBits: buffReverseBits,\n    buffer2array: buffer2array,\n    leBuff2int: leBuff2int,\n    leInt2Buff: leInt2Buff,\n    log2: log2,\n    stringifyBigInts: stringifyBigInts,\n    stringifyFElements: stringifyFElements,\n    unstringifyBigInts: unstringifyBigInts,\n    unstringifyFElements: unstringifyFElements\n});\n\nconst PAGE_SIZE = 1<<30;\n\nclass BigBuffer {\n\n    constructor(size) {\n        this.buffers = [];\n        this.byteLength = size;\n        for (let i=0; i<size; i+= PAGE_SIZE) {\n            const n = Math.min(size-i, PAGE_SIZE);\n            this.buffers.push(new Uint8Array(n));\n        }\n\n    }\n\n    slice(fr, to) {\n        if ( to === undefined ) to = this.byteLength;\n        if ( fr === undefined ) fr = 0;\n        const len = to-fr;\n\n        const firstPage = Math.floor(fr / PAGE_SIZE);\n        const lastPage = Math.floor((fr+len-1) / PAGE_SIZE);\n\n        if ((firstPage == lastPage)||(len==0))\n            return this.buffers[firstPage].slice(fr%PAGE_SIZE, fr%PAGE_SIZE + len);\n\n        let buff;\n\n        let p = firstPage;\n        let o = fr % PAGE_SIZE;\n        // Remaining bytes to read\n        let r = len;\n        while (r>0) {\n            // bytes to copy from this page\n            const l = (o+r > PAGE_SIZE) ? (PAGE_SIZE -o) : r;\n            const srcView = new Uint8Array(this.buffers[p].buffer, this.buffers[p].byteOffset+o, l);\n            if (l == len) return srcView.slice();\n            if (!buff) {\n                if (len <= PAGE_SIZE) {\n                    buff = new Uint8Array(len);\n                } else {\n                    buff = new BigBuffer(len);\n                }\n            }\n            buff.set(srcView, len-r);\n            r = r-l;\n            p ++;\n            o = 0;\n        }\n\n        return buff;\n    }\n\n    set(buff, offset) {\n        if (offset === undefined) offset = 0;\n\n        const len = buff.byteLength;\n\n        if (len==0) return;\n\n        const firstPage = Math.floor(offset / PAGE_SIZE);\n        const lastPage = Math.floor((offset+len-1) / PAGE_SIZE);\n\n        if (firstPage == lastPage) {\n            if ((buff instanceof BigBuffer)&&(buff.buffers.length==1)) {\n                return this.buffers[firstPage].set(buff.buffers[0], offset % PAGE_SIZE);\n            } else {\n                return this.buffers[firstPage].set(buff, offset % PAGE_SIZE);\n            }\n\n        }\n\n\n        let p = firstPage;\n        let o = offset % PAGE_SIZE;\n        let r = len;\n        while (r>0) {\n            const l = (o+r > PAGE_SIZE) ? (PAGE_SIZE -o) : r;\n            const srcView = buff.slice( len -r, len -r+l);\n            const dstView = new Uint8Array(this.buffers[p].buffer, this.buffers[p].byteOffset + o, l);\n            dstView.set(srcView);\n            r = r-l;\n            p ++;\n            o = 0;\n        }\n\n    }\n}\n\nfunction buildBatchConvert(tm, fnName, sIn, sOut) {\n    return async function batchConvert(buffIn) {\n        const nPoints = Math.floor(buffIn.byteLength / sIn);\n        if ( nPoints * sIn !== buffIn.byteLength) {\n            throw new Error(\"Invalid buffer size\");\n        }\n        const pointsPerChunk = Math.floor(nPoints/tm.concurrency);\n        const opPromises = [];\n        for (let i=0; i<tm.concurrency; i++) {\n            let n;\n            if (i< tm.concurrency-1) {\n                n = pointsPerChunk;\n            } else {\n                n = nPoints - i*pointsPerChunk;\n            }\n            if (n==0) continue;\n\n            const buffChunk = buffIn.slice(i*pointsPerChunk*sIn, i*pointsPerChunk*sIn + n*sIn);\n            const task = [\n                {cmd: \"ALLOCSET\", var: 0, buff:buffChunk},\n                {cmd: \"ALLOC\", var: 1, len:sOut * n},\n                {cmd: \"CALL\", fnName: fnName, params: [\n                    {var: 0},\n                    {val: n},\n                    {var: 1}\n                ]},\n                {cmd: \"GET\", out: 0, var: 1, len:sOut * n},\n            ];\n            opPromises.push(\n                tm.queueAction(task)\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut;\n        if (buffIn instanceof BigBuffer) {\n            fullBuffOut = new BigBuffer(nPoints*sOut);\n        } else {\n            fullBuffOut = new Uint8Array(nPoints*sOut);\n        }\n\n        let p =0;\n        for (let i=0; i<result.length; i++) {\n            fullBuffOut.set(result[i][0], p);\n            p+=result[i][0].byteLength;\n        }\n\n        return fullBuffOut;\n    };\n}\n\nclass WasmField1 {\n\n    constructor(tm, prefix, n8, p) {\n        this.tm = tm;\n        this.prefix = prefix;\n\n        this.p = p;\n        this.n8 = n8;\n        this.type = \"F1\";\n        this.m = 1;\n\n        this.half = shiftRight(p, one);\n        this.bitLength = bitLength$6(p);\n        this.mask = sub(shiftLeft(one, this.bitLength), one);\n\n        this.pOp1 = tm.alloc(n8);\n        this.pOp2 = tm.alloc(n8);\n        this.pOp3 = tm.alloc(n8);\n        this.tm.instance.exports[prefix + \"_zero\"](this.pOp1);\n        this.zero = this.tm.getBuff(this.pOp1, this.n8);\n        this.tm.instance.exports[prefix + \"_one\"](this.pOp1);\n        this.one = this.tm.getBuff(this.pOp1, this.n8);\n\n        this.negone = this.neg(this.one);\n        this.two = this.add(this.one, this.one);\n\n        this.n64 = Math.floor(n8/8);\n        this.n32 = Math.floor(n8/4);\n\n        if(this.n64*8 != this.n8) {\n            throw new Error(\"n8 must be a multiple of 8\");\n        }\n\n        this.half = shiftRight(this.p, one);\n        this.nqr = this.two;\n        let r = this.exp(this.nqr, this.half);\n        while (!this.eq(r, this.negone)) {\n            this.nqr = this.add(this.nqr, this.one);\n            r = this.exp(this.nqr, this.half);\n        }\n\n        this.shift = this.mul(this.nqr, this.nqr);\n        this.shiftInv = this.inv(this.shift);\n\n        this.s = 0;\n        let t = sub(this.p, one);\n\n        while ( !isOdd$5(t) ) {\n            this.s = this.s + 1;\n            t = shiftRight(t, one);\n        }\n\n        this.w = [];\n        this.w[this.s] = this.exp(this.nqr, t);\n\n        for (let i= this.s-1; i>=0; i--) {\n            this.w[i] = this.square(this.w[i+1]);\n        }\n\n        if (!this.eq(this.w[0], this.one)) {\n            throw new Error(\"Error calculating roots of unity\");\n        }\n\n        this.batchToMontgomery = buildBatchConvert(tm, prefix + \"_batchToMontgomery\", this.n8, this.n8);\n        this.batchFromMontgomery = buildBatchConvert(tm, prefix + \"_batchFromMontgomery\", this.n8, this.n8);\n    }\n\n\n    op2(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op2Bool(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2);\n    }\n\n    op1(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op1Bool(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n    }\n\n    add(a,b) {\n        return this.op2(\"_add\", a, b);\n    }\n\n\n    eq(a,b) {\n        return this.op2Bool(\"_eq\", a, b);\n    }\n\n    isZero(a) {\n        return this.op1Bool(\"_isZero\", a);\n    }\n\n    sub(a,b) {\n        return this.op2(\"_sub\", a, b);\n    }\n\n    neg(a) {\n        return this.op1(\"_neg\", a);\n    }\n\n    inv(a) {\n        return this.op1(\"_inverse\", a);\n    }\n\n    toMontgomery(a) {\n        return this.op1(\"_toMontgomery\", a);\n    }\n\n    fromMontgomery(a) {\n        return this.op1(\"_fromMontgomery\", a);\n    }\n\n    mul(a,b) {\n        return this.op2(\"_mul\", a, b);\n    }\n\n    div(a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_inverse\"](this.pOp2, this.pOp2);\n        this.tm.instance.exports[this.prefix + \"_mul\"](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    square(a) {\n        return this.op1(\"_square\", a);\n    }\n\n    isSquare(a) {\n        return this.op1Bool(\"_isSquare\", a);\n    }\n\n    sqrt(a) {\n        return this.op1(\"_sqrt\", a);\n    }\n\n    exp(a, b) {\n        if (!(b instanceof Uint8Array)) {\n            b = toLEBuff(e(b));\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_exp\"](this.pOp1, this.pOp2, b.byteLength, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    isNegative(a) {\n        return this.op1Bool(\"_isNegative\", a);\n    }\n\n    e(a, b) {\n        if (a instanceof Uint8Array) return a;\n        let ra = e(a, b);\n        if (isNegative$4(ra)) {\n            ra = neg(ra);\n            if (gt(ra, this.p)) {\n                ra = mod(ra, this.p);\n            }\n            ra = sub(this.p, ra);\n        } else {\n            if (gt(ra, this.p)) {\n                ra = mod(ra, this.p);\n            }\n        }\n        const buff = leInt2Buff(ra, this.n8);\n        return this.toMontgomery(buff);\n    }\n\n    toString(a, radix) {\n        const an = this.fromMontgomery(a);\n        const s = fromRprLE(an, 0);\n        return toString(s, radix);\n    }\n\n    fromRng(rng) {\n        let v;\n        const buff = new Uint8Array(this.n8);\n        do {\n            v = zero;\n            for (let i=0; i<this.n64; i++) {\n                v = add(v,  shiftLeft(rng.nextU64(), 64*i));\n            }\n            v = band(v, this.mask);\n        } while (geq(v, this.p));\n        toRprLE(buff, 0, v, this.n8);\n        return buff;\n    }\n\n    random() {\n        return this.fromRng(getThreadRng());\n    }\n\n    toObject(a) {\n        const an = this.fromMontgomery(a);\n        return fromRprLE(an, 0);\n    }\n\n    fromObject(a) {\n        const buff = new Uint8Array(this.n8);\n        toRprLE(buff, 0, a, this.n8);\n        return this.toMontgomery(buff);\n    }\n\n    toRprLE(buff, offset, a) {\n        buff.set(this.fromMontgomery(a), offset);\n    }\n\n    toRprBE(buff, offset, a) {\n        const buff2 = this.fromMontgomery(a);\n        for (let i=0; i<this.n8/2; i++) {\n            const aux = buff2[i];\n            buff2[i] = buff2[this.n8-1-i];\n            buff2[this.n8-1-i] = aux;\n        }\n        buff.set(buff2, offset);\n    }\n\n    fromRprLE(buff, offset) {\n        offset = offset || 0;\n        const res = buff.slice(offset, offset + this.n8);\n        return this.toMontgomery(res);\n    }\n\n    async batchInverse(buffIn) {\n        let returnArray = false;\n        const sIn = this.n8;\n        const sOut = this.n8;\n\n        if (Array.isArray(buffIn)) {\n            buffIn = array2buffer(buffIn, sIn );\n            returnArray = true;\n        } else {\n            buffIn = buffIn.slice(0, buffIn.byteLength);\n        }\n\n        const nPoints = Math.floor(buffIn.byteLength / sIn);\n        if ( nPoints * sIn !== buffIn.byteLength) {\n            throw new Error(\"Invalid buffer size\");\n        }\n        const pointsPerChunk = Math.floor(nPoints/this.tm.concurrency);\n        const opPromises = [];\n        for (let i=0; i<this.tm.concurrency; i++) {\n            let n;\n            if (i< this.tm.concurrency-1) {\n                n = pointsPerChunk;\n            } else {\n                n = nPoints - i*pointsPerChunk;\n            }\n            if (n==0) continue;\n\n            const buffChunk = buffIn.slice(i*pointsPerChunk*sIn, i*pointsPerChunk*sIn + n*sIn);\n            const task = [\n                {cmd: \"ALLOCSET\", var: 0, buff:buffChunk},\n                {cmd: \"ALLOC\", var: 1, len:sOut * n},\n                {cmd: \"CALL\", fnName: this.prefix + \"_batchInverse\", params: [\n                    {var: 0},\n                    {val: sIn},\n                    {val: n},\n                    {var: 1},\n                    {val: sOut},\n                ]},\n                {cmd: \"GET\", out: 0, var: 1, len:sOut * n},\n            ];\n            opPromises.push(\n                this.tm.queueAction(task)\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut;\n        if (buffIn instanceof BigBuffer) {\n            fullBuffOut = new BigBuffer(nPoints*sOut);\n        } else {\n            fullBuffOut = new Uint8Array(nPoints*sOut);\n        }\n\n        let p =0;\n        for (let i=0; i<result.length; i++) {\n            fullBuffOut.set(result[i][0], p);\n            p+=result[i][0].byteLength;\n        }\n\n        if (returnArray) {\n            return buffer2array(fullBuffOut, sOut);\n        } else {\n            return fullBuffOut;\n        }\n\n    }\n\n}\n\nclass WasmField2 {\n\n    constructor(tm, prefix, F) {\n        this.tm = tm;\n        this.prefix = prefix;\n\n        this.F = F;\n        this.type = \"F2\";\n        this.m = F.m * 2;\n        this.n8 = this.F.n8*2;\n        this.n32 = this.F.n32*2;\n        this.n64 = this.F.n64*2;\n\n        this.pOp1 = tm.alloc(F.n8*2);\n        this.pOp2 = tm.alloc(F.n8*2);\n        this.pOp3 = tm.alloc(F.n8*2);\n        this.tm.instance.exports[prefix + \"_zero\"](this.pOp1);\n        this.zero = tm.getBuff(this.pOp1, this.n8);\n        this.tm.instance.exports[prefix + \"_one\"](this.pOp1);\n        this.one = tm.getBuff(this.pOp1, this.n8);\n\n        this.negone = this.neg(this.one);\n        this.two = this.add(this.one, this.one);\n\n    }\n\n    op2(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op2Bool(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2);\n    }\n\n    op1(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op1Bool(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n    }\n\n    add(a,b) {\n        return this.op2(\"_add\", a, b);\n    }\n\n    eq(a,b) {\n        return this.op2Bool(\"_eq\", a, b);\n    }\n\n    isZero(a) {\n        return this.op1Bool(\"_isZero\", a);\n    }\n\n    sub(a,b) {\n        return this.op2(\"_sub\", a, b);\n    }\n\n    neg(a) {\n        return this.op1(\"_neg\", a);\n    }\n\n    inv(a) {\n        return this.op1(\"_inverse\", a);\n    }\n\n    isNegative(a) {\n        return this.op1Bool(\"_isNegative\", a);\n    }\n\n    toMontgomery(a) {\n        return this.op1(\"_toMontgomery\", a);\n    }\n\n    fromMontgomery(a) {\n        return this.op1(\"_fromMontgomery\", a);\n    }\n\n    mul(a,b) {\n        return this.op2(\"_mul\", a, b);\n    }\n\n    mul1(a,b) {\n        return this.op2(\"_mul1\", a, b);\n    }\n\n    div(a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_inverse\"](this.pOp2, this.pOp2);\n        this.tm.instance.exports[this.prefix + \"_mul\"](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    square(a) {\n        return this.op1(\"_square\", a);\n    }\n\n    isSquare(a) {\n        return this.op1Bool(\"_isSquare\", a);\n    }\n\n    sqrt(a) {\n        return this.op1(\"_sqrt\", a);\n    }\n\n    exp(a, b) {\n        if (!(b instanceof Uint8Array)) {\n            b = toLEBuff(e(b));\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_exp\"](this.pOp1, this.pOp2, b.byteLength, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    e(a, b) {\n        if (a instanceof Uint8Array) return a;\n        if ((Array.isArray(a)) && (a.length == 2)) {\n            const c1 = this.F.e(a[0], b);\n            const c2 = this.F.e(a[1], b);\n            const res = new Uint8Array(this.F.n8*2);\n            res.set(c1);\n            res.set(c2, this.F.n8*2);\n            return res;\n        } else {\n            throw new Error(\"invalid F2\");\n        }\n    }\n\n    toString(a, radix) {\n        const s1 = this.F.toString(a.slice(0, this.F.n8), radix);\n        const s2 = this.F.toString(a.slice(this.F.n8), radix);\n        return `[${s1}, ${s2}]`;\n    }\n\n    fromRng(rng) {\n        const c1 = this.F.fromRng(rng);\n        const c2 = this.F.fromRng(rng);\n        const res = new Uint8Array(this.F.n8*2);\n        res.set(c1);\n        res.set(c2, this.F.n8);\n        return res;\n    }\n\n    random() {\n        return this.fromRng(getThreadRng());\n    }\n\n    toObject(a) {\n        const c1 = this.F.toObject(a.slice(0, this.F.n8));\n        const c2 = this.F.toObject(a.slice(this.F.n8, this.F.n8*2));\n        return [c1, c2];\n    }\n\n    fromObject(a) {\n        const buff = new Uint8Array(this.F.n8*2);\n        const b1 = this.F.fromObject(a[0]);\n        const b2 = this.F.fromObject(a[1]);\n        buff.set(b1);\n        buff.set(b2, this.F.n8);\n        return buff;\n    }\n\n    c1(a) {\n        return a.slice(0, this.F.n8);\n    }\n\n    c2(a) {\n        return a.slice(this.F.n8);\n    }\n\n}\n\nclass WasmField3 {\n\n    constructor(tm, prefix, F) {\n        this.tm = tm;\n        this.prefix = prefix;\n\n        this.F = F;\n        this.type = \"F3\";\n        this.m = F.m * 3;\n        this.n8 = this.F.n8*3;\n        this.n32 = this.F.n32*3;\n        this.n64 = this.F.n64*3;\n\n        this.pOp1 = tm.alloc(F.n8*3);\n        this.pOp2 = tm.alloc(F.n8*3);\n        this.pOp3 = tm.alloc(F.n8*3);\n        this.tm.instance.exports[prefix + \"_zero\"](this.pOp1);\n        this.zero = tm.getBuff(this.pOp1, this.n8);\n        this.tm.instance.exports[prefix + \"_one\"](this.pOp1);\n        this.one = tm.getBuff(this.pOp1, this.n8);\n\n        this.negone = this.neg(this.one);\n        this.two = this.add(this.one, this.one);\n\n    }\n\n    op2(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op2Bool(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2);\n    }\n\n    op1(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op1Bool(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n    }\n\n\n    eq(a,b) {\n        return this.op2Bool(\"_eq\", a, b);\n    }\n\n    isZero(a) {\n        return this.op1Bool(\"_isZero\", a);\n    }\n\n    add(a,b) {\n        return this.op2(\"_add\", a, b);\n    }\n\n    sub(a,b) {\n        return this.op2(\"_sub\", a, b);\n    }\n\n    neg(a) {\n        return this.op1(\"_neg\", a);\n    }\n\n    inv(a) {\n        return this.op1(\"_inverse\", a);\n    }\n\n    isNegative(a) {\n        return this.op1Bool(\"_isNegative\", a);\n    }\n\n    toMontgomery(a) {\n        return this.op1(\"_toMontgomery\", a);\n    }\n\n    fromMontgomery(a) {\n        return this.op1(\"_fromMontgomery\", a);\n    }\n\n    mul(a,b) {\n        return this.op2(\"_mul\", a, b);\n    }\n\n    div(a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_inverse\"](this.pOp2, this.pOp2);\n        this.tm.instance.exports[this.prefix + \"_mul\"](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    square(a) {\n        return this.op1(\"_square\", a);\n    }\n\n    isSquare(a) {\n        return this.op1Bool(\"_isSquare\", a);\n    }\n\n    sqrt(a) {\n        return this.op1(\"_sqrt\", a);\n    }\n\n    exp(a, b) {\n        if (!(b instanceof Uint8Array)) {\n            b = toLEBuff(e(b));\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_exp\"](this.pOp1, this.pOp2, b.byteLength, this.pOp3);\n        return this.getBuff(this.pOp3, this.n8);\n    }\n\n    e(a, b) {\n        if (a instanceof Uint8Array) return a;\n        if ((Array.isArray(a)) && (a.length == 3)) {\n            const c1 = this.F.e(a[0], b);\n            const c2 = this.F.e(a[1], b);\n            const c3 = this.F.e(a[2], b);\n            const res = new Uint8Array(this.F.n8*3);\n            res.set(c1);\n            res.set(c2, this.F.n8);\n            res.set(c3, this.F.n8*2);\n            return res;\n        } else {\n            throw new Error(\"invalid F3\");\n        }\n    }\n\n    toString(a, radix) {\n        const s1 = this.F.toString(a.slice(0, this.F.n8), radix);\n        const s2 = this.F.toString(a.slice(this.F.n8, this.F.n8*2), radix);\n        const s3 = this.F.toString(a.slice(this.F.n8*2), radix);\n        return `[${s1}, ${s2}, ${s3}]`;\n    }\n\n    fromRng(rng) {\n        const c1 = this.F.fromRng(rng);\n        const c2 = this.F.fromRng(rng);\n        const c3 = this.F.fromRng(rng);\n        const res = new Uint8Array(this.F.n8*3);\n        res.set(c1);\n        res.set(c2, this.F.n8);\n        res.set(c3, this.F.n8*2);\n        return res;\n    }\n\n    random() {\n        return this.fromRng(getThreadRng());\n    }\n\n    toObject(a) {\n        const c1 = this.F.toObject(a.slice(0, this.F.n8));\n        const c2 = this.F.toObject(a.slice(this.F.n8, this.F.n8*2));\n        const c3 = this.F.toObject(a.slice(this.F.n8*2, this.F.n8*3));\n        return [c1, c2, c3];\n    }\n\n    fromObject(a) {\n        const buff = new Uint8Array(this.F.n8*3);\n        const b1 = this.F.fromObject(a[0]);\n        const b2 = this.F.fromObject(a[1]);\n        const b3 = this.F.fromObject(a[2]);\n        buff.set(b1);\n        buff.set(b2, this.F.n8);\n        buff.set(b3, this.F.n8*2);\n        return buff;\n    }\n\n    c1(a) {\n        return a.slice(0, this.F.n8);\n    }\n\n    c2(a) {\n        return a.slice(this.F.n8, this.F.n8*2);\n    }\n\n    c3(a) {\n        return a.slice(this.F.n8*2);\n    }\n\n}\n\nclass WasmCurve {\n\n    constructor(tm, prefix, F, pGen, pGb, cofactor) {\n        this.tm = tm;\n        this.prefix = prefix;\n        this.F = F;\n\n        this.pOp1 = tm.alloc(F.n8*3);\n        this.pOp2 = tm.alloc(F.n8*3);\n        this.pOp3 = tm.alloc(F.n8*3);\n        this.tm.instance.exports[prefix + \"_zero\"](this.pOp1);\n        this.zero = this.tm.getBuff(this.pOp1, F.n8*3);\n        this.tm.instance.exports[prefix + \"_zeroAffine\"](this.pOp1);\n        this.zeroAffine = this.tm.getBuff(this.pOp1, F.n8*2);\n        this.one = this.tm.getBuff(pGen, F.n8*3);\n        this.g = this.one;\n        this.oneAffine = this.tm.getBuff(pGen, F.n8*2);\n        this.gAffine = this.oneAffine;\n        this.b = this.tm.getBuff(pGb, F.n8);\n\n        if (cofactor) {\n            this.cofactor = toLEBuff(cofactor);\n        }\n\n        this.negone = this.neg(this.one);\n        this.two = this.add(this.one, this.one);\n\n        this.batchLEMtoC = buildBatchConvert(tm, prefix + \"_batchLEMtoC\", F.n8*2, F.n8);\n        this.batchLEMtoU = buildBatchConvert(tm, prefix + \"_batchLEMtoU\", F.n8*2, F.n8*2);\n        this.batchCtoLEM = buildBatchConvert(tm, prefix + \"_batchCtoLEM\", F.n8, F.n8*2);\n        this.batchUtoLEM = buildBatchConvert(tm, prefix + \"_batchUtoLEM\", F.n8*2, F.n8*2);\n        this.batchToJacobian = buildBatchConvert(tm, prefix + \"_batchToJacobian\", F.n8*2, F.n8*3);\n        this.batchToAffine = buildBatchConvert(tm, prefix + \"_batchToAffine\", F.n8*3, F.n8*2);\n    }\n\n    op2(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*3);\n    }\n\n    op2bool(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n    }\n\n    op1(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*3);\n    }\n\n    op1Affine(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*2);\n    }\n\n    op1Bool(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n    }\n\n    add(a,b) {\n        if (a.byteLength == this.F.n8*3) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2(\"_add\", a, b);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2(\"_addMixed\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else if (a.byteLength == this.F.n8*2) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2(\"_addMixed\", b, a);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2(\"_addAffine\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    sub(a,b) {\n        if (a.byteLength == this.F.n8*3) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2(\"_sub\", a, b);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2(\"_subMixed\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else if (a.byteLength == this.F.n8*2) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2(\"_subMixed\", b, a);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2(\"_subAffine\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    neg(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return this.op1(\"_neg\", a);\n        } else if (a.byteLength == this.F.n8*2) {\n            return this.op1Affine(\"_negAffine\", a);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    double(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return this.op1(\"_double\", a);\n        } else if (a.byteLength == this.F.n8*2) {\n            return this.op1(\"_doubleAffine\", a);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    isZero(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return this.op1Bool(\"_isZero\", a);\n        } else if (a.byteLength == this.F.n8*2) {\n            return this.op1Bool(\"_isZeroAffine\", a);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    timesScalar(a, s) {\n        if (!(s instanceof Uint8Array)) {\n            s = toLEBuff(e(s));\n        }\n        let fnName;\n        if (a.byteLength == this.F.n8*3) {\n            fnName = this.prefix + \"_timesScalar\";\n        } else if (a.byteLength == this.F.n8*2) {\n            fnName = this.prefix + \"_timesScalarAffine\";\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, s);\n        this.tm.instance.exports[fnName](this.pOp1, this.pOp2, s.byteLength, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*3);\n    }\n\n    timesFr(a, s) {\n        let fnName;\n        if (a.byteLength == this.F.n8*3) {\n            fnName = this.prefix + \"_timesFr\";\n        } else if (a.byteLength == this.F.n8*2) {\n            fnName = this.prefix + \"_timesFrAffine\";\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, s);\n        this.tm.instance.exports[fnName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*3);\n    }\n\n    eq(a,b) {\n        if (a.byteLength == this.F.n8*3) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2bool(\"_eq\", a, b);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2bool(\"_eqMixed\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else if (a.byteLength == this.F.n8*2) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2bool(\"_eqMixed\", b, a);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2bool(\"_eqAffine\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    toAffine(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return this.op1Affine(\"_toAffine\", a);\n        } else if (a.byteLength == this.F.n8*2) {\n            return a;\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    toJacobian(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return a;\n        } else if (a.byteLength == this.F.n8*2) {\n            return this.op1(\"_toJacobian\", a);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    toRprUncompressed(arr, offset, a) {\n        this.tm.setBuff(this.pOp1, a);\n        if (a.byteLength == this.F.n8*3) {\n            this.tm.instance.exports[this.prefix + \"_toAffine\"](this.pOp1, this.pOp1);\n        } else if (a.byteLength != this.F.n8*2) {\n            throw new Error(\"invalid point size\");\n        }\n        this.tm.instance.exports[this.prefix + \"_LEMtoU\"](this.pOp1, this.pOp1);\n        const res = this.tm.getBuff(this.pOp1, this.F.n8*2);\n        arr.set(res, offset);\n    }\n\n    fromRprUncompressed(arr, offset) {\n        const buff = arr.slice(offset, offset + this.F.n8*2);\n        this.tm.setBuff(this.pOp1, buff);\n        this.tm.instance.exports[this.prefix + \"_UtoLEM\"](this.pOp1, this.pOp1);\n        return this.tm.getBuff(this.pOp1, this.F.n8*2);\n    }\n\n    toRprCompressed(arr, offset, a) {\n        this.tm.setBuff(this.pOp1, a);\n        if (a.byteLength == this.F.n8*3) {\n            this.tm.instance.exports[this.prefix + \"_toAffine\"](this.pOp1, this.pOp1);\n        } else if (a.byteLength != this.F.n8*2) {\n            throw new Error(\"invalid point size\");\n        }\n        this.tm.instance.exports[this.prefix + \"_LEMtoC\"](this.pOp1, this.pOp1);\n        const res = this.tm.getBuff(this.pOp1, this.F.n8);\n        arr.set(res, offset);\n    }\n\n    fromRprCompressed(arr, offset) {\n        const buff = arr.slice(offset, offset + this.F.n8);\n        this.tm.setBuff(this.pOp1, buff);\n        this.tm.instance.exports[this.prefix + \"_CtoLEM\"](this.pOp1, this.pOp2);\n        return this.tm.getBuff(this.pOp2, this.F.n8*2);\n    }\n\n    toUncompressed(a) {\n        const buff = new Uint8Array(this.F.n8*2);\n        this.toRprUncompressed(buff, 0, a);\n        return buff;\n    }\n\n    toRprLEM(arr, offset, a) {\n        if (a.byteLength == this.F.n8*2) {\n            arr.set(a, offset);\n            return;\n        } else if (a.byteLength == this.F.n8*3) {\n            this.tm.setBuff(this.pOp1, a);\n            this.tm.instance.exports[this.prefix + \"_toAffine\"](this.pOp1, this.pOp1);\n            const res = this.tm.getBuff(this.pOp1, this.F.n8*2);\n            arr.set(res, offset);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    fromRprLEM(arr, offset) {\n        offset = offset || 0;\n        return arr.slice(offset, offset+this.F.n8*2);\n    }\n\n    toString(a, radix) {\n        if (a.byteLength == this.F.n8*3) {\n            const x = this.F.toString(a.slice(0, this.F.n8), radix);\n            const y = this.F.toString(a.slice(this.F.n8, this.F.n8*2), radix);\n            const z = this.F.toString(a.slice(this.F.n8*2), radix);\n            return `[ ${x}, ${y}, ${z} ]`;\n        } else if (a.byteLength == this.F.n8*2) {\n            const x = this.F.toString(a.slice(0, this.F.n8), radix);\n            const y = this.F.toString(a.slice(this.F.n8), radix);\n            return `[ ${x}, ${y} ]`;\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    isValid(a) {\n        if (this.isZero(a)) return true;\n        const F = this.F;\n        const aa = this.toAffine(a);\n        const x = aa.slice(0, this.F.n8);\n        const y = aa.slice(this.F.n8, this.F.n8*2);\n        const x3b = F.add(F.mul(F.square(x),x), this.b);\n        const y2 = F.square(y);\n        return F.eq(x3b, y2);\n    }\n\n    fromRng(rng) {\n        const F = this.F;\n        let P = [];\n        let greatest;\n        let x3b;\n        do {\n            P[0] = F.fromRng(rng);\n            greatest = rng.nextBool();\n            x3b = F.add(F.mul(F.square(P[0]), P[0]), this.b);\n        } while (!F.isSquare(x3b));\n\n        P[1] = F.sqrt(x3b);\n\n        const s = F.isNegative(P[1]);\n        if (greatest ^ s) P[1] = F.neg(P[1]);\n\n        let Pbuff = new Uint8Array(this.F.n8*2);\n        Pbuff.set(P[0]);\n        Pbuff.set(P[1], this.F.n8);\n\n        if (this.cofactor) {\n            Pbuff = this.timesScalar(Pbuff, this.cofactor);\n        }\n\n        return Pbuff;\n    }\n\n\n\n    toObject(a) {\n        if (this.isZero(a)) {\n            return [\n                this.F.toObject(this.F.zero),\n                this.F.toObject(this.F.one),\n                this.F.toObject(this.F.zero),\n            ];\n        }\n        const x = this.F.toObject(a.slice(0, this.F.n8));\n        const y = this.F.toObject(a.slice(this.F.n8, this.F.n8*2));\n        let z;\n        if (a.byteLength == this.F.n8*3) {\n            z = this.F.toObject(a.slice(this.F.n8*2, this.F.n8*3));\n        } else {\n            z = this.F.toObject(this.F.one);\n        }\n        return [x, y, z];\n    }\n\n    fromObject(a) {\n        const x = this.F.fromObject(a[0]);\n        const y = this.F.fromObject(a[1]);\n        let z;\n        if (a.length==3) {\n            z = this.F.fromObject(a[2]);\n        } else {\n            z = this.F.one;\n        }\n        if (this.F.isZero(z, this.F.one)) {\n            return this.zeroAffine;\n        } else if (this.F.eq(z, this.F.one)) {\n            const buff = new Uint8Array(this.F.n8*2);\n            buff.set(x);\n            buff.set(y, this.F.n8);\n            return buff;\n        } else {\n            const buff = new Uint8Array(this.F.n8*3);\n            buff.set(x);\n            buff.set(y, this.F.n8);\n            buff.set(z, this.F.n8*2);\n            return buff;\n        }\n    }\n\n    e(a) {\n        if (a instanceof Uint8Array) return a;\n        return this.fromObject(a);\n    }\n\n    x(a) {\n        const tmp = this.toAffine(a);\n        return tmp.slice(0, this.F.n8);\n    }\n\n    y(a) {\n        const tmp = this.toAffine(a);\n        return tmp.slice(this.F.n8);\n    }\n\n}\n\n/* global WebAssembly */\n\nfunction thread(self) {\n    const MAXMEM = 32767;\n    let instance;\n    let memory;\n\n    if (self) {\n        self.onmessage = function(e) {\n            let data;\n            if (e.data) {\n                data = e.data;\n            } else {\n                data = e;\n            }\n\n            if (data[0].cmd == \"INIT\") {\n                init(data[0]).then(function() {\n                    self.postMessage(data.result);\n                });\n            } else if (data[0].cmd == \"TERMINATE\") {\n                self.close();\n            } else {\n                const res = runTask(data);\n                self.postMessage(res);\n            }\n        };\n    }\n\n    async function init(data) {\n        const code = new Uint8Array(data.code);\n        const wasmModule = await WebAssembly.compile(code);\n        memory = new WebAssembly.Memory({initial:data.init, maximum: MAXMEM});\n\n        instance = await WebAssembly.instantiate(wasmModule, {\n            env: {\n                \"memory\": memory\n            }\n        });\n    }\n\n\n\n    function alloc(length) {\n        const u32 = new Uint32Array(memory.buffer, 0, 1);\n        while (u32[0] & 3) u32[0]++;  // Return always aligned pointers\n        const res = u32[0];\n        u32[0] += length;\n        if (u32[0] + length > memory.buffer.byteLength) {\n            const currentPages = memory.buffer.byteLength / 0x10000;\n            let requiredPages = Math.floor((u32[0] + length) / 0x10000)+1;\n            if (requiredPages>MAXMEM) requiredPages=MAXMEM;\n            memory.grow(requiredPages-currentPages);\n        }\n        return res;\n    }\n\n    function allocBuffer(buffer) {\n        const p = alloc(buffer.byteLength);\n        setBuffer(p, buffer);\n        return p;\n    }\n\n    function getBuffer(pointer, length) {\n        const u8 = new Uint8Array(memory.buffer);\n        return new Uint8Array(u8.buffer, u8.byteOffset + pointer, length);\n    }\n\n    function setBuffer(pointer, buffer) {\n        const u8 = new Uint8Array(memory.buffer);\n        u8.set(new Uint8Array(buffer), pointer);\n    }\n\n    function runTask(task) {\n        if (task[0].cmd == \"INIT\") {\n            return init(task[0]);\n        }\n        const ctx = {\n            vars: [],\n            out: []\n        };\n        const u32a = new Uint32Array(memory.buffer, 0, 1);\n        const oldAlloc = u32a[0];\n        for (let i=0; i<task.length; i++) {\n            switch (task[i].cmd) {\n            case \"ALLOCSET\":\n                ctx.vars[task[i].var] = allocBuffer(task[i].buff);\n                break;\n            case \"ALLOC\":\n                ctx.vars[task[i].var] = alloc(task[i].len);\n                break;\n            case \"SET\":\n                setBuffer(ctx.vars[task[i].var], task[i].buff);\n                break;\n            case \"CALL\": {\n                const params = [];\n                for (let j=0; j<task[i].params.length; j++) {\n                    const p = task[i].params[j];\n                    if (typeof p.var !== \"undefined\") {\n                        params.push(ctx.vars[p.var] + (p.offset || 0));\n                    } else if (typeof p.val != \"undefined\") {\n                        params.push(p.val);\n                    }\n                }\n                instance.exports[task[i].fnName](...params);\n                break;\n            }\n            case \"GET\":\n                ctx.out[task[i].out] = getBuffer(ctx.vars[task[i].var], task[i].len).slice();\n                break;\n            default:\n                throw new Error(\"Invalid cmd\");\n            }\n        }\n        const u32b = new Uint32Array(memory.buffer, 0, 1);\n        u32b[0] = oldAlloc;\n        return ctx.out;\n    }\n\n\n    return runTask;\n}\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// const MEM_SIZE = 1000;  // Memory size in 64K Pakes (512Mb)\nconst MEM_SIZE = 25;  // Memory size in 64K Pakes (1600Kb)\n\nclass Deferred {\n    constructor() {\n        this.promise = new Promise((resolve, reject)=> {\n            this.reject = reject;\n            this.resolve = resolve;\n        });\n    }\n}\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nlet workerSource;\n\nconst threadStr = `(${\"function thread(self) {\\n    const MAXMEM = 32767;\\n    let instance;\\n    let memory;\\n\\n    if (self) {\\n        self.onmessage = function(e) {\\n            let data;\\n            if (e.data) {\\n                data = e.data;\\n            } else {\\n                data = e;\\n            }\\n\\n            if (data[0].cmd == \\\"INIT\\\") {\\n                init(data[0]).then(function() {\\n                    self.postMessage(data.result);\\n                });\\n            } else if (data[0].cmd == \\\"TERMINATE\\\") {\\n                self.close();\\n            } else {\\n                const res = runTask(data);\\n                self.postMessage(res);\\n            }\\n        };\\n    }\\n\\n    async function init(data) {\\n        const code = new Uint8Array(data.code);\\n        const wasmModule = await WebAssembly.compile(code);\\n        memory = new WebAssembly.Memory({initial:data.init, maximum: MAXMEM});\\n\\n        instance = await WebAssembly.instantiate(wasmModule, {\\n            env: {\\n                \\\"memory\\\": memory\\n            }\\n        });\\n    }\\n\\n\\n\\n    function alloc(length) {\\n        const u32 = new Uint32Array(memory.buffer, 0, 1);\\n        while (u32[0] & 3) u32[0]++;  // Return always aligned pointers\\n        const res = u32[0];\\n        u32[0] += length;\\n        if (u32[0] + length > memory.buffer.byteLength) {\\n            const currentPages = memory.buffer.byteLength / 0x10000;\\n            let requiredPages = Math.floor((u32[0] + length) / 0x10000)+1;\\n            if (requiredPages>MAXMEM) requiredPages=MAXMEM;\\n            memory.grow(requiredPages-currentPages);\\n        }\\n        return res;\\n    }\\n\\n    function allocBuffer(buffer) {\\n        const p = alloc(buffer.byteLength);\\n        setBuffer(p, buffer);\\n        return p;\\n    }\\n\\n    function getBuffer(pointer, length) {\\n        const u8 = new Uint8Array(memory.buffer);\\n        return new Uint8Array(u8.buffer, u8.byteOffset + pointer, length);\\n    }\\n\\n    function setBuffer(pointer, buffer) {\\n        const u8 = new Uint8Array(memory.buffer);\\n        u8.set(new Uint8Array(buffer), pointer);\\n    }\\n\\n    function runTask(task) {\\n        if (task[0].cmd == \\\"INIT\\\") {\\n            return init(task[0]);\\n        }\\n        const ctx = {\\n            vars: [],\\n            out: []\\n        };\\n        const u32a = new Uint32Array(memory.buffer, 0, 1);\\n        const oldAlloc = u32a[0];\\n        for (let i=0; i<task.length; i++) {\\n            switch (task[i].cmd) {\\n            case \\\"ALLOCSET\\\":\\n                ctx.vars[task[i].var] = allocBuffer(task[i].buff);\\n                break;\\n            case \\\"ALLOC\\\":\\n                ctx.vars[task[i].var] = alloc(task[i].len);\\n                break;\\n            case \\\"SET\\\":\\n                setBuffer(ctx.vars[task[i].var], task[i].buff);\\n                break;\\n            case \\\"CALL\\\": {\\n                const params = [];\\n                for (let j=0; j<task[i].params.length; j++) {\\n                    const p = task[i].params[j];\\n                    if (typeof p.var !== \\\"undefined\\\") {\\n                        params.push(ctx.vars[p.var] + (p.offset || 0));\\n                    } else if (typeof p.val != \\\"undefined\\\") {\\n                        params.push(p.val);\\n                    }\\n                }\\n                instance.exports[task[i].fnName](...params);\\n                break;\\n            }\\n            case \\\"GET\\\":\\n                ctx.out[task[i].out] = getBuffer(ctx.vars[task[i].var], task[i].len).slice();\\n                break;\\n            default:\\n                throw new Error(\\\"Invalid cmd\\\");\\n            }\\n        }\\n        const u32b = new Uint32Array(memory.buffer, 0, 1);\\n        u32b[0] = oldAlloc;\\n        return ctx.out;\\n    }\\n\\n\\n    return runTask;\\n}\"})(self)`;\n{\n    if(globalThis?.Blob) {\n        const threadBytes= new TextEncoder().encode(threadStr);\n        const workerBlob = new Blob([threadBytes], { type: \"application/javascript\" }) ;\n        workerSource = URL.createObjectURL(workerBlob);\n    } else {\n        workerSource = \"data:application/javascript;base64,\" + globalThis.btoa(threadStr);\n    }\n}\n\n\n\nasync function buildThreadManager(wasm, singleThread) {\n    const tm = new ThreadManager();\n\n    tm.memory = new WebAssembly.Memory({initial:MEM_SIZE});\n    tm.u8 = new Uint8Array(tm.memory.buffer);\n    tm.u32 = new Uint32Array(tm.memory.buffer);\n\n    const wasmModule = await WebAssembly.compile(wasm.code);\n\n    tm.instance = await WebAssembly.instantiate(wasmModule, {\n        env: {\n            \"memory\": tm.memory\n        }\n    });\n    \n    if(!globalThis?.Worker) {\n        singleThread = true;\n    }\n    \n    tm.singleThread = singleThread;\n    tm.initalPFree = tm.u32[0];   // Save the Pointer to free space.\n    tm.pq = wasm.pq;\n    tm.pr = wasm.pr;\n    tm.pG1gen = wasm.pG1gen;\n    tm.pG1zero = wasm.pG1zero;\n    tm.pG2gen = wasm.pG2gen;\n    tm.pG2zero = wasm.pG2zero;\n    tm.pOneT = wasm.pOneT;\n\n    //    tm.pTmp0 = tm.alloc(curve.G2.F.n8*3);\n    //    tm.pTmp1 = tm.alloc(curve.G2.F.n8*3);\n\n    if (singleThread) {\n        tm.code = wasm.code;\n        tm.taskManager = thread();\n        await tm.taskManager([{\n            cmd: \"INIT\",\n            init: MEM_SIZE,\n            code: tm.code.slice()\n        }]);\n        tm.concurrency  = 1;\n    } else {\n        tm.workers = [];\n        tm.pendingDeferreds = [];\n        tm.working = [];\n\n        let concurrency = 2;\n        {\n            if (typeof navigator === \"object\" && navigator.hardwareConcurrency) {\n                concurrency = navigator.hardwareConcurrency;\n            }\n        }\n\n        if(concurrency == 0){\n            concurrency = 2;\n        }\n\n        // Limit to 64 threads for memory reasons.\n        if (concurrency>64) concurrency=64;\n        tm.concurrency = concurrency;\n\n        for (let i = 0; i<concurrency; i++) {\n\n            tm.workers[i] = new Worker(workerSource);\n\n            tm.workers[i].addEventListener(\"message\", getOnMsg(i));\n\n            tm.working[i]=false;\n        }\n\n        const initPromises = [];\n        for (let i=0; i<tm.workers.length;i++) {\n            const copyCode = wasm.code.slice();\n            initPromises.push(tm.postAction(i, [{\n                cmd: \"INIT\",\n                init: MEM_SIZE,\n                code: copyCode\n            }], [copyCode.buffer]));\n        }\n\n        await Promise.all(initPromises);\n\n    }\n    return tm;\n\n    function getOnMsg(i) {\n        return function(e) {\n            let data;\n            if ((e)&&(e.data)) {\n                data = e.data;\n            } else {\n                data = e;\n            }\n\n            tm.working[i]=false;\n            tm.pendingDeferreds[i].resolve(data);\n            tm.processWorks();\n        };\n    }\n\n}\n\nclass ThreadManager {\n    constructor() {\n        this.actionQueue = [];\n        this.oldPFree = 0;\n    }\n\n    startSyncOp() {\n        if (this.oldPFree != 0) throw new Error(\"Sync operation in progress\");\n        this.oldPFree = this.u32[0];\n    }\n\n    endSyncOp() {\n        if (this.oldPFree == 0) throw new Error(\"No sync operation in progress\");\n        this.u32[0] = this.oldPFree;\n        this.oldPFree = 0;\n    }\n\n    postAction(workerId, e, transfers, _deferred) {\n        if (this.working[workerId]) {\n            throw new Error(\"Posting a job t a working worker\");\n        }\n        this.working[workerId] = true;\n\n        this.pendingDeferreds[workerId] = _deferred ? _deferred : new Deferred();\n        this.workers[workerId].postMessage(e, transfers);\n\n        return this.pendingDeferreds[workerId].promise;\n    }\n\n    processWorks() {\n        for (let i=0; (i<this.workers.length)&&(this.actionQueue.length > 0); i++) {\n            if (this.working[i] == false) {\n                const work = this.actionQueue.shift();\n                this.postAction(i, work.data, work.transfers, work.deferred);\n            }\n        }\n    }\n\n    queueAction(actionData, transfers) {\n        const d = new Deferred();\n\n        if (this.singleThread) {\n            const res = this.taskManager(actionData);\n            d.resolve(res);\n        } else {\n            this.actionQueue.push({\n                data: actionData,\n                transfers: transfers,\n                deferred: d\n            });\n            this.processWorks();\n        }\n        return d.promise;\n    }\n\n    resetMemory() {\n        this.u32[0] = this.initalPFree;\n    }\n\n    allocBuff(buff) {\n        const pointer = this.alloc(buff.byteLength);\n        this.setBuff(pointer, buff);\n        return pointer;\n    }\n\n    getBuff(pointer, length) {\n        return this.u8.slice(pointer, pointer+ length);\n    }\n\n    setBuff(pointer, buffer) {\n        this.u8.set(new Uint8Array(buffer), pointer);\n    }\n\n    alloc(length) {\n        while (this.u32[0] & 3) this.u32[0]++;  // Return always aligned pointers\n        const res = this.u32[0];\n        this.u32[0] += length;\n        return res;\n    }\n\n    async terminate() {\n        for (let i=0; i<this.workers.length; i++) {\n            this.workers[i].postMessage([{cmd: \"TERMINATE\"}]);\n        }\n        await sleep(200);\n    }\n\n}\n\nfunction buildBatchApplyKey(curve, groupName) {\n    const G = curve[groupName];\n    const Fr = curve.Fr;\n    const tm = curve.tm;\n\n    curve[groupName].batchApplyKey = async function(buff, first, inc, inType, outType) {\n        inType = inType || \"affine\";\n        outType = outType || \"affine\";\n        let fnName, fnAffine;\n        let sGin, sGmid, sGout;\n        if (groupName == \"G1\") {\n            if (inType == \"jacobian\") {\n                sGin = G.F.n8*3;\n                fnName = \"g1m_batchApplyKey\";\n            } else {\n                sGin = G.F.n8*2;\n                fnName = \"g1m_batchApplyKeyMixed\";\n            }\n            sGmid = G.F.n8*3;\n            if (outType == \"jacobian\") {\n                sGout = G.F.n8*3;\n            } else {\n                fnAffine = \"g1m_batchToAffine\";\n                sGout = G.F.n8*2;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"jacobian\") {\n                sGin = G.F.n8*3;\n                fnName = \"g2m_batchApplyKey\";\n            } else {\n                sGin = G.F.n8*2;\n                fnName = \"g2m_batchApplyKeyMixed\";\n            }\n            sGmid = G.F.n8*3;\n            if (outType == \"jacobian\") {\n                sGout = G.F.n8*3;\n            } else {\n                fnAffine = \"g2m_batchToAffine\";\n                sGout = G.F.n8*2;\n            }\n        } else if (groupName == \"Fr\") {\n            fnName = \"frm_batchApplyKey\";\n            sGin = G.n8;\n            sGmid = G.n8;\n            sGout = G.n8;\n        } else {\n            throw new Error(\"Invalid group: \" + groupName);\n        }\n        const nPoints = Math.floor(buff.byteLength / sGin);\n        const pointsPerChunk = Math.floor(nPoints/tm.concurrency);\n        const opPromises = [];\n        inc = Fr.e(inc);\n        let t = Fr.e(first);\n        for (let i=0; i<tm.concurrency; i++) {\n            let n;\n            if (i< tm.concurrency-1) {\n                n = pointsPerChunk;\n            } else {\n                n = nPoints - i*pointsPerChunk;\n            }\n            if (n==0) continue;\n\n            const task = [];\n\n            task.push({\n                cmd: \"ALLOCSET\",\n                var: 0,\n                buff: buff.slice(i*pointsPerChunk*sGin, i*pointsPerChunk*sGin + n*sGin)\n            });\n            task.push({cmd: \"ALLOCSET\", var: 1, buff: t});\n            task.push({cmd: \"ALLOCSET\", var: 2, buff: inc});\n            task.push({cmd: \"ALLOC\", var: 3, len: n*Math.max(sGmid, sGout)});\n            task.push({\n                cmd: \"CALL\",\n                fnName: fnName,\n                params: [\n                    {var: 0},\n                    {val: n},\n                    {var: 1},\n                    {var: 2},\n                    {var:3}\n                ]\n            });\n            if (fnAffine) {\n                task.push({\n                    cmd: \"CALL\",\n                    fnName: fnAffine,\n                    params: [\n                        {var: 3},\n                        {val: n},\n                        {var: 3},\n                    ]\n                });\n            }\n            task.push({cmd: \"GET\", out: 0, var: 3, len: n*sGout});\n\n            opPromises.push(tm.queueAction(task));\n            t = Fr.mul(t, Fr.exp(inc, n));\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let outBuff;\n        if (buff instanceof BigBuffer) {\n            outBuff = new BigBuffer(nPoints*sGout);\n        } else {\n            outBuff = new Uint8Array(nPoints*sGout);\n        }\n\n        let p=0;\n        for (let i=0; i<result.length; i++) {\n            outBuff.set(result[i][0], p);\n            p += result[i][0].byteLength;\n        }\n\n        return outBuff;\n    };\n}\n\nfunction buildPairing(curve) {\n    const tm = curve.tm;\n    curve.pairing = function pairing(a, b) {\n\n        tm.startSyncOp();\n        const pA = tm.allocBuff(curve.G1.toJacobian(a));\n        const pB = tm.allocBuff(curve.G2.toJacobian(b));\n        const pRes = tm.alloc(curve.Gt.n8);\n        tm.instance.exports[curve.name + \"_pairing\"](pA, pB, pRes);\n\n        const res = tm.getBuff(pRes, curve.Gt.n8);\n\n        tm.endSyncOp();\n        return res;\n    };\n\n    curve.pairingEq = async function pairingEq() {\n        let  buffCt;\n        let nEqs;\n        if ((arguments.length % 2) == 1) {\n            buffCt = arguments[arguments.length-1];\n            nEqs = (arguments.length -1) /2;\n        } else {\n            buffCt = curve.Gt.one;\n            nEqs = arguments.length /2;\n        }\n\n        const opPromises = [];\n        for (let i=0; i<nEqs; i++) {\n\n            const task = [];\n\n            const g1Buff = curve.G1.toJacobian(arguments[i*2]);\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: g1Buff});\n            task.push({cmd: \"ALLOC\", var: 1, len: curve.prePSize});\n\n            const g2Buff = curve.G2.toJacobian(arguments[i*2 +1]);\n            task.push({cmd: \"ALLOCSET\", var: 2, buff: g2Buff});\n            task.push({cmd: \"ALLOC\", var: 3, len: curve.preQSize});\n\n            task.push({cmd: \"ALLOC\", var: 4, len: curve.Gt.n8});\n\n            task.push({cmd: \"CALL\", fnName: curve.name + \"_prepareG1\", params: [\n                {var: 0},\n                {var: 1}\n            ]});\n\n            task.push({cmd: \"CALL\", fnName: curve.name + \"_prepareG2\", params: [\n                {var: 2},\n                {var: 3}\n            ]});\n\n            task.push({cmd: \"CALL\", fnName: curve.name + \"_millerLoop\", params: [\n                {var: 1},\n                {var: 3},\n                {var: 4}\n            ]});\n\n            task.push({cmd: \"GET\", out: 0, var: 4, len: curve.Gt.n8});\n\n            opPromises.push(\n                tm.queueAction(task)\n            );\n        }\n\n\n        const result = await Promise.all(opPromises);\n\n        tm.startSyncOp();\n        const pRes = tm.alloc(curve.Gt.n8);\n        tm.instance.exports.ftm_one(pRes);\n\n        for (let i=0; i<result.length; i++) {\n            const pMR = tm.allocBuff(result[i][0]);\n            tm.instance.exports.ftm_mul(pRes, pMR, pRes);\n        }\n        tm.instance.exports[curve.name + \"_finalExponentiation\"](pRes, pRes);\n\n        const pCt = tm.allocBuff(buffCt);\n\n        const r = !!tm.instance.exports.ftm_eq(pRes, pCt);\n\n        tm.endSyncOp();\n\n        return r;\n    };\n\n    curve.prepareG1 = function(p) {\n        this.tm.startSyncOp();\n        const pP = this.tm.allocBuff(p);\n        const pPrepP = this.tm.alloc(this.prePSize);\n        this.tm.instance.exports[this.name + \"_prepareG1\"](pP, pPrepP);\n        const res = this.tm.getBuff(pPrepP, this.prePSize);\n        this.tm.endSyncOp();\n        return res;\n    };\n\n    curve.prepareG2 = function(q) {\n        this.tm.startSyncOp();\n        const pQ = this.tm.allocBuff(q);\n        const pPrepQ = this.tm.alloc(this.preQSize);\n        this.tm.instance.exports[this.name + \"_prepareG2\"](pQ, pPrepQ);\n        const res = this.tm.getBuff(pPrepQ, this.preQSize);\n        this.tm.endSyncOp();\n        return res;\n    };\n\n    curve.millerLoop = function(preP, preQ) {\n        this.tm.startSyncOp();\n        const pPreP = this.tm.allocBuff(preP);\n        const pPreQ = this.tm.allocBuff(preQ);\n        const pRes = this.tm.alloc(this.Gt.n8);\n        this.tm.instance.exports[this.name + \"_millerLoop\"](pPreP, pPreQ, pRes);\n        const res = this.tm.getBuff(pRes, this.Gt.n8);\n        this.tm.endSyncOp();\n        return res;\n    };\n\n    curve.finalExponentiation = function(a) {\n        this.tm.startSyncOp();\n        const pA = this.tm.allocBuff(a);\n        const pRes = this.tm.alloc(this.Gt.n8);\n        this.tm.instance.exports[this.name + \"_finalExponentiation\"](pA, pRes);\n        const res = this.tm.getBuff(pRes, this.Gt.n8);\n        this.tm.endSyncOp();\n        return res;\n    };\n\n}\n\nconst pTSizes = [\n    1 ,  1,  1,  1,    2,  3,  4,  5,\n    6 ,  7,  7,  8,    9, 10, 11, 12,\n    13, 13, 14, 15,   16, 16, 17, 17,\n    17, 17, 17, 17,   17, 17, 17, 17\n];\n\nfunction buildMultiexp(curve, groupName) {\n    const G = curve[groupName];\n    const tm = G.tm;\n    async function _multiExpChunk(buffBases, buffScalars, inType, logger, logText) {\n        if ( ! (buffBases instanceof Uint8Array) ) {\n            if (logger) logger.error(`${logText} _multiExpChunk buffBases is not Uint8Array`);\n            throw new Error(`${logText} _multiExpChunk buffBases is not Uint8Array`);\n        }\n        if ( ! (buffScalars instanceof Uint8Array) ) {\n            if (logger) logger.error(`${logText} _multiExpChunk buffScalars is not Uint8Array`);\n            throw new Error(`${logText} _multiExpChunk buffScalars is not Uint8Array`);\n        }\n        inType = inType || \"affine\";\n\n        let sGIn;\n        let fnName;\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                fnName = \"g1m_multiexpAffine_chunk\";\n                sGIn = G.F.n8*2;\n            } else {\n                fnName = \"g1m_multiexp_chunk\";\n                sGIn = G.F.n8*3;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                fnName = \"g2m_multiexpAffine_chunk\";\n                sGIn = G.F.n8*2;\n            } else {\n                fnName = \"g2m_multiexp_chunk\";\n                sGIn = G.F.n8*3;\n            }\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n        const nPoints = Math.floor(buffBases.byteLength / sGIn);\n\n        if (nPoints == 0) return G.zero;\n        const sScalar = Math.floor(buffScalars.byteLength / nPoints);\n        if( sScalar * nPoints != buffScalars.byteLength) {\n            throw new Error(\"Scalar size does not match\");\n        }\n\n        const bitChunkSize = pTSizes[log2(nPoints)];\n        const nChunks = Math.floor((sScalar*8 - 1) / bitChunkSize) +1;\n\n        const opPromises = [];\n        for (let i=0; i<nChunks; i++) {\n            const task = [\n                {cmd: \"ALLOCSET\", var: 0, buff: buffBases},\n                {cmd: \"ALLOCSET\", var: 1, buff: buffScalars},\n                {cmd: \"ALLOC\", var: 2, len: G.F.n8*3},\n                {cmd: \"CALL\", fnName: fnName, params: [\n                    {var: 0},\n                    {var: 1},\n                    {val: sScalar},\n                    {val: nPoints},\n                    {val: i*bitChunkSize},\n                    {val: Math.min(sScalar*8 - i*bitChunkSize, bitChunkSize)},\n                    {var: 2}\n                ]},\n                {cmd: \"GET\", out: 0, var: 2, len: G.F.n8*3}\n            ];\n            opPromises.push(\n                G.tm.queueAction(task)\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let res = G.zero;\n        for (let i=result.length-1; i>=0; i--) {\n            if (!G.isZero(res)) {\n                for (let j=0; j<bitChunkSize; j++) res = G.double(res);\n            }\n            res = G.add(res, result[i][0]);\n        }\n\n        return res;\n    }\n\n    async function _multiExp(buffBases, buffScalars, inType, logger, logText) {\n        const MAX_CHUNK_SIZE = 1 << 22;\n        const MIN_CHUNK_SIZE = 1 << 10;\n        let sGIn;\n\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                sGIn = G.F.n8*2;\n            } else {\n                sGIn = G.F.n8*3;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                sGIn = G.F.n8*2;\n            } else {\n                sGIn = G.F.n8*3;\n            }\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        const nPoints = Math.floor(buffBases.byteLength / sGIn);\n        const sScalar = Math.floor(buffScalars.byteLength / nPoints);\n        if( sScalar * nPoints != buffScalars.byteLength) {\n            throw new Error(\"Scalar size does not match\");\n        }\n\n        const bitChunkSize = pTSizes[log2(nPoints)];\n        const nChunks = Math.floor((sScalar*8 - 1) / bitChunkSize) +1;\n\n        let chunkSize;\n        chunkSize = Math.floor(nPoints / (tm.concurrency /nChunks));\n        if (chunkSize>MAX_CHUNK_SIZE) chunkSize = MAX_CHUNK_SIZE;\n        if (chunkSize<MIN_CHUNK_SIZE) chunkSize = MIN_CHUNK_SIZE;\n\n        const opPromises = [];\n        for (let i=0; i<nPoints; i += chunkSize) {\n            if (logger) logger.debug(`Multiexp start: ${logText}: ${i}/${nPoints}`);\n            const n= Math.min(nPoints - i, chunkSize);\n            const buffBasesChunk = buffBases.slice(i*sGIn, (i+n)*sGIn);\n            const buffScalarsChunk = buffScalars.slice(i*sScalar, (i+n)*sScalar);\n            opPromises.push(_multiExpChunk(buffBasesChunk, buffScalarsChunk, inType, logger, logText).then( (r) => {\n                if (logger) logger.debug(`Multiexp end: ${logText}: ${i}/${nPoints}`);\n                return r;\n            }));\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let res = G.zero;\n        for (let i=result.length-1; i>=0; i--) {\n            res = G.add(res, result[i]);\n        }\n\n        return res;\n    }\n\n    G.multiExp = async function multiExpAffine(buffBases, buffScalars, logger, logText) {\n        return await _multiExp(buffBases, buffScalars, \"jacobian\", logger, logText);\n    };\n    G.multiExpAffine = async function multiExpAffine(buffBases, buffScalars, logger, logText) {\n        return await _multiExp(buffBases, buffScalars, \"affine\", logger, logText);\n    };\n}\n\nfunction buildFFT(curve, groupName) {\n    const G = curve[groupName];\n    const Fr = curve.Fr;\n    const tm = G.tm;\n    async function _fft(buff, inverse, inType, outType, logger, loggerTxt) {\n\n        inType = inType || \"affine\";\n        outType = outType || \"affine\";\n        const MAX_BITS_THREAD = 14;\n\n        let sIn, sMid, sOut, fnIn2Mid, fnMid2Out, fnFFTMix, fnFFTJoin, fnFFTFinal;\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n                fnIn2Mid = \"g1m_batchToJacobian\";\n            } else {\n                sIn = G.F.n8*3;\n            }\n            sMid = G.F.n8*3;\n            if (inverse) {\n                fnFFTFinal = \"g1m_fftFinal\";\n            }\n            fnFFTJoin = \"g1m_fftJoin\";\n            fnFFTMix = \"g1m_fftMix\";\n\n            if (outType == \"affine\") {\n                sOut = G.F.n8*2;\n                fnMid2Out = \"g1m_batchToAffine\";\n            } else {\n                sOut = G.F.n8*3;\n            }\n\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n                fnIn2Mid = \"g2m_batchToJacobian\";\n            } else {\n                sIn = G.F.n8*3;\n            }\n            sMid = G.F.n8*3;\n            if (inverse) {\n                fnFFTFinal = \"g2m_fftFinal\";\n            }\n            fnFFTJoin = \"g2m_fftJoin\";\n            fnFFTMix = \"g2m_fftMix\";\n            if (outType == \"affine\") {\n                sOut = G.F.n8*2;\n                fnMid2Out = \"g2m_batchToAffine\";\n            } else {\n                sOut = G.F.n8*3;\n            }\n        } else if (groupName == \"Fr\") {\n            sIn = G.n8;\n            sMid = G.n8;\n            sOut = G.n8;\n            if (inverse) {\n                fnFFTFinal = \"frm_fftFinal\";\n            }\n            fnFFTMix = \"frm_fftMix\";\n            fnFFTJoin = \"frm_fftJoin\";\n        }\n\n\n        let returnArray = false;\n        if (Array.isArray(buff)) {\n            buff = array2buffer(buff, sIn);\n            returnArray = true;\n        } else {\n            buff = buff.slice(0, buff.byteLength);\n        }\n\n        const nPoints = buff.byteLength / sIn;\n        const bits = log2(nPoints);\n\n        if  ((1 << bits) != nPoints) {\n            throw new Error(\"fft must be multiple of 2\" );\n        }\n\n        if (bits == Fr.s +1) {\n            let buffOut;\n\n            if (inverse) {\n                buffOut =  await _fftExtInv(buff, inType, outType, logger, loggerTxt);\n            } else {\n                buffOut =  await _fftExt(buff, inType, outType, logger, loggerTxt);\n            }\n\n            if (returnArray) {\n                return buffer2array(buffOut, sOut);\n            } else {\n                return buffOut;\n            }\n        }\n\n        let inv;\n        if (inverse) {\n            inv = Fr.inv(Fr.e(nPoints));\n        }\n\n        let buffOut;\n\n        buffReverseBits(buff, sIn);\n\n        let chunks;\n        let pointsInChunk = Math.min(1 << MAX_BITS_THREAD, nPoints);\n        let nChunks = nPoints / pointsInChunk;\n\n        while ((nChunks < tm.concurrency)&&(pointsInChunk>=16)) {\n            nChunks *= 2;\n            pointsInChunk /= 2;\n        }\n\n        const l2Chunk = log2(pointsInChunk);\n\n        const promises = [];\n        for (let i = 0; i< nChunks; i++) {\n            if (logger) logger.debug(`${loggerTxt}: fft ${bits} mix start: ${i}/${nChunks}`);\n            const task = [];\n            task.push({cmd: \"ALLOC\", var: 0, len: sMid*pointsInChunk});\n            const buffChunk = buff.slice( (pointsInChunk * i)*sIn, (pointsInChunk * (i+1))*sIn);\n            task.push({cmd: \"SET\", var: 0, buff: buffChunk});\n            if (fnIn2Mid) {\n                task.push({cmd: \"CALL\", fnName:fnIn2Mid, params: [{var:0}, {val: pointsInChunk}, {var: 0}]});\n            }\n            for (let j=1; j<=l2Chunk;j++) {\n                task.push({cmd: \"CALL\", fnName:fnFFTMix, params: [{var:0}, {val: pointsInChunk}, {val: j}]});\n            }\n\n            if (l2Chunk==bits) {\n                if (fnFFTFinal) {\n                    task.push({cmd: \"ALLOCSET\", var: 1, buff: inv});\n                    task.push({cmd: \"CALL\", fnName: fnFFTFinal,  params:[\n                        {var: 0},\n                        {val: pointsInChunk},\n                        {var: 1},\n                    ]});\n                }\n                if (fnMid2Out) {\n                    task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:0}, {val: pointsInChunk}, {var: 0}]});\n                }\n                task.push({cmd: \"GET\", out: 0, var: 0, len: pointsInChunk*sOut});\n            } else {\n                task.push({cmd: \"GET\", out:0, var: 0, len: sMid*pointsInChunk});\n            }\n            promises.push(tm.queueAction(task).then( (r) => {\n                if (logger) logger.debug(`${loggerTxt}: fft ${bits} mix end: ${i}/${nChunks}`);\n                return r;\n            }));\n        }\n\n        chunks = await Promise.all(promises);\n        for (let i = 0; i< nChunks; i++) chunks[i] = chunks[i][0];\n\n        for (let i = l2Chunk+1;   i<=bits; i++) {\n            if (logger) logger.debug(`${loggerTxt}: fft  ${bits}  join: ${i}/${bits}`);\n            const nGroups = 1 << (bits - i);\n            const nChunksPerGroup = nChunks / nGroups;\n            const opPromises = [];\n            for (let j=0; j<nGroups; j++) {\n                for (let k=0; k <nChunksPerGroup/2; k++) {\n                    const first = Fr.exp( Fr.w[i], k*pointsInChunk);\n                    const inc = Fr.w[i];\n                    const o1 = j*nChunksPerGroup + k;\n                    const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;\n\n                    const task = [];\n                    task.push({cmd: \"ALLOCSET\", var: 0, buff: chunks[o1]});\n                    task.push({cmd: \"ALLOCSET\", var: 1, buff: chunks[o2]});\n                    task.push({cmd: \"ALLOCSET\", var: 2, buff: first});\n                    task.push({cmd: \"ALLOCSET\", var: 3, buff: inc});\n                    task.push({cmd: \"CALL\", fnName: fnFFTJoin,  params:[\n                        {var: 0},\n                        {var: 1},\n                        {val: pointsInChunk},\n                        {var: 2},\n                        {var: 3}\n                    ]});\n                    if (i==bits) {\n                        if (fnFFTFinal) {\n                            task.push({cmd: \"ALLOCSET\", var: 4, buff: inv});\n                            task.push({cmd: \"CALL\", fnName: fnFFTFinal,  params:[\n                                {var: 0},\n                                {val: pointsInChunk},\n                                {var: 4},\n                            ]});\n                            task.push({cmd: \"CALL\", fnName: fnFFTFinal,  params:[\n                                {var: 1},\n                                {val: pointsInChunk},\n                                {var: 4},\n                            ]});\n                        }\n                        if (fnMid2Out) {\n                            task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:0}, {val: pointsInChunk}, {var: 0}]});\n                            task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:1}, {val: pointsInChunk}, {var: 1}]});\n                        }\n                        task.push({cmd: \"GET\", out: 0, var: 0, len: pointsInChunk*sOut});\n                        task.push({cmd: \"GET\", out: 1, var: 1, len: pointsInChunk*sOut});\n                    } else {\n                        task.push({cmd: \"GET\", out: 0, var: 0, len: pointsInChunk*sMid});\n                        task.push({cmd: \"GET\", out: 1, var: 1, len: pointsInChunk*sMid});\n                    }\n                    opPromises.push(tm.queueAction(task).then( (r) => {\n                        if (logger) logger.debug(`${loggerTxt}: fft ${bits} join  ${i}/${bits}  ${j+1}/${nGroups} ${k}/${nChunksPerGroup/2}`);\n                        return r;\n                    }));\n                }\n            }\n\n            const res = await Promise.all(opPromises);\n            for (let j=0; j<nGroups; j++) {\n                for (let k=0; k <nChunksPerGroup/2; k++) {\n                    const o1 = j*nChunksPerGroup + k;\n                    const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;\n                    const resChunk = res.shift();\n                    chunks[o1] = resChunk[0];\n                    chunks[o2] = resChunk[1];\n                }\n            }\n        }\n\n        if (buff instanceof BigBuffer) {\n            buffOut = new BigBuffer(nPoints*sOut);\n        } else {\n            buffOut = new Uint8Array(nPoints*sOut);\n        }\n        if (inverse) {\n            buffOut.set(chunks[0].slice((pointsInChunk-1)*sOut));\n            let p= sOut;\n            for (let i=nChunks-1; i>0; i--) {\n                buffOut.set(chunks[i], p);\n                p += pointsInChunk*sOut;\n                delete chunks[i];  // Liberate mem\n            }\n            buffOut.set(chunks[0].slice(0, (pointsInChunk-1)*sOut), p);\n            delete chunks[0];\n        } else {\n            for (let i=0; i<nChunks; i++) {\n                buffOut.set(chunks[i], pointsInChunk*sOut*i);\n                delete chunks[i];\n            }\n        }\n\n        if (returnArray) {\n            return buffer2array(buffOut, sOut);\n        } else {\n            return buffOut;\n        }\n    }\n\n    async function _fftExt(buff, inType, outType, logger, loggerTxt) {\n        let b1, b2;\n        b1 = buff.slice( 0 , buff.byteLength/2);\n        b2 = buff.slice( buff.byteLength/2, buff.byteLength);\n\n        const promises = [];\n\n        [b1, b2] = await _fftJoinExt(b1, b2, \"fftJoinExt\", Fr.one, Fr.shift, inType, \"jacobian\", logger, loggerTxt);\n\n        promises.push( _fft(b1, false, \"jacobian\", outType, logger, loggerTxt));\n        promises.push( _fft(b2, false, \"jacobian\", outType, logger, loggerTxt));\n\n        const res1 = await Promise.all(promises);\n\n        let buffOut;\n        if (res1[0].byteLength > (1<<28)) {\n            buffOut = new BigBuffer(res1[0].byteLength*2);\n        } else {\n            buffOut = new Uint8Array(res1[0].byteLength*2);\n        }\n\n        buffOut.set(res1[0]);\n        buffOut.set(res1[1], res1[0].byteLength);\n\n        return buffOut;\n    }\n\n    async function _fftExtInv(buff, inType, outType, logger, loggerTxt) {\n        let b1, b2;\n        b1 = buff.slice( 0 , buff.byteLength/2);\n        b2 = buff.slice( buff.byteLength/2, buff.byteLength);\n\n        const promises = [];\n\n        promises.push( _fft(b1, true, inType, \"jacobian\", logger, loggerTxt));\n        promises.push( _fft(b2, true, inType, \"jacobian\", logger, loggerTxt));\n\n        [b1, b2] = await Promise.all(promises);\n\n        const res1 = await _fftJoinExt(b1, b2, \"fftJoinExtInv\", Fr.one, Fr.shiftInv, \"jacobian\", outType, logger, loggerTxt);\n\n        let buffOut;\n        if (res1[0].byteLength > (1<<28)) {\n            buffOut = new BigBuffer(res1[0].byteLength*2);\n        } else {\n            buffOut = new Uint8Array(res1[0].byteLength*2);\n        }\n\n        buffOut.set(res1[0]);\n        buffOut.set(res1[1], res1[0].byteLength);\n\n        return buffOut;\n    }\n\n\n    async function _fftJoinExt(buff1, buff2, fn, first, inc, inType, outType, logger, loggerTxt) {\n        const MAX_CHUNK_SIZE = 1<<16;\n        const MIN_CHUNK_SIZE = 1<<4;\n\n        let fnName;\n        let fnIn2Mid, fnMid2Out;\n        let sOut, sIn, sMid;\n\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n                fnIn2Mid = \"g1m_batchToJacobian\";\n            } else {\n                sIn = G.F.n8*3;\n            }\n            sMid = G.F.n8*3;\n            fnName = \"g1m_\"+fn;\n            if (outType == \"affine\") {\n                fnMid2Out = \"g1m_batchToAffine\";\n                sOut = G.F.n8*2;\n            } else {\n                sOut = G.F.n8*3;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n                fnIn2Mid = \"g2m_batchToJacobian\";\n            } else {\n                sIn = G.F.n8*3;\n            }\n            fnName = \"g2m_\"+fn;\n            sMid = G.F.n8*3;\n            if (outType == \"affine\") {\n                fnMid2Out = \"g2m_batchToAffine\";\n                sOut = G.F.n8*2;\n            } else {\n                sOut = G.F.n8*3;\n            }\n        } else if (groupName == \"Fr\") {\n            sIn = Fr.n8;\n            sOut = Fr.n8;\n            sMid = Fr.n8;\n            fnName = \"frm_\" + fn;\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        if (buff1.byteLength != buff2.byteLength) {\n            throw new Error(\"Invalid buffer size\");\n        }\n        const nPoints = Math.floor(buff1.byteLength / sIn);\n        if (nPoints != 1 << log2(nPoints)) {\n            throw new Error(\"Invalid number of points\");\n        }\n\n        let chunkSize = Math.floor(nPoints /tm.concurrency);\n        if (chunkSize < MIN_CHUNK_SIZE) chunkSize = MIN_CHUNK_SIZE;\n        if (chunkSize > MAX_CHUNK_SIZE) chunkSize = MAX_CHUNK_SIZE;\n\n        const opPromises = [];\n\n        for (let i=0; i<nPoints; i += chunkSize) {\n            if (logger) logger.debug(`${loggerTxt}: fftJoinExt Start: ${i}/${nPoints}`);\n            const n= Math.min(nPoints - i, chunkSize);\n\n            const firstChunk = Fr.mul(first, Fr.exp( inc, i));\n            const task = [];\n\n            const b1 = buff1.slice(i*sIn, (i+n)*sIn);\n            const b2 = buff2.slice(i*sIn, (i+n)*sIn);\n\n            task.push({cmd: \"ALLOC\", var: 0, len: sMid*n});\n            task.push({cmd: \"SET\", var: 0, buff: b1});\n            task.push({cmd: \"ALLOC\", var: 1, len: sMid*n});\n            task.push({cmd: \"SET\", var: 1, buff: b2});\n            task.push({cmd: \"ALLOCSET\", var: 2, buff: firstChunk});\n            task.push({cmd: \"ALLOCSET\", var: 3, buff: inc});\n            if (fnIn2Mid) {\n                task.push({cmd: \"CALL\", fnName:fnIn2Mid, params: [{var:0}, {val: n}, {var: 0}]});\n                task.push({cmd: \"CALL\", fnName:fnIn2Mid, params: [{var:1}, {val: n}, {var: 1}]});\n            }\n            task.push({cmd: \"CALL\", fnName: fnName, params: [\n                {var: 0},\n                {var: 1},\n                {val: n},\n                {var: 2},\n                {var: 3},\n                {val: Fr.s},\n            ]});\n            if (fnMid2Out) {\n                task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:0}, {val: n}, {var: 0}]});\n                task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:1}, {val: n}, {var: 1}]});\n            }\n            task.push({cmd: \"GET\", out: 0, var: 0, len: n*sOut});\n            task.push({cmd: \"GET\", out: 1, var: 1, len: n*sOut});\n            opPromises.push(\n                tm.queueAction(task).then( (r) => {\n                    if (logger) logger.debug(`${loggerTxt}: fftJoinExt End: ${i}/${nPoints}`);\n                    return r;\n                })\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut1;\n        let fullBuffOut2;\n        if (nPoints * sOut > 1<<28) {\n            fullBuffOut1 = new BigBuffer(nPoints*sOut);\n            fullBuffOut2 = new BigBuffer(nPoints*sOut);\n        } else {\n            fullBuffOut1 = new Uint8Array(nPoints*sOut);\n            fullBuffOut2 = new Uint8Array(nPoints*sOut);\n        }\n\n        let p =0;\n        for (let i=0; i<result.length; i++) {\n            fullBuffOut1.set(result[i][0], p);\n            fullBuffOut2.set(result[i][1], p);\n            p+=result[i][0].byteLength;\n        }\n\n        return [fullBuffOut1, fullBuffOut2];\n    }\n\n\n    G.fft = async function(buff, inType, outType, logger, loggerTxt) {\n        return await _fft(buff, false, inType, outType, logger, loggerTxt);\n    };\n\n    G.ifft = async function(buff, inType, outType, logger, loggerTxt) {\n        return await _fft(buff, true, inType, outType, logger, loggerTxt);\n    };\n\n    G.lagrangeEvaluations = async function (buff, inType, outType, logger, loggerTxt) {\n        inType = inType || \"affine\";\n        outType = outType || \"affine\";\n\n        let sIn;\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n            } else {\n                sIn = G.F.n8*3;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n            } else {\n                sIn = G.F.n8*3;\n            }\n        } else if (groupName == \"Fr\") {\n            sIn = Fr.n8;\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        const nPoints = buff.byteLength /sIn;\n        const bits = log2(nPoints);\n\n        if ((2 ** bits)*sIn != buff.byteLength) {\n            if (logger) logger.error(\"lagrangeEvaluations iinvalid input size\");\n            throw new Error(\"lagrangeEvaluations invalid Input size\");\n        }\n\n        if (bits <= Fr.s) {\n            return await G.ifft(buff, inType, outType, logger, loggerTxt);\n        }\n\n        if (bits > Fr.s+1) {\n            if (logger) logger.error(\"lagrangeEvaluations input too big\");\n            throw new Error(\"lagrangeEvaluations input too big\");\n        }\n\n        let t0 = buff.slice(0, buff.byteLength/2);\n        let t1 = buff.slice(buff.byteLength/2, buff.byteLength);\n\n\n        const shiftToSmallM = Fr.exp(Fr.shift, nPoints/2);\n        const sConst = Fr.inv( Fr.sub(Fr.one, shiftToSmallM));\n\n        [t0, t1] = await _fftJoinExt(t0, t1, \"prepareLagrangeEvaluation\", sConst, Fr.shiftInv, inType, \"jacobian\", logger, loggerTxt + \" prep\");\n\n        const promises = [];\n\n        promises.push( _fft(t0, true, \"jacobian\", outType, logger, loggerTxt + \" t0\"));\n        promises.push( _fft(t1, true, \"jacobian\", outType, logger, loggerTxt + \" t1\"));\n\n        [t0, t1] = await Promise.all(promises);\n\n        let buffOut;\n        if (t0.byteLength > (1<<28)) {\n            buffOut = new BigBuffer(t0.byteLength*2);\n        } else {\n            buffOut = new Uint8Array(t0.byteLength*2);\n        }\n\n        buffOut.set(t0);\n        buffOut.set(t1, t0.byteLength);\n\n        return buffOut;\n    };\n\n    G.fftMix = async function fftMix(buff) {\n        const sG = G.F.n8*3;\n        let fnName, fnFFTJoin;\n        if (groupName == \"G1\") {\n            fnName = \"g1m_fftMix\";\n            fnFFTJoin = \"g1m_fftJoin\";\n        } else if (groupName == \"G2\") {\n            fnName = \"g2m_fftMix\";\n            fnFFTJoin = \"g2m_fftJoin\";\n        } else if (groupName == \"Fr\") {\n            fnName = \"frm_fftMix\";\n            fnFFTJoin = \"frm_fftJoin\";\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        const nPoints = Math.floor(buff.byteLength / sG);\n        const power = log2(nPoints);\n\n        let nChunks = 1 << log2(tm.concurrency);\n\n        if (nPoints <= nChunks*2) nChunks = 1;\n\n        const pointsPerChunk = nPoints / nChunks;\n\n        const powerChunk = log2(pointsPerChunk);\n\n        const opPromises = [];\n        for (let i=0; i<nChunks; i++) {\n            const task = [];\n            const b = buff.slice((i* pointsPerChunk)*sG, ((i+1)* pointsPerChunk)*sG);\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: b});\n            for (let j=1; j<=powerChunk; j++) {\n                task.push({cmd: \"CALL\", fnName: fnName, params: [\n                    {var: 0},\n                    {val: pointsPerChunk},\n                    {val: j}\n                ]});\n            }\n            task.push({cmd: \"GET\", out: 0, var: 0, len: pointsPerChunk*sG});\n            opPromises.push(\n                tm.queueAction(task)\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        const chunks = [];\n        for (let i=0; i<result.length; i++) chunks[i] = result[i][0];\n\n\n        for (let i = powerChunk+1; i<=power; i++) {\n            const nGroups = 1 << (power - i);\n            const nChunksPerGroup = nChunks / nGroups;\n            const opPromises = [];\n            for (let j=0; j<nGroups; j++) {\n                for (let k=0; k <nChunksPerGroup/2; k++) {\n                    const first = Fr.exp( Fr.w[i], k*pointsPerChunk);\n                    const inc = Fr.w[i];\n                    const o1 = j*nChunksPerGroup + k;\n                    const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;\n\n                    const task = [];\n                    task.push({cmd: \"ALLOCSET\", var: 0, buff: chunks[o1]});\n                    task.push({cmd: \"ALLOCSET\", var: 1, buff: chunks[o2]});\n                    task.push({cmd: \"ALLOCSET\", var: 2, buff: first});\n                    task.push({cmd: \"ALLOCSET\", var: 3, buff: inc});\n                    task.push({cmd: \"CALL\", fnName: fnFFTJoin,  params:[\n                        {var: 0},\n                        {var: 1},\n                        {val: pointsPerChunk},\n                        {var: 2},\n                        {var: 3}\n                    ]});\n                    task.push({cmd: \"GET\", out: 0, var: 0, len: pointsPerChunk*sG});\n                    task.push({cmd: \"GET\", out: 1, var: 1, len: pointsPerChunk*sG});\n                    opPromises.push(tm.queueAction(task));\n                }\n            }\n\n            const res = await Promise.all(opPromises);\n            for (let j=0; j<nGroups; j++) {\n                for (let k=0; k <nChunksPerGroup/2; k++) {\n                    const o1 = j*nChunksPerGroup + k;\n                    const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;\n                    const resChunk = res.shift();\n                    chunks[o1] = resChunk[0];\n                    chunks[o2] = resChunk[1];\n                }\n            }\n        }\n\n        let fullBuffOut;\n        if (buff instanceof BigBuffer) {\n            fullBuffOut = new BigBuffer(nPoints*sG);\n        } else {\n            fullBuffOut = new Uint8Array(nPoints*sG);\n        }\n        let p =0;\n        for (let i=0; i<nChunks; i++) {\n            fullBuffOut.set(chunks[i], p);\n            p+=chunks[i].byteLength;\n        }\n\n        return fullBuffOut;\n    };\n\n    G.fftJoin = async function fftJoin(buff1, buff2, first, inc) {\n        const sG = G.F.n8*3;\n        let fnName;\n        if (groupName == \"G1\") {\n            fnName = \"g1m_fftJoin\";\n        } else if (groupName == \"G2\") {\n            fnName = \"g2m_fftJoin\";\n        } else if (groupName == \"Fr\") {\n            fnName = \"frm_fftJoin\";\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        if (buff1.byteLength != buff2.byteLength) {\n            throw new Error(\"Invalid buffer size\");\n        }\n        const nPoints = Math.floor(buff1.byteLength / sG);\n        if (nPoints != 1 << log2(nPoints)) {\n            throw new Error(\"Invalid number of points\");\n        }\n\n        let nChunks = 1 << log2(tm.concurrency);\n        if (nPoints <= nChunks*2) nChunks = 1;\n\n        const pointsPerChunk = nPoints / nChunks;\n\n\n        const opPromises = [];\n        for (let i=0; i<nChunks; i++) {\n            const task = [];\n\n            const firstChunk = Fr.mul(first, Fr.exp(inc, i*pointsPerChunk));\n            const b1 = buff1.slice((i* pointsPerChunk)*sG, ((i+1)* pointsPerChunk)*sG);\n            const b2 = buff2.slice((i* pointsPerChunk)*sG, ((i+1)* pointsPerChunk)*sG);\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: b1});\n            task.push({cmd: \"ALLOCSET\", var: 1, buff: b2});\n            task.push({cmd: \"ALLOCSET\", var: 2, buff: firstChunk});\n            task.push({cmd: \"ALLOCSET\", var: 3, buff: inc});\n            task.push({cmd: \"CALL\", fnName: fnName, params: [\n                {var: 0},\n                {var: 1},\n                {val: pointsPerChunk},\n                {var: 2},\n                {var: 3}\n            ]});\n            task.push({cmd: \"GET\", out: 0, var: 0, len: pointsPerChunk*sG});\n            task.push({cmd: \"GET\", out: 1, var: 1, len: pointsPerChunk*sG});\n            opPromises.push(\n                tm.queueAction(task)\n            );\n\n        }\n\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut1;\n        let fullBuffOut2;\n        if (buff1 instanceof BigBuffer) {\n            fullBuffOut1 = new BigBuffer(nPoints*sG);\n            fullBuffOut2 = new BigBuffer(nPoints*sG);\n        } else {\n            fullBuffOut1 = new Uint8Array(nPoints*sG);\n            fullBuffOut2 = new Uint8Array(nPoints*sG);\n        }\n\n        let p =0;\n        for (let i=0; i<result.length; i++) {\n            fullBuffOut1.set(result[i][0], p);\n            fullBuffOut2.set(result[i][1], p);\n            p+=result[i][0].byteLength;\n        }\n\n        return [fullBuffOut1, fullBuffOut2];\n    };\n\n\n\n    G.fftFinal =  async function fftFinal(buff, factor) {\n        const sG = G.F.n8*3;\n        const sGout = G.F.n8*2;\n        let fnName, fnToAffine;\n        if (groupName == \"G1\") {\n            fnName = \"g1m_fftFinal\";\n            fnToAffine = \"g1m_batchToAffine\";\n        } else if (groupName == \"G2\") {\n            fnName = \"g2m_fftFinal\";\n            fnToAffine = \"g2m_batchToAffine\";\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        const nPoints = Math.floor(buff.byteLength / sG);\n        if (nPoints != 1 << log2(nPoints)) {\n            throw new Error(\"Invalid number of points\");\n        }\n\n        const pointsPerChunk = Math.floor(nPoints / tm.concurrency);\n\n        const opPromises = [];\n        for (let i=0; i<tm.concurrency; i++) {\n            let n;\n            if (i< tm.concurrency-1) {\n                n = pointsPerChunk;\n            } else {\n                n = nPoints - i*pointsPerChunk;\n            }\n            if (n==0) continue;\n            const task = [];\n            const b = buff.slice((i* pointsPerChunk)*sG, (i*pointsPerChunk+n)*sG);\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: b});\n            task.push({cmd: \"ALLOCSET\", var: 1, buff: factor});\n            task.push({cmd: \"CALL\", fnName: fnName, params: [\n                {var: 0},\n                {val: n},\n                {var: 1},\n            ]});\n            task.push({cmd: \"CALL\", fnName: fnToAffine, params: [\n                {var: 0},\n                {val: n},\n                {var: 0},\n            ]});\n            task.push({cmd: \"GET\", out: 0, var: 0, len: n*sGout});\n            opPromises.push(\n                tm.queueAction(task)\n            );\n\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut;\n        if (buff instanceof BigBuffer) {\n            fullBuffOut = new BigBuffer(nPoints*sGout);\n        } else {\n            fullBuffOut = new Uint8Array(nPoints*sGout);\n        }\n\n        let p =0;\n        for (let i=result.length-1; i>=0; i--) {\n            fullBuffOut.set(result[i][0], p);\n            p+=result[i][0].byteLength;\n        }\n\n        return fullBuffOut;\n    };\n}\n\nasync function buildEngine(params) {\n\n    const tm = await buildThreadManager(params.wasm, params.singleThread);\n\n\n    const curve = {};\n\n    curve.q = e(params.wasm.q.toString());\n    curve.r = e(params.wasm.r.toString());\n    curve.name = params.name;\n    curve.tm = tm;\n    curve.prePSize = params.wasm.prePSize;\n    curve.preQSize = params.wasm.preQSize;\n    curve.Fr = new WasmField1(tm, \"frm\", params.n8r, params.r);\n    curve.F1 = new WasmField1(tm, \"f1m\", params.n8q, params.q);\n    curve.F2 = new WasmField2(tm, \"f2m\", curve.F1);\n    curve.G1 = new WasmCurve(tm, \"g1m\", curve.F1, params.wasm.pG1gen, params.wasm.pG1b, params.cofactorG1);\n    curve.G2 = new WasmCurve(tm, \"g2m\", curve.F2, params.wasm.pG2gen, params.wasm.pG2b, params.cofactorG2);\n    curve.F6 = new WasmField3(tm, \"f6m\", curve.F2);\n    curve.F12 = new WasmField2(tm, \"ftm\", curve.F6);\n\n    curve.Gt = curve.F12;\n\n    buildBatchApplyKey(curve, \"G1\");\n    buildBatchApplyKey(curve, \"G2\");\n    buildBatchApplyKey(curve, \"Fr\");\n\n    buildMultiexp(curve, \"G1\");\n    buildMultiexp(curve, \"G2\");\n\n    buildFFT(curve, \"G1\");\n    buildFFT(curve, \"G2\");\n    buildFFT(curve, \"Fr\");\n\n    buildPairing(curve);\n\n    curve.array2buffer = function(arr, sG) {\n        const buff = new Uint8Array(sG*arr.length);\n\n        for (let i=0; i<arr.length; i++) {\n            buff.set(arr[i], i*sG);\n        }\n\n        return buff;\n    };\n\n    curve.buffer2array = function(buff , sG) {\n        const n= buff.byteLength / sG;\n        const arr = new Array(n);\n        for (let i=0; i<n; i++) {\n            arr[i] = buff.slice(i*sG, i*sG+sG);\n        }\n        return arr;\n    };\n\n    return curve;\n}\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nfunction toNumber(n) {\n    return BigInt(n);\n}\n\nfunction isNegative(n) {\n    return n < 0n;\n}\n\nfunction isZero(n) {\n    return n === 0n;\n}\n\nfunction bitLength(n) {\n    if (isNegative(n)) {\n        return n.toString(2).length - 1; // discard the - sign\n    } else {\n        return n.toString(2).length;\n    }\n}\n\nfunction u32(n) {\n    const b = [];\n    const v = toNumber(n);\n    b.push(Number(v & 0xFFn));\n    b.push(Number(v >> 8n & 0xFFn));\n    b.push(Number(v >> 16n & 0xFFn));\n    b.push(Number(v >> 24n & 0xFFn));\n    return b;\n}\n\nfunction toUTF8Array(str) {\n    var utf8 = [];\n    for (var i=0; i < str.length; i++) {\n        var charcode = str.charCodeAt(i);\n        if (charcode < 0x80) utf8.push(charcode);\n        else if (charcode < 0x800) {\n            utf8.push(0xc0 | (charcode >> 6),\n                0x80 | (charcode & 0x3f));\n        }\n        else if (charcode < 0xd800 || charcode >= 0xe000) {\n            utf8.push(0xe0 | (charcode >> 12),\n                0x80 | ((charcode>>6) & 0x3f),\n                0x80 | (charcode & 0x3f));\n        }\n        // surrogate pair\n        else {\n            i++;\n            // UTF-16 encodes 0x10000-0x10FFFF by\n            // subtracting 0x10000 and splitting the\n            // 20 bits of 0x0-0xFFFFF into two halves\n            charcode = 0x10000 + (((charcode & 0x3ff)<<10)\n                      | (str.charCodeAt(i) & 0x3ff));\n            utf8.push(0xf0 | (charcode >>18),\n                0x80 | ((charcode>>12) & 0x3f),\n                0x80 | ((charcode>>6) & 0x3f),\n                0x80 | (charcode & 0x3f));\n        }\n    }\n    return utf8;\n}\n\nfunction string(str) {\n    const bytes = toUTF8Array(str);\n    return [ ...varuint32(bytes.length), ...bytes ];\n}\n\nfunction varuint(n) {\n    const code = [];\n    let v = toNumber(n);\n    if (isNegative(v)) throw new Error(\"Number cannot be negative\");\n    while (!isZero(v)) {\n        code.push(Number(v & 0x7Fn));\n        v = v >> 7n;\n    }\n    if (code.length==0) code.push(0);\n    for (let i=0; i<code.length-1; i++) {\n        code[i] = code[i] | 0x80;\n    }\n    return code;\n}\n\nfunction varint(_n) {\n    let n, sign;\n    const bits = bitLength(_n);\n    if (_n<0) {\n        sign = true;\n        n = (1n << BigInt(bits)) + _n;\n    } else {\n        sign = false;\n        n = toNumber(_n);\n    }\n    const paddingBits = 7 - (bits % 7);\n\n    const padding = ((1n << BigInt(paddingBits)) - 1n) << BigInt(bits);\n    const paddingMask = ((1 << (7 - paddingBits))-1) | 0x80;\n\n    const code = varuint(n + padding);\n\n    if (!sign) {\n        code[code.length-1] = code[code.length-1] & paddingMask;\n    }\n\n    return code;\n}\n\nfunction varint32(n) {\n    let v = toNumber(n);\n    if (v > 0xFFFFFFFFn) throw new Error(\"Number too big\");\n    if (v > 0x7FFFFFFFn) v = v - 0x100000000n;\n    // bigInt(\"-80000000\", 16) as base10\n    if (v < -2147483648n) throw new Error(\"Number too small\");\n    return varint(v);\n}\n\nfunction varint64(n) {\n    let v = toNumber(n);\n    if (v > 0xFFFFFFFFFFFFFFFFn) throw new Error(\"Number too big\");\n    if (v > 0x7FFFFFFFFFFFFFFFn) v = v - 0x10000000000000000n;\n    // bigInt(\"-8000000000000000\", 16) as base10\n    if (v < -9223372036854775808n) throw new Error(\"Number too small\");\n    return varint(v);\n}\n\nfunction varuint32(n) {\n    let v = toNumber(n);\n    if (v > 0xFFFFFFFFn) throw new Error(\"Number too big\");\n    return varuint(v);\n}\n\nfunction toHexString(byteArray) {\n    return Array.from(byteArray, function(byte) {\n        return (\"0\" + (byte & 0xFF).toString(16)).slice(-2);\n    }).join(\"\");\n}\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\nclass CodeBuilder {\n    constructor(func) {\n        this.func = func;\n        this.functionName = func.functionName;\n        this.module = func.module;\n    }\n\n    setLocal(localName, valCode) {\n        const idx = this.func.localIdxByName[localName];\n        if (idx === undefined)\n            throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);\n        return [...valCode, 0x21, ...varuint32( idx )];\n    }\n\n    teeLocal(localName, valCode) {\n        const idx = this.func.localIdxByName[localName];\n        if (idx === undefined)\n            throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);\n        return [...valCode, 0x22, ...varuint32( idx )];\n    }\n\n    getLocal(localName) {\n        const idx = this.func.localIdxByName[localName];\n        if (idx === undefined)\n            throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);\n        return [0x20, ...varuint32( idx )];\n    }\n\n    i64_load8_s(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 0 : _align;  // 8 bits alignment by default\n        return [...idxCode, 0x30, align, ...varuint32(offset)];\n    }\n\n    i64_load8_u(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 0 : _align;  // 8 bits alignment by default\n        return [...idxCode, 0x31, align, ...varuint32(offset)];\n    }\n\n    i64_load16_s(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 1 : _align;  // 16 bits alignment by default\n        return [...idxCode, 0x32, align, ...varuint32(offset)];\n    }\n\n    i64_load16_u(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 1 : _align;  // 16 bits alignment by default\n        return [...idxCode, 0x33, align, ...varuint32(offset)];\n    }\n\n    i64_load32_s(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 2 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x34, align, ...varuint32(offset)];\n    }\n\n    i64_load32_u(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 2 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x35, align, ...varuint32(offset)];\n    }\n\n    i64_load(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 3 : _align;  // 64 bits alignment by default\n        return [...idxCode, 0x29, align, ...varuint32(offset)];\n    }\n\n\n    i64_store(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 3;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 3;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x37, align, ...varuint32(offset)];\n    }\n\n    i64_store32(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 2;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 2;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x3e, align, ...varuint32(offset)];\n    }\n\n\n    i64_store16(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 1;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 1;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x3d, align, ...varuint32(offset)];\n    }\n\n\n    i64_store8(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 0;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 0;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x3c, align, ...varuint32(offset)];\n    }\n\n    i32_load8_s(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 0 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x2c, align, ...varuint32(offset)];\n    }\n\n    i32_load8_u(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 0 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x2d, align, ...varuint32(offset)];\n    }\n\n    i32_load16_s(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 1 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x2e, align, ...varuint32(offset)];\n    }\n\n    i32_load16_u(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 1 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x2f, align, ...varuint32(offset)];\n    }\n\n    i32_load(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 2 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x28, align, ...varuint32(offset)];\n    }\n\n    i32_store(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 2;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 2;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x36, align, ...varuint32(offset)];\n    }\n\n\n    i32_store16(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 1;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 1;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x3b, align, ...varuint32(offset)];\n    }\n\n    i32_store8(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 0;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 0;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x3a, align, ...varuint32(offset)];\n    }\n\n    call(fnName, ...args) {\n        const idx = this.module.functionIdxByName[fnName];\n        if (idx === undefined)\n            throw new Error(`Function not defined: Function: ${fnName}`);\n        return [...[].concat(...args), 0x10, ...varuint32(idx)];\n    }\n\n    call_indirect(fnIdx, ...args) {\n        return [...[].concat(...args), ...fnIdx, 0x11, 0, 0];\n    }\n\n    if(condCode, thenCode, elseCode) {\n        if (elseCode) {\n            return [...condCode, 0x04, 0x40, ...thenCode, 0x05, ...elseCode, 0x0b];\n        } else {\n            return [...condCode, 0x04, 0x40, ...thenCode, 0x0b];\n        }\n    }\n\n    block(bCode) { return [0x02, 0x40, ...bCode, 0x0b]; }\n    loop(...args) {\n        return [0x03, 0x40, ...[].concat(...[...args]), 0x0b];\n    }\n    br_if(relPath, condCode) { return [...condCode, 0x0d, ...varuint32(relPath)]; }\n    br(relPath) { return [0x0c, ...varuint32(relPath)]; }\n    ret(rCode) { return [...rCode, 0x0f]; }\n    drop(dCode) { return [...dCode,  0x1a]; }\n\n    i64_const(num) { return [0x42, ...varint64(num)]; }\n    i32_const(num) { return [0x41, ...varint32(num)]; }\n\n\n    i64_eqz(opcode) { return [...opcode, 0x50]; }\n    i64_eq(op1code, op2code) { return [...op1code, ...op2code, 0x51]; }\n    i64_ne(op1code, op2code) { return [...op1code, ...op2code, 0x52]; }\n    i64_lt_s(op1code, op2code) { return [...op1code, ...op2code, 0x53]; }\n    i64_lt_u(op1code, op2code) { return [...op1code, ...op2code, 0x54]; }\n    i64_gt_s(op1code, op2code) { return [...op1code, ...op2code, 0x55]; }\n    i64_gt_u(op1code, op2code) { return [...op1code, ...op2code, 0x56]; }\n    i64_le_s(op1code, op2code) { return [...op1code, ...op2code, 0x57]; }\n    i64_le_u(op1code, op2code) { return [...op1code, ...op2code, 0x58]; }\n    i64_ge_s(op1code, op2code) { return [...op1code, ...op2code, 0x59]; }\n    i64_ge_u(op1code, op2code) { return [...op1code, ...op2code, 0x5a]; }\n    i64_add(op1code, op2code) { return [...op1code, ...op2code, 0x7c]; }\n    i64_sub(op1code, op2code) { return [...op1code, ...op2code, 0x7d]; }\n    i64_mul(op1code, op2code) { return [...op1code, ...op2code, 0x7e]; }\n    i64_div_s(op1code, op2code) { return [...op1code, ...op2code, 0x7f]; }\n    i64_div_u(op1code, op2code) { return [...op1code, ...op2code, 0x80]; }\n    i64_rem_s(op1code, op2code) { return [...op1code, ...op2code, 0x81]; }\n    i64_rem_u(op1code, op2code) { return [...op1code, ...op2code, 0x82]; }\n    i64_and(op1code, op2code) { return [...op1code, ...op2code, 0x83]; }\n    i64_or(op1code, op2code) { return [...op1code, ...op2code, 0x84]; }\n    i64_xor(op1code, op2code) { return [...op1code, ...op2code, 0x85]; }\n    i64_shl(op1code, op2code) { return [...op1code, ...op2code, 0x86]; }\n    i64_shr_s(op1code, op2code) { return [...op1code, ...op2code, 0x87]; }\n    i64_shr_u(op1code, op2code) { return [...op1code, ...op2code, 0x88]; }\n    i64_extend_i32_s(op1code) { return [...op1code, 0xac]; }\n    i64_extend_i32_u(op1code) { return [...op1code, 0xad]; }\n    i64_clz(op1code) { return [...op1code, 0x79]; }\n    i64_ctz(op1code) { return [...op1code, 0x7a]; }\n\n    i32_eqz(op1code) { return [...op1code, 0x45]; }\n    i32_eq(op1code, op2code) { return [...op1code, ...op2code, 0x46]; }\n    i32_ne(op1code, op2code) { return [...op1code, ...op2code, 0x47]; }\n    i32_lt_s(op1code, op2code) { return [...op1code, ...op2code, 0x48]; }\n    i32_lt_u(op1code, op2code) { return [...op1code, ...op2code, 0x49]; }\n    i32_gt_s(op1code, op2code) { return [...op1code, ...op2code, 0x4a]; }\n    i32_gt_u(op1code, op2code) { return [...op1code, ...op2code, 0x4b]; }\n    i32_le_s(op1code, op2code) { return [...op1code, ...op2code, 0x4c]; }\n    i32_le_u(op1code, op2code) { return [...op1code, ...op2code, 0x4d]; }\n    i32_ge_s(op1code, op2code) { return [...op1code, ...op2code, 0x4e]; }\n    i32_ge_u(op1code, op2code) { return [...op1code, ...op2code, 0x4f]; }\n    i32_add(op1code, op2code) { return [...op1code, ...op2code, 0x6a]; }\n    i32_sub(op1code, op2code) { return [...op1code, ...op2code, 0x6b]; }\n    i32_mul(op1code, op2code) { return [...op1code, ...op2code, 0x6c]; }\n    i32_div_s(op1code, op2code) { return [...op1code, ...op2code, 0x6d]; }\n    i32_div_u(op1code, op2code) { return [...op1code, ...op2code, 0x6e]; }\n    i32_rem_s(op1code, op2code) { return [...op1code, ...op2code, 0x6f]; }\n    i32_rem_u(op1code, op2code) { return [...op1code, ...op2code, 0x70]; }\n    i32_and(op1code, op2code) { return [...op1code, ...op2code, 0x71]; }\n    i32_or(op1code, op2code) { return [...op1code, ...op2code, 0x72]; }\n    i32_xor(op1code, op2code) { return [...op1code, ...op2code, 0x73]; }\n    i32_shl(op1code, op2code) { return [...op1code, ...op2code, 0x74]; }\n    i32_shr_s(op1code, op2code) { return [...op1code, ...op2code, 0x75]; }\n    i32_shr_u(op1code, op2code) { return [...op1code, ...op2code, 0x76]; }\n    i32_rotl(op1code, op2code) { return [...op1code, ...op2code, 0x77]; }\n    i32_rotr(op1code, op2code) { return [...op1code, ...op2code, 0x78]; }\n    i32_wrap_i64(op1code) { return [...op1code, 0xa7]; }\n    i32_clz(op1code) { return [...op1code, 0x67]; }\n    i32_ctz(op1code) { return [...op1code, 0x68]; }\n\n    unreachable() { return [ 0x0 ]; }\n\n    current_memory() { return [ 0x3f, 0]; }\n\n    comment() { return []; }\n}\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\nconst typeCodes = {\n    \"i32\": 0x7f,\n    \"i64\": 0x7e,\n    \"f32\": 0x7d,\n    \"f64\": 0x7c,\n    \"anyfunc\": 0x70,\n    \"func\": 0x60,\n    \"emptyblock\": 0x40\n};\n\n\nclass FunctionBuilder {\n\n    constructor (module, fnName, fnType, moduleName, fieldName) {\n        if (fnType == \"import\") {\n            this.fnType = \"import\";\n            this.moduleName = moduleName;\n            this.fieldName = fieldName;\n        } else if (fnType == \"internal\") {\n            this.fnType = \"internal\";\n        } else {\n            throw new Error(\"Invalid function fnType: \" + fnType);\n        }\n        this.module = module;\n        this.fnName = fnName;\n        this.params = [];\n        this.locals = [];\n        this.localIdxByName = {};\n        this.code = [];\n        this.returnType = null;\n        this.nextLocal =0;\n    }\n\n    addParam(paramName, paramType) {\n        if (this.localIdxByName[paramName])\n            throw new Error(`param already exists. Function: ${this.fnName}, Param: ${paramName} `);\n        const idx = this.nextLocal++;\n        this.localIdxByName[paramName] = idx;\n        this.params.push({\n            type: paramType\n        });\n    }\n\n    addLocal(localName, localType, _length) {\n        const length = _length || 1;\n        if (this.localIdxByName[localName])\n            throw new Error(`local already exists. Function: ${this.fnName}, Param: ${localName} `);\n        const idx = this.nextLocal++;\n        this.localIdxByName[localName] = idx;\n        this.locals.push({\n            type: localType,\n            length: length\n        });\n    }\n\n    setReturnType(returnType) {\n        if (this.returnType)\n            throw new Error(`returnType already defined. Function: ${this.fnName}`);\n        this.returnType = returnType;\n    }\n\n    getSignature() {\n        const params = [...varuint32(this.params.length), ...this.params.map((p) => typeCodes[p.type])];\n        const returns = this.returnType ? [0x01, typeCodes[this.returnType]] : [0];\n        return [0x60, ...params, ...returns];\n    }\n\n    getBody() {\n        const locals = this.locals.map((l) => [\n            ...varuint32(l.length),\n            typeCodes[l.type]\n        ]);\n\n        const body = [\n            ...varuint32(this.locals.length),\n            ...[].concat(...locals),\n            ...this.code,\n            0x0b\n        ];\n        return [\n            ...varuint32(body.length),\n            ...body\n        ];\n    }\n\n    addCode(...code) {\n        this.code.push(...[].concat(...[...code]));\n    }\n\n    getCodeBuilder() {\n        return new CodeBuilder(this);\n    }\n}\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\nclass ModuleBuilder {\n\n    constructor() {\n        this.functions = [];\n        this.functionIdxByName = {};\n        this.nImportFunctions = 0;\n        this.nInternalFunctions =0;\n        this.memory = {\n            pagesSize: 1,\n            moduleName: \"env\",\n            fieldName: \"memory\"\n        };\n        this.free = 8;\n        this.datas = [];\n        this.modules = {};\n        this.exports = [];\n        this.functionsTable = [];\n    }\n\n    build() {\n        this._setSignatures();\n        return new Uint8Array([\n            ...u32(0x6d736100),\n            ...u32(1),\n            ...this._buildType(),\n            ...this._buildImport(),\n            ...this._buildFunctionDeclarations(),\n            ...this._buildFunctionsTable(),\n            ...this._buildExports(),\n            ...this._buildElements(),\n            ...this._buildCode(),\n            ...this._buildData()\n        ]);\n    }\n\n    addFunction(fnName) {\n        if (typeof(this.functionIdxByName[fnName]) !== \"undefined\")\n            throw new Error(`Function already defined: ${fnName}`);\n\n        const idx = this.functions.length;\n        this.functionIdxByName[fnName] = idx;\n\n        this.functions.push(new FunctionBuilder(this, fnName, \"internal\"));\n\n        this.nInternalFunctions++;\n        return this.functions[idx];\n    }\n\n    addIimportFunction(fnName, moduleName, _fieldName) {\n        if (typeof(this.functionIdxByName[fnName]) !== \"undefined\")\n            throw new Error(`Function already defined: ${fnName}`);\n\n        if (  (this.functions.length>0)\n            &&(this.functions[this.functions.length-1].type == \"internal\"))\n            throw new Error(`Import functions must be declared before internal: ${fnName}`);\n\n        let fieldName = _fieldName || fnName;\n\n        const idx = this.functions.length;\n        this.functionIdxByName[fnName] = idx;\n\n        this.functions.push(new FunctionBuilder(this, fnName, \"import\", moduleName, fieldName));\n\n        this.nImportFunctions ++;\n        return this.functions[idx];\n    }\n\n    setMemory(pagesSize, moduleName, fieldName) {\n        this.memory = {\n            pagesSize: pagesSize,\n            moduleName: moduleName || \"env\",\n            fieldName: fieldName || \"memory\"\n        };\n    }\n\n    exportFunction(fnName, _exportName) {\n        const exportName = _exportName || fnName;\n        if (typeof(this.functionIdxByName[fnName]) === \"undefined\")\n            throw new Error(`Function not defined: ${fnName}`);\n        const idx = this.functionIdxByName[fnName];\n        if (exportName != fnName) {\n            this.functionIdxByName[exportName] = idx;\n        }\n        this.exports.push({\n            exportName: exportName,\n            idx: idx\n        });\n    }\n\n    addFunctionToTable(fnName) {\n        const idx = this.functionIdxByName[fnName];\n        this.functionsTable.push(idx);\n    }\n\n    addData(offset, bytes) {\n        this.datas.push({\n            offset: offset,\n            bytes: bytes\n        });\n    }\n\n    alloc(a, b) {\n        let size;\n        let bytes;\n        if ((Array.isArray(a) || ArrayBuffer.isView(a)) && (typeof(b) === \"undefined\")) {\n            size = a.length;\n            bytes = a;\n        } else {\n            size = a;\n            bytes = b;\n        }\n        size = (((size-1)>>3) +1)<<3;       // Align to 64 bits.\n        const p = this.free;\n        this.free += size;\n        if (bytes) {\n            this.addData(p, bytes);\n        }\n        return p;\n    }\n\n    allocString(s) {\n        const encoder = new globalThis.TextEncoder();\n        const uint8array = encoder.encode(s);\n        return this.alloc([...uint8array, 0]);\n    }\n\n    _setSignatures() {\n        this.signatures = [];\n        const signatureIdxByName = {};\n        if (this.functionsTable.length>0) {\n            const signature = this.functions[this.functionsTable[0]].getSignature();\n            const signatureName = \"s_\"+toHexString(signature);\n            signatureIdxByName[signatureName] = 0;\n            this.signatures.push(signature);\n        }\n        for (let i=0; i<this.functions.length; i++) {\n            const signature = this.functions[i].getSignature();\n            const signatureName = \"s_\"+toHexString(signature);\n            if (typeof(signatureIdxByName[signatureName]) === \"undefined\") {\n                signatureIdxByName[signatureName] = this.signatures.length;\n                this.signatures.push(signature);\n            }\n\n            this.functions[i].signatureIdx = signatureIdxByName[signatureName];\n        }\n\n    }\n\n    _buildSection(sectionType, section) {\n        return [sectionType, ...varuint32(section.length), ...section];\n    }\n\n    _buildType() {\n        return this._buildSection(\n            0x01,\n            [\n                ...varuint32(this.signatures.length),\n                ...[].concat(...this.signatures)\n            ]\n        );\n    }\n\n    _buildImport() {\n        const entries = [];\n        entries.push([\n            ...string(this.memory.moduleName),\n            ...string(this.memory.fieldName),\n            0x02,\n            0x00,   //Flags no init valua\n            ...varuint32(this.memory.pagesSize)\n        ]);\n        for (let i=0; i< this.nImportFunctions; i++) {\n            entries.push([\n                ...string(this.functions[i].moduleName),\n                ...string(this.functions[i].fieldName),\n                0x00,\n                ...varuint32(this.functions[i].signatureIdx)\n            ]);\n        }\n        return this._buildSection(\n            0x02,\n            varuint32(entries.length).concat(...entries)\n        );\n    }\n\n    _buildFunctionDeclarations() {\n        const entries = [];\n        for (let i=this.nImportFunctions; i< this.nImportFunctions + this.nInternalFunctions; i++) {\n            entries.push(...varuint32(this.functions[i].signatureIdx));\n        }\n        return this._buildSection(\n            0x03,\n            [\n                ...varuint32(entries.length),\n                ...[...entries]\n            ]\n        );\n    }\n\n    _buildFunctionsTable() {\n        if (this.functionsTable.length == 0) return [];\n        return this._buildSection(\n            0x04,\n            [\n                ...varuint32(1),\n                0x70, 0, ...varuint32(this.functionsTable.length)\n            ]\n        );\n    }\n\n    _buildElements() {\n        if (this.functionsTable.length == 0) return [];\n        const entries = [];\n        for (let i=0; i<this.functionsTable.length; i++) {\n            entries.push(...varuint32(this.functionsTable[i]));\n        }\n        return this._buildSection(\n            0x09,\n            [\n                ...varuint32(1),      // 1 entry\n                ...varuint32(0),      // Table (0 in MVP)\n                0x41,                       // offset 0\n                ...varint32(0),\n                0x0b,\n                ...varuint32(this.functionsTable.length), // Number of elements\n                ...[...entries]\n            ]\n        );\n    }\n\n    _buildExports() {\n        const entries = [];\n        for (let i=0; i< this.exports.length; i++) {\n            entries.push([\n                ...string(this.exports[i].exportName),\n                0x00,\n                ...varuint32(this.exports[i].idx)\n            ]);\n        }\n        return this._buildSection(\n            0x07,\n            varuint32(entries.length).concat(...entries)\n        );\n    }\n\n    _buildCode() {\n        const entries = [];\n        for (let i=this.nImportFunctions; i< this.nImportFunctions + this.nInternalFunctions; i++) {\n            entries.push(this.functions[i].getBody());\n        }\n        return this._buildSection(\n            0x0a,\n            varuint32(entries.length).concat(...entries)\n        );\n    }\n\n    _buildData() {\n        const entries = [];\n        entries.push([\n            0x00,\n            0x41,\n            0x00,\n            0x0b,\n            0x04,\n            ...u32(this.free)\n        ]);\n        for (let i=0; i< this.datas.length; i++) {\n            entries.push([\n                0x00,\n                0x41,\n                ...varint32(this.datas[i].offset),\n                0x0b,\n                ...varuint32(this.datas[i].bytes.length),\n                ...this.datas[i].bytes,\n            ]);\n        }\n        return this._buildSection(\n            0x0b,\n            varuint32(entries.length).concat(...entries)\n        );\n    }\n\n}\n\nglobalThis.curve_bn128 = null;\n\nasync function buildBn128(singleThread, plugins) {\n    if ((!singleThread) && (globalThis.curve_bn128)) return globalThis.curve_bn128;\n\n    const moduleBuilder = new ModuleBuilder();\n    moduleBuilder.setMemory(25);\n    buildBn128$1(moduleBuilder);\n\n    if (plugins) plugins(moduleBuilder);\n\n    const bn128wasm = {};\n\n    bn128wasm.code = moduleBuilder.build();\n    bn128wasm.pq = moduleBuilder.modules.f1m.pq;\n    bn128wasm.pr = moduleBuilder.modules.frm.pq;\n    bn128wasm.pG1gen = moduleBuilder.modules.bn128.pG1gen;\n    bn128wasm.pG1zero = moduleBuilder.modules.bn128.pG1zero;\n    bn128wasm.pG1b = moduleBuilder.modules.bn128.pG1b;\n    bn128wasm.pG2gen = moduleBuilder.modules.bn128.pG2gen;\n    bn128wasm.pG2zero = moduleBuilder.modules.bn128.pG2zero;\n    bn128wasm.pG2b = moduleBuilder.modules.bn128.pG2b;\n    bn128wasm.pOneT = moduleBuilder.modules.bn128.pOneT;\n    bn128wasm.prePSize = moduleBuilder.modules.bn128.prePSize;\n    bn128wasm.preQSize = moduleBuilder.modules.bn128.preQSize;\n    bn128wasm.n8q = 32;\n    bn128wasm.n8r = 32;\n    bn128wasm.q = moduleBuilder.modules.bn128.q;\n    bn128wasm.r = moduleBuilder.modules.bn128.r;\n\n    const params = {\n        name: \"bn128\",\n        wasm: bn128wasm,\n        q: e(\"21888242871839275222246405745257275088696311157297823662689037894645226208583\"),\n        r: e(\"21888242871839275222246405745257275088548364400416034343698204186575808495617\"),\n        n8q: 32,\n        n8r: 32,\n        cofactorG2: e(\"30644e72e131a029b85045b68181585e06ceecda572a2489345f2299c0f9fa8d\", 16),\n        singleThread: singleThread ? true : false\n    };\n\n    const curve = await buildEngine(params);\n    curve.terminate = async function () {\n        if (!params.singleThread) {\n            globalThis.curve_bn128 = null;\n            await this.tm.terminate();\n        }\n    };\n\n    if (!singleThread) {\n        globalThis.curve_bn128 = curve;\n    }\n\n    return curve;\n}\n\nglobalThis.curve_bls12381 = null;\n\nasync function buildBls12381(singleThread, plugins) {\n    if ((!singleThread) && (globalThis.curve_bls12381)) return globalThis.curve_bls12381;\n\n    const moduleBuilder = new ModuleBuilder();\n    moduleBuilder.setMemory(25);\n    buildBls12381$1(moduleBuilder);\n\n    if (plugins) plugins(moduleBuilder);\n\n    const bls12381wasm = {};\n\n    bls12381wasm.code = moduleBuilder.build();\n    bls12381wasm.pq = moduleBuilder.modules.f1m.pq;\n    bls12381wasm.pr = moduleBuilder.modules.frm.pq;\n    bls12381wasm.pG1gen = moduleBuilder.modules.bls12381.pG1gen;\n    bls12381wasm.pG1zero = moduleBuilder.modules.bls12381.pG1zero;\n    bls12381wasm.pG1b = moduleBuilder.modules.bls12381.pG1b;\n    bls12381wasm.pG2gen = moduleBuilder.modules.bls12381.pG2gen;\n    bls12381wasm.pG2zero = moduleBuilder.modules.bls12381.pG2zero;\n    bls12381wasm.pG2b = moduleBuilder.modules.bls12381.pG2b;\n    bls12381wasm.pOneT = moduleBuilder.modules.bls12381.pOneT;\n    bls12381wasm.prePSize = moduleBuilder.modules.bls12381.prePSize;\n    bls12381wasm.preQSize = moduleBuilder.modules.bls12381.preQSize;\n    bls12381wasm.n8q = 48;\n    bls12381wasm.n8r = 32;\n    bls12381wasm.q = moduleBuilder.modules.bls12381.q;\n    bls12381wasm.r = moduleBuilder.modules.bls12381.r;\n\n\n    const params = {\n        name: \"bls12381\",\n        wasm: bls12381wasm,\n        q: e(\"1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab\", 16),\n        r: e(\"73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001\", 16),\n        n8q: 48,\n        n8r: 32,\n        cofactorG1: e(\"0x396c8c005555e1568c00aaab0000aaab\", 16),\n        cofactorG2: e(\"0x5d543a95414e7f1091d50792876a202cd91de4547085abaa68a205b2e5a7ddfa628f1cb4d9e82ef21537e293a6691ae1616ec6e786f0c70cf1c38e31c7238e5\", 16),\n        singleThread: singleThread ? true : false\n    };\n\n    const curve = await buildEngine(params);\n    curve.terminate = async function () {\n        if (!params.singleThread) {\n            globalThis.curve_bls12381 = null;\n            await this.tm.terminate();\n        }\n    };\n\n    if (!singleThread) {\n        globalThis.curve_bls12381 = curve;\n    }\n\n    return curve;\n}\n\nconst bls12381r = e(\"73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001\", 16);\nconst bn128r = e(\"21888242871839275222246405745257275088548364400416034343698204186575808495617\");\n\nconst bls12381q = e(\"1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab\", 16);\nconst bn128q = e(\"21888242871839275222246405745257275088696311157297823662689037894645226208583\");\n\nasync function getCurveFromR(r, singleThread, plugins) {\n    let curve;\n    if (eq(r, bn128r)) {\n        curve = await buildBn128(singleThread, plugins);\n    } else if (eq(r, bls12381r)) {\n        curve = await buildBls12381(singleThread, plugins);\n    } else {\n        throw new Error(`Curve not supported: ${toString(r)}`);\n    }\n    return curve;\n}\n\nasync function getCurveFromQ(q, singleThread, plugins) {\n    let curve;\n    if (eq(q, bn128q)) {\n        curve = await buildBn128(singleThread, plugins);\n    } else if (eq(q, bls12381q)) {\n        curve = await buildBls12381(singleThread, plugins);\n    } else {\n        throw new Error(`Curve not supported: ${toString(q, 16)}`);\n    }\n    return curve;\n}\n\nasync function getCurveFromName(name, singleThread, plugins) {\n    let curve;\n    const normName = normalizeName(name);\n    if ([\"BN128\", \"BN254\", \"ALTBN128\"].indexOf(normName) >= 0) {\n        curve = await buildBn128(singleThread, plugins);\n    } else if ([\"BLS12381\"].indexOf(normName) >= 0) {\n        curve = await buildBls12381(singleThread, plugins);\n    } else {\n        throw new Error(`Curve not supported: ${name}`);\n    }\n    return curve;\n\n    function normalizeName(n) {\n        return n.toUpperCase().match(/[A-Za-z0-9]+/g).join(\"\");\n    }\n\n}\n\nconst Scalar=_Scalar;\nconst utils = _utils;\n\nexport { BigBuffer, ChaCha, EC, ZqField as F1Field, F2Field, F3Field, PolField, Scalar, ZqField, buildBls12381, buildBn128, getCurveFromName, getCurveFromQ, getCurveFromR, utils };\n","import { Scalar, BigBuffer, buildBn128, buildBls12381, ChaCha, F1Field, utils, getCurveFromR as getCurveFromR$1 } from 'ffjavascript';\n\nvar fs = {};\n\nasync function open(fileName, openFlags, cacheSize, pageSize) {\n    cacheSize = cacheSize || 4096*64;\n    if (typeof openFlags !== \"number\" && [\"w+\", \"wx+\", \"r\", \"ax+\", \"a+\"].indexOf(openFlags) <0)\n        throw new Error(\"Invalid open option\");\n    const fd =await fs.promises.open(fileName, openFlags);\n\n    const stats = await fd.stat();\n\n    return  new FastFile(fd, stats, cacheSize, pageSize, fileName);\n}\n\n\nclass FastFile {\n\n    constructor(fd, stats, cacheSize, pageSize, fileName) {\n        this.fileName = fileName;\n        this.fd = fd;\n        this.pos = 0;\n        this.pageSize = pageSize || (1 << 8);\n        while (this.pageSize < stats.blksize) {\n            this.pageSize *= 2;\n        }\n        this.totalSize = stats.size;\n        this.totalPages = Math.floor((stats.size -1) / this.pageSize)+1;\n        this.maxPagesLoaded = Math.floor( cacheSize / this.pageSize)+1;\n        this.pages = {};\n        this.pendingLoads = [];\n        this.writing = false;\n        this.reading = false;\n        this.avBuffs = [];\n        this.history = {};\n    }\n\n    _loadPage(p) {\n        const self = this;\n        const P = new Promise((resolve, reject)=> {\n            self.pendingLoads.push({\n                page: p,\n                resolve: resolve,\n                reject: reject\n            });\n        });\n        self.__statusPage(\"After Load request: \", p);\n        return P;\n    }\n\n    __statusPage(s, p) {\n        const logEntry = [];\n        const self=this;\n        if (!self.logHistory) return;\n        logEntry.push(\"==\" + s+ \" \" +p);\n        let S = \"\";\n        for (let i=0; i<self.pendingLoads.length; i++) {\n            if (self.pendingLoads[i].page == p) S = S + \" \" + i;\n        }\n        if (S) logEntry.push(\"Pending loads:\"+S);\n        if (typeof self.pages[p] != \"undefined\") {\n            const page = self.pages[p];\n            logEntry.push(\"Loaded\");\n            logEntry.push(\"pendingOps: \"+page.pendingOps);\n            if (page.loading) logEntry.push(\"loading: \"+page.loading);\n            if (page.writing) logEntry.push(\"writing\");\n            if (page.dirty) logEntry.push(\"dirty\");\n        }\n        logEntry.push(\"==\");\n\n        if (!self.history[p]) self.history[p] = [];\n        self.history[p].push(logEntry);\n    }\n\n    __printHistory(p) {\n        const self = this;\n        if (!self.history[p]) console.log(\"Empty History \", p);\n        console.log(\"History \"+p);\n        for (let i=0; i<self.history[p].length; i++) {\n            for (let j=0; j<self.history[p][i].length; j++) {\n                console.log(\"-> \" + self.history[p][i][j]);\n            }\n        }\n    }\n\n\n\n    _triggerLoad() {\n        const self = this;\n\n        if (self.reading) return;\n        if (self.pendingLoads.length==0) return;\n\n        const pageIdxs = Object.keys(self.pages);\n\n        const deletablePages = [];\n        for (let i=0; i<pageIdxs.length; i++) {\n            const page = self.pages[parseInt(pageIdxs[i])];\n            if ((page.dirty == false)&&(page.pendingOps==0)&&(!page.writing)&&(!page.loading)) deletablePages.push(parseInt(pageIdxs[i]));\n        }\n\n        let freePages = self.maxPagesLoaded - pageIdxs.length;\n\n        const ops = [];\n\n        // while pending loads and\n        //     the page is loaded or I can recover one.\n        while (\n            (self.pendingLoads.length>0) &&\n            (   (typeof self.pages[self.pendingLoads[0].page] != \"undefined\" )\n              ||(  (freePages>0)\n                 ||(deletablePages.length>0)))) {\n            const load = self.pendingLoads.shift();\n            if (typeof self.pages[load.page] != \"undefined\") {\n                self.pages[load.page].pendingOps ++;\n                const idx = deletablePages.indexOf(load.page);\n                if (idx>=0) deletablePages.splice(idx, 1);\n                if (self.pages[load.page].loading) {\n                    self.pages[load.page].loading.push(load);\n                } else {\n                    load.resolve();\n                }\n                self.__statusPage(\"After Load (cached): \", load.page);\n\n            } else {\n                if (freePages) {\n                    freePages--;\n                } else {\n                    const fp = deletablePages.shift();\n                    self.__statusPage(\"Before Unload: \", fp);\n                    self.avBuffs.unshift(self.pages[fp]);\n                    delete self.pages[fp];\n                    self.__statusPage(\"After Unload: \", fp);\n                }\n\n                if (load.page>=self.totalPages) {\n                    self.pages[load.page] = getNewPage();\n                    load.resolve();\n                    self.__statusPage(\"After Load (new): \", load.page);\n                } else {\n                    self.reading = true;\n                    self.pages[load.page] = getNewPage();\n                    self.pages[load.page].loading = [load];\n                    ops.push(self.fd.read(self.pages[load.page].buff, 0, self.pageSize, load.page*self.pageSize).then((res)=> {\n                        self.pages[load.page].size = res.bytesRead;\n                        const loading = self.pages[load.page].loading;\n                        delete self.pages[load.page].loading;\n                        for (let i=0; i<loading.length; i++) {\n                            loading[i].resolve();\n                        }\n                        self.__statusPage(\"After Load (loaded): \", load.page);\n                        return res;\n                    }, (err) => {\n                        load.reject(err);\n                    }));\n                    self.__statusPage(\"After Load (loading): \", load.page);\n                }\n            }\n        }\n        // if (ops.length>1) console.log(ops.length);\n\n        Promise.all(ops).then( () => {\n            self.reading = false;\n            if (self.pendingLoads.length>0) setImmediate(self._triggerLoad.bind(self));\n            self._tryClose();\n        });\n\n        function getNewPage() {\n            if (self.avBuffs.length>0) {\n                const p = self.avBuffs.shift();\n                p.dirty = false;\n                p.pendingOps = 1;\n                p.size =0;\n                return p;\n            } else {\n                return {\n                    dirty: false,\n                    buff: new Uint8Array(self.pageSize),\n                    pendingOps: 1,\n                    size: 0\n                };\n            }\n        }\n\n    }\n\n\n    _triggerWrite() {\n        const self = this;\n        if (self.writing) return;\n\n        const pageIdxs = Object.keys(self.pages);\n\n        const ops = [];\n\n        for (let i=0; i<pageIdxs.length; i++) {\n            const page = self.pages[parseInt(pageIdxs[i])];\n            if (page.dirty) {\n                page.dirty = false;\n                page.writing = true;\n                self.writing = true;\n                ops.push( self.fd.write(page.buff, 0, page.size, parseInt(pageIdxs[i])*self.pageSize).then(() => {\n                    page.writing = false;\n                    return;\n                }, (err) => {\n                    console.log(\"ERROR Writing: \"+err);\n                    self.error = err;\n                    self._tryClose();\n                }));\n            }\n        }\n\n        if (self.writing) {\n            Promise.all(ops).then( () => {\n                self.writing = false;\n                setImmediate(self._triggerWrite.bind(self));\n                self._tryClose();\n                if (self.pendingLoads.length>0) setImmediate(self._triggerLoad.bind(self));\n            });\n        }\n    }\n\n    _getDirtyPage() {\n        for (let p in this.pages) {\n            if (this.pages[p].dirty) return p;\n        }\n        return -1;\n    }\n\n    async write(buff, pos) {\n        if (buff.byteLength == 0) return;\n        const self = this;\n/*\n        if (buff.byteLength > self.pageSize*self.maxPagesLoaded*0.8) {\n            const cacheSize = Math.floor(buff.byteLength * 1.1);\n            this.maxPagesLoaded = Math.floor( cacheSize / self.pageSize)+1;\n        }\n*/\n        if (typeof pos == \"undefined\") pos = self.pos;\n        self.pos = pos+buff.byteLength;\n        if (self.totalSize < pos + buff.byteLength) self.totalSize = pos + buff.byteLength;\n        if (self.pendingClose)\n            throw new Error(\"Writing a closing file\");\n        const firstPage = Math.floor(pos / self.pageSize);\n        const lastPage = Math.floor((pos + buff.byteLength -1) / self.pageSize);\n\n        const pagePromises = [];\n        for (let i=firstPage; i<=lastPage; i++) pagePromises.push(self._loadPage(i));\n        self._triggerLoad();\n\n        let p = firstPage;\n        let o = pos % self.pageSize;\n        let r = buff.byteLength;\n        while (r>0) {\n            await pagePromises[p-firstPage];\n            const l = (o+r > self.pageSize) ? (self.pageSize -o) : r;\n            const srcView = buff.slice( buff.byteLength - r, buff.byteLength - r + l);\n            const dstView = new Uint8Array(self.pages[p].buff.buffer, o, l);\n            dstView.set(srcView);\n            self.pages[p].dirty = true;\n            self.pages[p].pendingOps --;\n            self.pages[p].size = Math.max(o+l, self.pages[p].size);\n            if (p>=self.totalPages) {\n                self.totalPages = p+1;\n            }\n            r = r-l;\n            p ++;\n            o = 0;\n            if (!self.writing) setImmediate(self._triggerWrite.bind(self));\n        }\n    }\n\n    async read(len, pos) {\n        const self = this;\n        let buff = new Uint8Array(len);\n        await self.readToBuffer(buff, 0, len, pos);\n\n        return buff;\n    }\n\n    async readToBuffer(buffDst, offset, len, pos) {\n        if (len == 0) {\n            return;\n        }\n        const self = this;\n        if (len > self.pageSize*self.maxPagesLoaded*0.8) {\n            const cacheSize = Math.floor(len * 1.1);\n            this.maxPagesLoaded = Math.floor( cacheSize / self.pageSize)+1;\n        }\n        if (typeof pos == \"undefined\") pos = self.pos;\n        self.pos = pos+len;\n        if (self.pendingClose)\n            throw new Error(\"Reading a closing file\");\n        const firstPage = Math.floor(pos / self.pageSize);\n        const lastPage = Math.floor((pos + len -1) / self.pageSize);\n\n        const pagePromises = [];\n        for (let i=firstPage; i<=lastPage; i++) pagePromises.push(self._loadPage(i));\n\n        self._triggerLoad();\n\n        let p = firstPage;\n        let o = pos % self.pageSize;\n        // Remaining bytes to read\n        let r = pos + len > self.totalSize ? len - (pos + len - self.totalSize): len;\n        while (r>0) {\n            await pagePromises[p - firstPage];\n            self.__statusPage(\"After Await (read): \", p);\n\n            // bytes to copy from this page\n            const l = (o+r > self.pageSize) ? (self.pageSize -o) : r;\n            const srcView = new Uint8Array(self.pages[p].buff.buffer, self.pages[p].buff.byteOffset + o, l);\n            buffDst.set(srcView, offset+len-r);\n            self.pages[p].pendingOps --;\n\n            self.__statusPage(\"After Op done: \", p);\n\n            r = r-l;\n            p ++;\n            o = 0;\n            if (self.pendingLoads.length>0) setImmediate(self._triggerLoad.bind(self));\n        }\n\n        this.pos = pos + len;\n\n    }\n\n\n    _tryClose() {\n        const self = this;\n        if (!self.pendingClose) return;\n        if (self.error) {\n            self.pendingCloseReject(self.error);\n        }\n        const p = self._getDirtyPage();\n        if ((p>=0) || (self.writing) || (self.reading) || (self.pendingLoads.length>0)) return;\n        self.pendingClose();\n    }\n\n    close() {\n        const self = this;\n        if (self.pendingClose)\n            throw new Error(\"Closing the file twice\");\n        return new Promise((resolve, reject) => {\n            self.pendingClose = resolve;\n            self.pendingCloseReject = reject;\n            self._tryClose();\n        }).then(()=> {\n            self.fd.close();\n        }, (err) => {\n            self.fd.close();\n            throw (err);\n        });\n    }\n\n    async discard() {\n        const self = this;\n        await self.close();\n        await fs.promises.unlink(this.fileName);\n    }\n\n    async writeULE32(v, pos) {\n        const self = this;\n        const tmpBuff32 = new Uint8Array(4);\n        const tmpBuff32v = new DataView(tmpBuff32.buffer);\n\n        tmpBuff32v.setUint32(0, v, true);\n\n        await self.write(tmpBuff32, pos);\n    }\n\n    async writeUBE32(v, pos) {\n        const self = this;\n\n        const tmpBuff32 = new Uint8Array(4);\n        const tmpBuff32v = new DataView(tmpBuff32.buffer);\n\n        tmpBuff32v.setUint32(0, v, false);\n\n        await self.write(tmpBuff32, pos);\n    }\n\n\n    async writeULE64(v, pos) {\n        const self = this;\n\n        const tmpBuff64 = new Uint8Array(8);\n        const tmpBuff64v = new DataView(tmpBuff64.buffer);\n\n        tmpBuff64v.setUint32(0, v & 0xFFFFFFFF, true);\n        tmpBuff64v.setUint32(4, Math.floor(v / 0x100000000) , true);\n\n        await self.write(tmpBuff64, pos);\n    }\n\n    async readULE32(pos) {\n        const self = this;\n        const b = await self.read(4, pos);\n\n        const view = new Uint32Array(b.buffer);\n\n        return view[0];\n    }\n\n    async readUBE32(pos) {\n        const self = this;\n        const b = await self.read(4, pos);\n\n        const view = new DataView(b.buffer);\n\n        return view.getUint32(0, false);\n    }\n\n    async readULE64(pos) {\n        const self = this;\n        const b = await self.read(8, pos);\n\n        const view = new Uint32Array(b.buffer);\n\n        return view[1] * 0x100000000 + view[0];\n    }\n\n    async readString(pos) {\n        const self = this;\n\n        if (self.pendingClose) {\n            throw new Error(\"Reading a closing file\");\n        }\n\n        let currentPosition = typeof pos == \"undefined\" ? self.pos : pos;\n        let currentPage = Math.floor(currentPosition / self.pageSize);\n\n        let endOfStringFound = false;\n        let str = \"\";\n\n        while (!endOfStringFound) {\n            //Read page\n            let pagePromise = self._loadPage(currentPage);\n            self._triggerLoad();\n            await pagePromise;\n            self.__statusPage(\"After Await (read): \", currentPage);\n\n            let offsetOnPage = currentPosition % self.pageSize;\n\n            const dataArray = new Uint8Array(\n                self.pages[currentPage].buff.buffer,\n                self.pages[currentPage].buff.byteOffset + offsetOnPage,\n                self.pageSize - offsetOnPage\n            );\n\n            let indexEndOfString = dataArray.findIndex(element => element === 0);\n            endOfStringFound = indexEndOfString !== -1;\n\n            if (endOfStringFound) {\n                str += new TextDecoder().decode(dataArray.slice(0, indexEndOfString));\n                self.pos = currentPage * this.pageSize + offsetOnPage + indexEndOfString + 1;\n            } else {\n                str += new TextDecoder().decode(dataArray);\n                self.pos = currentPage * this.pageSize + offsetOnPage + dataArray.length;\n            }\n\n            self.pages[currentPage].pendingOps--;\n            self.__statusPage(\"After Op done: \", currentPage);\n\n            currentPosition = self.pos;\n            currentPage++;\n\n            if (self.pendingLoads.length > 0) setImmediate(self._triggerLoad.bind(self));\n        }\n\n        return str;\n    }\n}\n\nfunction createNew$1(o) {\n    const initialSize = o.initialSize || 1<<20;\n    const fd = new MemFile();\n    fd.o = o;\n    fd.o.data = new Uint8Array(initialSize);\n    fd.allocSize = initialSize;\n    fd.totalSize = 0;\n    fd.readOnly = false;\n    fd.pos = 0;\n    return fd;\n}\n\nfunction readExisting$2(o) {\n    const fd = new MemFile();\n    fd.o = o;\n    fd.allocSize = o.data.byteLength;\n    fd.totalSize = o.data.byteLength;\n    fd.readOnly = true;\n    fd.pos = 0;\n    return fd;\n}\n\nconst tmpBuff32$1 = new Uint8Array(4);\nconst tmpBuff32v$1 = new DataView(tmpBuff32$1.buffer);\nconst tmpBuff64$1 = new Uint8Array(8);\nconst tmpBuff64v$1 = new DataView(tmpBuff64$1.buffer);\n\nclass MemFile {\n\n    constructor() {\n        this.pageSize = 1 << 14;  // for compatibility\n    }\n\n    _resizeIfNeeded(newLen) {\n        if (newLen > this.allocSize) {\n            const newAllocSize = Math.max(\n                this.allocSize + (1 << 20),\n                Math.floor(this.allocSize * 1.1),\n                newLen\n            );\n            const newData = new Uint8Array(newAllocSize);\n            newData.set(this.o.data);\n            this.o.data = newData;\n            this.allocSize = newAllocSize;\n        }\n    }\n\n    async write(buff, pos) {\n        const self =this;\n        if (typeof pos == \"undefined\") pos = self.pos;\n        if (this.readOnly) throw new Error(\"Writing a read only file\");\n\n        this._resizeIfNeeded(pos + buff.byteLength);\n\n        this.o.data.set(buff.slice(), pos);\n\n        if (pos + buff.byteLength > this.totalSize) this.totalSize = pos + buff.byteLength;\n\n        this.pos = pos + buff.byteLength;\n    }\n\n    async readToBuffer(buffDest, offset, len, pos) {\n        const self = this;\n        if (typeof pos == \"undefined\") pos = self.pos;\n        if (this.readOnly) {\n            if (pos + len > this.totalSize) throw new Error(\"Reading out of bounds\");\n        }\n        this._resizeIfNeeded(pos + len);\n\n        const buffSrc = new Uint8Array(this.o.data.buffer, this.o.data.byteOffset + pos, len);\n\n        buffDest.set(buffSrc, offset);\n\n        this.pos = pos + len;\n    }\n\n    async read(len, pos) {\n        const self = this;\n\n        const buff = new Uint8Array(len);\n        await self.readToBuffer(buff, 0, len, pos);\n\n        return buff;\n    }\n\n    close() {\n        if (this.o.data.byteLength != this.totalSize) {\n            this.o.data = this.o.data.slice(0, this.totalSize);\n        }\n    }\n\n    async discard() {\n    }\n\n\n    async writeULE32(v, pos) {\n        const self = this;\n\n        tmpBuff32v$1.setUint32(0, v, true);\n\n        await self.write(tmpBuff32$1, pos);\n    }\n\n    async writeUBE32(v, pos) {\n        const self = this;\n\n        tmpBuff32v$1.setUint32(0, v, false);\n\n        await self.write(tmpBuff32$1, pos);\n    }\n\n\n    async writeULE64(v, pos) {\n        const self = this;\n\n        tmpBuff64v$1.setUint32(0, v & 0xFFFFFFFF, true);\n        tmpBuff64v$1.setUint32(4, Math.floor(v / 0x100000000) , true);\n\n        await self.write(tmpBuff64$1, pos);\n    }\n\n\n    async readULE32(pos) {\n        const self = this;\n        const b = await self.read(4, pos);\n\n        const view = new Uint32Array(b.buffer);\n\n        return view[0];\n    }\n\n    async readUBE32(pos) {\n        const self = this;\n        const b = await self.read(4, pos);\n\n        const view = new DataView(b.buffer);\n\n        return view.getUint32(0, false);\n    }\n\n    async readULE64(pos) {\n        const self = this;\n        const b = await self.read(8, pos);\n\n        const view = new Uint32Array(b.buffer);\n\n        return view[1] * 0x100000000 + view[0];\n    }\n\n    async readString(pos) {\n        const self = this;\n\n        let currentPosition = typeof pos == \"undefined\" ? self.pos : pos;\n\n        if (currentPosition > this.totalSize) {\n            if (this.readOnly) {\n                throw new Error(\"Reading out of bounds\");\n            }\n            this._resizeIfNeeded(pos);\n        }\n        const dataArray = new Uint8Array(\n            self.o.data.buffer,\n            currentPosition,\n            this.totalSize - currentPosition\n        );\n\n        let indexEndOfString = dataArray.findIndex(element => element === 0);\n        let endOfStringFound = indexEndOfString !== -1;\n\n        let str = \"\";\n        if (endOfStringFound) {\n            str = new TextDecoder().decode(dataArray.slice(0, indexEndOfString));\n            self.pos = currentPosition + indexEndOfString + 1;\n        } else {\n            self.pos = currentPosition;\n        }\n        return str;\n    }\n}\n\nconst PAGE_SIZE = 1<<22;\n\nfunction createNew(o) {\n    const initialSize = o.initialSize || 0;\n    const fd = new BigMemFile();\n    fd.o = o;\n    const nPages = initialSize ? Math.floor((initialSize - 1) / PAGE_SIZE)+1 : 0;\n    fd.o.data = [];\n    for (let i=0; i<nPages-1; i++) {\n        fd.o.data.push( new Uint8Array(PAGE_SIZE));\n    }\n    if (nPages) fd.o.data.push( new Uint8Array(initialSize - PAGE_SIZE*(nPages-1)));\n    fd.totalSize = 0;\n    fd.readOnly = false;\n    fd.pos = 0;\n    return fd;\n}\n\nfunction readExisting$1(o) {\n    const fd = new BigMemFile();\n    fd.o = o;\n    fd.totalSize = (o.data.length-1)* PAGE_SIZE + o.data[o.data.length-1].byteLength;\n    fd.readOnly = true;\n    fd.pos = 0;\n    return fd;\n}\n\nconst tmpBuff32 = new Uint8Array(4);\nconst tmpBuff32v = new DataView(tmpBuff32.buffer);\nconst tmpBuff64 = new Uint8Array(8);\nconst tmpBuff64v = new DataView(tmpBuff64.buffer);\n\nclass BigMemFile {\n\n    constructor() {\n        this.pageSize = 1 << 14;  // for compatibility\n    }\n\n    _resizeIfNeeded(newLen) {\n\n        if (newLen <= this.totalSize) return;\n\n        if (this.readOnly) throw new Error(\"Reading out of file bounds\");\n\n        const nPages = Math.floor((newLen - 1) / PAGE_SIZE)+1;\n        for (let i= Math.max(this.o.data.length-1, 0); i<nPages; i++) {\n            const newSize = i<nPages-1 ? PAGE_SIZE : newLen - (nPages-1)*PAGE_SIZE;\n            const p = new Uint8Array(newSize);\n            if (i == this.o.data.length-1) p.set(this.o.data[i]);\n            this.o.data[i] = p;\n        }\n        this.totalSize = newLen;\n    }\n\n    async write(buff, pos) {\n        const self =this;\n        if (typeof pos == \"undefined\") pos = self.pos;\n        if (this.readOnly) throw new Error(\"Writing a read only file\");\n\n        this._resizeIfNeeded(pos + buff.byteLength);\n\n        const firstPage = Math.floor(pos / PAGE_SIZE);\n\n        let p = firstPage;\n        let o = pos % PAGE_SIZE;\n        let r = buff.byteLength;\n        while (r>0) {\n            const l = (o+r > PAGE_SIZE) ? (PAGE_SIZE -o) : r;\n            const srcView = buff.slice(buff.byteLength - r, buff.byteLength - r + l);\n            const dstView = new Uint8Array(self.o.data[p].buffer, o, l);\n            dstView.set(srcView);\n            r = r-l;\n            p ++;\n            o = 0;\n        }\n\n        this.pos = pos + buff.byteLength;\n    }\n\n    async readToBuffer(buffDst, offset, len, pos) {\n        const self = this;\n        if (typeof pos == \"undefined\") pos = self.pos;\n        if (this.readOnly) {\n            if (pos + len > this.totalSize) throw new Error(\"Reading out of bounds\");\n        }\n        this._resizeIfNeeded(pos + len);\n\n        const firstPage = Math.floor(pos / PAGE_SIZE);\n\n        let p = firstPage;\n        let o = pos % PAGE_SIZE;\n        // Remaining bytes to read\n        let r = len;\n        while (r>0) {\n            // bytes to copy from this page\n            const l = (o+r > PAGE_SIZE) ? (PAGE_SIZE -o) : r;\n            const srcView = new Uint8Array(self.o.data[p].buffer, o, l);\n            buffDst.set(srcView, offset+len-r);\n            r = r-l;\n            p ++;\n            o = 0;\n        }\n\n        this.pos = pos + len;\n    }\n\n    async read(len, pos) {\n        const self = this;\n        const buff = new Uint8Array(len);\n\n        await self.readToBuffer(buff, 0, len, pos);\n\n        return buff;\n    }\n\n    close() {\n    }\n\n    async discard() {\n    }\n\n\n    async writeULE32(v, pos) {\n        const self = this;\n\n        tmpBuff32v.setUint32(0, v, true);\n\n        await self.write(tmpBuff32, pos);\n    }\n\n    async writeUBE32(v, pos) {\n        const self = this;\n\n        tmpBuff32v.setUint32(0, v, false);\n\n        await self.write(tmpBuff32, pos);\n    }\n\n\n    async writeULE64(v, pos) {\n        const self = this;\n\n        tmpBuff64v.setUint32(0, v & 0xFFFFFFFF, true);\n        tmpBuff64v.setUint32(4, Math.floor(v / 0x100000000) , true);\n\n        await self.write(tmpBuff64, pos);\n    }\n\n\n    async readULE32(pos) {\n        const self = this;\n        const b = await self.read(4, pos);\n\n        const view = new Uint32Array(b.buffer);\n\n        return view[0];\n    }\n\n    async readUBE32(pos) {\n        const self = this;\n        const b = await self.read(4, pos);\n\n        const view = new DataView(b.buffer);\n\n        return view.getUint32(0, false);\n    }\n\n    async readULE64(pos) {\n        const self = this;\n        const b = await self.read(8, pos);\n\n        const view = new Uint32Array(b.buffer);\n\n        return view[1] * 0x100000000 + view[0];\n    }\n\n    async readString(pos) {\n        const self = this;\n        const fixedSize = 2048;\n\n        let currentPosition = typeof pos == \"undefined\" ? self.pos : pos;\n\n        if (currentPosition > this.totalSize) {\n            if (this.readOnly) {\n                throw new Error(\"Reading out of bounds\");\n            }\n            this._resizeIfNeeded(pos);\n        }\n\n        let endOfStringFound = false;\n        let str = \"\";\n\n        while (!endOfStringFound) {\n            let currentPage = Math.floor(currentPosition / PAGE_SIZE);\n            let offsetOnPage = currentPosition % PAGE_SIZE;\n\n            if (self.o.data[currentPage] === undefined) {\n                throw new Error(\"ERROR\");\n            }\n\n            let readLength = Math.min(fixedSize, self.o.data[currentPage].length - offsetOnPage);\n            const dataArray = new Uint8Array(self.o.data[currentPage].buffer, offsetOnPage, readLength);\n\n            let indexEndOfString = dataArray.findIndex(element => element === 0);\n            endOfStringFound = indexEndOfString !== -1;\n\n            if (endOfStringFound) {\n                str += new TextDecoder().decode(dataArray.slice(0, indexEndOfString));\n                self.pos = currentPage * PAGE_SIZE + offsetOnPage + indexEndOfString + 1;\n            } else {\n                str += new TextDecoder().decode(dataArray);\n                self.pos = currentPage * PAGE_SIZE + offsetOnPage + dataArray.length;\n            }\n\n            currentPosition = self.pos;\n        }\n        return str;\n    }\n}\n\nconst O_TRUNC = 1024;\nconst O_CREAT = 512;\nconst O_RDWR = 2;\nconst O_RDONLY = 0;\n\n/* global fetch */\n\nconst DEFAULT_CACHE_SIZE = (1 << 16);\nconst DEFAULT_PAGE_SIZE = (1 << 13);\n\n\nasync function createOverride(o, b, c) {\n    if (typeof o === \"string\") {\n        o = {\n            type: \"file\",\n            fileName: o,\n            cacheSize: b || DEFAULT_CACHE_SIZE,\n            pageSize: c || DEFAULT_PAGE_SIZE\n        };\n    }\n    if (o.type == \"file\") {\n        return await open(o.fileName, O_TRUNC | O_CREAT | O_RDWR, o.cacheSize, o.pageSize);\n    } else if (o.type == \"mem\") {\n        return createNew$1(o);\n    } else if (o.type == \"bigMem\") {\n        return createNew(o);\n    } else {\n        throw new Error(\"Invalid FastFile type: \"+o.type);\n    }\n}\n\nasync function readExisting(o, b, c) {\n    if (o instanceof Uint8Array) {\n        o = {\n            type: \"mem\",\n            data: o\n        };\n    }\n    {\n        if (typeof o === \"string\") {\n            const buff = await fetch(o).then( function(res) {\n                return res.arrayBuffer();\n            }).then(function (ab) {\n                return new Uint8Array(ab);\n            });\n            o = {\n                type: \"mem\",\n                data: buff\n            };\n        }\n    }\n    if (o.type == \"file\") {\n        return await open(o.fileName, O_RDONLY, o.cacheSize, o.pageSize);\n    } else if (o.type == \"mem\") {\n        return await readExisting$2(o);\n    } else if (o.type == \"bigMem\") {\n        return await readExisting$1(o);\n    } else {\n        throw new Error(\"Invalid FastFile type: \"+o.type);\n    }\n}\n\nasync function readBinFile(fileName, type, maxVersion, cacheSize, pageSize) {\n\n    const fd = await readExisting(fileName);\n\n    const b = await fd.read(4);\n    let readedType = \"\";\n    for (let i=0; i<4; i++) readedType += String.fromCharCode(b[i]);\n\n    if (readedType != type) throw new Error(fileName + \": Invalid File format\");\n\n    let v = await fd.readULE32();\n\n    if (v>maxVersion) throw new Error(\"Version not supported\");\n\n    const nSections = await fd.readULE32();\n\n    // Scan sections\n    let sections = [];\n    for (let i=0; i<nSections; i++) {\n        let ht = await fd.readULE32();\n        let hl = await fd.readULE64();\n        if (typeof sections[ht] == \"undefined\") sections[ht] = [];\n        sections[ht].push({\n            p: fd.pos,\n            size: hl\n        });\n        fd.pos += hl;\n    }\n\n    return {fd, sections};\n}\n\nasync function createBinFile(fileName, type, version, nSections, cacheSize, pageSize) {\n\n    const fd = await createOverride(fileName, cacheSize, pageSize);\n\n    const buff = new Uint8Array(4);\n    for (let i=0; i<4; i++) buff[i] = type.charCodeAt(i);\n    await fd.write(buff, 0); // Magic \"r1cs\"\n\n    await fd.writeULE32(version); // Version\n    await fd.writeULE32(nSections); // Number of Sections\n\n    return fd;\n}\n\nasync function startWriteSection(fd, idSection) {\n    if (typeof fd.writingSection !== \"undefined\") throw new Error(\"Already writing a section\");\n    await fd.writeULE32(idSection); // Header type\n    fd.writingSection = {\n        pSectionSize: fd.pos\n    };\n    await fd.writeULE64(0); // Temporally set to 0 length\n}\n\nasync function endWriteSection(fd) {\n    if (typeof fd.writingSection === \"undefined\") throw new Error(\"Not writing a section\");\n\n    const sectionSize = fd.pos - fd.writingSection.pSectionSize - 8;\n    const oldPos = fd.pos;\n    fd.pos = fd.writingSection.pSectionSize;\n    await fd.writeULE64(sectionSize);\n    fd.pos = oldPos;\n    delete fd.writingSection;\n}\n\nasync function startReadUniqueSection(fd, sections, idSection) {\n    if (typeof fd.readingSection !== \"undefined\") throw new Error(\"Already reading a section\");\n    if (!sections[idSection])  throw new Error(fd.fileName + \": Missing section \"+ idSection );\n    if (sections[idSection].length>1) throw new Error(fd.fileName +\": Section Duplicated \" +idSection);\n\n    fd.pos = sections[idSection][0].p;\n\n    fd.readingSection = sections[idSection][0];\n}\n\nasync function endReadSection(fd, noCheck) {\n    if (typeof fd.readingSection === \"undefined\") throw new Error(\"Not reading a section\");\n    if (!noCheck) {\n        if (fd.pos-fd.readingSection.p !=  fd.readingSection.size) throw new Error(\"Invalid section size reading\");\n    }\n    delete fd.readingSection;\n}\n\nasync function writeBigInt(fd, n, n8, pos) {\n    const buff = new Uint8Array(n8);\n    Scalar.toRprLE(buff, 0, n, n8);\n    await fd.write(buff, pos);\n}\n\nasync function readBigInt(fd, n8, pos) {\n    const buff = await fd.read(n8, pos);\n    return Scalar.fromRprLE(buff, 0, n8);\n}\n\nasync function copySection(fdFrom, sections, fdTo, sectionId, size) {\n    if (typeof size === \"undefined\") {\n        size = sections[sectionId][0].size;\n    }\n    const chunkSize = fdFrom.pageSize;\n    await startReadUniqueSection(fdFrom, sections, sectionId);\n    await startWriteSection(fdTo, sectionId);\n    for (let p=0; p<size; p+=chunkSize) {\n        const l = Math.min(size -p, chunkSize);\n        const buff = await fdFrom.read(l);\n        await fdTo.write(buff);\n    }\n    await endWriteSection(fdTo);\n    await endReadSection(fdFrom, size != sections[sectionId][0].size);\n\n}\n\nasync function readSection(fd, sections, idSection, offset, length) {\n\n    offset = (typeof offset === \"undefined\") ? 0 : offset;\n    length = (typeof length === \"undefined\") ? sections[idSection][0].size - offset : length;\n\n    if (offset + length > sections[idSection][0].size) {\n        throw new Error(\"Reading out of the range of the section\");\n    }\n\n    let buff;\n    if (length < (1 << 30) ) {\n        buff = new Uint8Array(length);\n    } else {\n        buff = new BigBuffer(length);\n    }\n\n    await fd.readToBuffer(buff, 0, length, sections[idSection][0].p + offset);\n    return buff;\n}\n\nasync function sectionIsEqual(fd1, sections1, fd2, sections2, idSection) {\n    const MAX_BUFF_SIZE = fd1.pageSize * 16;\n    await startReadUniqueSection(fd1, sections1, idSection);\n    await startReadUniqueSection(fd2, sections2, idSection);\n    if (sections1[idSection][0].size != sections2[idSection][0].size) return false;\n    const totalBytes=sections1[idSection][0].size;\n    for (let i=0; i<totalBytes; i+= MAX_BUFF_SIZE) {\n        const n = Math.min(totalBytes-i, MAX_BUFF_SIZE);\n        const buff1 = await fd1.read(n);\n        const buff2 = await fd2.read(n);\n        for (let j=0; j<n; j++) if (buff1[j] != buff2[j]) return false;\n    }\n    await endReadSection(fd1);\n    await endReadSection(fd2);\n    return true;\n}\n\nconst bls12381r$1 = Scalar.e(\"73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001\", 16);\nconst bn128r$1 = Scalar.e(\"21888242871839275222246405745257275088548364400416034343698204186575808495617\");\n\nconst bls12381q = Scalar.e(\"1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab\", 16);\nconst bn128q = Scalar.e(\"21888242871839275222246405745257275088696311157297823662689037894645226208583\");\n\nasync function getCurveFromR(r) {\n    let curve;\n    if (Scalar.eq(r, bn128r$1)) {\n        curve = await buildBn128();\n    } else if (Scalar.eq(r, bls12381r$1)) {\n        curve = await buildBls12381();\n    } else {\n        throw new Error(`Curve not supported: ${Scalar.toString(r)}`);\n    }\n    return curve;\n}\n\nasync function getCurveFromQ(q) {\n    let curve;\n    if (Scalar.eq(q, bn128q)) {\n        curve = await buildBn128();\n    } else if (Scalar.eq(q, bls12381q)) {\n        curve = await buildBls12381();\n    } else {\n        throw new Error(`Curve not supported: ${Scalar.toString(q)}`);\n    }\n    return curve;\n}\n\nasync function getCurveFromName(name) {\n    let curve;\n    const normName = normalizeName(name);\n    if ([\"BN128\", \"BN254\", \"ALTBN128\"].indexOf(normName) >= 0) {\n        curve = await buildBn128();\n    } else if ([\"BLS12381\"].indexOf(normName) >= 0) {\n        curve = await buildBls12381();\n    } else {\n        throw new Error(`Curve not supported: ${name}`);\n    }\n    return curve;\n\n    function normalizeName(n) {\n        return n.toUpperCase().match(/[A-Za-z0-9]+/g).join(\"\");\n    }\n\n}\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nvar blake2bWasm = {exports: {}};\n\nvar nanoassert = assert$1;\n\nclass AssertionError extends Error {}\nAssertionError.prototype.name = 'AssertionError';\n\n/**\n * Minimal assert function\n * @param  {any} t Value to check if falsy\n * @param  {string=} m Optional assertion error message\n * @throws {AssertionError}\n */\nfunction assert$1 (t, m) {\n  if (!t) {\n    var err = new AssertionError(m);\n    if (Error.captureStackTrace) Error.captureStackTrace(err, assert$1);\n    throw err\n  }\n}\n\nvar browser = {exports: {}};\n\nfunction byteLength$4 (string) {\n  return string.length\n}\n\nfunction toString$4 (buffer) {\n  const len = buffer.byteLength;\n\n  let result = '';\n\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buffer[i]);\n  }\n\n  return result\n}\n\nfunction write$5 (buffer, string, offset = 0, length = byteLength$4(string)) {\n  const len = Math.min(length, buffer.byteLength - offset);\n\n  for (let i = 0; i < len; i++) {\n    buffer[offset + i] = string.charCodeAt(i);\n  }\n\n  return len\n}\n\nvar ascii = {\n  byteLength: byteLength$4,\n  toString: toString$4,\n  write: write$5\n};\n\nconst alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nconst codes = new Uint8Array(256);\n\nfor (let i = 0; i < alphabet.length; i++) {\n  codes[alphabet.charCodeAt(i)] = i;\n}\n\ncodes[/* - */ 0x2d] = 62;\ncodes[/* _ */ 0x5f] = 63;\n\nfunction byteLength$3 (string) {\n  let len = string.length;\n\n  if (string.charCodeAt(len - 1) === 0x3d) len--;\n  if (len > 1 && string.charCodeAt(len - 1) === 0x3d) len--;\n\n  return (len * 3) >>> 2\n}\n\nfunction toString$3 (buffer) {\n  const len = buffer.byteLength;\n\n  let result = '';\n\n  for (let i = 0; i < len; i += 3) {\n    result += (\n      alphabet[buffer[i] >> 2] +\n      alphabet[((buffer[i] & 3) << 4) | (buffer[i + 1] >> 4)] +\n      alphabet[((buffer[i + 1] & 15) << 2) | (buffer[i + 2] >> 6)] +\n      alphabet[buffer[i + 2] & 63]\n    );\n  }\n\n  if (len % 3 === 2) {\n    result = result.substring(0, result.length - 1) + '=';\n  } else if (len % 3 === 1) {\n    result = result.substring(0, result.length - 2) + '==';\n  }\n\n  return result\n}\nfunction write$4 (buffer, string, offset = 0, length = byteLength$3(string)) {\n  const len = Math.min(length, buffer.byteLength - offset);\n\n  for (let i = 0, j = 0; j < len; i += 4) {\n    const a = codes[string.charCodeAt(i)];\n    const b = codes[string.charCodeAt(i + 1)];\n    const c = codes[string.charCodeAt(i + 2)];\n    const d = codes[string.charCodeAt(i + 3)];\n\n    buffer[j++] = (a << 2) | (b >> 4);\n    buffer[j++] = ((b & 15) << 4) | (c >> 2);\n    buffer[j++] = ((c & 3) << 6) | (d & 63);\n  }\n\n  return len\n}\nvar base64 = {\n  byteLength: byteLength$3,\n  toString: toString$3,\n  write: write$4\n};\n\nfunction byteLength$2 (string) {\n  return string.length >>> 1\n}\n\nfunction toString$2 (buffer) {\n  const len = buffer.byteLength;\n\n  buffer = new DataView(buffer.buffer, buffer.byteOffset, len);\n\n  let result = '';\n  let i = 0;\n\n  for (let n = len - (len % 4); i < n; i += 4) {\n    result += buffer.getUint32(i).toString(16).padStart(8, '0');\n  }\n\n  for (; i < len; i++) {\n    result += buffer.getUint8(i).toString(16).padStart(2, '0');\n  }\n\n  return result\n}\n\nfunction write$3 (buffer, string, offset = 0, length = byteLength$2(string)) {\n  const len = Math.min(length, buffer.byteLength - offset);\n\n  for (let i = 0; i < len; i++) {\n    const a = hexValue(string.charCodeAt(i * 2));\n    const b = hexValue(string.charCodeAt(i * 2 + 1));\n\n    if (a === undefined || b === undefined) {\n      return buffer.subarray(0, i)\n    }\n\n    buffer[offset + i] = (a << 4) | b;\n  }\n\n  return len\n}\n\nvar hex = {\n  byteLength: byteLength$2,\n  toString: toString$2,\n  write: write$3\n};\n\nfunction hexValue (char) {\n  if (char >= 0x30 && char <= 0x39) return char - 0x30\n  if (char >= 0x41 && char <= 0x46) return char - 0x41 + 10\n  if (char >= 0x61 && char <= 0x66) return char - 0x61 + 10\n}\n\nfunction byteLength$1 (string) {\n  let length = 0;\n\n  for (let i = 0, n = string.length; i < n; i++) {\n    const code = string.charCodeAt(i);\n\n    if (code >= 0xd800 && code <= 0xdbff && i + 1 < n) {\n      const code = string.charCodeAt(i + 1);\n\n      if (code >= 0xdc00 && code <= 0xdfff) {\n        length += 4;\n        i++;\n        continue\n      }\n    }\n\n    if (code <= 0x7f) length += 1;\n    else if (code <= 0x7ff) length += 2;\n    else length += 3;\n  }\n\n  return length\n}\n\nlet toString$1;\n\nif (typeof TextDecoder !== 'undefined') {\n  const decoder = new TextDecoder();\n\n  toString$1 = function toString (buffer) {\n    return decoder.decode(buffer)\n  };\n} else {\n  toString$1 = function toString (buffer) {\n    const len = buffer.byteLength;\n\n    let output = '';\n    let i = 0;\n\n    while (i < len) {\n      let byte = buffer[i];\n\n      if (byte <= 0x7f) {\n        output += String.fromCharCode(byte);\n        i++;\n        continue\n      }\n\n      let bytesNeeded = 0;\n      let codePoint = 0;\n\n      if (byte <= 0xdf) {\n        bytesNeeded = 1;\n        codePoint = byte & 0x1f;\n      } else if (byte <= 0xef) {\n        bytesNeeded = 2;\n        codePoint = byte & 0x0f;\n      } else if (byte <= 0xf4) {\n        bytesNeeded = 3;\n        codePoint = byte & 0x07;\n      }\n\n      if (len - i - bytesNeeded > 0) {\n        let k = 0;\n\n        while (k < bytesNeeded) {\n          byte = buffer[i + k + 1];\n          codePoint = (codePoint << 6) | (byte & 0x3f);\n          k += 1;\n        }\n      } else {\n        codePoint = 0xfffd;\n        bytesNeeded = len - i;\n      }\n\n      output += String.fromCodePoint(codePoint);\n      i += bytesNeeded + 1;\n    }\n\n    return output\n  };\n}\n\nlet write$2;\n\nif (typeof TextEncoder !== 'undefined') {\n  const encoder = new TextEncoder();\n\n  write$2 = function write (buffer, string, offset = 0, length = byteLength$1(string)) {\n    const len = Math.min(length, buffer.byteLength - offset);\n    encoder.encodeInto(string, buffer.subarray(offset, offset + len));\n    return len\n  };\n} else {\n  write$2 = function write (buffer, string, offset = 0, length = byteLength$1(string)) {\n    const len = Math.min(length, buffer.byteLength - offset);\n\n    buffer = buffer.subarray(offset, offset + len);\n\n    let i = 0;\n    let j = 0;\n\n    while (i < string.length) {\n      const code = string.codePointAt(i);\n\n      if (code <= 0x7f) {\n        buffer[j++] = code;\n        i++;\n        continue\n      }\n\n      let count = 0;\n      let bits = 0;\n\n      if (code <= 0x7ff) {\n        count = 6;\n        bits = 0xc0;\n      } else if (code <= 0xffff) {\n        count = 12;\n        bits = 0xe0;\n      } else if (code <= 0x1fffff) {\n        count = 18;\n        bits = 0xf0;\n      }\n\n      buffer[j++] = bits | (code >> count);\n      count -= 6;\n\n      while (count >= 0) {\n        buffer[j++] = 0x80 | ((code >> count) & 0x3f);\n        count -= 6;\n      }\n\n      i += code >= 0x10000 ? 2 : 1;\n    }\n\n    return len\n  };\n}\n\nvar utf8 = {\n  byteLength: byteLength$1,\n  toString: toString$1,\n  write: write$2\n};\n\nfunction byteLength (string) {\n  return string.length * 2\n}\n\nfunction toString (buffer) {\n  const len = buffer.byteLength;\n\n  let result = '';\n\n  for (let i = 0; i < len - 1; i += 2) {\n    result += String.fromCharCode(buffer[i] + (buffer[i + 1] * 256));\n  }\n\n  return result\n}\n\nfunction write$1 (buffer, string, offset = 0, length = byteLength(string)) {\n  const len = Math.min(length, buffer.byteLength - offset);\n\n  let units = len;\n\n  for (let i = 0; i < string.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    const c = string.charCodeAt(i);\n    const hi = c >> 8;\n    const lo = c % 256;\n\n    buffer[offset + i * 2] = lo;\n    buffer[offset + i * 2 + 1] = hi;\n  }\n\n  return len\n}\n\nvar utf16le = {\n  byteLength,\n  toString,\n  write: write$1\n};\n\n(function (module, exports) {\n\tconst ascii$1 = ascii;\n\tconst base64$1 = base64;\n\tconst hex$1 = hex;\n\tconst utf8$1 = utf8;\n\tconst utf16le$1 = utf16le;\n\n\tconst LE = new Uint8Array(Uint16Array.of(0xff).buffer)[0] === 0xff;\n\n\tfunction codecFor (encoding) {\n\t  switch (encoding) {\n\t    case 'ascii':\n\t      return ascii$1\n\t    case 'base64':\n\t      return base64$1\n\t    case 'hex':\n\t      return hex$1\n\t    case 'utf8':\n\t    case 'utf-8':\n\t    case undefined:\n\t      return utf8$1\n\t    case 'ucs2':\n\t    case 'ucs-2':\n\t    case 'utf16le':\n\t    case 'utf-16le':\n\t      return utf16le$1\n\t    default:\n\t      throw new Error(`Unknown encoding: ${encoding}`)\n\t  }\n\t}\n\n\tfunction isBuffer (value) {\n\t  return value instanceof Uint8Array\n\t}\n\n\tfunction isEncoding (encoding) {\n\t  try {\n\t    codecFor(encoding);\n\t    return true\n\t  } catch {\n\t    return false\n\t  }\n\t}\n\n\tfunction alloc (size, fill, encoding) {\n\t  const buffer = new Uint8Array(size);\n\t  if (fill !== undefined) exports.fill(buffer, fill, 0, buffer.byteLength, encoding);\n\t  return buffer\n\t}\n\n\tfunction allocUnsafe (size) {\n\t  return new Uint8Array(size)\n\t}\n\n\tfunction allocUnsafeSlow (size) {\n\t  return new Uint8Array(size)\n\t}\n\n\tfunction byteLength (string, encoding) {\n\t  return codecFor(encoding).byteLength(string)\n\t}\n\n\tfunction compare (a, b) {\n\t  if (a === b) return 0\n\n\t  const len = Math.min(a.byteLength, b.byteLength);\n\n\t  a = new DataView(a.buffer, a.byteOffset, a.byteLength);\n\t  b = new DataView(b.buffer, b.byteOffset, b.byteLength);\n\n\t  let i = 0;\n\n\t  for (let n = len - (len % 4); i < n; i += 4) {\n\t    const x = a.getUint32(i, LE);\n\t    const y = b.getUint32(i, LE);\n\t    if (x !== y) break\n\t  }\n\n\t  for (; i < len; i++) {\n\t    const x = a.getUint8(i);\n\t    const y = b.getUint8(i);\n\t    if (x < y) return -1\n\t    if (x > y) return 1\n\t  }\n\n\t  return a.byteLength > b.byteLength ? 1 : a.byteLength < b.byteLength ? -1 : 0\n\t}\n\n\tfunction concat (buffers, totalLength) {\n\t  if (totalLength === undefined) {\n\t    totalLength = buffers.reduce((len, buffer) => len + buffer.byteLength, 0);\n\t  }\n\n\t  const result = new Uint8Array(totalLength);\n\n\t  let offset = 0;\n\t  for (const buffer of buffers) {\n\t    if (offset + buffer.byteLength > result.byteLength) {\n\t      const sub = buffer.subarray(0, result.byteLength - offset);\n\t      result.set(sub, offset);\n\t      return result\n\t    }\n\t    result.set(buffer, offset);\n\t    offset += buffer.byteLength;\n\t  }\n\n\t  return result\n\t}\n\n\tfunction copy (source, target, targetStart = 0, start = 0, end = source.byteLength) {\n\t  if (end > 0 && end < start) return 0\n\t  if (end === start) return 0\n\t  if (source.byteLength === 0 || target.byteLength === 0) return 0\n\n\t  if (targetStart < 0) throw new RangeError('targetStart is out of range')\n\t  if (start < 0 || start >= source.byteLength) throw new RangeError('sourceStart is out of range')\n\t  if (end < 0) throw new RangeError('sourceEnd is out of range')\n\n\t  if (targetStart >= target.byteLength) targetStart = target.byteLength;\n\t  if (end > source.byteLength) end = source.byteLength;\n\t  if (target.byteLength - targetStart < end - start) {\n\t    end = target.length - targetStart + start;\n\t  }\n\n\t  const len = end - start;\n\n\t  if (source === target) {\n\t    target.copyWithin(targetStart, start, end);\n\t  } else {\n\t    target.set(source.subarray(start, end), targetStart);\n\t  }\n\n\t  return len\n\t}\n\n\tfunction equals (a, b) {\n\t  if (a === b) return true\n\t  if (a.byteLength !== b.byteLength) return false\n\n\t  const len = a.byteLength;\n\n\t  a = new DataView(a.buffer, a.byteOffset, a.byteLength);\n\t  b = new DataView(b.buffer, b.byteOffset, b.byteLength);\n\n\t  let i = 0;\n\n\t  for (let n = len - (len % 4); i < n; i += 4) {\n\t    if (a.getUint32(i, LE) !== b.getUint32(i, LE)) return false\n\t  }\n\n\t  for (; i < len; i++) {\n\t    if (a.getUint8(i) !== b.getUint8(i)) return false\n\t  }\n\n\t  return true\n\t}\n\n\tfunction fill (buffer, value, offset, end, encoding) {\n\t  if (typeof value === 'string') {\n\t    // fill(buffer, string, encoding)\n\t    if (typeof offset === 'string') {\n\t      encoding = offset;\n\t      offset = 0;\n\t      end = buffer.byteLength;\n\n\t    // fill(buffer, string, offset, encoding)\n\t    } else if (typeof end === 'string') {\n\t      encoding = end;\n\t      end = buffer.byteLength;\n\t    }\n\t  } else if (typeof value === 'number') {\n\t    value = value & 0xff;\n\t  } else if (typeof value === 'boolean') {\n\t    value = +value;\n\t  }\n\n\t  if (offset < 0 || buffer.byteLength < offset || buffer.byteLength < end) {\n\t    throw new RangeError('Out of range index')\n\t  }\n\n\t  if (offset === undefined) offset = 0;\n\t  if (end === undefined) end = buffer.byteLength;\n\n\t  if (end <= offset) return buffer\n\n\t  if (!value) value = 0;\n\n\t  if (typeof value === 'number') {\n\t    for (let i = offset; i < end; ++i) {\n\t      buffer[i] = value;\n\t    }\n\t  } else {\n\t    value = isBuffer(value) ? value : from(value, encoding);\n\n\t    const len = value.byteLength;\n\n\t    for (let i = 0; i < end - offset; ++i) {\n\t      buffer[i + offset] = value[i % len];\n\t    }\n\t  }\n\n\t  return buffer\n\t}\n\n\tfunction from (value, encodingOrOffset, length) {\n\t  // from(string, encoding)\n\t  if (typeof value === 'string') return fromString(value, encodingOrOffset)\n\n\t  // from(array)\n\t  if (Array.isArray(value)) return fromArray(value)\n\n\t  // from(buffer)\n\t  if (ArrayBuffer.isView(value)) return fromBuffer(value)\n\n\t  // from(arrayBuffer[, byteOffset[, length]])\n\t  return fromArrayBuffer(value, encodingOrOffset, length)\n\t}\n\n\tfunction fromString (string, encoding) {\n\t  const codec = codecFor(encoding);\n\t  const buffer = new Uint8Array(codec.byteLength(string));\n\t  codec.write(buffer, string, 0, buffer.byteLength);\n\t  return buffer\n\t}\n\n\tfunction fromArray (array) {\n\t  const buffer = new Uint8Array(array.length);\n\t  buffer.set(array);\n\t  return buffer\n\t}\n\n\tfunction fromBuffer (buffer) {\n\t  const copy = new Uint8Array(buffer.byteLength);\n\t  copy.set(buffer);\n\t  return copy\n\t}\n\n\tfunction fromArrayBuffer (arrayBuffer, byteOffset, length) {\n\t  return new Uint8Array(arrayBuffer, byteOffset, length)\n\t}\n\n\tfunction includes (buffer, value, byteOffset, encoding) {\n\t  return indexOf(buffer, value, byteOffset, encoding) !== -1\n\t}\n\n\tfunction bidirectionalIndexOf (buffer, value, byteOffset, encoding, first) {\n\t  if (buffer.byteLength === 0) return -1\n\n\t  if (typeof byteOffset === 'string') {\n\t    encoding = byteOffset;\n\t    byteOffset = 0;\n\t  } else if (byteOffset === undefined) {\n\t    byteOffset = first ? 0 : (buffer.length - 1);\n\t  } else if (byteOffset < 0) {\n\t    byteOffset += buffer.byteLength;\n\t  }\n\n\t  if (byteOffset >= buffer.byteLength) {\n\t    if (first) return -1\n\t    else byteOffset = buffer.byteLength - 1;\n\t  } else if (byteOffset < 0) {\n\t    if (first) byteOffset = 0;\n\t    else return -1\n\t  }\n\n\t  if (typeof value === 'string') {\n\t    value = from(value, encoding);\n\t  } else if (typeof value === 'number') {\n\t    value = value & 0xff;\n\n\t    if (first) {\n\t      return buffer.indexOf(value, byteOffset)\n\t    } else {\n\t      return buffer.lastIndexOf(value, byteOffset)\n\t    }\n\t  }\n\n\t  if (value.byteLength === 0) return -1\n\n\t  if (first) {\n\t    let foundIndex = -1;\n\n\t    for (let i = byteOffset; i < buffer.byteLength; i++) {\n\t      if (buffer[i] === value[foundIndex === -1 ? 0 : i - foundIndex]) {\n\t        if (foundIndex === -1) foundIndex = i;\n\t        if (i - foundIndex + 1 === value.byteLength) return foundIndex\n\t      } else {\n\t        if (foundIndex !== -1) i -= i - foundIndex;\n\t        foundIndex = -1;\n\t      }\n\t    }\n\t  } else {\n\t    if (byteOffset + value.byteLength > buffer.byteLength) {\n\t      byteOffset = buffer.byteLength - value.byteLength;\n\t    }\n\n\t    for (let i = byteOffset; i >= 0; i--) {\n\t      let found = true;\n\n\t      for (let j = 0; j < value.byteLength; j++) {\n\t        if (buffer[i + j] !== value[j]) {\n\t          found = false;\n\t          break\n\t        }\n\t      }\n\n\t      if (found) return i\n\t    }\n\t  }\n\n\t  return -1\n\t}\n\n\tfunction indexOf (buffer, value, byteOffset, encoding) {\n\t  return bidirectionalIndexOf(buffer, value, byteOffset, encoding, true /* first */)\n\t}\n\n\tfunction lastIndexOf (buffer, value, byteOffset, encoding) {\n\t  return bidirectionalIndexOf(buffer, value, byteOffset, encoding, false /* last */)\n\t}\n\n\tfunction swap (buffer, n, m) {\n\t  const i = buffer[n];\n\t  buffer[n] = buffer[m];\n\t  buffer[m] = i;\n\t}\n\n\tfunction swap16 (buffer) {\n\t  const len = buffer.byteLength;\n\n\t  if (len % 2 !== 0) throw new RangeError('Buffer size must be a multiple of 16-bits')\n\n\t  for (let i = 0; i < len; i += 2) swap(buffer, i, i + 1);\n\n\t  return buffer\n\t}\n\n\tfunction swap32 (buffer) {\n\t  const len = buffer.byteLength;\n\n\t  if (len % 4 !== 0) throw new RangeError('Buffer size must be a multiple of 32-bits')\n\n\t  for (let i = 0; i < len; i += 4) {\n\t    swap(buffer, i, i + 3);\n\t    swap(buffer, i + 1, i + 2);\n\t  }\n\n\t  return buffer\n\t}\n\n\tfunction swap64 (buffer) {\n\t  const len = buffer.byteLength;\n\n\t  if (len % 8 !== 0) throw new RangeError('Buffer size must be a multiple of 64-bits')\n\n\t  for (let i = 0; i < len; i += 8) {\n\t    swap(buffer, i, i + 7);\n\t    swap(buffer, i + 1, i + 6);\n\t    swap(buffer, i + 2, i + 5);\n\t    swap(buffer, i + 3, i + 4);\n\t  }\n\n\t  return buffer\n\t}\n\n\tfunction toBuffer (buffer) {\n\t  return buffer\n\t}\n\n\tfunction toString (buffer, encoding, start = 0, end = buffer.byteLength) {\n\t  const len = buffer.byteLength;\n\n\t  if (start >= len) return ''\n\t  if (end <= start) return ''\n\t  if (start < 0) start = 0;\n\t  if (end > len) end = len;\n\n\t  if (start !== 0 || end < len) buffer = buffer.subarray(start, end);\n\n\t  return codecFor(encoding).toString(buffer)\n\t}\n\n\tfunction write (buffer, string, offset, length, encoding) {\n\t  // write(buffer, string)\n\t  if (offset === undefined) {\n\t    encoding = 'utf8';\n\n\t  // write(buffer, string, encoding)\n\t  } else if (length === undefined && typeof offset === 'string') {\n\t    encoding = offset;\n\t    offset = undefined;\n\n\t  // write(buffer, string, offset, encoding)\n\t  } else if (encoding === undefined && typeof length === 'string') {\n\t    encoding = length;\n\t    length = undefined;\n\t  }\n\n\t  return codecFor(encoding).write(buffer, string, offset, length)\n\t}\n\n\tfunction writeDoubleLE (buffer, value, offset) {\n\t  if (offset === undefined) offset = 0;\n\n\t  const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n\t  view.setFloat64(offset, value, true);\n\n\t  return offset + 8\n\t}\n\n\tfunction writeFloatLE (buffer, value, offset) {\n\t  if (offset === undefined) offset = 0;\n\n\t  const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n\t  view.setFloat32(offset, value, true);\n\n\t  return offset + 4\n\t}\n\n\tfunction writeUInt32LE (buffer, value, offset) {\n\t  if (offset === undefined) offset = 0;\n\n\t  const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n\t  view.setUint32(offset, value, true);\n\n\t  return offset + 4\n\t}\n\n\tfunction writeInt32LE (buffer, value, offset) {\n\t  if (offset === undefined) offset = 0;\n\n\t  const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n\t  view.setInt32(offset, value, true);\n\n\t  return offset + 4\n\t}\n\n\tfunction readDoubleLE (buffer, offset) {\n\t  if (offset === undefined) offset = 0;\n\n\t  const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n\n\t  return view.getFloat64(offset, true)\n\t}\n\n\tfunction readFloatLE (buffer, offset) {\n\t  if (offset === undefined) offset = 0;\n\n\t  const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n\n\t  return view.getFloat32(offset, true)\n\t}\n\n\tfunction readUInt32LE (buffer, offset) {\n\t  if (offset === undefined) offset = 0;\n\n\t  const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n\n\t  return view.getUint32(offset, true)\n\t}\n\n\tfunction readInt32LE (buffer, offset) {\n\t  if (offset === undefined) offset = 0;\n\n\t  const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n\n\t  return view.getInt32(offset, true)\n\t}\n\n\tmodule.exports = exports = {\n\t  isBuffer,\n\t  isEncoding,\n\t  alloc,\n\t  allocUnsafe,\n\t  allocUnsafeSlow,\n\t  byteLength,\n\t  compare,\n\t  concat,\n\t  copy,\n\t  equals,\n\t  fill,\n\t  from,\n\t  includes,\n\t  indexOf,\n\t  lastIndexOf,\n\t  swap16,\n\t  swap32,\n\t  swap64,\n\t  toBuffer,\n\t  toString,\n\t  write,\n\t  writeDoubleLE,\n\t  writeFloatLE,\n\t  writeUInt32LE,\n\t  writeInt32LE,\n\t  readDoubleLE,\n\t  readFloatLE,\n\t  readUInt32LE,\n\t  readInt32LE\n\t};\n} (browser, browser.exports));\n\nvar blake2b;\nvar hasRequiredBlake2b;\n\nfunction requireBlake2b () {\n\tif (hasRequiredBlake2b) return blake2b;\n\thasRequiredBlake2b = 1;\n\tvar __commonJS = (cb, mod) => function __require() {\n\t  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n\t};\n\tvar __toBinary = /* @__PURE__ */ (() => {\n\t  var table = new Uint8Array(128);\n\t  for (var i = 0; i < 64; i++)\n\t    table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;\n\t  return (base64) => {\n\t    var n = base64.length, bytes2 = new Uint8Array((n - (base64[n - 1] == \"=\") - (base64[n - 2] == \"=\")) * 3 / 4 | 0);\n\t    for (var i2 = 0, j = 0; i2 < n; ) {\n\t      var c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];\n\t      var c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];\n\t      bytes2[j++] = c0 << 2 | c1 >> 4;\n\t      bytes2[j++] = c1 << 4 | c2 >> 2;\n\t      bytes2[j++] = c2 << 6 | c3;\n\t    }\n\t    return bytes2;\n\t  };\n\t})();\n\n\t// wasm-binary:./blake2b.wat\n\tvar require_blake2b = __commonJS({\n\t  \"wasm-binary:./blake2b.wat\"(exports2, module2) {\n\t    module2.exports = __toBinary(\"\");\n\t  }\n\t});\n\n\t// wasm-module:./blake2b.wat\n\tvar bytes = require_blake2b();\n\tvar compiled = WebAssembly.compile(bytes);\n\tblake2b = async (imports) => {\n\t  const instance = await WebAssembly.instantiate(await compiled, imports);\n\t  return instance.exports;\n\t};\n\treturn blake2b;\n}\n\nvar assert = nanoassert;\nvar b4a = browser.exports;\n\nvar wasm = null;\nvar wasmPromise = typeof WebAssembly !== \"undefined\" && requireBlake2b()().then(mod => {\n  wasm = mod;\n});\n\nvar head = 64;\nvar freeList = [];\n\nblake2bWasm.exports = Blake2b;\nvar BYTES_MIN = blake2bWasm.exports.BYTES_MIN = 16;\nvar BYTES_MAX = blake2bWasm.exports.BYTES_MAX = 64;\nblake2bWasm.exports.BYTES = 32;\nvar KEYBYTES_MIN = blake2bWasm.exports.KEYBYTES_MIN = 16;\nvar KEYBYTES_MAX = blake2bWasm.exports.KEYBYTES_MAX = 64;\nblake2bWasm.exports.KEYBYTES = 32;\nvar SALTBYTES = blake2bWasm.exports.SALTBYTES = 16;\nvar PERSONALBYTES = blake2bWasm.exports.PERSONALBYTES = 16;\n\nfunction Blake2b (digestLength, key, salt, personal, noAssert) {\n  if (!(this instanceof Blake2b)) return new Blake2b(digestLength, key, salt, personal, noAssert)\n  if (!wasm) throw new Error('WASM not loaded. Wait for Blake2b.ready(cb)')\n  if (!digestLength) digestLength = 32;\n\n  if (noAssert !== true) {\n    assert(digestLength >= BYTES_MIN, 'digestLength must be at least ' + BYTES_MIN + ', was given ' + digestLength);\n    assert(digestLength <= BYTES_MAX, 'digestLength must be at most ' + BYTES_MAX + ', was given ' + digestLength);\n    if (key != null) {\n      assert(key instanceof Uint8Array, 'key must be Uint8Array or Buffer');\n      assert(key.length >= KEYBYTES_MIN, 'key must be at least ' + KEYBYTES_MIN + ', was given ' + key.length);\n      assert(key.length <= KEYBYTES_MAX, 'key must be at least ' + KEYBYTES_MAX + ', was given ' + key.length);\n    }\n    if (salt != null) {\n      assert(salt instanceof Uint8Array, 'salt must be Uint8Array or Buffer');\n      assert(salt.length === SALTBYTES, 'salt must be exactly ' + SALTBYTES + ', was given ' + salt.length);\n    }\n    if (personal != null) {\n      assert(personal instanceof Uint8Array, 'personal must be Uint8Array or Buffer');\n      assert(personal.length === PERSONALBYTES, 'personal must be exactly ' + PERSONALBYTES + ', was given ' + personal.length);\n    }\n  }\n\n  if (!freeList.length) {\n    freeList.push(head);\n    head += 216;\n  }\n\n  this.digestLength = digestLength;\n  this.finalized = false;\n  this.pointer = freeList.pop();\n  this._memory = new Uint8Array(wasm.memory.buffer);\n\n  this._memory.fill(0, 0, 64);\n  this._memory[0] = this.digestLength;\n  this._memory[1] = key ? key.length : 0;\n  this._memory[2] = 1; // fanout\n  this._memory[3] = 1; // depth\n\n  if (salt) this._memory.set(salt, 32);\n  if (personal) this._memory.set(personal, 48);\n\n  if (this.pointer + 216 > this._memory.length) this._realloc(this.pointer + 216); // we need 216 bytes for the state\n  wasm.blake2b_init(this.pointer, this.digestLength);\n\n  if (key) {\n    this.update(key);\n    this._memory.fill(0, head, head + key.length); // whiteout key\n    this._memory[this.pointer + 200] = 128;\n  }\n}\n\nBlake2b.prototype._realloc = function (size) {\n  wasm.memory.grow(Math.max(0, Math.ceil(Math.abs(size - this._memory.length) / 65536)));\n  this._memory = new Uint8Array(wasm.memory.buffer);\n};\n\nBlake2b.prototype.update = function (input) {\n  assert(this.finalized === false, 'Hash instance finalized');\n  assert(input instanceof Uint8Array, 'input must be Uint8Array or Buffer');\n\n  if (head + input.length > this._memory.length) this._realloc(head + input.length);\n  this._memory.set(input, head);\n  wasm.blake2b_update(this.pointer, head, head + input.length);\n  return this\n};\n\nBlake2b.prototype.digest = function (enc) {\n  assert(this.finalized === false, 'Hash instance finalized');\n  this.finalized = true;\n\n  freeList.push(this.pointer);\n  wasm.blake2b_final(this.pointer);\n\n  if (!enc || enc === 'binary') {\n    return this._memory.slice(this.pointer + 128, this.pointer + 128 + this.digestLength)\n  }\n\n  if (typeof enc === 'string') {\n    return b4a.toString(this._memory, enc, this.pointer + 128, this.pointer + 128 + this.digestLength)\n  }\n\n  assert(enc instanceof Uint8Array && enc.length >= this.digestLength, 'input must be Uint8Array or Buffer');\n  for (var i = 0; i < this.digestLength; i++) {\n    enc[i] = this._memory[this.pointer + 128 + i];\n  }\n\n  return enc\n};\n\n// libsodium compat\nBlake2b.prototype.final = Blake2b.prototype.digest;\n\nBlake2b.WASM = wasm;\nBlake2b.SUPPORTED = typeof WebAssembly !== 'undefined';\n\nBlake2b.ready = function (cb) {\n  if (!cb) cb = noop;\n  if (!wasmPromise) return cb(new Error('WebAssembly not supported'))\n  return wasmPromise.then(() => cb(), cb)\n};\n\nBlake2b.prototype.ready = Blake2b.ready;\n\nBlake2b.prototype.getPartialHash = function () {\n  return this._memory.slice(this.pointer, this.pointer + 216);\n};\n\nBlake2b.prototype.setPartialHash = function (ph) {\n  this._memory.set(ph, this.pointer);\n};\n\nfunction noop () {}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\nfunction log2( V )\n{\n    return( ( ( V & 0xFFFF0000 ) !== 0 ? ( V &= 0xFFFF0000, 16 ) : 0 ) | ( ( V & 0xFF00FF00 ) !== 0 ? ( V &= 0xFF00FF00, 8 ) : 0 ) | ( ( V & 0xF0F0F0F0 ) !== 0 ? ( V &= 0xF0F0F0F0, 4 ) : 0 ) | ( ( V & 0xCCCCCCCC ) !== 0 ? ( V &= 0xCCCCCCCC, 2 ) : 0 ) | ( ( V & 0xAAAAAAAA ) !== 0 ) );\n}\n\n\nfunction formatHash(b, title) {\n    const a = new DataView(b.buffer, b.byteOffset, b.byteLength);\n    let S = \"\";\n    for (let i=0; i<4; i++) {\n        if (i>0) S += \"\\n\";\n        S += \"\\t\\t\";\n        for (let j=0; j<4; j++) {\n            if (j>0) S += \" \";\n            S += a.getUint32(i*16+j*4).toString(16).padStart(8, \"0\");\n        }\n    }\n    if (title) S = title + \"\\n\" + S;\n    return S;\n}\n\nfunction hashIsEqual(h1, h2) {\n    if (h1.byteLength != h2.byteLength) return false;\n    var dv1 = new Int8Array(h1);\n    var dv2 = new Int8Array(h2);\n    for (var i = 0 ; i != h1.byteLength ; i++)\n    {\n        if (dv1[i] != dv2[i]) return false;\n    }\n    return true;\n}\n\nfunction cloneHasher(h) {\n    const ph = h.getPartialHash();\n    const res = blake2bWasm.exports(64);\n    res.setPartialHash(ph);\n    return res;\n}\n\nasync function sameRatio$2(curve, g1s, g1sx, g2s, g2sx) {\n    if (curve.G1.isZero(g1s)) return false;\n    if (curve.G1.isZero(g1sx)) return false;\n    if (curve.G2.isZero(g2s)) return false;\n    if (curve.G2.isZero(g2sx)) return false;\n    // return curve.F12.eq(curve.pairing(g1s, g2sx), curve.pairing(g1sx, g2s));\n    const res = await curve.pairingEq(g1s, g2sx, curve.G1.neg(g1sx), g2s);\n    return res;\n}\n\n\nfunction askEntropy() {\n    {\n        return window.prompt(\"Enter a random text. (Entropy): \", \"\");\n    }\n}\n\nfunction getRandomBytes(n) {\n    let array = new Uint8Array(n);\n    { // Supported\n        globalThis.crypto.getRandomValues(array);\n    }\n    return array;\n}\n\nasync function sha256digest(data) {\n    { // Supported\n        const buffer = await globalThis.crypto.subtle.digest(\"SHA-256\", data.buffer);\n        return new Uint8Array(buffer);\n    }\n}\n\n/**\n * @param {Uint8Array} data\n * @param {number} offset\n */\nfunction readUInt32BE(data, offset) {\n    return new DataView(data.buffer).getUint32(offset, false);\n}\n\nasync function getRandomRng(entropy) {\n    // Generate a random Rng\n    while (!entropy) {\n        entropy = await askEntropy();\n    }\n    const hasher = blake2bWasm.exports(64);\n    hasher.update(getRandomBytes(64));\n    const enc = new TextEncoder(); // always utf-8\n    hasher.update(enc.encode(entropy));\n    const hash = hasher.digest();\n\n    const seed = [];\n    for (let i=0;i<8;i++) {\n        seed[i] = readUInt32BE(hash, i*4);\n    }\n    const rng = new ChaCha(seed);\n    return rng;\n}\n\nasync function rngFromBeaconParams(beaconHash, numIterationsExp) {\n    let nIterationsInner;\n    let nIterationsOuter;\n    if (numIterationsExp<32) {\n        nIterationsInner = (1 << numIterationsExp) >>> 0;\n        nIterationsOuter = 1;\n    } else {\n        nIterationsInner = 0x100000000;\n        nIterationsOuter = (1 << (numIterationsExp-32)) >>> 0;\n    }\n\n    let curHash = beaconHash;\n    for (let i=0; i<nIterationsOuter; i++) {\n        for (let j=0; j<nIterationsInner; j++) {\n            curHash = await sha256digest(curHash);\n        }\n    }\n\n    const curHashV = new DataView(curHash.buffer, curHash.byteOffset, curHash.byteLength);\n    const seed = [];\n    for (let i=0; i<8; i++) {\n        seed[i] = curHashV.getUint32(i*4, false);\n    }\n\n    const rng = new ChaCha(seed);\n\n    return rng;\n}\n\nfunction hex2ByteArray(s) {\n    if (s instanceof Uint8Array) return s;\n    if (s.slice(0,2) == \"0x\") s= s.slice(2);\n    return new Uint8Array(s.match(/[\\da-f]{2}/gi).map(function (h) {\n        return parseInt(h, 16);\n    }));\n}\n\nfunction byteArray2hex(byteArray) {\n    return Array.prototype.map.call(byteArray, function(byte) {\n        return (\"0\" + (byte & 0xFF).toString(16)).slice(-2);\n    }).join(\"\");\n}\n\nfunction stringifyBigIntsWithField(Fr, o) {\n    if (o instanceof Uint8Array)  {\n        return Fr.toString(o);\n    } else if (Array.isArray(o)) {\n        return o.map(stringifyBigIntsWithField.bind(null, Fr));\n    } else if (typeof o == \"object\") {\n        const res = {};\n        const keys = Object.keys(o);\n        keys.forEach( (k) => {\n            res[k] = stringifyBigIntsWithField(Fr, o[k]);\n        });\n        return res;\n    } else if ((typeof(o) == \"bigint\") || o.eq !== undefined)  {\n        return o.toString(10);\n    } else {\n        return o;\n    }\n}\n\nconst HEADER_ZKEY_SECTION = 1;\n\nconst GROTH16_PROTOCOL_ID = 1;\nconst PLONK_PROTOCOL_ID = 2;\nconst FFLONK_PROTOCOL_ID = 10;\n\n/*\n    Copyright 2022 iden3 association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// FFlonk constants\nconst FF_T_POL_DEG_MIN = 3;\n\n// ZKEY constants\nconst ZKEY_FF_NSECTIONS = 17;\n\nconst ZKEY_FF_HEADER_SECTION = 2;\nconst ZKEY_FF_ADDITIONS_SECTION = 3;\nconst ZKEY_FF_A_MAP_SECTION = 4;\nconst ZKEY_FF_B_MAP_SECTION = 5;\nconst ZKEY_FF_C_MAP_SECTION = 6;\nconst ZKEY_FF_QL_SECTION = 7;\nconst ZKEY_FF_QR_SECTION = 8;\nconst ZKEY_FF_QM_SECTION = 9;\nconst ZKEY_FF_QO_SECTION = 10;\nconst ZKEY_FF_QC_SECTION = 11;\nconst ZKEY_FF_SIGMA1_SECTION = 12;\nconst ZKEY_FF_SIGMA2_SECTION = 13;\nconst ZKEY_FF_SIGMA3_SECTION = 14;\nconst ZKEY_FF_LAGRANGE_SECTION = 15;\nconst ZKEY_FF_PTAU_SECTION = 16;\nconst ZKEY_FF_C0_SECTION = 17;\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nasync function writeHeader(fd, zkey) {\n\n    // Write the header\n    ///////////\n    await startWriteSection(fd, 1);\n    await fd.writeULE32(1); // Groth\n    await endWriteSection(fd);\n\n    // Write the Groth header section\n    ///////////\n\n    const curve = await getCurveFromQ(zkey.q);\n\n    await startWriteSection(fd, 2);\n    const primeQ = curve.q;\n    const n8q = (Math.floor( (Scalar.bitLength(primeQ) - 1) / 64) +1)*8;\n\n    const primeR = curve.r;\n    const n8r = (Math.floor( (Scalar.bitLength(primeR) - 1) / 64) +1)*8;\n\n    await fd.writeULE32(n8q);\n    await writeBigInt(fd, primeQ, n8q);\n    await fd.writeULE32(n8r);\n    await writeBigInt(fd, primeR, n8r);\n    await fd.writeULE32(zkey.nVars);                         // Total number of bars\n    await fd.writeULE32(zkey.nPublic);                       // Total number of public vars (not including ONE)\n    await fd.writeULE32(zkey.domainSize);                  // domainSize\n    await writeG1(fd, curve, zkey.vk_alpha_1);\n    await writeG1(fd, curve, zkey.vk_beta_1);\n    await writeG2(fd, curve, zkey.vk_beta_2);\n    await writeG2(fd, curve, zkey.vk_gamma_2);\n    await writeG1(fd, curve, zkey.vk_delta_1);\n    await writeG2(fd, curve, zkey.vk_delta_2);\n\n    await endWriteSection(fd);\n\n\n}\n\nasync function writeG1(fd, curve, p) {\n    const buff = new Uint8Array(curve.G1.F.n8*2);\n    curve.G1.toRprLEM(buff, 0, p);\n    await fd.write(buff);\n}\n\nasync function writeG2(fd, curve, p) {\n    const buff = new Uint8Array(curve.G2.F.n8*2);\n    curve.G2.toRprLEM(buff, 0, p);\n    await fd.write(buff);\n}\n\nasync function readG1(fd, curve, toObject) {\n    const buff = await fd.read(curve.G1.F.n8*2);\n    const res = curve.G1.fromRprLEM(buff, 0);\n    return toObject ? curve.G1.toObject(res) : res;\n}\n\nasync function readG2(fd, curve, toObject) {\n    const buff = await fd.read(curve.G2.F.n8*2);\n    const res = curve.G2.fromRprLEM(buff, 0);\n    return toObject ? curve.G2.toObject(res) : res;\n}\n\n\nasync function readHeader$1(fd, sections, toObject) {\n    // Read Header\n    /////////////////////\n    await startReadUniqueSection(fd, sections, 1);\n    const protocolId = await fd.readULE32();\n    await endReadSection(fd);\n\n    if (protocolId === GROTH16_PROTOCOL_ID) {\n        return await readHeaderGroth16(fd, sections, toObject);\n    } else if (protocolId === PLONK_PROTOCOL_ID) {\n        return await readHeaderPlonk(fd, sections, toObject);\n    } else if (protocolId === FFLONK_PROTOCOL_ID) {\n        return await readHeaderFFlonk(fd, sections, toObject);\n    } else {\n        throw new Error(\"Protocol not supported: \");\n    }\n}\n\n\n\n\nasync function readHeaderGroth16(fd, sections, toObject) {\n    const zkey = {};\n\n    zkey.protocol = \"groth16\";\n\n    // Read Groth Header\n    /////////////////////\n    await startReadUniqueSection(fd, sections, 2);\n    const n8q = await fd.readULE32();\n    zkey.n8q = n8q;\n    zkey.q = await readBigInt(fd, n8q);\n\n    const n8r = await fd.readULE32();\n    zkey.n8r = n8r;\n    zkey.r = await readBigInt(fd, n8r);\n    zkey.curve = await getCurveFromQ(zkey.q);\n    zkey.nVars = await fd.readULE32();\n    zkey.nPublic = await fd.readULE32();\n    zkey.domainSize = await fd.readULE32();\n    zkey.power = log2(zkey.domainSize);\n    zkey.vk_alpha_1 = await readG1(fd, zkey.curve, toObject);\n    zkey.vk_beta_1 = await readG1(fd, zkey.curve, toObject);\n    zkey.vk_beta_2 = await readG2(fd, zkey.curve, toObject);\n    zkey.vk_gamma_2 = await readG2(fd, zkey.curve, toObject);\n    zkey.vk_delta_1 = await readG1(fd, zkey.curve, toObject);\n    zkey.vk_delta_2 = await readG2(fd, zkey.curve, toObject);\n    await endReadSection(fd);\n\n    return zkey;\n\n}\n\nasync function readHeaderPlonk(fd, sections, toObject) {\n    const zkey = {};\n\n    zkey.protocol = \"plonk\";\n\n    // Read Plonk Header\n    /////////////////////\n    await startReadUniqueSection(fd, sections, 2);\n    const n8q = await fd.readULE32();\n    zkey.n8q = n8q;\n    zkey.q = await readBigInt(fd, n8q);\n\n    const n8r = await fd.readULE32();\n    zkey.n8r = n8r;\n    zkey.r = await readBigInt(fd, n8r);\n    zkey.curve = await getCurveFromQ(zkey.q);\n    zkey.nVars = await fd.readULE32();\n    zkey.nPublic = await fd.readULE32();\n    zkey.domainSize = await fd.readULE32();\n    zkey.power = log2(zkey.domainSize);\n    zkey.nAdditions = await fd.readULE32();\n    zkey.nConstraints = await fd.readULE32();\n    zkey.k1 = await fd.read(n8r);\n    zkey.k2 = await fd.read(n8r);\n\n    zkey.Qm = await readG1(fd, zkey.curve, toObject);\n    zkey.Ql = await readG1(fd, zkey.curve, toObject);\n    zkey.Qr = await readG1(fd, zkey.curve, toObject);\n    zkey.Qo = await readG1(fd, zkey.curve, toObject);\n    zkey.Qc = await readG1(fd, zkey.curve, toObject);\n    zkey.S1 = await readG1(fd, zkey.curve, toObject);\n    zkey.S2 = await readG1(fd, zkey.curve, toObject);\n    zkey.S3 = await readG1(fd, zkey.curve, toObject);\n    zkey.X_2 = await readG2(fd, zkey.curve, toObject);\n\n    await endReadSection(fd);\n\n    return zkey;\n}\n\nasync function readHeaderFFlonk(fd, sections, toObject) {\n    const zkey = {};\n\n    zkey.protocol = \"fflonk\";\n    zkey.protocolId = FFLONK_PROTOCOL_ID;\n\n    await startReadUniqueSection(fd, sections, ZKEY_FF_HEADER_SECTION);\n    const n8q = await fd.readULE32();\n    zkey.n8q = n8q;\n    zkey.q = await readBigInt(fd, n8q);\n    zkey.curve = await getCurveFromQ(zkey.q);\n\n    const n8r = await fd.readULE32();\n    zkey.n8r = n8r;\n    zkey.r = await readBigInt(fd, n8r);\n\n    zkey.nVars = await fd.readULE32();\n    zkey.nPublic = await fd.readULE32();\n    zkey.domainSize = await fd.readULE32();\n    zkey.power = log2(zkey.domainSize);\n    zkey.nAdditions = await fd.readULE32();\n    zkey.nConstraints = await fd.readULE32();\n\n    zkey.k1 = await fd.read(n8r);\n    zkey.k2 = await fd.read(n8r);\n\n    zkey.w3 = await fd.read(n8r);\n    zkey.w4 = await fd.read(n8r);\n    zkey.w8 = await fd.read(n8r);\n    zkey.wr = await fd.read(n8r);\n\n    zkey.X_2 = await readG2(fd, zkey.curve, toObject);\n\n    zkey.C0 = await readG1(fd, zkey.curve, toObject);\n\n    await endReadSection(fd);\n\n    return zkey;\n}\n\nasync function readZKey(fileName, toObject) {\n    const {fd, sections} = await readBinFile(fileName, \"zkey\", 1);\n\n    const zkey = await readHeader$1(fd, sections, toObject);\n\n    const Fr = new F1Field(zkey.r);\n    const Rr = Scalar.mod(Scalar.shl(1, zkey.n8r*8), zkey.r);\n    const Rri = Fr.inv(Rr);\n    const Rri2 = Fr.mul(Rri, Rri);\n\n    let curve = await getCurveFromQ(zkey.q);\n\n    // Read IC Section\n    ///////////\n    await startReadUniqueSection(fd, sections, 3);\n    zkey.IC = [];\n    for (let i=0; i<= zkey.nPublic; i++) {\n        const P = await readG1(fd, curve, toObject);\n        zkey.IC.push(P);\n    }\n    await endReadSection(fd);\n\n\n    // Read Coefs\n    ///////////\n    await startReadUniqueSection(fd, sections, 4);\n    const nCCoefs = await fd.readULE32();\n    zkey.ccoefs = [];\n    for (let i=0; i<nCCoefs; i++) {\n        const m = await fd.readULE32();\n        const c = await fd.readULE32();\n        const s = await fd.readULE32();\n        const v = await readFr2();\n        zkey.ccoefs.push({\n            matrix: m,\n            constraint: c,\n            signal: s,\n            value: v\n        });\n    }\n    await endReadSection(fd);\n\n    // Read A points\n    ///////////\n    await startReadUniqueSection(fd, sections, 5);\n    zkey.A = [];\n    for (let i=0; i<zkey.nVars; i++) {\n        const A = await readG1(fd, curve, toObject);\n        zkey.A[i] = A;\n    }\n    await endReadSection(fd);\n\n\n    // Read B1\n    ///////////\n    await startReadUniqueSection(fd, sections, 6);\n    zkey.B1 = [];\n    for (let i=0; i<zkey.nVars; i++) {\n        const B1 = await readG1(fd, curve, toObject);\n\n        zkey.B1[i] = B1;\n    }\n    await endReadSection(fd);\n\n\n    // Read B2 points\n    ///////////\n    await startReadUniqueSection(fd, sections, 7);\n    zkey.B2 = [];\n    for (let i=0; i<zkey.nVars; i++) {\n        const B2 = await readG2(fd, curve, toObject);\n        zkey.B2[i] = B2;\n    }\n    await endReadSection(fd);\n\n\n    // Read C points\n    ///////////\n    await startReadUniqueSection(fd, sections, 8);\n    zkey.C = [];\n    for (let i=zkey.nPublic+1; i<zkey.nVars; i++) {\n        const C = await readG1(fd, curve, toObject);\n\n        zkey.C[i] = C;\n    }\n    await endReadSection(fd);\n\n\n    // Read H points\n    ///////////\n    await startReadUniqueSection(fd, sections, 9);\n    zkey.hExps = [];\n    for (let i=0; i<zkey.domainSize; i++) {\n        const H = await readG1(fd, curve, toObject);\n        zkey.hExps.push(H);\n    }\n    await endReadSection(fd);\n\n    await fd.close();\n\n    return zkey;\n\n    async function readFr2(/* toObject */) {\n        const n = await readBigInt(fd, zkey.n8r);\n        return Fr.mul(n, Rri2);\n    }\n\n}\n\n\nasync function readContribution$1(fd, curve, toObject) {\n    const c = {delta:{}};\n    c.deltaAfter = await readG1(fd, curve, toObject);\n    c.delta.g1_s = await readG1(fd, curve, toObject);\n    c.delta.g1_sx = await readG1(fd, curve, toObject);\n    c.delta.g2_spx = await readG2(fd, curve, toObject);\n    c.transcript = await fd.read(64);\n    c.type = await fd.readULE32();\n\n    const paramLength = await fd.readULE32();\n    const curPos = fd.pos;\n    let lastType =0;\n    while (fd.pos-curPos < paramLength) {\n        const buffType = await fd.read(1);\n        if (buffType[0]<= lastType) throw new Error(\"Parameters in the contribution must be sorted\");\n        lastType = buffType[0];\n        if (buffType[0]==1) {     // Name\n            const buffLen = await fd.read(1);\n            const buffStr = await fd.read(buffLen[0]);\n            c.name = new TextDecoder().decode(buffStr);\n        } else if (buffType[0]==2) {\n            const buffExp = await fd.read(1);\n            c.numIterationsExp = buffExp[0];\n        } else if (buffType[0]==3) {\n            const buffLen = await fd.read(1);\n            c.beaconHash = await fd.read(buffLen[0]);\n        } else {\n            throw new Error(\"Parameter not recognized\");\n        }\n    }\n    if (fd.pos != curPos + paramLength) {\n        throw new Error(\"Parametes do not match\");\n    }\n\n    return c;\n}\n\n\nasync function readMPCParams(fd, curve, sections) {\n    await startReadUniqueSection(fd, sections, 10);\n    const res = { contributions: []};\n    res.csHash = await fd.read(64);\n    const n = await fd.readULE32();\n    for (let i=0; i<n; i++) {\n        const c = await readContribution$1(fd, curve);\n        res.contributions.push(c);\n    }\n    await endReadSection(fd);\n\n    return res;\n}\n\nasync function writeContribution$1(fd, curve, c) {\n    await writeG1(fd, curve, c.deltaAfter);\n    await writeG1(fd, curve, c.delta.g1_s);\n    await writeG1(fd, curve, c.delta.g1_sx);\n    await writeG2(fd, curve, c.delta.g2_spx);\n    await fd.write(c.transcript);\n    await fd.writeULE32(c.type || 0);\n\n    const params = [];\n    if (c.name) {\n        params.push(1);      // Param Name\n        const nameData = new TextEncoder(\"utf-8\").encode(c.name.substring(0,64));\n        params.push(nameData.byteLength);\n        for (let i=0; i<nameData.byteLength; i++) params.push(nameData[i]);\n    }\n    if (c.type == 1) {\n        params.push(2);      // Param numIterationsExp\n        params.push(c.numIterationsExp);\n\n        params.push(3);      // Beacon Hash\n        params.push(c.beaconHash.byteLength);\n        for (let i=0; i<c.beaconHash.byteLength; i++) params.push(c.beaconHash[i]);\n    }\n    if (params.length>0) {\n        const paramsBuff = new Uint8Array(params);\n        await fd.writeULE32(paramsBuff.byteLength);\n        await fd.write(paramsBuff);\n    } else {\n        await fd.writeULE32(0);\n    }\n\n}\n\nasync function writeMPCParams(fd, curve, mpcParams) {\n    await startWriteSection(fd, 10);\n    await fd.write(mpcParams.csHash);\n    await fd.writeULE32(mpcParams.contributions.length);\n    for (let i=0; i<mpcParams.contributions.length; i++) {\n        await writeContribution$1(fd, curve,mpcParams.contributions[i]);\n    }\n    await endWriteSection(fd);\n}\n\nfunction hashG1(hasher, curve, p) {\n    const buff = new Uint8Array(curve.G1.F.n8*2);\n    curve.G1.toRprUncompressed(buff, 0, p);\n    hasher.update(buff);\n}\n\nfunction hashG2(hasher,curve, p) {\n    const buff = new Uint8Array(curve.G2.F.n8*2);\n    curve.G2.toRprUncompressed(buff, 0, p);\n    hasher.update(buff);\n}\n\nfunction hashPubKey(hasher, curve, c) {\n    hashG1(hasher, curve, c.deltaAfter);\n    hashG1(hasher, curve, c.delta.g1_s);\n    hashG1(hasher, curve, c.delta.g1_sx);\n    hashG2(hasher, curve, c.delta.g2_spx);\n    hasher.update(c.transcript);\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\nasync function write(fd, witness, prime) {\n\n    await startWriteSection(fd, 1);\n    const n8 = (Math.floor( (Scalar.bitLength(prime) - 1) / 64) +1)*8;\n    await fd.writeULE32(n8);\n    await writeBigInt(fd, prime, n8);\n    await fd.writeULE32(witness.length);\n    await endWriteSection(fd);\n\n    await startWriteSection(fd, 2);\n    for (let i=0; i<witness.length; i++) {\n        await writeBigInt(fd, witness[i], n8);\n    }\n    await endWriteSection(fd);\n\n\n}\n\nasync function writeBin(fd, witnessBin, prime) {\n\n    await startWriteSection(fd, 1);\n    const n8 = (Math.floor( (Scalar.bitLength(prime) - 1) / 64) +1)*8;\n    await fd.writeULE32(n8);\n    await writeBigInt(fd, prime, n8);\n    if (witnessBin.byteLength % n8 != 0) {\n        throw new Error(\"Invalid witness length\");\n    }\n    await fd.writeULE32(witnessBin.byteLength / n8);\n    await endWriteSection(fd);\n\n\n    await startWriteSection(fd, 2);\n    await fd.write(witnessBin);\n    await endWriteSection(fd);\n\n}\n\nasync function readHeader(fd, sections) {\n\n    await startReadUniqueSection(fd, sections, 1);\n    const n8 = await fd.readULE32();\n    const q = await readBigInt(fd, n8);\n    const nWitness = await fd.readULE32();\n    await endReadSection(fd);\n\n    return {n8, q, nWitness};\n\n}\n\nasync function read(fileName) {\n\n    const {fd, sections} = await readBinFile(fileName, \"wtns\", 2);\n\n    const {n8, nWitness} = await readHeader(fd, sections);\n\n    await startReadUniqueSection(fd, sections, 2);\n    const res = [];\n    for (let i=0; i<nWitness; i++) {\n        const v = await readBigInt(fd, n8);\n        res.push(v);\n    }\n    await endReadSection(fd);\n\n    await fd.close();\n\n    return res;\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\nconst {stringifyBigInts: stringifyBigInts$4} = utils;\n\nasync function groth16Prove(zkeyFileName, witnessFileName, logger) {\n    const {fd: fdWtns, sections: sectionsWtns} = await readBinFile(witnessFileName, \"wtns\", 2);\n\n    const wtns = await readHeader(fdWtns, sectionsWtns);\n\n    const {fd: fdZKey, sections: sectionsZKey} = await readBinFile(zkeyFileName, \"zkey\", 2);\n\n    const zkey = await readHeader$1(fdZKey, sectionsZKey);\n\n    if (zkey.protocol != \"groth16\") {\n        throw new Error(\"zkey file is not groth16\");\n    }\n\n    if (!Scalar.eq(zkey.r,  wtns.q)) {\n        throw new Error(\"Curve of the witness does not match the curve of the proving key\");\n    }\n\n    if (wtns.nWitness != zkey.nVars) {\n        throw new Error(`Invalid witness length. Circuit: ${zkey.nVars}, witness: ${wtns.nWitness}`);\n    }\n\n    const curve = zkey.curve;\n    const Fr = curve.Fr;\n    const G1 = curve.G1;\n    const G2 = curve.G2;\n\n    const power = log2(zkey.domainSize);\n\n    if (logger) logger.debug(\"Reading Wtns\");\n    const buffWitness = await readSection(fdWtns, sectionsWtns, 2);\n    if (logger) logger.debug(\"Reading Coeffs\");\n    const buffCoeffs = await readSection(fdZKey, sectionsZKey, 4);\n\n    if (logger) logger.debug(\"Building ABC\");\n    const [buffA_T, buffB_T, buffC_T] = await buildABC1(curve, zkey, buffWitness, buffCoeffs, logger);\n\n    const inc = power == Fr.s ? curve.Fr.shift : curve.Fr.w[power+1];\n\n    const buffA = await Fr.ifft(buffA_T, \"\", \"\", logger, \"IFFT_A\");\n    const buffAodd = await Fr.batchApplyKey(buffA, Fr.e(1), inc);\n    const buffAodd_T = await Fr.fft(buffAodd, \"\", \"\", logger, \"FFT_A\");\n\n    const buffB = await Fr.ifft(buffB_T, \"\", \"\", logger, \"IFFT_B\");\n    const buffBodd = await Fr.batchApplyKey(buffB, Fr.e(1), inc);\n    const buffBodd_T = await Fr.fft(buffBodd, \"\", \"\", logger, \"FFT_B\");\n\n    const buffC = await Fr.ifft(buffC_T, \"\", \"\", logger, \"IFFT_C\");\n    const buffCodd = await Fr.batchApplyKey(buffC, Fr.e(1), inc);\n    const buffCodd_T = await Fr.fft(buffCodd, \"\", \"\", logger, \"FFT_C\");\n\n    if (logger) logger.debug(\"Join ABC\");\n    const buffPodd_T = await joinABC(curve, zkey, buffAodd_T, buffBodd_T, buffCodd_T, logger);\n\n    let proof = {};\n\n    if (logger) logger.debug(\"Reading A Points\");\n    const buffBasesA = await readSection(fdZKey, sectionsZKey, 5);\n    proof.pi_a = await curve.G1.multiExpAffine(buffBasesA, buffWitness, logger, \"multiexp A\");\n\n    if (logger) logger.debug(\"Reading B1 Points\");\n    const buffBasesB1 = await readSection(fdZKey, sectionsZKey, 6);\n    let pib1 = await curve.G1.multiExpAffine(buffBasesB1, buffWitness, logger, \"multiexp B1\");\n\n    if (logger) logger.debug(\"Reading B2 Points\");\n    const buffBasesB2 = await readSection(fdZKey, sectionsZKey, 7);\n    proof.pi_b = await curve.G2.multiExpAffine(buffBasesB2, buffWitness, logger, \"multiexp B2\");\n\n    if (logger) logger.debug(\"Reading C Points\");\n    const buffBasesC = await readSection(fdZKey, sectionsZKey, 8);\n    proof.pi_c = await curve.G1.multiExpAffine(buffBasesC, buffWitness.slice((zkey.nPublic+1)*curve.Fr.n8), logger, \"multiexp C\");\n\n    if (logger) logger.debug(\"Reading H Points\");\n    const buffBasesH = await readSection(fdZKey, sectionsZKey, 9);\n    const resH = await curve.G1.multiExpAffine(buffBasesH, buffPodd_T, logger, \"multiexp H\");\n\n    const r = curve.Fr.random();\n    const s = curve.Fr.random();\n\n    proof.pi_a  = G1.add( proof.pi_a, zkey.vk_alpha_1 );\n    proof.pi_a  = G1.add( proof.pi_a, G1.timesFr( zkey.vk_delta_1, r ));\n\n    proof.pi_b  = G2.add( proof.pi_b, zkey.vk_beta_2 );\n    proof.pi_b  = G2.add( proof.pi_b, G2.timesFr( zkey.vk_delta_2, s ));\n\n    pib1 = G1.add( pib1, zkey.vk_beta_1 );\n    pib1 = G1.add( pib1, G1.timesFr( zkey.vk_delta_1, s ));\n\n    proof.pi_c = G1.add(proof.pi_c, resH);\n\n\n    proof.pi_c  = G1.add( proof.pi_c, G1.timesFr( proof.pi_a, s ));\n    proof.pi_c  = G1.add( proof.pi_c, G1.timesFr( pib1, r ));\n    proof.pi_c  = G1.add( proof.pi_c, G1.timesFr( zkey.vk_delta_1, Fr.neg(Fr.mul(r,s) )));\n\n\n    let publicSignals = [];\n\n    for (let i=1; i<= zkey.nPublic; i++) {\n        const b = buffWitness.slice(i*Fr.n8, i*Fr.n8+Fr.n8);\n        publicSignals.push(Scalar.fromRprLE(b));\n    }\n\n    proof.pi_a = G1.toObject(G1.toAffine(proof.pi_a));\n    proof.pi_b = G2.toObject(G2.toAffine(proof.pi_b));\n    proof.pi_c = G1.toObject(G1.toAffine(proof.pi_c));\n\n    proof.protocol = \"groth16\";\n    proof.curve = curve.name;\n\n    await fdZKey.close();\n    await fdWtns.close();\n\n    proof = stringifyBigInts$4(proof);\n    publicSignals = stringifyBigInts$4(publicSignals);\n\n    return {proof, publicSignals};\n}\n\n\nasync function buildABC1(curve, zkey, witness, coeffs, logger) {\n    const n8 = curve.Fr.n8;\n    const sCoef = 4*3 + zkey.n8r;\n    const nCoef = (coeffs.byteLength-4) / sCoef;\n\n    const outBuffA = new BigBuffer(zkey.domainSize * n8);\n    const outBuffB = new BigBuffer(zkey.domainSize * n8);\n    const outBuffC = new BigBuffer(zkey.domainSize * n8);\n\n    const outBuf = [ outBuffA, outBuffB ];\n    for (let i=0; i<nCoef; i++) {\n        if ((logger)&&(i%1000000 == 0)) logger.debug(`QAP AB: ${i}/${nCoef}`);\n        const buffCoef = coeffs.slice(4+i*sCoef, 4+i*sCoef+sCoef);\n        const buffCoefV = new DataView(buffCoef.buffer);\n        const m= buffCoefV.getUint32(0, true);\n        const c= buffCoefV.getUint32(4, true);\n        const s= buffCoefV.getUint32(8, true);\n        const coef = buffCoef.slice(12, 12+n8);\n        outBuf[m].set(\n            curve.Fr.add(\n                outBuf[m].slice(c*n8, c*n8+n8),\n                curve.Fr.mul(coef, witness.slice(s*n8, s*n8+n8))\n            ),\n            c*n8\n        );\n    }\n\n    for (let i=0; i<zkey.domainSize; i++) {\n        if ((logger)&&(i%1000000 == 0)) logger.debug(`QAP C: ${i}/${zkey.domainSize}`);\n        outBuffC.set(\n            curve.Fr.mul(\n                outBuffA.slice(i*n8, i*n8+n8),\n                outBuffB.slice(i*n8, i*n8+n8),\n            ),\n            i*n8\n        );\n    }\n\n    return [outBuffA, outBuffB, outBuffC];\n\n}\n\n/*\nasync function buldABC(curve, zkey, witness, coeffs, logger) {\n    const concurrency = curve.tm.concurrency;\n    const sCoef = 4*3 + zkey.n8r;\n\n    let getUint32;\n\n    if (coeffs instanceof BigBuffer) {\n        const coeffsDV = [];\n        const PAGE_LEN = coeffs.buffers[0].length;\n        for (let i=0; i< coeffs.buffers.length; i++) {\n            coeffsDV.push(new DataView(coeffs.buffers[i].buffer));\n        }\n        getUint32 = function (pos) {\n            return coeffsDV[Math.floor(pos/PAGE_LEN)].getUint32(pos % PAGE_LEN, true);\n        };\n    } else {\n        const coeffsDV = new DataView(coeffs.buffer, coeffs.byteOffset, coeffs.byteLength);\n        getUint32 = function (pos) {\n            return coeffsDV.getUint32(pos, true);\n        };\n    }\n\n    const elementsPerChunk = Math.floor(zkey.domainSize/concurrency);\n    const promises = [];\n\n    const cutPoints = [];\n    for (let i=0; i<concurrency; i++) {\n        cutPoints.push( getCutPoint( Math.floor(i*elementsPerChunk) ));\n    }\n    cutPoints.push(coeffs.byteLength);\n\n    const chunkSize = 2**26;\n    for (let s=0 ; s<zkey.nVars ; s+= chunkSize) {\n        if (logger) logger.debug(`QAP ${s}: ${s}/${zkey.nVars}`);\n        const ns= Math.min(zkey.nVars-s, chunkSize );\n\n        for (let i=0; i<concurrency; i++) {\n            let n;\n            if (i< concurrency-1) {\n                n = elementsPerChunk;\n            } else {\n                n = zkey.domainSize - i*elementsPerChunk;\n            }\n            if (n==0) continue;\n\n            const task = [];\n\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: coeffs.slice(cutPoints[i], cutPoints[i+1])});\n            task.push({cmd: \"ALLOCSET\", var: 1, buff: witness.slice(s*curve.Fr.n8, (s+ns)*curve.Fr.n8)});\n            task.push({cmd: \"ALLOC\", var: 2, len: n*curve.Fr.n8});\n            task.push({cmd: \"ALLOC\", var: 3, len: n*curve.Fr.n8});\n            task.push({cmd: \"ALLOC\", var: 4, len: n*curve.Fr.n8});\n            task.push({cmd: \"CALL\", fnName: \"qap_buildABC\", params:[\n                {var: 0},\n                {val: (cutPoints[i+1] - cutPoints[i])/sCoef},\n                {var: 1},\n                {var: 2},\n                {var: 3},\n                {var: 4},\n                {val: i*elementsPerChunk},\n                {val: n},\n                {val: s},\n                {val: ns}\n            ]});\n            task.push({cmd: \"GET\", out: 0, var: 2, len: n*curve.Fr.n8});\n            task.push({cmd: \"GET\", out: 1, var: 3, len: n*curve.Fr.n8});\n            task.push({cmd: \"GET\", out: 2, var: 4, len: n*curve.Fr.n8});\n            promises.push(curve.tm.queueAction(task));\n        }\n    }\n\n    let result = await Promise.all(promises);\n\n    const nGroups = result.length / concurrency;\n    if (nGroups>1) {\n        const promises2 = [];\n        for (let i=0; i<concurrency; i++) {\n            const task=[];\n            task.push({cmd: \"ALLOC\", var: 0, len: result[i][0].byteLength});\n            task.push({cmd: \"ALLOC\", var: 1, len: result[i][0].byteLength});\n            for (let m=0; m<3; m++) {\n                task.push({cmd: \"SET\", var: 0, buff: result[i][m]});\n                for (let s=1; s<nGroups; s++) {\n                    task.push({cmd: \"SET\", var: 1, buff: result[s*concurrency + i][m]});\n                    task.push({cmd: \"CALL\", fnName: \"qap_batchAdd\", params:[\n                        {var: 0},\n                        {var: 1},\n                        {val: result[i][m].length/curve.Fr.n8},\n                        {var: 0}\n                    ]});\n                }\n                task.push({cmd: \"GET\", out: m, var: 0, len: result[i][m].length});\n            }\n            promises2.push(curve.tm.queueAction(task));\n        }\n        result = await Promise.all(promises2);\n    }\n\n    const outBuffA = new BigBuffer(zkey.domainSize * curve.Fr.n8);\n    const outBuffB = new BigBuffer(zkey.domainSize * curve.Fr.n8);\n    const outBuffC = new BigBuffer(zkey.domainSize * curve.Fr.n8);\n    let p=0;\n    for (let i=0; i<result.length; i++) {\n        outBuffA.set(result[i][0], p);\n        outBuffB.set(result[i][1], p);\n        outBuffC.set(result[i][2], p);\n        p += result[i][0].byteLength;\n    }\n\n    return [outBuffA, outBuffB, outBuffC];\n\n    function getCutPoint(v) {\n        let m = 0;\n        let n = getUint32(0);\n        while (m < n) {\n            var k = Math.floor((n + m) / 2);\n            const va = getUint32(4 + k*sCoef + 4);\n            if (va > v) {\n                n = k - 1;\n            } else if (va < v) {\n                m = k + 1;\n            } else {\n                n = k;\n            }\n        }\n        return 4 + m*sCoef;\n    }\n}\n*/\n\nasync function joinABC(curve, zkey, a, b, c, logger) {\n    const MAX_CHUNK_SIZE = 1 << 22;\n\n    const n8 = curve.Fr.n8;\n    const nElements = Math.floor(a.byteLength / curve.Fr.n8);\n\n    const promises = [];\n\n    for (let i=0; i<nElements; i += MAX_CHUNK_SIZE) {\n        if (logger) logger.debug(`JoinABC: ${i}/${nElements}`);\n        const n= Math.min(nElements - i, MAX_CHUNK_SIZE);\n\n        const task = [];\n\n        const aChunk = a.slice(i*n8, (i + n)*n8 );\n        const bChunk = b.slice(i*n8, (i + n)*n8 );\n        const cChunk = c.slice(i*n8, (i + n)*n8 );\n\n        task.push({cmd: \"ALLOCSET\", var: 0, buff: aChunk});\n        task.push({cmd: \"ALLOCSET\", var: 1, buff: bChunk});\n        task.push({cmd: \"ALLOCSET\", var: 2, buff: cChunk});\n        task.push({cmd: \"ALLOC\", var: 3, len: n*n8});\n        task.push({cmd: \"CALL\", fnName: \"qap_joinABC\", params:[\n            {var: 0},\n            {var: 1},\n            {var: 2},\n            {val: n},\n            {var: 3},\n        ]});\n        task.push({cmd: \"CALL\", fnName: \"frm_batchFromMontgomery\", params:[\n            {var: 3},\n            {val: n},\n            {var: 3}\n        ]});\n        task.push({cmd: \"GET\", out: 0, var: 3, len: n*n8});\n        promises.push(curve.tm.queueAction(task));\n    }\n\n    const result = await Promise.all(promises);\n\n    let outBuff;\n    if (a instanceof BigBuffer) {\n        outBuff = new BigBuffer(a.byteLength);\n    } else {\n        outBuff = new Uint8Array(a.byteLength);\n    }\n\n    let p=0;\n    for (let i=0; i<result.length; i++) {\n        outBuff.set(result[i][0], p);\n        p += result[i][0].byteLength;\n    }\n\n    return outBuff;\n}\n\n/*\n\nCopyright 2020 0KIMS association.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n*/\n\nfunction flatArray(a) {\n    var res = [];\n    fillArray(res, a);\n    return res;\n\n    function fillArray(res, a) {\n        if (Array.isArray(a)) {\n            for (let i=0; i<a.length; i++) {\n                fillArray(res, a[i]);\n            }\n        } else {\n            res.push(a);\n        }\n    }\n}\n\n// Ref https://github.com/iden3/circom/commit/ec6388cf6eb62463539cb4c40cc3ceae9826de19\nfunction normalize(n, prime) {\n    let res = BigInt(n) % prime;\n    if (res < 0) res += prime;\n    return res\n}\n\nfunction fnvHash(str) {\n    const uint64_max = BigInt(2) ** BigInt(64);\n    let hash = BigInt(\"0xCBF29CE484222325\");\n    for (var i = 0; i < str.length; i++) {\n    hash ^= BigInt(str[i].charCodeAt());\n    hash *= BigInt(0x100000001B3);\n    hash %= uint64_max;\n    }\n    let shash = hash.toString(16);\n    let n = 16 - shash.length;\n    shash = '0'.repeat(n).concat(shash);\n    return shash;\n}\n\n// Note that this pads zeros\nfunction toArray32(s,size) {\n    const res = []; //new Uint32Array(size); //has no unshift\n    let rem = BigInt(s);\n    const radix = BigInt(0x100000000);\n    while (rem) {\n        res.unshift( Number(rem % radix));\n        rem = rem / radix;\n    }\n    if (size) {\n    var i = size - res.length;\n    while (i>0) {\n        res.unshift(0);\n        i--;\n    }\n    }\n    return res;\n}\n\n/* globals WebAssembly */\n\nasync function builder(code, options) {\n\n    options = options || {};\n\n    let memorySize = 32767;\n    let memory;\n    let memoryAllocated = false;\n    while (!memoryAllocated){\n        try{\n            memory = new WebAssembly.Memory({initial:memorySize});\n            memoryAllocated = true;\n        } catch(err){\n            if(memorySize === 1){\n                throw err;\n            }\n            console.warn(\"Could not allocate \" + memorySize * 1024 * 64 + \" bytes. This may cause severe instability. Trying with \" + memorySize * 1024 * 64 / 2 + \" bytes\");\n            memorySize = Math.floor(memorySize/2);\n        }\n    }\n\n    const wasmModule = await WebAssembly.compile(code);\n\n    let wc;\n\n    let errStr = \"\";\n    let msgStr = \"\";\n\n    // Only circom 2 implements version lookup through exports in the WASM\n    // We default to `1` and update if we see the `getVersion` export (major version)\n    // These are updated after the instance is instantiated, assuming the functions are available\n    let majorVersion = 1;\n    // After Circom 2.0.7, Blaine added exported functions for getting minor and patch versions\n    let minorVersion = 0;\n    // If we can't lookup the patch version, assume the lowest\n    let patchVersion = 0;\n\n    const instance = await WebAssembly.instantiate(wasmModule, {\n        env: {\n            \"memory\": memory\n        },\n        runtime: {\n            exceptionHandler: function(code) {\n                let err;\n                if (code == 1) {\n                    err = \"Signal not found. \";\n                } else if (code == 2) {\n                    err = \"Too many signals set. \";\n                } else if (code == 3) {\n                    err = \"Signal already set. \";\n                } else if (code == 4) {\n                    err = \"Assert Failed. \";\n                } else if (code == 5) {\n                    err = \"Not enough memory. \";\n                } else if (code == 6) {\n                    err = \"Input signal array access exceeds the size. \";\n                } else {\n                    err = \"Unknown error. \";\n                }\n                console.error(\"ERROR: \", code, errStr);\n                throw new Error(err + errStr);\n            },\n            // A new way of logging messages was added in Circom 2.0.7 that requires 2 new imports\n            // `printErrorMessage` and `writeBufferMessage`.\n            printErrorMessage: function() {\n                errStr += getMessage() + \"\\n\";\n            },\n            writeBufferMessage: function() {\n                const msg = getMessage();\n                // Any calls to `log()` will always end with a `\\n`, so that's when we print and reset\n                if (msg === \"\\n\") {\n                    console.log(msgStr);\n                    msgStr = \"\";\n                } else {\n                    // If we've buffered other content, put a space in between the items\n                    if (msgStr !== \"\") {\n                        msgStr += \" \";\n                    }\n                    // Then append the message to the message we are creating\n                    msgStr += msg;\n                }\n            },\n            showSharedRWMemory: function() {\n                const shared_rw_memory_size = instance.exports.getFieldNumLen32();\n                const arr = new Uint32Array(shared_rw_memory_size);\n                for (let j=0; j<shared_rw_memory_size; j++) {\n                    arr[shared_rw_memory_size-1-j] = instance.exports.readSharedRWMemory(j);\n                }\n\n                // In circom 2.0.7, they changed the log() function to allow strings and changed the\n                // output API. This smoothes over the breaking change.\n                if (majorVersion >= 2 && (minorVersion >= 1 || patchVersion >= 7)) {\n                    // If we've buffered other content, put a space in between the items\n                    if (msgStr !== \"\") {\n                        msgStr += \" \";\n                    }\n                    // Then append the value to the message we are creating\n                    const msg = (Scalar.fromArray(arr, 0x100000000).toString());\n                    msgStr += msg;\n                } else {\n                    console.log(Scalar.fromArray(arr, 0x100000000));\n                }\n            },\n            error: function(code, pstr, a,b,c,d) {\n                let errStr;\n                if (code == 7) {\n                    errStr=p2str(pstr) + \" \" + wc.getFr(b).toString() + \" != \" + wc.getFr(c).toString() + \" \" +p2str(d);\n                } else if (code == 9) {\n                    errStr=p2str(pstr) + \" \" + wc.getFr(b).toString() + \" \" +p2str(c);\n                } else if ((code == 5)&&(options.sym)) {\n                    errStr=p2str(pstr)+ \" \" + options.sym.labelIdx2Name[c];\n                } else {\n                    errStr=p2str(pstr)+ \" \" + a + \" \" + b + \" \" + c + \" \" + d;\n                }\n                console.log(\"ERROR: \", code, errStr);\n                throw new Error(errStr);\n            },\n            log: function(a) {\n                console.log(wc.getFr(a).toString());\n            },\n            logGetSignal: function(signal, pVal) {\n                if (options.logGetSignal) {\n                    options.logGetSignal(signal, wc.getFr(pVal) );\n                }\n            },\n            logSetSignal: function(signal, pVal) {\n                if (options.logSetSignal) {\n                    options.logSetSignal(signal, wc.getFr(pVal) );\n                }\n            },\n            logStartComponent: function(cIdx) {\n                if (options.logStartComponent) {\n                    options.logStartComponent(cIdx);\n                }\n            },\n            logFinishComponent: function(cIdx) {\n                if (options.logFinishComponent) {\n                    options.logFinishComponent(cIdx);\n                }\n            }\n        }\n    });\n\n    if (typeof instance.exports.getVersion == 'function') {\n        majorVersion = instance.exports.getVersion();\n    }\n    if (typeof instance.exports.getMinorVersion == 'function') {\n        minorVersion = instance.exports.getMinorVersion();\n    }\n    if (typeof instance.exports.getPatchVersion == 'function') {\n        patchVersion = instance.exports.getPatchVersion();\n    }\n\n    const sanityCheck =\n        options &&\n        (\n            options.sanityCheck ||\n            options.logGetSignal ||\n            options.logSetSignal ||\n            options.logStartComponent ||\n            options.logFinishComponent\n        );\n\n    // We explicitly check for major version 2 in case there's a circom v3 in the future\n    if (majorVersion === 2) {\n        wc = new WitnessCalculatorCircom2(instance, sanityCheck);\n    } else {\n        // TODO: Maybe we want to check for the explicit version 1 before choosing this?\n        wc = new WitnessCalculatorCircom1(memory, instance, sanityCheck);\n    }\n    return wc;\n\n    function getMessage() {\n        var message = \"\";\n        var c = instance.exports.getMessageChar();\n        while ( c != 0 ) {\n            message += String.fromCharCode(c);\n            c = instance.exports.getMessageChar();\n        }\n        return message;\n    }\n\n    function p2str(p) {\n        const i8 = new Uint8Array(memory.buffer);\n\n        const bytes = [];\n\n        for (let i=0; i8[p+i]>0; i++)  bytes.push(i8[p+i]);\n\n        return String.fromCharCode.apply(null, bytes);\n    }\n}\nclass WitnessCalculatorCircom1 {\n    constructor(memory, instance, sanityCheck) {\n        this.memory = memory;\n        this.i32 = new Uint32Array(memory.buffer);\n        this.instance = instance;\n\n        this.n32 = (this.instance.exports.getFrLen() >> 2) - 2;\n        const pRawPrime = this.instance.exports.getPRawPrime();\n\n        const arr = new Array(this.n32);\n        for (let i=0; i<this.n32; i++) {\n            arr[this.n32-1-i] = this.i32[(pRawPrime >> 2) + i];\n        }\n\n        this.prime = Scalar.fromArray(arr, 0x100000000);\n\n        this.Fr = new F1Field(this.prime);\n\n        this.mask32 = Scalar.fromString(\"FFFFFFFF\", 16);\n        this.NVars = this.instance.exports.getNVars();\n        this.n64 = Math.floor((this.Fr.bitLength - 1) / 64)+1;\n        this.R = this.Fr.e( Scalar.shiftLeft(1 , this.n64*64));\n        this.RInv = this.Fr.inv(this.R);\n        this.sanityCheck = sanityCheck;\n    }\n\n    circom_version() {\n        return 1;\n    }\n\n    async _doCalculateWitness(input, sanityCheck) {\n        this.instance.exports.init((this.sanityCheck || sanityCheck) ? 1 : 0);\n        const pSigOffset = this.allocInt();\n        const pFr = this.allocFr();\n        const keys = Object.keys(input);\n        keys.forEach( (k) => {\n            const h = fnvHash(k);\n            const hMSB = parseInt(h.slice(0,8), 16);\n            const hLSB = parseInt(h.slice(8,16), 16);\n            try {\n                this.instance.exports.getSignalOffset32(pSigOffset, 0, hMSB, hLSB);\n            } catch (err) {\n                throw new Error(`Signal ${k} is not an input of the circuit.`);\n            }\n            const sigOffset = this.getInt(pSigOffset);\n            const fArr = flatArray(input[k]);\n            for (let i=0; i<fArr.length; i++) {\n                this.setFr(pFr, fArr[i]);\n                this.instance.exports.setSignal(0, 0, sigOffset + i, pFr);\n            }\n        });\n    }\n\n    async calculateWitness(input, sanityCheck) {\n        const self = this;\n\n        const old0 = self.i32[0];\n        const w = [];\n\n        await self._doCalculateWitness(input, sanityCheck);\n\n        for (let i=0; i<self.NVars; i++) {\n            const pWitness = self.instance.exports.getPWitness(i);\n            w.push(self.getFr(pWitness));\n        }\n\n        self.i32[0] = old0;\n        return w;\n    }\n\n    async calculateBinWitness(input, sanityCheck) {\n        const self = this;\n\n        const old0 = self.i32[0];\n\n        await self._doCalculateWitness(input, sanityCheck);\n\n        const pWitnessBuffer = self.instance.exports.getWitnessBuffer();\n\n        self.i32[0] = old0;\n\n        const buff = self.memory.buffer.slice(pWitnessBuffer, pWitnessBuffer + (self.NVars * self.n64 * 8));\n        return new Uint8Array(buff);\n    }\n\n    allocInt() {\n        const p = this.i32[0];\n        this.i32[0] = p+8;\n        return p;\n    }\n\n    allocFr() {\n        const p = this.i32[0];\n        this.i32[0] = p+this.n32*4 + 8;\n        return p;\n    }\n\n    getInt(p) {\n        return this.i32[p>>2];\n    }\n\n    setInt(p, v) {\n        this.i32[p>>2] = v;\n    }\n\n    getFr(p) {\n        const self = this;\n        const idx = (p>>2);\n\n        if (self.i32[idx + 1] & 0x80000000) {\n            const arr = new Array(self.n32);\n            for (let i=0; i<self.n32; i++) {\n                arr[self.n32-1-i] = self.i32[idx+2+i];\n            }\n            const res = self.Fr.e(Scalar.fromArray(arr, 0x100000000));\n            if (self.i32[idx + 1] & 0x40000000) {\n                return fromMontgomery(res);\n            } else {\n                return res;\n            }\n\n        } else {\n            if (self.i32[idx] & 0x80000000) {\n                return self.Fr.e( self.i32[idx] - 0x100000000);\n            } else {\n                return self.Fr.e(self.i32[idx]);\n            }\n        }\n\n        function fromMontgomery(n) {\n            return self.Fr.mul(self.RInv, n);\n        }\n\n    }\n\n\n    setFr(p, v) {\n        const self = this;\n\n        v = self.Fr.e(v);\n\n        const minShort = self.Fr.neg(self.Fr.e(\"80000000\", 16));\n        const maxShort = self.Fr.e(\"7FFFFFFF\", 16);\n\n        if (  (self.Fr.geq(v, minShort))\n            &&(self.Fr.leq(v, maxShort)))\n        {\n            let a;\n            if (self.Fr.geq(v, self.Fr.zero)) {\n                a = Scalar.toNumber(v);\n            } else {\n                a = Scalar.toNumber( self.Fr.sub(v, minShort));\n                a = a - 0x80000000;\n                a = 0x100000000 + a;\n            }\n            self.i32[(p >> 2)] = a;\n            self.i32[(p >> 2) + 1] = 0;\n            return;\n        }\n\n        self.i32[(p >> 2)] = 0;\n        self.i32[(p >> 2) + 1] = 0x80000000;\n        const arr = Scalar.toArray(v, 0x100000000);\n        for (let i=0; i<self.n32; i++) {\n            const idx = arr.length-1-i;\n\n            if ( idx >=0) {\n                self.i32[(p >> 2) + 2 + i] = arr[idx];\n            } else {\n                self.i32[(p >> 2) + 2 + i] = 0;\n            }\n        }\n    }\n}\n\nclass WitnessCalculatorCircom2 {\n    constructor(instance, sanityCheck) {\n        this.instance = instance;\n\n        this.version = this.instance.exports.getVersion();\n        this.n32 = this.instance.exports.getFieldNumLen32();\n\n        this.instance.exports.getRawPrime();\n        const arr = new Uint32Array(this.n32);\n        for (let i=0; i<this.n32; i++) {\n            arr[this.n32-1-i] = this.instance.exports.readSharedRWMemory(i);\n        }\n        this.prime = Scalar.fromArray(arr, 0x100000000);\n\n        this.witnessSize = this.instance.exports.getWitnessSize();\n\n        this.sanityCheck = sanityCheck;\n    }\n\n    circom_version() {\n        return this.instance.exports.getVersion();\n    }\n\n    async _doCalculateWitness(input, sanityCheck) {\n        //input is assumed to be a map from signals to arrays of bigints\n        this.instance.exports.init((this.sanityCheck || sanityCheck) ? 1 : 0);\n        const keys = Object.keys(input);\n        var input_counter = 0;\n        keys.forEach( (k) => {\n            const h = fnvHash(k);\n            const hMSB = parseInt(h.slice(0,8), 16);\n            const hLSB = parseInt(h.slice(8,16), 16);\n            const fArr = flatArray(input[k]);\n            // Slight deviation from https://github.com/iden3/circom/blob/v2.1.6/code_producers/src/wasm_elements/common/witness_calculator.js\n            // because I don't know when this exported function was added\n            if (typeof this.instance.exports.getInputSignalSize === 'function') {\n                let signalSize = this.instance.exports.getInputSignalSize(hMSB, hLSB);\n                if (signalSize < 0){\n                    throw new Error(`Signal ${k} not found\\n`);\n                }\n                if (fArr.length < signalSize) {\n                    throw new Error(`Not enough values for input signal ${k}\\n`);\n                }\n                if (fArr.length > signalSize) {\n                    throw new Error(`Too many values for input signal ${k}\\n`);\n                }\n            }\n            for (let i=0; i<fArr.length; i++) {\n                const arrFr = toArray32(normalize(fArr[i],this.prime),this.n32);\n                for (let j=0; j<this.n32; j++) {\n                    this.instance.exports.writeSharedRWMemory(j,arrFr[this.n32-1-j]);\n                }\n                try {\n                    this.instance.exports.setInputSignal(hMSB, hLSB,i);\n                    input_counter++;\n                } catch (err) {\n                    // console.log(`After adding signal ${i} of ${k}`)\n                    throw new Error(err);\n                }\n            }\n\n        });\n        if (input_counter < this.instance.exports.getInputSize()) {\n            throw new Error(`Not all inputs have been set. Only ${input_counter} out of ${this.instance.exports.getInputSize()}`);\n        }\n    }\n\n    async calculateWitness(input, sanityCheck) {\n        const w = [];\n\n        await this._doCalculateWitness(input, sanityCheck);\n\n        for (let i=0; i<this.witnessSize; i++) {\n            this.instance.exports.getWitness(i);\n        const arr = new Uint32Array(this.n32);\n            for (let j=0; j<this.n32; j++) {\n            arr[this.n32-1-j] = this.instance.exports.readSharedRWMemory(j);\n            }\n            w.push(Scalar.fromArray(arr, 0x100000000));\n        }\n\n        return w;\n    }\n\n    async calculateWTNSBin(input, sanityCheck) {\n        const buff32 = new Uint32Array(this.witnessSize*this.n32+this.n32+11);\n        const buff = new  Uint8Array( buff32.buffer);\n        await this._doCalculateWitness(input, sanityCheck);\n\n        //\"wtns\"\n        buff[0] = \"w\".charCodeAt(0);\n        buff[1] = \"t\".charCodeAt(0);\n        buff[2] = \"n\".charCodeAt(0);\n        buff[3] = \"s\".charCodeAt(0);\n\n        //version 2\n        buff32[1] = 2;\n\n        //number of sections: 2\n        buff32[2] = 2;\n\n        //id section 1\n        buff32[3] = 1;\n\n        const n8 = this.n32*4;\n        //id section 1 length in 64bytes\n        const idSection1length = 8 + n8;\n        const idSection1lengthHex = idSection1length.toString(16);\n            buff32[4] = parseInt(idSection1lengthHex.slice(0,8), 16);\n            buff32[5] = parseInt(idSection1lengthHex.slice(8,16), 16);\n\n        //this.n32\n        buff32[6] = n8;\n\n        //prime number\n        this.instance.exports.getRawPrime();\n\n        var pos = 7;\n        for (let j=0; j<this.n32; j++) {\n            buff32[pos+j] = this.instance.exports.readSharedRWMemory(j);\n        }\n        pos += this.n32;\n\n        // witness size\n        buff32[pos] = this.witnessSize;\n        pos++;\n\n        //id section 2\n        buff32[pos] = 2;\n        pos++;\n\n        // section 2 length\n        const idSection2length = n8*this.witnessSize;\n        const idSection2lengthHex = idSection2length.toString(16);\n        buff32[pos] = parseInt(idSection2lengthHex.slice(0,8), 16);\n        buff32[pos+1] = parseInt(idSection2lengthHex.slice(8,16), 16);\n\n        pos += 2;\n        for (let i=0; i<this.witnessSize; i++) {\n            this.instance.exports.getWitness(i);\n            for (let j=0; j<this.n32; j++) {\n                buff32[pos+j] = this.instance.exports.readSharedRWMemory(j);\n            }\n            pos += this.n32;\n        }\n\n        return buff;\n    }\n\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\nconst { unstringifyBigInts: unstringifyBigInts$b} = utils;\n\nasync function wtnsCalculate(_input, wasmFileName, wtnsFileName, options) {\n    const input = unstringifyBigInts$b(_input);\n\n    const fdWasm = await readExisting(wasmFileName);\n    const wasm = await fdWasm.read(fdWasm.totalSize);\n    await fdWasm.close();\n\n    const wc = await builder(wasm);\n    if (wc.circom_version() == 1) {\n        const w = await wc.calculateBinWitness(input);\n\n        const fdWtns = await createBinFile(wtnsFileName, \"wtns\", 2, 2);\n\n        await writeBin(fdWtns, w, wc.prime);\n        await fdWtns.close();\n    } else {\n        const fdWtns = await createOverride(wtnsFileName);\n\n        const w = await wc.calculateWTNSBin(input);\n\n        await fdWtns.write(w);\n        await fdWtns.close();\n    }\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\nconst {unstringifyBigInts: unstringifyBigInts$a} = utils;\n\nasync function groth16FullProve(_input, wasmFile, zkeyFileName, logger) {\n    const input = unstringifyBigInts$a(_input);\n\n    const wtns= {\n        type: \"mem\"\n    };\n    await wtnsCalculate(input, wasmFile, wtns);\n    return await groth16Prove(zkeyFileName, wtns, logger);\n}\n\n/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\nconst {unstringifyBigInts: unstringifyBigInts$9} = utils;\n\nasync function groth16Verify(_vk_verifier, _publicSignals, _proof, logger) {\n/*\n    let cpub = vk_verifier.IC[0];\n    for (let s= 0; s< vk_verifier.nPublic; s++) {\n        cpub  = G1.add( cpub, G1.timesScalar( vk_verifier.IC[s+1], publicSignals[s]));\n    }\n*/\n\n    const vk_verifier = unstringifyBigInts$9(_vk_verifier);\n    const proof = unstringifyBigInts$9(_proof);\n    const publicSignals = unstringifyBigInts$9(_publicSignals);\n\n    const curve = await getCurveFromName(vk_verifier.curve);\n\n    const IC0 = curve.G1.fromObject(vk_verifier.IC[0]);\n    const IC = new Uint8Array(curve.G1.F.n8*2 * publicSignals.length);\n    const w = new Uint8Array(curve.Fr.n8 * publicSignals.length);\n\n    if (!publicInputsAreValid$1(curve, publicSignals)) {\n        if (logger) logger.error(\"Public inputs are not valid.\");\n        return false;\n    }\n\n    for (let i=0; i<publicSignals.length; i++) {\n        const buffP = curve.G1.fromObject(vk_verifier.IC[i+1]);\n        IC.set(buffP, i*curve.G1.F.n8*2);\n        Scalar.toRprLE(w, curve.Fr.n8*i, publicSignals[i], curve.Fr.n8);\n    }\n\n    let cpub = await curve.G1.multiExpAffine(IC, w);\n    cpub = curve.G1.add(cpub, IC0);\n\n    const pi_a = curve.G1.fromObject(proof.pi_a);\n    const pi_b = curve.G2.fromObject(proof.pi_b);\n    const pi_c = curve.G1.fromObject(proof.pi_c);\n\n    if (!isWellConstructed$1(curve, {pi_a, pi_b, pi_c})) {\n        if(logger) logger.error(\"Proof commitments are not valid.\");\n        return false;\n    }\n\n    const vk_gamma_2 = curve.G2.fromObject(vk_verifier.vk_gamma_2);\n    const vk_delta_2 = curve.G2.fromObject(vk_verifier.vk_delta_2);\n    const vk_alpha_1 = curve.G1.fromObject(vk_verifier.vk_alpha_1);\n    const vk_beta_2 = curve.G2.fromObject(vk_verifier.vk_beta_2);\n\n    const res = await curve.pairingEq(\n        curve.G1.neg(pi_a) , pi_b,\n        cpub , vk_gamma_2,\n        pi_c , vk_delta_2,\n\n        vk_alpha_1, vk_beta_2\n    );\n\n    if (! res) {\n        if (logger) logger.error(\"Invalid proof\");\n        return false;\n    }\n\n    if (logger) logger.info(\"OK!\");\n    return true;\n}\n\nfunction isWellConstructed$1(curve, proof) {\n    const G1 = curve.G1;\n    const G2 = curve.G2;\n\n    return G1.isValid(proof.pi_a)\n        && G2.isValid(proof.pi_b)\n        && G1.isValid(proof.pi_c);\n}\n\nfunction publicInputsAreValid$1(curve, publicInputs) {\n    for(let i = 0; i < publicInputs.length; i++) {\n        if(!Scalar.lt(publicInputs[i], curve.r)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\nconst { unstringifyBigInts: unstringifyBigInts$8} = utils;\n\nfunction p256$2(n) {\n    let nstr = n.toString(16);\n    while (nstr.length < 64) nstr = \"0\"+nstr;\n    nstr = `\"0x${nstr}\"`;\n    return nstr;\n}\n\nasync function groth16ExportSolidityCallData(_proof, _pub) {\n    const proof = unstringifyBigInts$8(_proof);\n    const pub = unstringifyBigInts$8(_pub);\n\n    let inputs = \"\";\n    for (let i=0; i<pub.length; i++) {\n        if (inputs != \"\") inputs = inputs + \",\";\n        inputs = inputs + p256$2(pub[i]);\n    }\n\n    let S;\n    S=`[${p256$2(proof.pi_a[0])}, ${p256$2(proof.pi_a[1])}],` +\n        `[[${p256$2(proof.pi_b[0][1])}, ${p256$2(proof.pi_b[0][0])}],[${p256$2(proof.pi_b[1][1])}, ${p256$2(proof.pi_b[1][0])}]],` +\n        `[${p256$2(proof.pi_c[0])}, ${p256$2(proof.pi_c[1])}],` +\n        `[${inputs}]`;\n\n    return S;\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nvar groth16 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    fullProve: groth16FullProve,\n    prove: groth16Prove,\n    verify: groth16Verify,\n    exportSolidityCallData: groth16ExportSolidityCallData\n});\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nfunction hashToG2(curve, hash) {\n    const hashV = new DataView(hash.buffer, hash.byteOffset, hash.byteLength);\n    const seed = [];\n    for (let i=0; i<8; i++) {\n        seed[i] = hashV.getUint32(i*4);\n    }\n\n    const rng = new ChaCha(seed);\n\n    const g2_sp = curve.G2.fromRng(rng);\n\n    return g2_sp;\n}\n\nfunction getG2sp(curve, persinalization, challenge, g1s, g1sx) {\n\n    const h = blake2bWasm.exports(64);\n    const b1 = new Uint8Array([persinalization]);\n    h.update(b1);\n    h.update(challenge);\n    const b3 = curve.G1.toUncompressed(g1s);\n    h.update( b3);\n    const b4 = curve.G1.toUncompressed(g1sx);\n    h.update( b4);\n    const hash =h.digest();\n\n    return hashToG2(curve, hash);\n}\n\nfunction calculatePubKey(k, curve, personalization, challengeHash, rng ) {\n    k.g1_s = curve.G1.toAffine(curve.G1.fromRng(rng));\n    k.g1_sx = curve.G1.toAffine(curve.G1.timesFr(k.g1_s, k.prvKey));\n    k.g2_sp = curve.G2.toAffine(getG2sp(curve, personalization, challengeHash, k.g1_s, k.g1_sx));\n    k.g2_spx = curve.G2.toAffine(curve.G2.timesFr(k.g2_sp, k.prvKey));\n    return k;\n}\n\nfunction createPTauKey(curve, challengeHash, rng) {\n    const key = {\n        tau: {},\n        alpha: {},\n        beta: {}\n    };\n    key.tau.prvKey = curve.Fr.fromRng(rng);\n    key.alpha.prvKey = curve.Fr.fromRng(rng);\n    key.beta.prvKey = curve.Fr.fromRng(rng);\n    calculatePubKey(key.tau, curve, 0, challengeHash, rng);\n    calculatePubKey(key.alpha, curve, 1, challengeHash, rng);\n    calculatePubKey(key.beta, curve, 2, challengeHash, rng);\n    return key;\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nasync function writePTauHeader(fd, curve, power, ceremonyPower) {\n    // Write the header\n    ///////////\n\n    if (! ceremonyPower) ceremonyPower = power;\n    await fd.writeULE32(1); // Header type\n    const pHeaderSize = fd.pos;\n    await fd.writeULE64(0); // Temporally set to 0 length\n\n    await fd.writeULE32(curve.F1.n64*8);\n\n    const buff = new Uint8Array(curve.F1.n8);\n    Scalar.toRprLE(buff, 0, curve.q, curve.F1.n8);\n    await fd.write(buff);\n    await fd.writeULE32(power);                    // power\n    await fd.writeULE32(ceremonyPower);               // power\n\n    const headerSize = fd.pos - pHeaderSize - 8;\n\n    const oldPos = fd.pos;\n\n    await fd.writeULE64(headerSize, pHeaderSize);\n\n    fd.pos = oldPos;\n}\n\nasync function readPTauHeader(fd, sections) {\n    if (!sections[1])  throw new Error(fd.fileName + \": File has no  header\");\n    if (sections[1].length>1) throw new Error(fd.fileName +\": File has more than one header\");\n\n    fd.pos = sections[1][0].p;\n    const n8 = await fd.readULE32();\n    const buff = await fd.read(n8);\n    const q = Scalar.fromRprLE(buff);\n\n    const curve = await getCurveFromQ(q);\n\n    if (curve.F1.n64*8 != n8) throw new Error(fd.fileName +\": Invalid size\");\n\n    const power = await fd.readULE32();\n    const ceremonyPower = await fd.readULE32();\n\n    if (fd.pos-sections[1][0].p != sections[1][0].size) throw new Error(\"Invalid PTau header size\");\n\n    return {curve, power, ceremonyPower};\n}\n\n\nasync function readPtauPubKey(fd, curve, montgomery) {\n\n    const buff = await fd.read(curve.F1.n8*2*6 + curve.F2.n8*2*3);\n\n    return fromPtauPubKeyRpr(buff, 0, curve, montgomery);\n}\n\nfunction fromPtauPubKeyRpr(buff, pos, curve, montgomery) {\n\n    const key = {\n        tau: {},\n        alpha: {},\n        beta: {}\n    };\n\n    key.tau.g1_s = readG1();\n    key.tau.g1_sx = readG1();\n    key.alpha.g1_s = readG1();\n    key.alpha.g1_sx = readG1();\n    key.beta.g1_s = readG1();\n    key.beta.g1_sx = readG1();\n    key.tau.g2_spx = readG2();\n    key.alpha.g2_spx = readG2();\n    key.beta.g2_spx = readG2();\n\n    return key;\n\n    function readG1() {\n        let p;\n        if (montgomery) {\n            p = curve.G1.fromRprLEM( buff, pos );\n        } else {\n            p = curve.G1.fromRprUncompressed( buff, pos );\n        }\n        pos += curve.G1.F.n8*2;\n        return p;\n    }\n\n    function readG2() {\n        let p;\n        if (montgomery) {\n            p = curve.G2.fromRprLEM( buff, pos );\n        } else {\n            p = curve.G2.fromRprUncompressed( buff, pos );\n        }\n        pos += curve.G2.F.n8*2;\n        return p;\n    }\n}\n\nfunction toPtauPubKeyRpr(buff, pos, curve, key, montgomery) {\n\n    writeG1(key.tau.g1_s);\n    writeG1(key.tau.g1_sx);\n    writeG1(key.alpha.g1_s);\n    writeG1(key.alpha.g1_sx);\n    writeG1(key.beta.g1_s);\n    writeG1(key.beta.g1_sx);\n    writeG2(key.tau.g2_spx);\n    writeG2(key.alpha.g2_spx);\n    writeG2(key.beta.g2_spx);\n\n    async function writeG1(p) {\n        if (montgomery) {\n            curve.G1.toRprLEM(buff, pos, p);\n        } else {\n            curve.G1.toRprUncompressed(buff, pos, p);\n        }\n        pos += curve.F1.n8*2;\n    }\n\n    async function writeG2(p) {\n        if (montgomery) {\n            curve.G2.toRprLEM(buff, pos, p);\n        } else {\n            curve.G2.toRprUncompressed(buff, pos, p);\n        }\n        pos += curve.F2.n8*2;\n    }\n\n    return buff;\n}\n\nasync function writePtauPubKey(fd, curve, key, montgomery) {\n    const buff = new Uint8Array(curve.F1.n8*2*6 + curve.F2.n8*2*3);\n    toPtauPubKeyRpr(buff, 0, curve, key, montgomery);\n    await fd.write(buff);\n}\n\nasync function readContribution(fd, curve) {\n    const c = {};\n\n    c.tauG1 = await readG1();\n    c.tauG2 = await readG2();\n    c.alphaG1 = await readG1();\n    c.betaG1 = await readG1();\n    c.betaG2 = await readG2();\n    c.key = await readPtauPubKey(fd, curve, true);\n    c.partialHash = await fd.read(216);\n    c.nextChallenge = await fd.read(64);\n    c.type = await fd.readULE32();\n\n    const buffV  = new Uint8Array(curve.G1.F.n8*2*6+curve.G2.F.n8*2*3);\n    toPtauPubKeyRpr(buffV, 0, curve, c.key, false);\n\n    const responseHasher = blake2bWasm.exports(64);\n    responseHasher.setPartialHash(c.partialHash);\n    responseHasher.update(buffV);\n    c.responseHash = responseHasher.digest();\n\n    const paramLength = await fd.readULE32();\n    const curPos = fd.pos;\n    let lastType =0;\n    while (fd.pos-curPos < paramLength) {\n        const buffType = await readDV(1);\n        if (buffType[0]<= lastType) throw new Error(\"Parameters in the contribution must be sorted\");\n        lastType = buffType[0];\n        if (buffType[0]==1) {     // Name\n            const buffLen = await readDV(1);\n            const buffStr = await readDV(buffLen[0]);\n            c.name = new TextDecoder().decode(buffStr);\n        } else if (buffType[0]==2) {\n            const buffExp = await readDV(1);\n            c.numIterationsExp = buffExp[0];\n        } else if (buffType[0]==3) {\n            const buffLen = await readDV(1);\n            c.beaconHash = await readDV(buffLen[0]);\n        } else {\n            throw new Error(\"Parameter not recognized\");\n        }\n    }\n    if (fd.pos != curPos + paramLength) {\n        throw new Error(\"Parametes do not match\");\n    }\n\n    return c;\n\n    async function readG1() {\n        const pBuff = await fd.read(curve.G1.F.n8*2);\n        return curve.G1.fromRprLEM( pBuff );\n    }\n\n    async function readG2() {\n        const pBuff = await fd.read(curve.G2.F.n8*2);\n        return curve.G2.fromRprLEM( pBuff );\n    }\n\n    async function readDV(n) {\n        const b = await fd.read(n);\n        return new Uint8Array(b);\n    }\n}\n\nasync function readContributions(fd, curve, sections) {\n    if (!sections[7])  throw new Error(fd.fileName + \": File has no  contributions\");\n    if (sections[7][0].length>1) throw new Error(fd.fileName +\": File has more than one contributions section\");\n\n    fd.pos = sections[7][0].p;\n    const nContributions = await fd.readULE32();\n    const contributions = [];\n    for (let i=0; i<nContributions; i++) {\n        const c = await readContribution(fd, curve);\n        c.id = i+1;\n        contributions.push(c);\n    }\n\n    if (fd.pos-sections[7][0].p != sections[7][0].size) throw new Error(\"Invalid contribution section size\");\n\n    return contributions;\n}\n\nasync function writeContribution(fd, curve, contribution) {\n\n    const buffG1 = new Uint8Array(curve.F1.n8*2);\n    const buffG2 = new Uint8Array(curve.F2.n8*2);\n    await writeG1(contribution.tauG1);\n    await writeG2(contribution.tauG2);\n    await writeG1(contribution.alphaG1);\n    await writeG1(contribution.betaG1);\n    await writeG2(contribution.betaG2);\n    await writePtauPubKey(fd, curve, contribution.key, true);\n    await fd.write(contribution.partialHash);\n    await fd.write(contribution.nextChallenge);\n    await fd.writeULE32(contribution.type || 0);\n\n    const params = [];\n    if (contribution.name) {\n        params.push(1);      // Param Name\n        const nameData = new TextEncoder(\"utf-8\").encode(contribution.name.substring(0,64));\n        params.push(nameData.byteLength);\n        for (let i=0; i<nameData.byteLength; i++) params.push(nameData[i]);\n    }\n    if (contribution.type == 1) {\n        params.push(2);      // Param numIterationsExp\n        params.push(contribution.numIterationsExp);\n\n        params.push(3);      // Beacon Hash\n        params.push(contribution.beaconHash.byteLength);\n        for (let i=0; i<contribution.beaconHash.byteLength; i++) params.push(contribution.beaconHash[i]);\n    }\n    if (params.length>0) {\n        const paramsBuff = new Uint8Array(params);\n        await fd.writeULE32(paramsBuff.byteLength);\n        await fd.write(paramsBuff);\n    } else {\n        await fd.writeULE32(0);\n    }\n\n\n    async function writeG1(p) {\n        curve.G1.toRprLEM(buffG1, 0, p);\n        await fd.write(buffG1);\n    }\n\n    async function writeG2(p) {\n        curve.G2.toRprLEM(buffG2, 0, p);\n        await fd.write(buffG2);\n    }\n\n}\n\nasync function writeContributions(fd, curve, contributions) {\n\n    await fd.writeULE32(7); // Header type\n    const pContributionsSize = fd.pos;\n    await fd.writeULE64(0); // Temporally set to 0 length\n\n    await fd.writeULE32(contributions.length);\n    for (let i=0; i< contributions.length; i++) {\n        await writeContribution(fd, curve, contributions[i]);\n    }\n    const contributionsSize = fd.pos - pContributionsSize - 8;\n\n    const oldPos = fd.pos;\n\n    await fd.writeULE64(contributionsSize, pContributionsSize);\n    fd.pos = oldPos;\n}\n\nfunction calculateFirstChallengeHash(curve, power, logger) {\n    if (logger) logger.debug(\"Calculating First Challenge Hash\");\n\n    const hasher = new blake2bWasm.exports(64);\n\n    const vG1 = new Uint8Array(curve.G1.F.n8*2);\n    const vG2 = new Uint8Array(curve.G2.F.n8*2);\n    curve.G1.toRprUncompressed(vG1, 0, curve.G1.g);\n    curve.G2.toRprUncompressed(vG2, 0, curve.G2.g);\n\n    hasher.update(blake2bWasm.exports(64).digest());\n\n    let n;\n\n    n=(2 ** power)*2 -1;\n    if (logger) logger.debug(\"Calculate Initial Hash: tauG1\");\n    hashBlock(vG1, n);\n    n= 2 ** power;\n    if (logger) logger.debug(\"Calculate Initial Hash: tauG2\");\n    hashBlock(vG2, n);\n    if (logger) logger.debug(\"Calculate Initial Hash: alphaTauG1\");\n    hashBlock(vG1, n);\n    if (logger) logger.debug(\"Calculate Initial Hash: betaTauG1\");\n    hashBlock(vG1, n);\n    hasher.update(vG2);\n\n    return hasher.digest();\n\n    function hashBlock(buff, n) {\n        // this block size is a good compromise between speed and the maximum\n        // input size of the Blake2b update method (65,535,720 bytes).\n        const blockSize = 341000;\n        const nBlocks = Math.floor(n / blockSize);\n        const rem = n % blockSize;\n        const bigBuff = new Uint8Array(blockSize * buff.byteLength);\n        for (let i=0; i<blockSize; i++) {\n            bigBuff.set(buff, i*buff.byteLength);\n        }\n        for (let i=0; i<nBlocks; i++) {\n            hasher.update(bigBuff);\n            if (logger) logger.debug(\"Initial hash: \" +i*blockSize);\n        }\n        for (let i=0; i<rem; i++) {\n            hasher.update(buff);\n        }\n    }\n}\n\n\nasync function keyFromBeacon(curve, challengeHash, beaconHash, numIterationsExp) {\n\n    const rng = await rngFromBeaconParams(beaconHash, numIterationsExp);\n\n    const key = createPTauKey(curve, challengeHash, rng);\n\n    return key;\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nasync function newAccumulator(curve, power, fileName, logger) {\n\n    await blake2bWasm.exports.ready();\n\n    const fd = await createBinFile(fileName, \"ptau\", 1, 7);\n\n    await writePTauHeader(fd, curve, power, 0);\n\n    const buffG1 = curve.G1.oneAffine;\n    const buffG2 = curve.G2.oneAffine;\n\n    // Write tauG1\n    ///////////\n    await startWriteSection(fd, 2);\n    const nTauG1 = (2 ** power) * 2 -1;\n    for (let i=0; i< nTauG1; i++) {\n        await fd.write(buffG1);\n        if ((logger)&&((i%100000) == 0)&&i) logger.log(\"tauG1: \" + i);\n    }\n    await endWriteSection(fd);\n\n    // Write tauG2\n    ///////////\n    await startWriteSection(fd, 3);\n    const nTauG2 = (2 ** power);\n    for (let i=0; i< nTauG2; i++) {\n        await fd.write(buffG2);\n        if ((logger)&&((i%100000) == 0)&&i) logger.log(\"tauG2: \" + i);\n    }\n    await endWriteSection(fd);\n\n    // Write alphaTauG1\n    ///////////\n    await startWriteSection(fd, 4);\n    const nAlfaTauG1 = (2 ** power);\n    for (let i=0; i< nAlfaTauG1; i++) {\n        await fd.write(buffG1);\n        if ((logger)&&((i%100000) == 0)&&i) logger.log(\"alphaTauG1: \" + i);\n    }\n    await endWriteSection(fd);\n\n    // Write betaTauG1\n    ///////////\n    await startWriteSection(fd, 5);\n    const nBetaTauG1 = (2 ** power);\n    for (let i=0; i< nBetaTauG1; i++) {\n        await fd.write(buffG1);\n        if ((logger)&&((i%100000) == 0)&&i) logger.log(\"betaTauG1: \" + i);\n    }\n    await endWriteSection(fd);\n\n    // Write betaG2\n    ///////////\n    await startWriteSection(fd, 6);\n    await fd.write(buffG2);\n    await endWriteSection(fd);\n\n    // Contributions\n    ///////////\n    await startWriteSection(fd, 7);\n    await fd.writeULE32(0); // 0 Contributions\n    await endWriteSection(fd);\n\n    await fd.close();\n\n    const firstChallengeHash = calculateFirstChallengeHash(curve, power, logger);\n\n    if (logger) logger.debug(formatHash(blake2bWasm.exports(64).digest(), \"Blank Contribution Hash:\"));\n\n    if (logger) logger.info(formatHash(firstChallengeHash, \"First Contribution Hash:\"));\n\n    return firstChallengeHash;\n\n}\n\n// Format of the outpu\n\nasync function exportChallenge(pTauFilename, challengeFilename, logger) {\n    await blake2bWasm.exports.ready();\n    const {fd: fdFrom, sections} = await readBinFile(pTauFilename, \"ptau\", 1);\n\n    const {curve, power} = await readPTauHeader(fdFrom, sections);\n\n    const contributions = await readContributions(fdFrom, curve, sections);\n    let lastResponseHash, curChallengeHash;\n    if (contributions.length == 0) {\n        lastResponseHash = blake2bWasm.exports(64).digest();\n        curChallengeHash = calculateFirstChallengeHash(curve, power);\n    } else {\n        lastResponseHash = contributions[contributions.length-1].responseHash;\n        curChallengeHash = contributions[contributions.length-1].nextChallenge;\n    }\n\n    if (logger) logger.info(formatHash(lastResponseHash, \"Last Response Hash: \"));\n\n    if (logger) logger.info(formatHash(curChallengeHash, \"New Challenge Hash: \"));\n\n\n    const fdTo = await createOverride(challengeFilename);\n\n    const toHash = blake2bWasm.exports(64);\n    await fdTo.write(lastResponseHash);\n    toHash.update(lastResponseHash);\n\n    await exportSection(2, \"G1\", (2 ** power) * 2 -1, \"tauG1\");\n    await exportSection(3, \"G2\", (2 ** power)       , \"tauG2\");\n    await exportSection(4, \"G1\", (2 ** power)       , \"alphaTauG1\");\n    await exportSection(5, \"G1\", (2 ** power)       , \"betaTauG1\");\n    await exportSection(6, \"G2\", 1                  , \"betaG2\");\n\n    await fdFrom.close();\n    await fdTo.close();\n\n    const calcCurChallengeHash = toHash.digest();\n\n    if (!hashIsEqual (curChallengeHash, calcCurChallengeHash)) {\n        if (logger) logger.info(formatHash(calcCurChallengeHash, \"Calc Curret Challenge Hash: \"));\n\n        if (logger) logger.error(\"PTau file is corrupted. Calculated new challenge hash does not match with the eclared one\");\n        throw new Error(\"PTau file is corrupted. Calculated new challenge hash does not match with the eclared one\");\n    }\n\n    return curChallengeHash;\n\n    async function exportSection(sectionId, groupName, nPoints, sectionName) {\n        const G = curve[groupName];\n        const sG = G.F.n8*2;\n        const nPointsChunk = Math.floor((1<<24)/sG);\n\n        await startReadUniqueSection(fdFrom, sections, sectionId);\n        for (let i=0; i< nPoints; i+= nPointsChunk) {\n            if (logger) logger.debug(`Exporting ${sectionName}: ${i}/${nPoints}`);\n            const n = Math.min(nPoints-i, nPointsChunk);\n            let buff;\n            buff = await fdFrom.read(n*sG);\n            buff = await G.batchLEMtoU(buff);\n            await fdTo.write(buff);\n            toHash.update(buff);\n        }\n        await endReadSection(fdFrom);\n    }\n\n\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nasync function importResponse(oldPtauFilename, contributionFilename, newPTauFilename, name, importPoints, logger) {\n\n    await blake2bWasm.exports.ready();\n\n    const noHash = new Uint8Array(64);\n    for (let i=0; i<64; i++) noHash[i] = 0xFF;\n\n    const {fd: fdOld, sections} = await readBinFile(oldPtauFilename, \"ptau\", 1);\n    const {curve, power} = await readPTauHeader(fdOld, sections);\n    const contributions = await readContributions(fdOld, curve, sections);\n    const currentContribution = {};\n\n    if (name) currentContribution.name = name;\n\n    const sG1 = curve.F1.n8*2;\n    const scG1 = curve.F1.n8; // Compresed size\n    const sG2 = curve.F2.n8*2;\n    const scG2 = curve.F2.n8; // Compresed size\n\n    const fdResponse = await readExisting(contributionFilename);\n\n    if  (fdResponse.totalSize !=\n        64 +                            // Old Hash\n        ((2 ** power)*2-1)*scG1 +\n        (2 ** power)*scG2 +\n        (2 ** power)*scG1 +\n        (2 ** power)*scG1 +\n        scG2 +\n        sG1*6 + sG2*3)\n        throw new Error(\"Size of the contribution is invalid\");\n\n    let lastChallengeHash;\n\n    if (contributions.length>0) {\n        lastChallengeHash = contributions[contributions.length-1].nextChallenge;\n    } else {\n        lastChallengeHash = calculateFirstChallengeHash(curve, power, logger);\n    }\n\n    const fdNew = await createBinFile(newPTauFilename, \"ptau\", 1, importPoints ? 7: 2);\n    await writePTauHeader(fdNew, curve, power);\n\n    const contributionPreviousHash = await fdResponse.read(64);\n\n    if (hashIsEqual(noHash,lastChallengeHash)) {\n        lastChallengeHash = contributionPreviousHash;\n        contributions[contributions.length-1].nextChallenge = lastChallengeHash;\n    }\n\n    if(!hashIsEqual(contributionPreviousHash,lastChallengeHash))\n        throw new Error(\"Wrong contribution. this contribution is not based on the previus hash\");\n\n    const hasherResponse = new blake2bWasm.exports(64);\n    hasherResponse.update(contributionPreviousHash);\n\n    const startSections = [];\n    let res;\n    res = await processSection(fdResponse, fdNew, \"G1\", 2, (2 ** power) * 2 -1, [1], \"tauG1\");\n    currentContribution.tauG1 = res[0];\n    res = await processSection(fdResponse, fdNew, \"G2\", 3, (2 ** power)       , [1], \"tauG2\");\n    currentContribution.tauG2 = res[0];\n    res = await processSection(fdResponse, fdNew, \"G1\", 4, (2 ** power)       , [0], \"alphaG1\");\n    currentContribution.alphaG1 = res[0];\n    res = await processSection(fdResponse, fdNew, \"G1\", 5, (2 ** power)       , [0], \"betaG1\");\n    currentContribution.betaG1 = res[0];\n    res = await processSection(fdResponse, fdNew, \"G2\", 6, 1                  , [0], \"betaG2\");\n    currentContribution.betaG2 = res[0];\n\n    currentContribution.partialHash = hasherResponse.getPartialHash();\n\n\n    const buffKey = await fdResponse.read(curve.F1.n8*2*6+curve.F2.n8*2*3);\n\n    currentContribution.key = fromPtauPubKeyRpr(buffKey, 0, curve, false);\n\n    hasherResponse.update(new Uint8Array(buffKey));\n    const hashResponse = hasherResponse.digest();\n\n    if (logger) logger.info(formatHash(hashResponse, \"Contribution Response Hash imported: \"));\n\n    if (importPoints) {\n        const nextChallengeHasher = new blake2bWasm.exports(64);\n        nextChallengeHasher.update(hashResponse);\n\n        await hashSection(nextChallengeHasher, fdNew, \"G1\", 2, (2 ** power) * 2 -1, \"tauG1\", logger);\n        await hashSection(nextChallengeHasher, fdNew, \"G2\", 3, (2 ** power)       , \"tauG2\", logger);\n        await hashSection(nextChallengeHasher, fdNew, \"G1\", 4, (2 ** power)       , \"alphaTauG1\", logger);\n        await hashSection(nextChallengeHasher, fdNew, \"G1\", 5, (2 ** power)       , \"betaTauG1\", logger);\n        await hashSection(nextChallengeHasher, fdNew, \"G2\", 6, 1                  , \"betaG2\", logger);\n\n        currentContribution.nextChallenge = nextChallengeHasher.digest();\n\n        if (logger) logger.info(formatHash(currentContribution.nextChallenge, \"Next Challenge Hash: \"));\n    } else {\n        currentContribution.nextChallenge = noHash;\n    }\n\n    contributions.push(currentContribution);\n\n    await writeContributions(fdNew, curve, contributions);\n\n    await fdResponse.close();\n    await fdNew.close();\n    await fdOld.close();\n\n    return currentContribution.nextChallenge;\n\n    async function processSection(fdFrom, fdTo, groupName, sectionId, nPoints, singularPointIndexes, sectionName) {\n        if (importPoints) {\n            return await processSectionImportPoints(fdFrom, fdTo, groupName, sectionId, nPoints, singularPointIndexes, sectionName);\n        } else {\n            return await processSectionNoImportPoints(fdFrom, fdTo, groupName, sectionId, nPoints, singularPointIndexes, sectionName);\n        }\n    }\n\n    async function processSectionImportPoints(fdFrom, fdTo, groupName, sectionId, nPoints, singularPointIndexes, sectionName) {\n\n        const G = curve[groupName];\n        const scG = G.F.n8;\n        const sG = G.F.n8*2;\n\n        const singularPoints = [];\n\n        await startWriteSection(fdTo, sectionId);\n        const nPointsChunk = Math.floor((1<<24)/sG);\n\n        startSections[sectionId] = fdTo.pos;\n\n        for (let i=0; i< nPoints; i += nPointsChunk) {\n            if (logger) logger.debug(`Importing ${sectionName}: ${i}/${nPoints}`);\n            const n = Math.min(nPoints-i, nPointsChunk);\n\n            const buffC = await fdFrom.read(n * scG);\n            hasherResponse.update(buffC);\n\n            const buffLEM = await G.batchCtoLEM(buffC);\n\n            await fdTo.write(buffLEM);\n            for (let j=0; j<singularPointIndexes.length; j++) {\n                const sp = singularPointIndexes[j];\n                if ((sp >=i) && (sp < i+n)) {\n                    const P = G.fromRprLEM(buffLEM, (sp-i)*sG);\n                    singularPoints.push(P);\n                }\n            }\n        }\n\n        await endWriteSection(fdTo);\n\n        return singularPoints;\n    }\n\n\n    async function processSectionNoImportPoints(fdFrom, fdTo, groupName, sectionId, nPoints, singularPointIndexes, sectionName) {\n\n        const G = curve[groupName];\n        const scG = G.F.n8;\n\n        const singularPoints = [];\n\n        const nPointsChunk = Math.floor((1<<24)/scG);\n\n        for (let i=0; i< nPoints; i += nPointsChunk) {\n            if (logger) logger.debug(`Importing ${sectionName}: ${i}/${nPoints}`);\n            const n = Math.min(nPoints-i, nPointsChunk);\n\n            const buffC = await fdFrom.read(n * scG);\n            hasherResponse.update(buffC);\n\n            for (let j=0; j<singularPointIndexes.length; j++) {\n                const sp = singularPointIndexes[j];\n                if ((sp >=i) && (sp < i+n)) {\n                    const P = G.fromRprCompressed(buffC, (sp-i)*scG);\n                    singularPoints.push(P);\n                }\n            }\n        }\n\n        return singularPoints;\n    }\n\n\n    async function hashSection(nextChallengeHasher, fdTo, groupName, sectionId, nPoints, sectionName, logger) {\n\n        const G = curve[groupName];\n        const sG = G.F.n8*2;\n        const nPointsChunk = Math.floor((1<<24)/sG);\n\n        const oldPos = fdTo.pos;\n        fdTo.pos = startSections[sectionId];\n\n        for (let i=0; i< nPoints; i += nPointsChunk) {\n            if (logger) logger.debug(`Hashing ${sectionName}: ${i}/${nPoints}`);\n            const n = Math.min(nPoints-i, nPointsChunk);\n\n            const buffLEM = await fdTo.read(n * sG);\n\n            const buffU = await G.batchLEMtoU(buffLEM);\n\n            nextChallengeHasher.update(buffU);\n        }\n\n        fdTo.pos = oldPos;\n    }\n\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\nconst sameRatio$1 = sameRatio$2;\n\nasync function verifyContribution(curve, cur, prev, logger) {\n    let sr;\n    if (cur.type == 1) {    // Verify the beacon.\n        const beaconKey = await keyFromBeacon(curve, prev.nextChallenge, cur.beaconHash, cur.numIterationsExp);\n\n        if (!curve.G1.eq(cur.key.tau.g1_s, beaconKey.tau.g1_s)) {\n            if (logger) logger.error(`BEACON key (tauG1_s) is not generated correctly in challenge #${cur.id}  ${cur.name || \"\"}` );\n            return false;\n        }\n        if (!curve.G1.eq(cur.key.tau.g1_sx, beaconKey.tau.g1_sx)) {\n            if (logger) logger.error(`BEACON key (tauG1_sx) is not generated correctly in challenge #${cur.id}  ${cur.name || \"\"}` );\n            return false;\n        }\n        if (!curve.G2.eq(cur.key.tau.g2_spx, beaconKey.tau.g2_spx)) {\n            if (logger) logger.error(`BEACON key (tauG2_spx) is not generated correctly in challenge #${cur.id}  ${cur.name || \"\"}` );\n            return false;\n        }\n\n        if (!curve.G1.eq(cur.key.alpha.g1_s, beaconKey.alpha.g1_s)) {\n            if (logger) logger.error(`BEACON key (alphaG1_s) is not generated correctly in challenge #${cur.id}  ${cur.name || \"\"}` );\n            return false;\n        }\n        if (!curve.G1.eq(cur.key.alpha.g1_sx, beaconKey.alpha.g1_sx)) {\n            if (logger) logger.error(`BEACON key (alphaG1_sx) is not generated correctly in challenge #${cur.id}  ${cur.name || \"\"}` );\n            return false;\n        }\n        if (!curve.G2.eq(cur.key.alpha.g2_spx, beaconKey.alpha.g2_spx)) {\n            if (logger) logger.error(`BEACON key (alphaG2_spx) is not generated correctly in challenge #${cur.id}  ${cur.name || \"\"}` );\n            return false;\n        }\n\n        if (!curve.G1.eq(cur.key.beta.g1_s, beaconKey.beta.g1_s)) {\n            if (logger) logger.error(`BEACON key (betaG1_s) is not generated correctly in challenge #${cur.id}  ${cur.name || \"\"}` );\n            return false;\n        }\n        if (!curve.G1.eq(cur.key.beta.g1_sx, beaconKey.beta.g1_sx)) {\n            if (logger) logger.error(`BEACON key (betaG1_sx) is not generated correctly in challenge #${cur.id}  ${cur.name || \"\"}` );\n            return false;\n        }\n        if (!curve.G2.eq(cur.key.beta.g2_spx, beaconKey.beta.g2_spx)) {\n            if (logger) logger.error(`BEACON key (betaG2_spx) is not generated correctly in challenge #${cur.id}  ${cur.name || \"\"}` );\n            return false;\n        }\n    }\n\n    cur.key.tau.g2_sp = curve.G2.toAffine(getG2sp(curve, 0, prev.nextChallenge, cur.key.tau.g1_s, cur.key.tau.g1_sx));\n    cur.key.alpha.g2_sp = curve.G2.toAffine(getG2sp(curve, 1, prev.nextChallenge, cur.key.alpha.g1_s, cur.key.alpha.g1_sx));\n    cur.key.beta.g2_sp = curve.G2.toAffine(getG2sp(curve, 2, prev.nextChallenge, cur.key.beta.g1_s, cur.key.beta.g1_sx));\n\n    sr = await sameRatio$1(curve, cur.key.tau.g1_s, cur.key.tau.g1_sx, cur.key.tau.g2_sp, cur.key.tau.g2_spx);\n    if (sr !== true) {\n        if (logger) logger.error(\"INVALID key (tau) in challenge #\"+cur.id);\n        return false;\n    }\n\n    sr = await sameRatio$1(curve, cur.key.alpha.g1_s, cur.key.alpha.g1_sx, cur.key.alpha.g2_sp, cur.key.alpha.g2_spx);\n    if (sr !== true) {\n        if (logger) logger.error(\"INVALID key (alpha) in challenge #\"+cur.id);\n        return false;\n    }\n\n    sr = await sameRatio$1(curve, cur.key.beta.g1_s, cur.key.beta.g1_sx, cur.key.beta.g2_sp, cur.key.beta.g2_spx);\n    if (sr !== true) {\n        if (logger) logger.error(\"INVALID key (beta) in challenge #\"+cur.id);\n        return false;\n    }\n\n    sr = await sameRatio$1(curve, prev.tauG1, cur.tauG1, cur.key.tau.g2_sp, cur.key.tau.g2_spx);\n    if (sr !== true) {\n        if (logger) logger.error(\"INVALID tau*G1. challenge #\"+cur.id+\" It does not follow the previous contribution\");\n        return false;\n    }\n\n    sr = await sameRatio$1(curve,  cur.key.tau.g1_s, cur.key.tau.g1_sx, prev.tauG2, cur.tauG2);\n    if (sr !== true) {\n        if (logger) logger.error(\"INVALID tau*G2. challenge #\"+cur.id+\" It does not follow the previous contribution\");\n        return false;\n    }\n\n    sr = await sameRatio$1(curve, prev.alphaG1, cur.alphaG1, cur.key.alpha.g2_sp, cur.key.alpha.g2_spx);\n    if (sr !== true) {\n        if (logger) logger.error(\"INVALID alpha*G1. challenge #\"+cur.id+\" It does not follow the previous contribution\");\n        return false;\n    }\n\n    sr = await sameRatio$1(curve, prev.betaG1, cur.betaG1, cur.key.beta.g2_sp, cur.key.beta.g2_spx);\n    if (sr !== true) {\n        if (logger) logger.error(\"INVALID beta*G1. challenge #\"+cur.id+\" It does not follow the previous contribution\");\n        return false;\n    }\n\n    sr = await sameRatio$1(curve,  cur.key.beta.g1_s, cur.key.beta.g1_sx, prev.betaG2, cur.betaG2);\n    if (sr !== true) {\n        if (logger) logger.error(\"INVALID beta*G2. challenge #\"+cur.id+\"It does not follow the previous contribution\");\n        return false;\n    }\n\n    if (logger) logger.info(\"Powers Of tau file OK!\");\n    return true;\n}\n\nasync function verify(tauFilename, logger) {\n    let sr;\n    await blake2bWasm.exports.ready();\n\n    const {fd, sections} = await readBinFile(tauFilename, \"ptau\", 1);\n    const {curve, power, ceremonyPower} = await readPTauHeader(fd, sections);\n    const contrs = await readContributions(fd, curve, sections);\n\n    if (logger) logger.debug(\"power: 2**\" + power);\n    // Verify Last contribution\n\n    if (logger) logger.debug(\"Computing initial contribution hash\");\n    const initialContribution = {\n        tauG1: curve.G1.g,\n        tauG2: curve.G2.g,\n        alphaG1: curve.G1.g,\n        betaG1: curve.G1.g,\n        betaG2: curve.G2.g,\n        nextChallenge: calculateFirstChallengeHash(curve, ceremonyPower, logger),\n        responseHash: blake2bWasm.exports(64).digest()\n    };\n\n    if (contrs.length == 0) {\n        if (logger) logger.error(\"This file has no contribution! It cannot be used in production\");\n        return false;\n    }\n\n    let prevContr;\n    if (contrs.length>1) {\n        prevContr = contrs[contrs.length-2];\n    } else {\n        prevContr = initialContribution;\n    }\n    const curContr = contrs[contrs.length-1];\n    if (logger) logger.debug(\"Validating contribution #\"+contrs[contrs.length-1].id);\n    const res = await verifyContribution(curve, curContr, prevContr, logger);\n    if (!res) return false;\n\n\n    const nextContributionHasher = blake2bWasm.exports(64);\n    nextContributionHasher.update(curContr.responseHash);\n\n    // Verify powers and compute nextChallengeHash\n\n    // await test();\n\n    // Verify Section tau*G1\n    if (logger) logger.debug(\"Verifying powers in tau*G1 section\");\n    const rTau1 = await processSection(2, \"G1\", \"tauG1\", (2 ** power)*2-1, [0, 1], logger);\n    sr = await sameRatio$1(curve, rTau1.R1, rTau1.R2, curve.G2.g, curContr.tauG2);\n    if (sr !== true) {\n        if (logger) logger.error(\"tauG1 section. Powers do not match\");\n        return false;\n    }\n    if (!curve.G1.eq(curve.G1.g, rTau1.singularPoints[0])) {\n        if (logger) logger.error(\"First element of tau*G1 section must be the generator\");\n        return false;\n    }\n    if (!curve.G1.eq(curContr.tauG1, rTau1.singularPoints[1])) {\n        if (logger) logger.error(\"Second element of tau*G1 section does not match the one in the contribution section\");\n        return false;\n    }\n\n    // await test();\n\n    // Verify Section tau*G2\n    if (logger) logger.debug(\"Verifying powers in tau*G2 section\");\n    const rTau2 = await processSection(3, \"G2\", \"tauG2\", 2 ** power, [0, 1],  logger);\n    sr = await sameRatio$1(curve, curve.G1.g, curContr.tauG1, rTau2.R1, rTau2.R2);\n    if (sr !== true) {\n        if (logger) logger.error(\"tauG2 section. Powers do not match\");\n        return false;\n    }\n    if (!curve.G2.eq(curve.G2.g, rTau2.singularPoints[0])) {\n        if (logger) logger.error(\"First element of tau*G2 section must be the generator\");\n        return false;\n    }\n    if (!curve.G2.eq(curContr.tauG2, rTau2.singularPoints[1])) {\n        if (logger) logger.error(\"Second element of tau*G2 section does not match the one in the contribution section\");\n        return false;\n    }\n\n    // Verify Section alpha*tau*G1\n    if (logger) logger.debug(\"Verifying powers in alpha*tau*G1 section\");\n    const rAlphaTauG1 = await processSection(4, \"G1\", \"alphatauG1\", 2 ** power, [0], logger);\n    sr = await sameRatio$1(curve, rAlphaTauG1.R1, rAlphaTauG1.R2, curve.G2.g, curContr.tauG2);\n    if (sr !== true) {\n        if (logger) logger.error(\"alphaTauG1 section. Powers do not match\");\n        return false;\n    }\n    if (!curve.G1.eq(curContr.alphaG1, rAlphaTauG1.singularPoints[0])) {\n        if (logger) logger.error(\"First element of alpha*tau*G1 section (alpha*G1) does not match the one in the contribution section\");\n        return false;\n    }\n\n    // Verify Section beta*tau*G1\n    if (logger) logger.debug(\"Verifying powers in beta*tau*G1 section\");\n    const rBetaTauG1 = await processSection(5, \"G1\", \"betatauG1\", 2 ** power, [0], logger);\n    sr = await sameRatio$1(curve, rBetaTauG1.R1, rBetaTauG1.R2, curve.G2.g, curContr.tauG2);\n    if (sr !== true) {\n        if (logger) logger.error(\"betaTauG1 section. Powers do not match\");\n        return false;\n    }\n    if (!curve.G1.eq(curContr.betaG1, rBetaTauG1.singularPoints[0])) {\n        if (logger) logger.error(\"First element of beta*tau*G1 section (beta*G1) does not match the one in the contribution section\");\n        return false;\n    }\n\n    //Verify Beta G2\n    const betaG2 = await processSectionBetaG2(logger);\n    if (!curve.G2.eq(curContr.betaG2, betaG2)) {\n        if (logger) logger.error(\"betaG2 element in betaG2 section does not match the one in the contribution section\");\n        return false;\n    }\n\n\n    const nextContributionHash = nextContributionHasher.digest();\n\n    // Check the nextChallengeHash\n    if (power == ceremonyPower) {\n        if (!hashIsEqual(nextContributionHash,curContr.nextChallenge)) {\n            if (logger) logger.error(\"Hash of the values does not match the next challenge of the last contributor in the contributions section\");\n            return false;\n        }\n    }\n\n    if (logger) logger.info(formatHash(nextContributionHash, \"Next challenge hash: \"));\n\n    // Verify Previous contributions\n\n    printContribution(curContr, prevContr);\n    for (let i = contrs.length-2; i>=0; i--) {\n        const curContr = contrs[i];\n        const prevContr =  (i>0) ? contrs[i-1] : initialContribution;\n        const res = await verifyContribution(curve, curContr, prevContr, logger);\n        if (!res) return false;\n        printContribution(curContr, prevContr);\n    }\n    if (logger) logger.info(\"-----------------------------------------------------\");\n\n    if ((!sections[12]) || (!sections[13]) || (!sections[14]) || (!sections[15])) {\n        if (logger) logger.warn(\n            \"this file does not contain phase2 precalculated values. Please run: \\n\" +\n            \"   snarkjs \\\"powersoftau preparephase2\\\" to prepare this file to be used in the phase2 ceremony.\"\n        );\n    } else {\n        let res;\n        res = await verifyLagrangeEvaluations(\"G1\", 2, 12, \"tauG1\", logger);\n        if (!res) return false;\n        res = await verifyLagrangeEvaluations(\"G2\", 3, 13, \"tauG2\", logger);\n        if (!res) return false;\n        res = await verifyLagrangeEvaluations(\"G1\", 4, 14, \"alphaTauG1\", logger);\n        if (!res) return false;\n        res = await verifyLagrangeEvaluations(\"G1\", 5, 15, \"betaTauG1\", logger);\n        if (!res) return false;\n    }\n\n    await fd.close();\n\n    if (logger) logger.info(\"Powers of Tau Ok!\");\n\n    return true;\n\n    function printContribution(curContr, prevContr) {\n        if (!logger) return;\n        logger.info(\"-----------------------------------------------------\");\n        logger.info(`Contribution #${curContr.id}: ${curContr.name ||\"\"}`);\n\n        logger.info(formatHash(curContr.nextChallenge, \"Next Challenge: \"));\n\n        const buffV  = new Uint8Array(curve.G1.F.n8*2*6+curve.G2.F.n8*2*3);\n        toPtauPubKeyRpr(buffV, 0, curve, curContr.key, false);\n\n        const responseHasher = blake2bWasm.exports(64);\n        responseHasher.setPartialHash(curContr.partialHash);\n        responseHasher.update(buffV);\n        const responseHash = responseHasher.digest();\n\n        logger.info(formatHash(responseHash, \"Response Hash:\"));\n\n        logger.info(formatHash(prevContr.nextChallenge, \"Response Hash:\"));\n\n        if (curContr.type == 1) {\n            logger.info(`Beacon generator: ${byteArray2hex(curContr.beaconHash)}`);\n            logger.info(`Beacon iterations Exp: ${curContr.numIterationsExp}`);\n        }\n\n    }\n\n    async function processSectionBetaG2(logger) {\n        const G = curve.G2;\n        const sG = G.F.n8*2;\n        const buffUv = new Uint8Array(sG);\n\n        if (!sections[6])  {\n            logger.error(\"File has no BetaG2 section\");\n            throw new Error(\"File has no BetaG2 section\");\n        }\n        if (sections[6].length>1) {\n            logger.error(\"File has no BetaG2 section\");\n            throw new Error(\"File has more than one GetaG2 section\");\n        }\n        fd.pos = sections[6][0].p;\n\n        const buff = await fd.read(sG);\n        const P = G.fromRprLEM(buff);\n\n        G.toRprUncompressed(buffUv, 0, P);\n        nextContributionHasher.update(buffUv);\n\n        return P;\n    }\n\n    async function processSection(idSection, groupName, sectionName, nPoints, singularPointIndexes, logger) {\n        const MAX_CHUNK_SIZE = 1<<16;\n        const G = curve[groupName];\n        const sG = G.F.n8*2;\n        await startReadUniqueSection(fd, sections, idSection);\n\n        const singularPoints = [];\n\n        let R1 = G.zero;\n        let R2 = G.zero;\n\n        let lastBase = G.zero;\n\n        for (let i=0; i<nPoints; i += MAX_CHUNK_SIZE) {\n            if (logger) logger.debug(`points relations: ${sectionName}: ${i}/${nPoints} `);\n            const n = Math.min(nPoints - i, MAX_CHUNK_SIZE);\n            const bases = await fd.read(n*sG);\n\n            const basesU = await G.batchLEMtoU(bases);\n            nextContributionHasher.update(basesU);\n\n            const scalars = getRandomBytes(4*(n-1));\n\n            if (i>0) {\n                const firstBase = G.fromRprLEM(bases, 0);\n                const r = readUInt32BE(getRandomBytes(4), 0);\n\n                R1 = G.add(R1, G.timesScalar(lastBase, r));\n                R2 = G.add(R2, G.timesScalar(firstBase, r));\n            }\n\n            const r1 = await G.multiExpAffine(bases.slice(0, (n-1)*sG), scalars);\n            const r2 = await G.multiExpAffine(bases.slice(sG), scalars);\n\n            R1 = G.add(R1, r1);\n            R2 = G.add(R2, r2);\n\n            lastBase = G.fromRprLEM( bases, (n-1)*sG);\n\n            for (let j=0; j<singularPointIndexes.length; j++) {\n                const sp = singularPointIndexes[j];\n                if ((sp >=i) && (sp < i+n)) {\n                    const P = G.fromRprLEM(bases, (sp-i)*sG);\n                    singularPoints.push(P);\n                }\n            }\n\n        }\n        await endReadSection(fd);\n\n        return {\n            R1: R1,\n            R2: R2,\n            singularPoints: singularPoints\n        };\n\n    }\n\n    async function verifyLagrangeEvaluations(gName, tauSection, lagrangeSection, sectionName, logger) {\n\n        if (logger) logger.debug(`Verifying phase2 calculated values ${sectionName}...`);\n        const G = curve[gName];\n        const sG = G.F.n8*2;\n\n        const seed= new Array(8);\n        for (let i=0; i<8; i++) {\n            seed[i] = readUInt32BE(getRandomBytes(4), 0);\n        }\n\n        for (let p=0; p<= power; p ++) {\n            const res = await verifyPower(p);\n            if (!res) return false;\n        }\n\n        if (tauSection == 2) {\n            const res = await verifyPower(power+1);\n            if (!res) return false;\n        }\n\n        return true;\n\n        async function verifyPower(p) {\n            if (logger) logger.debug(`Power ${p}...`);\n            const n8r = curve.Fr.n8;\n            const nPoints = 2 ** p;\n            let buff_r = new Uint32Array(nPoints);\n            let buffG;\n\n            let rng = new ChaCha(seed);\n\n            if (logger) logger.debug(`Creating random numbers Powers${p}...`);\n            for (let i=0; i<nPoints; i++) {\n                if ((p == power+1)&&(i == nPoints-1)) {\n                    buff_r[i] = 0;\n                } else {\n                    buff_r[i] = rng.nextU32();\n                }\n            }\n\n            buff_r = new Uint8Array(buff_r.buffer, buff_r.byteOffset, buff_r.byteLength);\n\n            if (logger) logger.debug(`reading points Powers${p}...`);\n            await startReadUniqueSection(fd, sections, tauSection);\n            buffG = new BigBuffer(nPoints*sG);\n            if (p == power+1) {\n                await fd.readToBuffer(buffG, 0, (nPoints-1)*sG);\n                buffG.set(curve.G1.zeroAffine, (nPoints-1)*sG);\n            } else {\n                await fd.readToBuffer(buffG, 0, nPoints*sG);\n            }\n            await endReadSection(fd, true);\n\n            const resTau = await G.multiExpAffine(buffG, buff_r, logger, sectionName + \"_\" + p);\n\n            buff_r = new BigBuffer(nPoints * n8r);\n\n            rng = new ChaCha(seed);\n\n            const buff4 = new Uint8Array(4);\n            const buff4V = new DataView(buff4.buffer);\n\n            if (logger) logger.debug(`Creating random numbers Powers${p}...`);\n            for (let i=0; i<nPoints; i++) {\n                if ((i != nPoints-1) || (p != power+1)) {\n                    buff4V.setUint32(0, rng.nextU32(), true);\n                    buff_r.set(buff4, i*n8r);\n                }\n            }\n\n            if (logger) logger.debug(`batchToMontgomery ${p}...`);\n            buff_r = await curve.Fr.batchToMontgomery(buff_r);\n            if (logger) logger.debug(`fft ${p}...`);\n            buff_r = await curve.Fr.fft(buff_r);\n            if (logger) logger.debug(`batchFromMontgomery ${p}...`);\n            buff_r = await curve.Fr.batchFromMontgomery(buff_r);\n\n            if (logger) logger.debug(`reading points Lagrange${p}...`);\n            await startReadUniqueSection(fd, sections, lagrangeSection);\n            fd.pos += sG*((2 ** p)-1);\n            await fd.readToBuffer(buffG, 0, nPoints*sG);\n            await endReadSection(fd, true);\n\n            const resLagrange = await G.multiExpAffine(buffG, buff_r, logger, sectionName + \"_\" + p + \"_transformed\");\n\n            if (!G.eq(resTau, resLagrange)) {\n                if (logger) logger.error(\"Phase2 caclutation does not match with powers of tau\");\n                return false;\n            }\n\n            return true;\n        }\n    }\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n/*\n    This function creates a new section in the fdTo file with id idSection.\n    It multiplies the pooints in fdFrom by first, first*inc, first*inc^2, ....\n    nPoint Times.\n    It also updates the newChallengeHasher with the new points\n*/\n\nasync function applyKeyToSection(fdOld, sections, fdNew, idSection, curve, groupName, first, inc, sectionName, logger) {\n    const MAX_CHUNK_SIZE = 1 << 16;\n    const G = curve[groupName];\n    const sG = G.F.n8*2;\n    const nPoints = sections[idSection][0].size / sG;\n\n    await startReadUniqueSection(fdOld, sections,idSection );\n    await startWriteSection(fdNew, idSection);\n\n    let t = first;\n    for (let i=0; i<nPoints; i += MAX_CHUNK_SIZE) {\n        if (logger) logger.debug(`Applying key: ${sectionName}: ${i}/${nPoints}`);\n        const n= Math.min(nPoints - i, MAX_CHUNK_SIZE);\n        let buff;\n        buff = await fdOld.read(n*sG);\n        buff = await G.batchApplyKey(buff, t, inc);\n        await fdNew.write(buff);\n        t = curve.Fr.mul(t, curve.Fr.exp(inc, n));\n    }\n\n    await endWriteSection(fdNew);\n    await endReadSection(fdOld);\n}\n\n\n\nasync function applyKeyToChallengeSection(fdOld, fdNew, responseHasher, curve, groupName, nPoints, first, inc, formatOut, sectionName, logger) {\n    const G = curve[groupName];\n    const sG = G.F.n8*2;\n    const chunkSize = Math.floor((1<<20) / sG);   // 128Mb chunks\n    let t = first;\n    for (let i=0 ; i<nPoints ; i+= chunkSize) {\n        if (logger) logger.debug(`Applying key ${sectionName}: ${i}/${nPoints}`);\n        const n= Math.min(nPoints-i, chunkSize );\n        const buffInU = await fdOld.read(n * sG);\n        const buffInLEM = await G.batchUtoLEM(buffInU);\n        const buffOutLEM = await G.batchApplyKey(buffInLEM, t, inc);\n        let buffOut;\n        if (formatOut == \"COMPRESSED\") {\n            buffOut = await G.batchLEMtoC(buffOutLEM);\n        } else {\n            buffOut = await G.batchLEMtoU(buffOutLEM);\n        }\n\n        if (responseHasher) responseHasher.update(buffOut);\n        await fdNew.write(buffOut);\n        t = curve.Fr.mul(t, curve.Fr.exp(inc, n));\n    }\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nasync function challengeContribute(curve, challengeFilename, responesFileName, entropy, logger) {\n    await blake2bWasm.exports.ready();\n\n    const fdFrom = await readExisting(challengeFilename);\n\n\n    const sG1 = curve.F1.n64*8*2;\n    const sG2 = curve.F2.n64*8*2;\n    const domainSize = (fdFrom.totalSize + sG1 - 64 - sG2) / (4*sG1 + sG2);\n    let e = domainSize;\n    let power = 0;\n    while (e>1) {\n        e = e /2;\n        power += 1;\n    }\n\n    if (2 ** power != domainSize) throw new Error(\"Invalid file size\");\n    if (logger) logger.debug(\"Power to tau size: \"+power);\n\n    const rng = await getRandomRng(entropy);\n\n    const fdTo = await createOverride(responesFileName);\n\n    // Calculate the hash\n    const challengeHasher = blake2bWasm.exports(64);\n    for (let i=0; i<fdFrom.totalSize; i+= fdFrom.pageSize) {\n        if (logger) logger.debug(`Hashing challenge ${i}/${fdFrom.totalSize}`);\n        const s = Math.min(fdFrom.totalSize - i, fdFrom.pageSize);\n        const buff = await fdFrom.read(s);\n        challengeHasher.update(buff);\n    }\n\n    const claimedHash = await fdFrom.read(64, 0);\n    if (logger) logger.info(formatHash(claimedHash, \"Claimed Previous Response Hash: \"));\n\n    const challengeHash = challengeHasher.digest();\n    if (logger) logger.info(formatHash(challengeHash, \"Current Challenge Hash: \"));\n\n    const key = createPTauKey(curve, challengeHash, rng);\n\n    if (logger) {\n        [\"tau\", \"alpha\", \"beta\"].forEach( (k) => {\n            logger.debug(k + \".g1_s: \" + curve.G1.toString(key[k].g1_s, 16));\n            logger.debug(k + \".g1_sx: \" + curve.G1.toString(key[k].g1_sx, 16));\n            logger.debug(k + \".g2_sp: \" + curve.G2.toString(key[k].g2_sp, 16));\n            logger.debug(k + \".g2_spx: \" + curve.G2.toString(key[k].g2_spx, 16));\n            logger.debug(\"\");\n        });\n    }\n\n    const responseHasher = blake2bWasm.exports(64);\n\n    await fdTo.write(challengeHash);\n    responseHasher.update(challengeHash);\n\n    await applyKeyToChallengeSection(fdFrom, fdTo, responseHasher, curve, \"G1\", (2 ** power)*2-1, curve.Fr.one    , key.tau.prvKey, \"COMPRESSED\", \"tauG1\"     , logger );\n    await applyKeyToChallengeSection(fdFrom, fdTo, responseHasher, curve, \"G2\", (2 ** power)    , curve.Fr.one    , key.tau.prvKey, \"COMPRESSED\", \"tauG2\"     , logger );\n    await applyKeyToChallengeSection(fdFrom, fdTo, responseHasher, curve, \"G1\", (2 ** power)    , key.alpha.prvKey, key.tau.prvKey, \"COMPRESSED\", \"alphaTauG1\", logger );\n    await applyKeyToChallengeSection(fdFrom, fdTo, responseHasher, curve, \"G1\", (2 ** power)    , key.beta.prvKey , key.tau.prvKey, \"COMPRESSED\", \"betaTauG1\" , logger );\n    await applyKeyToChallengeSection(fdFrom, fdTo, responseHasher, curve, \"G2\", 1             , key.beta.prvKey , key.tau.prvKey, \"COMPRESSED\", \"betaTauG2\" , logger );\n\n    // Write and hash key\n    const buffKey = new Uint8Array(curve.F1.n8*2*6+curve.F2.n8*2*3);\n    toPtauPubKeyRpr(buffKey, 0, curve, key, false);\n    await fdTo.write(buffKey);\n    responseHasher.update(buffKey);\n    const responseHash = responseHasher.digest();\n    if (logger) logger.info(formatHash(responseHash, \"Contribution Response Hash: \"));\n\n    await fdTo.close();\n    await fdFrom.close();\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nasync function beacon$1(oldPtauFilename, newPTauFilename, name,  beaconHashStr,numIterationsExp, logger) {\n    const beaconHash = hex2ByteArray(beaconHashStr);\n    if (   (beaconHash.byteLength == 0)\n        || (beaconHash.byteLength*2 !=beaconHashStr.length))\n    {\n        if (logger) logger.error(\"Invalid Beacon Hash. (It must be a valid hexadecimal sequence)\");\n        return false;\n    }\n    if (beaconHash.length>=256) {\n        if (logger) logger.error(\"Maximum lenght of beacon hash is 255 bytes\");\n        return false;\n    }\n\n    numIterationsExp = parseInt(numIterationsExp);\n    if ((numIterationsExp<10)||(numIterationsExp>63)) {\n        if (logger) logger.error(\"Invalid numIterationsExp. (Must be between 10 and 63)\");\n        return false;\n    }\n\n\n    await blake2bWasm.exports.ready();\n\n    const {fd: fdOld, sections} = await readBinFile(oldPtauFilename, \"ptau\", 1);\n    const {curve, power, ceremonyPower} = await readPTauHeader(fdOld, sections);\n    if (power != ceremonyPower) {\n        if (logger) logger.error(\"This file has been reduced. You cannot contribute into a reduced file.\");\n        return false;\n    }\n    if (sections[12]) {\n        if (logger) logger.warn(\"Contributing into a file that has phase2 calculated. You will have to prepare phase2 again.\");\n    }\n    const contributions = await readContributions(fdOld, curve, sections);\n    const curContribution = {\n        name: name,\n        type: 1, // Beacon\n        numIterationsExp: numIterationsExp,\n        beaconHash: beaconHash\n    };\n\n    let lastChallengeHash;\n\n    if (contributions.length>0) {\n        lastChallengeHash = contributions[contributions.length-1].nextChallenge;\n    } else {\n        lastChallengeHash = calculateFirstChallengeHash(curve, power, logger);\n    }\n\n    curContribution.key = await keyFromBeacon(curve, lastChallengeHash, beaconHash, numIterationsExp);\n\n    const responseHasher = new blake2bWasm.exports(64);\n    responseHasher.update(lastChallengeHash);\n\n    const fdNew = await createBinFile(newPTauFilename, \"ptau\", 1, 7);\n    await writePTauHeader(fdNew, curve, power);\n\n    const startSections = [];\n\n    let firstPoints;\n    firstPoints = await processSection(2, \"G1\",  (2 ** power) * 2 -1, curve.Fr.e(1), curContribution.key.tau.prvKey, \"tauG1\", logger );\n    curContribution.tauG1 = firstPoints[1];\n    firstPoints = await processSection(3, \"G2\",  (2 ** power) , curve.Fr.e(1), curContribution.key.tau.prvKey, \"tauG2\", logger );\n    curContribution.tauG2 = firstPoints[1];\n    firstPoints = await processSection(4, \"G1\",  (2 ** power) , curContribution.key.alpha.prvKey, curContribution.key.tau.prvKey, \"alphaTauG1\", logger );\n    curContribution.alphaG1 = firstPoints[0];\n    firstPoints = await processSection(5, \"G1\",  (2 ** power) , curContribution.key.beta.prvKey, curContribution.key.tau.prvKey, \"betaTauG1\", logger );\n    curContribution.betaG1 = firstPoints[0];\n    firstPoints = await processSection(6, \"G2\",  1, curContribution.key.beta.prvKey, curContribution.key.tau.prvKey, \"betaTauG2\", logger );\n    curContribution.betaG2 = firstPoints[0];\n\n    curContribution.partialHash = responseHasher.getPartialHash();\n\n    const buffKey = new Uint8Array(curve.F1.n8*2*6+curve.F2.n8*2*3);\n\n    toPtauPubKeyRpr(buffKey, 0, curve, curContribution.key, false);\n\n    responseHasher.update(new Uint8Array(buffKey));\n    const hashResponse = responseHasher.digest();\n\n    if (logger) logger.info(formatHash(hashResponse, \"Contribution Response Hash imported: \"));\n\n    const nextChallengeHasher = new blake2bWasm.exports(64);\n    nextChallengeHasher.update(hashResponse);\n\n    await hashSection(fdNew, \"G1\", 2, (2 ** power) * 2 -1, \"tauG1\", logger);\n    await hashSection(fdNew, \"G2\", 3, (2 ** power)       , \"tauG2\", logger);\n    await hashSection(fdNew, \"G1\", 4, (2 ** power)       , \"alphaTauG1\", logger);\n    await hashSection(fdNew, \"G1\", 5, (2 ** power)       , \"betaTauG1\", logger);\n    await hashSection(fdNew, \"G2\", 6, 1                  , \"betaG2\", logger);\n\n    curContribution.nextChallenge = nextChallengeHasher.digest();\n\n    if (logger) logger.info(formatHash(curContribution.nextChallenge, \"Next Challenge Hash: \"));\n\n    contributions.push(curContribution);\n\n    await writeContributions(fdNew, curve, contributions);\n\n    await fdOld.close();\n    await fdNew.close();\n\n    return hashResponse;\n\n    async function processSection(sectionId, groupName, NPoints, first, inc, sectionName, logger) {\n        const res = [];\n        fdOld.pos = sections[sectionId][0].p;\n\n        await startWriteSection(fdNew, sectionId);\n\n        startSections[sectionId] = fdNew.pos;\n\n        const G = curve[groupName];\n        const sG = G.F.n8*2;\n        const chunkSize = Math.floor((1<<20) / sG);   // 128Mb chunks\n        let t = first;\n        for (let i=0 ; i<NPoints ; i+= chunkSize) {\n            if (logger) logger.debug(`applying key${sectionName}: ${i}/${NPoints}`);\n            const n= Math.min(NPoints-i, chunkSize );\n            const buffIn = await fdOld.read(n * sG);\n            const buffOutLEM = await G.batchApplyKey(buffIn, t, inc);\n\n            /* Code to test the case where we don't have the 2^m-2 component\n            if (sectionName== \"tauG1\") {\n                const bz = new Uint8Array(64);\n                buffOutLEM.set(bz, 64*((2 ** power) - 1 ));\n            }\n            */\n\n            const promiseWrite = fdNew.write(buffOutLEM);\n            const buffOutC = await G.batchLEMtoC(buffOutLEM);\n\n            responseHasher.update(buffOutC);\n            await promiseWrite;\n            if (i==0)   // Return the 2 first points.\n                for (let j=0; j<Math.min(2, NPoints); j++)\n                    res.push(G.fromRprLEM(buffOutLEM, j*sG));\n            t = curve.Fr.mul(t, curve.Fr.exp(inc, n));\n        }\n\n        await endWriteSection(fdNew);\n\n        return res;\n    }\n\n\n    async function hashSection(fdTo, groupName, sectionId, nPoints, sectionName, logger) {\n\n        const G = curve[groupName];\n        const sG = G.F.n8*2;\n        const nPointsChunk = Math.floor((1<<24)/sG);\n\n        const oldPos = fdTo.pos;\n        fdTo.pos = startSections[sectionId];\n\n        for (let i=0; i< nPoints; i += nPointsChunk) {\n            if (logger) logger.debug(`Hashing ${sectionName}: ${i}/${nPoints}`);\n            const n = Math.min(nPoints-i, nPointsChunk);\n\n            const buffLEM = await fdTo.read(n * sG);\n\n            const buffU = await G.batchLEMtoU(buffLEM);\n\n            nextChallengeHasher.update(buffU);\n        }\n\n        fdTo.pos = oldPos;\n    }\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nasync function contribute(oldPtauFilename, newPTauFilename, name, entropy, logger) {\n    await blake2bWasm.exports.ready();\n\n    const {fd: fdOld, sections} = await readBinFile(oldPtauFilename, \"ptau\", 1);\n    const {curve, power, ceremonyPower} = await readPTauHeader(fdOld, sections);\n    if (power != ceremonyPower) {\n        if (logger) logger.error(\"This file has been reduced. You cannot contribute into a reduced file.\");\n        throw new Error(\"This file has been reduced. You cannot contribute into a reduced file.\");\n    }\n    if (sections[12]) {\n        if (logger) logger.warn(\"WARNING: Contributing into a file that has phase2 calculated. You will have to prepare phase2 again.\");\n    }\n    const contributions = await readContributions(fdOld, curve, sections);\n    const curContribution = {\n        name: name,\n        type: 0, // Beacon\n    };\n\n    let lastChallengeHash;\n\n    const rng = await getRandomRng(entropy);\n\n    if (contributions.length>0) {\n        lastChallengeHash = contributions[contributions.length-1].nextChallenge;\n    } else {\n        lastChallengeHash = calculateFirstChallengeHash(curve, power, logger);\n    }\n\n    // Generate a random key\n\n\n    curContribution.key = createPTauKey(curve, lastChallengeHash, rng);\n\n\n    const responseHasher = new blake2bWasm.exports(64);\n    responseHasher.update(lastChallengeHash);\n\n    const fdNew = await createBinFile(newPTauFilename, \"ptau\", 1, 7);\n    await writePTauHeader(fdNew, curve, power);\n\n    const startSections = [];\n\n    let firstPoints;\n    firstPoints = await processSection(2, \"G1\",  (2 ** power) * 2 -1, curve.Fr.e(1), curContribution.key.tau.prvKey, \"tauG1\" );\n    curContribution.tauG1 = firstPoints[1];\n    firstPoints = await processSection(3, \"G2\",  (2 ** power) , curve.Fr.e(1), curContribution.key.tau.prvKey, \"tauG2\" );\n    curContribution.tauG2 = firstPoints[1];\n    firstPoints = await processSection(4, \"G1\",  (2 ** power) , curContribution.key.alpha.prvKey, curContribution.key.tau.prvKey, \"alphaTauG1\" );\n    curContribution.alphaG1 = firstPoints[0];\n    firstPoints = await processSection(5, \"G1\",  (2 ** power) , curContribution.key.beta.prvKey, curContribution.key.tau.prvKey, \"betaTauG1\" );\n    curContribution.betaG1 = firstPoints[0];\n    firstPoints = await processSection(6, \"G2\",  1, curContribution.key.beta.prvKey, curContribution.key.tau.prvKey, \"betaTauG2\" );\n    curContribution.betaG2 = firstPoints[0];\n\n    curContribution.partialHash = responseHasher.getPartialHash();\n\n    const buffKey = new Uint8Array(curve.F1.n8*2*6+curve.F2.n8*2*3);\n\n    toPtauPubKeyRpr(buffKey, 0, curve, curContribution.key, false);\n\n    responseHasher.update(new Uint8Array(buffKey));\n    const hashResponse = responseHasher.digest();\n\n    if (logger) logger.info(formatHash(hashResponse, \"Contribution Response Hash imported: \"));\n\n    const nextChallengeHasher = new blake2bWasm.exports(64);\n    nextChallengeHasher.update(hashResponse);\n\n    await hashSection(fdNew, \"G1\", 2, (2 ** power) * 2 -1, \"tauG1\");\n    await hashSection(fdNew, \"G2\", 3, (2 ** power)       , \"tauG2\");\n    await hashSection(fdNew, \"G1\", 4, (2 ** power)       , \"alphaTauG1\");\n    await hashSection(fdNew, \"G1\", 5, (2 ** power)       , \"betaTauG1\");\n    await hashSection(fdNew, \"G2\", 6, 1                  , \"betaG2\");\n\n    curContribution.nextChallenge = nextChallengeHasher.digest();\n\n    if (logger) logger.info(formatHash(curContribution.nextChallenge, \"Next Challenge Hash: \"));\n\n    contributions.push(curContribution);\n\n    await writeContributions(fdNew, curve, contributions);\n\n    await fdOld.close();\n    await fdNew.close();\n\n    return hashResponse;\n\n    async function processSection(sectionId, groupName, NPoints, first, inc, sectionName) {\n        const res = [];\n        fdOld.pos = sections[sectionId][0].p;\n\n        await startWriteSection(fdNew, sectionId);\n\n        startSections[sectionId] = fdNew.pos;\n\n        const G = curve[groupName];\n        const sG = G.F.n8*2;\n        const chunkSize = Math.floor((1<<20) / sG);   // 128Mb chunks\n        let t = first;\n        for (let i=0 ; i<NPoints ; i+= chunkSize) {\n            if (logger) logger.debug(`processing: ${sectionName}: ${i}/${NPoints}`);\n            const n= Math.min(NPoints-i, chunkSize );\n            const buffIn = await fdOld.read(n * sG);\n            const buffOutLEM = await G.batchApplyKey(buffIn, t, inc);\n\n            /* Code to test the case where we don't have the 2^m-2 component\n            if (sectionName== \"tauG1\") {\n                const bz = new Uint8Array(64);\n                buffOutLEM.set(bz, 64*((2 ** power) - 1 ));\n            }\n            */\n\n            const promiseWrite = fdNew.write(buffOutLEM);\n            const buffOutC = await G.batchLEMtoC(buffOutLEM);\n\n            responseHasher.update(buffOutC);\n            await promiseWrite;\n            if (i==0)   // Return the 2 first points.\n                for (let j=0; j<Math.min(2, NPoints); j++)\n                    res.push(G.fromRprLEM(buffOutLEM, j*sG));\n            t = curve.Fr.mul(t, curve.Fr.exp(inc, n));\n        }\n\n        await endWriteSection(fdNew);\n\n        return res;\n    }\n\n\n    async function hashSection(fdTo, groupName, sectionId, nPoints, sectionName) {\n\n        const G = curve[groupName];\n        const sG = G.F.n8*2;\n        const nPointsChunk = Math.floor((1<<24)/sG);\n\n        const oldPos = fdTo.pos;\n        fdTo.pos = startSections[sectionId];\n\n        for (let i=0; i< nPoints; i += nPointsChunk) {\n            if ((logger)&&i) logger.debug(`Hashing ${sectionName}: ` + i);\n            const n = Math.min(nPoints-i, nPointsChunk);\n\n            const buffLEM = await fdTo.read(n * sG);\n\n            const buffU = await G.batchLEMtoU(buffLEM);\n\n            nextChallengeHasher.update(buffU);\n        }\n\n        fdTo.pos = oldPos;\n    }\n\n\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nasync function preparePhase2(oldPtauFilename, newPTauFilename, logger) {\n\n    const {fd: fdOld, sections} = await readBinFile(oldPtauFilename, \"ptau\", 1);\n    const {curve, power} = await readPTauHeader(fdOld, sections);\n\n    const fdNew = await createBinFile(newPTauFilename, \"ptau\", 1, 11);\n    await writePTauHeader(fdNew, curve, power);\n\n    await copySection(fdOld, sections, fdNew, 2);\n    await copySection(fdOld, sections, fdNew, 3);\n    await copySection(fdOld, sections, fdNew, 4);\n    await copySection(fdOld, sections, fdNew, 5);\n    await copySection(fdOld, sections, fdNew, 6);\n    await copySection(fdOld, sections, fdNew, 7);\n\n    await processSection(2, 12, \"G1\", \"tauG1\" );\n    await processSection(3, 13, \"G2\", \"tauG2\" );\n    await processSection(4, 14, \"G1\", \"alphaTauG1\" );\n    await processSection(5, 15, \"G1\", \"betaTauG1\" );\n\n    await fdOld.close();\n    await fdNew.close();\n\n    // await fs.promises.unlink(newPTauFilename+ \".tmp\");\n\n    return;\n\n    async function processSection(oldSectionId, newSectionId, Gstr, sectionName) {\n        if (logger) logger.debug(\"Starting section: \"+sectionName);\n\n        await startWriteSection(fdNew, newSectionId);\n\n        for (let p=0; p<=power; p++) {\n            await processSectionPower(p);\n        }\n\n        if (oldSectionId == 2) {\n            await processSectionPower(power+1);\n        }\n\n        await endWriteSection(fdNew);\n\n\n        async function processSectionPower(p) {\n            const nPoints = 2 ** p;\n            const G = curve[Gstr];\n            const sGin = G.F.n8*2;\n\n            let buff;\n            buff = new BigBuffer(nPoints*sGin);\n\n            await startReadUniqueSection(fdOld, sections, oldSectionId);\n            if ((oldSectionId == 2)&&(p==power+1)) {\n                await fdOld.readToBuffer(buff, 0,(nPoints-1)*sGin );\n                buff.set(curve.G1.zeroAffine, (nPoints-1)*sGin );\n            } else {\n                await fdOld.readToBuffer(buff, 0,nPoints*sGin );\n            }\n            await endReadSection(fdOld, true);\n\n\n            buff = await G.lagrangeEvaluations(buff, \"affine\", \"affine\", logger, sectionName);\n            await fdNew.write(buff);\n\n/*\n            if (p <= curve.Fr.s) {\n                buff = await G.ifft(buff, \"affine\", \"affine\", logger, sectionName);\n                await fdNew.write(buff);\n            } else if (p == curve.Fr.s+1) {\n                const smallM = 1<<curve.Fr.s;\n                let t0 = new BigBuffer( smallM * sGmid );\n                let t1 = new BigBuffer( smallM * sGmid );\n\n                const shift_to_small_m = Fr.exp(Fr.shift, smallM);\n                const one_over_denom = Fr.inv(Fr.sub(shift_to_small_m, Fr.one));\n\n                let sInvAcc = Fr.one;\n                for (let i=0; i<smallM; i++) {\n                    const ti =  buff.slice(i*sGin, (i+1)*sGin);\n                    const tmi = buff.slice((i+smallM)*sGin, (i+smallM+1)*sGin);\n\n                    t0.set(\n                        G.timesFr(\n                            G.sub(\n                                G.timesFr(ti , shift_to_small_m),\n                                tmi\n                            ),\n                            one_over_denom\n                        ),\n                        i*sGmid\n                    );\n                    t1.set(\n                        G.timesFr(\n                            G.sub( tmi, ti),\n                            Fr.mul(sInvAcc, one_over_denom)\n                        ),\n                        i*sGmid\n                    );\n\n\n                    sInvAcc = Fr.mul(sInvAcc, Fr.shiftInv);\n                }\n                t0 = await G.ifft(t0, \"jacobian\", \"affine\", logger, sectionName + \" t0\");\n                await fdNew.write(t0);\n                t0 = null;\n                t1 = await G.ifft(t1, \"jacobian\", \"affine\", logger, sectionName + \" t0\");\n                await fdNew.write(t1);\n\n            } else {\n                if (logger) logger.error(\"Power too big\");\n                throw new Error(\"Power to big\");\n            }\n*/\n        }\n    }\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nasync function truncate(ptauFilename, template, logger) {\n\n    const {fd: fdOld, sections} = await readBinFile(ptauFilename, \"ptau\", 1);\n    const {curve, power, ceremonyPower} = await readPTauHeader(fdOld, sections);\n\n    const sG1 = curve.G1.F.n8*2;\n    const sG2 = curve.G2.F.n8*2;\n\n    for (let p=1; p<power; p++) {\n        await generateTruncate(p);\n    }\n\n    await fdOld.close();\n\n    return true;\n\n    async function generateTruncate(p) {\n\n        let sP = p.toString();\n        while (sP.length<2) sP = \"0\" + sP;\n\n        if (logger) logger.debug(\"Writing Power: \"+sP);\n\n        const fdNew = await createBinFile(template + sP + \".ptau\", \"ptau\", 1, 11);\n        await writePTauHeader(fdNew, curve, p, ceremonyPower);\n\n        await copySection(fdOld, sections, fdNew, 2, ((2 ** p)*2-1) * sG1 ); // tagG1\n        await copySection(fdOld, sections, fdNew, 3, (2 ** p) * sG2); // tauG2\n        await copySection(fdOld, sections, fdNew, 4, (2 ** p) * sG1); // alfaTauG1\n        await copySection(fdOld, sections, fdNew, 5, (2 ** p) * sG1); // betaTauG1\n        await copySection(fdOld, sections, fdNew, 6,  sG2); // betaTauG2\n        await copySection(fdOld, sections, fdNew, 7); // contributions\n        await copySection(fdOld, sections, fdNew, 12, ((2 ** (p+1))*2 -1) * sG1); // L_tauG1\n        await copySection(fdOld, sections, fdNew, 13, ((2 ** p)*2 -1) * sG2); // L_tauG2\n        await copySection(fdOld, sections, fdNew, 14, ((2 ** p)*2 -1) * sG1); // L_alfaTauG1\n        await copySection(fdOld, sections, fdNew, 15, ((2 ** p)*2 -1) * sG1); // L_betaTauG1\n\n        await fdNew.close();\n    }\n\n\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nasync function convert(oldPtauFilename, newPTauFilename, logger) {\n\n    const {fd: fdOld, sections} = await readBinFile(oldPtauFilename, \"ptau\", 1);\n    const {curve, power} = await readPTauHeader(fdOld, sections);\n\n    const fdNew = await createBinFile(newPTauFilename, \"ptau\", 1, 11);\n    await writePTauHeader(fdNew, curve, power);\n\n    // const fdTmp = await fastFile.createOverride(newPTauFilename+ \".tmp\");\n\n    await copySection(fdOld, sections, fdNew, 2);\n    await copySection(fdOld, sections, fdNew, 3);\n    await copySection(fdOld, sections, fdNew, 4);\n    await copySection(fdOld, sections, fdNew, 5);\n    await copySection(fdOld, sections, fdNew, 6);\n    await copySection(fdOld, sections, fdNew, 7);\n\n    await processSection(2, 12, \"G1\", \"tauG1\" );\n    await copySection(fdOld, sections, fdNew, 13);\n    await copySection(fdOld, sections, fdNew, 14);\n    await copySection(fdOld, sections, fdNew, 15);\n\n    await fdOld.close();\n    await fdNew.close();\n\n    // await fs.promises.unlink(newPTauFilename+ \".tmp\");\n\n    return;\n\n    async function processSection(oldSectionId, newSectionId, Gstr, sectionName) {\n        if (logger) logger.debug(\"Starting section: \"+sectionName);\n\n        await startWriteSection(fdNew, newSectionId);\n\n        const size = sections[newSectionId][0].size;\n        const chunkSize = fdOld.pageSize;\n        await startReadUniqueSection(fdOld, sections, newSectionId);\n        for (let p=0; p<size; p+=chunkSize) {\n            const l = Math.min(size -p, chunkSize);\n            const buff = await fdOld.read(l);\n            await fdNew.write(buff);\n        }\n        await endReadSection(fdOld);\n\n        if (oldSectionId == 2) {\n            await processSectionPower(power+1);\n        }\n\n        await endWriteSection(fdNew);\n\n        async function processSectionPower(p) {\n            const nPoints = 2 ** p;\n            const G = curve[Gstr];\n            const sGin = G.F.n8*2;\n\n            let buff;\n            buff = new BigBuffer(nPoints*sGin);\n\n            await startReadUniqueSection(fdOld, sections, oldSectionId);\n            if ((oldSectionId == 2)&&(p==power+1)) {\n                await fdOld.readToBuffer(buff, 0,(nPoints-1)*sGin );\n                buff.set(curve.G1.zeroAffine, (nPoints-1)*sGin );\n            } else {\n                await fdOld.readToBuffer(buff, 0,nPoints*sGin );\n            }\n            await endReadSection(fdOld, true);\n\n            buff = await G.lagrangeEvaluations(buff, \"affine\", \"affine\", logger, sectionName);\n            await fdNew.write(buff);\n\n/*\n            if (p <= curve.Fr.s) {\n                buff = await G.ifft(buff, \"affine\", \"affine\", logger, sectionName);\n                await fdNew.write(buff);\n            } else if (p == curve.Fr.s+1) {\n                const smallM = 1<<curve.Fr.s;\n                let t0 = new BigBuffer( smallM * sGmid );\n                let t1 = new BigBuffer( smallM * sGmid );\n\n                const shift_to_small_m = Fr.exp(Fr.shift, smallM);\n                const one_over_denom = Fr.inv(Fr.sub(shift_to_small_m, Fr.one));\n\n                let sInvAcc = Fr.one;\n                for (let i=0; i<smallM; i++) {\n                    if (i%10000) logger.debug(`sectionName prepare L calc: ${sectionName}, ${i}/${smallM}`);\n                    const ti =  buff.slice(i*sGin, (i+1)*sGin);\n                    const tmi = buff.slice((i+smallM)*sGin, (i+smallM+1)*sGin);\n\n                    t0.set(\n                        G.timesFr(\n                            G.sub(\n                                G.timesFr(ti , shift_to_small_m),\n                                tmi\n                            ),\n                            one_over_denom\n                        ),\n                        i*sGmid\n                    );\n                    t1.set(\n                        G.timesFr(\n                            G.sub( tmi, ti),\n                            Fr.mul(sInvAcc, one_over_denom)\n                        ),\n                        i*sGmid\n                    );\n\n\n                    sInvAcc = Fr.mul(sInvAcc, Fr.shiftInv);\n                }\n                t0 = await G.ifft(t0, \"jacobian\", \"affine\", logger, sectionName + \" t0\");\n                await fdNew.write(t0);\n                t0 = null;\n                t1 = await G.ifft(t1, \"jacobian\", \"affine\", logger, sectionName + \" t1\");\n                await fdNew.write(t1);\n\n            } else {\n                if (logger) logger.error(\"Power too big\");\n                throw new Error(\"Power to big\");\n            }\n*/\n        }\n\n\n    }\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nasync function exportJson(pTauFilename, verbose) {\n    const {fd, sections} = await readBinFile(pTauFilename, \"ptau\", 1);\n\n    const {curve, power} = await readPTauHeader(fd, sections);\n\n    const pTau = {};\n    pTau.q = curve.q;\n    pTau.power = power;\n    pTau.contributions = await readContributions(fd, curve, sections);\n\n    pTau.tauG1 = await exportSection(2, \"G1\", (2 ** power)*2 -1, \"tauG1\");\n    pTau.tauG2 = await exportSection(3, \"G2\", (2 ** power), \"tauG2\");\n    pTau.alphaTauG1 = await exportSection(4, \"G1\", (2 ** power), \"alphaTauG1\");\n    pTau.betaTauG1 = await exportSection(5, \"G1\", (2 ** power), \"betaTauG1\");\n    pTau.betaG2 = await exportSection(6, \"G2\", 1, \"betaG2\");\n\n    pTau.lTauG1 = await exportLagrange(12, \"G1\", \"lTauG1\");\n    pTau.lTauG2 = await exportLagrange(13, \"G2\", \"lTauG2\");\n    pTau.lAlphaTauG1 = await exportLagrange(14, \"G1\", \"lAlphaTauG2\");\n    pTau.lBetaTauG1 = await exportLagrange(15, \"G1\", \"lBetaTauG2\");\n\n    await fd.close();\n\n    return stringifyBigIntsWithField(curve.Fr, pTau);\n\n\n\n    async function exportSection(sectionId, groupName, nPoints, sectionName) {\n        const G = curve[groupName];\n        const sG = G.F.n8*2;\n\n        const res = [];\n        await startReadUniqueSection(fd, sections, sectionId);\n        for (let i=0; i< nPoints; i++) {\n            if ((verbose)&&i&&(i%10000 == 0)) console.log(`${sectionName}: ` + i);\n            const buff = await fd.read(sG);\n            res.push(G.fromRprLEM(buff, 0));\n        }\n        await endReadSection(fd);\n\n        return res;\n    }\n\n    async function exportLagrange(sectionId, groupName, sectionName) {\n        const G = curve[groupName];\n        const sG = G.F.n8*2;\n\n        const res = [];\n        await startReadUniqueSection(fd, sections, sectionId);\n        for (let p=0; p<=power; p++) {\n            if (verbose) console.log(`${sectionName}: Power: ${p}`);\n            res[p] = [];\n            const nPoints = (2 ** p);\n            for (let i=0; i<nPoints; i++) {\n                if ((verbose)&&i&&(i%10000 == 0)) console.log(`${sectionName}: ${i}/${nPoints}`);\n                const buff = await fd.read(sG);\n                res[p].push(G.fromRprLEM(buff, 0));\n            }\n        }\n        await endReadSection(fd, true);\n        return res;\n    }\n\n\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nvar powersoftau = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    newAccumulator: newAccumulator,\n    exportChallenge: exportChallenge,\n    importResponse: importResponse,\n    verify: verify,\n    challengeContribute: challengeContribute,\n    beacon: beacon$1,\n    contribute: contribute,\n    preparePhase2: preparePhase2,\n    truncate: truncate,\n    convert: convert,\n    exportJson: exportJson\n});\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nfunction r1csPrint(r1cs, syms, logger) {\n    for (let i=0; i<r1cs.constraints.length; i++) {\n        printCostraint(r1cs.constraints[i]);\n    }\n    function printCostraint(c) {\n        const lc2str = (lc) => {\n            let S = \"\";\n            const keys = Object.keys(lc);\n            keys.forEach( (k) => {\n                let name = syms.varIdx2Name[k];\n                if (name == \"one\") name = \"1\";\n\n                let vs = r1cs.curve.Fr.toString(lc[k]);\n                if (vs == \"1\") vs = \"\";  // Do not show ones\n                if (vs == \"-1\") vs = \"-\";  // Do not show ones\n                if ((S!=\"\")&&(vs[0]!=\"-\")) vs = \"+\"+vs;\n                if (S!=\"\") vs = \" \"+vs;\n                S= S + vs   + name;\n            });\n            return S;\n        };\n        const S = `[ ${lc2str(c[0])} ] * [ ${lc2str(c[1])} ] - [ ${lc2str(c[2])} ] = 0`;\n        if (logger) logger.info(S);\n    }\n\n}\n\nconst SUBARRAY_SIZE$1 = 0x40000;\n\nconst BigArrayHandler$1 = {\n    get: function(obj, prop) {\n        if (!isNaN(prop)) {\n            return obj.getElement(prop);\n        } else return obj[prop];\n    },\n    set: function(obj, prop, value) {\n        if (!isNaN(prop)) {\n            return obj.setElement(prop, value);\n        } else {\n            obj[prop] = value;\n            return true;\n        }\n    }\n};\n\nclass _BigArray$1 {\n    constructor (initSize) {\n        this.length = initSize || 0;\n        this.arr = new Array(SUBARRAY_SIZE$1);\n\n        for (let i=0; i<initSize; i+=SUBARRAY_SIZE$1) {\n            this.arr[i/SUBARRAY_SIZE$1] = new Array(Math.min(SUBARRAY_SIZE$1, initSize - i));\n        }\n        return this;\n    }\n    push () {\n        for (let i=0; i<arguments.length; i++) {\n            this.setElement (this.length, arguments[i]);\n        }\n    }\n\n    slice (f, t) {\n        const arr = new Array(t-f);\n        for (let i=f; i< t; i++) arr[i-f] = this.getElement(i);\n        return arr;\n    }\n    getElement(idx) {\n        idx = parseInt(idx);\n        const idx1 = Math.floor(idx / SUBARRAY_SIZE$1);\n        const idx2 = idx % SUBARRAY_SIZE$1;\n        return this.arr[idx1] ? this.arr[idx1][idx2] : undefined;\n    }\n    setElement(idx, value) {\n        idx = parseInt(idx);\n        const idx1 = Math.floor(idx / SUBARRAY_SIZE$1);\n        if (!this.arr[idx1]) {\n            this.arr[idx1] = new Array(SUBARRAY_SIZE$1);\n        }\n        const idx2 = idx % SUBARRAY_SIZE$1;\n        this.arr[idx1][idx2] = value;\n        if (idx >= this.length) this.length = idx+1;\n        return true;\n    }\n    getKeys() {\n        const newA = new BigArray$2();\n        for (let i=0; i<this.arr.length; i++) {\n            if (this.arr[i]) {\n                for (let j=0; j<this.arr[i].length; j++) {\n                    if (typeof this.arr[i][j] !== \"undefined\") {\n                        newA.push(i*SUBARRAY_SIZE$1+j);\n                    }\n                }\n            }\n        }\n        return newA;\n    }\n}\n\nclass BigArray$2 {\n    constructor( initSize ) {\n        const obj = new _BigArray$1(initSize);\n        const extObj = new Proxy(obj, BigArrayHandler$1);\n        return extObj;\n    }\n}\n\nvar BigArray$3 = BigArray$2;\n\nconst R1CS_FILE_CUSTOM_GATES_LIST_SECTION = 4;\nconst R1CS_FILE_CUSTOM_GATES_USES_SECTION = 5;\n\nasync function readR1csHeader(fd,sections,singleThread) {\n    let options;\n    if (typeof singleThread === \"object\") {\n        options = singleThread;\n    } else if (typeof singleThread === \"undefined\") {\n        options= {\n            singleThread: false,\n        };\n    } else {\n        options = {\n            singleThread: singleThread,\n        };\n    }\n\n    const res = {};\n    await startReadUniqueSection(fd, sections, 1);\n    // Read Header\n    res.n8 = await fd.readULE32();\n    res.prime = await readBigInt(fd, res.n8);\n\n    if (options.F) {\n        if (options.F.p != res.prime) throw new Error(\"Different Prime\");\n        res.F = options.F;\n    } else if (options.getFieldFromPrime) {\n        res.F = await options.getFieldFromPrime(res.prime, options.singleThread);\n    } else if (options.getCurveFromPrime) {\n        res.curve = await options.getCurveFromPrime(res.prime, options.singleThread);\n        res.F = res.curve.Fr;\n    } else {\n        try {\n            res.curve = await getCurveFromR$1(res.prime, options.singleThread);\n            res.F = res.curve.Fr;\n        } catch (err) {\n            res.F = new F1Field(res.prime);\n        }\n    }\n\n    res.nVars = await fd.readULE32();\n    res.nOutputs = await fd.readULE32();\n    res.nPubInputs = await fd.readULE32();\n    res.nPrvInputs = await fd.readULE32();\n    res.nLabels = await fd.readULE64();\n    res.nConstraints = await fd.readULE32();\n    res.useCustomGates = typeof sections[R1CS_FILE_CUSTOM_GATES_LIST_SECTION] !== \"undefined\" && sections[R1CS_FILE_CUSTOM_GATES_LIST_SECTION] !== null\n        && typeof sections[R1CS_FILE_CUSTOM_GATES_USES_SECTION] !== \"undefined\" && sections[R1CS_FILE_CUSTOM_GATES_USES_SECTION] !== null;\n\n    await endReadSection(fd);\n\n    return res;\n}\n\nasync function readConstraints(fd,sections, r1cs, logger, loggerCtx) {\n    let options;\n    if (typeof logger === \"object\") {\n        options = logger;\n    } else if (typeof logger === \"undefined\") {\n        options= {};\n    } else {\n        options = {\n            logger: logger,\n            loggerCtx: loggerCtx,\n        };\n    }\n\n    const bR1cs = await readSection(fd, sections, 2);\n    let bR1csPos = 0;\n    let constraints;\n    if (r1cs.nConstraints>1<<20) {\n        constraints = new BigArray$3();\n    } else {\n        constraints = [];\n    }\n    for (let i=0; i<r1cs.nConstraints; i++) {\n        if ((options.logger)&&(i%100000 == 0)) options.logger.info(`${options.loggerCtx}: Loading constraints: ${i}/${r1cs.nConstraints}`);\n        const c = readConstraint();\n        constraints.push(c);\n    }\n    return constraints;\n\n\n    function readConstraint() {\n        const c = [];\n        c[0] = readLC();\n        c[1] = readLC();\n        c[2] = readLC();\n        return c;\n    }\n\n    function readLC() {\n        const lc= {};\n\n        const buffUL32 = bR1cs.slice(bR1csPos, bR1csPos+4);\n        bR1csPos += 4;\n        const buffUL32V = new DataView(buffUL32.buffer);\n        const nIdx = buffUL32V.getUint32(0, true);\n\n        const buff = bR1cs.slice(bR1csPos, bR1csPos + (4+r1cs.n8)*nIdx );\n        bR1csPos += (4+r1cs.n8)*nIdx;\n        const buffV = new DataView(buff.buffer);\n        for (let i=0; i<nIdx; i++) {\n            const idx = buffV.getUint32(i*(4+r1cs.n8), true);\n            const val = r1cs.F.fromRprLE(buff, i*(4+r1cs.n8)+4);\n            lc[idx] = val;\n        }\n        return lc;\n    }\n}\n\nasync function readMap(fd, sections, r1cs, logger, loggerCtx) {\n    let options;\n    if (typeof logger === \"object\") {\n        options = logger;\n    } else if (typeof logger === \"undefined\") {\n        options= {};\n    } else {\n        options = {\n            logger: logger,\n            loggerCtx: loggerCtx,\n        };\n    }\n    const bMap = await readSection(fd, sections, 3);\n    let bMapPos = 0;\n    let map;\n\n    if (r1cs.nVars>1<<20) {\n        map = new BigArray$3();\n    } else {\n        map = [];\n    }\n    for (let i=0; i<r1cs.nVars; i++) {\n        if ((options.logger)&&(i%10000 == 0)) options.logger.info(`${options.loggerCtx}: Loading map: ${i}/${r1cs.nVars}`);\n        const idx = readULE64();\n        map.push(idx);\n    }\n\n    return map;\n\n    function readULE64() {\n        const buffULE64 = bMap.slice(bMapPos, bMapPos+8);\n        bMapPos += 8;\n        const buffULE64V = new DataView(buffULE64.buffer);\n        const LSB = buffULE64V.getUint32(0, true);\n        const MSB = buffULE64V.getUint32(4, true);\n\n        return MSB * 0x100000000 + LSB;\n    }\n\n}\n\nasync function readR1csFd(fd, sections, options) {\n    /**\n     * Options properties:\n     *  loadConstraints: <bool> true by default\n     *  loadMap:         <bool> false by default\n     *  loadCustomGates: <bool> true by default\n     */\n\n    if(typeof options !== \"object\") {\n        throw new Error(\"readR1csFd: options must be an object\");\n    }\n\n    options.loadConstraints = \"loadConstraints\" in options ? options.loadConstraints : true;\n    options.loadMap = \"loadMap\" in options ? options.loadMap : false;\n    options.loadCustomGates = \"loadCustomGates\" in options ? options.loadCustomGates : true;\n\n    const res = await readR1csHeader(fd, sections, options);\n\n    if (options.loadConstraints) {\n        res.constraints = await readConstraints(fd, sections, res, options);\n    }\n\n    // Read Labels\n\n    if (options.loadMap) {\n        res.map = await readMap(fd, sections, res, options);\n    }\n\n    if (options.loadCustomGates) {\n        if (res.useCustomGates) {\n            res.customGates = await readCustomGatesListSection(fd, sections, res);\n            res.customGatesUses = await readCustomGatesUsesSection(fd, sections, options);\n        } else {\n            res.customGates = [];\n            res.customGatesUses = [];\n        }\n    }\n    return res;\n}\n\nasync function readR1cs(fileName, loadConstraints, loadMap, singleThread, logger, loggerCtx) {\n    let options;\n    if (typeof loadConstraints === \"object\") {\n        options = loadConstraints;\n    } else if (typeof loadConstraints === \"undefined\") {\n        options= {\n            loadConstraints: true,\n            loadMap: false,\n            loadCustomGates: true\n        };\n    } else {\n        options = {\n            loadConstraints: loadConstraints,\n            loadMap: loadMap,\n            singleThread: singleThread,\n            logger: logger,\n            loggerCtx: loggerCtx\n        };\n    }\n\n    const {fd, sections} = await readBinFile(fileName, \"r1cs\", 1);\n\n    const res = await readR1csFd(fd, sections, options);\n\n    await fd.close();\n\n    return res;\n}\n\nasync function readCustomGatesListSection(fd, sections, res) {\n    await startReadUniqueSection(fd, sections, R1CS_FILE_CUSTOM_GATES_LIST_SECTION);\n\n    let num = await fd.readULE32();\n\n    let customGates = [];\n    for (let i = 0; i < num; i++) {\n        let customGate = {};\n        customGate.templateName = await fd.readString();\n        let numParameters = await fd.readULE32();\n\n        customGate.parameters = Array(numParameters);\n        let buff = await fd.read(res.n8 * numParameters);\n\n        for (let j = 0; j < numParameters; j++) {\n            customGate.parameters[j] = res.F.fromRprLE(buff, j * res.n8, res.n8);        }\n        customGates.push(customGate);\n    }\n    await endReadSection(fd);\n\n    return customGates;\n}\n\nasync function readCustomGatesUsesSection(fd,sections, options) {\n    const bR1cs = await readSection(fd, sections, R1CS_FILE_CUSTOM_GATES_USES_SECTION);\n    const bR1cs32 = new Uint32Array(bR1cs.buffer, bR1cs.byteOffset, bR1cs.byteLength/4);\n    const nCustomGateUses = bR1cs32[0];\n    let bR1csPos = 1;\n    let customGatesUses;\n    if (nCustomGateUses>1<<20) {\n        customGatesUses = new BigArray$3();\n    } else {\n        customGatesUses = [];\n    }\n    for (let i=0; i<nCustomGateUses; i++) {\n        if ((options.logger)&&(i%100000 == 0)) options.logger.info(`${options.loggerCtx}: Loading custom gate uses: ${i}/${nCustomGateUses}`);\n        let c = {};\n        c.id = bR1cs32[bR1csPos++];\n        let numSignals = bR1cs32[bR1csPos++];\n        c.signals = [];\n        for (let j = 0; j < numSignals; j++) {\n            const LSB = bR1cs32[bR1csPos++];\n            const MSB = bR1cs32[bR1csPos++];\n            c.signals.push(MSB * 0x100000000 + LSB);\n        }\n        customGatesUses.push(c);\n    }\n    return customGatesUses;\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nconst bls12381r = Scalar.e(\"73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001\", 16);\nconst bn128r = Scalar.e(\"21888242871839275222246405745257275088548364400416034343698204186575808495617\");\n\nasync function r1csInfo(r1csName, logger) {\n\n    const cir = await readR1cs(r1csName);\n\n    if (Scalar.eq(cir.prime, bn128r)) {\n        if (logger) logger.info(\"Curve: bn-128\");\n    } else if (Scalar.eq(cir.prime, bls12381r)) {\n        if (logger) logger.info(\"Curve: bls12-381\");\n    } else {\n        if (logger) logger.info(`Unknown Curve. Prime: ${Scalar.toString(cir.prime)}`);\n    }\n    if (logger) logger.info(`# of Wires: ${cir.nVars}`);\n    if (logger) logger.info(`# of Constraints: ${cir.nConstraints}`);\n    if (logger) logger.info(`# of Private Inputs: ${cir.nPrvInputs}`);\n    if (logger) logger.info(`# of Public Inputs: ${cir.nPubInputs}`);\n    if (logger) logger.info(`# of Labels: ${cir.nLabels}`);\n    if (logger) logger.info(`# of Outputs: ${cir.nOutputs}`);\n\n    return cir;\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\nasync function r1csExportJson(r1csFileName, logger) {\n\n    const cir = await readR1cs(r1csFileName, true, true, true, logger);\n    const Fr=cir.curve.Fr;\n    delete cir.curve;\n    delete cir.F;\n\n    return stringifyBigIntsWithField(Fr, cir);\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nvar r1cs = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    print: r1csPrint,\n    info: r1csInfo,\n    exportJson: r1csExportJson\n});\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nasync function loadSymbols(symFileName) {\n    const sym = {\n        labelIdx2Name: [ \"one\" ],\n        varIdx2Name: [ \"one\" ],\n        componentIdx2Name: []\n    };\n    const fd = await readExisting(symFileName);\n    const buff = await fd.read(fd.totalSize);\n    const symsStr = new TextDecoder(\"utf-8\").decode(buff);\n    const lines = symsStr.split(\"\\n\");\n    for (let i=0; i<lines.length; i++) {\n        const arr = lines[i].split(\",\");\n        if (arr.length!=4) continue;\n        if (sym.varIdx2Name[arr[1]]) {\n            sym.varIdx2Name[arr[1]] += \"|\" + arr[3];\n        } else {\n            sym.varIdx2Name[arr[1]] = arr[3];\n        }\n        sym.labelIdx2Name[arr[0]] = arr[3];\n        if (!sym.componentIdx2Name[arr[2]]) {\n            sym.componentIdx2Name[arr[2]] = extractComponent(arr[3]);\n        }\n    }\n\n    await fd.close();\n\n    return sym;\n\n    function extractComponent(name) {\n        const arr = name.split(\".\");\n        arr.pop(); // Remove the lasr element\n        return arr.join(\".\");\n    }\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\nconst {unstringifyBigInts: unstringifyBigInts$7} = utils;\n\n\nasync function wtnsDebug(_input, wasmFileName, wtnsFileName, symName, options, logger) {\n\n    const input = unstringifyBigInts$7(_input);\n\n    const fdWasm = await readExisting(wasmFileName);\n    const wasm = await fdWasm.read(fdWasm.totalSize);\n    await fdWasm.close();\n\n\n    let wcOps = {\n        sanityCheck: true\n    };\n    let sym = await loadSymbols(symName);\n    if (options.set) {\n        if (!sym) sym = await loadSymbols(symName);\n        wcOps.logSetSignal= function(labelIdx, value) {\n            // The line below splits the arrow log into 2 strings to avoid some Secure ECMAScript issues\n            if (logger) logger.info(\"SET \" + sym.labelIdx2Name[labelIdx] + \" <\" + \"-- \" + value.toString());\n        };\n    }\n    if (options.get) {\n        if (!sym) sym = await loadSymbols(symName);\n        wcOps.logGetSignal= function(varIdx, value) {\n            // The line below splits the arrow log into 2 strings to avoid some Secure ECMAScript issues\n            if (logger) logger.info(\"GET \" + sym.labelIdx2Name[varIdx] + \" --\" + \"> \" + value.toString());\n        };\n    }\n    if (options.trigger) {\n        if (!sym) sym = await loadSymbols(symName);\n        wcOps.logStartComponent= function(cIdx) {\n            if (logger) logger.info(\"START: \" + sym.componentIdx2Name[cIdx]);\n        };\n        wcOps.logFinishComponent= function(cIdx) {\n            if (logger) logger.info(\"FINISH: \" + sym.componentIdx2Name[cIdx]);\n        };\n    }\n    wcOps.sym = sym;\n\n    const wc = await builder(wasm, wcOps);\n    const w = await wc.calculateWitness(input);\n\n    const fdWtns = await createBinFile(wtnsFileName, \"wtns\", 2, 2);\n\n    await write(fdWtns, w, wc.prime);\n\n    await fdWtns.close();\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nasync function wtnsExportJson(wtnsFileName) {\n\n    const w = await read(wtnsFileName);\n\n    return w;\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nasync function wtnsCheck(r1csFilename, wtnsFilename, logger) {\n\n    if (logger) logger.info(\"WITNESS CHECKING STARTED\");\n\n    // Read r1cs file\n    if (logger) logger.info(\"> Reading r1cs file\");\n    const {\n        fd: fdR1cs,\n        sections: sectionsR1cs\n    } = await readBinFile(r1csFilename, \"r1cs\", 1);\n    const r1cs = await readR1csFd(fdR1cs, sectionsR1cs, { loadConstraints: false, loadCustomGates: false });\n\n    // Read witness file\n    if (logger) logger.info(\"> Reading witness file\");\n    const {\n        fd: fdWtns,\n        sections: wtnsSections\n    } = await readBinFile(wtnsFilename, \"wtns\", 2);\n    const wtnsHeader = await readHeader(fdWtns, wtnsSections);\n\n    if (!Scalar.eq(r1cs.prime, wtnsHeader.q)) {\n        throw new Error(\"Curve of the witness does not match the curve of the proving key\");\n    }\n\n    const buffWitness = await readSection(fdWtns, wtnsSections, 2);\n    await fdWtns.close();\n\n    const curve = await getCurveFromR(r1cs.prime);\n    const Fr = curve.Fr;\n    const sFr = Fr.n8;\n\n    const bR1cs = await readSection(fdR1cs, sectionsR1cs, 2);\n\n    if (logger) {\n        logger.info(\"----------------------------\");\n        logger.info(\"  WITNESS CHECK\");\n        logger.info(`  Curve:          ${r1cs.curve.name}`);\n        logger.info(`  Vars (wires):   ${r1cs.nVars}`);\n        logger.info(`  Ouputs:         ${r1cs.nOutputs}`);\n        logger.info(`  Public Inputs:  ${r1cs.nPubInputs}`);\n        logger.info(`  Private Inputs: ${r1cs.nPrvInputs}`);\n        logger.info(`  Labels:         ${r1cs.nLabels}`);\n        logger.info(`  Constraints:    ${r1cs.nConstraints}`);\n        logger.info(`  Custom Gates:   ${r1cs.useCustomGates}`);\n        logger.info(\"----------------------------\");\n    }\n\n    if (logger) logger.info(\"> Checking witness correctness\");\n\n    let bR1csPos = 0;\n    let res = true;\n    for (let i = 0; i < r1cs.nConstraints; i++) {\n        if ((logger) && (i !== 0) && (i % 500000 === 0)) {\n            logger.info(`··· processing r1cs constraints ${i}/${r1cs.nConstraints}`);\n        }\n\n        //Read the three linear combinations of the constraint where A * B - C = 0\n        const lcA = readLC();\n        const lcB = readLC();\n        const lcC = readLC();\n\n        // Evaluate the linear combinations\n        const evalA = EvaluateLinearCombination(lcA);\n        const evalB = EvaluateLinearCombination(lcB);\n        const evalC = EvaluateLinearCombination(lcC);\n\n        // Check that A * B - C == 0\n        if (!Fr.eq(Fr.sub(Fr.mul(evalA, evalB), evalC), Fr.zero)) {\n            logger.warn(\"··· aborting checking process at constraint \" + i);\n            res = false;\n            break;\n        }\n    }\n\n    fdR1cs.close();\n\n    if (logger) {\n        if (res) {\n            logger.info(\"WITNESS IS CORRECT\");\n            logger.info(\"WITNESS CHECKING FINISHED SUCCESSFULLY\");\n        } else {\n            logger.warn(\"WITNESS IS NOT CORRECT\");\n            logger.warn(\"WITNESS CHECKING FINISHED UNSUCCESSFULLY\");\n        }\n    }\n\n    return res;\n\n    function EvaluateLinearCombination(lc) {\n        let res = Fr.zero;\n\n        const keys = Object.keys(lc);\n        keys.forEach((signalId) => {\n            const signalValue = getWitnessValue(signalId);\n            const signalFactor = lc[signalId];\n\n            res = Fr.add(res, Fr.mul(signalValue, signalFactor));\n        });\n\n        return res;\n    }\n\n    function readLC() {\n        const lc = {};\n\n        const buffUL32 = bR1cs.slice(bR1csPos, bR1csPos + 4);\n        bR1csPos += 4;\n        const buffUL32V = new DataView(buffUL32.buffer);\n        const nIdx = buffUL32V.getUint32(0, true);\n\n        const buff = bR1cs.slice(bR1csPos, bR1csPos + (4 + r1cs.n8) * nIdx);\n        bR1csPos += (4 + r1cs.n8) * nIdx;\n        const buffV = new DataView(buff.buffer);\n        for (let i = 0; i < nIdx; i++) {\n            const idx = buffV.getUint32(i * (4 + r1cs.n8), true);\n            const val = r1cs.F.fromRprLE(buff, i * (4 + r1cs.n8) + 4);\n            lc[idx] = val;\n        }\n        return lc;\n    }\n\n    function getWitnessValue(signalId) {\n        return Fr.fromRprLE(buffWitness.slice(signalId * sFr, signalId * sFr + sFr));\n    }\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nvar wtns = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    calculate: wtnsCalculate,\n    debug: wtnsDebug,\n    exportJson: wtnsExportJson,\n    check: wtnsCheck\n});\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nconst SUBARRAY_SIZE = 0x40000;\n\nconst BigArrayHandler = {\n    get: function(obj, prop) {\n        if (!isNaN(prop)) {\n            return obj.getElement(prop);\n        } else return obj[prop];\n    },\n    set: function(obj, prop, value) {\n        if (!isNaN(prop)) {\n            return obj.setElement(prop, value);\n        } else {\n            obj[prop] = value;\n            return true;\n        }\n    }\n};\n\nclass _BigArray {\n    constructor (initSize) {\n        this.length = initSize || 0;\n        this.arr = new Array(SUBARRAY_SIZE);\n\n        for (let i=0; i<initSize; i+=SUBARRAY_SIZE) {\n            this.arr[i/SUBARRAY_SIZE] = new Array(Math.min(SUBARRAY_SIZE, initSize - i));\n        }\n        return this;\n    }\n    push () {\n        for (let i=0; i<arguments.length; i++) {\n            this.setElement (this.length, arguments[i]);\n        }\n    }\n\n    slice (f, t) {\n        const arr = new Array(t-f);\n        for (let i=f; i< t; i++) arr[i-f] = this.getElement(i);\n        return arr;\n    }\n    getElement(idx) {\n        idx = parseInt(idx);\n        const idx1 = Math.floor(idx / SUBARRAY_SIZE);\n        const idx2 = idx % SUBARRAY_SIZE;\n        return this.arr[idx1] ? this.arr[idx1][idx2] : undefined;\n    }\n    setElement(idx, value) {\n        idx = parseInt(idx);\n        const idx1 = Math.floor(idx / SUBARRAY_SIZE);\n        if (!this.arr[idx1]) {\n            this.arr[idx1] = new Array(SUBARRAY_SIZE);\n        }\n        const idx2 = idx % SUBARRAY_SIZE;\n        this.arr[idx1][idx2] = value;\n        if (idx >= this.length) this.length = idx+1;\n        return true;\n    }\n    getKeys() {\n        const newA = new BigArray();\n        for (let i=0; i<this.arr.length; i++) {\n            if (this.arr[i]) {\n                for (let j=0; j<this.arr[i].length; j++) {\n                    if (typeof this.arr[i][j] !== \"undefined\") {\n                        newA.push(i*SUBARRAY_SIZE+j);\n                    }\n                }\n            }\n        }\n        return newA;\n    }\n}\n\nclass BigArray {\n    constructor( initSize ) {\n        const obj = new _BigArray(initSize);\n        const extObj = new Proxy(obj, BigArrayHandler);\n        return extObj;\n    }\n}\n\nvar BigArray$1 = BigArray;\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\nasync function newZKey(r1csName, ptauName, zkeyName, logger) {\n\n    const TAU_G1 = 0;\n    const TAU_G2 = 1;\n    const ALPHATAU_G1 = 2;\n    const BETATAU_G1 = 3;\n    await blake2bWasm.exports.ready();\n    const csHasher = blake2bWasm.exports(64);\n\n    const {fd: fdPTau, sections: sectionsPTau} = await readBinFile(ptauName, \"ptau\", 1);\n    const {curve, power} = await readPTauHeader(fdPTau, sectionsPTau);\n    const {fd: fdR1cs, sections: sectionsR1cs} = await readBinFile(r1csName, \"r1cs\", 1);\n    const r1cs = await readR1csHeader(fdR1cs, sectionsR1cs, false);\n\n    const fdZKey = await createBinFile(zkeyName, \"zkey\", 1, 10, 1<<22, 1<<24);\n\n    const sG1 = curve.G1.F.n8*2;\n    const sG2 = curve.G2.F.n8*2;\n\n    if (r1cs.prime != curve.r) {\n        if (logger) logger.error(\"r1cs curve does not match powers of tau ceremony curve\");\n        return -1;\n    }\n\n    const cirPower = log2(r1cs.nConstraints + r1cs.nPubInputs + r1cs.nOutputs +1 -1) +1;\n\n    if (cirPower > power) {\n        if (logger) logger.error(`circuit too big for this power of tau ceremony. ${r1cs.nConstraints}*2 > 2**${power}`);\n        return -1;\n    }\n\n    if (!sectionsPTau[12]) {\n        if (logger) logger.error(\"Powers of tau is not prepared.\");\n        return -1;\n    }\n\n    const nPublic = r1cs.nOutputs + r1cs.nPubInputs;\n    const domainSize = 2 ** cirPower;\n\n    // Write the header\n    ///////////\n    await startWriteSection(fdZKey, 1);\n    await fdZKey.writeULE32(1); // Groth\n    await endWriteSection(fdZKey);\n\n    // Write the Groth header section\n    ///////////\n\n    await startWriteSection(fdZKey, 2);\n    const primeQ = curve.q;\n    const n8q = (Math.floor( (Scalar.bitLength(primeQ) - 1) / 64) +1)*8;\n\n    const primeR = curve.r;\n    const n8r = (Math.floor( (Scalar.bitLength(primeR) - 1) / 64) +1)*8;\n    const Rr = Scalar.mod(Scalar.shl(1, n8r*8), primeR);\n    const R2r = curve.Fr.e(Scalar.mod(Scalar.mul(Rr,Rr), primeR));\n\n    await fdZKey.writeULE32(n8q);\n    await writeBigInt(fdZKey, primeQ, n8q);\n    await fdZKey.writeULE32(n8r);\n    await writeBigInt(fdZKey, primeR, n8r);\n    await fdZKey.writeULE32(r1cs.nVars);                         // Total number of bars\n    await fdZKey.writeULE32(nPublic);                       // Total number of public vars (not including ONE)\n    await fdZKey.writeULE32(domainSize);                  // domainSize\n\n    let bAlpha1;\n    bAlpha1 = await fdPTau.read(sG1, sectionsPTau[4][0].p);\n    await fdZKey.write(bAlpha1);\n    bAlpha1 = await curve.G1.batchLEMtoU(bAlpha1);\n    csHasher.update(bAlpha1);\n\n    let bBeta1;\n    bBeta1 = await fdPTau.read(sG1, sectionsPTau[5][0].p);\n    await fdZKey.write(bBeta1);\n    bBeta1 = await curve.G1.batchLEMtoU(bBeta1);\n    csHasher.update(bBeta1);\n\n    let bBeta2;\n    bBeta2 = await fdPTau.read(sG2, sectionsPTau[6][0].p);\n    await fdZKey.write(bBeta2);\n    bBeta2 = await curve.G2.batchLEMtoU(bBeta2);\n    csHasher.update(bBeta2);\n\n    const bg1 = new Uint8Array(sG1);\n    curve.G1.toRprLEM(bg1, 0, curve.G1.g);\n    const bg2 = new Uint8Array(sG2);\n    curve.G2.toRprLEM(bg2, 0, curve.G2.g);\n    const bg1U = new Uint8Array(sG1);\n    curve.G1.toRprUncompressed(bg1U, 0, curve.G1.g);\n    const bg2U = new Uint8Array(sG2);\n    curve.G2.toRprUncompressed(bg2U, 0, curve.G2.g);\n\n    await fdZKey.write(bg2);        // gamma2\n    await fdZKey.write(bg1);        // delta1\n    await fdZKey.write(bg2);        // delta2\n    csHasher.update(bg2U);      // gamma2\n    csHasher.update(bg1U);      // delta1\n    csHasher.update(bg2U);      // delta2\n    await endWriteSection(fdZKey);\n\n    if (logger) logger.info(\"Reading r1cs\");\n    let sR1cs = await readSection(fdR1cs, sectionsR1cs, 2);\n\n    const A = new BigArray$1(r1cs.nVars);\n    const B1 = new BigArray$1(r1cs.nVars);\n    const B2 = new BigArray$1(r1cs.nVars);\n    const C = new BigArray$1(r1cs.nVars- nPublic -1);\n    const IC = new Array(nPublic+1);\n\n    if (logger) logger.info(\"Reading tauG1\");\n    let sTauG1 = await readSection(fdPTau, sectionsPTau, 12, (domainSize -1)*sG1, domainSize*sG1);\n    if (logger) logger.info(\"Reading tauG2\");\n    let sTauG2 = await readSection(fdPTau, sectionsPTau, 13, (domainSize -1)*sG2, domainSize*sG2);\n    if (logger) logger.info(\"Reading alphatauG1\");\n    let sAlphaTauG1 = await readSection(fdPTau, sectionsPTau, 14, (domainSize -1)*sG1, domainSize*sG1);\n    if (logger) logger.info(\"Reading betatauG1\");\n    let sBetaTauG1 = await readSection(fdPTau, sectionsPTau, 15, (domainSize -1)*sG1, domainSize*sG1);\n\n    await processConstraints();\n\n    await composeAndWritePoints(3, \"G1\", IC, \"IC\");\n\n    await writeHs();\n\n    await hashHPoints();\n\n    await composeAndWritePoints(8, \"G1\", C, \"C\");\n    await composeAndWritePoints(5, \"G1\", A, \"A\");\n    await composeAndWritePoints(6, \"G1\", B1, \"B1\");\n    await composeAndWritePoints(7, \"G2\", B2, \"B2\");\n\n    const csHash = csHasher.digest();\n    // Contributions section\n    await startWriteSection(fdZKey, 10);\n    await fdZKey.write(csHash);\n    await fdZKey.writeULE32(0);\n    await endWriteSection(fdZKey);\n\n    if (logger) logger.info(formatHash(csHash, \"Circuit hash: \"));\n\n\n    await fdZKey.close();\n    await fdR1cs.close();\n    await fdPTau.close();\n\n    return csHash;\n\n    async function writeHs() {\n        await startWriteSection(fdZKey, 9);\n        const buffOut = new BigBuffer(domainSize*sG1);\n        if (cirPower < curve.Fr.s) {\n            let sTauG1 = await readSection(fdPTau, sectionsPTau, 12, (domainSize*2-1)*sG1, domainSize*2*sG1);\n            for (let i=0; i< domainSize; i++) {\n                if ((logger)&&(i%10000 == 0)) logger.debug(`spliting buffer: ${i}/${domainSize}`);\n                const buff = sTauG1.slice( (i*2+1)*sG1, (i*2+1)*sG1 + sG1 );\n                buffOut.set(buff, i*sG1);\n            }\n        } else if (cirPower == curve.Fr.s) {\n            const o = sectionsPTau[12][0].p + ((2 ** (cirPower+1)) -1)*sG1;\n            await fdPTau.readToBuffer(buffOut, 0, domainSize*sG1, o + domainSize*sG1);\n        } else {\n            if (logger) logger.error(\"Circuit too big\");\n            throw new Error(\"Circuit too big for this curve\");\n        }\n        await fdZKey.write(buffOut);\n        await endWriteSection(fdZKey);\n    }\n\n    async function processConstraints() {\n        const buffCoeff = new Uint8Array(12 + curve.Fr.n8);\n        const buffCoeffV = new DataView(buffCoeff.buffer);\n        const bOne = new Uint8Array(curve.Fr.n8);\n        curve.Fr.toRprLE(bOne, 0, curve.Fr.e(1));\n\n        let r1csPos = 0;\n\n        function r1cs_readULE32() {\n            const buff = sR1cs.slice(r1csPos, r1csPos+4);\n            r1csPos += 4;\n            const buffV = new DataView(buff.buffer);\n            return buffV.getUint32(0, true);\n        }\n\n        const coefs = new BigArray$1();\n        for (let c=0; c<r1cs.nConstraints; c++) {\n            if ((logger)&&(c%10000 == 0)) logger.debug(`processing constraints: ${c}/${r1cs.nConstraints}`);\n            const nA = r1cs_readULE32();\n            for (let i=0; i<nA; i++) {\n                const s = r1cs_readULE32();\n                const coefp = r1csPos;\n                r1csPos += curve.Fr.n8;\n\n                const l1t = TAU_G1;\n                const l1 = sG1*c;\n                const l2t = BETATAU_G1;\n                const l2 = sG1*c;\n                if (typeof A[s] === \"undefined\") A[s] = [];\n                A[s].push([l1t, l1, coefp]);\n\n                if (s <= nPublic) {\n                    if (typeof IC[s] === \"undefined\") IC[s] = [];\n                    IC[s].push([l2t, l2, coefp]);\n                } else {\n                    if (typeof C[s- nPublic -1] === \"undefined\") C[s- nPublic -1] = [];\n                    C[s - nPublic -1].push([l2t, l2, coefp]);\n                }\n                coefs.push([0, c, s, coefp]);\n            }\n\n            const nB = r1cs_readULE32();\n            for (let i=0; i<nB; i++) {\n                const s = r1cs_readULE32();\n                const coefp = r1csPos;\n                r1csPos += curve.Fr.n8;\n\n                const l1t = TAU_G1;\n                const l1 = sG1*c;\n                const l2t = TAU_G2;\n                const l2 = sG2*c;\n                const l3t = ALPHATAU_G1;\n                const l3 = sG1*c;\n                if (typeof B1[s] === \"undefined\") B1[s] = [];\n                B1[s].push([l1t, l1, coefp]);\n                if (typeof B2[s] === \"undefined\") B2[s] = [];\n                B2[s].push([l2t, l2, coefp]);\n\n                if (s <= nPublic) {\n                    if (typeof IC[s] === \"undefined\") IC[s] = [];\n                    IC[s].push([l3t, l3, coefp]);\n                } else {\n                    if (typeof C[s- nPublic -1] === \"undefined\") C[s- nPublic -1] = [];\n                    C[s- nPublic -1].push([l3t, l3, coefp]);\n                }\n\n                coefs.push([1, c, s, coefp]);\n            }\n\n            const nC = r1cs_readULE32();\n            for (let i=0; i<nC; i++) {\n                const s = r1cs_readULE32();\n                const coefp = r1csPos;\n                r1csPos += curve.Fr.n8;\n\n                const l1t = TAU_G1;\n                const l1 = sG1*c;\n                if (s <= nPublic) {\n                    if (typeof IC[s] === \"undefined\") IC[s] = [];\n                    IC[s].push([l1t, l1, coefp]);\n                } else {\n                    if (typeof C[s- nPublic -1] === \"undefined\") C[s- nPublic -1] = [];\n                    C[s- nPublic -1].push([l1t, l1, coefp]);\n                }\n            }\n        }\n\n        for (let s = 0; s <= nPublic ; s++) {\n            const l1t = TAU_G1;\n            const l1 = sG1*(r1cs.nConstraints + s);\n            const l2t = BETATAU_G1;\n            const l2 = sG1*(r1cs.nConstraints + s);\n            if (typeof A[s] === \"undefined\") A[s] = [];\n            A[s].push([l1t, l1, -1]);\n            if (typeof IC[s] === \"undefined\") IC[s] = [];\n            IC[s].push([l2t, l2, -1]);\n            coefs.push([0, r1cs.nConstraints + s, s, -1]);\n        }\n\n\n        await startWriteSection(fdZKey, 4);\n\n        const buffSection = new BigBuffer(coefs.length*(12+curve.Fr.n8) + 4);\n\n        const buff4 = new Uint8Array(4);\n        const buff4V = new DataView(buff4.buffer);\n        buff4V.setUint32(0, coefs.length, true);\n        buffSection.set(buff4);\n        let coefsPos = 4;\n        for (let i=0; i<coefs.length; i++) {\n            if ((logger)&&(i%100000 == 0)) logger.debug(`writing coeffs: ${i}/${coefs.length}`);\n            writeCoef(coefs[i]);\n        }\n\n        await fdZKey.write(buffSection);\n        await endWriteSection(fdZKey);\n\n        function writeCoef(c) {\n            buffCoeffV.setUint32(0, c[0], true);\n            buffCoeffV.setUint32(4, c[1], true);\n            buffCoeffV.setUint32(8, c[2], true);\n            let n;\n            if (c[3]>=0) {\n                n = curve.Fr.fromRprLE(sR1cs.slice(c[3], c[3] + curve.Fr.n8), 0);\n            } else {\n                n = curve.Fr.fromRprLE(bOne, 0);\n            }\n            const nR2 = curve.Fr.mul(n, R2r);\n            curve.Fr.toRprLE(buffCoeff, 12, nR2);\n            buffSection.set(buffCoeff, coefsPos);\n            coefsPos += buffCoeff.length;\n        }\n\n    }\n\n    async function composeAndWritePoints(idSection, groupName, arr, sectionName) {\n        const CHUNK_SIZE= 1<<15;\n        const G = curve[groupName];\n\n        hashU32(arr.length);\n        await startWriteSection(fdZKey, idSection);\n\n        let opPromises = [];\n\n        let i=0;\n        while (i<arr.length) {\n\n            let t=0;\n            while ((i<arr.length)&&(t<curve.tm.concurrency)) {\n                if (logger)  logger.debug(`Writing points start ${sectionName}: ${i}/${arr.length}`);\n                let n = 1;\n                let nP = (arr[i] ? arr[i].length : 0);\n                while ((i + n < arr.length) && (nP + (arr[i+n] ? arr[i+n].length : 0) < CHUNK_SIZE) && (n<CHUNK_SIZE)) {\n                    nP += (arr[i+n] ? arr[i+n].length : 0);\n                    n ++;\n                }\n                const subArr = arr.slice(i, i + n);\n                const _i = i;\n                opPromises.push(composeAndWritePointsThread(groupName, subArr, logger, sectionName).then( (r) => {\n                    if (logger)  logger.debug(`Writing points end ${sectionName}: ${_i}/${arr.length}`);\n                    return r;\n                }));\n                i += n;\n                t++;\n            }\n\n            const result = await Promise.all(opPromises);\n\n            for (let k=0; k<result.length; k++) {\n                await fdZKey.write(result[k][0]);\n                const buff = await G.batchLEMtoU(result[k][0]);\n                csHasher.update(buff);\n            }\n            opPromises = [];\n\n        }\n        await endWriteSection(fdZKey);\n\n    }\n\n    async function composeAndWritePointsThread(groupName, arr, logger, sectionName) {\n        const G = curve[groupName];\n        const sGin = G.F.n8*2;\n        const sGmid = G.F.n8*3;\n        const sGout = G.F.n8*2;\n        let fnExp, fnMultiExp, fnBatchToAffine, fnZero;\n        if (groupName == \"G1\") {\n            fnExp = \"g1m_timesScalarAffine\";\n            fnMultiExp = \"g1m_multiexpAffine\";\n            fnBatchToAffine = \"g1m_batchToAffine\";\n            fnZero = \"g1m_zero\";\n        } else if (groupName == \"G2\") {\n            fnExp = \"g2m_timesScalarAffine\";\n            fnMultiExp = \"g2m_multiexpAffine\";\n            fnBatchToAffine = \"g2m_batchToAffine\";\n            fnZero = \"g2m_zero\";\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n        let acc =0;\n        for (let i=0; i<arr.length; i++) acc += arr[i] ? arr[i].length : 0;\n        let bBases, bScalars;\n        if (acc> 2<<14) {\n            bBases = new BigBuffer(acc*sGin);\n            bScalars = new BigBuffer(acc*curve.Fr.n8);\n        } else {\n            bBases = new Uint8Array(acc*sGin);\n            bScalars = new Uint8Array(acc*curve.Fr.n8);\n        }\n        let pB =0;\n        let pS =0;\n\n        const sBuffs = [\n            sTauG1,\n            sTauG2,\n            sAlphaTauG1,\n            sBetaTauG1\n        ];\n\n        const bOne = new Uint8Array(curve.Fr.n8);\n        curve.Fr.toRprLE(bOne, 0, curve.Fr.e(1));\n\n        let offset = 0;\n        for (let i=0; i<arr.length; i++) {\n            if (!arr[i]) continue;\n            for (let j=0; j<arr[i].length; j++) {\n                if ((logger)&&(j)&&(j%10000 == 0))  logger.debug(`Configuring big array ${sectionName}: ${j}/${arr[i].length}`);\n                bBases.set(\n                    sBuffs[arr[i][j][0]].slice(\n                        arr[i][j][1],\n                        arr[i][j][1] + sGin\n                    ), offset*sGin\n                );\n                if (arr[i][j][2]>=0) {\n                    bScalars.set(\n                        sR1cs.slice(\n                            arr[i][j][2],\n                            arr[i][j][2] + curve.Fr.n8\n                        ),\n                        offset*curve.Fr.n8\n                    );\n                } else {\n                    bScalars.set(bOne, offset*curve.Fr.n8);\n                }\n                offset ++;\n            }\n        }\n\n        if (arr.length>1) {\n            const task = [];\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: bBases});\n            task.push({cmd: \"ALLOCSET\", var: 1, buff: bScalars});\n            task.push({cmd: \"ALLOC\", var: 2, len: arr.length*sGmid});\n            pB = 0;\n            pS = 0;\n            let pD =0;\n            for (let i=0; i<arr.length; i++) {\n                if (!arr[i]) {\n                    task.push({cmd: \"CALL\", fnName: fnZero, params: [\n                        {var: 2, offset: pD}\n                    ]});\n                    pD += sGmid;\n                    continue;\n                }\n                if (arr[i].length == 1) {\n                    task.push({cmd: \"CALL\", fnName: fnExp, params: [\n                        {var: 0, offset: pB},\n                        {var: 1, offset: pS},\n                        {val: curve.Fr.n8},\n                        {var: 2, offset: pD}\n                    ]});\n                } else {\n                    task.push({cmd: \"CALL\", fnName: fnMultiExp, params: [\n                        {var: 0, offset: pB},\n                        {var: 1, offset: pS},\n                        {val: curve.Fr.n8},\n                        {val: arr[i].length},\n                        {var: 2, offset: pD}\n                    ]});\n                }\n                pB += sGin*arr[i].length;\n                pS += curve.Fr.n8*arr[i].length;\n                pD += sGmid;\n            }\n            task.push({cmd: \"CALL\", fnName: fnBatchToAffine, params: [\n                {var: 2},\n                {val: arr.length},\n                {var: 2},\n            ]});\n            task.push({cmd: \"GET\", out: 0, var: 2, len: arr.length*sGout});\n\n            const res = await curve.tm.queueAction(task);\n            return res;\n        } else {\n            let res = await G.multiExpAffine(bBases, bScalars, logger, sectionName);\n            res = [ G.toAffine(res) ];\n            return res;\n        }\n    }\n\n\n    async function hashHPoints() {\n        const CHUNK_SIZE = 1<<14;\n\n        hashU32(domainSize-1);\n\n        for (let i=0; i<domainSize-1; i+= CHUNK_SIZE) {\n            if (logger)  logger.debug(`HashingHPoints: ${i}/${domainSize}`);\n            const n = Math.min(domainSize-1, CHUNK_SIZE);\n            await hashHPointsChunk(i, n);\n        }\n    }\n\n    async function hashHPointsChunk(offset, nPoints) {\n        const buff1 = await fdPTau.read(nPoints *sG1, sectionsPTau[2][0].p + (offset + domainSize)*sG1);\n        const buff2 = await fdPTau.read(nPoints *sG1, sectionsPTau[2][0].p + offset*sG1);\n        const concurrency= curve.tm.concurrency;\n        const nPointsPerThread = Math.floor(nPoints / concurrency);\n        const opPromises = [];\n        for (let i=0; i<concurrency; i++) {\n            let n;\n            if (i< concurrency-1) {\n                n = nPointsPerThread;\n            } else {\n                n = nPoints - i*nPointsPerThread;\n            }\n            if (n==0) continue;\n\n            const subBuff1 = buff1.slice(i*nPointsPerThread*sG1, (i*nPointsPerThread+n)*sG1);\n            const subBuff2 = buff2.slice(i*nPointsPerThread*sG1, (i*nPointsPerThread+n)*sG1);\n            opPromises.push(hashHPointsThread(subBuff1, subBuff2));\n        }\n\n\n        const result = await Promise.all(opPromises);\n\n        for (let i=0; i<result.length; i++) {\n            csHasher.update(result[i][0]);\n        }\n    }\n\n    async function hashHPointsThread(buff1, buff2) {\n        const nPoints = buff1.byteLength/sG1;\n        const sGmid = curve.G1.F.n8*3;\n        const task = [];\n        task.push({cmd: \"ALLOCSET\", var: 0, buff: buff1});\n        task.push({cmd: \"ALLOCSET\", var: 1, buff: buff2});\n        task.push({cmd: \"ALLOC\", var: 2, len: nPoints*sGmid});\n        for (let i=0; i<nPoints; i++) {\n            task.push({\n                cmd: \"CALL\",\n                fnName: \"g1m_subAffine\",\n                params: [\n                    {var: 0, offset: i*sG1},\n                    {var: 1, offset: i*sG1},\n                    {var: 2, offset: i*sGmid},\n                ]\n            });\n        }\n        task.push({cmd: \"CALL\", fnName: \"g1m_batchToAffine\", params: [\n            {var: 2},\n            {val: nPoints},\n            {var: 2},\n        ]});\n        task.push({cmd: \"CALL\", fnName: \"g1m_batchLEMtoU\", params: [\n            {var: 2},\n            {val: nPoints},\n            {var: 2},\n        ]});\n        task.push({cmd: \"GET\", out: 0, var: 2, len: nPoints*sG1});\n\n        const res = await curve.tm.queueAction(task);\n\n        return res;\n    }\n\n    function hashU32(n) {\n        const buff = new Uint8Array(4);\n        const buffV = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);\n        buffV.setUint32(0, n, false);\n        csHasher.update(buff);\n    }\n\n}\n\nasync function phase2exportMPCParams(zkeyName, mpcparamsName, logger) {\n\n    const {fd: fdZKey, sections: sectionsZKey} = await readBinFile(zkeyName, \"zkey\", 2);\n    const zkey = await readHeader$1(fdZKey, sectionsZKey);\n    if (zkey.protocol != \"groth16\") {\n        throw new Error(\"zkey file is not groth16\");\n    }\n\n    const curve = await getCurveFromQ(zkey.q);\n    const sG1 = curve.G1.F.n8*2;\n    const sG2 = curve.G2.F.n8*2;\n\n    const mpcParams = await readMPCParams(fdZKey, curve, sectionsZKey);\n\n    const fdMPCParams = await createOverride(mpcparamsName);\n\n    /////////////////////\n    // Verification Key Section\n    /////////////////////\n    await writeG1(zkey.vk_alpha_1);\n    await writeG1(zkey.vk_beta_1);\n    await writeG2(zkey.vk_beta_2);\n    await writeG2(zkey.vk_gamma_2);\n    await writeG1(zkey.vk_delta_1);\n    await writeG2(zkey.vk_delta_2);\n\n    // IC\n    let buffBasesIC;\n    buffBasesIC = await readSection(fdZKey, sectionsZKey, 3);\n    buffBasesIC = await curve.G1.batchLEMtoU(buffBasesIC);\n\n    await writePointArray(\"G1\", buffBasesIC);\n\n    /////////////////////\n    // h Section\n    /////////////////////\n    const buffBasesH_Lodd = await readSection(fdZKey, sectionsZKey, 9);\n\n    let buffBasesH_Tau;\n    buffBasesH_Tau = await curve.G1.fft(buffBasesH_Lodd, \"affine\", \"jacobian\", logger);\n    buffBasesH_Tau = await curve.G1.batchApplyKey(buffBasesH_Tau, curve.Fr.neg(curve.Fr.e(2)), curve.Fr.w[zkey.power+1], \"jacobian\", \"affine\", logger);\n\n    // Remove last element.  (The degree of H will be allways m-2)\n    buffBasesH_Tau = buffBasesH_Tau.slice(0, buffBasesH_Tau.byteLength - sG1);\n    buffBasesH_Tau = await curve.G1.batchLEMtoU(buffBasesH_Tau);\n    await writePointArray(\"G1\", buffBasesH_Tau);\n\n    /////////////////////\n    // L section\n    /////////////////////\n    let buffBasesC;\n    buffBasesC = await readSection(fdZKey, sectionsZKey, 8);\n    buffBasesC = await curve.G1.batchLEMtoU(buffBasesC);\n    await writePointArray(\"G1\", buffBasesC);\n\n    /////////////////////\n    // A Section (C section)\n    /////////////////////\n    let buffBasesA;\n    buffBasesA = await readSection(fdZKey, sectionsZKey, 5);\n    buffBasesA = await curve.G1.batchLEMtoU(buffBasesA);\n    await writePointArray(\"G1\", buffBasesA);\n\n    /////////////////////\n    // B1 Section\n    /////////////////////\n    let buffBasesB1;\n    buffBasesB1 = await readSection(fdZKey, sectionsZKey, 6);\n    buffBasesB1 = await curve.G1.batchLEMtoU(buffBasesB1);\n    await writePointArray(\"G1\", buffBasesB1);\n\n    /////////////////////\n    // B2 Section\n    /////////////////////\n    let buffBasesB2;\n    buffBasesB2 = await readSection(fdZKey, sectionsZKey, 7);\n    buffBasesB2 = await curve.G2.batchLEMtoU(buffBasesB2);\n    await writePointArray(\"G2\", buffBasesB2);\n\n    await fdMPCParams.write(mpcParams.csHash);\n    await writeU32(mpcParams.contributions.length);\n\n    for (let i=0; i<mpcParams.contributions.length; i++) {\n        const c = mpcParams.contributions[i];\n        await writeG1(c.deltaAfter);\n        await writeG1(c.delta.g1_s);\n        await writeG1(c.delta.g1_sx);\n        await writeG2(c.delta.g2_spx);\n        await fdMPCParams.write(c.transcript);\n    }\n\n    await fdZKey.close();\n    await fdMPCParams.close();\n\n    async function writeG1(P) {\n        const buff = new Uint8Array(sG1);\n        curve.G1.toRprUncompressed(buff, 0, P);\n        await fdMPCParams.write(buff);\n    }\n\n    async function writeG2(P) {\n        const buff = new Uint8Array(sG2);\n        curve.G2.toRprUncompressed(buff, 0, P);\n        await fdMPCParams.write(buff);\n    }\n\n    async function writePointArray(groupName, buff) {\n        let sG;\n        if (groupName == \"G1\") {\n            sG = sG1;\n        } else {\n            sG = sG2;\n        }\n\n        const buffSize = new Uint8Array(4);\n        const buffSizeV = new DataView(buffSize.buffer, buffSize.byteOffset, buffSize.byteLength);\n        buffSizeV.setUint32(0, buff.byteLength / sG, false);\n\n        await fdMPCParams.write(buffSize);\n        await fdMPCParams.write(buff);\n    }\n\n    async function writeU32(n) {\n        const buffSize = new Uint8Array(4);\n        const buffSizeV = new DataView(buffSize.buffer, buffSize.byteOffset, buffSize.byteLength);\n        buffSizeV.setUint32(0, n, false);\n\n        await fdMPCParams.write(buffSize);\n    }\n\n\n\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nasync function phase2importMPCParams(zkeyNameOld, mpcparamsName, zkeyNameNew, name, logger) {\n\n    const {fd: fdZKeyOld, sections: sectionsZKeyOld} = await readBinFile(zkeyNameOld, \"zkey\", 2);\n    const zkeyHeader = await readHeader$1(fdZKeyOld, sectionsZKeyOld, false);\n    if (zkeyHeader.protocol != \"groth16\") {\n        throw new Error(\"zkey file is not groth16\");\n    }\n\n    const curve = await getCurveFromQ(zkeyHeader.q);\n    const sG1 = curve.G1.F.n8*2;\n    const sG2 = curve.G2.F.n8*2;\n\n    const oldMPCParams = await readMPCParams(fdZKeyOld, curve, sectionsZKeyOld);\n    const newMPCParams = {};\n\n    const fdMPCParams = await readExisting(mpcparamsName);\n\n    fdMPCParams.pos =\n        sG1*3 + sG2*3 +                     // vKey\n        8 + sG1*zkeyHeader.nVars +              // IC + C\n        4 + sG1*(zkeyHeader.domainSize-1) +     // H\n        4 + sG1*zkeyHeader.nVars +              // A\n        4 + sG1*zkeyHeader.nVars +              // B1\n        4 + sG2*zkeyHeader.nVars;               // B2\n\n    // csHash\n    newMPCParams.csHash =  await fdMPCParams.read(64);\n\n    const nConttributions = await fdMPCParams.readUBE32();\n    newMPCParams.contributions = [];\n    for (let i=0; i<nConttributions; i++) {\n        const c = { delta:{} };\n        c.deltaAfter = await readG1(fdMPCParams);\n        c.delta.g1_s = await readG1(fdMPCParams);\n        c.delta.g1_sx = await readG1(fdMPCParams);\n        c.delta.g2_spx = await readG2(fdMPCParams);\n        c.transcript = await fdMPCParams.read(64);\n        if (i<oldMPCParams.contributions.length) {\n            c.type = oldMPCParams.contributions[i].type;\n            if (c.type==1) {\n                c.beaconHash = oldMPCParams.contributions[i].beaconHash;\n                c.numIterationsExp = oldMPCParams.contributions[i].numIterationsExp;\n            }\n            if (oldMPCParams.contributions[i].name) {\n                c.name = oldMPCParams.contributions[i].name;\n            }\n        }\n        newMPCParams.contributions.push(c);\n    }\n\n    if (!hashIsEqual(newMPCParams.csHash, oldMPCParams.csHash)) {\n        if (logger) logger.error(\"Hash of the original circuit does not match with the MPC one\");\n        return false;\n    }\n\n    if (oldMPCParams.contributions.length > newMPCParams.contributions.length) {\n        if (logger) logger.error(\"The impoerted file does not include new contributions\");\n        return false;\n    }\n\n    for (let i=0; i<oldMPCParams.contributions.length; i++) {\n        if (!contributionIsEqual(oldMPCParams.contributions[i], newMPCParams.contributions[i])) {\n            if (logger) logger.error(`Previos contribution ${i} does not match`);\n            return false;\n        }\n    }\n\n\n    // Set the same name to all new controbutions\n    if (name) {\n        for (let i=oldMPCParams.contributions.length; i<newMPCParams.contributions.length; i++) {\n            newMPCParams.contributions[i].name = name;\n        }\n    }\n\n    const fdZKeyNew = await createBinFile(zkeyNameNew, \"zkey\", 1, 10);\n    fdMPCParams.pos = 0;\n\n    // Header\n    fdMPCParams.pos += sG1;  // ignore alpha1 (keep original)\n    fdMPCParams.pos += sG1;  // ignore beta1\n    fdMPCParams.pos += sG2;  // ignore beta2\n    fdMPCParams.pos += sG2;  // ignore gamma2\n    zkeyHeader.vk_delta_1 = await readG1(fdMPCParams);\n    zkeyHeader.vk_delta_2 = await readG2(fdMPCParams);\n    await writeHeader(fdZKeyNew, zkeyHeader);\n\n    // IC (Keep original)\n    const nIC = await fdMPCParams.readUBE32();\n    if (nIC != zkeyHeader.nPublic +1) {\n        if (logger) logger.error(\"Invalid number of points in IC\");\n        await fdZKeyNew.discard();\n        return false;\n    }\n    fdMPCParams.pos += sG1*(zkeyHeader.nPublic+1);\n    await copySection(fdZKeyOld, sectionsZKeyOld, fdZKeyNew, 3);\n\n    // Coeffs (Keep original)\n    await copySection(fdZKeyOld, sectionsZKeyOld, fdZKeyNew, 4);\n\n    // H Section\n    const nH = await fdMPCParams.readUBE32();\n    if (nH != zkeyHeader.domainSize-1) {\n        if (logger) logger.error(\"Invalid number of points in H\");\n        await fdZKeyNew.discard();\n        return false;\n    }\n    let buffH;\n    const buffTauU = await fdMPCParams.read(sG1*(zkeyHeader.domainSize-1));\n    const buffTauLEM = await curve.G1.batchUtoLEM(buffTauU);\n    buffH = new Uint8Array(zkeyHeader.domainSize*sG1);\n    buffH.set(buffTauLEM);   // Let the last one to zero.\n    curve.G1.toRprLEM(buffH, sG1*(zkeyHeader.domainSize-1), curve.G1.zeroAffine);\n    const n2Inv = curve.Fr.neg(curve.Fr.inv(curve.Fr.e(2)));\n    const wInv = curve.Fr.inv(curve.Fr.w[zkeyHeader.power+1]);\n    buffH = await curve.G1.batchApplyKey(buffH, n2Inv, wInv, \"affine\", \"jacobian\", logger);\n    buffH = await curve.G1.ifft(buffH, \"jacobian\", \"affine\", logger);\n    await startWriteSection(fdZKeyNew, 9);\n    await fdZKeyNew.write(buffH);\n    await endWriteSection(fdZKeyNew);\n\n    // C Secion (L section)\n    const nL = await fdMPCParams.readUBE32();\n    if (nL != (zkeyHeader.nVars-zkeyHeader.nPublic-1)) {\n        if (logger) logger.error(\"Invalid number of points in L\");\n        await fdZKeyNew.discard();\n        return false;\n    }\n    let buffL;\n    buffL = await fdMPCParams.read(sG1*(zkeyHeader.nVars-zkeyHeader.nPublic-1));\n    buffL = await curve.G1.batchUtoLEM(buffL);\n    await startWriteSection(fdZKeyNew, 8);\n    await fdZKeyNew.write(buffL);\n    await endWriteSection(fdZKeyNew);\n\n    // A Section\n    const nA = await fdMPCParams.readUBE32();\n    if (nA != zkeyHeader.nVars) {\n        if (logger) logger.error(\"Invalid number of points in A\");\n        await fdZKeyNew.discard();\n        return false;\n    }\n    fdMPCParams.pos += sG1*(zkeyHeader.nVars);\n    await copySection(fdZKeyOld, sectionsZKeyOld, fdZKeyNew, 5);\n\n    // B1 Section\n    const nB1 = await fdMPCParams.readUBE32();\n    if (nB1 != zkeyHeader.nVars) {\n        if (logger) logger.error(\"Invalid number of points in B1\");\n        await fdZKeyNew.discard();\n        return false;\n    }\n    fdMPCParams.pos += sG1*(zkeyHeader.nVars);\n    await copySection(fdZKeyOld, sectionsZKeyOld, fdZKeyNew, 6);\n\n    // B2 Section\n    const nB2 = await fdMPCParams.readUBE32();\n    if (nB2 != zkeyHeader.nVars) {\n        if (logger) logger.error(\"Invalid number of points in B2\");\n        await fdZKeyNew.discard();\n        return false;\n    }\n    fdMPCParams.pos += sG2*(zkeyHeader.nVars);\n    await copySection(fdZKeyOld, sectionsZKeyOld, fdZKeyNew, 7);\n\n    await writeMPCParams(fdZKeyNew, curve, newMPCParams);\n\n    await fdMPCParams.close();\n    await fdZKeyNew.close();\n    await fdZKeyOld.close();\n\n    return true;\n\n    async function readG1(fd) {\n        const buff = await fd.read(curve.G1.F.n8*2);\n        return curve.G1.fromRprUncompressed(buff, 0);\n    }\n\n    async function readG2(fd) {\n        const buff = await fd.read(curve.G2.F.n8*2);\n        return curve.G2.fromRprUncompressed(buff, 0);\n    }\n\n\n    function contributionIsEqual(c1, c2) {\n        if (!curve.G1.eq(c1.deltaAfter   , c2.deltaAfter)) return false;\n        if (!curve.G1.eq(c1.delta.g1_s   , c2.delta.g1_s)) return false;\n        if (!curve.G1.eq(c1.delta.g1_sx  , c2.delta.g1_sx)) return false;\n        if (!curve.G2.eq(c1.delta.g2_spx , c2.delta.g2_spx)) return false;\n        if (!hashIsEqual(c1.transcript, c2.transcript)) return false;\n        return true;\n    }\n\n\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\nconst sameRatio = sameRatio$2;\n\n\n\nasync function phase2verifyFromInit(initFileName, pTauFileName, zkeyFileName, logger) {\n\n    let sr;\n    await blake2bWasm.exports.ready();\n\n    const {fd, sections} = await readBinFile(zkeyFileName, \"zkey\", 2);\n    const zkey = await readHeader$1(fd, sections, false);\n    if (zkey.protocol != \"groth16\") {\n        throw new Error(\"zkey file is not groth16\");\n    }\n\n    const curve = await getCurveFromQ(zkey.q);\n    const sG1 = curve.G1.F.n8*2;\n\n    const mpcParams = await readMPCParams(fd, curve, sections);\n\n    const accumulatedHasher = blake2bWasm.exports(64);\n    accumulatedHasher.update(mpcParams.csHash);\n    let curDelta = curve.G1.g;\n    for (let i=0; i<mpcParams.contributions.length; i++) {\n        const c = mpcParams.contributions[i];\n        const ourHasher = cloneHasher(accumulatedHasher);\n\n        hashG1(ourHasher, curve, c.delta.g1_s);\n        hashG1(ourHasher, curve, c.delta.g1_sx);\n\n        if (!hashIsEqual(ourHasher.digest(), c.transcript)) {\n            console.log(`INVALID(${i}): Inconsistent transcript `);\n            return false;\n        }\n\n        const delta_g2_sp = hashToG2(curve, c.transcript);\n\n        sr = await sameRatio(curve, c.delta.g1_s, c.delta.g1_sx, delta_g2_sp, c.delta.g2_spx);\n        if (sr !== true) {\n            console.log(`INVALID(${i}): public key G1 and G2 do not have the same ration `);\n            return false;\n        }\n\n        sr = await sameRatio(curve, curDelta, c.deltaAfter, delta_g2_sp, c.delta.g2_spx);\n        if (sr !== true) {\n            console.log(`INVALID(${i}): deltaAfter does not fillow the public key `);\n            return false;\n        }\n\n        if (c.type == 1) {\n            const rng = await rngFromBeaconParams(c.beaconHash, c.numIterationsExp);\n            const expected_prvKey = curve.Fr.fromRng(rng);\n            const expected_g1_s = curve.G1.toAffine(curve.G1.fromRng(rng));\n            const expected_g1_sx = curve.G1.toAffine(curve.G1.timesFr(expected_g1_s, expected_prvKey));\n            if (curve.G1.eq(expected_g1_s, c.delta.g1_s) !== true) {\n                console.log(`INVALID(${i}): Key of the beacon does not match. g1_s `);\n                return false;\n            }\n            if (curve.G1.eq(expected_g1_sx, c.delta.g1_sx) !== true) {\n                console.log(`INVALID(${i}): Key of the beacon does not match. g1_sx `);\n                return false;\n            }\n        }\n\n        hashPubKey(accumulatedHasher, curve, c);\n\n        const contributionHasher = blake2bWasm.exports(64);\n        hashPubKey(contributionHasher, curve, c);\n\n        c.contributionHash = contributionHasher.digest();\n\n        curDelta = c.deltaAfter;\n    }\n\n\n    const {fd: fdInit, sections: sectionsInit} = await readBinFile(initFileName, \"zkey\", 2);\n    const zkeyInit = await readHeader$1(fdInit, sectionsInit, false);\n\n    if (zkeyInit.protocol != \"groth16\") {\n        throw new Error(\"zkeyinit file is not groth16\");\n    }\n\n    if (  (!Scalar.eq(zkeyInit.q, zkey.q))\n        ||(!Scalar.eq(zkeyInit.r, zkey.r))\n        ||(zkeyInit.n8q != zkey.n8q)\n        ||(zkeyInit.n8r != zkey.n8r))\n    {\n        if (logger) logger.error(\"INVALID:  Different curves\");\n        return false;\n    }\n\n    if (  (zkeyInit.nVars != zkey.nVars)\n        ||(zkeyInit.nPublic !=  zkey.nPublic)\n        ||(zkeyInit.domainSize != zkey.domainSize))\n    {\n        if (logger) logger.error(\"INVALID:  Different circuit parameters\");\n        return false;\n    }\n\n    if (!curve.G1.eq(zkey.vk_alpha_1, zkeyInit.vk_alpha_1)) {\n        if (logger) logger.error(\"INVALID:  Invalid alpha1\");\n        return false;\n    }\n    if (!curve.G1.eq(zkey.vk_beta_1, zkeyInit.vk_beta_1)) {\n        if (logger) logger.error(\"INVALID:  Invalid beta1\");\n        return false;\n    }\n    if (!curve.G2.eq(zkey.vk_beta_2, zkeyInit.vk_beta_2)) {\n        if (logger) logger.error(\"INVALID:  Invalid beta2\");\n        return false;\n    }\n    if (!curve.G2.eq(zkey.vk_gamma_2, zkeyInit.vk_gamma_2)) {\n        if (logger) logger.error(\"INVALID:  Invalid gamma2\");\n        return false;\n    }\n    if (!curve.G1.eq(zkey.vk_delta_1, curDelta)) {\n        if (logger) logger.error(\"INVALID:  Invalid delta1\");\n        return false;\n    }\n    sr = await sameRatio(curve, curve.G1.g, curDelta, curve.G2.g, zkey.vk_delta_2);\n    if (sr !== true) {\n        if (logger) logger.error(\"INVALID:  Invalid delta2\");\n        return false;\n    }\n\n    const mpcParamsInit = await readMPCParams(fdInit, curve, sectionsInit);\n    if (!hashIsEqual(mpcParams.csHash, mpcParamsInit.csHash)) {\n        if (logger) logger.error(\"INVALID:  Circuit does not match\");\n        return false;\n    }\n\n    // Check sizes of sections\n    if (sections[8][0].size != sG1*(zkey.nVars-zkey.nPublic-1)) {\n        if (logger) logger.error(\"INVALID:  Invalid L section size\");\n        return false;\n    }\n\n    if (sections[9][0].size != sG1*(zkey.domainSize)) {\n        if (logger) logger.error(\"INVALID:  Invalid H section size\");\n        return false;\n    }\n\n    let ss;\n    ss = await sectionIsEqual(fd, sections, fdInit, sectionsInit, 3);\n    if (!ss) {\n        if (logger) logger.error(\"INVALID:  IC section is not identical\");\n        return false;\n    }\n\n    ss = await sectionIsEqual(fd, sections, fdInit, sectionsInit, 4);\n    if (!ss) {\n        if (logger) logger.error(\"Coeffs section is not identical\");\n        return false;\n    }\n\n    ss = await sectionIsEqual(fd, sections, fdInit, sectionsInit, 5);\n    if (!ss) {\n        if (logger) logger.error(\"A section is not identical\");\n        return false;\n    }\n\n    ss = await sectionIsEqual(fd, sections, fdInit, sectionsInit, 6);\n    if (!ss) {\n        if (logger) logger.error(\"B1 section is not identical\");\n        return false;\n    }\n\n    ss = await sectionIsEqual(fd, sections, fdInit, sectionsInit, 7);\n    if (!ss) {\n        if (logger) logger.error(\"B2 section is not identical\");\n        return false;\n    }\n\n    // Check L\n    sr = await sectionHasSameRatio(\"G1\", fdInit, sectionsInit, fd, sections, 8, zkey.vk_delta_2, zkeyInit.vk_delta_2, \"L section\");\n    if (sr!==true) {\n        if (logger) logger.error(\"L section does not match\");\n        return false;\n    }\n\n    // Check H\n    sr = await sameRatioH();\n    if (sr!==true) {\n        if (logger) logger.error(\"H section does not match\");\n        return false;\n    }\n\n    if (logger) logger.info(formatHash(mpcParams.csHash, \"Circuit Hash: \"));\n\n    await fd.close();\n    await fdInit.close();\n\n    for (let i=mpcParams.contributions.length-1; i>=0; i--) {\n        const c = mpcParams.contributions[i];\n        if (logger) logger.info(\"-------------------------\");\n        if (logger) logger.info(formatHash(c.contributionHash, `contribution #${i+1} ${c.name ? c.name : \"\"}:`));\n        if (c.type == 1) {\n            if (logger) logger.info(`Beacon generator: ${byteArray2hex(c.beaconHash)}`);\n            if (logger) logger.info(`Beacon iterations Exp: ${c.numIterationsExp}`);\n        }\n    }\n    if (logger) logger.info(\"-------------------------\");\n\n    if (logger) logger.info(\"ZKey Ok!\");\n\n    return true;\n\n\n    async function sectionHasSameRatio(groupName, fd1, sections1, fd2, sections2, idSection, g2sp, g2spx, sectionName) {\n        const MAX_CHUNK_SIZE = 1<<20;\n        const G = curve[groupName];\n        const sG = G.F.n8*2;\n        await startReadUniqueSection(fd1, sections1, idSection);\n        await startReadUniqueSection(fd2, sections2, idSection);\n\n        let R1 = G.zero;\n        let R2 = G.zero;\n\n        const nPoints = sections1[idSection][0].size / sG;\n\n        for (let i=0; i<nPoints; i += MAX_CHUNK_SIZE) {\n            if (logger) logger.debug(`Same ratio check ${sectionName}:  ${i}/${nPoints}`);\n            const n = Math.min(nPoints - i, MAX_CHUNK_SIZE);\n            const bases1 = await fd1.read(n*sG);\n            const bases2 = await fd2.read(n*sG);\n\n            const scalars = getRandomBytes(4*n);\n\n            const r1 = await G.multiExpAffine(bases1, scalars);\n            const r2 = await G.multiExpAffine(bases2, scalars);\n\n            R1 = G.add(R1, r1);\n            R2 = G.add(R2, r2);\n        }\n        await endReadSection(fd1);\n        await endReadSection(fd2);\n\n        if (nPoints == 0) return true;\n\n        sr = await sameRatio(curve, R1, R2, g2sp, g2spx);\n        if (sr !== true) return false;\n\n        return true;\n    }\n\n    async function sameRatioH() {\n        const MAX_CHUNK_SIZE = 1<<20;\n        const G = curve.G1;\n        const Fr = curve.Fr;\n        const sG = G.F.n8*2;\n\n        const {fd: fdPTau, sections: sectionsPTau} = await readBinFile(pTauFileName, \"ptau\", 1);\n\n        let buff_r = new BigBuffer(zkey.domainSize * zkey.n8r);\n\n        const seed= new Array(8);\n        for (let i=0; i<8; i++) {\n            seed[i] = readUInt32BE(getRandomBytes(4), 0);\n        }\n        const rng = new ChaCha(seed);\n        for (let i=0; i<zkey.domainSize-1; i++) {   // Note that last one is zero\n            const e = Fr.fromRng(rng);\n            Fr.toRprLE(buff_r, i*zkey.n8r, e);\n        }\n        Fr.toRprLE(buff_r, (zkey.domainSize-1)*zkey.n8r, Fr.zero);\n\n        let R1 = G.zero;\n        for (let i=0; i<zkey.domainSize; i += MAX_CHUNK_SIZE) {\n            if (logger) logger.debug(`H Verificaition(tau):  ${i}/${zkey.domainSize}`);\n            const n = Math.min(zkey.domainSize - i, MAX_CHUNK_SIZE);\n\n            const buff1 = await fdPTau.read(sG*n, sectionsPTau[2][0].p + zkey.domainSize*sG + i*sG);\n            const buff2 = await fdPTau.read(sG*n, sectionsPTau[2][0].p + i*sG);\n\n            const buffB = await batchSubstract(buff1, buff2);\n            const buffS = buff_r.slice(i*zkey.n8r, (i+n)*zkey.n8r);\n            const r = await G.multiExpAffine(buffB, buffS);\n\n            R1 = G.add(R1, r);\n        }\n\n        // Caluclate odd coeficients in transformed domain\n\n        buff_r = await Fr.batchToMontgomery(buff_r);\n        // const first = curve.Fr.neg(curve.Fr.inv(curve.Fr.e(2)));\n        // Works*2   const first = curve.Fr.neg(curve.Fr.e(2));\n\n\n        let first;\n\n        if (zkey.power < Fr.s) {\n            first = Fr.neg(Fr.e(2));\n        } else {\n            const small_m  = 2 ** Fr.s;\n            const shift_to_small_m = Fr.exp(Fr.shift, small_m);\n            first = Fr.sub( shift_to_small_m, Fr.one);\n        }\n\n        // const inc = curve.Fr.inv(curve.PFr.w[zkey.power+1]);\n        const inc = zkey.power < Fr.s ? Fr.w[zkey.power+1] : Fr.shift;\n        buff_r = await Fr.batchApplyKey(buff_r, first, inc);\n        buff_r = await Fr.fft(buff_r);\n        buff_r = await Fr.batchFromMontgomery(buff_r);\n\n        await startReadUniqueSection(fd, sections, 9);\n        let R2 = G.zero;\n        for (let i=0; i<zkey.domainSize; i += MAX_CHUNK_SIZE) {\n            if (logger) logger.debug(`H Verificaition(lagrange):  ${i}/${zkey.domainSize}`);\n            const n = Math.min(zkey.domainSize - i, MAX_CHUNK_SIZE);\n\n            const buff = await fd.read(sG*n);\n            const buffS = buff_r.slice(i*zkey.n8r, (i+n)*zkey.n8r);\n            const r = await G.multiExpAffine(buff, buffS);\n\n            R2 = G.add(R2, r);\n        }\n        await endReadSection(fd);\n\n        sr = await sameRatio(curve, R1, R2, zkey.vk_delta_2, zkeyInit.vk_delta_2);\n        if (sr !== true) return false;\n\n\n        return true;\n\n    }\n\n    async function batchSubstract(buff1, buff2) {\n        const sG = curve.G1.F.n8*2;\n        const nPoints = buff1.byteLength / sG;\n        const concurrency= curve.tm.concurrency;\n        const nPointsPerThread = Math.floor(nPoints / concurrency);\n        const opPromises = [];\n        for (let i=0; i<concurrency; i++) {\n            let n;\n            if (i< concurrency-1) {\n                n = nPointsPerThread;\n            } else {\n                n = nPoints - i*nPointsPerThread;\n            }\n            if (n==0) continue;\n\n            const subBuff1 = buff1.slice(i*nPointsPerThread*sG1, (i*nPointsPerThread+n)*sG1);\n            const subBuff2 = buff2.slice(i*nPointsPerThread*sG1, (i*nPointsPerThread+n)*sG1);\n            opPromises.push(batchSubstractThread(subBuff1, subBuff2));\n        }\n\n\n        const result = await Promise.all(opPromises);\n\n        const fullBuffOut = new Uint8Array(nPoints*sG);\n        let p =0;\n        for (let i=0; i<result.length; i++) {\n            fullBuffOut.set(result[i][0], p);\n            p+=result[i][0].byteLength;\n        }\n\n        return fullBuffOut;\n    }\n\n\n    async function batchSubstractThread(buff1, buff2) {\n        const sG1 = curve.G1.F.n8*2;\n        const sGmid = curve.G1.F.n8*3;\n        const nPoints = buff1.byteLength/sG1;\n        const task = [];\n        task.push({cmd: \"ALLOCSET\", var: 0, buff: buff1});\n        task.push({cmd: \"ALLOCSET\", var: 1, buff: buff2});\n        task.push({cmd: \"ALLOC\", var: 2, len: nPoints*sGmid});\n        for (let i=0; i<nPoints; i++) {\n            task.push({\n                cmd: \"CALL\",\n                fnName: \"g1m_subAffine\",\n                params: [\n                    {var: 0, offset: i*sG1},\n                    {var: 1, offset: i*sG1},\n                    {var: 2, offset: i*sGmid},\n                ]\n            });\n        }\n        task.push({cmd: \"CALL\", fnName: \"g1m_batchToAffine\", params: [\n            {var: 2},\n            {val: nPoints},\n            {var: 2},\n        ]});\n        task.push({cmd: \"GET\", out: 0, var: 2, len: nPoints*sG1});\n\n        const res = await curve.tm.queueAction(task);\n\n        return res;\n    }\n\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nasync function phase2verifyFromR1cs(r1csFileName, pTauFileName, zkeyFileName, logger) {\n\n    // const initFileName = \"~\" + zkeyFileName + \".init\";\n    const initFileName = {type: \"bigMem\"};\n    await newZKey(r1csFileName, pTauFileName, initFileName, logger);\n\n    return await phase2verifyFromInit(initFileName, pTauFileName, zkeyFileName, logger);\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nasync function phase2contribute(zkeyNameOld, zkeyNameNew, name, entropy, logger) {\n    await blake2bWasm.exports.ready();\n\n    const {fd: fdOld, sections: sections} = await readBinFile(zkeyNameOld, \"zkey\", 2);\n    const zkey = await readHeader$1(fdOld, sections);\n    if (zkey.protocol != \"groth16\") {\n        throw new Error(\"zkey file is not groth16\");\n    }\n\n    const curve = await getCurveFromQ(zkey.q);\n\n    const mpcParams = await readMPCParams(fdOld, curve, sections);\n\n    const fdNew = await createBinFile(zkeyNameNew, \"zkey\", 1, 10);\n\n\n    const rng = await getRandomRng(entropy);\n\n    const transcriptHasher = blake2bWasm.exports(64);\n    transcriptHasher.update(mpcParams.csHash);\n    for (let i=0; i<mpcParams.contributions.length; i++) {\n        hashPubKey(transcriptHasher, curve, mpcParams.contributions[i]);\n    }\n\n    const curContribution = {};\n    curContribution.delta = {};\n    curContribution.delta.prvKey = curve.Fr.fromRng(rng);\n    curContribution.delta.g1_s = curve.G1.toAffine(curve.G1.fromRng(rng));\n    curContribution.delta.g1_sx = curve.G1.toAffine(curve.G1.timesFr(curContribution.delta.g1_s, curContribution.delta.prvKey));\n    hashG1(transcriptHasher, curve, curContribution.delta.g1_s);\n    hashG1(transcriptHasher, curve, curContribution.delta.g1_sx);\n    curContribution.transcript = transcriptHasher.digest();\n    curContribution.delta.g2_sp = hashToG2(curve, curContribution.transcript);\n    curContribution.delta.g2_spx = curve.G2.toAffine(curve.G2.timesFr(curContribution.delta.g2_sp, curContribution.delta.prvKey));\n\n    zkey.vk_delta_1 = curve.G1.timesFr(zkey.vk_delta_1, curContribution.delta.prvKey);\n    zkey.vk_delta_2 = curve.G2.timesFr(zkey.vk_delta_2, curContribution.delta.prvKey);\n\n    curContribution.deltaAfter = zkey.vk_delta_1;\n\n    curContribution.type = 0;\n    if (name) curContribution.name = name;\n\n    mpcParams.contributions.push(curContribution);\n\n    await writeHeader(fdNew, zkey);\n\n    // IC\n    await copySection(fdOld, sections, fdNew, 3);\n\n    // Coeffs (Keep original)\n    await copySection(fdOld, sections, fdNew, 4);\n\n    // A Section\n    await copySection(fdOld, sections, fdNew, 5);\n\n    // B1 Section\n    await copySection(fdOld, sections, fdNew, 6);\n\n    // B2 Section\n    await copySection(fdOld, sections, fdNew, 7);\n\n    const invDelta = curve.Fr.inv(curContribution.delta.prvKey);\n    await applyKeyToSection(fdOld, sections, fdNew, 8, curve, \"G1\", invDelta, curve.Fr.e(1), \"L Section\", logger);\n    await applyKeyToSection(fdOld, sections, fdNew, 9, curve, \"G1\", invDelta, curve.Fr.e(1), \"H Section\", logger);\n\n    await writeMPCParams(fdNew, curve, mpcParams);\n\n    await fdOld.close();\n    await fdNew.close();\n\n    const contributionHasher = blake2bWasm.exports(64);\n    hashPubKey(contributionHasher, curve, curContribution);\n\n    const contribuionHash = contributionHasher.digest();\n\n    if (logger) logger.info(formatHash(mpcParams.csHash, \"Circuit Hash: \"));\n    if (logger) logger.info(formatHash(contribuionHash, \"Contribution Hash: \"));\n\n    return contribuionHash;\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\nasync function beacon(zkeyNameOld, zkeyNameNew, name, beaconHashStr, numIterationsExp, logger) {\n    await blake2bWasm.exports.ready();\n\n    const beaconHash = hex2ByteArray(beaconHashStr);\n    if (   (beaconHash.byteLength == 0)\n        || (beaconHash.byteLength*2 !=beaconHashStr.length))\n    {\n        if (logger) logger.error(\"Invalid Beacon Hash. (It must be a valid hexadecimal sequence)\");\n        return false;\n    }\n    if (beaconHash.length>=256) {\n        if (logger) logger.error(\"Maximum lenght of beacon hash is 255 bytes\");\n        return false;\n    }\n\n    numIterationsExp = parseInt(numIterationsExp);\n    if ((numIterationsExp<10)||(numIterationsExp>63)) {\n        if (logger) logger.error(\"Invalid numIterationsExp. (Must be between 10 and 63)\");\n        return false;\n    }\n\n\n    const {fd: fdOld, sections: sections} = await readBinFile(zkeyNameOld, \"zkey\", 2);\n    const zkey = await readHeader$1(fdOld, sections);\n\n    if (zkey.protocol != \"groth16\") {\n        throw new Error(\"zkey file is not groth16\");\n    }\n\n\n    const curve = await getCurveFromQ(zkey.q);\n\n    const mpcParams = await readMPCParams(fdOld, curve, sections);\n\n    const fdNew = await createBinFile(zkeyNameNew, \"zkey\", 1, 10);\n\n    const rng = await rngFromBeaconParams(beaconHash, numIterationsExp);\n\n    const transcriptHasher = blake2bWasm.exports(64);\n    transcriptHasher.update(mpcParams.csHash);\n    for (let i=0; i<mpcParams.contributions.length; i++) {\n        hashPubKey(transcriptHasher, curve, mpcParams.contributions[i]);\n    }\n\n    const curContribution = {};\n    curContribution.delta = {};\n    curContribution.delta.prvKey = curve.Fr.fromRng(rng);\n    curContribution.delta.g1_s = curve.G1.toAffine(curve.G1.fromRng(rng));\n    curContribution.delta.g1_sx = curve.G1.toAffine(curve.G1.timesFr(curContribution.delta.g1_s, curContribution.delta.prvKey));\n    hashG1(transcriptHasher, curve, curContribution.delta.g1_s);\n    hashG1(transcriptHasher, curve, curContribution.delta.g1_sx);\n    curContribution.transcript = transcriptHasher.digest();\n    curContribution.delta.g2_sp = hashToG2(curve, curContribution.transcript);\n    curContribution.delta.g2_spx = curve.G2.toAffine(curve.G2.timesFr(curContribution.delta.g2_sp, curContribution.delta.prvKey));\n\n    zkey.vk_delta_1 = curve.G1.timesFr(zkey.vk_delta_1, curContribution.delta.prvKey);\n    zkey.vk_delta_2 = curve.G2.timesFr(zkey.vk_delta_2, curContribution.delta.prvKey);\n\n    curContribution.deltaAfter = zkey.vk_delta_1;\n\n    curContribution.type = 1;\n    curContribution.numIterationsExp = numIterationsExp;\n    curContribution.beaconHash = beaconHash;\n\n    if (name) curContribution.name = name;\n\n    mpcParams.contributions.push(curContribution);\n\n    await writeHeader(fdNew, zkey);\n\n    // IC\n    await copySection(fdOld, sections, fdNew, 3);\n\n    // Coeffs (Keep original)\n    await copySection(fdOld, sections, fdNew, 4);\n\n    // A Section\n    await copySection(fdOld, sections, fdNew, 5);\n\n    // B1 Section\n    await copySection(fdOld, sections, fdNew, 6);\n\n    // B2 Section\n    await copySection(fdOld, sections, fdNew, 7);\n\n    const invDelta = curve.Fr.inv(curContribution.delta.prvKey);\n    await applyKeyToSection(fdOld, sections, fdNew, 8, curve, \"G1\", invDelta, curve.Fr.e(1), \"L Section\", logger);\n    await applyKeyToSection(fdOld, sections, fdNew, 9, curve, \"G1\", invDelta, curve.Fr.e(1), \"H Section\", logger);\n\n    await writeMPCParams(fdNew, curve, mpcParams);\n\n    await fdOld.close();\n    await fdNew.close();\n\n    const contributionHasher = blake2bWasm.exports(64);\n    hashPubKey(contributionHasher, curve, curContribution);\n\n    const contribuionHash = contributionHasher.digest();\n\n    if (logger) logger.info(formatHash(contribuionHash, \"Contribution Hash: \"));\n\n    return contribuionHash;\n}\n\nasync function zkeyExportJson(zkeyFileName) {\n\n    const zKey = await readZKey(zkeyFileName, true);\n    delete zKey.curve;\n    delete zKey.F;\n\n    return utils.stringifyBigInts(zKey);\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nasync function bellmanContribute(curve, challengeFilename, responesFileName, entropy, logger) {\n    await blake2bWasm.exports.ready();\n\n    const rng = await getRandomRng(entropy);\n\n    const delta = curve.Fr.fromRng(rng);\n    const invDelta = curve.Fr.inv(delta);\n\n    const sG1 = curve.G1.F.n8*2;\n    const sG2 = curve.G2.F.n8*2;\n\n    const fdFrom = await readExisting(challengeFilename);\n    const fdTo = await createOverride(responesFileName);\n\n\n    await copy(sG1); // alpha1\n    await copy(sG1); // beta1\n    await copy(sG2); // beta2\n    await copy(sG2); // gamma2\n    const oldDelta1 = await readG1();\n    const delta1 = curve.G1.timesFr(oldDelta1, delta);\n    await writeG1(delta1);\n    const oldDelta2 = await readG2();\n    const delta2 = curve.G2.timesFr(oldDelta2, delta);\n    await writeG2(delta2);\n\n    // IC\n    const nIC = await fdFrom.readUBE32();\n    await fdTo.writeUBE32(nIC);\n    await copy(nIC*sG1);\n\n    // H\n    const nH = await fdFrom.readUBE32();\n    await fdTo.writeUBE32(nH);\n    await applyKeyToChallengeSection(fdFrom, fdTo, null, curve, \"G1\", nH, invDelta, curve.Fr.e(1), \"UNCOMPRESSED\", \"H\", logger);\n\n    // L\n    const nL = await fdFrom.readUBE32();\n    await fdTo.writeUBE32(nL);\n    await applyKeyToChallengeSection(fdFrom, fdTo, null, curve, \"G1\", nL, invDelta, curve.Fr.e(1), \"UNCOMPRESSED\", \"L\", logger);\n\n    // A\n    const nA = await fdFrom.readUBE32();\n    await fdTo.writeUBE32(nA);\n    await copy(nA*sG1);\n\n    // B1\n    const nB1 = await fdFrom.readUBE32();\n    await fdTo.writeUBE32(nB1);\n    await copy(nB1*sG1);\n\n    // B2\n    const nB2 = await fdFrom.readUBE32();\n    await fdTo.writeUBE32(nB2);\n    await copy(nB2*sG2);\n\n\n    //////////\n    /// Read contributions\n    //////////\n    const transcriptHasher = blake2bWasm.exports(64);\n\n    const mpcParams = {};\n    // csHash\n    mpcParams.csHash =  await fdFrom.read(64);\n    transcriptHasher.update(mpcParams.csHash);\n\n    const nConttributions = await fdFrom.readUBE32();\n    mpcParams.contributions = [];\n    for (let i=0; i<nConttributions; i++) {\n        const c = { delta:{} };\n        c.deltaAfter = await readG1();\n        c.delta.g1_s = await readG1();\n        c.delta.g1_sx = await readG1();\n        c.delta.g2_spx = await readG2();\n        c.transcript = await fdFrom.read(64);\n        mpcParams.contributions.push(c);\n        hashPubKey(transcriptHasher, curve, c);\n    }\n\n    const curContribution = {};\n    curContribution.delta = {};\n    curContribution.delta.prvKey = delta;\n    curContribution.delta.g1_s = curve.G1.toAffine(curve.G1.fromRng(rng));\n    curContribution.delta.g1_sx = curve.G1.toAffine(curve.G1.timesFr(curContribution.delta.g1_s, delta));\n    hashG1(transcriptHasher, curve, curContribution.delta.g1_s);\n    hashG1(transcriptHasher, curve, curContribution.delta.g1_sx);\n    curContribution.transcript = transcriptHasher.digest();\n    curContribution.delta.g2_sp = hashToG2(curve, curContribution.transcript);\n    curContribution.delta.g2_spx = curve.G2.toAffine(curve.G2.timesFr(curContribution.delta.g2_sp, delta));\n    curContribution.deltaAfter = delta1;\n    curContribution.type = 0;\n    mpcParams.contributions.push(curContribution);\n\n\n    //////////\n    /// Write COntribution\n    //////////\n\n    await fdTo.write(mpcParams.csHash);\n    await fdTo.writeUBE32(mpcParams.contributions.length);\n\n    for (let i=0; i<mpcParams.contributions.length; i++) {\n        const c = mpcParams.contributions[i];\n        await writeG1(c.deltaAfter);\n        await writeG1(c.delta.g1_s);\n        await writeG1(c.delta.g1_sx);\n        await writeG2(c.delta.g2_spx);\n        await fdTo.write(c.transcript);\n    }\n\n    const contributionHasher = blake2bWasm.exports(64);\n    hashPubKey(contributionHasher, curve, curContribution);\n\n    const contributionHash = contributionHasher.digest();\n\n    if (logger) logger.info(formatHash(contributionHash, \"Contribution Hash: \"));\n\n    await fdTo.close();\n    await fdFrom.close();\n\n    return contributionHash;\n\n    async function copy(nBytes) {\n        const CHUNK_SIZE = fdFrom.pageSize*2;\n        for (let i=0; i<nBytes; i+= CHUNK_SIZE) {\n            const n = Math.min(nBytes -i, CHUNK_SIZE);\n            const buff = await fdFrom.read(n);\n            await fdTo.write(buff);\n        }\n    }\n\n    async function readG1() {\n        const buff = await fdFrom.read(curve.G1.F.n8*2);\n        return curve.G1.fromRprUncompressed(buff, 0);\n    }\n\n    async function readG2() {\n        const buff = await fdFrom.read(curve.G2.F.n8*2);\n        return curve.G2.fromRprUncompressed(buff, 0);\n    }\n\n    async function writeG1(P) {\n        const buff = new Uint8Array(sG1);\n        curve.G1.toRprUncompressed(buff, 0, P);\n        await fdTo.write(buff);\n    }\n\n    async function writeG2(P) {\n        const buff = new Uint8Array(sG2);\n        curve.G2.toRprUncompressed(buff, 0, P);\n        await fdTo.write(buff);\n    }\n\n\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nconst {stringifyBigInts: stringifyBigInts$3} = utils;\n\nasync function zkeyExportVerificationKey(zkeyName, logger) {\n    if (logger) logger.info(\"EXPORT VERIFICATION KEY STARTED\");\n\n    const {fd, sections} = await readBinFile(zkeyName, \"zkey\", 2);\n    const zkey = await readHeader$1(fd, sections);\n\n    if (logger) logger.info(\"> Detected protocol: \" + zkey.protocol);\n\n    let res;\n    if (zkey.protocol === \"groth16\") {\n        res = await groth16Vk(zkey, fd, sections);\n    } else if (zkey.protocol === \"plonk\") {\n        res = await plonkVk(zkey);\n    } else if (zkey.protocolId && zkey.protocolId === FFLONK_PROTOCOL_ID) {\n        res = await exportFFlonkVk(zkey);\n    } else {\n        throw new Error(\"zkey file protocol unrecognized\");\n    }\n\n    await fd.close();\n\n    if (logger) logger.info(\"EXPORT VERIFICATION KEY FINISHED\");\n\n    return res;\n}\n\n\nasync function groth16Vk(zkey, fd, sections) {\n    const curve = await getCurveFromQ(zkey.q);\n    const sG1 = curve.G1.F.n8 * 2;\n\n    const alphaBeta = await curve.pairing(zkey.vk_alpha_1, zkey.vk_beta_2);\n\n    let vKey = {\n        protocol: zkey.protocol,\n        curve: curve.name,\n        nPublic: zkey.nPublic,\n\n        vk_alpha_1: curve.G1.toObject(zkey.vk_alpha_1),\n\n        vk_beta_2: curve.G2.toObject(zkey.vk_beta_2),\n        vk_gamma_2: curve.G2.toObject(zkey.vk_gamma_2),\n        vk_delta_2: curve.G2.toObject(zkey.vk_delta_2),\n\n        vk_alphabeta_12: curve.Gt.toObject(alphaBeta)\n    };\n\n    // Read IC Section\n    ///////////\n    await startReadUniqueSection(fd, sections, 3);\n    vKey.IC = [];\n    for (let i = 0; i <= zkey.nPublic; i++) {\n        const buff = await fd.read(sG1);\n        const P = curve.G1.toObject(buff);\n        vKey.IC.push(P);\n    }\n    await endReadSection(fd);\n\n    vKey = stringifyBigInts$3(vKey);\n\n    return vKey;\n}\n\n\nasync function plonkVk(zkey) {\n    const curve = await getCurveFromQ(zkey.q);\n\n    let vKey = {\n        protocol: zkey.protocol,\n        curve: curve.name,\n        nPublic: zkey.nPublic,\n        power: zkey.power,\n\n        k1: curve.Fr.toObject(zkey.k1),\n        k2: curve.Fr.toObject(zkey.k2),\n\n        Qm: curve.G1.toObject(zkey.Qm),\n        Ql: curve.G1.toObject(zkey.Ql),\n        Qr: curve.G1.toObject(zkey.Qr),\n        Qo: curve.G1.toObject(zkey.Qo),\n        Qc: curve.G1.toObject(zkey.Qc),\n        S1: curve.G1.toObject(zkey.S1),\n        S2: curve.G1.toObject(zkey.S2),\n        S3: curve.G1.toObject(zkey.S3),\n\n        X_2: curve.G2.toObject(zkey.X_2),\n\n        w: curve.Fr.toObject(curve.Fr.w[zkey.power])\n    };\n\n    vKey = stringifyBigInts$3(vKey);\n\n    return vKey;\n}\n\nasync function exportFFlonkVk(zkey, logger) {\n    const curve = await getCurveFromQ(zkey.q);\n\n    let vKey = {\n        protocol: zkey.protocol,\n        curve: curve.name,\n        nPublic: zkey.nPublic,\n        power: zkey.power,\n\n        k1: curve.Fr.toObject(zkey.k1),\n        k2: curve.Fr.toObject(zkey.k2),\n\n        w: curve.Fr.toObject(curve.Fr.w[zkey.power]),\n        //wW: curve.Fr.toObject(curve.Fr.w[zkey.power + 1]),\n        w3: curve.Fr.toObject(zkey.w3),\n        w4: curve.Fr.toObject(zkey.w4),\n        w8: curve.Fr.toObject(zkey.w8),\n        wr: curve.Fr.toObject(zkey.wr),\n\n        X_2: curve.G2.toObject(zkey.X_2),\n\n        C0: curve.G1.toObject(zkey.C0),\n    };\n\n    return stringifyBigInts$3(vKey);\n}\n\nvar ejs = {};\n\n/*\n    Copyright 2021 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nconst {unstringifyBigInts: unstringifyBigInts$6, stringifyBigInts: stringifyBigInts$2} = utils;\n\nasync function fflonkExportSolidityVerifier(vk, templates, logger) {\n    if (logger) logger.info(\"FFLONK EXPORT SOLIDITY VERIFIER STARTED\");\n\n    const curve = await getCurveFromName(vk.curve);\n\n    // Precompute w3_2, w4_2 and w4_3\n    let w3 = fromVkey(vk.w3);\n    vk.w3_2 = toVkey(curve.Fr.square(w3));\n\n    let w4 = fromVkey(vk.w4);\n    vk.w4_2 = toVkey(curve.Fr.square(w4));\n    vk.w4_3 = toVkey(curve.Fr.mul(curve.Fr.square(w4), w4));\n\n    let w8 = fromVkey(vk.w8);\n    let acc = curve.Fr.one;\n\n    for (let i = 1; i < 8; i++) {\n        acc = curve.Fr.mul(acc, w8);\n        vk[\"w8_\" + i] = toVkey(acc);\n    }\n\n    let template = templates[vk.protocol];\n\n    if (logger) logger.info(\"FFLONK EXPORT SOLIDITY VERIFIER FINISHED\");\n\n    return ejs.render(template, vk);\n\n    function fromVkey(str) {\n        const val = unstringifyBigInts$6(str);\n        return curve.Fr.fromObject(val);\n    }\n\n    function toVkey(val) {\n        const str = curve.Fr.toObject(val);\n        return stringifyBigInts$2(str);\n    }\n}\n\n// Not ready yet\n// module.exports.generateVerifier_kimleeoh = generateVerifier_kimleeoh;\n\nasync function exportSolidityVerifier(zKeyName, templates, logger) {\n\n    const verificationKey = await zkeyExportVerificationKey(zKeyName, logger);\n\n    if (\"fflonk\" === verificationKey.protocol) {\n        return fflonkExportSolidityVerifier(verificationKey, templates, logger);\n    }\n\n    let template = templates[verificationKey.protocol];\n\n    return ejs.render(template, verificationKey);\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nvar zkey = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    newZKey: newZKey,\n    exportBellman: phase2exportMPCParams,\n    importBellman: phase2importMPCParams,\n    verifyFromR1cs: phase2verifyFromR1cs,\n    verifyFromInit: phase2verifyFromInit,\n    contribute: phase2contribute,\n    beacon: beacon,\n    exportJson: zkeyExportJson,\n    bellmanContribute: bellmanContribute,\n    exportVerificationKey: zkeyExportVerificationKey,\n    exportSolidityVerifier: exportSolidityVerifier\n});\n\n/*\n    Copyright 2021 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\nasync function plonkSetup(r1csName, ptauName, zkeyName, logger) {\n\n    if (globalThis.gc) {globalThis.gc();}\n\n    await blake2bWasm.exports.ready();\n\n    const {fd: fdPTau, sections: sectionsPTau} = await readBinFile(ptauName, \"ptau\", 1);\n    const {curve, power} = await readPTauHeader(fdPTau, sectionsPTau);\n    const {fd: fdR1cs, sections: sectionsR1cs} = await readBinFile(r1csName, \"r1cs\", 1);\n\n    const r1cs = await readR1csFd(fdR1cs, sectionsR1cs, {loadConstraints: true, loadCustomGates: true});\n\n    const sG1 = curve.G1.F.n8*2;\n    const G1 = curve.G1;\n    const sG2 = curve.G2.F.n8*2;\n    const Fr = curve.Fr;\n    const n8r = curve.Fr.n8;\n\n    if (logger) logger.info(\"Reading r1cs\");\n    await readSection(fdR1cs, sectionsR1cs, 2);\n\n    const plonkConstraints = new BigArray$1();\n    const plonkAdditions = new BigArray$1();\n    let plonkNVars = r1cs.nVars;\n\n    const nPublic = r1cs.nOutputs + r1cs.nPubInputs;\n\n    await processConstraints(curve.Fr, r1cs, logger);\n\n    if (globalThis.gc) {globalThis.gc();}\n\n    const fdZKey = await createBinFile(zkeyName, \"zkey\", 1, 14, 1<<22, 1<<24);\n\n\n    if (r1cs.prime != curve.r) {\n        if (logger) logger.error(\"r1cs curve does not match powers of tau ceremony curve\");\n        return -1;\n    }\n\n    let cirPower = log2(plonkConstraints.length -1) +1;\n    if (cirPower < 3) cirPower = 3;   // As the t polinomal is n+5 whe need at least a power of 4\n    const domainSize = 2 ** cirPower;\n\n    if (logger) logger.info(\"Plonk constraints: \" + plonkConstraints.length);\n    if (cirPower > power) {\n        if (logger) logger.error(`circuit too big for this power of tau ceremony. ${plonkConstraints.length} > 2**${power}`);\n        return -1;\n    }\n\n    if (!sectionsPTau[12]) {\n        if (logger) logger.error(\"Powers of tau is not prepared.\");\n        return -1;\n    }\n\n\n    const LPoints = new BigBuffer(domainSize*sG1);\n    const o = sectionsPTau[12][0].p + ((2 ** (cirPower)) -1)*sG1;\n    await fdPTau.readToBuffer(LPoints, 0, domainSize*sG1, o);\n\n    const [k1, k2] = getK1K2();\n\n    const vk = {};\n\n\n    await writeAdditions(3, \"Additions\");\n    if (globalThis.gc) {globalThis.gc();}\n    await writeWitnessMap(4, 0, \"Amap\");\n    if (globalThis.gc) {globalThis.gc();}\n    await writeWitnessMap(5, 1, \"Bmap\");\n    if (globalThis.gc) {globalThis.gc();}\n    await writeWitnessMap(6, 2, \"Cmap\");\n    if (globalThis.gc) {globalThis.gc();}\n    await writeQMap(7, 3, \"Qm\");\n    if (globalThis.gc) {globalThis.gc();}\n    await writeQMap(8, 4, \"Ql\");\n    if (globalThis.gc) {globalThis.gc();}\n    await writeQMap(9, 5, \"Qr\");\n    if (globalThis.gc) {globalThis.gc();}\n    await writeQMap(10, 6, \"Qo\");\n    if (globalThis.gc) {globalThis.gc();}\n    await writeQMap(11, 7, \"Qc\");\n    if (globalThis.gc) {globalThis.gc();}\n    await writeSigma(12, \"sigma\");\n    if (globalThis.gc) {globalThis.gc();}\n    await writeLs(13, \"lagrange polynomials\");\n    if (globalThis.gc) {globalThis.gc();}\n\n    // Write PTau points\n    ////////////\n\n    await startWriteSection(fdZKey, 14);\n    const buffOut = new BigBuffer((domainSize+6)*sG1);\n    await fdPTau.readToBuffer(buffOut, 0, (domainSize+6)*sG1, sectionsPTau[2][0].p);\n    await fdZKey.write(buffOut);\n    await endWriteSection(fdZKey);\n    if (globalThis.gc) {globalThis.gc();}\n\n\n    await writeHeaders();\n\n    await fdZKey.close();\n    await fdR1cs.close();\n    await fdPTau.close();\n\n    if (logger) logger.info(\"Setup Finished\");\n\n    return ;\n\n    async function processConstraints(Fr, r1cs, logger) {\n\n        function normalize(linearComb) {\n            const ss = Object.keys(linearComb);\n            for (let i = 0; i < ss.length; i++) {\n                if (linearComb[ss[i]] == 0n) delete linearComb[ss[i]];\n            }\n        }\n\n        function join(linearComb1, k, linearComb2) {\n            const res = {};\n\n            for (let s in linearComb1) {\n                if (typeof res[s] == \"undefined\") {\n                    res[s] = Fr.mul(k, linearComb1[s]);\n                } else {\n                    res[s] = Fr.add(res[s], Fr.mul(k, linearComb1[s]));\n                }\n            }\n\n            for (let s in linearComb2) {\n                if (typeof res[s] == \"undefined\") {\n                    res[s] = linearComb2[s];\n                } else {\n                    res[s] = Fr.add(res[s], linearComb2[s]);\n                }\n            }\n            normalize(res);\n            return res;\n        }\n\n        function reduceCoefs(linearComb, maxC) {\n            const res = {\n                k: Fr.zero,\n                s: [],\n                coefs: []\n            };\n            const cs = [];\n\n            for (let s in linearComb) {\n                if (s == 0) {\n                    res.k = Fr.add(res.k, linearComb[s]);\n                } else if (linearComb[s] != 0n) {\n                    cs.push([Number(s), linearComb[s]]);\n                }\n            }\n            while (cs.length > maxC) {\n                const c1 = cs.shift();\n                const c2 = cs.shift();\n\n                const sl = c1[0];\n                const sr = c2[0];\n                const so = plonkNVars++;\n                const qm = Fr.zero;\n                const ql = Fr.neg(c1[1]);\n                const qr = Fr.neg(c2[1]);\n                const qo = Fr.one;\n                const qc = Fr.zero;\n\n                plonkConstraints.push([sl, sr, so, qm, ql, qr, qo, qc]);\n\n                plonkAdditions.push([sl, sr, c1[1], c2[1]]);\n\n                cs.push([so, Fr.one]);\n            }\n            for (let i = 0; i < cs.length; i++) {\n                res.s[i] = cs[i][0];\n                res.coefs[i] = cs[i][1];\n            }\n            while (res.coefs.length < maxC) {\n                res.s.push(0);\n                res.coefs.push(Fr.zero);\n            }\n            return res;\n        }\n\n        function addConstraintSum(lc) {\n            const C = reduceCoefs(lc, 3);\n            const sl = C.s[0];\n            const sr = C.s[1];\n            const so = C.s[2];\n            const qm = Fr.zero;\n            const ql = C.coefs[0];\n            const qr = C.coefs[1];\n            const qo = C.coefs[2];\n            const qc = C.k;\n            plonkConstraints.push([sl, sr, so, qm, ql, qr, qo, qc]);\n        }\n\n        function addConstraintMul(lcA, lcB, lcC) {\n            const A = reduceCoefs(lcA, 1);\n            const B = reduceCoefs(lcB, 1);\n            const C = reduceCoefs(lcC, 1);\n\n\n            const sl = A.s[0];\n            const sr = B.s[0];\n            const so = C.s[0];\n            const qm = Fr.mul(A.coefs[0], B.coefs[0]);\n            const ql = Fr.mul(A.coefs[0], B.k);\n            const qr = Fr.mul(A.k, B.coefs[0]);\n            const qo = Fr.neg(C.coefs[0]);\n            const qc = Fr.sub(Fr.mul(A.k, B.k), C.k);\n            plonkConstraints.push([sl, sr, so, qm, ql, qr, qo, qc]);\n        }\n\n        function getLinearCombinationType(lc) {\n            let k = Fr.zero;\n            let n = 0;\n            const ss = Object.keys(lc);\n            for (let i = 0; i < ss.length; i++) {\n                if (lc[ss[i]] == 0n) {\n                    delete lc[ss[i]];\n                } else if (ss[i] == 0) {\n                    k = Fr.add(k, lc[ss[i]]);\n                } else {\n                    n++;\n                }\n            }\n            if (n > 0) return n.toString();\n            if (k != Fr.zero) return \"k\";\n            return \"0\";\n        }\n\n        function process(lcA, lcB, lcC) {\n            const lctA = getLinearCombinationType(lcA);\n            const lctB = getLinearCombinationType(lcB);\n            if ((lctA === \"0\") || (lctB === \"0\")) {\n                normalize(lcC);\n                addConstraintSum(lcC);\n            } else if (lctA === \"k\") {\n                const lcCC = join(lcB, lcA[0], lcC);\n                addConstraintSum(lcCC);\n            } else if (lctB === \"k\") {\n                const lcCC = join(lcA, lcB[0], lcC);\n                addConstraintSum(lcCC);\n            } else {\n                addConstraintMul(lcA, lcB, lcC);\n            }\n        }\n\n        for (let s = 1; s <= nPublic; s++) {\n            const sl = s;\n            const sr = 0;\n            const so = 0;\n            const qm = Fr.zero;\n            const ql = Fr.one;\n            const qr = Fr.zero;\n            const qo = Fr.zero;\n            const qc = Fr.zero;\n\n            plonkConstraints.push([sl, sr, so, qm, ql, qr, qo, qc]);\n        }\n\n        for (let c = 0; c < r1cs.constraints.length; c++) {\n            if ((logger) && (c % 10000 === 0)) logger.debug(`processing constraints: ${c}/${r1cs.nConstraints}`);\n            process(...r1cs.constraints[c]);\n        }\n    }\n\n    async function writeWitnessMap(sectionNum, posConstraint, name) {\n        await startWriteSection(fdZKey, sectionNum);\n        for (let i=0; i<plonkConstraints.length; i++) {\n            await fdZKey.writeULE32(plonkConstraints[i][posConstraint]);\n            if ((logger)&&(i%1000000 == 0)) logger.debug(`writing ${name}: ${i}/${plonkConstraints.length}`);\n        }\n        await endWriteSection(fdZKey);\n    }\n\n    async function writeQMap(sectionNum, posConstraint, name) {\n        let Q = new BigBuffer(domainSize*n8r);\n        for (let i=0; i<plonkConstraints.length; i++) {\n            Q.set(plonkConstraints[i][posConstraint], i*n8r);\n            if ((logger)&&(i%1000000 == 0)) logger.debug(`writing ${name}: ${i}/${plonkConstraints.length}`);\n        }\n        await startWriteSection(fdZKey, sectionNum);\n        await writeP4(Q);\n        await endWriteSection(fdZKey);\n        Q = await Fr.batchFromMontgomery(Q);\n        vk[name]= await curve.G1.multiExpAffine(LPoints, Q, logger, \"multiexp \"+name);\n    }\n\n    async function writeP4(buff) {\n        const q = await Fr.ifft(buff);\n        const q4 = new BigBuffer(domainSize*n8r*4);\n        q4.set(q, 0);\n        const Q4 = await Fr.fft(q4);\n        await fdZKey.write(q);\n        await fdZKey.write(Q4);\n    }\n\n    async function writeAdditions(sectionNum, name) {\n        await startWriteSection(fdZKey, sectionNum);\n        const buffOut = new Uint8Array((2*4+2*n8r));\n        const buffOutV = new DataView(buffOut.buffer);\n        for (let i=0; i<plonkAdditions.length; i++) {\n            const addition=plonkAdditions[i];\n            let o=0;\n            buffOutV.setUint32(o, addition[0], true); o+=4;\n            buffOutV.setUint32(o, addition[1], true); o+=4;\n            // The value is storen in  Montgomery. stored = v*R\n            // so when montgomery multiplicated by the witness  it result = v*R*w/R = v*w \n            buffOut.set(addition[2], o); o+= n8r;\n            buffOut.set(addition[3], o); o+= n8r;\n            await fdZKey.write(buffOut);\n            if ((logger)&&(i%1000000 == 0)) logger.debug(`writing ${name}: ${i}/${plonkAdditions.length}`);\n        }\n        await endWriteSection(fdZKey);\n    }\n\n    async function writeSigma(sectionNum, name) {\n        const sigma = new BigBuffer(n8r*domainSize*3);\n        const lastAparence =  new BigArray$1(plonkNVars);\n        const firstPos = new BigArray$1(plonkNVars);\n        let w = Fr.one;\n        for (let i=0; i<domainSize;i++) {\n            if (i<plonkConstraints.length) {\n                buildSigma(plonkConstraints[i][0], i);\n                buildSigma(plonkConstraints[i][1], domainSize + i);\n                buildSigma(plonkConstraints[i][2], domainSize*2 + i);\n            } else {\n                buildSigma(0, i);\n                buildSigma(0, domainSize + i);\n                buildSigma(0, domainSize*2 + i);\n            }\n            w = Fr.mul(w, Fr.w[cirPower]);\n            if ((logger)&&(i%1000000 == 0)) logger.debug(`writing ${name} phase1: ${i}/${plonkConstraints.length}`);\n        }\n        for (let s=0; s<plonkNVars; s++) {\n            if (typeof firstPos[s] !== \"undefined\") {\n                sigma.set(lastAparence[s], firstPos[s]*n8r);\n            } else {\n                // throw new Error(\"Variable not used\");\n                console.log(\"Variable not used\");\n            }\n            if ((logger)&&(s%1000000 == 0)) logger.debug(`writing ${name} phase2: ${s}/${plonkNVars}`);\n        }\n\n        if (globalThis.gc) {globalThis.gc();}\n        await startWriteSection(fdZKey, sectionNum);\n        let S1 = sigma.slice(0, domainSize*n8r);\n        await writeP4(S1);\n        if (globalThis.gc) {globalThis.gc();}\n        let S2 = sigma.slice(domainSize*n8r, domainSize*n8r*2);\n        await writeP4(S2);\n        if (globalThis.gc) {globalThis.gc();}\n        let S3 = sigma.slice(domainSize*n8r*2, domainSize*n8r*3);\n        await writeP4(S3);\n        if (globalThis.gc) {globalThis.gc();}\n        await endWriteSection(fdZKey);\n\n        S1 = await Fr.batchFromMontgomery(S1);\n        S2 = await Fr.batchFromMontgomery(S2);\n        S3 = await Fr.batchFromMontgomery(S3);\n\n        vk.S1= await curve.G1.multiExpAffine(LPoints, S1, logger, \"multiexp S1\");\n        if (globalThis.gc) {globalThis.gc();}\n        vk.S2= await curve.G1.multiExpAffine(LPoints, S2, logger, \"multiexp S2\");\n        if (globalThis.gc) {globalThis.gc();}\n        vk.S3= await curve.G1.multiExpAffine(LPoints, S3, logger, \"multiexp S3\");\n        if (globalThis.gc) {globalThis.gc();}\n\n        function buildSigma(s, p) {\n            if (typeof lastAparence[s] === \"undefined\") {\n                firstPos[s] = p;\n            } else {\n                sigma.set(lastAparence[s], p*n8r);\n            }\n            let v;\n            if (p<domainSize) {\n                v = w;\n            } else if (p<2*domainSize) {\n                v = Fr.mul(w, k1);\n            } else {\n                v = Fr.mul(w, k2);\n            }\n            lastAparence[s]=v;\n        }\n    }\n\n    async function writeLs(sectionNum, name) {\n        await startWriteSection(fdZKey, sectionNum);\n        const l=Math.max(nPublic, 1);\n        for (let i=0; i<l; i++) {\n            let buff = new BigBuffer(domainSize*n8r);\n            buff.set(Fr.one, i*n8r);\n            await writeP4(buff);\n            if (logger) logger.debug(`writing ${name} ${i}/${l}`);\n        }\n        await endWriteSection(fdZKey);\n    }\n\n    async function writeHeaders() {\n\n        // Write the header\n        ///////////\n        await startWriteSection(fdZKey, 1);\n        await fdZKey.writeULE32(2); // Plonk\n        await endWriteSection(fdZKey);\n\n        // Write the Plonk header section\n        ///////////\n\n        await startWriteSection(fdZKey, 2);\n        const primeQ = curve.q;\n        const n8q = (Math.floor( (Scalar.bitLength(primeQ) - 1) / 64) +1)*8;\n\n        const primeR = curve.r;\n        const n8r = (Math.floor( (Scalar.bitLength(primeR) - 1) / 64) +1)*8;\n\n        await fdZKey.writeULE32(n8q);\n        await writeBigInt(fdZKey, primeQ, n8q);\n        await fdZKey.writeULE32(n8r);\n        await writeBigInt(fdZKey, primeR, n8r);\n        await fdZKey.writeULE32(plonkNVars);                         // Total number of bars\n        await fdZKey.writeULE32(nPublic);                       // Total number of public vars (not including ONE)\n        await fdZKey.writeULE32(domainSize);                  // domainSize\n        await fdZKey.writeULE32(plonkAdditions.length);                  // domainSize\n        await fdZKey.writeULE32(plonkConstraints.length); \n\n        await fdZKey.write(k1);\n        await fdZKey.write(k2);\n\n        await fdZKey.write(G1.toAffine(vk.Qm));\n        await fdZKey.write(G1.toAffine(vk.Ql));\n        await fdZKey.write(G1.toAffine(vk.Qr));\n        await fdZKey.write(G1.toAffine(vk.Qo));\n        await fdZKey.write(G1.toAffine(vk.Qc));\n\n        await fdZKey.write(G1.toAffine(vk.S1));\n        await fdZKey.write(G1.toAffine(vk.S2));\n        await fdZKey.write(G1.toAffine(vk.S3));\n\n        let bX_2;\n        bX_2 = await fdPTau.read(sG2, sectionsPTau[3][0].p + sG2);\n        await fdZKey.write(bX_2);\n\n        await endWriteSection(fdZKey);\n    }\n\n    function getK1K2() {\n        let k1 = Fr.two;\n        while (isIncluded(k1, [], cirPower)) Fr.add(k1, Fr.one);\n        let k2 = Fr.add(k1, Fr.one);\n        while (isIncluded(k2, [k1], cirPower)) Fr.add(k2, Fr.one);\n        return [k1, k2];\n\n\n        function isIncluded(k, kArr, pow) {\n            const domainSize= 2**pow;\n            let w = Fr.one;\n            for (let i=0; i<domainSize; i++) {\n                if (Fr.eq(k, w)) return true;\n                for (let j=0; j<kArr.length; j++) {\n                    if (Fr.eq(k, Fr.mul(kArr[j], w))) return true;\n                }\n                w = Fr.mul(w, Fr.w[pow]);\n            }\n            return false;\n        }\n    }\n}\n\n/*\n    Copyright 2022 iden3 association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nclass Proof {\n    constructor(curve, logger) {\n        this.curve = curve;\n        this.logger = logger;\n\n        this.resetProof();\n    }\n\n    resetProof() {\n        this.polynomials = {};\n        this.evaluations = {};\n    }\n\n    addPolynomial(key, polynomial) {\n        if (key in this.polynomials) {\n            this.logger.warn(`proof: polynomial.${key} already exist in proof`);\n        }\n        this.polynomials[key] = polynomial;\n    }\n\n    getPolynomial(key) {\n        if (!(key in this.polynomials)) {\n            this.logger.warn(`proof: polynomial ${key} does not exist in proof`);\n        }\n        return this.polynomials[key];\n    }\n\n    addEvaluation(key, evaluation) {\n        if (key in this.evaluations) {\n            this.logger.warn(`proof: evaluations.${key} already exist in proof`);\n        }\n        this.evaluations[key] = evaluation;\n    }\n\n    getEvaluation(key) {\n        if (!(key in this.evaluations)) {\n            this.logger.warn(`proof: evaluation ${key} does not exist in proof`);\n        }\n        return this.evaluations[key];\n    }\n\n    toObjectProof(splitFields = true) {\n        let res = splitFields ? {polynomials: {}, evaluations: {}} : {};\n\n        Object.keys(this.polynomials).forEach(key => {\n            const value = this.curve.G1.toObject(this.polynomials[key]);\n            if(splitFields) {\n                res.polynomials[key] = value;\n            } else {\n                res[key] = value;\n            }\n        });\n\n        Object.keys(this.evaluations).forEach(key => {\n            const value = this.curve.Fr.toObject(this.evaluations[key]);\n            if(splitFields) {\n                res.evaluations[key] = value;\n            } else {\n                res[key] = value;\n            }\n        });\n\n        return res;\n    }\n\n    fromObjectProof(objectProof) {\n        this.resetProof();\n\n        Object.keys(objectProof.polynomials).forEach(key => {\n            this.polynomials[key] = this.curve.G1.fromObject(objectProof.polynomials[key]);\n        });\n\n        Object.keys(objectProof.evaluations).forEach(key => {\n            this.evaluations[key] = this.curve.Fr.fromObject(objectProof.evaluations[key]);\n        });\n    }\n}\n\nvar sha3 = {exports: {}};\n\n/**\n * [js-sha3]{@link https://github.com/emn178/js-sha3}\n *\n * @version 0.8.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2015-2018\n * @license MIT\n */\n\n(function (module) {\n\t/*jslint bitwise: true */\n\t(function () {\n\n\t  var INPUT_ERROR = 'input is invalid type';\n\t  var FINALIZE_ERROR = 'finalize already called';\n\t  var WINDOW = typeof window === 'object';\n\t  var root = WINDOW ? window : {};\n\t  if (root.JS_SHA3_NO_WINDOW) {\n\t    WINDOW = false;\n\t  }\n\t  var WEB_WORKER = !WINDOW && typeof self === 'object';\n\t  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n\t  if (NODE_JS) {\n\t    root = commonjsGlobal;\n\t  } else if (WEB_WORKER) {\n\t    root = self;\n\t  }\n\t  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;\n\t  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n\t  var HEX_CHARS = '0123456789abcdef'.split('');\n\t  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];\n\t  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];\n\t  var KECCAK_PADDING = [1, 256, 65536, 16777216];\n\t  var PADDING = [6, 1536, 393216, 100663296];\n\t  var SHIFT = [0, 8, 16, 24];\n\t  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,\n\t    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,\n\t    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,\n\t    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,\n\t    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\n\t  var BITS = [224, 256, 384, 512];\n\t  var SHAKE_BITS = [128, 256];\n\t  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];\n\t  var CSHAKE_BYTEPAD = {\n\t    '128': 168,\n\t    '256': 136\n\t  };\n\n\t  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {\n\t    Array.isArray = function (obj) {\n\t      return Object.prototype.toString.call(obj) === '[object Array]';\n\t    };\n\t  }\n\n\t  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n\t    ArrayBuffer.isView = function (obj) {\n\t      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n\t    };\n\t  }\n\n\t  var createOutputMethod = function (bits, padding, outputType) {\n\t    return function (message) {\n\t      return new Keccak(bits, padding, bits).update(message)[outputType]();\n\t    };\n\t  };\n\n\t  var createShakeOutputMethod = function (bits, padding, outputType) {\n\t    return function (message, outputBits) {\n\t      return new Keccak(bits, padding, outputBits).update(message)[outputType]();\n\t    };\n\t  };\n\n\t  var createCshakeOutputMethod = function (bits, padding, outputType) {\n\t    return function (message, outputBits, n, s) {\n\t      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();\n\t    };\n\t  };\n\n\t  var createKmacOutputMethod = function (bits, padding, outputType) {\n\t    return function (key, message, outputBits, s) {\n\t      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();\n\t    };\n\t  };\n\n\t  var createOutputMethods = function (method, createMethod, bits, padding) {\n\t    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n\t      var type = OUTPUT_TYPES[i];\n\t      method[type] = createMethod(bits, padding, type);\n\t    }\n\t    return method;\n\t  };\n\n\t  var createMethod = function (bits, padding) {\n\t    var method = createOutputMethod(bits, padding, 'hex');\n\t    method.create = function () {\n\t      return new Keccak(bits, padding, bits);\n\t    };\n\t    method.update = function (message) {\n\t      return method.create().update(message);\n\t    };\n\t    return createOutputMethods(method, createOutputMethod, bits, padding);\n\t  };\n\n\t  var createShakeMethod = function (bits, padding) {\n\t    var method = createShakeOutputMethod(bits, padding, 'hex');\n\t    method.create = function (outputBits) {\n\t      return new Keccak(bits, padding, outputBits);\n\t    };\n\t    method.update = function (message, outputBits) {\n\t      return method.create(outputBits).update(message);\n\t    };\n\t    return createOutputMethods(method, createShakeOutputMethod, bits, padding);\n\t  };\n\n\t  var createCshakeMethod = function (bits, padding) {\n\t    var w = CSHAKE_BYTEPAD[bits];\n\t    var method = createCshakeOutputMethod(bits, padding, 'hex');\n\t    method.create = function (outputBits, n, s) {\n\t      if (!n && !s) {\n\t        return methods['shake' + bits].create(outputBits);\n\t      } else {\n\t        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);\n\t      }\n\t    };\n\t    method.update = function (message, outputBits, n, s) {\n\t      return method.create(outputBits, n, s).update(message);\n\t    };\n\t    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);\n\t  };\n\n\t  var createKmacMethod = function (bits, padding) {\n\t    var w = CSHAKE_BYTEPAD[bits];\n\t    var method = createKmacOutputMethod(bits, padding, 'hex');\n\t    method.create = function (key, outputBits, s) {\n\t      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);\n\t    };\n\t    method.update = function (key, message, outputBits, s) {\n\t      return method.create(key, outputBits, s).update(message);\n\t    };\n\t    return createOutputMethods(method, createKmacOutputMethod, bits, padding);\n\t  };\n\n\t  var algorithms = [\n\t    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },\n\t    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },\n\t    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },\n\t    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },\n\t    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }\n\t  ];\n\n\t  var methods = {}, methodNames = [];\n\n\t  for (var i = 0; i < algorithms.length; ++i) {\n\t    var algorithm = algorithms[i];\n\t    var bits = algorithm.bits;\n\t    for (var j = 0; j < bits.length; ++j) {\n\t      var methodName = algorithm.name + '_' + bits[j];\n\t      methodNames.push(methodName);\n\t      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);\n\t      if (algorithm.name !== 'sha3') {\n\t        var newMethodName = algorithm.name + bits[j];\n\t        methodNames.push(newMethodName);\n\t        methods[newMethodName] = methods[methodName];\n\t      }\n\t    }\n\t  }\n\n\t  function Keccak(bits, padding, outputBits) {\n\t    this.blocks = [];\n\t    this.s = [];\n\t    this.padding = padding;\n\t    this.outputBits = outputBits;\n\t    this.reset = true;\n\t    this.finalized = false;\n\t    this.block = 0;\n\t    this.start = 0;\n\t    this.blockCount = (1600 - (bits << 1)) >> 5;\n\t    this.byteCount = this.blockCount << 2;\n\t    this.outputBlocks = outputBits >> 5;\n\t    this.extraBytes = (outputBits & 31) >> 3;\n\n\t    for (var i = 0; i < 50; ++i) {\n\t      this.s[i] = 0;\n\t    }\n\t  }\n\n\t  Keccak.prototype.update = function (message) {\n\t    if (this.finalized) {\n\t      throw new Error(FINALIZE_ERROR);\n\t    }\n\t    var notString, type = typeof message;\n\t    if (type !== 'string') {\n\t      if (type === 'object') {\n\t        if (message === null) {\n\t          throw new Error(INPUT_ERROR);\n\t        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n\t          message = new Uint8Array(message);\n\t        } else if (!Array.isArray(message)) {\n\t          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n\t            throw new Error(INPUT_ERROR);\n\t          }\n\t        }\n\t      } else {\n\t        throw new Error(INPUT_ERROR);\n\t      }\n\t      notString = true;\n\t    }\n\t    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,\n\t      blockCount = this.blockCount, index = 0, s = this.s, i, code;\n\n\t    while (index < length) {\n\t      if (this.reset) {\n\t        this.reset = false;\n\t        blocks[0] = this.block;\n\t        for (i = 1; i < blockCount + 1; ++i) {\n\t          blocks[i] = 0;\n\t        }\n\t      }\n\t      if (notString) {\n\t        for (i = this.start; index < length && i < byteCount; ++index) {\n\t          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n\t        }\n\t      } else {\n\t        for (i = this.start; index < length && i < byteCount; ++index) {\n\t          code = message.charCodeAt(index);\n\t          if (code < 0x80) {\n\t            blocks[i >> 2] |= code << SHIFT[i++ & 3];\n\t          } else if (code < 0x800) {\n\t            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n\t            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n\t          } else if (code < 0xd800 || code >= 0xe000) {\n\t            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n\t            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n\t            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n\t          } else {\n\t            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n\t            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n\t            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n\t            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n\t            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n\t          }\n\t        }\n\t      }\n\t      this.lastByteIndex = i;\n\t      if (i >= byteCount) {\n\t        this.start = i - byteCount;\n\t        this.block = blocks[blockCount];\n\t        for (i = 0; i < blockCount; ++i) {\n\t          s[i] ^= blocks[i];\n\t        }\n\t        f(s);\n\t        this.reset = true;\n\t      } else {\n\t        this.start = i;\n\t      }\n\t    }\n\t    return this;\n\t  };\n\n\t  Keccak.prototype.encode = function (x, right) {\n\t    var o = x & 255, n = 1;\n\t    var bytes = [o];\n\t    x = x >> 8;\n\t    o = x & 255;\n\t    while (o > 0) {\n\t      bytes.unshift(o);\n\t      x = x >> 8;\n\t      o = x & 255;\n\t      ++n;\n\t    }\n\t    if (right) {\n\t      bytes.push(n);\n\t    } else {\n\t      bytes.unshift(n);\n\t    }\n\t    this.update(bytes);\n\t    return bytes.length;\n\t  };\n\n\t  Keccak.prototype.encodeString = function (str) {\n\t    var notString, type = typeof str;\n\t    if (type !== 'string') {\n\t      if (type === 'object') {\n\t        if (str === null) {\n\t          throw new Error(INPUT_ERROR);\n\t        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {\n\t          str = new Uint8Array(str);\n\t        } else if (!Array.isArray(str)) {\n\t          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {\n\t            throw new Error(INPUT_ERROR);\n\t          }\n\t        }\n\t      } else {\n\t        throw new Error(INPUT_ERROR);\n\t      }\n\t      notString = true;\n\t    }\n\t    var bytes = 0, length = str.length;\n\t    if (notString) {\n\t      bytes = length;\n\t    } else {\n\t      for (var i = 0; i < str.length; ++i) {\n\t        var code = str.charCodeAt(i);\n\t        if (code < 0x80) {\n\t          bytes += 1;\n\t        } else if (code < 0x800) {\n\t          bytes += 2;\n\t        } else if (code < 0xd800 || code >= 0xe000) {\n\t          bytes += 3;\n\t        } else {\n\t          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));\n\t          bytes += 4;\n\t        }\n\t      }\n\t    }\n\t    bytes += this.encode(bytes * 8);\n\t    this.update(str);\n\t    return bytes;\n\t  };\n\n\t  Keccak.prototype.bytepad = function (strs, w) {\n\t    var bytes = this.encode(w);\n\t    for (var i = 0; i < strs.length; ++i) {\n\t      bytes += this.encodeString(strs[i]);\n\t    }\n\t    var paddingBytes = w - bytes % w;\n\t    var zeros = [];\n\t    zeros.length = paddingBytes;\n\t    this.update(zeros);\n\t    return this;\n\t  };\n\n\t  Keccak.prototype.finalize = function () {\n\t    if (this.finalized) {\n\t      return;\n\t    }\n\t    this.finalized = true;\n\t    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;\n\t    blocks[i >> 2] |= this.padding[i & 3];\n\t    if (this.lastByteIndex === this.byteCount) {\n\t      blocks[0] = blocks[blockCount];\n\t      for (i = 1; i < blockCount + 1; ++i) {\n\t        blocks[i] = 0;\n\t      }\n\t    }\n\t    blocks[blockCount - 1] |= 0x80000000;\n\t    for (i = 0; i < blockCount; ++i) {\n\t      s[i] ^= blocks[i];\n\t    }\n\t    f(s);\n\t  };\n\n\t  Keccak.prototype.toString = Keccak.prototype.hex = function () {\n\t    this.finalize();\n\n\t    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n\t      extraBytes = this.extraBytes, i = 0, j = 0;\n\t    var hex = '', block;\n\t    while (j < outputBlocks) {\n\t      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n\t        block = s[i];\n\t        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +\n\t          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +\n\t          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +\n\t          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];\n\t      }\n\t      if (j % blockCount === 0) {\n\t        f(s);\n\t        i = 0;\n\t      }\n\t    }\n\t    if (extraBytes) {\n\t      block = s[i];\n\t      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];\n\t      if (extraBytes > 1) {\n\t        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];\n\t      }\n\t      if (extraBytes > 2) {\n\t        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];\n\t      }\n\t    }\n\t    return hex;\n\t  };\n\n\t  Keccak.prototype.arrayBuffer = function () {\n\t    this.finalize();\n\n\t    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n\t      extraBytes = this.extraBytes, i = 0, j = 0;\n\t    var bytes = this.outputBits >> 3;\n\t    var buffer;\n\t    if (extraBytes) {\n\t      buffer = new ArrayBuffer((outputBlocks + 1) << 2);\n\t    } else {\n\t      buffer = new ArrayBuffer(bytes);\n\t    }\n\t    var array = new Uint32Array(buffer);\n\t    while (j < outputBlocks) {\n\t      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n\t        array[j] = s[i];\n\t      }\n\t      if (j % blockCount === 0) {\n\t        f(s);\n\t      }\n\t    }\n\t    if (extraBytes) {\n\t      array[i] = s[i];\n\t      buffer = buffer.slice(0, bytes);\n\t    }\n\t    return buffer;\n\t  };\n\n\t  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;\n\n\t  Keccak.prototype.digest = Keccak.prototype.array = function () {\n\t    this.finalize();\n\n\t    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n\t      extraBytes = this.extraBytes, i = 0, j = 0;\n\t    var array = [], offset, block;\n\t    while (j < outputBlocks) {\n\t      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n\t        offset = j << 2;\n\t        block = s[i];\n\t        array[offset] = block & 0xFF;\n\t        array[offset + 1] = (block >> 8) & 0xFF;\n\t        array[offset + 2] = (block >> 16) & 0xFF;\n\t        array[offset + 3] = (block >> 24) & 0xFF;\n\t      }\n\t      if (j % blockCount === 0) {\n\t        f(s);\n\t      }\n\t    }\n\t    if (extraBytes) {\n\t      offset = j << 2;\n\t      block = s[i];\n\t      array[offset] = block & 0xFF;\n\t      if (extraBytes > 1) {\n\t        array[offset + 1] = (block >> 8) & 0xFF;\n\t      }\n\t      if (extraBytes > 2) {\n\t        array[offset + 2] = (block >> 16) & 0xFF;\n\t      }\n\t    }\n\t    return array;\n\t  };\n\n\t  function Kmac(bits, padding, outputBits) {\n\t    Keccak.call(this, bits, padding, outputBits);\n\t  }\n\n\t  Kmac.prototype = new Keccak();\n\n\t  Kmac.prototype.finalize = function () {\n\t    this.encode(this.outputBits, true);\n\t    return Keccak.prototype.finalize.call(this);\n\t  };\n\n\t  var f = function (s) {\n\t    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,\n\t      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,\n\t      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,\n\t      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n\t    for (n = 0; n < 48; n += 2) {\n\t      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n\t      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n\t      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n\t      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n\t      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n\t      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n\t      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n\t      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n\t      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n\t      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n\n\t      h = c8 ^ ((c2 << 1) | (c3 >>> 31));\n\t      l = c9 ^ ((c3 << 1) | (c2 >>> 31));\n\t      s[0] ^= h;\n\t      s[1] ^= l;\n\t      s[10] ^= h;\n\t      s[11] ^= l;\n\t      s[20] ^= h;\n\t      s[21] ^= l;\n\t      s[30] ^= h;\n\t      s[31] ^= l;\n\t      s[40] ^= h;\n\t      s[41] ^= l;\n\t      h = c0 ^ ((c4 << 1) | (c5 >>> 31));\n\t      l = c1 ^ ((c5 << 1) | (c4 >>> 31));\n\t      s[2] ^= h;\n\t      s[3] ^= l;\n\t      s[12] ^= h;\n\t      s[13] ^= l;\n\t      s[22] ^= h;\n\t      s[23] ^= l;\n\t      s[32] ^= h;\n\t      s[33] ^= l;\n\t      s[42] ^= h;\n\t      s[43] ^= l;\n\t      h = c2 ^ ((c6 << 1) | (c7 >>> 31));\n\t      l = c3 ^ ((c7 << 1) | (c6 >>> 31));\n\t      s[4] ^= h;\n\t      s[5] ^= l;\n\t      s[14] ^= h;\n\t      s[15] ^= l;\n\t      s[24] ^= h;\n\t      s[25] ^= l;\n\t      s[34] ^= h;\n\t      s[35] ^= l;\n\t      s[44] ^= h;\n\t      s[45] ^= l;\n\t      h = c4 ^ ((c8 << 1) | (c9 >>> 31));\n\t      l = c5 ^ ((c9 << 1) | (c8 >>> 31));\n\t      s[6] ^= h;\n\t      s[7] ^= l;\n\t      s[16] ^= h;\n\t      s[17] ^= l;\n\t      s[26] ^= h;\n\t      s[27] ^= l;\n\t      s[36] ^= h;\n\t      s[37] ^= l;\n\t      s[46] ^= h;\n\t      s[47] ^= l;\n\t      h = c6 ^ ((c0 << 1) | (c1 >>> 31));\n\t      l = c7 ^ ((c1 << 1) | (c0 >>> 31));\n\t      s[8] ^= h;\n\t      s[9] ^= l;\n\t      s[18] ^= h;\n\t      s[19] ^= l;\n\t      s[28] ^= h;\n\t      s[29] ^= l;\n\t      s[38] ^= h;\n\t      s[39] ^= l;\n\t      s[48] ^= h;\n\t      s[49] ^= l;\n\n\t      b0 = s[0];\n\t      b1 = s[1];\n\t      b32 = (s[11] << 4) | (s[10] >>> 28);\n\t      b33 = (s[10] << 4) | (s[11] >>> 28);\n\t      b14 = (s[20] << 3) | (s[21] >>> 29);\n\t      b15 = (s[21] << 3) | (s[20] >>> 29);\n\t      b46 = (s[31] << 9) | (s[30] >>> 23);\n\t      b47 = (s[30] << 9) | (s[31] >>> 23);\n\t      b28 = (s[40] << 18) | (s[41] >>> 14);\n\t      b29 = (s[41] << 18) | (s[40] >>> 14);\n\t      b20 = (s[2] << 1) | (s[3] >>> 31);\n\t      b21 = (s[3] << 1) | (s[2] >>> 31);\n\t      b2 = (s[13] << 12) | (s[12] >>> 20);\n\t      b3 = (s[12] << 12) | (s[13] >>> 20);\n\t      b34 = (s[22] << 10) | (s[23] >>> 22);\n\t      b35 = (s[23] << 10) | (s[22] >>> 22);\n\t      b16 = (s[33] << 13) | (s[32] >>> 19);\n\t      b17 = (s[32] << 13) | (s[33] >>> 19);\n\t      b48 = (s[42] << 2) | (s[43] >>> 30);\n\t      b49 = (s[43] << 2) | (s[42] >>> 30);\n\t      b40 = (s[5] << 30) | (s[4] >>> 2);\n\t      b41 = (s[4] << 30) | (s[5] >>> 2);\n\t      b22 = (s[14] << 6) | (s[15] >>> 26);\n\t      b23 = (s[15] << 6) | (s[14] >>> 26);\n\t      b4 = (s[25] << 11) | (s[24] >>> 21);\n\t      b5 = (s[24] << 11) | (s[25] >>> 21);\n\t      b36 = (s[34] << 15) | (s[35] >>> 17);\n\t      b37 = (s[35] << 15) | (s[34] >>> 17);\n\t      b18 = (s[45] << 29) | (s[44] >>> 3);\n\t      b19 = (s[44] << 29) | (s[45] >>> 3);\n\t      b10 = (s[6] << 28) | (s[7] >>> 4);\n\t      b11 = (s[7] << 28) | (s[6] >>> 4);\n\t      b42 = (s[17] << 23) | (s[16] >>> 9);\n\t      b43 = (s[16] << 23) | (s[17] >>> 9);\n\t      b24 = (s[26] << 25) | (s[27] >>> 7);\n\t      b25 = (s[27] << 25) | (s[26] >>> 7);\n\t      b6 = (s[36] << 21) | (s[37] >>> 11);\n\t      b7 = (s[37] << 21) | (s[36] >>> 11);\n\t      b38 = (s[47] << 24) | (s[46] >>> 8);\n\t      b39 = (s[46] << 24) | (s[47] >>> 8);\n\t      b30 = (s[8] << 27) | (s[9] >>> 5);\n\t      b31 = (s[9] << 27) | (s[8] >>> 5);\n\t      b12 = (s[18] << 20) | (s[19] >>> 12);\n\t      b13 = (s[19] << 20) | (s[18] >>> 12);\n\t      b44 = (s[29] << 7) | (s[28] >>> 25);\n\t      b45 = (s[28] << 7) | (s[29] >>> 25);\n\t      b26 = (s[38] << 8) | (s[39] >>> 24);\n\t      b27 = (s[39] << 8) | (s[38] >>> 24);\n\t      b8 = (s[48] << 14) | (s[49] >>> 18);\n\t      b9 = (s[49] << 14) | (s[48] >>> 18);\n\n\t      s[0] = b0 ^ (~b2 & b4);\n\t      s[1] = b1 ^ (~b3 & b5);\n\t      s[10] = b10 ^ (~b12 & b14);\n\t      s[11] = b11 ^ (~b13 & b15);\n\t      s[20] = b20 ^ (~b22 & b24);\n\t      s[21] = b21 ^ (~b23 & b25);\n\t      s[30] = b30 ^ (~b32 & b34);\n\t      s[31] = b31 ^ (~b33 & b35);\n\t      s[40] = b40 ^ (~b42 & b44);\n\t      s[41] = b41 ^ (~b43 & b45);\n\t      s[2] = b2 ^ (~b4 & b6);\n\t      s[3] = b3 ^ (~b5 & b7);\n\t      s[12] = b12 ^ (~b14 & b16);\n\t      s[13] = b13 ^ (~b15 & b17);\n\t      s[22] = b22 ^ (~b24 & b26);\n\t      s[23] = b23 ^ (~b25 & b27);\n\t      s[32] = b32 ^ (~b34 & b36);\n\t      s[33] = b33 ^ (~b35 & b37);\n\t      s[42] = b42 ^ (~b44 & b46);\n\t      s[43] = b43 ^ (~b45 & b47);\n\t      s[4] = b4 ^ (~b6 & b8);\n\t      s[5] = b5 ^ (~b7 & b9);\n\t      s[14] = b14 ^ (~b16 & b18);\n\t      s[15] = b15 ^ (~b17 & b19);\n\t      s[24] = b24 ^ (~b26 & b28);\n\t      s[25] = b25 ^ (~b27 & b29);\n\t      s[34] = b34 ^ (~b36 & b38);\n\t      s[35] = b35 ^ (~b37 & b39);\n\t      s[44] = b44 ^ (~b46 & b48);\n\t      s[45] = b45 ^ (~b47 & b49);\n\t      s[6] = b6 ^ (~b8 & b0);\n\t      s[7] = b7 ^ (~b9 & b1);\n\t      s[16] = b16 ^ (~b18 & b10);\n\t      s[17] = b17 ^ (~b19 & b11);\n\t      s[26] = b26 ^ (~b28 & b20);\n\t      s[27] = b27 ^ (~b29 & b21);\n\t      s[36] = b36 ^ (~b38 & b30);\n\t      s[37] = b37 ^ (~b39 & b31);\n\t      s[46] = b46 ^ (~b48 & b40);\n\t      s[47] = b47 ^ (~b49 & b41);\n\t      s[8] = b8 ^ (~b0 & b2);\n\t      s[9] = b9 ^ (~b1 & b3);\n\t      s[18] = b18 ^ (~b10 & b12);\n\t      s[19] = b19 ^ (~b11 & b13);\n\t      s[28] = b28 ^ (~b20 & b22);\n\t      s[29] = b29 ^ (~b21 & b23);\n\t      s[38] = b38 ^ (~b30 & b32);\n\t      s[39] = b39 ^ (~b31 & b33);\n\t      s[48] = b48 ^ (~b40 & b42);\n\t      s[49] = b49 ^ (~b41 & b43);\n\n\t      s[0] ^= RC[n];\n\t      s[1] ^= RC[n + 1];\n\t    }\n\t  };\n\n\t  if (COMMON_JS) {\n\t    module.exports = methods;\n\t  } else {\n\t    for (i = 0; i < methodNames.length; ++i) {\n\t      root[methodNames[i]] = methods[methodNames[i]];\n\t    }\n\t  }\n\t})();\n} (sha3));\n\nvar jsSha3 = sha3.exports;\n\n/*\n    Copyright 2022 iden3 association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\nconst { keccak256 } = jsSha3;\n\nconst POLYNOMIAL = 0;\nconst SCALAR = 1;\n\nclass Keccak256Transcript {\n    constructor(curve) {\n        this.G1 = curve.G1;\n        this.Fr = curve.Fr;\n\n        this.reset();\n    }\n\n    reset() {\n        this.data = [];\n    }\n\n    addPolCommitment(polynomialCommitment) {\n        this.data.push({type: POLYNOMIAL, data: polynomialCommitment});\n    }\n\n    addScalar(scalar) {\n        this.data.push({type: SCALAR, data: scalar});\n    }\n\n    getChallenge() {\n        if(0 === this.data.length) {\n            throw new Error(\"Keccak256Transcript: No data to generate a transcript\");\n        }\n\n        let nPolynomials = 0;\n        let nScalars = 0;\n\n        this.data.forEach(element => POLYNOMIAL === element.type ? nPolynomials++ : nScalars++);\n\n        let buffer = new Uint8Array(nScalars * this.Fr.n8 + nPolynomials * this.G1.F.n8 * 2);\n        let offset = 0;\n\n        for (let i = 0; i < this.data.length; i++) {\n            if (POLYNOMIAL === this.data[i].type) {\n                this.G1.toRprUncompressed(buffer, offset, this.data[i].data);\n                offset += this.G1.F.n8 * 2;\n            } else {\n                this.Fr.toRprBE(buffer, offset, this.data[i].data);\n                offset += this.Fr.n8;\n            }\n        }\n\n        const value = Scalar.fromRprBE(new Uint8Array(keccak256.arrayBuffer(buffer)));\n        return this.Fr.e(value);\n    }\n}\n\n/*\n    Copyright 2022 iden3 association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nclass MulZ {\n    static getZ1(Fr) {\n        return [\n            Fr.zero,\n            Fr.add(Fr.e(-1), Fr.w[2]),\n            Fr.e(-2),\n            Fr.sub(Fr.e(-1), Fr.w[2]),\n        ];\n    }\n\n    static getZ2(Fr) {\n        return [\n            Fr.zero,\n            Fr.add(Fr.zero, Fr.mul(Fr.e(-2), Fr.w[2])),\n            Fr.e(4),\n            Fr.sub(Fr.zero, Fr.mul(Fr.e(-2), Fr.w[2])),\n        ];\n    }\n\n    static getZ3(Fr) {\n        return [\n            Fr.zero,\n            Fr.add(Fr.e(2), Fr.mul(Fr.e(2), Fr.w[2])),\n            Fr.e(-8),\n            Fr.sub(Fr.e(2), Fr.mul(Fr.e(2), Fr.w[2])),\n        ];\n\n    }\n\n    static mul2(a, b, ap, bp, p, Fr) {\n        const Z1 = this.getZ1(Fr);\n        let r, rz;\n\n        const a_b = Fr.mul(a, b);\n        const a_bp = Fr.mul(a, bp);\n        const ap_b = Fr.mul(ap, b);\n        const ap_bp = Fr.mul(ap, bp);\n\n        r = a_b;\n\n        let a0 = Fr.add(a_bp, ap_b);\n\n        let a1 = ap_bp;\n\n        rz = a0;\n        if (p) {\n            rz = Fr.add(rz, Fr.mul(Z1[p], a1));\n        }\n\n        return [r, rz];\n    }\n\n    static mul3(a, b, c, ap, bp, cp, p, Fr) {\n        const Z1 = this.getZ1(Fr);\n        const Z2 = this.getZ2(Fr);\n        let r, rz;\n\n        const a_b = Fr.mul(a, b);\n        const a_bp = Fr.mul(a, bp);\n        const ap_b = Fr.mul(ap, b);\n        const ap_bp = Fr.mul(ap, bp);\n\n        r = Fr.mul(a_b, c);\n\n        let a0 = Fr.mul(ap_b, c);\n        a0 = Fr.add(a0, Fr.mul(a_bp, c));\n        a0 = Fr.add(a0, Fr.mul(a_b, cp));\n\n        let a1 = Fr.mul(ap_bp, c);\n        a1 = Fr.add(a1, Fr.mul(a_bp, cp));\n        a1 = Fr.add(a1, Fr.mul(ap_b, cp));\n\n        rz = a0;\n        if (p) {\n            const a2 = Fr.mul(ap_bp, cp);\n            rz = Fr.add(rz, Fr.mul(Z1[p], a1));\n            rz = Fr.add(rz, Fr.mul(Z2[p], a2));\n        }\n\n        return [r, rz];\n    }\n\n    static mul4(a, b, c, d, ap, bp, cp, dp, p, Fr) {\n        const Z1 = this.getZ1(Fr);\n        const Z2 = this.getZ2(Fr);\n        const Z3 = this.getZ3(Fr);\n\n        let r, rz;\n\n        const a_b = Fr.mul(a, b);\n        const a_bp = Fr.mul(a, bp);\n        const ap_b = Fr.mul(ap, b);\n        const ap_bp = Fr.mul(ap, bp);\n\n        const c_d = Fr.mul(c, d);\n        const c_dp = Fr.mul(c, dp);\n        const cp_d = Fr.mul(cp, d);\n        const cp_dp = Fr.mul(cp, dp);\n\n        r = Fr.mul(a_b, c_d);\n\n        let a0 = Fr.mul(ap_b, c_d);\n        a0 = Fr.add(a0, Fr.mul(a_bp, c_d));\n        a0 = Fr.add(a0, Fr.mul(a_b, cp_d));\n        a0 = Fr.add(a0, Fr.mul(a_b, c_dp));\n\n        let a1 = Fr.mul(ap_bp, c_d);\n        a1 = Fr.add(a1, Fr.mul(ap_b, cp_d));\n        a1 = Fr.add(a1, Fr.mul(ap_b, c_dp));\n        a1 = Fr.add(a1, Fr.mul(a_bp, cp_d));\n        a1 = Fr.add(a1, Fr.mul(a_bp, c_dp));\n        a1 = Fr.add(a1, Fr.mul(a_b, cp_dp));\n\n        let a2 = Fr.mul(a_bp, cp_dp);\n        a2 = Fr.add(a2, Fr.mul(ap_b, cp_dp));\n        a2 = Fr.add(a2, Fr.mul(ap_bp, c_dp));\n        a2 = Fr.add(a2, Fr.mul(ap_bp, cp_d));\n\n        let a3 = Fr.mul(ap_bp, cp_dp);\n\n        rz = a0;\n        if (p) {\n            rz = Fr.add(rz, Fr.mul(Z1[p], a1));\n            rz = Fr.add(rz, Fr.mul(Z2[p], a2));\n            rz = Fr.add(rz, Fr.mul(Z3[p], a3));\n        }\n\n        return [r, rz];\n    }\n}\n\nconst ZKEY_PL_ADDITIONS_SECTION = 3;\nconst ZKEY_PL_A_MAP_SECTION = 4;\nconst ZKEY_PL_B_MAP_SECTION = 5;\nconst ZKEY_PL_C_MAP_SECTION = 6;\nconst ZKEY_PL_QM_SECTION = 7;\nconst ZKEY_PL_QL_SECTION = 8;\nconst ZKEY_PL_QR_SECTION = 9;\nconst ZKEY_PL_QO_SECTION = 10;\nconst ZKEY_PL_QC_SECTION = 11;\nconst ZKEY_PL_SIGMA_SECTION = 12;\nconst ZKEY_PL_LAGRANGE_SECTION = 13;\nconst ZKEY_PL_PTAU_SECTION = 14;\n\n/*\n    Copyright 2022 iden3 association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nclass Polynomial {\n    constructor(coefficients, curve, logger) {\n        this.coef = coefficients;\n        this.curve = curve;\n        this.Fr = curve.Fr;\n        this.G1 = curve.G1;\n        this.logger = logger;\n    }\n\n    static async fromEvaluations(buffer, curve, logger) {\n        let coefficients = await curve.Fr.ifft(buffer);\n\n        return new Polynomial(coefficients, curve, logger);\n    }\n\n    static fromCoefficientsArray(array, curve, logger) {\n        const Fr = curve.Fr;\n        let buff = array.length > 2 << 14 ?\n            new BigBuffer(array.length * Fr.n8) : new Uint8Array(array.length * Fr.n8);\n        for (let i = 0; i < array.length; i++) buff.set(array[i], i * Fr.n8);\n\n        return new Polynomial(buff, curve, logger);\n    }\n\n    static fromPolynomial(polynomial, curve, logger) {\n        let length = polynomial.length();\n        let Fr = curve.Fr;\n\n        let buff = length > 2 << 14 ?\n            new BigBuffer(length * Fr.n8) : new Uint8Array(length * Fr.n8);\n        buff.set(polynomial.coef.slice(), 0);\n\n        return new Polynomial(buff, curve, logger);\n    }\n\n    isEqual(polynomial) {\n        const degree = this.degree();\n        if (degree !== polynomial.degree()) return false;\n\n        for (let i = 0; i < degree + 1; i++) {\n            if (!this.Fr.eq(this.getCoef(i), polynomial.getCoef(i))) return false;\n        }\n\n        return true;\n    }\n\n    blindCoefficients(blindingFactors) {\n        blindingFactors = blindingFactors || [];\n\n        const blindedCoefficients = (this.length() + blindingFactors.length) > 2 << 14 ?\n            new BigBuffer((this.length() + blindingFactors.length) * this.Fr.n8) :\n            new Uint8Array((this.length() + blindingFactors.length) * this.Fr.n8);\n\n        blindedCoefficients.set(this.coef, 0);\n        for (let i = 0; i < blindingFactors.length; i++) {\n            blindedCoefficients.set(\n                this.Fr.add(\n                    blindedCoefficients.slice((this.length() + i) * this.Fr.n8, (this.length() + i + 1) * this.Fr.n8),\n                    blindingFactors[i]\n                ),\n                (this.length() + i) * this.Fr.n8\n            );\n            blindedCoefficients.set(\n                this.Fr.sub(\n                    blindedCoefficients.slice(i * this.Fr.n8, (i + 1) * this.Fr.n8),\n                    blindingFactors[i]\n                ),\n                i * this.Fr.n8\n            );\n        }\n        this.coef = blindedCoefficients;\n    }\n\n    getCoef(index) {\n        const i_n8 = index * this.Fr.n8;\n\n        if (i_n8 + this.Fr.n8 > this.coef.byteLength) return this.Fr.zero;\n\n        return this.coef.slice(i_n8, i_n8 + this.Fr.n8);\n    }\n\n    setCoef(index, value) {\n        if (index > (this.length() - 1)) {\n            throw new Error(\"Coef index is not available\");\n        }\n\n        this.coef.set(value, index * this.Fr.n8);\n    }\n\n    static async to4T(buffer, domainSize, blindingFactors, Fr) {\n        blindingFactors = blindingFactors || [];\n        let a = await Fr.ifft(buffer);\n\n        const a4 = (domainSize * 4) > 2 << 14 ?\n            new BigBuffer(domainSize * 4 * Fr.n8) : new Uint8Array(domainSize * 4 * Fr.n8);\n        a4.set(a, 0);\n\n        const A4 = await Fr.fft(a4);\n\n        if (blindingFactors.length === 0) {\n            return [a, A4];\n        }\n\n        const a1 = domainSize + blindingFactors.length > 2 << 14 ?\n            new BigBuffer((domainSize + blindingFactors.length) * Fr.n8) :\n            new Uint8Array((domainSize + blindingFactors.length) * Fr.n8);\n\n        a1.set(a, 0);\n        for (let i = 0; i < blindingFactors.length; i++) {\n            a1.set(\n                Fr.add(\n                    a1.slice((domainSize + i) * Fr.n8, (domainSize + i + 1) * Fr.n8),\n                    blindingFactors[i]\n                ),\n                (domainSize + i) * Fr.n8\n            );\n            a1.set(\n                Fr.sub(\n                    a1.slice(i * Fr.n8, (i + 1) * Fr.n8),\n                    blindingFactors[i]\n                ),\n                i * Fr.n8\n            );\n        }\n\n        return [a1, A4];\n    }\n\n    length() {\n        let length = this.coef.byteLength / this.Fr.n8;\n        if (length !== Math.floor(this.coef.byteLength / this.Fr.n8)) {\n            throw new Error(\"Polynomial coefficients buffer has incorrect size\");\n        }\n        if (0 === length) {\n            if (this.logger) {\n                this.logger.warn(\"Polynomial has length zero\");\n            }\n        }\n        return length;\n    }\n\n    degree() {\n        for (let i = this.length() - 1; i > 0; i--) {\n            const i_n8 = i * this.Fr.n8;\n            if (!this.Fr.eq(this.Fr.zero, this.coef.slice(i_n8, i_n8 + this.Fr.n8))) {\n                return i;\n            }\n        }\n\n        return 0;\n    }\n\n    evaluate(point) {\n        let res = this.Fr.zero;\n\n        for (let i = this.degree() + 1; i > 0; i--) {\n            let i_n8 = i * this.Fr.n8;\n            const currentCoefficient = this.coef.slice(i_n8 - this.Fr.n8, i_n8);\n            res = this.Fr.add(currentCoefficient, this.Fr.mul(res, point));\n        }\n\n        return res;\n    }\n\n    fastEvaluate(point) {\n        const Fr = this.Fr;\n        let nThreads = 3;\n\n        let nCoefs = this.degree() + 1;\n        let coefsThread = parseInt(nCoefs / nThreads);\n        let residualCoefs = nCoefs - coefsThread * nThreads;\n\n        let res = [];\n        let xN = [];\n\n        xN[0] = Fr.one;\n\n        for (let i = 0; i < nThreads; i++) {\n            res[i] = Fr.zero;\n\n            let nCoefs = i === (nThreads - 1) ? coefsThread + residualCoefs : coefsThread;\n            for (let j = nCoefs; j > 0; j--) {\n                res[i] = Fr.add(this.getCoef((i * coefsThread) + j - 1), Fr.mul(res[i], point));\n\n                if (i === 0) xN[0] = Fr.mul(xN[0], point);\n            }\n        }\n\n        for (let i = 1; i < nThreads; i++) {\n            res[0] = Fr.add(res[0], Fr.mul(xN[i - 1], res[i]));\n            xN[i] = Fr.mul(xN[i - 1], xN[0]);\n        }\n\n        return res[0];\n    }\n\n    add(polynomial, blindingValue) {\n        let other = false;\n\n        if (polynomial.length() > this.length()) {\n            other = true;\n        }\n\n        const thisLength = this.length();\n        const polyLength = polynomial.length();\n        for (let i = 0; i < Math.max(thisLength, polyLength); i++) {\n            const i_n8 = i * this.Fr.n8;\n\n            const a = i < thisLength ? this.coef.slice(i_n8, i_n8 + this.Fr.n8) : this.Fr.zero;\n            let b = i < polyLength ? polynomial.coef.slice(i_n8, i_n8 + this.Fr.n8) : this.Fr.zero;\n\n            if (blindingValue !== undefined) {\n                b = this.Fr.mul(b, blindingValue);\n            }\n            if (other) {\n                polynomial.coef.set(this.Fr.add(a, b), i_n8);\n            } else {\n                this.coef.set(this.Fr.add(a, b), i_n8);\n            }\n        }\n        if (other) {\n            delete this.coef;\n            this.coef = polynomial.coef;\n        }\n    }\n\n    sub(polynomial, blindingValue) {\n        let other = false;\n\n        if (polynomial.length() > this.length()) {\n            other = true;\n        }\n\n        const thisLength = this.length();\n        const polyLength = polynomial.length();\n        for (let i = 0; i < Math.max(thisLength, polyLength); i++) {\n            const i_n8 = i * this.Fr.n8;\n\n            const a = i < thisLength ? this.coef.slice(i_n8, i_n8 + this.Fr.n8) : this.Fr.zero;\n            let b = i < polyLength ? polynomial.coef.slice(i_n8, i_n8 + this.Fr.n8) : this.Fr.zero;\n\n            if (blindingValue !== undefined) {\n                b = this.Fr.mul(b, blindingValue);\n            }\n            if (other) {\n                polynomial.coef.set(this.Fr.sub(a, b), i_n8);\n            } else {\n                this.coef.set(this.Fr.sub(a, b), i_n8);\n            }\n        }\n        if (other) {\n            delete this.coef;\n            this.coef = polynomial.coef;\n        }\n    }\n\n    mulScalar(value) {\n        for (let i = 0; i < this.length(); i++) {\n            const i_n8 = i * this.Fr.n8;\n\n            this.coef.set(this.Fr.mul(this.coef.slice(i_n8, i_n8 + this.Fr.n8), value), i_n8);\n        }\n    }\n\n    addScalar(value) {\n        const currentValue = 0 === this.length() ? this.Fr.zero : this.coef.slice(0, this.Fr.n8);\n        this.coef.set(this.Fr.add(currentValue, value), 0);\n    }\n\n    subScalar(value) {\n        const currentValue = 0 === this.length() ? this.Fr.zero : this.coef.slice(0, this.Fr.n8);\n        this.coef.set(this.Fr.sub(currentValue, value), 0);\n    }\n\n    // Multiply current polynomial by the polynomial (X - value)\n    byXSubValue(value) {\n        const Fr = this.Fr;\n        const resize = !Fr.eq(Fr.zero, this.getCoef(this.length() - 1));\n\n        const length = resize ? this.length() + 1 : this.length();\n        const buff = length > 2 << 14 ? new BigBuffer(length * Fr.n8) : new Uint8Array(length * Fr.n8);\n        let pol = new Polynomial(buff, this.curve, this.logger);\n\n        // Step 0: Set current coefficients to the new buffer shifted one position\n        pol.coef.set(this.coef.slice(0, (length - 1) * Fr.n8), 32);\n\n        // Step 1: multiply each coefficient by (-value)\n        this.mulScalar(Fr.neg(value));\n\n        // Step 2: Add current polynomial to destination polynomial\n        pol.add(this);\n\n        // Swap buffers\n        this.coef = pol.coef;\n    }\n\n    // Multiply current polynomial by the polynomial (X^n + value)\n    byXNSubValue(n, value) {\n        const Fr = this.Fr;\n        const resize = !(this.length() - n - 1 >= this.degree());\n\n        const length = resize ? this.length() + n : this.length();\n        const buff = length > 2 << 14 ? new BigBuffer(length * Fr.n8) : new Uint8Array(length * Fr.n8);\n        let pol = new Polynomial(buff, this.curve, this.logger);\n\n        // Step 0: Set current coefficients to the new buffer shifted one position\n        pol.coef.set(this.coef.slice(0, (this.degree() + 1) * 32, ), n * 32);\n\n        // Step 1: multiply each coefficient by (- value)\n        this.mulScalar(value);\n\n        // Step 2: Add current polynomial to destination polynomial\n        pol.add(this);\n\n        // Swap buffers\n        this.coef = pol.coef;\n    }\n\n    // Euclidean division\n    divBy(polynomial) {\n        const Fr = this.Fr;\n        const degreeA = this.degree();\n        const degreeB = polynomial.degree();\n\n        let polR = new Polynomial(this.coef, this.curve, this.logger);\n\n        this.coef = this.length() > 2 << 14 ?\n            new BigBuffer(this.length() * Fr.n8) : new Uint8Array(this.length() * Fr.n8);\n\n        for (let i = degreeA - degreeB; i >= 0; i--) {\n            this.setCoef(i, Fr.div(polR.getCoef(i + degreeB), polynomial.getCoef(degreeB)));\n            for (let j = 0; j <= degreeB; j++) {\n                polR.setCoef(i + j, Fr.sub(polR.getCoef(i + j), Fr.mul(this.getCoef(i), polynomial.getCoef(j))));\n            }\n        }\n\n        return polR;\n    }\n\n    // Division by a Polynomial of the form (x^m - beta)\n    divByMonic(m, beta) {\n        const Fr = this.Fr;\n\n        let d = this.degree();\n\n        let buffer = this.length() > 2 << 14 ?\n            new BigBuffer(this.length() * Fr.n8) : new Uint8Array(this.length() * Fr.n8);\n        let quotient = new Polynomial(buffer, this.curve, this.logger);\n\n        let bArr = [];\n\n        // Add the m leading coefficients of this to quotient\n        for (let i = 0; i < m; i++) {\n            quotient.setCoef((d - i) - m, this.getCoef(d - i));\n            bArr[i] = this.getCoef(d - i);\n        }\n\n        let nThreads = m;\n        for (let k = 0; k < nThreads; k++) {\n            for (let i = d - 2 * m - k; i >= 0; i = i - nThreads) {\n                if (i < 0) break;\n                let idx = k;\n                bArr[idx] = Fr.add(this.getCoef(i + m), Fr.mul(bArr[idx], beta));\n\n                quotient.setCoef(i, bArr[idx]);\n            }\n        }\n\n        this.coef = quotient.coef;\n    }\n\n    divByVanishing(n, beta) {\n        if (this.degree() < n) {\n            throw new Error(\"divByVanishing polynomial divisor must be of degree lower than the dividend polynomial\");\n        }\n\n        const Fr = this.Fr;\n\n        let polR = new Polynomial(this.coef, this.curve, this.logger);\n\n        this.coef = this.length() > 2 << 14 ?\n            new BigBuffer(this.length() * Fr.n8) : new Uint8Array(this.length() * Fr.n8);\n\n        for (let i = this.length() - 1; i >= n; i--) {\n            let leadingCoef = polR.getCoef(i);\n            if (Fr.eq(Fr.zero, leadingCoef)) continue;\n\n            polR.setCoef(i, Fr.zero);\n            polR.setCoef(i - n, Fr.add(polR.getCoef(i - n), Fr.mul(beta, leadingCoef)));\n            this.setCoef(i - n, Fr.add(this.getCoef(i - n), leadingCoef));\n        }\n\n        return polR;\n    }\n\n    divByVanishing2(m, beta) {\n        if (this.degree() < m) {\n            throw new Error(\"divByVanishing polynomial divisor must be of degree lower than the dividend polynomial\");\n        }\n\n        const Fr = this.Fr;\n\n        let polR = new Polynomial(this.coef, this.curve, this.logger);\n\n        this.coef = this.length() > 2 << 14 ?\n            new BigBuffer(this.length() * Fr.n8) : new Uint8Array(this.length() * Fr.n8);\n\n        let nThreads = 3;\n        let nTotal = this.length() - m;\n        let nElementsChunk = Math.floor(nTotal / nThreads);\n        let nElementsLast = nTotal - (nThreads - 1) * nElementsChunk;\n\n        console.log(nTotal);\n        console.log(nElementsChunk + \"  \" + nElementsLast);\n        for (let k = 0; k < nThreads; k++) {\n            console.log(\"> Thread \" + k);\n            for (let i = (k === 0 ? nElementsLast : nElementsChunk); i > 0; i--) {\n                let idxDst = i - 1;\n                if (k !== 0) idxDst += (k - 1) * nElementsChunk + nElementsLast;\n                let idxSrc = idxDst + m;\n\n                let leadingCoef = polR.getCoef(idxSrc);\n                if (Fr.eq(Fr.zero, leadingCoef)) continue;\n\n                polR.setCoef(idxSrc, Fr.zero);\n                polR.setCoef(idxDst, Fr.add(polR.getCoef(idxDst), Fr.mul(beta, leadingCoef)));\n                this.setCoef(idxDst, Fr.add(this.getCoef(idxDst), leadingCoef));\n                console.log(idxDst + \" <-- \" + idxSrc);\n            }\n        }\n\n        this.print();\n        return polR;\n    }\n\n    fastDivByVanishing(data) {\n        const Fr = this.Fr;\n\n        for (let i = 0; i < data.length; i++) {\n\n            let m = data[i][0];\n            let beta = data[i][1];\n\n            if (this.degree() < m) {\n                throw new Error(\"divByVanishing polynomial divisor must be of degree lower than the dividend polynomial\");\n            }\n\n            let nThreads = 5;\n            let nElements = this.length() - m;\n            let nElementsBucket = Math.floor(nElements / nThreads / m);\n            let nElementsChunk = nElementsBucket * m;\n            let nElementsLast = nElements - nThreads * nElementsChunk;\n\n            //In C++ implementation this buffer will be allocated only once outside the loop\n            let polTmp = new Polynomial(this.length() > 2 << 14 ?\n                new BigBuffer(this.length() * Fr.n8) : new Uint8Array(this.length() * Fr.n8), this.curve, this.logger);\n\n            let ptr = this.coef;\n            this.coef = polTmp.coef;\n            polTmp.coef = ptr;\n\n            // STEP 1: Setejar els m valors del següent bucket al chunk actual, PARALEL·LITZAR\n            for (let k = 0; k < nThreads; k++) {\n                let idx0 = (k + 1) * nElementsChunk + nElementsLast;\n                for (let i = 0; i < m; i++) {\n                    this.setCoef(idx0 + i - m, polTmp.getCoef(idx0 + i));\n                }\n\n                for (let i = 0; i < nElementsChunk - m; i++) {\n                    let offset = idx0 - i - 1;\n                    let val = Fr.add(polTmp.getCoef(offset), Fr.mul(beta, this.getCoef(offset)));\n                    this.setCoef(offset - m, val);\n                }\n            }\n\n            //STEP 2: Setejar els valors del elements last NO PARAL·LELITZAR\n            let idx0 = nElementsLast;\n            let pending = nElementsLast;\n            for (let i = 0; i < m && pending; i++) {\n                this.setCoef(idx0 - i - 1, polTmp.getCoef(idx0 + m - i - 1));\n                pending--;\n            }\n\n            for (let i = 0; i < pending; i++) {\n                let offset = idx0 - i - 1;\n                let val = Fr.add(polTmp.getCoef(offset), Fr.mul(beta, this.getCoef(offset)));\n                this.setCoef(offset - m, val);\n            }\n\n            //Step 3: calcular acumulats NO  PARALEL·LITZAR\n\n            let acc = [];\n            let betaPow = Fr.one;\n            for (let i = 0; i < nElementsBucket; i++) {\n                betaPow = Fr.mul(betaPow, beta);\n            }\n            let currentBeta = Fr.one;\n\n            for (let k = nThreads; k > 0; k--) {\n                let idThread = k - 1;\n                let idx0 = idThread * nElementsChunk + nElementsLast;\n                acc[idThread] = [];\n\n                for (let i = 0; i < m; i++) {\n                    acc[idThread][i] = this.getCoef(idx0 + i);\n\n                    if (k !== nThreads) {\n                        acc[idThread][i] = Fr.add(acc[idThread][i], Fr.mul(betaPow, acc[idThread + 1][i]));\n                    }\n                }\n                currentBeta = Fr.mul(currentBeta, betaPow);\n            }\n\n            //STEP 4 recalcular  PARALEL·LITZAR\n            for (let k = 0; k < nThreads; k++) {\n\n                let idx0 = k * nElementsChunk + nElementsLast;\n                let currentBeta = beta; //Quan hopassem a C++ i ho paralelitzem aquesta variable ha de ser privada\n                let currentM = m - 1;\n\n                let limit = k === 0 ? nElementsLast : nElementsChunk;\n                for (let i = 0; i < limit; i++) {\n                    let offset = idx0 - i - 1;\n                    let val = Fr.add(this.getCoef(offset), Fr.mul(currentBeta, acc[k][currentM]));\n\n                    this.setCoef(offset, val);\n\n                    // To avoid modular operations in each loop...\n                    if (currentM === 0) {\n                        currentM = m - 1;\n                        currentBeta = Fr.mul(currentBeta, beta);\n                    } else {\n                        currentM--;\n                    }\n                }\n            }\n        }\n    }\n\n\n    // Divide polynomial by X - value\n    divByXSubValue(value) {\n        const coefs = this.length() > 2 << 14 ?\n            new BigBuffer(this.length() * this.Fr.n8) : new Uint8Array(this.length() * this.Fr.n8);\n\n        coefs.set(this.Fr.zero, (this.length() - 1) * this.Fr.n8);\n        coefs.set(this.coef.slice((this.length() - 1) * this.Fr.n8, this.length() * this.Fr.n8), (this.length() - 2) * this.Fr.n8);\n        for (let i = this.length() - 3; i >= 0; i--) {\n            let i_n8 = i * this.Fr.n8;\n            coefs.set(\n                this.Fr.add(\n                    this.coef.slice(i_n8 + this.Fr.n8, i_n8 + 2 * this.Fr.n8),\n                    this.Fr.mul(value, coefs.slice(i_n8 + this.Fr.n8, i_n8 + 2 * this.Fr.n8))\n                ),\n                i * this.Fr.n8\n            );\n        }\n        if (!this.Fr.eq(\n            this.coef.slice(0, this.Fr.n8),\n            this.Fr.mul(this.Fr.neg(value), coefs.slice(0, this.Fr.n8))\n        )) {\n            throw new Error(\"Polynomial does not divide\");\n        }\n\n        this.coef = coefs;\n    }\n\n    divZh(domainSize, extensions = 4) {\n        for (let i = 0; i < domainSize; i++) {\n            const i_n8 = i * this.Fr.n8;\n            this.coef.set(this.Fr.neg(this.coef.slice(i_n8, i_n8 + this.Fr.n8)), i_n8);\n        }\n\n        const upperBound = this.coef.byteLength / this.Fr.n8;\n        for (let i = domainSize; i < upperBound; i++) {\n            const i_n8 = i * this.Fr.n8;\n\n            const a = this.Fr.sub(\n                this.coef.slice((i - domainSize) * this.Fr.n8, (i - domainSize) * this.Fr.n8 + this.Fr.n8),\n                this.coef.slice(i_n8, i_n8 + this.Fr.n8)\n            );\n            this.coef.set(a, i_n8);\n            if (i > (domainSize * (extensions-1) - extensions)) {\n                if (!this.Fr.isZero(a)) {\n                    throw new Error(\"Polynomial is not divisible\");\n                }\n            }\n        }\n\n        return this;\n    }\n\n    divByZerofier(n, beta) {\n        let Fr = this.Fr;\n        const invBeta = Fr.inv(beta);\n        const invBetaNeg = Fr.neg(invBeta);\n\n        let isOne = Fr.eq(Fr.one, invBetaNeg);\n        let isNegOne = Fr.eq(Fr.negone, invBetaNeg);\n\n        if (!isOne) {\n            for (let i = 0; i < n; i++) {\n                const i_n8 = i * this.Fr.n8;\n                let element;\n\n                // If invBetaNeg === -1 we'll save a multiplication changing it by a neg function call\n                if (isNegOne) {\n                    element = Fr.neg(this.coef.slice(i_n8, i_n8 + this.Fr.n8));\n                } else {\n                    element = Fr.mul(invBetaNeg, this.coef.slice(i_n8, i_n8 + this.Fr.n8));\n                }\n\n                this.coef.set(element, i_n8);\n            }\n        }\n\n        isOne = Fr.eq(Fr.one, invBeta);\n        isNegOne = Fr.eq(Fr.negone, invBeta);\n\n        for (let i = n; i < this.length(); i++) {\n            const i_n8 = i * this.Fr.n8;\n            const i_prev_n8 = (i - n) * this.Fr.n8;\n\n            let element = this.Fr.sub(\n                this.coef.slice(i_prev_n8, i_prev_n8 + this.Fr.n8),\n                this.coef.slice(i_n8, i_n8 + this.Fr.n8)\n            );\n\n            // If invBeta === 1 we'll not do anything\n            if(!isOne) {\n                // If invBeta === -1 we'll save a multiplication changing it by a neg function call\n                if(isNegOne) {\n                    element = Fr.neg(element);\n                } else {\n                    element = Fr.mul(invBeta, element);\n                }\n            }\n\n            this.coef.set(element, i_n8);\n\n            // Check if polynomial is divisible by checking if n high coefficients are zero\n            if (i > this.length() - n - 1) {\n                if (!this.Fr.isZero(element)) {\n                    throw new Error(\"Polynomial is not divisible\");\n                }\n            }\n        }\n\n        return this;\n    }\n\n// function divideByVanishing(f, n, p) {\n//     // polynomial division f(X) / (X^n - 1) with remainder\n//     // very cheap, 0 multiplications\n//     // strategy:\n//     // start with q(X) = 0, r(X) = f(X)\n//     // then start changing q, r while preserving the identity:\n//     // f(X) = q(X) * (X^n - 1) + r(X)\n//     // in every step, move highest-degree term of r into the product\n//     // => r eventually has degree < n and we're done\n//     let q = Array(f.length).fill(0n);\n//     let r = [...f];\n//     for (let i = f.length - 1; i >= n; i--) {\n//         let leadingCoeff = r[i];\n//         if (leadingCoeff === 0n) continue;\n//         r[i] = 0n;\n//         r[i - n] = mod(r[i - n] + leadingCoeff, p);\n//         q[i - n] = mod(q[i - n] + leadingCoeff, p);\n//     }\n//     return [q, r];\n// }\n\n    byX() {\n        const coefs = (this.length() + 1) > 2 << 14 ?\n            new BigBuffer(this.coef.byteLength + this.Fr.n8) : new Uint8Array(this.coef.byteLength + this.Fr.n8);\n        coefs.set(this.Fr.zero, 0);\n        coefs.set(this.coef, this.Fr.n8);\n\n        this.coef = coefs;\n    }\n\n// Compute a new polynomial f(x^n) from f(x)\n// f(x)   = a_0 + a_1·x + a_2·x^2 + ... + a_j·x^j\n// f(x^n) = a_0 + a_1·x^n + a_2·x^2n + ... + a_j·x^jn\n    static\n    async expX(polynomial, n, truncate = false) {\n        const Fr = polynomial.Fr;\n\n        if (n < 1) {\n            // n == 0 not allowed because it has no sense, but if it's necessary we have to return\n            // a zero degree polynomial with a constant coefficient equals to the sum of all the original coefficients\n            throw new Error(\"Compute a new polynomial to a zero or negative number is not allowed\");\n        } else if (1 === n) {\n            return await Polynomial.fromEvaluations(polynomial.coef, curve, polynomial.logger);\n        }\n\n        // length is the length of non-constant coefficients\n        // if truncate === true, the highest zero coefficients (if exist) will be removed\n        const length = truncate ? polynomial.degree() : (polynomial.length() - 1);\n        const bufferDst = (length * n + 1) > 2 << 14 ?\n            new BigBuffer((length * n + 1) * Fr.n8) : new Uint8Array((length * n + 1) * Fr.n8);\n\n        // Copy constant coefficient as is because is not related to x\n        bufferDst.set(polynomial.getCoef(0), 0);\n\n        for (let i = 1; i <= length; i++) {\n            const i_sFr = i * Fr.n8;\n\n            const coef = polynomial.getCoef(i);\n            bufferDst.set(coef, i_sFr * n);\n        }\n\n        return new Polynomial(bufferDst, polynomial.curve, polynomial.logger);\n    }\n\n    split(numPols, degPols, blindingFactors) {\n        if (numPols < 1) {\n            throw new Error(`Polynomials can't be split in ${numPols} parts`);\n        } else if (1 === numPols) {\n            return [this];\n        }\n\n        //blinding factors can be void or must have a length of numPols - 1\n        if (0 !== blindingFactors.length && blindingFactors.length < numPols - 1) {\n            throw new Error(`Blinding factors length must be ${numPols - 1}`);\n        }\n\n        const chunkByteLength = (degPols + 1) * this.Fr.n8;\n        let res = [];\n\n        // Check polynomial can be split in numChunks parts of chunkSize bytes...\n        const numRealPols = Math.ceil((this.degree() + 1) * this.Fr.n8 / chunkByteLength);\n        if (numRealPols < numPols) {\n            //throw new Error(`Polynomial is short to be split in ${numPols} parts of ${degPols} coefficients each.`);\n            for (let i = numRealPols; i < numPols; i++) {\n                res[i] = new Polynomial(new Uint8Array(this.Fr.n8), this.curve, this.logger);\n            }\n        }\n\n        numPols = Math.min(numPols, numRealPols);\n        for (let i = 0; i < numPols; i++) {\n            const isLast = (numPols - 1) === i;\n            const byteLength = isLast ? this.coef.byteLength - ((numPols - 1) * chunkByteLength) : chunkByteLength + this.Fr.n8;\n\n            let buff = (byteLength / this.Fr.n8) > 2 << 14 ? new BigBuffer(byteLength) : new Uint8Array(byteLength);\n            res[i] = new Polynomial(buff, this.curve, this.logger);\n\n            const fr = i * chunkByteLength;\n            const to = isLast ? this.coef.byteLength : (i + 1) * chunkByteLength;\n            res[i].coef.set(this.coef.slice(fr, to), 0);\n\n            // Add a blinding factor as higher degree\n            if (!isLast) {\n                res[i].coef.set(blindingFactors[i], chunkByteLength);\n            }\n\n            // Sub blinding factor to the lowest degree\n            if (0 !== i) {\n                const lowestDegree = this.Fr.sub(res[i].coef.slice(0, this.Fr.n8), blindingFactors[i - 1]);\n                res[i].coef.set(lowestDegree, 0);\n            }\n\n            if (isLast) {\n                res[i].truncate();\n            }\n        }\n\n        return res;\n\n        // // compute t_low(X)\n        // let polTLow = new BigBuffer((chunkSize + 1) * n8r);\n        // polTLow.set(t.slice(0, zkey.domainSize * n8r), 0);\n        // // Add blinding scalar b_10 as a new coefficient n\n        // polTLow.set(ch.b[10], zkey.domainSize * n8r);\n        //\n        // // compute t_mid(X)\n        // let polTMid = new BigBuffer((zkey.domainSize + 1) * n8r);\n        // polTMid.set(t.slice(zkey.domainSize * n8r, zkey.domainSize * 2 * n8r), 0);\n        // // Subtract blinding scalar b_10 to the lowest coefficient of t_mid\n        // const lowestMid = Fr.sub(polTMid.slice(0, n8r), ch.b[10]);\n        // polTMid.set(lowestMid, 0);\n        // // Add blinding scalar b_11 as a new coefficient n\n        // polTMid.set(ch.b[11], zkey.domainSize * n8r);\n        //\n        // // compute t_high(X)\n        // let polTHigh = new BigBuffer((zkey.domainSize + 6) * n8r);\n        // polTHigh.set(t.slice(zkey.domainSize * 2 * n8r, (zkey.domainSize * 3 + 6) * n8r), 0);\n        // //Subtract blinding scalar b_11 to the lowest coefficient of t_high\n        // const lowestHigh = Fr.sub(polTHigh.slice(0, n8r), ch.b[11]);\n        // polTHigh.set(lowestHigh, 0);\n        //\n        // proof.T1 = await expTau(polTLow, \"multiexp T1\");\n        // proof.T2 = await expTau(polTMid, \"multiexp T2\");\n        // proof.T3 = await expTau(polTHigh, \"multiexp T3\");\n    }\n\n// split2(degPols, blindingFactors) {\n//     let currentDegree = this.degree();\n//     const numFilledPols = Math.ceil((currentDegree + 1) / (degPols + 1));\n//\n//     //blinding factors can be void or must have a length of numPols - 1\n//     if (0 !== blindingFactors.length && blindingFactors.length < numFilledPols - 1) {\n//         throw new Error(`Blinding factors length must be ${numFilledPols - 1}`);\n//     }\n//\n//     const chunkByteLength = (degPols + 1) * this.Fr.n8;\n//\n//     // Check polynomial can be split in numChunks parts of chunkSize bytes...\n//     if (this.coef.byteLength / chunkByteLength <= numFilledPols - 1) {\n//         throw new Error(`Polynomial is short to be split in ${numFilledPols} parts of ${degPols} coefficients each.`);\n//     }\n//\n//     let res = [];\n//     for (let i = 0; i < numFilledPols; i++) {\n//         const isLast = (numFilledPols - 1) === i;\n//         const byteLength = isLast ? (currentDegree + 1) * this.Fr.n8 - ((numFilledPols - 1) * chunkByteLength) : chunkByteLength + this.Fr.n8;\n//\n//         res[i] = new Polynomial(new BigBuffer(byteLength), this.Fr, this.logger);\n//         const fr = i * chunkByteLength;\n//         const to = isLast ? (currentDegree + 1) * this.Fr.n8 : (i + 1) * chunkByteLength;\n//         res[i].coef.set(this.coef.slice(fr, to), 0);\n//\n//         // Add a blinding factor as higher degree\n//         if (!isLast) {\n//             res[i].coef.set(blindingFactors[i], chunkByteLength);\n//         }\n//\n//         // Sub blinding factor to the lowest degree\n//         if (0 !== i) {\n//             const lowestDegree = this.Fr.sub(res[i].coef.slice(0, this.Fr.n8), blindingFactors[i - 1]);\n//             res[i].coef.set(lowestDegree, 0);\n//         }\n//     }\n//\n//     return res;\n// }\n\n// merge(pols, overlap = true) {\n//     let length = 0;\n//     for (let i = 0; i < pols.length; i++) {\n//         length += pols[i].length();\n//     }\n//\n//     if (overlap) {\n//         length -= pols.length - 1;\n//     }\n//\n//     let res = new Polynomial(new BigBuffer(length * this.Fr.n8));\n//     for (let i = 0; i < pols.length; i++) {\n//         const byteLength = pols[i].coef.byteLength;\n//         if (0 === i) {\n//             res.coef.set(pols[i].coef, 0);\n//         } else {\n//\n//         }\n//     }\n//\n//     return res;\n// }\n\n    truncate() {\n        const deg = this.degree();\n        if (deg + 1 < this.coef.byteLength / this.Fr.n8) {\n            const newCoefs = (deg + 1) > 2 << 14 ?\n                new BigBuffer((deg + 1) * this.Fr.n8) : new Uint8Array((deg + 1) * this.Fr.n8);\n\n            newCoefs.set(this.coef.slice(0, (deg + 1) * this.Fr.n8), 0);\n            this.coef = newCoefs;\n        }\n    }\n\n    static lagrangePolynomialInterpolation(xArr, yArr, curve) {\n        const Fr = curve.Fr;\n        let polynomial = computeLagrangePolynomial(0);\n        for (let i = 1; i < xArr.length; i++) {\n            polynomial.add(computeLagrangePolynomial(i));\n        }\n\n        return polynomial;\n\n        function computeLagrangePolynomial(i) {\n            let polynomial;\n\n            for (let j = 0; j < xArr.length; j++) {\n                if (j === i) continue;\n\n                if (polynomial === undefined) {\n                    let buff = (xArr.length) > 2 << 14 ?\n                        new BigBuffer((xArr.length) * Fr.n8) : new Uint8Array((xArr.length) * Fr.n8);\n                    polynomial = new Polynomial(buff, curve);\n                    polynomial.setCoef(0, Fr.neg(xArr[j]));\n                    polynomial.setCoef(1, Fr.one);\n                } else {\n                    polynomial.byXSubValue(xArr[j]);\n                }\n            }\n\n            let denominator = polynomial.evaluate(xArr[i]);\n            denominator = Fr.inv(denominator);\n            const mulFactor = Fr.mul(yArr[i], denominator);\n\n            polynomial.mulScalar(mulFactor);\n\n            return polynomial;\n        }\n    }\n\n    static zerofierPolynomial(xArr, curve) {\n        const Fr = curve.Fr;\n        let buff = (xArr.length + 1) > 2 << 14 ?\n            new BigBuffer((xArr.length + 1) * Fr.n8) : new Uint8Array((xArr.length + 1) * Fr.n8);\n        let polynomial = new Polynomial(buff, curve);\n\n        // Build a zerofier polynomial with the following form:\n        // zerofier(X) = (X-xArr[0])(X-xArr[1])...(X-xArr[n])\n        polynomial.setCoef(0, Fr.neg(xArr[0]));\n        polynomial.setCoef(1, Fr.one);\n\n        for (let i = 1; i < xArr.length; i++) {\n            polynomial.byXSubValue(xArr[i]);\n        }\n\n        return polynomial;\n    }\n\n    print() {\n        const Fr = this.Fr;\n        let res = \"\";\n        for (let i = this.degree(); i >= 0; i--) {\n            const coef = this.getCoef(i);\n            if (!Fr.eq(Fr.zero, coef)) {\n                if (Fr.isNegative(coef)) {\n                    res += \" - \";\n                } else if (i !== this.degree()) {\n                    res += \" + \";\n                }\n                res += Fr.toString(coef);\n                if (i > 0) {\n                    res += i > 1 ? \"x^\" + i : \"x\";\n                }\n            }\n        }\n        console.log(res);\n    }\n\n    async multiExponentiation(PTau, name) {\n        const n = this.coef.byteLength / this.Fr.n8;\n        const PTauN = PTau.slice(0, n * this.G1.F.n8 * 2);\n        const bm = await this.Fr.batchFromMontgomery(this.coef);\n        let res = await this.G1.multiExpAffine(PTauN, bm, this.logger, name);\n        res = this.G1.toAffine(res);\n        return res;\n    }\n}\n\n/*\n    Copyright 2022 iden3 association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nclass Evaluations {\n    constructor(evaluations, curve, logger) {\n        this.eval = evaluations;\n        this.curve = curve;\n        this.Fr = curve.Fr;\n        this.logger = logger;\n    }\n\n    static async fromPolynomial(polynomial, extension, curve, logger) {\n        const coefficientsN = new BigBuffer(polynomial.length() * extension * curve.Fr.n8);\n        coefficientsN.set(polynomial.coef, 0);\n\n        const evaluations = await curve.Fr.fft(coefficientsN);\n\n        return new Evaluations(evaluations, curve, logger);\n    }\n\n    getEvaluation(index) {\n        const i_n8 = index * this.Fr.n8;\n\n        if (i_n8 + this.Fr.n8 > this.eval.byteLength) {\n            throw new Error(\"Evaluations.getEvaluation() out of bounds\");\n        }\n\n        return this.eval.slice(i_n8, i_n8 + this.Fr.n8);\n    }\n\n    length() {\n        let length = this.eval.byteLength / this.Fr.n8;\n        if (length !== Math.floor(this.eval.byteLength / this.Fr.n8)) {\n            throw new Error(\"Polynomial evaluations buffer has incorrect size\");\n        }\n        if (0 === length) {\n            this.logger.warn(\"Polynomial has length zero\");\n        }\n        return length;\n    }\n}\n\n/*\n    Copyright 2021 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\nconst {stringifyBigInts: stringifyBigInts$1} = utils;\n    \nasync function plonk16Prove(zkeyFileName, witnessFileName, logger) {\n    const {fd: fdWtns, sections: sectionsWtns} = await readBinFile(witnessFileName, \"wtns\", 2);\n\n    // Read witness file\n    if (logger) logger.debug(\"> Reading witness file\");\n    const wtns = await readHeader(fdWtns, sectionsWtns);\n\n    // Read zkey file\n    if (logger) logger.debug(\"> Reading zkey file\");\n    const {fd: fdZKey, sections: zkeySections} = await readBinFile(zkeyFileName, \"zkey\", 2);\n\n    const zkey = await readHeader$1(fdZKey, zkeySections);\n    if (zkey.protocol != \"plonk\") {\n        throw new Error(\"zkey file is not plonk\");\n    }\n\n    if (!Scalar.eq(zkey.r,  wtns.q)) {\n        throw new Error(\"Curve of the witness does not match the curve of the proving key\");\n    }\n\n    if (wtns.nWitness != zkey.nVars -zkey.nAdditions) {\n        throw new Error(`Invalid witness length. Circuit: ${zkey.nVars}, witness: ${wtns.nWitness}, ${zkey.nAdditions}`);\n    }\n\n    const curve = zkey.curve;\n\n    const Fr = curve.Fr;\n    const n8r = curve.Fr.n8;\n    const sDomain = zkey.domainSize * n8r;\n\n    if (logger) {\n        logger.debug(\"----------------------------\");\n        logger.debug(\"  PLONK PROVE SETTINGS\");\n        logger.debug(`  Curve:         ${curve.name}`);\n        logger.debug(`  Circuit power: ${zkey.power}`);\n        logger.debug(`  Domain size:   ${zkey.domainSize}`);\n        logger.debug(`  Vars:          ${zkey.nVars}`);\n        logger.debug(`  Public vars:   ${zkey.nPublic}`);\n        logger.debug(`  Constraints:   ${zkey.nConstraints}`);\n        logger.debug(`  Additions:     ${zkey.nAdditions}`);\n        logger.debug(\"----------------------------\");\n    }\n\n    //Read witness data\n    if (logger) logger.debug(\"> Reading witness file data\");\n    const buffWitness = await readSection(fdWtns, sectionsWtns, 2);\n\n    // First element in plonk is not used and can be any value. (But always the same).\n    // We set it to zero to go faster in the exponentiations.\n    buffWitness.set(Fr.zero, 0);\n    const buffInternalWitness = new BigBuffer(n8r*zkey.nAdditions);\n\n    let buffers = {};\n    let polynomials = {};\n    let evaluations = {};\n\n    let challenges = {};\n    let proof = new Proof(curve, logger);\n    const transcript = new Keccak256Transcript(curve);\n\n    if (logger) logger.debug(`> Reading Section ${ZKEY_PL_ADDITIONS_SECTION}. Additions`);\n    await calculateAdditions();\n\n    if (logger) logger.debug(`> Reading Section ${ZKEY_PL_SIGMA_SECTION}. Sigma1, Sigma2 & Sigma 3`);\n    if (logger) logger.debug(\"··· Reading Sigma polynomials \");\n    polynomials.Sigma1 = new Polynomial(new BigBuffer(sDomain), curve, logger);\n    polynomials.Sigma2 = new Polynomial(new BigBuffer(sDomain), curve, logger);\n    polynomials.Sigma3 = new Polynomial(new BigBuffer(sDomain), curve, logger);\n\n    await fdZKey.readToBuffer(polynomials.Sigma1.coef, 0, sDomain, zkeySections[ZKEY_PL_SIGMA_SECTION][0].p);\n    await fdZKey.readToBuffer(polynomials.Sigma2.coef, 0, sDomain, zkeySections[ZKEY_PL_SIGMA_SECTION][0].p + 5 * sDomain);\n    await fdZKey.readToBuffer(polynomials.Sigma3.coef, 0, sDomain, zkeySections[ZKEY_PL_SIGMA_SECTION][0].p + 10 * sDomain);\n\n    if (logger) logger.debug(\"··· Reading Sigma evaluations\");\n    evaluations.Sigma1 = new Evaluations(new BigBuffer(sDomain * 4), curve, logger);\n    evaluations.Sigma2 = new Evaluations(new BigBuffer(sDomain * 4), curve, logger);\n    evaluations.Sigma3 = new Evaluations(new BigBuffer(sDomain * 4), curve, logger);\n\n    await fdZKey.readToBuffer(evaluations.Sigma1.eval, 0, sDomain * 4, zkeySections[ZKEY_PL_SIGMA_SECTION][0].p + sDomain);\n    await fdZKey.readToBuffer(evaluations.Sigma2.eval, 0, sDomain * 4, zkeySections[ZKEY_PL_SIGMA_SECTION][0].p + 6 * sDomain);\n    await fdZKey.readToBuffer(evaluations.Sigma3.eval, 0, sDomain * 4, zkeySections[ZKEY_PL_SIGMA_SECTION][0].p + 11 * sDomain);\n\n    if (logger) logger.debug(`> Reading Section ${ZKEY_PL_PTAU_SECTION}. Powers of Tau`);\n    const PTau = await readSection(fdZKey, zkeySections, ZKEY_PL_PTAU_SECTION);\n\n    let publicSignals = [];\n\n    for (let i=1; i<= zkey.nPublic; i++) {\n        const pub = buffWitness.slice(i*Fr.n8, i*Fr.n8+Fr.n8);\n        publicSignals.push(Scalar.fromRprLE(pub));\n    }\n\n    if (logger) logger.debug(\"\");\n    if (logger) logger.debug(\"> ROUND 1\");\n    await round1();\n\n    if (logger) logger.debug(\"> ROUND 2\");\n    await round2();\n\n    if (logger) logger.debug(\"> ROUND 3\");\n    await round3();\n\n    if (logger) logger.debug(\"> ROUND 4\");\n    await round4();\n\n    if (logger) logger.debug(\"> ROUND 5\");\n    await round5();\n\n    ///////////////////////\n    // Final adjustments //\n    ///////////////////////\n\n    await fdZKey.close();\n    await fdWtns.close();\n\n    // Prepare proof\n    let _proof = proof.toObjectProof(false);\n    _proof.protocol = \"plonk\";\n    _proof.curve = curve.name;\n    \n    if (logger) logger.debug(\"PLONK PROVER FINISHED\");\n\n    return {\n        proof: stringifyBigInts$1(_proof),\n        publicSignals: stringifyBigInts$1(publicSignals)\n    };\n\n    async function calculateAdditions() {\n        if (logger) logger.debug(\"··· Computing additions\");\n        const additionsBuff = await readSection(fdZKey, zkeySections, ZKEY_PL_ADDITIONS_SECTION);\n\n        // sizes: wireId_x = 4 bytes (32 bits), factor_x = field size bits\n        // Addition form: wireId_a wireId_b factor_a factor_b (size is 4 + 4 + sFr + sFr)\n        const sSum = 8 + n8r * 2;\n\n        for (let i = 0; i < zkey.nAdditions; i++) {\n            if (logger && (0 !== i) && (i % 100000 === 0)) logger.debug(`    addition ${i}/${zkey.nAdditions}`);\n\n            // Read addition values\n            let offset = i * sSum;\n            const signalId1 = readUInt32(additionsBuff, offset);\n            offset += 4;\n            const signalId2 = readUInt32(additionsBuff, offset);\n            offset += 4;\n            const factor1 = additionsBuff.slice(offset, offset + n8r);\n            offset += n8r;\n            const factor2 = additionsBuff.slice(offset, offset + n8r);\n\n            // Get witness value\n            const witness1 = getWitness(signalId1);\n            const witness2 = getWitness(signalId2);\n\n            //Calculate final result\n            const result = Fr.add(Fr.mul(factor1, witness1), Fr.mul(factor2, witness2));\n\n            buffInternalWitness.set(result, n8r * i);\n        }\n    }\n\n    function readUInt32(b, o) {\n        const buff = b.slice(o, o+4);\n        const buffV = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);\n        return buffV.getUint32(0, true);\n    }\n\n    function getWitness(idx) {\n        if (idx < zkey.nVars-zkey.nAdditions) {\n            return buffWitness.slice(idx*n8r, idx*n8r+n8r);\n        } else if (idx < zkey.nVars) {\n            return buffInternalWitness.slice((idx - (zkey.nVars-zkey.nAdditions))*n8r, (idx-(zkey.nVars-zkey.nAdditions))*n8r + n8r);\n        } else {\n            return curve.Fr.zero;\n        }\n    }\n\n    async function round1() {\n        // STEP 1.1 - Generate random blinding scalars (b1, ..., b11) ∈ F\n        challenges.b = [];\n        for (let i=1; i<=11; i++) {\n            challenges.b[i] = curve.Fr.random();\n        }\n\n        // STEP 1.2 - Compute wire polynomials a(X), b(X) and c(X)\n        if (logger) logger.debug(\"> Computing A, B, C wire polynomials\");\n        await computeWirePolynomials();\n\n        // STEP 1.3 - Compute [a]_1, [b]_1, [c]_1\n        if (logger) logger.debug(\"> Computing A, B, C MSM\");\n        let commitA = await polynomials.A.multiExponentiation(PTau, \"A\");\n        let commitB = await polynomials.B.multiExponentiation(PTau, \"B\");\n        let commitC = await polynomials.C.multiExponentiation(PTau, \"C\");\n\n        // First output of the prover is ([A]_1, [B]_1, [C]_1)\n        proof.addPolynomial(\"A\", commitA);\n        proof.addPolynomial(\"B\", commitB);\n        proof.addPolynomial(\"C\", commitC);\n\n        return 0;\n    }\n\n    async function computeWirePolynomials() {\n        if (logger) logger.debug(\"··· Reading data from zkey file\");\n\n        // Build A, B and C evaluations buffer from zkey and witness files\n        buffers.A = new BigBuffer(sDomain);\n        buffers.B = new BigBuffer(sDomain);\n        buffers.C = new BigBuffer(sDomain);\n\n        // Read zkey file to the buffers\n        const aMapBuff = await readSection(fdZKey, zkeySections, ZKEY_PL_A_MAP_SECTION);\n        const bMapBuff = await readSection(fdZKey, zkeySections, ZKEY_PL_B_MAP_SECTION);\n        const cMapBuff = await readSection(fdZKey, zkeySections, ZKEY_PL_C_MAP_SECTION);\n\n        // Compute all witness from signal ids and set them to A,B & C buffers\n        for (let i = 0; i < zkey.nConstraints; i++) {\n            const i_sFr = i * n8r;\n            const offset = i * 4;\n\n            // Compute A value from a signal id\n            const signalIdA = readUInt32(aMapBuff, offset);\n            buffers.A.set(getWitness(signalIdA), i_sFr);\n\n            // Compute B value from a signal id\n            const signalIdB = readUInt32(bMapBuff, offset);\n            buffers.B.set(getWitness(signalIdB), i_sFr);\n\n            // Compute C value from a signal id\n            const signalIdC = readUInt32(cMapBuff, offset);\n            buffers.C.set(getWitness(signalIdC), i_sFr);\n        }\n\n        buffers.A = await Fr.batchToMontgomery(buffers.A);\n        buffers.B = await Fr.batchToMontgomery(buffers.B);\n        buffers.C = await Fr.batchToMontgomery(buffers.C);\n\n        // Compute the coefficients of the wire polynomials a(X), b(X) and c(X) from A,B & C buffers\n        if (logger) logger.debug(\"··· Computing A ifft\");\n        polynomials.A = await Polynomial.fromEvaluations(buffers.A, curve, logger);\n        if (logger) logger.debug(\"··· Computing B ifft\");\n        polynomials.B = await Polynomial.fromEvaluations(buffers.B, curve, logger);\n        if (logger) logger.debug(\"··· Computing C ifft\");\n        polynomials.C = await Polynomial.fromEvaluations(buffers.C, curve, logger);\n\n        // Compute extended evaluations of a(X), b(X) and c(X) polynomials\n        if (logger) logger.debug(\"··· Computing A fft\");\n        evaluations.A = await Evaluations.fromPolynomial(polynomials.A, 4, curve, logger);\n        if (logger) logger.debug(\"··· Computing B fft\");\n        evaluations.B = await Evaluations.fromPolynomial(polynomials.B, 4, curve, logger);\n        if (logger) logger.debug(\"··· Computing C fft\");\n        evaluations.C = await Evaluations.fromPolynomial(polynomials.C, 4, curve, logger);\n\n        // Blind a(X), b(X) and c(X) polynomials coefficients with blinding scalars b\n        polynomials.A.blindCoefficients([challenges.b[2], challenges.b[1]]);\n        polynomials.B.blindCoefficients([challenges.b[4], challenges.b[3]]);\n        polynomials.C.blindCoefficients([challenges.b[6], challenges.b[5]]);\n\n        // Check degrees\n        if (polynomials.A.degree() >= zkey.domainSize + 2) {\n            throw new Error(\"A Polynomial is not well calculated\");\n        }\n        if (polynomials.B.degree() >= zkey.domainSize + 2) {\n            throw new Error(\"B Polynomial is not well calculated\");\n        }\n        if (polynomials.C.degree() >= zkey.domainSize + 2) {\n            throw new Error(\"C Polynomial is not well calculated\");\n        }        \n    }\n\n    async function round2() {\n        // STEP 2.1 - Compute permutation challenge beta and gamma ∈ F\n        // Compute permutation challenge beta\n        if (logger) logger.debug(\"> Computing challenges beta and gamma\");\n        transcript.reset();\n\n        transcript.addPolCommitment(zkey.Qm);\n        transcript.addPolCommitment(zkey.Ql);\n        transcript.addPolCommitment(zkey.Qr);\n        transcript.addPolCommitment(zkey.Qo);\n        transcript.addPolCommitment(zkey.Qc);\n        transcript.addPolCommitment(zkey.S1);\n        transcript.addPolCommitment(zkey.S2);\n        transcript.addPolCommitment(zkey.S3);\n\n        // Add A to the transcript\n        for (let i = 0; i < zkey.nPublic; i++) {\n            transcript.addScalar(buffers.A.slice(i * n8r, i * n8r + n8r));\n        }\n\n        // Add A, B, C to the transcript\n        transcript.addPolCommitment(proof.getPolynomial(\"A\"));\n        transcript.addPolCommitment(proof.getPolynomial(\"B\"));\n        transcript.addPolCommitment(proof.getPolynomial(\"C\"));\n\n        challenges.beta = transcript.getChallenge();\n        if (logger) logger.debug(\"··· challenges.beta: \" + Fr.toString(challenges.beta, 16));\n\n        // Compute permutation challenge gamma\n        transcript.reset();\n        transcript.addScalar(challenges.beta);\n        challenges.gamma = transcript.getChallenge();\n        if (logger) logger.debug(\"··· challenges.gamma: \" + Fr.toString(challenges.gamma, 16));\n    \n        // STEP 2.2 - Compute permutation polynomial z(X)\n        if (logger) logger.debug(\"> Computing Z polynomial\");\n        await computeZ();\n\n        // STEP 2.3 - Compute permutation [z]_1\n        if (logger) logger.debug(\"> Computing Z MSM\");\n        let commitZ = await polynomials.Z.multiExponentiation(PTau, \"Z\");\n\n        // Second output of the prover is ([Z]_1)\n        proof.addPolynomial(\"Z\", commitZ);\n    }\n\n    async function computeZ() {\n        if (logger) logger.debug(\"··· Computing Z evaluations\");\n\n        let numArr = new BigBuffer(sDomain);\n        let denArr = new BigBuffer(sDomain);\n\n        // Set the first values to 1\n        numArr.set(Fr.one, 0);\n        denArr.set(Fr.one, 0);\n\n        // Set initial omega\n        let w = Fr.one;\n        for (let i = 0; i < zkey.domainSize; i++) {\n            const i_n8r = i * n8r;\n            \n            const a = buffers.A.slice(i_n8r, i_n8r + n8r);\n            const b = buffers.B.slice(i_n8r, i_n8r + n8r);\n            const c = buffers.C.slice(i_n8r, i_n8r + n8r);\n\n            // Z(X) := numArr / denArr\n            // numArr := (a + beta·ω + gamma)(b + beta·ω·k1 + gamma)(c + beta·ω·k2 + gamma)\n            const betaw = Fr.mul(challenges.beta, w);\n\n            let n1 = Fr.add(a, betaw);\n            n1 = Fr.add(n1, challenges.gamma);\n\n            let n2 = Fr.add(b, Fr.mul(zkey.k1, betaw));\n            n2 = Fr.add(n2, challenges.gamma);\n\n            let n3 = Fr.add(c, Fr.mul(zkey.k2, betaw));\n            n3 = Fr.add(n3, challenges.gamma);\n\n            let num = Fr.mul(n1, Fr.mul(n2, n3));\n\n            // denArr := (a + beta·sigma1 + gamma)(b + beta·sigma2 + gamma)(c + beta·sigma3 + gamma)\n            let d1 = Fr.add(a, Fr.mul(evaluations.Sigma1.getEvaluation(i * 4), challenges.beta));\n            d1 = Fr.add(d1, challenges.gamma);\n\n            let d2 = Fr.add(b, Fr.mul(evaluations.Sigma2.getEvaluation(i * 4), challenges.beta));\n            d2 = Fr.add(d2, challenges.gamma);\n\n            let d3 = Fr.add(c, Fr.mul(evaluations.Sigma3.getEvaluation(i * 4), challenges.beta));\n            d3 = Fr.add(d3, challenges.gamma);\n\n            let den = Fr.mul(d1, Fr.mul(d2, d3));\n\n            // Multiply current num value with the previous one saved in numArr\n            num = Fr.mul(numArr.slice(i_n8r, i_n8r + n8r), num);\n            numArr.set(num, ((i + 1) % zkey.domainSize) * n8r);\n\n            // Multiply current den value with the previous one saved in denArr\n            den = Fr.mul(denArr.slice(i_n8r, i_n8r + n8r), den);\n            denArr.set(den, ((i + 1) % zkey.domainSize) * n8r);\n\n            w = Fr.mul(w, Fr.w[zkey.power]);\n        }\n\n        // Compute the inverse of denArr to compute in the next command the\n        // division numArr/denArr by multiplying num · 1/denArr\n        denArr = await Fr.batchInverse(denArr);\n\n        // TODO: Do it in assembly and in parallel\n        // Multiply numArr · denArr where denArr was inverted in the previous command\n        for (let i = 0; i < zkey.domainSize; i++) {\n            const i_sFr = i * n8r;\n\n            const z = Fr.mul(numArr.slice(i_sFr, i_sFr + n8r), denArr.slice(i_sFr, i_sFr + n8r));\n            numArr.set(z, i_sFr);\n        }\n\n        // From now on the values saved on numArr will be Z(X) buffer\n        buffers.Z = numArr;\n\n        if (!Fr.eq(numArr.slice(0, n8r), Fr.one)) {\n            throw new Error(\"Copy constraints does not match\");\n        }\n\n        // Compute polynomial coefficients z(X) from buffers.Z\n        if (logger) logger.debug(\"··· Computing Z ifft\");\n        polynomials.Z = await Polynomial.fromEvaluations(buffers.Z, curve, logger);\n\n        // Compute extended evaluations of z(X) polynomial\n        if (logger) logger.debug(\"··· Computing Z fft\");\n        evaluations.Z = await Evaluations.fromPolynomial(polynomials.Z, 4, curve, logger);\n\n        // Blind z(X) polynomial coefficients with blinding scalars b\n        polynomials.Z.blindCoefficients([challenges.b[9], challenges.b[8], challenges.b[7]]);\n\n        // Check degree\n        if (polynomials.Z.degree() >= zkey.domainSize + 3) {\n            throw new Error(\"Z Polynomial is not well calculated\");\n        }\n\n        delete buffers.Z;\n    }\n\n    async function round3() {\n        if (logger) logger.debug(\"> Computing challenge alpha\");\n\n        // STEP 3.1 - Compute evaluation challenge alpha ∈ F\n        transcript.reset();\n        transcript.addScalar(challenges.beta);\n        transcript.addScalar(challenges.gamma);\n        transcript.addPolCommitment(proof.getPolynomial(\"Z\"));\n\n        challenges.alpha = transcript.getChallenge();\n        challenges.alpha2 = Fr.square(challenges.alpha);\n        if (logger) logger.debug(\"··· challenges.alpha: \" + Fr.toString(challenges.alpha, 16));\n\n        // Compute quotient polynomial T(X)\n        if (logger) logger.debug(\"> Computing T polynomial\");\n        await computeT();\n\n        // Compute [T1]_1, [T2]_1, [T3]_1\n        if (logger) logger.debug(\"> Computing T MSM\");\n        let commitT1 = await polynomials.T1.multiExponentiation(PTau, \"T1\");\n        let commitT2 = await polynomials.T2.multiExponentiation(PTau, \"T2\");\n        let commitT3 = await polynomials.T3.multiExponentiation(PTau, \"T3\");\n\n        // Third output of the prover is ([T1]_1, [T2]_1, [T3]_1)\n        proof.addPolynomial(\"T1\", commitT1);\n        proof.addPolynomial(\"T2\", commitT2);\n        proof.addPolynomial(\"T3\", commitT3);        \n    }\n\n    async function computeT() {\n        if (logger)\n            logger.debug(`··· Reading sections ${ZKEY_PL_QL_SECTION}, ${ZKEY_PL_QR_SECTION}` +\n                `, ${ZKEY_PL_QM_SECTION}, ${ZKEY_PL_QO_SECTION}, ${ZKEY_PL_QC_SECTION}. Q selectors`);\n        // Reserve memory for Q's evaluations\n        evaluations.QL = new Evaluations(new BigBuffer(sDomain * 4), curve, logger);\n        evaluations.QR = new Evaluations(new BigBuffer(sDomain * 4), curve, logger);\n        evaluations.QM = new Evaluations(new BigBuffer(sDomain * 4), curve, logger);\n        evaluations.QO = new Evaluations(new BigBuffer(sDomain * 4), curve, logger);\n        evaluations.QC = new Evaluations(new BigBuffer(sDomain * 4), curve, logger);\n\n        // Read Q's evaluations from zkey file\n        await fdZKey.readToBuffer(evaluations.QL.eval, 0, sDomain * 4, zkeySections[ZKEY_PL_QL_SECTION][0].p + sDomain);\n        await fdZKey.readToBuffer(evaluations.QR.eval, 0, sDomain * 4, zkeySections[ZKEY_PL_QR_SECTION][0].p + sDomain);\n        await fdZKey.readToBuffer(evaluations.QM.eval, 0, sDomain * 4, zkeySections[ZKEY_PL_QM_SECTION][0].p + sDomain);\n        await fdZKey.readToBuffer(evaluations.QO.eval, 0, sDomain * 4, zkeySections[ZKEY_PL_QO_SECTION][0].p + sDomain);\n        await fdZKey.readToBuffer(evaluations.QC.eval, 0, sDomain * 4, zkeySections[ZKEY_PL_QC_SECTION][0].p + sDomain);\n\n        // Read Lagrange polynomials & evaluations from zkey file\n        evaluations.Lagrange = new Evaluations(new BigBuffer(sDomain * 4 * zkey.nPublic), curve, logger);\n\n        for (let i = 0; i < zkey.nPublic; i++) {\n            await fdZKey.readToBuffer(evaluations.Lagrange.eval, i * sDomain * 4, sDomain * 4, zkeySections[ZKEY_PL_LAGRANGE_SECTION][0].p + i * 5 * sDomain + sDomain);\n        }\n\n        buffers.T = new BigBuffer(sDomain * 4);\n        buffers.Tz = new BigBuffer(sDomain * 4);\n\n        if (logger) logger.debug(\"··· Computing T evaluations\");\n\n        let w = Fr.one;\n        for (let i = 0; i < zkey.domainSize * 4; i++) {\n            if (logger && (0 !== i) && (i % 100000 === 0))\n                logger.debug(`      T evaluation ${i}/${zkey.domainSize * 4}`);\n\n            const a = evaluations.A.getEvaluation(i);\n            const b = evaluations.B.getEvaluation(i);\n            const c = evaluations.C.getEvaluation(i);\n            const z = evaluations.Z.getEvaluation(i);\n            const zw = evaluations.Z.getEvaluation((zkey.domainSize * 4 + 4 + i) % (zkey.domainSize * 4));\n\n            const qm = evaluations.QM.getEvaluation(i);\n            const ql = evaluations.QL.getEvaluation(i);\n            const qr = evaluations.QR.getEvaluation(i);\n            const qo = evaluations.QO.getEvaluation(i);\n            const qc = evaluations.QC.getEvaluation(i);\n            const s1 = evaluations.Sigma1.getEvaluation(i);\n            const s2 = evaluations.Sigma2.getEvaluation(i);\n            const s3 = evaluations.Sigma3.getEvaluation(i);\n\n            const ap = Fr.add(challenges.b[2], Fr.mul(challenges.b[1], w));\n            const bp = Fr.add(challenges.b[4], Fr.mul(challenges.b[3], w));\n            const cp = Fr.add(challenges.b[6], Fr.mul(challenges.b[5], w));\n\n            const w2 = Fr.square(w);\n            const zp = Fr.add(Fr.add(Fr.mul(challenges.b[7], w2), Fr.mul(challenges.b[8], w)), challenges.b[9]);\n            const wW = Fr.mul(w, Fr.w[zkey.power]);\n            const wW2 = Fr.square(wW);\n            const zWp = Fr.add(Fr.add(Fr.mul(challenges.b[7], wW2), Fr.mul(challenges.b[8], wW)), challenges.b[9]);\n\n            let pi = Fr.zero;\n            for (let j = 0; j < zkey.nPublic; j++) {\n                const offset = (j * 4 * zkey.domainSize) + i;\n\n                const lPol = evaluations.Lagrange.getEvaluation(offset);\n                const aVal = buffers.A.slice(j * n8r, (j + 1) * n8r);\n\n                pi = Fr.sub(pi, Fr.mul(lPol, aVal));\n            }\n\n            // e1 := a(X)b(X)qM(X) + a(X)qL(X) + b(X)qR(X) + c(X)qO(X) + PI(X) + qC(X)\n            let [e1, e1z] = MulZ.mul2(a, b, ap, bp, i % 4, Fr);\n            e1 = Fr.mul(e1, qm);\n            e1z = Fr.mul(e1z, qm);\n\n            e1 = Fr.add(e1, Fr.mul(a, ql));\n            e1z = Fr.add(e1z, Fr.mul(ap, ql));\n\n            e1 = Fr.add(e1, Fr.mul(b, qr));\n            e1z = Fr.add(e1z, Fr.mul(bp, qr));\n\n            e1 = Fr.add(e1, Fr.mul(c, qo));\n            e1z = Fr.add(e1z, Fr.mul(cp, qo));\n\n            e1 = Fr.add(e1, pi);\n            e1 = Fr.add(e1, qc);\n\n            // e2 := α[(a(X) + βX + γ)(b(X) + βk1X + γ)(c(X) + βk2X + γ)z(X)]\n            const betaw = Fr.mul(challenges.beta, w);\n            let e2a = a;\n            e2a = Fr.add(e2a, betaw);\n            e2a = Fr.add(e2a, challenges.gamma);\n\n            let e2b = b;\n            e2b = Fr.add(e2b, Fr.mul(betaw, zkey.k1));\n            e2b = Fr.add(e2b, challenges.gamma);\n\n            let e2c = c;\n            e2c = Fr.add(e2c, Fr.mul(betaw, zkey.k2));\n            e2c = Fr.add(e2c, challenges.gamma);\n\n            let e2d = z;\n\n            let [e2, e2z] = MulZ.mul4(e2a, e2b, e2c, e2d, ap, bp, cp, zp, i % 4, Fr);\n            e2 = Fr.mul(e2, challenges.alpha);\n            e2z = Fr.mul(e2z, challenges.alpha);\n\n            // e3 := α[(a(X) + βSσ1(X) + γ)(b(X) + βSσ2(X) + γ)(c(X) + βSσ3(X) + γ)z(Xω)]\n            let e3a = a;\n            e3a = Fr.add(e3a, Fr.mul(challenges.beta, s1));\n            e3a = Fr.add(e3a, challenges.gamma);\n\n            let e3b = b;\n            e3b = Fr.add(e3b, Fr.mul(challenges.beta, s2));\n            e3b = Fr.add(e3b, challenges.gamma);\n\n            let e3c = c;\n            e3c = Fr.add(e3c, Fr.mul(challenges.beta, s3));\n            e3c = Fr.add(e3c, challenges.gamma);\n\n            let e3d = zw;\n            let [e3, e3z] = MulZ.mul4(e3a, e3b, e3c, e3d, ap, bp, cp, zWp, i % 4, Fr);\n\n            e3 = Fr.mul(e3, challenges.alpha);\n            e3z = Fr.mul(e3z, challenges.alpha);\n\n            // e4 := α^2(z(X)−1)L1(X)\n            let e4 = Fr.sub(z, Fr.one);\n            e4 = Fr.mul(e4, evaluations.Lagrange.getEvaluation(i));\n            e4 = Fr.mul(e4, challenges.alpha2);\n\n            let e4z = Fr.mul(zp, evaluations.Lagrange.getEvaluation(i));\n            e4z = Fr.mul(e4z, challenges.alpha2);\n\n\n            let t = Fr.add(Fr.sub(Fr.add(e1, e2), e3), e4);\n            let tz = Fr.add(Fr.sub(Fr.add(e1z, e2z), e3z), e4z);\n\n            buffers.T.set(t, i * n8r);\n            buffers.Tz.set(tz, i * n8r);\n\n            w = Fr.mul(w, Fr.w[zkey.power + 2]);\n        }\n\n        // Compute the coefficients of the polynomial T0(X) from buffers.T0\n        if (logger)\n            logger.debug(\"··· Computing T ifft\");\n        polynomials.T = await Polynomial.fromEvaluations(buffers.T, curve, logger);\n\n        // Divide the polynomial T0 by Z_H(X)\n        if (logger)\n            logger.debug(\"··· Computing T / ZH\");\n        polynomials.T.divZh(zkey.domainSize, 4);\n\n        // Compute the coefficients of the polynomial Tz(X) from buffers.Tz\n        if (logger)\n            logger.debug(\"··· Computing Tz ifft\");\n        polynomials.Tz = await Polynomial.fromEvaluations(buffers.Tz, curve, logger);\n\n        // Add the polynomial T1z to T1 to get the final polynomial T1\n        polynomials.T.add(polynomials.Tz);\n\n        // Check degree\n        if (polynomials.T.degree() >= zkey.domainSize * 3 + 6) {\n            throw new Error(\"T Polynomial is not well calculated\");\n        }\n\n        // t(x) has degree 3n + 5, we are going to split t(x) into three smaller polynomials:\n        // T1' and T2'  with a degree < n and T3' with a degree n+5\n        // such that t(x) = T1'(X) + X^n T2'(X) + X^{2n} T3'(X)\n        // To randomize the parts we use blinding scalars b_10 and b_11 in a way that doesn't change t(X):\n        // T1(X) = T1'(X) + b_10 X^n\n        // T2(X) = T2'(X) - b_10 + b_11 X^n\n        // T3(X) = T3'(X) - b_11\n        // such that\n        // t(X) = T1(X) + X^n T2(X) + X^2n T3(X)\n        if (logger) logger.debug(\"··· Computing T1, T2, T3 polynomials\");\n        polynomials.T1 = new Polynomial(new BigBuffer((zkey.domainSize + 1) * n8r), curve, logger);\n        polynomials.T2 = new Polynomial(new BigBuffer((zkey.domainSize + 1) * n8r), curve, logger);\n        polynomials.T3 = new Polynomial(new BigBuffer((zkey.domainSize + 6) * n8r), curve, logger);\n\n        polynomials.T1.coef.set(polynomials.T.coef.slice(0, sDomain), 0);\n        polynomials.T2.coef.set(polynomials.T.coef.slice(sDomain, sDomain * 2), 0);\n        polynomials.T3.coef.set(polynomials.T.coef.slice(sDomain * 2, sDomain * 3 + 6 * n8r), 0);\n\n        // Add blinding scalar b_10 as a new coefficient n\n        polynomials.T1.setCoef(zkey.domainSize, challenges.b[10]);\n\n        // compute t_mid(X)\n        // Subtract blinding scalar b_10 to the lowest coefficient of t_mid\n        const lowestMid = Fr.sub(polynomials.T2.getCoef(0), challenges.b[10]);\n        polynomials.T2.setCoef(0, lowestMid);\n        polynomials.T2.setCoef(zkey.domainSize, challenges.b[11]);\n\n        // compute t_high(X)\n        //Subtract blinding scalar b_11 to the lowest coefficient of t_high\n        const lowestHigh = Fr.sub(polynomials.T3.getCoef(0), challenges.b[11]);\n        polynomials.T3.setCoef(0, lowestHigh);\n    }\n\n    async function round4() {\n        if (logger) logger.debug(\"> Computing challenge xi\");\n\n        // STEP 4.1 - Compute evaluation challenge xi ∈ F\n        transcript.reset();\n        transcript.addScalar(challenges.alpha);\n        transcript.addPolCommitment(proof.getPolynomial(\"T1\"));\n        transcript.addPolCommitment(proof.getPolynomial(\"T2\"));\n        transcript.addPolCommitment(proof.getPolynomial(\"T3\"));\n\n        challenges.xi = transcript.getChallenge();\n        challenges.xiw = Fr.mul(challenges.xi, Fr.w[zkey.power]);\n        \n        if (logger) logger.debug(\"··· challenges.xi: \" + Fr.toString(challenges.xi, 16));  \n\n        // Fourth output of the prover is ( a(xi), b(xi), c(xi), s1(xi), s2(xi), z(xiw) )\n        proof.addEvaluation(\"eval_a\", polynomials.A.evaluate(challenges.xi));\n        proof.addEvaluation(\"eval_b\", polynomials.B.evaluate(challenges.xi));\n        proof.addEvaluation(\"eval_c\", polynomials.C.evaluate(challenges.xi));\n        proof.addEvaluation(\"eval_s1\", polynomials.Sigma1.evaluate(challenges.xi));\n        proof.addEvaluation(\"eval_s2\", polynomials.Sigma2.evaluate(challenges.xi));\n        proof.addEvaluation(\"eval_zw\", polynomials.Z.evaluate(challenges.xiw));\n    }\n\n    async function round5() {\n        if (logger) logger.debug(\"> Computing challenge v\");\n        \n        // STEP 5.1 - Compute evaluation challenge v ∈ F\n        transcript.reset();\n        transcript.addScalar(challenges.xi);\n        transcript.addScalar(proof.getEvaluation(\"eval_a\"));\n        transcript.addScalar(proof.getEvaluation(\"eval_b\"));\n        transcript.addScalar(proof.getEvaluation(\"eval_c\"));\n        transcript.addScalar(proof.getEvaluation(\"eval_s1\"));\n        transcript.addScalar(proof.getEvaluation(\"eval_s2\"));\n        transcript.addScalar(proof.getEvaluation(\"eval_zw\"));\n\n        challenges.v = [];\n        challenges.v[1] = transcript.getChallenge();\n        if (logger) logger.debug(\"··· challenges.v: \" + Fr.toString(challenges.v[1], 16));\n\n        for (let i = 2; i < 6; i++) {\n            challenges.v[i] = Fr.mul(challenges.v[i - 1], challenges.v[1]);\n        }\n\n        // STEP 5.2 Compute linearisation polynomial r(X)\n        if (logger) logger.debug(\"> Computing linearisation polynomial R(X)\");\n        await computeR();\n\n        //STEP 5.3 Compute opening proof polynomial Wxi(X)\n        if (logger) logger.debug(\"> Computing opening proof polynomial Wxi(X) polynomial\");\n        computeWxi();\n\n        //STEP 5.4 Compute opening proof polynomial Wxiw(X)\n        if (logger) logger.debug(\"> Computing opening proof polynomial Wxiw(X) polynomial\");\n        computeWxiw();\n\n        if (logger) logger.debug(\"> Computing Wxi, Wxiw MSM\");\n        let commitWxi = await polynomials.Wxi.multiExponentiation(PTau, \"Wxi\");\n        let commitWxiw = await polynomials.Wxiw.multiExponentiation(PTau, \"Wxiw\");\n\n        // Fifth output of the prover is ([Wxi]_1, [Wxiw]_1)\n        proof.addPolynomial(\"Wxi\", commitWxi);\n        proof.addPolynomial(\"Wxiw\", commitWxiw);\n    }\n\n    async function computeR() {\n        const Fr = curve.Fr;\n    \n        // Reserve memory for Q's polynomials\n        polynomials.QL = new Polynomial(new BigBuffer(sDomain), curve, logger);\n        polynomials.QR = new Polynomial(new BigBuffer(sDomain), curve, logger);\n        polynomials.QM = new Polynomial(new BigBuffer(sDomain), curve, logger);\n        polynomials.QO = new Polynomial(new BigBuffer(sDomain), curve, logger);\n        polynomials.QC = new Polynomial(new BigBuffer(sDomain), curve, logger);\n\n        // Read Q's evaluations from zkey file\n        await fdZKey.readToBuffer(polynomials.QL.coef, 0, sDomain, zkeySections[ZKEY_PL_QL_SECTION][0].p);\n        await fdZKey.readToBuffer(polynomials.QR.coef, 0, sDomain, zkeySections[ZKEY_PL_QR_SECTION][0].p);\n        await fdZKey.readToBuffer(polynomials.QM.coef, 0, sDomain, zkeySections[ZKEY_PL_QM_SECTION][0].p);\n        await fdZKey.readToBuffer(polynomials.QO.coef, 0, sDomain, zkeySections[ZKEY_PL_QO_SECTION][0].p);\n        await fdZKey.readToBuffer(polynomials.QC.coef, 0, sDomain, zkeySections[ZKEY_PL_QC_SECTION][0].p);   \n        \n        challenges.xin = challenges.xi;\n        for (let i = 0; i < zkey.power; i++) {\n            challenges.xin = Fr.square(challenges.xin);\n        }\n\n        challenges.zh = Fr.sub(challenges.xin, Fr.one);\n\n        const L = [];\n\n        const n = Fr.e(zkey.domainSize);\n        let w = Fr.one;\n        for (let i = 1; i <= Math.max(1, zkey.nPublic); i++) {\n            L[i] = Fr.div(Fr.mul(w, challenges.zh), Fr.mul(n, Fr.sub(challenges.xi, w)));\n            w = Fr.mul(w, Fr.w[zkey.power]);\n        }\n\n        const eval_l1 = Fr.div(\n            Fr.sub(challenges.xin, Fr.one),\n            Fr.mul(n, Fr.sub(challenges.xi, Fr.one))\n        );\n\n        if (logger) {\n            logger.debug(\"Lagrange Evaluations: \");\n            for (let i=1; i<L.length; i++) {\n                logger.debug(`L${i}(xi)=` + Fr.toString(L[i], 16));    \n            }\n        }\n\n        let eval_pi = Fr.zero;\n        for (let i=0; i<publicSignals.length; i++) {\n            const w = Fr.e(publicSignals[i]);\n            eval_pi = Fr.sub(eval_pi, Fr.mul(w, L[i+1]));\n        }\n\n        if (logger) logger.debug(\"PI: \" + Fr.toString(eval_pi, 16));\n\n        // Compute constant parts of R(X)\n        const coef_ab = Fr.mul(proof.evaluations.eval_a, proof.evaluations.eval_b);\n\n        let e2a = proof.evaluations.eval_a;\n        const betaxi = Fr.mul(challenges.beta, challenges.xi);\n        e2a = Fr.add(e2a, betaxi);\n        e2a = Fr.add(e2a, challenges.gamma);\n\n        let e2b = proof.evaluations.eval_b;\n        e2b = Fr.add(e2b, Fr.mul(betaxi, zkey.k1));\n        e2b = Fr.add(e2b, challenges.gamma);\n\n        let e2c = proof.evaluations.eval_c;\n        e2c = Fr.add(e2c, Fr.mul(betaxi, zkey.k2));\n        e2c = Fr.add(e2c, challenges.gamma);\n\n        const e2 = Fr.mul(Fr.mul(Fr.mul(e2a, e2b), e2c), challenges.alpha);\n\n        let e3a = proof.evaluations.eval_a;\n        e3a = Fr.add(e3a, Fr.mul(challenges.beta, proof.evaluations.eval_s1));\n        e3a = Fr.add(e3a, challenges.gamma);\n\n        let e3b = proof.evaluations.eval_b;\n        e3b = Fr.add(e3b, Fr.mul(challenges.beta, proof.evaluations.eval_s2));\n        e3b = Fr.add(e3b, challenges.gamma);\n\n        let e3 = Fr.mul(e3a, e3b);\n        e3 = Fr.mul(e3, proof.evaluations.eval_zw);\n        e3 = Fr.mul(e3, challenges.alpha);\n\n        const e4 = Fr.mul(eval_l1, challenges.alpha2);\n\n        polynomials.R = new Polynomial(new BigBuffer((zkey.domainSize + 6) * n8r), curve, logger);\n\n        polynomials.R.add(polynomials.QM, coef_ab);\n        polynomials.R.add(polynomials.QL, proof.evaluations.eval_a);\n        polynomials.R.add(polynomials.QR, proof.evaluations.eval_b);\n        polynomials.R.add(polynomials.QO, proof.evaluations.eval_c);\n        polynomials.R.add(polynomials.QC);\n        polynomials.R.add(polynomials.Z, e2);\n        polynomials.R.sub(polynomials.Sigma3, Fr.mul(e3, challenges.beta));\n        polynomials.R.add(polynomials.Z, e4);\n\n        let tmp = Polynomial.fromPolynomial(polynomials.T3, curve, logger);\n        tmp.mulScalar(Fr.square(challenges.xin));\n        tmp.add(polynomials.T2, challenges.xin);\n        tmp.add(polynomials.T1);\n        tmp.mulScalar(challenges.zh);\n\n        polynomials.R.sub(tmp);\n\n        let r0 = Fr.sub(eval_pi, Fr.mul(e3, Fr.add(proof.evaluations.eval_c, challenges.gamma)));\n        r0 = Fr.sub(r0, e4);\n\n        if (logger) logger.debug(\"r0: \" + Fr.toString(r0, 16));\n\n        polynomials.R.addScalar(r0);\n    }\n\n    function computeWxi() {\n        polynomials.Wxi = new Polynomial(new BigBuffer(sDomain + 6 * n8r), curve, logger);\n\n        polynomials.Wxi.add(polynomials.R);\n        polynomials.Wxi.add(polynomials.A, challenges.v[1]);\n        polynomials.Wxi.add(polynomials.B, challenges.v[2]);\n        polynomials.Wxi.add(polynomials.C, challenges.v[3]);\n        polynomials.Wxi.add(polynomials.Sigma1, challenges.v[4]);\n        polynomials.Wxi.add(polynomials.Sigma2, challenges.v[5]);\n\n        polynomials.Wxi.subScalar(Fr.mul(challenges.v[1], proof.evaluations.eval_a));\n        polynomials.Wxi.subScalar(Fr.mul(challenges.v[2], proof.evaluations.eval_b));\n        polynomials.Wxi.subScalar(Fr.mul(challenges.v[3], proof.evaluations.eval_c));\n        polynomials.Wxi.subScalar(Fr.mul(challenges.v[4], proof.evaluations.eval_s1));\n        polynomials.Wxi.subScalar(Fr.mul(challenges.v[5], proof.evaluations.eval_s2));\n\n        polynomials.Wxi.divByZerofier(1, challenges.xi);\n    }\n\n    async function computeWxiw() {\n        polynomials.Wxiw = Polynomial.fromPolynomial(polynomials.Z, curve, logger);\n        polynomials.Wxiw.subScalar(proof.evaluations.eval_zw);\n\n        polynomials.Wxiw.divByZerofier(1, challenges.xiw);\n    }\n}\n\n/*\n    Copyright 2021 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\nconst {unstringifyBigInts: unstringifyBigInts$5} = utils;\n\nasync function plonkFullProve(_input, wasmFile, zkeyFileName, logger) {\n    const input = unstringifyBigInts$5(_input);\n\n    const wtns= {\n        type: \"mem\"\n    };\n    await wtnsCalculate(input, wasmFile, wtns);\n    return await plonk16Prove(zkeyFileName, wtns, logger);\n}\n\n/*\n    Copyright 2021 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\nconst {unstringifyBigInts: unstringifyBigInts$4} = utils;\n\n\n\nasync function plonkVerify(_vk_verifier, _publicSignals, _proof, logger) {\n    let vk_verifier = unstringifyBigInts$4(_vk_verifier);\n    _proof = unstringifyBigInts$4(_proof);\n    let publicSignals = unstringifyBigInts$4(_publicSignals);\n\n    const curve = await getCurveFromName(vk_verifier.curve);\n\n    const Fr = curve.Fr;\n    const G1 = curve.G1;\n\n    if (logger) logger.info(\"PLONK VERIFIER STARTED\");\n\n    let proof = fromObjectProof(curve,_proof);\n    vk_verifier = fromObjectVk$1(curve, vk_verifier);\n\n    if (!isWellConstructed(curve, proof)) {\n        logger.error(\"Proof is not well constructed\");\n        return false;\n    }\n\n    if (publicSignals.length != vk_verifier.nPublic) {\n        logger.error(\"Invalid number of public inputs\");\n        return false;\n    }\n    const challenges = calculatechallenges(curve, proof, publicSignals, vk_verifier);\n    \n    if (logger) {\n        logger.debug(\"beta: \" + Fr.toString(challenges.beta, 16));    \n        logger.debug(\"gamma: \" + Fr.toString(challenges.gamma, 16));    \n        logger.debug(\"alpha: \" + Fr.toString(challenges.alpha, 16));    \n        logger.debug(\"xi: \" + Fr.toString(challenges.xi, 16));\n        for(let i=1;i<6;i++) {\n            if (logger) logger.debug(\"v: \" + Fr.toString(challenges.v[i], 16));\n        }\n        logger.debug(\"u: \" + Fr.toString(challenges.u, 16));    \n    }\n    const L = calculateLagrangeEvaluations(curve, challenges, vk_verifier);\n    if (logger) {\n        for (let i=1; i<L.length; i++) {\n            logger.debug(`L${i}(xi)=` + Fr.toString(L[i], 16));\n        }\n    }\n    \n    if (publicSignals.length != vk_verifier.nPublic) {\n        logger.error(\"Number of public signals does not match with vk\");\n        return false;\n    }\n\n    const pi = calculatePI$1(curve, publicSignals, L);\n    if (logger) {\n        logger.debug(\"PI(xi): \" + Fr.toString(pi, 16));\n    }\n    \n    const r0 = calculateR0(curve, proof, challenges, pi, L[1]);\n    if (logger) {\n        logger.debug(\"r0: \" + Fr.toString(r0, 16));\n    }\n\n    const D = calculateD(curve, proof, challenges, vk_verifier, L[1]);\n    if (logger) {\n        logger.debug(\"D: \" + G1.toString(G1.toAffine(D), 16));\n    }\n\n    const F = calculateF(curve, proof, challenges, vk_verifier, D);\n    if (logger) {\n        logger.debug(\"F: \" + G1.toString(G1.toAffine(F), 16));\n    }\n\n    const E = calculateE(curve, proof, challenges, r0);\n    if (logger) {\n        logger.debug(\"E: \" + G1.toString(G1.toAffine(E), 16));\n    }\n\n    const res = await isValidPairing$1(curve, proof, challenges, vk_verifier, E, F);\n\n    if (logger) {\n        if (res) {\n            logger.info(\"OK!\");\n        } else {\n            logger.warn(\"Invalid Proof\");\n        }\n    }\n\n    return res;\n}\n\n\nfunction fromObjectProof(curve, proof) {\n    const G1 = curve.G1;\n    const Fr = curve.Fr;\n    const res = {};\n    res.A = G1.fromObject(proof.A);\n    res.B = G1.fromObject(proof.B);\n    res.C = G1.fromObject(proof.C);\n    res.Z = G1.fromObject(proof.Z);\n    res.T1 = G1.fromObject(proof.T1);\n    res.T2 = G1.fromObject(proof.T2);\n    res.T3 = G1.fromObject(proof.T3);\n    res.eval_a = Fr.fromObject(proof.eval_a);\n    res.eval_b = Fr.fromObject(proof.eval_b);\n    res.eval_c = Fr.fromObject(proof.eval_c);\n    res.eval_zw = Fr.fromObject(proof.eval_zw);\n    res.eval_s1 = Fr.fromObject(proof.eval_s1);\n    res.eval_s2 = Fr.fromObject(proof.eval_s2);\n    res.Wxi = G1.fromObject(proof.Wxi);\n    res.Wxiw = G1.fromObject(proof.Wxiw);\n    return res;\n}\n\nfunction fromObjectVk$1(curve, vk) {\n    const G1 = curve.G1;\n    const G2 = curve.G2;\n    const Fr = curve.Fr;\n    const res = vk;\n    res.Qm = G1.fromObject(vk.Qm);\n    res.Ql = G1.fromObject(vk.Ql);\n    res.Qr = G1.fromObject(vk.Qr);\n    res.Qo = G1.fromObject(vk.Qo);\n    res.Qc = G1.fromObject(vk.Qc);\n    res.S1 = G1.fromObject(vk.S1);\n    res.S2 = G1.fromObject(vk.S2);\n    res.S3 = G1.fromObject(vk.S3);\n    res.k1 = Fr.fromObject(vk.k1);\n    res.k2 = Fr.fromObject(vk.k2);\n    res.X_2 = G2.fromObject(vk.X_2);\n\n    return res;\n}\n\nfunction isWellConstructed(curve, proof) {\n    const G1 = curve.G1;\n    if (!G1.isValid(proof.A)) return false;\n    if (!G1.isValid(proof.B)) return false;\n    if (!G1.isValid(proof.C)) return false;\n    if (!G1.isValid(proof.Z)) return false;\n    if (!G1.isValid(proof.T1)) return false;\n    if (!G1.isValid(proof.T2)) return false;\n    if (!G1.isValid(proof.T3)) return false;\n    if (!G1.isValid(proof.Wxi)) return false;\n    if (!G1.isValid(proof.Wxiw)) return false;\n    return true;\n}\n\nfunction calculatechallenges(curve, proof, publicSignals, vk) {\n    const Fr = curve.Fr;\n    const res = {};\n    const transcript = new Keccak256Transcript(curve);\n\n    // Challenge round 2: beta and gamma\n    transcript.addPolCommitment(vk.Qm);\n    transcript.addPolCommitment(vk.Ql);\n    transcript.addPolCommitment(vk.Qr);\n    transcript.addPolCommitment(vk.Qo);\n    transcript.addPolCommitment(vk.Qc);\n    transcript.addPolCommitment(vk.S1);\n    transcript.addPolCommitment(vk.S2);\n    transcript.addPolCommitment(vk.S3);\n\n    for (let i = 0; i < publicSignals.length; i++) {\n        transcript.addScalar(Fr.e(publicSignals[i]));\n    }\n\n    transcript.addPolCommitment(proof.A);\n    transcript.addPolCommitment(proof.B);\n    transcript.addPolCommitment(proof.C);\n\n    res.beta = transcript.getChallenge();\n\n    transcript.reset();\n    transcript.addScalar(res.beta);\n    res.gamma = transcript.getChallenge();\n\n    // Challenge round 3: alpha\n    transcript.reset();\n    transcript.addScalar(res.beta);\n    transcript.addScalar(res.gamma);\n    transcript.addPolCommitment(proof.Z);\n    res.alpha = transcript.getChallenge();\n\n    // Challenge round 4: xi\n    transcript.reset();\n    transcript.addScalar(res.alpha);\n    transcript.addPolCommitment(proof.T1);\n    transcript.addPolCommitment(proof.T2);\n    transcript.addPolCommitment(proof.T3);\n    res.xi = transcript.getChallenge();\n    \n    // Challenge round 5: v\n    transcript.reset();\n    transcript.addScalar(res.xi);\n    transcript.addScalar(proof.eval_a);\n    transcript.addScalar(proof.eval_b);\n    transcript.addScalar(proof.eval_c);\n    transcript.addScalar(proof.eval_s1);\n    transcript.addScalar(proof.eval_s2);\n    transcript.addScalar(proof.eval_zw);\n    res.v = [];\n    res.v[1] = transcript.getChallenge();\n\n    for (let i=2; i<6; i++ ) res.v[i] = Fr.mul(res.v[i-1], res.v[1]);\n\n    // Challenge: u\n    transcript.reset();\n    transcript.addPolCommitment(proof.Wxi);\n    transcript.addPolCommitment(proof.Wxiw);\n    res.u = transcript.getChallenge();\n\n    return res;\n}\n\nfunction calculateLagrangeEvaluations(curve, challenges, vk) {\n    const Fr = curve.Fr;\n\n    let xin = challenges.xi;\n    let domainSize = 1;\n    for (let i=0; i<vk.power; i++) {\n        xin = Fr.square(xin);\n        domainSize *= 2;\n    }\n    challenges.xin = xin;\n\n    challenges.zh = Fr.sub(xin, Fr.one);\n\n    const L = [];\n\n    const n = Fr.e(domainSize);\n    let w = Fr.one;\n    for (let i=1; i<=Math.max(1, vk.nPublic); i++) {\n        L[i] = Fr.div(Fr.mul(w, challenges.zh), Fr.mul(n, Fr.sub(challenges.xi, w)));\n        w = Fr.mul(w, Fr.w[vk.power]);\n    }\n\n    return L;\n}\n\nfunction calculatePI$1(curve, publicSignals, L) {\n    const Fr = curve.Fr;\n\n    let pi = Fr.zero;\n    for (let i=0; i<publicSignals.length; i++) {        \n        const w = Fr.e(publicSignals[i]);\n        pi = Fr.sub(pi, Fr.mul(w, L[i+1]));\n    }\n    return pi;\n}\n\nfunction calculateR0(curve, proof, challenges, pi, l1) {\n    const Fr = curve.Fr;\n\n    const e1 = pi;\n\n    const e2 = Fr.mul(l1, Fr.square(challenges.alpha));\n\n    let e3a = Fr.add(proof.eval_a, Fr.mul(challenges.beta, proof.eval_s1));\n    e3a = Fr.add(e3a, challenges.gamma);\n\n    let e3b = Fr.add(proof.eval_b, Fr.mul(challenges.beta, proof.eval_s2));\n    e3b = Fr.add(e3b, challenges.gamma);\n\n    let e3c = Fr.add(proof.eval_c, challenges.gamma);\n\n    let e3 = Fr.mul(Fr.mul(e3a, e3b), e3c);\n    e3 = Fr.mul(e3, proof.eval_zw);\n    e3 = Fr.mul(e3, challenges.alpha);\n\n    const r0 = Fr.sub(Fr.sub(e1, e2), e3);\n\n    return r0;\n}\n\nfunction calculateD(curve, proof, challenges, vk, l1) {\n    const G1 = curve.G1;\n    const Fr = curve.Fr;\n    \n    let d1 = G1.timesFr(vk.Qm, Fr.mul(proof.eval_a, proof.eval_b));\n    d1 = G1.add(d1, G1.timesFr(vk.Ql, proof.eval_a));\n    d1 = G1.add(d1, G1.timesFr(vk.Qr, proof.eval_b));\n    d1 = G1.add(d1, G1.timesFr(vk.Qo, proof.eval_c));\n    d1 = G1.add(d1, vk.Qc);\n\n    const betaxi = Fr.mul(challenges.beta, challenges.xi);\n\n    const d2a1 = Fr.add(Fr.add(proof.eval_a, betaxi), challenges.gamma);\n    const d2a2 = Fr.add(Fr.add(proof.eval_b, Fr.mul(betaxi, vk.k1)), challenges.gamma);\n    const d2a3 = Fr.add(Fr.add(proof.eval_c, Fr.mul(betaxi, vk.k2)), challenges.gamma);\n\n    const d2a = Fr.mul(Fr.mul(Fr.mul(d2a1, d2a2), d2a3), challenges.alpha);\n\n    const d2b = Fr.mul(l1, Fr.square(challenges.alpha));\n\n    const d2 = G1.timesFr(proof.Z, Fr.add(Fr.add(d2a, d2b), challenges.u));\n\n    const d3a = Fr.add(Fr.add(proof.eval_a, Fr.mul(challenges.beta, proof.eval_s1)), challenges.gamma);\n    const d3b = Fr.add(Fr.add(proof.eval_b, Fr.mul(challenges.beta, proof.eval_s2)), challenges.gamma);\n    const d3c = Fr.mul(Fr.mul(challenges.alpha, challenges.beta), proof.eval_zw);\n\n    const d3 = G1.timesFr(vk.S3, Fr.mul(Fr.mul(d3a, d3b), d3c));\n    \n    const d4low = proof.T1;\n    const d4mid = G1.timesFr(proof.T2, challenges.xin);\n    const d4high = G1.timesFr(proof.T3, Fr.square(challenges.xin));\n    let d4 = G1.add(d4low, G1.add(d4mid, d4high));\n    d4 = G1.timesFr(d4, challenges.zh);\n\n    const d = G1.sub(G1.sub(G1.add(d1, d2), d3), d4);\n\n    return d;\n}\n\nfunction calculateF(curve, proof, challenges, vk, D) {\n    const G1 = curve.G1;\n\n    let res = G1.add(D, G1.timesFr(proof.A, challenges.v[1]));\n    res = G1.add(res, G1.timesFr(proof.B, challenges.v[2]));\n    res = G1.add(res, G1.timesFr(proof.C, challenges.v[3]));\n    res = G1.add(res, G1.timesFr(vk.S1, challenges.v[4]));\n    res = G1.add(res, G1.timesFr(vk.S2, challenges.v[5]));\n\n    return res;\n}\n\nfunction calculateE(curve, proof, challenges, r0) {\n    const G1 = curve.G1;\n    const Fr = curve.Fr;\n\n    let e = Fr.add(Fr.neg(r0), Fr.mul(challenges.v[1], proof.eval_a));\n    e = Fr.add(e, Fr.mul(challenges.v[2], proof.eval_b));\n    e = Fr.add(e, Fr.mul(challenges.v[3], proof.eval_c));\n    e = Fr.add(e, Fr.mul(challenges.v[4], proof.eval_s1));\n    e = Fr.add(e, Fr.mul(challenges.v[5], proof.eval_s2));\n    e = Fr.add(e, Fr.mul(challenges.u, proof.eval_zw));\n\n    const res = G1.timesFr(G1.one, e);\n\n    return res;\n}\n\nasync function isValidPairing$1(curve, proof, challenges, vk, E, F) {\n    const G1 = curve.G1;\n    const Fr = curve.Fr;\n\n    let A1 = proof.Wxi;\n    A1 = G1.add(A1, G1.timesFr(proof.Wxiw, challenges.u));\n\n    let B1 = G1.timesFr(proof.Wxi, challenges.xi);\n    const s = Fr.mul(Fr.mul(challenges.u, challenges.xi), Fr.w[vk.power]);\n    B1 = G1.add(B1, G1.timesFr(proof.Wxiw, s));\n    B1 = G1.add(B1, F);\n    B1 = G1.sub(B1, E);\n\n    const res = await curve.pairingEq(\n        G1.neg(A1) , vk.X_2,\n        B1 , curve.G2.one\n    );\n\n    return res;\n}\n\n/*\n    Copyright 2021 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\nconst { unstringifyBigInts: unstringifyBigInts$3} = utils;\n\nfunction p256$1(n) {\n    let nstr = n.toString(16);\n    while (nstr.length < 64) nstr = \"0\"+nstr;\n    nstr = `\"0x${nstr}\"`;\n    return nstr;\n}\n\nasync function plonkExportSolidityCallData(_proof, _pub) {\n    const proof = unstringifyBigInts$3(_proof);\n    const pub = unstringifyBigInts$3(_pub);\n\n    await getCurveFromName(proof.curve);\n\n    let inputs = \"\";\n    for (let i=0; i<pub.length; i++) {\n        if (inputs != \"\") inputs = inputs + \",\";\n        inputs = inputs + p256$1(pub[i]);\n    }\n\n    return `[${p256$1(proof.A[0])}, ${p256$1(proof.A[1])},` +\n    `${p256$1(proof.B[0])},${p256$1(proof.B[1])},` +\n    `${p256$1(proof.C[0])},${p256$1(proof.C[1])},` +\n    `${p256$1(proof.Z[0])},${p256$1(proof.Z[1])},` +\n    `${p256$1(proof.T1[0])},${p256$1(proof.T1[1])},` +\n    `${p256$1(proof.T2[0])},${p256$1(proof.T2[1])},` +\n    `${p256$1(proof.T3[0])},${p256$1(proof.T3[1])},` +\n    `${p256$1(proof.Wxi[0])},${p256$1(proof.Wxi[1])},` +\n    `${p256$1(proof.Wxiw[0])},${p256$1(proof.Wxiw[1])},` +\n    `${p256$1(proof.eval_a)},` + \n    `${p256$1(proof.eval_b)},` + \n    `${p256$1(proof.eval_c)},` + \n    `${p256$1(proof.eval_s1)},` + \n    `${p256$1(proof.eval_s2)},` + \n    `${p256$1(proof.eval_zw)}]` + \n    `[${inputs}]`;\n}\n\n/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nvar plonk = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    setup: plonkSetup,\n    fullProve: plonkFullProve,\n    prove: plonk16Prove,\n    verify: plonkVerify,\n    exportSolidityCallData: plonkExportSolidityCallData\n});\n\n/*\n    Copyright 2022 iden3 association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// We export to zkey the signals and values of the a, b, c, ql, qr, qm, qo and qc\n\n// a, b and c are signals id (32-bit integers)\n// ql, qr, qm, qo and qc are field values\n\nfunction getFFlonkConstantConstraint(signal1, Fr) {\n    return [signal1, 0, 0, Fr.one, Fr.zero, Fr.zero, Fr.zero, Fr.zero];\n}\n\nfunction getFFlonkAdditionConstraint(signal1, signal2, signalOut, ql, qr, qm, qo, qc) {\n    return [signal1, signal2, signalOut, ql, qr, qm, qo, qc];\n}\n\nfunction getFFlonkMultiplicationConstraint(signal1, signal2, signalOut, ql, qr, qm, qo, qc, Fr) {\n    return [signal1, signal2, signalOut, ql, qr, qm, qo, qc];\n}\n\n/*\n    Copyright 2022 iden3 association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nconst LINEAR_COMBINATION_NULLABLE = 0;\nconst LINEAR_COMBINATION_CONSTANT = 1;\nconst LINEAR_COMBINATION_VARIABLE = 2;\n\nclass r1csConstraintProcessor {\n    constructor(Fr, fnGetConstantConstraint, fnGetAdditionConstraint, fnGetMultiplicationConstraint, logger) {\n        this.Fr = Fr;\n        this.logger = logger;\n        this.fnGetAdditionConstraint = fnGetAdditionConstraint;\n        this.fnGetMultiplicationConstraint = fnGetMultiplicationConstraint;\n    }\n\n    processR1csConstraint(settings, lcA, lcB, lcC) {\n        this.normalizeLinearCombination(lcA);\n        this.normalizeLinearCombination(lcB);\n        this.normalizeLinearCombination(lcC);\n\n        const lctA = this.getLinearCombinationType(lcA);\n        const lctB = this.getLinearCombinationType(lcB);\n\n        if ((lctA === LINEAR_COMBINATION_NULLABLE) || (lctB === LINEAR_COMBINATION_NULLABLE)) {\n            return this.processR1csAdditionConstraint(settings, lcC);\n        } else if (lctA === LINEAR_COMBINATION_CONSTANT) {\n            const lcCC = this.joinLinearCombinations(lcB, lcC, lcA[0]);\n            return this.processR1csAdditionConstraint(settings, lcCC);\n        } else if (lctB === LINEAR_COMBINATION_CONSTANT) {\n            const lcCC = this.joinLinearCombinations(lcA, lcC, lcB[0]);\n            return this.processR1csAdditionConstraint(settings, lcCC);\n        } else {\n            return this.processR1csMultiplicationConstraint(settings, lcA, lcB, lcC);\n        }\n    }\n\n    getLinearCombinationType(linCom) {\n        // let k = this.Fr.zero;\n        //\n        // const signalIds = Object.keys(linCom);\n        // for (let i = 0; i < signalIds.length; i++) {\n        //     if (signalIds[i] === \"0\") {\n        //         k = this.Fr.add(k, linCom[signalIds[i]]);\n        //     } else {\n        //         return LINEAR_COMBINATION_VARIABLE;\n        //     }\n        // }\n        //\n        // if (!this.Fr.eq(k, this.Fr.zero)) return LINEAR_COMBINATION_CONSTANT;\n        //\n        // return LINEAR_COMBINATION_NULLABLE;\n\n        let k = this.Fr.zero;\n        let n = 0;\n        const ss = Object.keys(linCom);\n        for (let i = 0; i < ss.length; i++) {\n            if (linCom[ss[i]] == 0n) {\n                delete linCom[ss[i]];\n            } else if (ss[i] == 0) {\n                k = this.Fr.add(k, linCom[ss[i]]);\n            } else {\n                n++;\n            }\n        }\n        if (n > 0) return LINEAR_COMBINATION_VARIABLE;\n        if (!this.Fr.isZero(k)) return LINEAR_COMBINATION_CONSTANT;\n        return LINEAR_COMBINATION_NULLABLE;\n    }\n\n    normalizeLinearCombination(linCom) {\n        const signalIds = Object.keys(linCom);\n        for (let i = 0; i < signalIds.length; i++) {\n            if (this.Fr.isZero(linCom[signalIds[i]])) delete linCom[signalIds[i]];\n        }\n\n        return linCom;\n    }\n\n    joinLinearCombinations(linCom1, linCom2, k) {\n        const res = {};\n\n        // for (let s in linCom1) {\n        //     const val = this.Fr.mul(k, linCom1[s]);\n        //     res[s] = !(s in res) ? val : this.Fr.add(val, res[s]);\n        // }\n        //\n        // for (let s in linCom2) {\n        //     const val = this.Fr.mul(k, linCom2[s]);\n        //     res[s] = !(s in res) ? val : this.Fr.add(val, res[s]);\n        // }\n\n        for (let s in linCom1) {\n            if (typeof res[s] == \"undefined\") {\n                res[s] = this.Fr.mul(k, linCom1[s]);\n            } else {\n                res[s] = this.Fr.add(res[s], this.Fr.mul(k, linCom1[s]));\n            }\n        }\n\n        for (let s in linCom2) {\n            if (typeof res[s] == \"undefined\") {\n                res[s] = linCom2[s];\n            } else {\n                res[s] = this.Fr.add(res[s], linCom2[s]);\n            }\n        }\n\n        return this.normalizeLinearCombination(res);\n    }\n\n    reduceCoefs(settings, constraintsArr, additionsArr, linCom, maxC) {\n        const res = {\n            k: this.Fr.zero,\n            signals: [],\n            coefs: []\n        };\n        const cs = [];\n\n        for (let signalId in linCom) {\n            if (signalId == 0) {\n                res.k = this.Fr.add(res.k, linCom[signalId]);\n            } else if (linCom[signalId] != 0n) {\n                cs.push([Number(signalId), linCom[signalId]]);\n            }\n        }\n\n        while (cs.length > maxC) {\n            const c1 = cs.shift();\n            const c2 = cs.shift();\n            const so = settings.nVars++;\n\n            const constraints = this.fnGetAdditionConstraint(\n                c1[0], c2[0], so,\n                this.Fr.neg(c1[1]), this.Fr.neg(c2[1]), this.Fr.zero, this.Fr.one, this.Fr.zero);\n\n            constraintsArr.push(constraints);\n            additionsArr.push([c1[0], c2[0], c1[1], c2[1]]);\n\n            cs.push([so, this.Fr.one]);\n        }\n\n        for (let i = 0; i < cs.length; i++) {\n            res.signals[i] = cs[i][0];\n            res.coefs[i] = cs[i][1];\n        }\n\n        while (res.coefs.length < maxC) {\n            res.signals.push(0);\n            res.coefs.push(this.Fr.zero);\n        }\n\n        return res;\n    }\n\n    processR1csAdditionConstraint(settings, linCom) {\n        const constraintsArr = [];\n        const additionsArr = [];\n\n        const C = this.reduceCoefs(settings, constraintsArr, additionsArr, linCom, 3);\n\n        const constraints = this.fnGetAdditionConstraint(\n            C.signals[0], C.signals[1], C.signals[2],\n            C.coefs[0], C.coefs[1], this.Fr.zero, C.coefs[2], C.k);\n\n        constraintsArr.push(constraints);\n\n        return [constraintsArr, additionsArr];\n    }\n\n    processR1csMultiplicationConstraint(settings, lcA, lcB, lcC) {\n        const constraintsArr = [];\n        const additionsArr = [];\n\n        const A = this.reduceCoefs(settings, constraintsArr, additionsArr, lcA, 1);\n        const B = this.reduceCoefs(settings, constraintsArr, additionsArr, lcB, 1);\n        const C = this.reduceCoefs(settings, constraintsArr, additionsArr, lcC, 1);\n\n        const constraints = this.fnGetMultiplicationConstraint(\n            A.signals[0], B.signals[0], C.signals[0],\n            this.Fr.mul(A.coefs[0], B.k),\n            this.Fr.mul(A.k, B.coefs[0]),\n            this.Fr.mul(A.coefs[0], B.coefs[0]),\n            this.Fr.neg(C.coefs[0]),\n            this.Fr.sub(this.Fr.mul(A.k, B.k), C.k));\n\n        constraintsArr.push(constraints);\n\n        return [constraintsArr, additionsArr];\n    }\n}\n\n/*\n    Copyright 2022 iden3 association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nclass CPolynomial {\n    constructor(n, curve, logger) {\n        this.n = n;\n        this.polynomials = Array(n).fill(undefined);\n        this.curve = curve;\n        this.Fr = curve.Fr;\n        this.G1 = curve.G1;\n        this.logger = logger;\n    }\n\n    addPolynomial(position, polynomial) {\n        if (position > this.n - 1) {\n            throw new Error(\"CPolynomial:addPolynomial, cannot add a polynomial to a position greater than n-1\");\n        }\n\n        this.polynomials[position] = polynomial;\n    }\n\n    degree() {\n        let degrees = this.polynomials.map(\n            (polynomial, index) => polynomial === undefined ? 0 : polynomial.degree() * this.n + index);\n        return Math.max(...degrees);\n    }\n\n    getPolynomial() {\n        let degrees = this.polynomials.map(polynomial => polynomial === undefined ? 0 : polynomial.degree());\n        const maxDegree = this.degree();\n        const lengthBuffer = 2 ** (log2(maxDegree - 1) + 1);\n        const sFr = this.Fr.n8;\n\n        let polynomial = new Polynomial(new BigBuffer(lengthBuffer * sFr), this.curve, this.logger);\n\n        for (let i = 0; i < maxDegree; i++) {\n            const i_n8 = i * sFr;\n            const i_sFr = i_n8 * this.n;\n\n            for (let j = 0; j < this.n; j++) {\n                if (this.polynomials[j] !== undefined) {\n                    if (i <= degrees[j]) polynomial.coef.set(this.polynomials[j].coef.slice(i_n8, i_n8 + sFr), i_sFr + j * sFr);\n                }\n            }\n        }\n\n        return polynomial;\n    }\n\n    async multiExponentiation(PTau, name) {\n        let polynomial = this.getPolynomial();\n        const n = polynomial.coef.byteLength / this.Fr.n8;\n        const PTauN = PTau.slice(0, n * this.G1.F.n8 * 2);\n        const bm = await this.Fr.batchFromMontgomery(polynomial.coef);\n        let res = await this.G1.multiExpAffine(PTauN, bm, this.logger, name);\n        res = this.G1.toAffine(res);\n        return res;\n    }\n}\n\n/*\n    Copyright 2022 iden3 association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\nasync function fflonkSetup(r1csFilename, ptauFilename, zkeyFilename, logger) {\n    if (logger) logger.info(\"FFLONK SETUP STARTED\");\n\n    if (globalThis.gc) globalThis.gc();\n\n    // Read PTau file\n    if (logger) logger.info(\"> Reading PTau file\");\n    const {fd: fdPTau, sections: pTauSections} = await readBinFile(ptauFilename, \"ptau\", 1);\n    if (!pTauSections[12]) {\n        throw new Error(\"Powers of Tau is not well prepared. Section 12 missing.\");\n    }\n\n    // Get curve defined in PTau\n    if (logger) logger.info(\"> Getting curve from PTau settings\");\n    const {curve} = await readPTauHeader(fdPTau, pTauSections);\n\n    // Read r1cs file\n    if (logger) logger.info(\"> Reading r1cs file\");\n    const {fd: fdR1cs, sections: sectionsR1cs} = await readBinFile(r1csFilename, \"r1cs\", 1);\n    const r1cs = await readR1csFd(fdR1cs, sectionsR1cs, {loadConstraints: false, loadCustomGates: true});\n\n    // Potential error checks\n    if (r1cs.prime !== curve.r) {\n        throw new Error(\"r1cs curve does not match powers of tau ceremony curve\");\n    }\n\n    // Initializations\n    const Fr = curve.Fr;\n\n    const sFr = curve.Fr.n8;\n    const sG1 = curve.G1.F.n8 * 2;\n    const sG2 = curve.G2.F.n8 * 2;\n\n    let polynomials = {};\n    let evaluations = {};\n    let PTau;\n\n    let settings = {\n        nVars: r1cs.nVars,\n        nPublic: r1cs.nOutputs + r1cs.nPubInputs\n    };\n\n    const plonkConstraints = new BigArray$1();\n    let plonkAdditions = new BigArray$1();\n\n    // Process constraints inside r1cs\n    if (logger) logger.info(\"> Processing FFlonk constraints\");\n    await computeFFConstraints(curve.Fr, r1cs, logger);\n    if (globalThis.gc) globalThis.gc();\n\n    // As the t polynomial is n+5 whe need at least a power of 4\n    //TODO check!!!!\n    // NOTE : plonkConstraints + 2 = #constraints + blinding coefficients for each wire polynomial\n    settings.cirPower = Math.max(FF_T_POL_DEG_MIN, log2((plonkConstraints.length + 2) - 1) + 1);\n    settings.domainSize = 2 ** settings.cirPower;\n\n    if (pTauSections[2][0].size < (settings.domainSize * 9 + 18) * sG1) {\n        throw new Error(\"Powers of Tau is not big enough for this circuit size. Section 2 too small.\");\n    }\n    if (pTauSections[3][0].size < sG2) {\n        throw new Error(\"Powers of Tau is not well prepared. Section 3 too small.\");\n    }\n\n    if (logger) {\n        logger.info(\"----------------------------\");\n        logger.info(\"  FFLONK SETUP SETTINGS\");\n        logger.info(`  Curve:         ${curve.name}`);\n        logger.info(`  Circuit power: ${settings.cirPower}`);\n        logger.info(`  Domain size:   ${settings.domainSize}`);\n        logger.info(`  Vars:          ${settings.nVars}`);\n        logger.info(`  Public vars:   ${settings.nPublic}`);\n        logger.info(`  Constraints:   ${plonkConstraints.length}`);\n        logger.info(`  Additions:     ${plonkAdditions.length}`);\n        logger.info(\"----------------------------\");\n    }\n\n    // Compute k1 and k2 to be used in the permutation checks\n    if (logger) logger.info(\"> computing k1 and k2\");\n    const [k1, k2] = computeK1K2();\n\n    // Compute omega 3 (w3) and omega 4 (w4) to be used in the prover and the verifier\n    // w3^3 = 1 and  w4^4 = 1\n    if (logger) logger.info(\"> computing w3\");\n    const w3 = computeW3();\n    if (logger) logger.info(\"> computing w4\");\n    const w4 = computeW4();\n    if (logger) logger.info(\"> computing w8\");\n    const w8 = computeW8();\n    if (logger) logger.info(\"> computing wr\");\n    const wr = getOmegaCubicRoot(settings.cirPower, curve.Fr);\n\n    // Write output zkey file\n    await writeZkeyFile();\n\n    await fdR1cs.close();\n    await fdPTau.close();\n\n    if (logger) logger.info(\"FFLONK SETUP FINISHED\");\n\n    return 0;\n\n    async function computeFFConstraints(Fr, r1cs, logger) {\n        // Add public inputs and outputs\n        for (let i = 0; i < settings.nPublic; i++) {\n            plonkConstraints.push(getFFlonkConstantConstraint(i + 1, Fr));\n        }\n\n        // Add all constraints from r1cs file\n        const r1csProcessor = new r1csConstraintProcessor(Fr, getFFlonkConstantConstraint, getFFlonkAdditionConstraint, getFFlonkMultiplicationConstraint, logger);\n\n        const bR1cs = await readSection(fdR1cs, sectionsR1cs, 2);\n        let bR1csPos = 0;\n        for (let i = 0; i < r1cs.nConstraints; i++) {\n            if ((logger) && (i !== 0) && (i % 500000 === 0)) {\n                logger.info(`    processing r1cs constraints ${i}/${r1cs.nConstraints}`);\n            }\n            const [constraints, additions] = r1csProcessor.processR1csConstraint(settings, ...readConstraint());\n\n            plonkConstraints.push(...constraints);\n            plonkAdditions.push(...additions);\n        }\n\n        function readConstraint() {\n            const c = [];\n            c[0] = readLC();\n            c[1] = readLC();\n            c[2] = readLC();\n            return c;\n        }\n\n        function readLC() {\n            const lc = {};\n\n            const buffUL32 = bR1cs.slice(bR1csPos, bR1csPos + 4);\n            bR1csPos += 4;\n            const buffUL32V = new DataView(buffUL32.buffer);\n            const nIdx = buffUL32V.getUint32(0, true);\n\n            const buff = bR1cs.slice(bR1csPos, bR1csPos + (4 + r1cs.n8) * nIdx);\n            bR1csPos += (4 + r1cs.n8) * nIdx;\n            const buffV = new DataView(buff.buffer);\n            for (let i = 0; i < nIdx; i++) {\n                const idx = buffV.getUint32(i * (4 + r1cs.n8), true);\n                const val = r1cs.F.fromRprLE(buff, i * (4 + r1cs.n8) + 4);\n                lc[idx] = val;\n            }\n            return lc;\n        }\n\n        return 0;\n    }\n\n    async function writeZkeyFile() {\n        if (logger) logger.info(\"> Writing the zkey file\");\n        const fdZKey = await createBinFile(zkeyFilename, \"zkey\", 1, ZKEY_FF_NSECTIONS, 1 << 22, 1 << 24);\n\n        if (logger) logger.info(`··· Writing Section ${HEADER_ZKEY_SECTION}. Zkey Header`);\n        await writeZkeyHeader(fdZKey);\n\n        if (logger) logger.info(`··· Writing Section ${ZKEY_FF_ADDITIONS_SECTION}. Additions`);\n        await writeAdditions(fdZKey);\n        if (globalThis.gc) globalThis.gc();\n\n        if (logger) logger.info(`··· Writing Section ${ZKEY_FF_A_MAP_SECTION}. A Map`);\n        await writeWitnessMap(fdZKey, ZKEY_FF_A_MAP_SECTION, 0, \"A map\");\n        if (globalThis.gc) globalThis.gc();\n\n        if (logger) logger.info(`··· Writing Section ${ZKEY_FF_B_MAP_SECTION}. B Map`);\n        await writeWitnessMap(fdZKey, ZKEY_FF_B_MAP_SECTION, 1, \"B map\");\n        if (globalThis.gc) globalThis.gc();\n\n        if (logger) logger.info(`··· Writing Section ${ZKEY_FF_C_MAP_SECTION}. C Map`);\n        await writeWitnessMap(fdZKey, ZKEY_FF_C_MAP_SECTION, 2, \"C map\");\n        if (globalThis.gc) globalThis.gc();\n\n        if (logger) logger.info(`··· Writing Section ${ZKEY_FF_QL_SECTION}. QL`);\n        await writeQMap(fdZKey, ZKEY_FF_QL_SECTION, 3, \"QL\");\n        if (globalThis.gc) globalThis.gc();\n\n        if (logger) logger.info(`··· Writing Section ${ZKEY_FF_QR_SECTION}. QR`);\n        await writeQMap(fdZKey, ZKEY_FF_QR_SECTION, 4, \"QR\");\n        if (globalThis.gc) globalThis.gc();\n\n        if (logger) logger.info(`··· Writing Section ${ZKEY_FF_QM_SECTION}. QM`);\n        await writeQMap(fdZKey, ZKEY_FF_QM_SECTION, 5, \"QM\");\n        if (globalThis.gc) globalThis.gc();\n\n        if (logger) logger.info(`··· Writing Section ${ZKEY_FF_QO_SECTION}. QO`);\n        await writeQMap(fdZKey, ZKEY_FF_QO_SECTION, 6, \"QO\");\n        if (globalThis.gc) globalThis.gc();\n\n        if (logger) logger.info(`··· Writing Section ${ZKEY_FF_QC_SECTION}. QC`);\n        await writeQMap(fdZKey, ZKEY_FF_QC_SECTION, 7, \"QC\");\n        if (globalThis.gc) globalThis.gc();\n\n        if (logger) logger.info(`··· Writing Sections ${ZKEY_FF_SIGMA1_SECTION},${ZKEY_FF_SIGMA2_SECTION},${ZKEY_FF_SIGMA3_SECTION}. Sigma1, Sigma2 & Sigma 3`);\n        await writeSigma(fdZKey);\n        if (globalThis.gc) globalThis.gc();\n\n        if (logger) logger.info(`··· Writing Section ${ZKEY_FF_LAGRANGE_SECTION}. Lagrange Polynomials`);\n        await writeLagrangePolynomials(fdZKey);\n        if (globalThis.gc) globalThis.gc();\n\n        if (logger) logger.info(`··· Writing Section ${ZKEY_FF_PTAU_SECTION}. Powers of Tau`);\n        await writePtau(fdZKey);\n        if (globalThis.gc) globalThis.gc();\n\n        if (logger) logger.info(`··· Writing Section ${ZKEY_FF_C0_SECTION}. C0`);\n        await writeC0(fdZKey);\n        if (globalThis.gc) globalThis.gc();\n\n        if (logger) logger.info(`··· Writing Section ${ZKEY_FF_HEADER_SECTION}. FFlonk Header`);\n        await writeFFlonkHeader(fdZKey);\n        if (globalThis.gc) globalThis.gc();\n\n        if (logger) logger.info(\"> Writing the zkey file finished\");\n\n        await fdZKey.close();\n    }\n\n    async function writeZkeyHeader(fdZKey) {\n        await startWriteSection(fdZKey, HEADER_ZKEY_SECTION);\n        await fdZKey.writeULE32(FFLONK_PROTOCOL_ID);\n        await endWriteSection(fdZKey);\n    }\n\n    async function writeAdditions(fdZKey) {\n        await startWriteSection(fdZKey, ZKEY_FF_ADDITIONS_SECTION);\n\n        // Written values are 2 * 32 bit integers (2 * 4 bytes) + 2 field size values ( 2 * sFr bytes)\n        const buffOut = new Uint8Array(8 + 2 * sFr);\n        const buffOutV = new DataView(buffOut.buffer);\n\n        for (let i = 0; i < plonkAdditions.length; i++) {\n            if ((logger) && (i !== 0) && (i % 500000 === 0)) logger.info(`      writing Additions: ${i}/${plonkAdditions.length}`);\n\n            const addition = plonkAdditions[i];\n\n            buffOutV.setUint32(0, addition[0], true);\n            buffOutV.setUint32(4, addition[1], true);\n            buffOut.set(addition[2], 8);\n            buffOut.set(addition[3], 8 + sFr);\n\n            await fdZKey.write(buffOut);\n        }\n        await endWriteSection(fdZKey);\n    }\n\n    async function writeWitnessMap(fdZKey, sectionNum, posConstraint, name) {\n        await startWriteSection(fdZKey, sectionNum);\n        for (let i = 0; i < plonkConstraints.length; i++) {\n            if (logger && (i !== 0) && (i % 500000 === 0)) {\n                logger.info(`      writing witness ${name}: ${i}/${plonkConstraints.length}`);\n            }\n\n            await fdZKey.writeULE32(plonkConstraints[i][posConstraint]);\n        }\n        await endWriteSection(fdZKey);\n    }\n\n    async function writeQMap(fdZKey, sectionNum, posConstraint, name) {\n        // Compute Q from q evaluations\n        let Q = new BigBuffer(settings.domainSize * sFr);\n\n        for (let i = 0; i < plonkConstraints.length; i++) {\n            Q.set(plonkConstraints[i][posConstraint], i * sFr);\n            if ((logger) && (i !== 0) && (i % 500000 === 0)) {\n                logger.info(`      writing ${name}: ${i}/${plonkConstraints.length}`);\n            }\n        }\n\n        polynomials[name] = await Polynomial.fromEvaluations(Q, curve, logger);\n        evaluations[name] = await Evaluations.fromPolynomial(polynomials[name], 4, curve, logger);\n\n        // Write Q coefficients and evaluations\n        await startWriteSection(fdZKey, sectionNum);\n        await fdZKey.write(polynomials[name].coef);\n        await fdZKey.write(evaluations[name].eval);\n        await endWriteSection(fdZKey);\n    }\n\n    async function writeSigma(fdZKey) {\n        // Compute sigma\n        const sigma = new BigBuffer(sFr * settings.domainSize * 3);\n        const lastSeen = new BigArray$1(settings.nVars);\n        const firstPos = new BigArray$1(settings.nVars);\n\n        let w = Fr.one;\n        for (let i = 0; i < settings.domainSize; i++) {\n            if (i < plonkConstraints.length) {\n                buildSigma(plonkConstraints[i][0], i);\n                buildSigma(plonkConstraints[i][1], settings.domainSize + i);\n                buildSigma(plonkConstraints[i][2], settings.domainSize * 2 + i);\n            } else if (i < settings.domainSize - 2) {\n                buildSigma(0, i);\n                buildSigma(0, settings.domainSize + i);\n                buildSigma(0, settings.domainSize * 2 + i);\n            } else {\n                sigma.set(w, i * sFr);\n                sigma.set(Fr.mul(w, k1), (settings.domainSize + i) * sFr);\n                sigma.set(Fr.mul(w, k2), (settings.domainSize * 2 + i) * sFr);\n            }\n\n            w = Fr.mul(w, Fr.w[settings.cirPower]);\n\n            if ((logger) && (i !== 0) && (i % 500000 === 0)) {\n                logger.info(`      writing sigma phase1: ${i}/${plonkConstraints.length}`);\n            }\n        }\n\n        for (let i = 0; i < settings.nVars; i++) {\n            if (typeof firstPos[i] !== \"undefined\") {\n                sigma.set(lastSeen[i], firstPos[i] * sFr);\n            } else {\n                // throw new Error(\"Variable not used\");\n                console.log(\"Variable not used\");\n            }\n            if ((logger) && (i !== 0) && (i % 500000 === 0)) logger.info(`      writing sigma phase2: ${i}/${settings.nVars}`);\n        }\n\n        if (globalThis.gc) globalThis.gc();\n\n        // Write sigma coefficients and evaluations\n        for (let i = 0; i < 3; i++) {\n            const sectionId = 0 === i ? ZKEY_FF_SIGMA1_SECTION : 1 === i ? ZKEY_FF_SIGMA2_SECTION : ZKEY_FF_SIGMA3_SECTION;\n\n            let name = \"S\" + (i + 1);\n            polynomials[name] = await Polynomial.fromEvaluations(sigma.slice(settings.domainSize * sFr * i, settings.domainSize * sFr * (i + 1)), curve, logger);\n            evaluations[name] = await Evaluations.fromPolynomial(polynomials[name], 4, curve, logger);\n            await startWriteSection(fdZKey, sectionId);\n            await fdZKey.write(polynomials[name].coef);\n            await fdZKey.write(evaluations[name].eval);\n            await endWriteSection(fdZKey);\n\n            if (globalThis.gc) globalThis.gc();\n        }\n\n        return 0;\n\n        function buildSigma(signalId, idx) {\n            if (typeof lastSeen[signalId] === \"undefined\") {\n                firstPos[signalId] = idx;\n            } else {\n                sigma.set(lastSeen[signalId], idx * sFr);\n            }\n            let v;\n            if (idx < settings.domainSize) {\n                v = w;\n            } else if (idx < 2 * settings.domainSize) {\n                v = Fr.mul(w, k1);\n            } else {\n                v = Fr.mul(w, k2);\n            }\n\n            lastSeen[signalId] = v;\n        }\n    }\n\n    async function writeLagrangePolynomials(fdZKey) {\n        await startWriteSection(fdZKey, ZKEY_FF_LAGRANGE_SECTION);\n\n        const l = Math.max(settings.nPublic, 1);\n        for (let i = 0; i < l; i++) {\n            let buff = new BigBuffer(settings.domainSize * sFr);\n            buff.set(Fr.one, i * sFr);\n\n            await writeP4(fdZKey, buff);\n        }\n        await endWriteSection(fdZKey);\n    }\n\n    async function writePtau(fdZKey) {\n        await startWriteSection(fdZKey, ZKEY_FF_PTAU_SECTION);\n\n        // domainSize * 9 + 18 = maximum SRS length needed, specifically to commit C2\n        PTau = new BigBuffer((settings.domainSize * 9 + 18) * sG1);\n        await fdPTau.readToBuffer(PTau, 0, (settings.domainSize * 9 + 18) * sG1, pTauSections[2][0].p);\n\n        await fdZKey.write(PTau);\n        await endWriteSection(fdZKey);\n    }\n\n    async function writeC0(fdZKey) {\n        // C0(X) := QL(X^8) + X · QR(X^8) + X^2 · QO(X^8) + X^3 · QM(X^8) + X^4 · QC(X^8)\n        //            + X^5 · SIGMA1(X^8) + X^6 · SIGMA2(X^8) + X^7 · SIGMA3(X^8)\n        let C0 = new CPolynomial(8, curve, logger);\n        C0.addPolynomial(0, polynomials.QL);\n        C0.addPolynomial(1, polynomials.QR);\n        C0.addPolynomial(2, polynomials.QO);\n        C0.addPolynomial(3, polynomials.QM);\n        C0.addPolynomial(4, polynomials.QC);\n        C0.addPolynomial(5, polynomials.S1);\n        C0.addPolynomial(6, polynomials.S2);\n        C0.addPolynomial(7, polynomials.S3);\n\n        polynomials.C0 = C0.getPolynomial();\n\n        // Check degree\n        if (polynomials.C0.degree() >= 8 * settings.domainSize) {\n            throw new Error(\"C0 Polynomial is not well calculated\");\n        }\n\n        await startWriteSection(fdZKey, ZKEY_FF_C0_SECTION);\n        await fdZKey.write(polynomials.C0.coef);\n        await endWriteSection(fdZKey);\n    }\n\n    async function writeFFlonkHeader(fdZKey) {\n        await startWriteSection(fdZKey, ZKEY_FF_HEADER_SECTION);\n\n        const primeQ = curve.q;\n        const n8q = (Math.floor((Scalar.bitLength(primeQ) - 1) / 64) + 1) * 8;\n        await fdZKey.writeULE32(n8q);\n        await writeBigInt(fdZKey, primeQ, n8q);\n\n        const primeR = curve.r;\n        const n8r = (Math.floor((Scalar.bitLength(primeR) - 1) / 64) + 1) * 8;\n        await fdZKey.writeULE32(n8r);\n        await writeBigInt(fdZKey, primeR, n8r);\n\n        // Total number of r1cs vars\n        await fdZKey.writeULE32(settings.nVars);\n        // Total number of r1cs public vars = outputs + public inputs\n        await fdZKey.writeULE32(settings.nPublic);\n        await fdZKey.writeULE32(settings.domainSize);\n        await fdZKey.writeULE32(plonkAdditions.length);\n        await fdZKey.writeULE32(plonkConstraints.length);\n\n        await fdZKey.write(k1);\n        await fdZKey.write(k2);\n\n        await fdZKey.write(w3);\n        await fdZKey.write(w4);\n        await fdZKey.write(w8);\n        await fdZKey.write(wr);\n\n        let bX_2;\n        bX_2 = await fdPTau.read(sG2, pTauSections[3][0].p + sG2);\n        await fdZKey.write(bX_2);\n\n        let commitC0 = await polynomials.C0.multiExponentiation(PTau, \"C0\");\n        await fdZKey.write(commitC0);\n\n        await endWriteSection(fdZKey);\n    }\n\n    async function writeP4(fdZKey, buff) {\n        const [coefficients, evaluations4] = await Polynomial.to4T(buff, settings.domainSize, [], Fr);\n        await fdZKey.write(coefficients);\n        await fdZKey.write(evaluations4);\n\n        return [coefficients, evaluations4];\n    }\n\n    function computeK1K2() {\n        let k1 = Fr.two;\n        while (isIncluded(k1, [], settings.cirPower)) Fr.add(k1, Fr.one);\n        let k2 = Fr.add(k1, Fr.one);\n        while (isIncluded(k2, [k1], settings.cirPower)) Fr.add(k2, Fr.one);\n        return [k1, k2];\n\n        function isIncluded(k, kArr, pow) {\n            const domainSize = 2 ** pow;\n            let w = Fr.one;\n            for (let i = 0; i < domainSize; i++) {\n                if (Fr.eq(k, w)) return true;\n                for (let j = 0; j < kArr.length; j++) {\n                    if (Fr.eq(k, Fr.mul(kArr[j], w))) return true;\n                }\n                w = Fr.mul(w, Fr.w[pow]);\n            }\n            return false;\n        }\n    }\n\n    function computeW3() {\n        let generator = Fr.e(31624);\n\n        // Exponent is order(r - 1) / 3\n        let orderRsub1 = 3648040478639879203707734290876212514758060733402672390616367364429301415936n;\n        let exponent = Scalar.div(orderRsub1, Scalar.e(3));\n\n        return Fr.exp(generator, exponent);\n    }\n\n    function computeW4() {\n        return Fr.w[2];\n    }\n\n    function computeW8() {\n        return Fr.w[3];\n    }\n\n    function getOmegaCubicRoot(power, Fr) {\n        // Hardcorded 3th-root of Fr.w[28]\n        const firstRoot = Fr.e(467799165886069610036046866799264026481344299079011762026774533774345988080n);\n\n        return Fr.exp(firstRoot, 2 ** (28 - power));\n    }\n}\n\n/*\n    Copyright 2022 iden3 association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nconst { stringifyBigInts } = utils;\n\n\nasync function fflonkProve(zkeyFileName, witnessFileName, logger) {\n    if (logger) logger.info(\"FFLONK PROVER STARTED\");\n\n    // Read witness file\n    if (logger) logger.info(\"> Reading witness file\");\n    const {\n        fd: fdWtns,\n        sections: wtnsSections\n    } = await readBinFile(witnessFileName, \"wtns\", 2);\n    const wtns = await readHeader(fdWtns, wtnsSections);\n\n    //Read zkey file\n    if (logger) logger.info(\"> Reading zkey file\");\n    const {\n        fd: fdZKey,\n        sections: zkeySections\n    } = await readBinFile(zkeyFileName, \"zkey\", 2);\n    const zkey = await readHeader$1(fdZKey, zkeySections);\n\n    if (zkey.protocolId !== FFLONK_PROTOCOL_ID) {\n        throw new Error(\"zkey file is not fflonk\");\n    }\n\n    if (!Scalar.eq(zkey.r, wtns.q)) {\n        throw new Error(\"Curve of the witness does not match the curve of the proving key\");\n    }\n\n    if (wtns.nWitness !== zkey.nVars - zkey.nAdditions) {\n        throw new Error(`Invalid witness length. Circuit: ${zkey.nVars}, witness: ${wtns.nWitness}, ${zkey.nAdditions}`);\n    }\n\n    const curve = zkey.curve;\n\n    const Fr = curve.Fr;\n\n    const sFr = curve.Fr.n8;\n    const sG1 = curve.G1.F.n8 * 2;\n    const sDomain = zkey.domainSize * sFr;\n\n    if (logger) {\n        logger.info(\"----------------------------\");\n        logger.info(\"  FFLONK PROVE SETTINGS\");\n        logger.info(`  Curve:         ${curve.name}`);\n        logger.info(`  Circuit power: ${zkey.power}`);\n        logger.info(`  Domain size:   ${zkey.domainSize}`);\n        logger.info(`  Vars:          ${zkey.nVars}`);\n        logger.info(`  Public vars:   ${zkey.nPublic}`);\n        logger.info(`  Constraints:   ${zkey.nConstraints}`);\n        logger.info(`  Additions:     ${zkey.nAdditions}`);\n        logger.info(\"----------------------------\");\n    }\n\n    //Read witness data\n    if (logger) logger.info(\"> Reading witness file data\");\n    const buffWitness = await readSection(fdWtns, wtnsSections, 2);\n    await fdWtns.close();\n\n    // First element in plonk is not used and can be any value. (But always the same).\n    // We set it to zero to go faster in the exponentiations.\n    buffWitness.set(Fr.zero, 0);\n    const buffInternalWitness = new BigBuffer(zkey.nAdditions * sFr);\n\n    let buffers = {};\n    let polynomials = {};\n    let evaluations = {};\n\n    // To divide prime fields the Extended Euclidean Algorithm for computing modular inverses is needed.\n    // NOTE: This is the equivalent of compute 1/denominator and then multiply it by the numerator.\n    // The Extended Euclidean Algorithm is expensive in terms of computation.\n    // For the special case where we need to do many modular inverses, there's a simple mathematical trick\n    // that allows us to compute many inverses, called Montgomery batch inversion.\n    // More info: https://vitalik.ca/general/2018/07/21/starks_part_3.html\n    // Montgomery batch inversion reduces the n inverse computations to a single one\n    // To save this (single) inverse computation on-chain, will compute it in proving time and send it to the verifier.\n    // The verifier will have to check:\n    // 1) the denominator is correct multiplying by himself non-inverted -> a * 1/a == 1\n    // 2) compute the rest of the denominators using the Montgomery batch inversion\n    // The inversions are:\n    //   · denominator needed in step 8 and 9 of the verifier to multiply by 1/Z_H(xi)\n    //   · denominator needed in step 10 and 11 of the verifier\n    //   · denominator needed in the verifier when computing L_i^{S1}(X) and L_i^{S2}(X)\n    //   · L_i i=1 to num public inputs, needed in step 6 and 7 of the verifier to compute L_1(xi) and PI(xi)\n    let toInverse = {};\n\n    let challenges = {};\n    let roots = {};\n\n    let proof = new Proof(curve, logger);\n\n    if (logger) logger.info(`> Reading Section ${ZKEY_FF_ADDITIONS_SECTION}. Additions`);\n    await calculateAdditions();\n\n    if (logger) logger.info(`> Reading Sections ${ZKEY_FF_SIGMA1_SECTION},${ZKEY_FF_SIGMA2_SECTION},${ZKEY_FF_SIGMA3_SECTION}. Sigma1, Sigma2 & Sigma 3`);\n    if (logger) logger.info(\"··· Reading Sigma polynomials \");\n    polynomials.Sigma1 = new Polynomial(new BigBuffer(sDomain), curve, logger);\n    polynomials.Sigma2 = new Polynomial(new BigBuffer(sDomain), curve, logger);\n    polynomials.Sigma3 = new Polynomial(new BigBuffer(sDomain), curve, logger);\n\n    await fdZKey.readToBuffer(polynomials.Sigma1.coef, 0, sDomain, zkeySections[ZKEY_FF_SIGMA1_SECTION][0].p);\n    await fdZKey.readToBuffer(polynomials.Sigma2.coef, 0, sDomain, zkeySections[ZKEY_FF_SIGMA2_SECTION][0].p);\n    await fdZKey.readToBuffer(polynomials.Sigma3.coef, 0, sDomain, zkeySections[ZKEY_FF_SIGMA3_SECTION][0].p);\n\n    if (logger) logger.info(\"··· Reading Sigma evaluations\");\n    evaluations.Sigma1 = new Evaluations(new BigBuffer(sDomain * 4), curve, logger);\n    evaluations.Sigma2 = new Evaluations(new BigBuffer(sDomain * 4), curve, logger);\n    evaluations.Sigma3 = new Evaluations(new BigBuffer(sDomain * 4), curve, logger);\n\n    await fdZKey.readToBuffer(evaluations.Sigma1.eval, 0, sDomain * 4, zkeySections[ZKEY_FF_SIGMA1_SECTION][0].p + sDomain);\n    await fdZKey.readToBuffer(evaluations.Sigma2.eval, 0, sDomain * 4, zkeySections[ZKEY_FF_SIGMA2_SECTION][0].p + sDomain);\n    await fdZKey.readToBuffer(evaluations.Sigma3.eval, 0, sDomain * 4, zkeySections[ZKEY_FF_SIGMA3_SECTION][0].p + sDomain);\n\n    if (logger) logger.info(`> Reading Section ${ZKEY_FF_PTAU_SECTION}. Powers of Tau`);\n    const PTau = new BigBuffer(zkey.domainSize * 16 * sG1);\n    // domainSize * 9 + 18 = SRS length in the zkey saved in setup process.\n    // it corresponds to the maximum SRS length needed, specifically to commit C2\n    // notice that the reserved buffers size is zkey.domainSize * 16 * sG1 because a power of two buffer size is needed\n    // the remaining buffer not filled from SRS are set to 0\n    await fdZKey.readToBuffer(PTau, 0, (zkey.domainSize * 9 + 18) * sG1, zkeySections[ZKEY_FF_PTAU_SECTION][0].p);\n\n    // START FFLONK PROVER PROTOCOL\n    if (globalThis.gc) globalThis.gc();\n\n    // ROUND 1. Compute C1(X) polynomial\n    if (logger) logger.info(\"\");\n    if (logger) logger.info(\"> ROUND 1\");\n    await round1();\n\n    delete polynomials.T0;\n    delete evaluations.QL;\n    delete evaluations.QR;\n    delete evaluations.QM;\n    delete evaluations.QO;\n    delete evaluations.QC;\n    if (globalThis.gc) globalThis.gc();\n\n    // ROUND 2. Compute C2(X) polynomial\n    if (logger) logger.info(\"> ROUND 2\");\n    await round2();\n\n    delete buffers.A;\n    delete buffers.B;\n    delete buffers.C;\n    delete evaluations.A;\n    delete evaluations.B;\n    delete evaluations.C;\n    delete evaluations.Sigma1;\n    delete evaluations.Sigma2;\n    delete evaluations.Sigma3;\n    delete evaluations.lagrange1;\n    delete evaluations.Z;\n    if (globalThis.gc) globalThis.gc();\n\n    // ROUND 3. Compute opening evaluations\n    if (logger) logger.info(\"> ROUND 3\");\n    await round3();\n\n    delete polynomials.A;\n    delete polynomials.B;\n    delete polynomials.C;\n    delete polynomials.Z;\n    delete polynomials.T1;\n    delete polynomials.T2;\n    delete polynomials.Sigma1;\n    delete polynomials.Sigma2;\n    delete polynomials.Sigma3;\n    delete polynomials.QL;\n    delete polynomials.QR;\n    delete polynomials.QM;\n    delete polynomials.QC;\n    delete polynomials.QO;\n    if (globalThis.gc) globalThis.gc();\n\n    // ROUND 4. Compute W(X) polynomial\n    if (logger) logger.info(\"> ROUND 4\");\n    await round4();\n    if (globalThis.gc) globalThis.gc();\n\n    // ROUND 5. Compute W'(X) polynomial\n    if (logger) logger.info(\"> ROUND 5\");\n    await round5();\n\n    delete polynomials.C0;\n    delete polynomials.C1;\n    delete polynomials.C2;\n    delete polynomials.R1;\n    delete polynomials.R2;\n    delete polynomials.F;\n    delete polynomials.L;\n    delete polynomials.ZT;\n    delete polynomials.ZTS2;\n    await fdZKey.close();\n    if (globalThis.gc) globalThis.gc();\n\n    proof.addEvaluation(\"inv\", getMontgomeryBatchedInverse());\n\n    // Prepare proof\n    let _proof = proof.toObjectProof();\n    _proof.protocol = \"fflonk\";\n    _proof.curve = curve.name;\n\n    // Prepare public inputs\n    let publicSignals = [];\n\n    for (let i = 1; i <= zkey.nPublic; i++) {\n        const i_sFr = i * sFr;\n\n        const pub = buffWitness.slice(i_sFr, i_sFr + sFr);\n        publicSignals.push(Scalar.fromRprLE(pub));\n    }\n\n    if (logger) logger.info(\"FFLONK PROVER FINISHED\");\n\n    return {\n        proof: stringifyBigInts(_proof),\n        publicSignals: stringifyBigInts(publicSignals)\n    };\n\n    async function calculateAdditions() {\n        if (logger) logger.info(\"··· Computing additions\");\n        const additionsBuff = await readSection(fdZKey, zkeySections, ZKEY_FF_ADDITIONS_SECTION);\n\n        // sizes: wireId_x = 4 bytes (32 bits), factor_x = field size bits\n        // Addition form: wireId_a wireId_b factor_a factor_b (size is 4 + 4 + sFr + sFr)\n        const sSum = 8 + sFr * 2;\n\n        for (let i = 0; i < zkey.nAdditions; i++) {\n            if (logger && (0 !== i) && (i % 100000 === 0)) logger.info(`    addition ${i}/${zkey.nAdditions}`);\n\n            // Read addition values\n            let offset = i * sSum;\n            const signalId1 = readUInt32(additionsBuff, offset);\n            offset += 4;\n            const signalId2 = readUInt32(additionsBuff, offset);\n            offset += 4;\n            const factor1 = additionsBuff.slice(offset, offset + sFr);\n            offset += sFr;\n            const factor2 = additionsBuff.slice(offset, offset + sFr);\n\n            // Get witness value\n            const witness1 = getWitness(signalId1);\n            const witness2 = getWitness(signalId2);\n\n            //Calculate final result\n            const result = Fr.add(Fr.mul(factor1, witness1), Fr.mul(factor2, witness2));\n\n            buffInternalWitness.set(result, sFr * i);\n        }\n    }\n\n    function readUInt32(b, o) {\n        const buff = b.slice(o, o + 4);\n        const buffV = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);\n        return buffV.getUint32(0, true);\n    }\n\n    function getWitness(idx) {\n        let diff = zkey.nVars - zkey.nAdditions;\n        if (idx < diff) {\n            return buffWitness.slice(idx * sFr, idx * sFr + sFr);\n        } else if (idx < zkey.nVars) {\n            const offset = (idx - diff) * sFr;\n            return buffInternalWitness.slice(offset, offset + sFr);\n        }\n\n        return Fr.zero;\n    }\n\n    async function round1() {\n        // STEP 1.1 - Generate random blinding scalars (b_1, ..., b9) ∈ F\n        challenges.b = [];\n        for (let i = 1; i <= 9; i++) {\n            challenges.b[i] = Fr.random();\n        }\n\n        // STEP 1.2 - Compute wire polynomials a(X), b(X) and c(X)\n        if (logger) logger.info(\"> Computing A, B, C wire polynomials\");\n        await computeWirePolynomials();\n\n        // STEP 1.3 - Compute the quotient polynomial T0(X)\n        if (logger) logger.info(\"> Computing T0 polynomial\");\n        await computeT0();\n\n        // STEP 1.4 - Compute the FFT-style combination polynomial C1(X)\n        if (logger) logger.info(\"> Computing C1 polynomial\");\n        await computeC1();\n\n        // The first output of the prover is ([C1]_1)\n        if (logger) logger.info(\"> Computing C1 multi exponentiation\");\n        let commitC1 = await polynomials.C1.multiExponentiation(PTau, \"C1\");\n        proof.addPolynomial(\"C1\", commitC1);\n\n        return 0;\n\n        async function computeWirePolynomials() {\n            if (logger) logger.info(\"··· Reading data from zkey file\");\n            // Build A, B and C evaluations buffer from zkey and witness files\n            buffers.A = new BigBuffer(sDomain);\n            buffers.B = new BigBuffer(sDomain);\n            buffers.C = new BigBuffer(sDomain);\n\n            // Read zkey sections and fill the buffers\n            const aMapBuff = await readSection(fdZKey, zkeySections, ZKEY_FF_A_MAP_SECTION);\n            const bMapBuff = await readSection(fdZKey, zkeySections, ZKEY_FF_B_MAP_SECTION);\n            const cMapBuff = await readSection(fdZKey, zkeySections, ZKEY_FF_C_MAP_SECTION);\n\n            // Compute all witness from signal ids and set them to A,B & C buffers\n            for (let i = 0; i < zkey.nConstraints; i++) {\n                const i_sFr = i * sFr;\n                const offset = i * 4;\n\n                // Compute A value from a signal id\n                const signalIdA = readUInt32(aMapBuff, offset);\n                buffers.A.set(getWitness(signalIdA), i_sFr);\n\n                // Compute B value from a signal id\n                const signalIdB = readUInt32(bMapBuff, offset);\n                buffers.B.set(getWitness(signalIdB), i_sFr);\n\n                // Compute C value from a signal id\n                const signalIdC = readUInt32(cMapBuff, offset);\n                buffers.C.set(getWitness(signalIdC), i_sFr);\n            }\n\n            // Blind a(X), b(X) and c(X) polynomials coefficients with blinding scalars b\n            buffers.A.set(challenges.b[1], sDomain - 64);\n            buffers.A.set(challenges.b[2], sDomain - 32);\n            buffers.B.set(challenges.b[3], sDomain - 64);\n            buffers.B.set(challenges.b[4], sDomain - 32);\n            buffers.C.set(challenges.b[5], sDomain - 64);\n            buffers.C.set(challenges.b[6], sDomain - 32);\n\n            buffers.A = await Fr.batchToMontgomery(buffers.A);\n            buffers.B = await Fr.batchToMontgomery(buffers.B);\n            buffers.C = await Fr.batchToMontgomery(buffers.C);\n\n            // Compute the coefficients of the wire polynomials a(X), b(X) and c(X) from A,B & C buffers\n            if (logger) logger.info(\"··· Computing A ifft\");\n            polynomials.A = await Polynomial.fromEvaluations(buffers.A, curve, logger);\n            if (logger) logger.info(\"··· Computing B ifft\");\n            polynomials.B = await Polynomial.fromEvaluations(buffers.B, curve, logger);\n            if (logger) logger.info(\"··· Computing C ifft\");\n            polynomials.C = await Polynomial.fromEvaluations(buffers.C, curve, logger);\n\n            // Compute extended evaluations of a(X), b(X) and c(X) polynomials\n            if (logger) logger.info(\"··· Computing A fft\");\n            evaluations.A = await Evaluations.fromPolynomial(polynomials.A, 4, curve, logger);\n            if (logger) logger.info(\"··· Computing B fft\");\n            evaluations.B = await Evaluations.fromPolynomial(polynomials.B, 4, curve, logger);\n            if (logger) logger.info(\"··· Computing C fft\");\n            evaluations.C = await Evaluations.fromPolynomial(polynomials.C, 4, curve, logger);\n\n            // Check degrees\n            if (polynomials.A.degree() >= zkey.domainSize) {\n                throw new Error(\"A Polynomial is not well calculated\");\n            }\n            if (polynomials.B.degree() >= zkey.domainSize) {\n                throw new Error(\"B Polynomial is not well calculated\");\n            }\n            if (polynomials.C.degree() >= zkey.domainSize) {\n                throw new Error(\"C Polynomial is not well calculated\");\n            }\n        }\n\n        async function computeT0() {\n            if (logger) logger.info(`··· Reading sections ${ZKEY_FF_QL_SECTION}, ${ZKEY_FF_QR_SECTION}` +\n                `, ${ZKEY_FF_QM_SECTION}, ${ZKEY_FF_QO_SECTION}, ${ZKEY_FF_QC_SECTION}. Q selectors`);\n            // Reserve memory for Q's evaluations\n            evaluations.QL = new Evaluations(new BigBuffer(sDomain * 4), curve, logger);\n            evaluations.QR = new Evaluations(new BigBuffer(sDomain * 4), curve, logger);\n            evaluations.QM = new Evaluations(new BigBuffer(sDomain * 4), curve, logger);\n            evaluations.QO = new Evaluations(new BigBuffer(sDomain * 4), curve, logger);\n            evaluations.QC = new Evaluations(new BigBuffer(sDomain * 4), curve, logger);\n\n            // Read Q's evaluations from zkey file\n            await fdZKey.readToBuffer(evaluations.QL.eval, 0, sDomain * 4, zkeySections[ZKEY_FF_QL_SECTION][0].p + sDomain);\n            await fdZKey.readToBuffer(evaluations.QR.eval, 0, sDomain * 4, zkeySections[ZKEY_FF_QR_SECTION][0].p + sDomain);\n            await fdZKey.readToBuffer(evaluations.QM.eval, 0, sDomain * 4, zkeySections[ZKEY_FF_QM_SECTION][0].p + sDomain);\n            await fdZKey.readToBuffer(evaluations.QO.eval, 0, sDomain * 4, zkeySections[ZKEY_FF_QO_SECTION][0].p + sDomain);\n            await fdZKey.readToBuffer(evaluations.QC.eval, 0, sDomain * 4, zkeySections[ZKEY_FF_QC_SECTION][0].p + sDomain);\n\n            // Read Lagrange polynomials & evaluations from zkey file\n            const lagrangePolynomials = await readSection(fdZKey, zkeySections, ZKEY_FF_LAGRANGE_SECTION);\n            evaluations.lagrange1 = new Evaluations(lagrangePolynomials, curve, logger);\n\n            // Reserve memory for buffers T0\n            buffers.T0 = new BigBuffer(sDomain * 4);\n\n            if (logger) logger.info(\"··· Computing T0 evaluations\");\n            for (let i = 0; i < zkey.domainSize * 4; i++) {\n                if (logger && (0 !== i) && (i % 100000 === 0)) logger.info(`      T0 evaluation ${i}/${zkey.domainSize * 4}`);\n\n                // Get related evaluations to compute current T0 evaluation\n                const a = evaluations.A.getEvaluation(i);\n                const b = evaluations.B.getEvaluation(i);\n                const c = evaluations.C.getEvaluation(i);\n\n                const ql = evaluations.QL.getEvaluation(i);\n                const qr = evaluations.QR.getEvaluation(i);\n                const qm = evaluations.QM.getEvaluation(i);\n                const qo = evaluations.QO.getEvaluation(i);\n                const qc = evaluations.QC.getEvaluation(i);\n\n                // Compute current public input\n                let pi = Fr.zero;\n                for (let j = 0; j < zkey.nPublic; j++) {\n                    const offset = (j * 5 * zkey.domainSize) + zkey.domainSize + i;\n\n                    const lPol = evaluations.lagrange1.getEvaluation(offset);\n                    const aVal = buffers.A.slice(j * sFr, (j + 1) * sFr);\n\n                    pi = Fr.sub(pi, Fr.mul(lPol, aVal));\n                }\n\n                //T0(X) = [q_L(X)·a(X) + q_R(X)·b(X) + q_M(X)·a(X)·b(X) + q_O(X)·c(X) + q_C(X) + PI(X)] · 1/Z_H(X)\n                // Compute first T0(X)·Z_H(X), so divide later the resulting polynomial by Z_H(X)\n                // expression 1 -> q_L(X)·a(X)\n                const e1 = Fr.mul(a, ql);\n\n                // expression 2 -> q_R(X)·b(X)\n                const e2 = Fr.mul(b, qr);\n\n                // expression 3 -> q_M(X)·a(X)·b(X)\n                const e3 = Fr.mul(Fr.mul(a, b), qm);\n\n                // expression 4 -> q_O(X)·c(X)\n                const e4 = Fr.mul(c, qo);\n\n                // t0 = expressions 1 + expression 2 + expression 3 + expression 4 + qc + pi\n                const t0 = Fr.add(e1, Fr.add(e2, Fr.add(e3, Fr.add(e4, Fr.add(qc, pi)))));\n\n                buffers.T0.set(t0, i * sFr);\n            }\n\n            if (logger) logger.info(\"buffer T0: \" + buffers.T0.byteLength / sFr);\n\n            // Compute the coefficients of the polynomial T0(X) from buffers.T0\n            if (logger) logger.info(\"··· Computing T0 ifft\");\n            polynomials.T0 = await Polynomial.fromEvaluations(buffers.T0, curve, logger);\n\n            if (logger) logger.info(\"T0 length: \" + polynomials.T0.length());\n            if (logger) logger.info(\"T0 degree: \" + polynomials.T0.degree());\n\n            // Divide the polynomial T0 by Z_H(X)\n            if (logger) logger.info(\"··· Computing T0 / ZH\");\n            polynomials.T0.divByZerofier(zkey.domainSize, Fr.one);\n\n            // Check degree\n            if (polynomials.T0.degree() >= 2 * zkey.domainSize - 2) {\n                throw new Error(`T0 Polynomial is not well calculated (degree is ${polynomials.T0.degree()} and must be less than ${2 * zkey.domainSize + 2}`);\n            }\n\n            delete buffers.T0;\n        }\n\n        async function computeC1() {\n            let C1 = new CPolynomial(4, curve, logger);\n            C1.addPolynomial(0, polynomials.A);\n            C1.addPolynomial(1, polynomials.B);\n            C1.addPolynomial(2, polynomials.C);\n            C1.addPolynomial(3, polynomials.T0);\n\n            polynomials.C1 = C1.getPolynomial();\n\n            // Check degree\n            if (polynomials.C1.degree() >= 8 * zkey.domainSize - 8) {\n                throw new Error(\"C1 Polynomial is not well calculated\");\n            }\n        }\n    }\n\n    async function round2() {\n        // STEP 2.1 - Compute permutation challenge beta and gamma ∈ F\n        // Compute permutation challenge beta\n        if (logger) logger.info(\"> Computing challenges beta and gamma\");\n        const transcript = new Keccak256Transcript(curve);\n\n        // Add C0 to the transcript\n        transcript.addPolCommitment(zkey.C0);\n\n        // Add A to the transcript\n        for (let i = 0; i < zkey.nPublic; i++) {\n            transcript.addScalar(buffers.A.slice(i * sFr, i * sFr + sFr));\n        }\n\n        // Add C1 to the transcript\n        transcript.addPolCommitment(proof.getPolynomial(\"C1\"));\n\n        challenges.beta = transcript.getChallenge();\n        if (logger) logger.info(\"··· challenges.beta: \" + Fr.toString(challenges.beta));\n\n        // Compute permutation challenge gamma\n        transcript.reset();\n        transcript.addScalar(challenges.beta);\n        challenges.gamma = transcript.getChallenge();\n        if (logger) logger.info(\"··· challenges.gamma: \" + Fr.toString(challenges.gamma));\n\n        // STEP 2.2 - Compute permutation polynomial z(X)\n        if (logger) logger.info(\"> Computing Z polynomial\");\n        await computeZ();\n\n        // STEP 2.3 - Compute quotient polynomial T1(X) and T2(X)\n        if (logger) logger.info(\"> Computing T1 polynomial\");\n        await computeT1();\n        if (logger) logger.info(\"> Computing T2 polynomial\");\n        await computeT2();\n\n        // STEP 2.4 - Compute the FFT-style combination polynomial C2(X)\n        if (logger) logger.info(\"> Computing C2 polynomial\");\n        await computeC2();\n\n        // The second output of the prover is ([C2]_1)\n        if (logger) logger.info(\"> Computing C2 multi exponentiation\");\n        let commitC2 = await polynomials.C2.multiExponentiation(PTau, \"C2\");\n        proof.addPolynomial(\"C2\", commitC2);\n\n        return 0;\n\n        async function computeZ() {\n            if (logger) logger.info(\"··· Computing Z evaluations\");\n\n            let numArr = new BigBuffer(sDomain);\n            let denArr = new BigBuffer(sDomain);\n\n            // Set the first values to 1\n            numArr.set(Fr.one, 0);\n            denArr.set(Fr.one, 0);\n\n            // Set initial omega\n            let w = Fr.one;\n            for (let i = 0; i < zkey.domainSize; i++) {\n                if (logger && (0 !== i) && (i % 100000 === 0)) logger.info(`    Z evaluation ${i}/${zkey.domainSize}`);\n                const i_sFr = i * sFr;\n\n                // Z(X) := numArr / denArr\n                // numArr := (a + beta·ω + gamma)(b + beta·ω·k1 + gamma)(c + beta·ω·k2 + gamma)\n                const betaw = Fr.mul(challenges.beta, w);\n\n                let num1 = buffers.A.slice(i_sFr, i_sFr + sFr);\n                num1 = Fr.add(num1, betaw);\n                num1 = Fr.add(num1, challenges.gamma);\n\n                let num2 = buffers.B.slice(i_sFr, i_sFr + sFr);\n                num2 = Fr.add(num2, Fr.mul(zkey.k1, betaw));\n                num2 = Fr.add(num2, challenges.gamma);\n\n                let num3 = buffers.C.slice(i_sFr, i_sFr + sFr);\n                num3 = Fr.add(num3, Fr.mul(zkey.k2, betaw));\n                num3 = Fr.add(num3, challenges.gamma);\n\n                let num = Fr.mul(num1, Fr.mul(num2, num3));\n\n                // denArr := (a + beta·sigma1 + gamma)(b + beta·sigma2 + gamma)(c + beta·sigma3 + gamma)\n                let den1 = buffers.A.slice(i_sFr, i_sFr + sFr);\n                den1 = Fr.add(den1, Fr.mul(challenges.beta, evaluations.Sigma1.getEvaluation(i * 4)));\n                den1 = Fr.add(den1, challenges.gamma);\n\n                let den2 = buffers.B.slice(i_sFr, i_sFr + sFr);\n                den2 = Fr.add(den2, Fr.mul(challenges.beta, evaluations.Sigma2.getEvaluation(i * 4)));\n                den2 = Fr.add(den2, challenges.gamma);\n\n                let den3 = buffers.C.slice(i_sFr, i_sFr + sFr);\n                den3 = Fr.add(den3, Fr.mul(challenges.beta, evaluations.Sigma3.getEvaluation(i * 4)));\n                den3 = Fr.add(den3, challenges.gamma);\n\n                let den = Fr.mul(den1, Fr.mul(den2, den3));\n\n                // Multiply current num value with the previous one saved in numArr\n                num = Fr.mul(numArr.slice(i_sFr, i_sFr + sFr), num);\n                numArr.set(num, ((i + 1) % zkey.domainSize) * sFr);\n\n                // Multiply current den value with the previous one saved in denArr\n                den = Fr.mul(denArr.slice(i_sFr, i_sFr + sFr), den);\n                denArr.set(den, ((i + 1) % zkey.domainSize) * sFr);\n\n                // Next omega\n                w = Fr.mul(w, Fr.w[zkey.power]);\n            }\n            // Compute the inverse of denArr to compute in the next command the\n            // division numArr/denArr by multiplying num · 1/denArr\n            denArr = await Fr.batchInverse(denArr);\n\n            // TODO: Do it in assembly and in parallel\n            // Multiply numArr · denArr where denArr was inverted in the previous command\n            for (let i = 0; i < zkey.domainSize; i++) {\n                const i_sFr = i * sFr;\n\n                const z = Fr.mul(numArr.slice(i_sFr, i_sFr + sFr), denArr.slice(i_sFr, i_sFr + sFr));\n                numArr.set(z, i_sFr);\n            }\n            // From now on the values saved on numArr will be Z(X) buffer\n            buffers.Z = numArr;\n\n            if (!Fr.eq(numArr.slice(0, sFr), Fr.one)) {\n                throw new Error(\"Copy constraints does not match\");\n            }\n\n            // Compute polynomial coefficients z(X) from buffers.Z\n            if (logger) logger.info(\"··· Computing Z ifft\");\n            polynomials.Z = await Polynomial.fromEvaluations(buffers.Z, curve, logger);\n\n            // Compute extended evaluations of z(X) polynomial\n            if (logger) logger.info(\"··· Computing Z fft\");\n            evaluations.Z = await Evaluations.fromPolynomial(polynomials.Z, 4, curve, logger);\n\n            // Blind z(X) polynomial coefficients with blinding scalars b\n            polynomials.Z.blindCoefficients([challenges.b[9], challenges.b[8], challenges.b[7]]);\n\n            // Check degree\n            if (polynomials.Z.degree() >= zkey.domainSize + 3) {\n                throw new Error(\"Z Polynomial is not well calculated\");\n            }\n\n            delete buffers.Z;\n        }\n\n        async function computeT1() {\n            if (logger) logger.info(\"··· Computing T1 evaluations\");\n\n            buffers.T1 = new BigBuffer(sDomain * 2);\n            buffers.T1z = new BigBuffer(sDomain * 2);\n\n            // Set initial omega\n            let omega = Fr.one;\n            for (let i = 0; i < zkey.domainSize * 2; i++) {\n                if (logger && (0 !== i) && (i % 100000 === 0)) logger.info(`    T1 evaluation ${i}/${zkey.domainSize * 4}`);\n\n                const omega2 = Fr.square(omega);\n\n                const z = evaluations.Z.getEvaluation(i * 2);\n                const zp = Fr.add(Fr.add(Fr.mul(challenges.b[7], omega2), Fr.mul(challenges.b[8], omega)), challenges.b[9]);\n\n                // T1(X) := (z(X) - 1) · L_1(X)\n                // Compute first T1(X)·Z_H(X), so divide later the resulting polynomial by Z_H(X)\n                const lagrange1 = evaluations.lagrange1.getEvaluation(zkey.domainSize + i * 2);\n                let t1 = Fr.mul(Fr.sub(z, Fr.one), lagrange1);\n                let t1z = Fr.mul(zp, lagrange1);\n\n                buffers.T1.set(t1, i * sFr);\n                buffers.T1z.set(t1z, i * sFr);\n\n                // Compute next omega\n                omega = Fr.mul(omega, Fr.w[zkey.power + 1]);\n            }\n\n            // Compute the coefficients of the polynomial T1(X) from buffers.T1\n            if (logger) logger.info(\"··· Computing T1 ifft\");\n            polynomials.T1 = await Polynomial.fromEvaluations(buffers.T1, curve, logger);\n\n            // Divide the polynomial T1 by Z_H(X)\n            polynomials.T1.divByZerofier(zkey.domainSize, Fr.one);\n\n            // Compute the coefficients of the polynomial T1z(X) from buffers.T1z\n            if (logger) logger.info(\"··· Computing T1z ifft\");\n            polynomials.T1z = await Polynomial.fromEvaluations(buffers.T1z, curve, logger);\n\n            // Add the polynomial T1z to T1 to get the final polynomial T1\n            polynomials.T1.add(polynomials.T1z);\n\n            // Check degree\n            if (polynomials.T1.degree() >= zkey.domainSize + 2) {\n                throw new Error(\"T1 Polynomial is not well calculated\");\n            }\n\n            delete buffers.T1;\n            delete buffers.T1z;\n            delete polynomials.T1z;\n        }\n\n        async function computeT2() {\n            if (logger) logger.info(\"··· Computing T2 evaluations\");\n\n            buffers.T2 = new BigBuffer(sDomain * 4);\n            buffers.T2z = new BigBuffer(sDomain * 4);\n\n            // Set initial omega\n            let omega = Fr.one;\n            for (let i = 0; i < zkey.domainSize * 4; i++) {\n                if (logger && (0 !== i) && (i % 100000 === 0)) logger.info(`    T2 evaluation ${i}/${zkey.domainSize * 4}`);\n\n                const omega2 = Fr.square(omega);\n                const omegaW = Fr.mul(omega, Fr.w[zkey.power]);\n                const omegaW2 = Fr.square(omegaW);\n\n                const a = evaluations.A.getEvaluation(i);\n                const b = evaluations.B.getEvaluation(i);\n                const c = evaluations.C.getEvaluation(i);\n                const z = evaluations.Z.getEvaluation(i);\n                const zW = evaluations.Z.getEvaluation((zkey.domainSize * 4 + 4 + i) % (zkey.domainSize * 4));\n\n                const zp = Fr.add(Fr.add(Fr.mul(challenges.b[7], omega2), Fr.mul(challenges.b[8], omega)), challenges.b[9]);\n                const zWp = Fr.add(Fr.add(Fr.mul(challenges.b[7], omegaW2), Fr.mul(challenges.b[8], omegaW)), challenges.b[9]);\n\n                const sigma1 = evaluations.Sigma1.getEvaluation(i);\n                const sigma2 = evaluations.Sigma2.getEvaluation(i);\n                const sigma3 = evaluations.Sigma3.getEvaluation(i);\n\n                // T2(X) := [ (a(X) + beta·X + gamma)(b(X) + beta·k1·X + gamma)(c(X) + beta·k2·X + gamma)z(X)\n                //           -(a(X) + beta·sigma1(X) + gamma)(b(X) + beta·sigma2(X) + gamma)(c(X) + beta·sigma3(X) + gamma)z(Xω)] · 1/Z_H(X)\n                // Compute first T2(X)·Z_H(X), so divide later the resulting polynomial by Z_H(X)\n\n                // expression 1 -> (a(X) + beta·X + gamma)(b(X) + beta·k1·X + gamma)(c(X) + beta·k2·X + gamma)z(X)\n                const betaX = Fr.mul(challenges.beta, omega);\n\n                let e11 = Fr.add(a, betaX);\n                e11 = Fr.add(e11, challenges.gamma);\n\n                let e12 = Fr.add(b, Fr.mul(betaX, zkey.k1));\n                e12 = Fr.add(e12, challenges.gamma);\n\n                let e13 = Fr.add(c, Fr.mul(betaX, zkey.k2));\n                e13 = Fr.add(e13, challenges.gamma);\n\n                let e1 = Fr.mul(Fr.mul(Fr.mul(e11, e12), e13), z);\n                let e1z = Fr.mul(Fr.mul(Fr.mul(e11, e12), e13), zp);\n                // const [e1, e1z] = MulZ.mul4(e11, e12, e13, z, ap, bp, cp, zp, i % 4, Fr);\n\n                // expression 2 -> (a(X) + beta·sigma1(X) + gamma)(b(X) + beta·sigma2(X) + gamma)(c(X) + beta·sigma3(X) + gamma)z(Xω)\n                let e21 = Fr.add(a, Fr.mul(challenges.beta, sigma1));\n                e21 = Fr.add(e21, challenges.gamma);\n\n                let e22 = Fr.add(b, Fr.mul(challenges.beta, sigma2));\n                e22 = Fr.add(e22, challenges.gamma);\n\n                let e23 = Fr.add(c, Fr.mul(challenges.beta, sigma3));\n                e23 = Fr.add(e23, challenges.gamma);\n\n                let e2 = Fr.mul(Fr.mul(Fr.mul(e21, e22), e23), zW);\n                let e2z = Fr.mul(Fr.mul(Fr.mul(e21, e22), e23), zWp);\n                // const [e2, e2z] = MulZ.mul4(e21, e22, e23, zW, ap, bp, cp, zWp, i % 4, Fr);\n\n                let t2 = Fr.sub(e1, e2);\n                let t2z = Fr.sub(e1z, e2z);\n\n                buffers.T2.set(t2, i * sFr);\n                buffers.T2z.set(t2z, i * sFr);\n\n                // Compute next omega\n                omega = Fr.mul(omega, Fr.w[zkey.power + 2]);\n            }\n\n            // Compute the coefficients of the polynomial T2(X) from buffers.T2\n            if (logger) logger.info(\"··· Computing T2 ifft\");\n            polynomials.T2 = await Polynomial.fromEvaluations(buffers.T2, curve, logger);\n\n            // Divide the polynomial T2 by Z_H(X)\n            if (logger) logger.info(\"··· Computing T2 / ZH\");\n            polynomials.T2.divByZerofier(zkey.domainSize, Fr.one);\n\n            // Compute the coefficients of the polynomial T2z(X) from buffers.T2z\n            if (logger) logger.info(\"··· Computing T2z ifft\");\n            polynomials.T2z = await Polynomial.fromEvaluations(buffers.T2z, curve, logger);\n\n            // Add the polynomial T2z to T2 to get the final polynomial T2\n            polynomials.T2.add(polynomials.T2z);\n\n            // Check degree\n            if (polynomials.T2.degree() >= 3 * zkey.domainSize) {\n                throw new Error(\"T2 Polynomial is not well calculated\");\n            }\n\n            delete buffers.T2;\n            delete buffers.T2z;\n            delete polynomials.T2z;\n        }\n\n        async function computeC2() {\n            let C2 = new CPolynomial(3, curve, logger);\n            C2.addPolynomial(0, polynomials.Z);\n            C2.addPolynomial(1, polynomials.T1);\n            C2.addPolynomial(2, polynomials.T2);\n\n            polynomials.C2 = C2.getPolynomial();\n\n            // Check degree\n            if (polynomials.C2.degree() >= 9 * zkey.domainSize) {\n                throw new Error(\"C2 Polynomial is not well calculated\");\n            }\n        }\n    }\n\n    async function round3() {\n        if (logger) logger.info(\"> Computing challenge xi\");\n        // STEP 3.1 - Compute evaluation challenge xi ∈ S\n        const transcript = new Keccak256Transcript(curve);\n        transcript.addScalar(challenges.gamma);\n        transcript.addPolCommitment(proof.getPolynomial(\"C2\"));\n\n        // Obtain a xi_seeder from the transcript\n        // To force h1^4 = xi, h2^3 = xi and h_3^2 = xiω\n        // we compute xi = xi_seeder^12, h1 = xi_seeder^3, h2 = xi_seeder^4 and h3 = xi_seeder^6\n        challenges.xiSeed = transcript.getChallenge();\n        const xiSeed2 = Fr.square(challenges.xiSeed);\n\n        // Compute omega8, omega4 and omega3\n        roots.w8 = [];\n        roots.w8[0] = Fr.one;\n        for (let i = 1; i < 8; i++) {\n            roots.w8[i] = Fr.mul(roots.w8[i - 1], zkey.w8);\n        }\n\n        roots.w4 = [];\n        roots.w4[0] = Fr.one;\n        for (let i = 1; i < 4; i++) {\n            roots.w4[i] = Fr.mul(roots.w4[i - 1], zkey.w4);\n        }\n\n        roots.w3 = [];\n        roots.w3[0] = Fr.one;\n        roots.w3[1] = zkey.w3;\n        roots.w3[2] = Fr.square(zkey.w3);\n\n        // Compute h0 = xiSeeder^3\n        roots.S0 = {};\n        roots.S0.h0w8 = [];\n        roots.S0.h0w8[0] = Fr.mul(xiSeed2, challenges.xiSeed);\n        for (let i = 1; i < 8; i++) {\n            roots.S0.h0w8[i] = Fr.mul(roots.S0.h0w8[0], roots.w8[i]);\n        }\n\n        // Compute h1 = xi_seeder^6\n        roots.S1 = {};\n        roots.S1.h1w4 = [];\n        roots.S1.h1w4[0] = Fr.square(roots.S0.h0w8[0]);\n        for (let i = 1; i < 4; i++) {\n            roots.S1.h1w4[i] = Fr.mul(roots.S1.h1w4[0], roots.w4[i]);\n        }\n\n        // Compute h2 = xi_seeder^8\n        roots.S2 = {};\n        roots.S2.h2w3 = [];\n        roots.S2.h2w3[0] = Fr.mul(roots.S1.h1w4[0], xiSeed2);\n        roots.S2.h2w3[1] = Fr.mul(roots.S2.h2w3[0], roots.w3[1]);\n        roots.S2.h2w3[2] = Fr.mul(roots.S2.h2w3[0], roots.w3[2]);\n\n        roots.S2.h3w3 = [];\n        // Multiply h3 by third-root-omega to obtain h_3^3 = xiω\n        // So, h3 = xi_seeder^8 ω^{1/3}\n        roots.S2.h3w3[0] = Fr.mul(roots.S2.h2w3[0], zkey.wr);\n        roots.S2.h3w3[1] = Fr.mul(roots.S2.h3w3[0], roots.w3[1]);\n        roots.S2.h3w3[2] = Fr.mul(roots.S2.h3w3[0], roots.w3[2]);\n\n        // Compute xi = xi_seeder^24\n        challenges.xi = Fr.mul(Fr.square(roots.S2.h2w3[0]), roots.S2.h2w3[0]);\n\n        if (logger) logger.info(\"··· challenges.xi: \" + Fr.toString(challenges.xi));\n\n        // Reserve memory for Q's polynomials\n        polynomials.QL = new Polynomial(new BigBuffer(sDomain), curve, logger);\n        polynomials.QR = new Polynomial(new BigBuffer(sDomain), curve, logger);\n        polynomials.QM = new Polynomial(new BigBuffer(sDomain), curve, logger);\n        polynomials.QO = new Polynomial(new BigBuffer(sDomain), curve, logger);\n        polynomials.QC = new Polynomial(new BigBuffer(sDomain), curve, logger);\n\n        // Read Q's evaluations from zkey file\n        await fdZKey.readToBuffer(polynomials.QL.coef, 0, sDomain, zkeySections[ZKEY_FF_QL_SECTION][0].p);\n        await fdZKey.readToBuffer(polynomials.QR.coef, 0, sDomain, zkeySections[ZKEY_FF_QR_SECTION][0].p);\n        await fdZKey.readToBuffer(polynomials.QM.coef, 0, sDomain, zkeySections[ZKEY_FF_QM_SECTION][0].p);\n        await fdZKey.readToBuffer(polynomials.QO.coef, 0, sDomain, zkeySections[ZKEY_FF_QO_SECTION][0].p);\n        await fdZKey.readToBuffer(polynomials.QC.coef, 0, sDomain, zkeySections[ZKEY_FF_QC_SECTION][0].p);\n\n        // STEP 3.2 - Compute opening evaluations and add them to the proof (third output of the prover)\n        if (logger) logger.info(\"··· Computing evaluations\");\n        proof.addEvaluation(\"ql\", polynomials.QL.evaluate(challenges.xi));\n        proof.addEvaluation(\"qr\", polynomials.QR.evaluate(challenges.xi));\n        proof.addEvaluation(\"qm\", polynomials.QM.evaluate(challenges.xi));\n        proof.addEvaluation(\"qo\", polynomials.QO.evaluate(challenges.xi));\n        proof.addEvaluation(\"qc\", polynomials.QC.evaluate(challenges.xi));\n        proof.addEvaluation(\"s1\", polynomials.Sigma1.evaluate(challenges.xi));\n        proof.addEvaluation(\"s2\", polynomials.Sigma2.evaluate(challenges.xi));\n        proof.addEvaluation(\"s3\", polynomials.Sigma3.evaluate(challenges.xi));\n        proof.addEvaluation(\"a\", polynomials.A.evaluate(challenges.xi));\n        proof.addEvaluation(\"b\", polynomials.B.evaluate(challenges.xi));\n        proof.addEvaluation(\"c\", polynomials.C.evaluate(challenges.xi));\n        proof.addEvaluation(\"z\", polynomials.Z.evaluate(challenges.xi));\n\n        challenges.xiw = Fr.mul(challenges.xi, Fr.w[zkey.power]);\n        proof.addEvaluation(\"zw\", polynomials.Z.evaluate(challenges.xiw));\n        proof.addEvaluation(\"t1w\", polynomials.T1.evaluate(challenges.xiw));\n        proof.addEvaluation(\"t2w\", polynomials.T2.evaluate(challenges.xiw));\n    }\n\n    async function round4() {\n        if (logger) logger.info(\"> Computing challenge alpha\");\n        // STEP 4.1 - Compute challenge alpha ∈ F\n        const transcript = new Keccak256Transcript(curve);\n        transcript.addScalar(challenges.xiSeed);\n        transcript.addScalar(proof.getEvaluation(\"ql\"));\n        transcript.addScalar(proof.getEvaluation(\"qr\"));\n        transcript.addScalar(proof.getEvaluation(\"qm\"));\n        transcript.addScalar(proof.getEvaluation(\"qo\"));\n        transcript.addScalar(proof.getEvaluation(\"qc\"));\n        transcript.addScalar(proof.getEvaluation(\"s1\"));\n        transcript.addScalar(proof.getEvaluation(\"s2\"));\n        transcript.addScalar(proof.getEvaluation(\"s3\"));\n        transcript.addScalar(proof.getEvaluation(\"a\"));\n        transcript.addScalar(proof.getEvaluation(\"b\"));\n        transcript.addScalar(proof.getEvaluation(\"c\"));\n        transcript.addScalar(proof.getEvaluation(\"z\"));\n        transcript.addScalar(proof.getEvaluation(\"zw\"));\n        transcript.addScalar(proof.getEvaluation(\"t1w\"));\n        transcript.addScalar(proof.getEvaluation(\"t2w\"));\n        challenges.alpha = transcript.getChallenge();\n        if (logger) logger.info(\"··· challenges.alpha: \" + Fr.toString(challenges.alpha));\n\n        // STEP 4.2 - Compute F(X)\n        if (logger) logger.info(\"> Reading C0 polynomial\");\n        polynomials.C0 = new Polynomial(new BigBuffer(sDomain * 8), curve, logger);\n        await fdZKey.readToBuffer(polynomials.C0.coef, 0, sDomain * 8, zkeySections[ZKEY_FF_C0_SECTION][0].p);\n\n        if (logger) logger.info(\"> Computing R0 polynomial\");\n        computeR0();\n        if (logger) logger.info(\"> Computing R1 polynomial\");\n        computeR1();\n        if (logger) logger.info(\"> Computing R2 polynomial\");\n        computeR2();\n\n        if (logger) logger.info(\"> Computing F polynomial\");\n        await computeF();\n\n        // The fourth output of the prover is ([W1]_1), where W1:=(f/Z_t)(x)\n        if (logger) logger.info(\"> Computing W1 multi exponentiation\");\n        let commitW1 = await polynomials.F.multiExponentiation(PTau, \"W1\");\n        proof.addPolynomial(\"W1\", commitW1);\n\n        return 0;\n\n        function computeR0() {\n            // COMPUTE R0\n            // Compute the coefficients of R0(X) from 8 evaluations using lagrange interpolation. R0(X) ∈ F_{<8}[X]\n            // We decide to use Lagrange interpolations because the R0 degree is very small (deg(R0)===7),\n            // and we were not able to compute it using current ifft implementation because the omega are different\n            polynomials.R0 = Polynomial.lagrangePolynomialInterpolation(\n                [roots.S0.h0w8[0], roots.S0.h0w8[1], roots.S0.h0w8[2], roots.S0.h0w8[3],\n                    roots.S0.h0w8[4], roots.S0.h0w8[5], roots.S0.h0w8[6], roots.S0.h0w8[7]],\n                [polynomials.C0.evaluate(roots.S0.h0w8[0]), polynomials.C0.evaluate(roots.S0.h0w8[1]),\n                    polynomials.C0.evaluate(roots.S0.h0w8[2]), polynomials.C0.evaluate(roots.S0.h0w8[3]),\n                    polynomials.C0.evaluate(roots.S0.h0w8[4]), polynomials.C0.evaluate(roots.S0.h0w8[5]),\n                    polynomials.C0.evaluate(roots.S0.h0w8[6]), polynomials.C0.evaluate(roots.S0.h0w8[7])], curve);\n\n            // Check the degree of r0(X) < 8\n            if (polynomials.R0.degree() > 7) {\n                throw new Error(\"R0 Polynomial is not well calculated\");\n            }\n        }\n\n        function computeR1() {\n            // COMPUTE R1\n            // Compute the coefficients of R1(X) from 4 evaluations using lagrange interpolation. R1(X) ∈ F_{<4}[X]\n            // We decide to use Lagrange interpolations because the R1 degree is very small (deg(R1)===3),\n            // and we were not able to compute it using current ifft implementation because the omega are different\n            polynomials.R1 = Polynomial.lagrangePolynomialInterpolation(\n                [roots.S1.h1w4[0], roots.S1.h1w4[1], roots.S1.h1w4[2], roots.S1.h1w4[3]],\n                [polynomials.C1.evaluate(roots.S1.h1w4[0]), polynomials.C1.evaluate(roots.S1.h1w4[1]),\n                    polynomials.C1.evaluate(roots.S1.h1w4[2]), polynomials.C1.evaluate(roots.S1.h1w4[3])], curve);\n\n            // Check the degree of r1(X) < 4\n            if (polynomials.R1.degree() > 3) {\n                throw new Error(\"R1 Polynomial is not well calculated\");\n            }\n        }\n\n        function computeR2() {\n            // COMPUTE R2\n            // Compute the coefficients of r2(X) from 6 evaluations using lagrange interpolation. r2(X) ∈ F_{<6}[X]\n            // We decide to use Lagrange interpolations because the R2.degree is very small (deg(R2)===5),\n            // and we were not able to compute it using current ifft implementation because the omega are different\n            polynomials.R2 = Polynomial.lagrangePolynomialInterpolation(\n                [roots.S2.h2w3[0], roots.S2.h2w3[1], roots.S2.h2w3[2],\n                    roots.S2.h3w3[0], roots.S2.h3w3[1], roots.S2.h3w3[2]],\n                [polynomials.C2.evaluate(roots.S2.h2w3[0]), polynomials.C2.evaluate(roots.S2.h2w3[1]),\n                    polynomials.C2.evaluate(roots.S2.h2w3[2]), polynomials.C2.evaluate(roots.S2.h3w3[0]),\n                    polynomials.C2.evaluate(roots.S2.h3w3[1]), polynomials.C2.evaluate(roots.S2.h3w3[2])], curve);\n\n            // Check the degree of r2(X) < 6\n            if (polynomials.R2.degree() > 5) {\n                throw new Error(\"R2 Polynomial is not well calculated\");\n            }\n        }\n\n        async function computeF() {\n            if (logger) logger.info(\"··· Computing F polynomial\");\n\n            // COMPUTE F(X)\n            polynomials.F = Polynomial.fromPolynomial(polynomials.C0, curve, logger);\n            polynomials.F.sub(polynomials.R0);\n            polynomials.F.divByZerofier(8, challenges.xi);\n\n            let f2 = Polynomial.fromPolynomial(polynomials.C1, curve, logger);\n            f2.sub(polynomials.R1);\n            f2.mulScalar(challenges.alpha);\n            f2.divByZerofier(4, challenges.xi);\n\n            let f3 = Polynomial.fromPolynomial(polynomials.C2, curve, logger);\n            f3.sub(polynomials.R2);\n            f3.mulScalar(Fr.square(challenges.alpha));\n            f3.divByZerofier(3, challenges.xi);\n            f3.divByZerofier(3, challenges.xiw);\n\n            polynomials.F.add(f2);\n            polynomials.F.add(f3);\n\n            if (polynomials.F.degree() >= 9 * zkey.domainSize - 6) {\n                throw new Error(\"F Polynomial is not well calculated\");\n            }\n        }\n    }\n\n    async function round5() {\n        if (logger) logger.info(\"> Computing challenge y\");\n\n        // STEP 5.1 - Compute random evaluation point y ∈ F\n        const transcript = new Keccak256Transcript(curve);\n        transcript.addScalar(challenges.alpha);\n        transcript.addPolCommitment(proof.getPolynomial(\"W1\"));\n\n        challenges.y = transcript.getChallenge();\n        if (logger) logger.info(\"··· challenges.y: \" + Fr.toString(challenges.y));\n\n        // STEP 5.2 - Compute L(X)\n        if (logger) logger.info(\"> Computing L polynomial\");\n        await computeL();\n\n        if (logger) logger.info(\"> Computing ZTS2 polynomial\");\n        await computeZTS2();\n\n        let ZTS2Y = polynomials.ZTS2.evaluate(challenges.y);\n        ZTS2Y = Fr.inv(ZTS2Y);\n        polynomials.L.mulScalar(ZTS2Y);\n\n        const polDividend = Polynomial.fromCoefficientsArray([Fr.neg(challenges.y), Fr.one], curve);\n        if (logger) logger.info(\"> Computing W' = L / ZTS2 polynomial\");\n        const polRemainder = polynomials.L.divBy(polDividend);\n\n        //Check polReminder degree is equal to zero\n        if (polRemainder.degree() > 0) {\n            throw new Error(`Degree of L(X)/(ZTS2(y)(X-y)) remainder is ${polRemainder.degree()} and should be 0`);\n        }\n\n        if (polynomials.L.degree() >= 9 * zkey.domainSize - 1) {\n            throw new Error(\"Degree of L(X)/(ZTS2(y)(X-y)) is not correct\");\n        }\n\n        // The fifth output of the prover is ([W2]_1), where W2:=(f/Z_t)(x)\n        if (logger) logger.info(\"> Computing W' multi exponentiation\");\n        let commitW2 = await polynomials.L.multiExponentiation(PTau, \"W2\");\n        proof.addPolynomial(\"W2\", commitW2);\n\n        return 0;\n\n        async function computeL() {\n            if (logger) logger.info(\"··· Computing L polynomial\");\n\n            const evalR0Y = polynomials.R0.evaluate(challenges.y);\n            const evalR1Y = polynomials.R1.evaluate(challenges.y);\n            const evalR2Y = polynomials.R2.evaluate(challenges.y);\n\n            let mulL0 = Fr.sub(challenges.y, roots.S0.h0w8[0]);\n            for (let i = 1; i < 8; i++) {\n                mulL0 = Fr.mul(mulL0, Fr.sub(challenges.y, roots.S0.h0w8[i]));\n            }\n\n            let mulL1 = Fr.sub(challenges.y, roots.S1.h1w4[0]);\n            for (let i = 1; i < 4; i++) {\n                mulL1 = Fr.mul(mulL1, Fr.sub(challenges.y, roots.S1.h1w4[i]));\n            }\n\n            let mulL2 = Fr.sub(challenges.y, roots.S2.h2w3[0]);\n            for (let i = 1; i < 3; i++) {\n                mulL2 = Fr.mul(mulL2, Fr.sub(challenges.y, roots.S2.h2w3[i]));\n            }\n            for (let i = 0; i < 3; i++) {\n                mulL2 = Fr.mul(mulL2, Fr.sub(challenges.y, roots.S2.h3w3[i]));\n            }\n\n            let preL0 = Fr.mul(mulL1, mulL2);\n            let preL1 = Fr.mul(challenges.alpha, Fr.mul(mulL0, mulL2));\n            let preL2 = Fr.mul(Fr.square(challenges.alpha), Fr.mul(mulL0, mulL1));\n\n            toInverse[\"denH1\"] = mulL1;\n            toInverse[\"denH2\"] = mulL2;\n\n            // COMPUTE L(X)\n            polynomials.L = Polynomial.fromPolynomial(polynomials.C0, curve, logger);\n            polynomials.L.subScalar(evalR0Y);\n            polynomials.L.mulScalar(preL0);\n\n            let l2 = Polynomial.fromPolynomial(polynomials.C1, curve, logger);\n            l2.subScalar(evalR1Y);\n            l2.mulScalar(preL1);\n\n            let l3 = Polynomial.fromPolynomial(polynomials.C2, curve, logger);\n            l3.subScalar(evalR2Y);\n            l3.mulScalar(preL2);\n\n            polynomials.L.add(l2);\n            polynomials.L.add(l3);\n\n            if (logger) logger.info(\"> Computing ZT polynomial\");\n            await computeZT();\n\n            const evalZTY = polynomials.ZT.evaluate(challenges.y);\n            polynomials.F.mulScalar(evalZTY);\n            polynomials.L.sub(polynomials.F);\n\n            // Check degree\n            if (polynomials.L.degree() >= 9 * zkey.domainSize) {\n                throw new Error(\"L Polynomial is not well calculated\");\n            }\n\n            delete buffers.L;\n        }\n\n        async function computeZT() {\n            polynomials.ZT = Polynomial.zerofierPolynomial(\n                [\n                    roots.S0.h0w8[0], roots.S0.h0w8[1], roots.S0.h0w8[2], roots.S0.h0w8[3],\n                    roots.S0.h0w8[4], roots.S0.h0w8[5], roots.S0.h0w8[6], roots.S0.h0w8[7],\n                    roots.S1.h1w4[0], roots.S1.h1w4[1], roots.S1.h1w4[2], roots.S1.h1w4[3],\n                    roots.S2.h2w3[0], roots.S2.h2w3[1], roots.S2.h2w3[2],\n                    roots.S2.h3w3[0], roots.S2.h3w3[1], roots.S2.h3w3[2]], curve);\n        }\n\n        async function computeZTS2() {\n            polynomials.ZTS2 = Polynomial.zerofierPolynomial(\n                [roots.S1.h1w4[0], roots.S1.h1w4[1], roots.S1.h1w4[2], roots.S1.h1w4[3],\n                    roots.S2.h2w3[0], roots.S2.h2w3[1], roots.S2.h2w3[2],\n                    roots.S2.h3w3[0], roots.S2.h3w3[1], roots.S2.h3w3[2]], curve);\n        }\n    }\n\n    function getMontgomeryBatchedInverse() {\n        //   · denominator needed in step 8 and 9 of the verifier to multiply by 1/Z_H(xi)\n        let xiN = challenges.xi;\n        for (let i = 0; i < zkey.power; i++) {\n            xiN = Fr.square(xiN);\n        }\n        toInverse[\"zh\"] = Fr.sub(xiN, Fr.one);\n\n        //   · denominator needed in step 10 and 11 of the verifier\n        //     toInverse.denH1 & toInverse.denH2  -> Computed in round5, computeL()\n\n        //   · denominator needed in the verifier when computing L_i^{S0}(X), L_i^{S1}(X) and L_i^{S2}(X)\n        computeLiS0(toInverse, roots.S0.h0w8, challenges.y, curve);\n\n        computeLiS1(toInverse, roots.S1.h1w4, challenges.y, curve);\n\n        computeLiS2(toInverse, roots.S2.h2w3, roots.S2.h3w3, challenges.y, challenges.xi, challenges.xiw, curve);\n\n        //   · L_i i=1 to num public inputs, needed in step 6 and 7 of the verifier to compute L_1(xi) and PI(xi)\n        const size = Math.max(1, zkey.nPublic);\n\n        let w = Fr.one;\n        for (let i = 0; i < size; i++) {\n            toInverse[\"Li_\" + (i + 1)] = Fr.mul(Fr.e(zkey.domainSize), Fr.sub(challenges.xi, w));\n            w = Fr.mul(w, Fr.w[zkey.power]);\n        }\n\n        let mulAccumulator = Fr.one;\n        for (const element of Object.values(toInverse)) {\n            if(Array.isArray(element)) {\n                for (const subElement of element) {\n                    mulAccumulator = Fr.mul(mulAccumulator, subElement);\n                }\n            } else {\n                mulAccumulator = Fr.mul(mulAccumulator, element);\n            }\n        }\n        return Fr.inv(mulAccumulator);\n\n        \n        function computeLiS0(toInverse, roots, x, curve) {\n            const Fr = curve.Fr;\n            const len = roots.length;\n        \n            const den1 = Fr.mul(Fr.e(len), Fr.exp(roots[0], len - 2));\n        \n            const Li = [];\n            for (let i = 0; i < len; i++) {\n                const den2 = roots[((len - 1) * i) % len];\n                const den3 = Fr.sub(x, roots[i]);\n        \n                toInverse[[\"LiS0_\" + (i + 1)]] = Fr.mul(Fr.mul(den1, den2), den3);\n            }\n        \n            return Li;\n        }\n\n        function computeLiS1(toInverse, roots, x, curve) {\n            const Fr = curve.Fr;\n            const len = roots.length;\n        \n            const den1 = Fr.mul(Fr.e(len), Fr.exp(roots[0], len - 2));\n        \n            const Li = [];\n            for (let i = 0; i < len; i++) {\n                const den2 = roots[((len - 1) * i) % len];\n                const den3 = Fr.sub(x, roots[i]);\n        \n                toInverse[[\"LiS1_\" + (i + 1)]] = Fr.mul(Fr.mul(den1, den2), den3);\n\n            }\n        \n            return Li;\n        }\n\n        function computeLiS2(toInverse, S2, S2p, value, xi, xiw, curve) {\n            const Fr = curve.Fr;\n        \n            const Li = [];\n        \n            const _3h2 = Fr.mul(Fr.e(3), S2[0]);\n            const xisubxiw = Fr.sub(xi, xiw);\n            let den1 = Fr.mul(_3h2, xisubxiw);\n            for (let i = 0; i < 3; i++) {\n                const den2 = S2[2 * i % 3];\n                const den3 = Fr.sub(value, S2[i]);\n        \n                toInverse[[\"LiS2_\" + (i + 1)]] = Fr.mul(den1,Fr.mul(den2, den3));\n                \n            }\n        \n            const _3h3 = Fr.mul(Fr.e(3), S2p[0]);\n            const xiwsubxi = Fr.sub(xiw, xi);\n            den1 = Fr.mul(_3h3, xiwsubxi);\n            for (let i = 0; i < 3; i++) {\n                const den2 = S2p[2 * i % 3];\n                const den3 = Fr.sub(value, S2p[i]);\n        \n                toInverse[[\"LiS2_\" + (i + 1 + 3)]] = Fr.mul(den1,Fr.mul(den2, den3));    \n            }\n        \n            return Li;\n        }\n    }\n}\n\n/*\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\nconst {unstringifyBigInts: unstringifyBigInts$2} = utils;\n\nasync function fflonkFullProve(_input, wasmFilename, zkeyFilename, logger) {\n    const input = unstringifyBigInts$2(_input);\n\n    const wtns= {type: \"mem\"};\n\n    // Compute the witness\n    await wtnsCalculate(input, wasmFilename, wtns);\n\n    // Compute the proof\n    return await fflonkProve(zkeyFilename, wtns, logger);\n}\n\n/*\n    Copyright 2022 iden3 association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nconst { unstringifyBigInts: unstringifyBigInts$1 } = utils;\n\nasync function fflonkVerify(_vk_verifier, _publicSignals, _proof, logger) {\n    if (logger) logger.info(\"FFLONK VERIFIER STARTED\");\n\n    _vk_verifier = unstringifyBigInts$1(_vk_verifier);\n    _proof = unstringifyBigInts$1(_proof);\n\n    const curve = await getCurveFromName(_vk_verifier.curve);\n\n    const vk = fromObjectVk(curve, _vk_verifier);\n\n    // TODO ??? Compute wr^3 and check if it matches with w\n\n    const proof = new Proof(curve, logger);\n    proof.fromObjectProof(_proof);\n\n    const publicSignals = unstringifyBigInts$1(_publicSignals);\n\n    if (publicSignals.length !== vk.nPublic) {\n        logger.error(\"Number of public signals does not match with vk\");\n        return false;\n    }\n\n    const Fr = curve.Fr;\n\n    if (logger) {\n        logger.info(\"----------------------------\");\n        logger.info(\"  FFLONK VERIFY SETTINGS\");\n        logger.info(`  Curve:         ${curve.name}`);\n        logger.info(`  Circuit power: ${vk.power}`);\n        logger.info(`  Domain size:   ${2 ** vk.power}`);\n        logger.info(`  Public vars:   ${vk.nPublic}`);\n        logger.info(\"----------------------------\");\n    }\n\n    // STEP 1 - Validate that all polynomial commitments ∈ G_1\n    if (logger) logger.info(\"> Checking commitments belong to G1\");\n    if (!commitmentsBelongToG1(curve, proof, vk)) {\n        if (logger) logger.error(\"Proof commitments are not valid\");\n        return false;\n    }\n\n    // STEP 2 - Validate that all evaluations ∈ F\n    if (logger) logger.info(\"> Checking evaluations belong to F\");\n    if (!evaluationsAreValid(curve, proof)) {\n        if (logger) logger.error(\"Proof evaluations are not valid.\");\n        return false;\n    }\n\n    // STEP 3 - Validate that w_i ∈ F for i ∈ [l]\n    if (logger) logger.info(\"> Checking public inputs belong to F\");\n    if (!publicInputsAreValid(curve, publicSignals)) {\n        if (logger) logger.error(\"Public inputs are not valid.\");\n        return false;\n    }\n\n    // STEP 4 - Compute the challenges: beta, gamma, xi, alpha and y ∈ F\n    // as in prover description, from the common preprocessed inputs, public inputs and elements of π_SNARK\n    if (logger) logger.info(\"> Computing challenges\");\n    const { challenges, roots } = computeChallenges(curve, proof, vk, publicSignals, logger);\n\n    // STEP 5 - Compute the zero polynomial evaluation Z_H(xi) = xi^n - 1\n    if (logger) logger.info(\"> Computing Zero polynomial evaluation Z_H(xi)\");\n    challenges.zh = Fr.sub(challenges.xiN, Fr.one);\n    challenges.invzh = Fr.inv(challenges.zh);\n\n    // STEP 6 - Compute the lagrange polynomial evaluation L_1(xi)\n    if (logger) logger.info(\"> Computing Lagrange evaluations\");\n    const lagrangeEvals = await computeLagrangeEvaluations(curve, challenges, vk);\n\n    // STEP 7 - Compute public input evaluation PI(xi)\n    if (logger) logger.info(\"> Computing polynomial identities PI(X)\");\n    const pi = calculatePI(curve, publicSignals, lagrangeEvals);\n\n    // STEP 8 - Compute polynomial r0 ∈ F_{<4}[X]\n    if (logger) logger.info(\"> Computing r0(y)\");\n    const r0 = computeR0(proof, challenges, roots, curve, logger);\n\n    // STEP 9 - Compute polynomial r1 ∈ F_{<4}[X]\n    if (logger) logger.info(\"> Computing r1(y)\");\n    const r1 = computeR1(proof, challenges, roots, pi, curve, logger);\n\n    // STEP 9 - Compute polynomial r2 ∈ F_{<6}[X]\n    if (logger) logger.info(\"> Computing r2(y)\");\n    const r2 = computeR2(proof, challenges, roots, lagrangeEvals[1], vk, curve, logger);\n\n    if (logger) logger.info(\"> Computing F\");\n    const F = computeF(curve, proof, vk, challenges, roots);\n\n    if (logger) logger.info(\"> Computing E\");\n    const E = computeE(curve, proof, challenges, vk, r0, r1, r2);\n\n    if (logger) logger.info(\"> Computing J\");\n    const J = computeJ(curve, proof, challenges);\n\n    if (logger) logger.info(\"> Validate all evaluations with a pairing\");\n    const res = await isValidPairing(curve, proof, challenges, vk, F, E, J);\n\n    if (logger) {\n        if (res) {\n            logger.info(\"PROOF VERIFIED SUCCESSFULLY\");\n        } else {\n            logger.warn(\"Invalid Proof\");\n        }\n    }\n\n    if (logger) logger.info(\"FFLONK VERIFIER FINISHED\");\n\n    return res;\n\n}\n\nfunction fromObjectVk(curve, vk) {\n    const res = vk;\n    res.k1 = curve.Fr.fromObject(vk.k1);\n    res.k2 = curve.Fr.fromObject(vk.k2);\n    res.w = curve.Fr.fromObject(vk.w);\n    // res.wW = curve.Fr.fromObject(vk.wW);\n    res.w3 = curve.Fr.fromObject(vk.w3);\n    res.w4 = curve.Fr.fromObject(vk.w4);\n    res.w8 = curve.Fr.fromObject(vk.w8);\n    res.wr = curve.Fr.fromObject(vk.wr);\n    res.X_2 = curve.G2.fromObject(vk.X_2);\n    res.C0 = curve.G1.fromObject(vk.C0);\n    return res;\n}\n\nfunction commitmentsBelongToG1(curve, proof, vk) {\n    const G1 = curve.G1;\n    return G1.isValid(proof.polynomials.C1)\n        && G1.isValid(proof.polynomials.C2)\n        && G1.isValid(proof.polynomials.W1)\n        && G1.isValid(proof.polynomials.W2)\n        && G1.isValid(vk.C0);\n}\n\nfunction checkValueBelongToField(curve, value) {\n    return Scalar.lt(value, curve.r);\n}\n\nfunction checkEvaluationIsValid(curve, evaluation) {\n    return checkValueBelongToField(curve, Scalar.fromRprLE(evaluation));\n}\n\nfunction evaluationsAreValid(curve, proof) {\n    return checkEvaluationIsValid(curve, proof.evaluations.ql)\n        && checkEvaluationIsValid(curve, proof.evaluations.qr)\n        && checkEvaluationIsValid(curve, proof.evaluations.qm)\n        && checkEvaluationIsValid(curve, proof.evaluations.qo)\n        && checkEvaluationIsValid(curve, proof.evaluations.qc)\n        && checkEvaluationIsValid(curve, proof.evaluations.s1)\n        && checkEvaluationIsValid(curve, proof.evaluations.s2)\n        && checkEvaluationIsValid(curve, proof.evaluations.s3)\n        && checkEvaluationIsValid(curve, proof.evaluations.a)\n        && checkEvaluationIsValid(curve, proof.evaluations.b)\n        && checkEvaluationIsValid(curve, proof.evaluations.c)\n        && checkEvaluationIsValid(curve, proof.evaluations.z)\n        && checkEvaluationIsValid(curve, proof.evaluations.zw)\n        && checkEvaluationIsValid(curve, proof.evaluations.t1w)\n        && checkEvaluationIsValid(curve, proof.evaluations.t2w);\n}\n\nfunction publicInputsAreValid(curve, publicInputs) {\n    for(let i = 0; i < publicInputs.length; i++) {\n        if(!checkValueBelongToField(curve, publicInputs[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction computeChallenges(curve, proof, vk, publicSignals, logger) {\n    const Fr = curve.Fr;\n\n    const challenges = {};\n    const roots = {};\n    const transcript = new Keccak256Transcript(curve);\n\n    // Add C0 to the transcript\n    transcript.addPolCommitment(vk.C0);\n\n    for (let i = 0; i < publicSignals.length; i++) {\n        transcript.addScalar(Fr.e(publicSignals[i]));\n    }\n\n    transcript.addPolCommitment(proof.polynomials.C1);\n    challenges.beta = transcript.getChallenge();\n    transcript.reset();\n\n    transcript.addScalar(challenges.beta);\n    challenges.gamma = transcript.getChallenge();\n\n    transcript.reset();\n    transcript.addScalar(challenges.gamma);\n    transcript.addPolCommitment(proof.polynomials.C2);\n    const xiSeed = transcript.getChallenge();\n    const xiSeed2 = Fr.square(xiSeed);\n\n    let w8 = [];\n    w8[1] = vk.w8;\n    w8[2] = Fr.square(vk.w8);\n    w8[3] = Fr.mul(w8[2], vk.w8);\n    w8[4] = Fr.mul(w8[3], vk.w8);\n    w8[5] = Fr.mul(w8[4], vk.w8);\n    w8[6] = Fr.mul(w8[5], vk.w8);\n    w8[7] = Fr.mul(w8[6], vk.w8);\n    let w4 = [];\n    w4[1] = vk.w4;\n    w4[2] = Fr.square(vk.w4);\n    w4[3] = Fr.mul(w4[2], vk.w4);\n    let w3 = [];\n    w3[1] = vk.w3;\n    w3[2] = Fr.square(vk.w3);\n\n    // const w4_2 = Fr.square(vk.w4);\n    // const w4_3 = Fr.mul(w4_2, vk.w4);\n    // const w3_2 = Fr.square(vk.w3);\n\n    // Compute h0 = xiSeeder^3\n    roots.S0 = {};\n    roots.S0.h0w8 = [];\n    roots.S0.h0w8[0] = Fr.mul(xiSeed2, xiSeed);\n    for (let i = 1; i < 8; i++) {\n        roots.S0.h0w8[i] = Fr.mul(roots.S0.h0w8[0], w8[i]);\n    }\n\n    // Compute h1 = xi_seeder^6\n    roots.S1 = {};\n    roots.S1.h1w4 = [];\n    roots.S1.h1w4[0] = Fr.square(roots.S0.h0w8[0]);\n    for (let i = 1; i < 4; i++) {\n        roots.S1.h1w4[i] = Fr.mul(roots.S1.h1w4[0], w4[i]);\n    }\n\n    // Compute h2 = xi_seeder^8\n    roots.S2 = {};\n    roots.S2.h2w3 = [];\n    roots.S2.h2w3[0] = Fr.mul(roots.S1.h1w4[0], xiSeed2);\n    roots.S2.h2w3[1] = Fr.mul(roots.S2.h2w3[0], w3[1]);\n    roots.S2.h2w3[2] = Fr.mul(roots.S2.h2w3[0], w3[2]);\n\n    roots.S2.h3w3 = [];\n    // Multiply h3 by third-root-omega to obtain h_3^3 = xiω\n    // So, h3 = xi_seeder^8 ω^{1/3}\n    roots.S2.h3w3[0] = Fr.mul(roots.S2.h2w3[0], vk.wr);\n    roots.S2.h3w3[1] = Fr.mul(roots.S2.h3w3[0], w3[1]);\n    roots.S2.h3w3[2] = Fr.mul(roots.S2.h3w3[0], w3[2]);\n\n    // Compute xi = xi_seeder^12\n    challenges.xi = Fr.mul(Fr.square(roots.S2.h2w3[0]), roots.S2.h2w3[0]);\n    challenges.xiw = Fr.mul(challenges.xi, Fr.w[vk.power]);\n\n    challenges.xiN = challenges.xi;\n    vk.domainSize = 1;\n    for (let i = 0; i < vk.power; i++) {\n        challenges.xiN = Fr.square(challenges.xiN);\n        vk.domainSize *= 2;\n    }\n\n    transcript.reset();\n    transcript.addScalar(xiSeed);\n    transcript.addScalar(proof.evaluations.ql);\n    transcript.addScalar(proof.evaluations.qr);\n    transcript.addScalar(proof.evaluations.qm);\n    transcript.addScalar(proof.evaluations.qo);\n    transcript.addScalar(proof.evaluations.qc);\n    transcript.addScalar(proof.evaluations.s1);\n    transcript.addScalar(proof.evaluations.s2);\n    transcript.addScalar(proof.evaluations.s3);\n    transcript.addScalar(proof.evaluations.a);\n    transcript.addScalar(proof.evaluations.b);\n    transcript.addScalar(proof.evaluations.c);\n    transcript.addScalar(proof.evaluations.z);\n    transcript.addScalar(proof.evaluations.zw);\n    transcript.addScalar(proof.evaluations.t1w);\n    transcript.addScalar(proof.evaluations.t2w);\n    challenges.alpha = transcript.getChallenge();\n\n    transcript.reset();\n    transcript.addScalar(challenges.alpha);\n    transcript.addPolCommitment(proof.polynomials.W1);\n    challenges.y = transcript.getChallenge();\n\n    if (logger) {\n        logger.info(\"··· challenges.beta:  \" + Fr.toString(challenges.beta));\n        logger.info(\"··· challenges.gamma: \" + Fr.toString(challenges.gamma));\n        logger.info(\"··· challenges.xi:    \" + Fr.toString(challenges.xi));\n        logger.info(\"··· challenges.alpha: \" + Fr.toString(challenges.alpha));\n        logger.info(\"··· challenges.y:     \" + Fr.toString(challenges.y));\n    }\n\n    return { challenges: challenges, roots: roots };\n}\n\nasync function computeLagrangeEvaluations(curve, challenges, vk) {\n    const Fr = curve.Fr;\n\n    const size = Math.max(1, vk.nPublic);\n    const numArr = new BigBuffer(size * Fr.n8);\n    let denArr = new BigBuffer(size * Fr.n8);\n\n    let w = Fr.one;\n    for (let i = 0; i < size; i++) {\n        const i_sFr = i * Fr.n8;\n        numArr.set(Fr.mul(w, challenges.zh), i_sFr);\n        denArr.set(Fr.mul(Fr.e(vk.domainSize), Fr.sub(challenges.xi, w)), i_sFr);\n        w = Fr.mul(w, vk.w);\n    }\n\n    denArr = await Fr.batchInverse(denArr);\n\n    let L = [];\n    for (let i = 0; i < size; i++) {\n        const i_sFr = i * Fr.n8;\n        L[i + 1] = Fr.mul(numArr.slice(i_sFr, i_sFr + Fr.n8), denArr.slice(i_sFr, i_sFr + Fr.n8));\n    }\n    return L;\n}\n\nfunction calculatePI(curve, publicSignals, lagrangeEvals) {\n    const Fr = curve.Fr;\n\n    let pi = Fr.zero;\n    for (let i = 0; i < publicSignals.length; i++) {\n        const w = Fr.e(publicSignals[i]);\n        pi = Fr.sub(pi, Fr.mul(w, lagrangeEvals[i + 1]));\n    }\n    return pi;\n}\n\nfunction computeR0(proof, challenges, roots, curve, logger) {\n    const Fr = curve.Fr;\n\n    const Li = computeLagrangeLiSi(roots.S0.h0w8, challenges.y, challenges.xi, curve);\n\n    // r0(y) = ∑_1^8 C_0(h_0 ω_8^{i-1}) L_i(y). To this end we need to compute\n\n    // Compute the 8 C0 values\n    if (logger) logger.info(\"··· Computing r0(y)\");\n\n    let res = Fr.zero;\n    for (let i = 0; i < 8; i++) {\n        let coefValues = [];\n        coefValues[1] = roots.S0.h0w8[i];\n        for (let j = 2; j < 8; j++) {\n            coefValues[j] = Fr.mul(coefValues[j - 1], roots.S0.h0w8[i]);\n        }\n\n        let c0 = Fr.add(proof.evaluations.ql, Fr.mul(proof.evaluations.qr, coefValues[1]));\n        c0 = Fr.add(c0, Fr.mul(proof.evaluations.qo, coefValues[2]));\n        c0 = Fr.add(c0, Fr.mul(proof.evaluations.qm, coefValues[3]));\n        c0 = Fr.add(c0, Fr.mul(proof.evaluations.qc, coefValues[4]));\n        c0 = Fr.add(c0, Fr.mul(proof.evaluations.s1, coefValues[5]));\n        c0 = Fr.add(c0, Fr.mul(proof.evaluations.s2, coefValues[6]));\n        c0 = Fr.add(c0, Fr.mul(proof.evaluations.s3, coefValues[7]));\n\n        res = Fr.add(res, Fr.mul(c0, Li[i]));\n    }\n\n    return res;\n}\n\nfunction computeR1(proof, challenges, roots, pi, curve, logger) {\n    const Fr = curve.Fr;\n\n    const Li = computeLagrangeLiSi(roots.S1.h1w4, challenges.y, challenges.xi, curve);\n\n    // r1(y) = ∑_1^4 C_1(h_1 ω_4^{i-1}) L_i(y). To this end we need to compute\n    // Z1 = {C1(h_1}, C1(h_1 ω_4), C1(h_1 ω_4^2), C1(h_1 ω_4^3)}\n    // where C_1(h_1 ω_4^{i-1}) = eval.a + h_1 ω_4^i eval.b + (h_1 ω_4^i)^2 eval.c + (h_1 ω_4^i)^3 T0(xi),\n    // where T0(xi) = [ qL·a + qR·b + qM·a·b + qO·c + qC + PI(xi) ] / Z_H(xi)\n\n    // Compute T0(xi)\n    if (logger) logger.info(\"··· Computing T0(xi)\");\n    let t0 = Fr.mul(proof.evaluations.ql, proof.evaluations.a);\n    t0 = Fr.add(t0, Fr.mul(proof.evaluations.qr, proof.evaluations.b));\n    t0 = Fr.add(t0, Fr.mul(proof.evaluations.qm, Fr.mul(proof.evaluations.a, proof.evaluations.b)));\n    t0 = Fr.add(t0, Fr.mul(proof.evaluations.qo, proof.evaluations.c));\n    t0 = Fr.add(t0, proof.evaluations.qc);\n    t0 = Fr.add(t0, pi);\n    t0 = Fr.mul(t0, challenges.invzh);\n\n    // Compute the 4 C1 values\n    if (logger) logger.info(\"··· Computing C1(h_1ω_4^i) values\");\n\n    let res = Fr.zero;\n    for (let i = 0; i < 4; i++) {\n        let c1 = proof.evaluations.a;\n        c1 = Fr.add(c1, Fr.mul(roots.S1.h1w4[i], proof.evaluations.b));\n        const h1w4Squared = Fr.square(roots.S1.h1w4[i]);\n        c1 = Fr.add(c1, Fr.mul(h1w4Squared, proof.evaluations.c));\n        c1 = Fr.add(c1, Fr.mul(Fr.mul(h1w4Squared, roots.S1.h1w4[i]), t0));\n\n        res = Fr.add(res, Fr.mul(c1, Li[i]));\n    }\n\n    return res;\n}\n\nfunction computeR2(proof, challenges, roots, lagrange1, vk, curve, logger) {\n    const Fr = curve.Fr;\n\n    const LiS2 = computeLagrangeLiS2([roots.S2.h2w3, roots.S2.h3w3], challenges.y, challenges.xi, challenges.xiw, curve);\n\n    // r2(y) = ∑_1^3 C_2(h_2 ω_3^{i-1}) L_i(y) + ∑_1^3 C_2(h_3 ω_3^{i-1}) L_{i+3}(y). To this end we need to compute\n    // Z2 = {[C2(h_2}, C2(h_2 ω_3), C2(h_2 ω_3^2)], [C2(h_3}, C2(h_3 ω_3), C2(h_3 ω_3^2)]}\n    // where C_2(h_2 ω_3^{i-1}) = eval.z + h_2 ω_2^i T1(xi) + (h_2 ω_3^i)^2 T2(xi),\n    // where C_2(h_3 ω_3^{i-1}) = eval.z + h_3 ω_2^i T1(xi) + (h_3 ω_3^i)^2 T2(xi),\n    // where T1(xi) = [ L_1(xi)(z-1)] / Z_H(xi)\n    // and T2(xi) = [  (a + beta·xi + gamma)(b + beta·xi·k1 + gamma)(c + beta·xi·k2 + gamma)z\n    //               - (a + beta·sigma1 + gamma)(b + beta·sigma2 + gamma)(c + beta·sigma3 + gamma)zω  ] / Z_H(xi)\n\n    // Compute T1(xi)\n    if (logger) logger.info(\"··· Computing T1(xi)\");\n    let t1 = Fr.sub(proof.evaluations.z, Fr.one);\n    t1 = Fr.mul(t1, lagrange1);\n    t1 = Fr.mul(t1, challenges.invzh);\n\n    // Compute T2(xi)\n    if (logger) logger.info(\"··· Computing T2(xi)\");\n    const betaxi = Fr.mul(challenges.beta, challenges.xi);\n    const t211 = Fr.add(proof.evaluations.a, Fr.add(betaxi, challenges.gamma));\n    const t212 = Fr.add(proof.evaluations.b, Fr.add(Fr.mul(betaxi, vk.k1), challenges.gamma));\n    const t213 = Fr.add(proof.evaluations.c, Fr.add(Fr.mul(betaxi, vk.k2), challenges.gamma));\n    const t21 = Fr.mul(t211, Fr.mul(t212, Fr.mul(t213, proof.evaluations.z)));\n\n    const t221 = Fr.add(proof.evaluations.a, Fr.add(Fr.mul(challenges.beta, proof.evaluations.s1), challenges.gamma));\n    const t222 = Fr.add(proof.evaluations.b, Fr.add(Fr.mul(challenges.beta, proof.evaluations.s2), challenges.gamma));\n    const t223 = Fr.add(proof.evaluations.c, Fr.add(Fr.mul(challenges.beta, proof.evaluations.s3), challenges.gamma));\n    const t22 = Fr.mul(t221, Fr.mul(t222, Fr.mul(t223, proof.evaluations.zw)));\n\n    let t2 = Fr.sub(t21, t22);\n    t2 = Fr.mul(t2, challenges.invzh);\n\n    // Compute the 6 C2 values\n    if (logger) logger.info(\"··· Computing C2(h_2ω_3^i) values\");\n    let res = Fr.zero;\n    for (let i = 0; i < 3; i++) {\n        let c2 = Fr.add(proof.evaluations.z, Fr.mul(roots.S2.h2w3[i], t1));\n        c2 = Fr.add(c2, Fr.mul(Fr.square(roots.S2.h2w3[i]), t2));\n\n        res = Fr.add(res, Fr.mul(c2, LiS2[i]));\n    }\n\n    if (logger) logger.info(\"··· Computing C2(h_3ω_3^i) values\");\n    for (let i = 0; i < 3; i++) {\n        let c2 = Fr.add(proof.evaluations.zw, Fr.mul(roots.S2.h3w3[i], proof.evaluations.t1w));\n        c2 = Fr.add(c2, Fr.mul(Fr.square(roots.S2.h3w3[i]), proof.evaluations.t2w));\n\n        res = Fr.add(res, Fr.mul(c2, LiS2[i + 3]));\n    }\n\n    return res;\n}\n\nfunction computeF(curve, proof, vk, challenges, roots) {\n    const G1 = curve.G1;\n    const Fr = curve.Fr;\n\n    let mulH0 = Fr.sub(challenges.y, roots.S0.h0w8[0]);\n    for (let i = 1; i < 8; i++) {\n        mulH0 = Fr.mul(mulH0, Fr.sub(challenges.y, roots.S0.h0w8[i]));\n    }\n\n    challenges.temp = mulH0;\n\n    let mulH1 = Fr.sub(challenges.y, roots.S1.h1w4[0]);\n    for (let i = 1; i < 4; i++) {\n        mulH1 = Fr.mul(mulH1, Fr.sub(challenges.y, roots.S1.h1w4[i]));\n    }\n\n    let mulH2 = Fr.sub(challenges.y, roots.S2.h2w3[0]);\n    for (let i = 1; i < 3; i++) {\n        mulH2 = Fr.mul(mulH2, Fr.sub(challenges.y, roots.S2.h2w3[i]));\n    }\n    for (let i = 0; i < 3; i++) {\n        mulH2 = Fr.mul(mulH2, Fr.sub(challenges.y, roots.S2.h3w3[i]));\n    }\n\n    challenges.quotient1 = Fr.mul(challenges.alpha, Fr.div(mulH0, mulH1));\n    challenges.quotient2 = Fr.mul(Fr.square(challenges.alpha), Fr.div(mulH0, mulH2));\n\n    let F2 = G1.timesFr(proof.polynomials.C1, challenges.quotient1);\n    let F3 = G1.timesFr(proof.polynomials.C2, challenges.quotient2);\n\n    return G1.add(vk.C0, G1.add(F2, F3));\n}\n\nfunction computeE(curve, proof, challenges, vk, r0, r1, r2) {\n    const G1 = curve.G1;\n    const Fr = curve.Fr;\n\n    let E2 = Fr.mul(r1, challenges.quotient1);\n    let E3 = Fr.mul(r2, challenges.quotient2);\n\n    return G1.timesFr(G1.one, Fr.add(r0, Fr.add(E2, E3)));\n}\n\nfunction computeJ(curve, proof, challenges) {\n    const G1 = curve.G1;\n\n    return G1.timesFr(proof.polynomials.W1, challenges.temp);\n}\n\nasync function isValidPairing(curve, proof, challenges, vk, F, E, J) {\n    const G1 = curve.G1;\n\n    let A1 = G1.timesFr(proof.polynomials.W2, challenges.y);\n    A1 = G1.add(G1.sub(G1.sub(F, E), J), A1);\n    const A2 = curve.G2.one;\n\n    const B1 = proof.polynomials.W2;\n    const B2 = vk.X_2;\n\n    return await curve.pairingEq(G1.neg(A1), A2, B1, B2);\n}\n\n\nfunction computeLagrangeLiSi(roots, x, xi, curve) {\n    const Fr = curve.Fr;\n    const len = roots.length;\n\n    const num = Fr.sub(Fr.exp(x, len), xi);\n    const den1 = Fr.mul(Fr.e(len), Fr.exp(roots[0], len - 2));\n\n    const Li = [];\n    for (let i = 0; i < len; i++) {\n        const den2 = roots[((len - 1) * i) % len];\n        const den3 = Fr.sub(x, roots[i]);\n\n        Li[i] = Fr.div(num, Fr.mul(Fr.mul(den1, den2), den3));\n    }\n\n    return Li;\n}\n\nfunction computeLagrangeLiS2(roots, value, xi0, xi1, curve) {\n    const Fr = curve.Fr;\n\n    const Li = [];\n\n    const len = roots[0].length;\n    const n = len * roots.length;\n\n    const num1 = Fr.exp(value, n);\n    const num2 = Fr.mul(Fr.add(xi0, xi1), Fr.exp(value, len));\n    const num3 = Fr.mul(xi0, xi1);\n    const num = Fr.add(Fr.sub(num1, num2), num3);\n\n    let den1 = Fr.mul(Fr.mul(Fr.e(len), roots[0][0]), Fr.sub(xi0, xi1));\n    for (let i = 0; i < len; i++) {\n        const den2 = roots[0][(len - 1) * i % len];\n        const den3 = Fr.sub(value, roots[0][i]);\n\n        const den = Fr.mul(den1,Fr.mul(den2, den3));\n\n        Li[i] = Fr.div(num, den);\n    }\n\n    den1 = Fr.mul(Fr.mul(Fr.e(len), roots[1][0]), Fr.sub(xi1, xi0));\n    for (let i = 0; i < len; i++) {\n        const den2 = roots[1][(len - 1) * i % len];\n        const den3 = Fr.sub(value, roots[1][i]);\n\n        const den = Fr.mul(den1,Fr.mul(den2, den3));\n\n        Li[i + len] = Fr.div(num, den);\n    }\n\n    return Li;\n}\n\n/*\n    Copyright 2021 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nconst {unstringifyBigInts} = utils;\n\nfunction p256(n) {\n    let nstr = n.toString(16);\n    while (nstr.length < 64) nstr = \"0\" + nstr;\n    nstr = `0x${nstr}`;\n    return nstr;\n}\n\nasync function fflonkExportCallData(_pub, _proof) {\n    const proof = unstringifyBigInts(_proof);\n    const pub = unstringifyBigInts(_pub);\n\n    await getCurveFromName(proof.curve);\n\n    let inputs = \"\";\n    for (let i = 0; i < pub.length; i++) {\n        if (inputs !== \"\") inputs = inputs + \",\";\n        inputs = inputs + p256(pub[i]);\n    }\n\n    return `[${p256(proof.polynomials.C1[0])}, ${p256(proof.polynomials.C1[1])},` +\n    `${p256(proof.polynomials.C2[0])},${p256(proof.polynomials.C2[1])},` +\n    `${p256(proof.polynomials.W1[0])},${p256(proof.polynomials.W1[1])},` +\n    `${p256(proof.polynomials.W2[0])},${p256(proof.polynomials.W2[1])},` +\n    `${p256(proof.evaluations.ql)},${p256(proof.evaluations.qr)},${p256(proof.evaluations.qm)},` +\n    `${p256(proof.evaluations.qo)},${p256(proof.evaluations.qc)},${p256(proof.evaluations.s1)},` +\n    `${p256(proof.evaluations.s2)},${p256(proof.evaluations.s3)},${p256(proof.evaluations.a)},` +\n    `${p256(proof.evaluations.b)},${p256(proof.evaluations.c)},${p256(proof.evaluations.z)},` +\n    `${p256(proof.evaluations.zw)},${p256(proof.evaluations.t1w)},${p256(proof.evaluations.t2w)},` +\n    `${p256(proof.evaluations.inv)}],` +\n    `[${inputs}]`;\n}\n\n/*\n    Copyright 2022 iden3 association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nvar fflonk = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    setup: fflonkSetup,\n    prove: fflonkProve,\n    fullProve: fflonkFullProve,\n    verify: fflonkVerify,\n    exportSolidityVerifier: fflonkExportSolidityVerifier,\n    exportSolidityCallData: fflonkExportCallData\n});\n\nexport { fflonk, groth16, plonk, powersoftau as powersOfTau, r1cs, wtns, zkey as zKey };\n","import { ZKProof } from './proving';\nimport { witnessBuilder } from './witness_calculator';\nimport { groth16 } from 'snarkjs';\nimport { fromBigEndian } from '@iden3/js-iden3-core';\n\nexport const Groth16 = 'groth16';\nexport const AuthCircuit = 'auth';\nexport const AuthV2Circuit = 'authV2';\nconst textDecoder = new TextDecoder();\n\nexport async function prove(\n  inputs: Uint8Array,\n  provingKey: Uint8Array,\n  wasm: Uint8Array\n): Promise<ZKProof> {\n  const witnessCalculator = await witnessBuilder(wasm);\n\n  const jsonString = new TextDecoder().decode(inputs);\n\n  const parsedData = JSON.parse(jsonString);\n  const wtnsBytes: Uint8Array = await witnessCalculator.calculateWTNSBin(parsedData, 0);\n\n  const { proof, publicSignals } = await groth16.prove(provingKey, wtnsBytes);\n\n  return {\n    proof: proof,\n    pub_signals: publicSignals\n  };\n}\n\nexport async function verify<T extends { challenge: bigint }>(\n  messageHash: Uint8Array,\n  proof: ZKProof,\n  verificationKey: Uint8Array,\n  unmarshall: (pubSignals: string[]) => T\n): Promise<boolean> {\n  const outputs: T = unmarshall(proof.pub_signals);\n  if (outputs.challenge !== fromBigEndian(messageHash)) {\n    throw new Error('challenge is not equal to message hash');\n  }\n  const result = await groth16.verify(\n    JSON.parse(textDecoder.decode(verificationKey)),\n    proof.pub_signals,\n    proof.proof\n  );\n  return result;\n}\n","import { ProvingMethod, ProvingMethodAlg, ZKProof } from './proving';\nimport { Id } from '@iden3/js-iden3-core';\nimport { AuthCircuit, Groth16, prove, verify } from './common';\n\n// AuthPubSignals auth.circom public signals\ninterface AuthPubSignals {\n  challenge: bigint;\n  userState: bigint;\n  userId: Id;\n}\n\n// ProvingMethodGroth16Auth defines proofs family and specific circuit\nclass ProvingMethodGroth16Auth implements ProvingMethod {\n  constructor(public readonly methodAlg: ProvingMethodAlg) {}\n\n  get alg(): string {\n    return this.methodAlg.alg;\n  }\n\n  get circuitId(): string {\n    return this.methodAlg.circuitId;\n  }\n\n  unmarshall(pubsignals: string[]): AuthPubSignals {\n    const outputs: AuthPubSignals = {} as AuthPubSignals;\n    if (pubsignals.length != 3) {\n      throw new Error(`invalid number of Output values expected ${3} got ${pubsignals.length}`);\n    }\n    outputs.challenge = BigInt(pubsignals[0]);\n    outputs.userState = BigInt(pubsignals[1]);\n    outputs.userId = Id.fromBigInt(BigInt(pubsignals[2]));\n\n    return outputs;\n  }\n\n  async verify(\n    messageHash: Uint8Array,\n    proof: ZKProof,\n    verificationKey: Uint8Array\n  ): Promise<boolean> {\n    return verify<AuthPubSignals>(messageHash, proof, verificationKey, this.unmarshall);\n  }\n\n  prove(inputs: Uint8Array, provingKey: Uint8Array, wasm: Uint8Array): Promise<ZKProof> {\n    return prove(inputs, provingKey, wasm);\n  }\n}\n\nexport const provingMethodGroth16AuthInstance: ProvingMethod = new ProvingMethodGroth16Auth(\n  new ProvingMethodAlg(Groth16, AuthCircuit)\n);\n","import{Hex as t,poseidon as e}from\"@iden3/js-crypto\";const i=32,s=0,n=1,r=2,a=65,o=new Uint8Array(65),h=\"empty\",l=32,c=8,f=256,u=2,d=30,w=BigInt(\"21888242871839275222246405745257275088548364400416034343698204186575808495617\"),y=w-BigInt(\"1\");function g(t,e,i,s){if(\"a\"===i&&!s)throw new TypeError(\"Private accessor was defined without a getter\");if(\"function\"==typeof e?t!==e||!s:!e.has(t))throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");return\"m\"===i?s:\"a\"===i?s.call(t):s?s.value:e.get(t)}function v(t,e,i,s,n){if(\"m\"===s)throw new TypeError(\"Private method is not writable\");if(\"a\"===s&&!n)throw new TypeError(\"Private accessor was defined without a setter\");if(\"function\"==typeof e?t!==e||!n:!e.has(t))throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");return\"a\"===s?n.call(t,i):n?n.value=i:e.set(t,i),i}const p=t=>t<w,b=(t,e)=>t.every(((t,i)=>t===e[i])),m=t=>t.slice().reverse(),x=t=>\"0b\"+t.reduce(((t,e)=>t+e.toString(2).padStart(8,\"0\")),\"\"),I=(t,e)=>0!=(t[parseInt((e/8).toString())]&1<<e%8),k=(t,e)=>0!=(t[t.length-parseInt(\"\"+e/8)-1]&1<<e%8),A=(t,e)=>{t[t.length-parseInt(\"\"+e/8)-1]|=1<<e%8},R=\"0123456789abcdef\",S=t=>{const e=new Array(2*t.length);let i=0;return t.forEach((t=>{e[i]=R[parseInt((t>>4).toString(10))],e[i+1]=R[parseInt((15&t).toString(10))],i+=2})),e.join(\"\")},L=t=>{if(t.length!==i)throw`Expected 32 bytes, found ${t.length} bytes`;const e=BigInt(x(t));if(!p(e))throw\"NewBigIntFromHashBytes: Value not inside the Finite Field\";return e},B=t=>new Uint8Array(2*t.length).map(((e,i)=>t.charCodeAt(i))),N=(t,e)=>{const i=new Array(t);for(let s=0;s<t;s+=1)i[s]=I(e,s);return i},U=t=>{const e=new ArrayBuffer(i*t.length),s=new Uint8Array(e);return t.forEach(((t,e)=>{s.set(t.value,e*i)})),s},E=(t,e)=>t.toString(e||10).split(\"\").map((t=>parseInt(t))),K=t=>{const e=BigInt(256),s=new Uint8Array(i);let n=0;for(;t>BigInt(0);)s[31-n]=Number(t%e),t/=e,n+=1;return s};class V{constructor(t){if(t?.length){if(t.length!==i)throw new Error(`Expected 32 bytes, found ${t.length} bytes`);this.bytes=t}else this.bytes=new Uint8Array(i)}get value(){return this.bytes}set value(t){if(t.length!==i)throw`Expected 32 bytes, found ${t.length} bytes`;this.bytes=m(t)}string(){return this.bigInt().toString(10)}hex(){return S(this.bytes)}equals(t){return b(this.value,t.value)}bigInt(){const t=m(this.value);return BigInt(x(t))}static fromString(t){try{return V.fromBigInt(BigInt(t))}catch(e){const i=JSON.parse(t),s=Uint8Array.from(Object.values(i.bytes));return new V(s)}}static fromBigInt(t){if(!p(t))throw new Error(\"NewBigIntFromHashBytes: Value not inside the Finite Field\");const e=K(t);return new V(m(e))}static fromHex(e){return e?new V(t.decodeString(e)):M}toJSON(){return this.string()}}const M=new V,W=t=>V.fromBigInt(t),$=t=>V.fromHex(t),O=t=>V.fromString(t),_=t=>{const i=e.hash(t);return V.fromBigInt(i)},P=(t,i)=>{const s=e.hash([...i,t]);return V.fromBigInt(s)},J=(t,e)=>{for(let i=t.length;i<e;i+=1)t.push(M);return t};var T,H;class j{constructor(t){T.set(this,void 0),H.set(this,void 0),this.prefix=t,v(this,T,{},\"f\"),v(this,H,M,\"f\")}async get(t){const e=new Uint8Array([...this.prefix,...t]);return g(this,T,\"f\")[e.toString()]?g(this,T,\"f\")[e.toString()]:void 0}async put(t,e){const i=new Uint8Array([...this.prefix,...t]);g(this,T,\"f\")[i.toString()]=e}async getRoot(){return g(this,H,\"f\")}async setRoot(t){v(this,H,t,\"f\")}}T=new WeakMap,H=new WeakMap;const z=async(t,e)=>P(BigInt(1),[t.bigInt(),e.bigInt()]),C=(t,e,i)=>{const s=new Uint8Array(65),n=K(e.bigInt()),r=K(i.bigInt());s[0]=t;for(let t=1;t<33;t+=1)s[t]=n[t-1];for(let t=33;t<=65;t+=1)s[t]=r[t-33];return s};var q,F,D,G;class Q{constructor(t,e){q.set(this,void 0),this.type=1,this.entry=[t,e],v(this,q,M,\"f\")}async getKey(){return g(this,q,\"f\")===M?await z(this.entry[0],this.entry[1]):g(this,q,\"f\")}get value(){return C(this.type,this.entry[0],this.entry[1])}get string(){return`Leaf I:${this.entry[0]} D:${this.entry[1]}`}}q=new WeakMap;class X{constructor(t,e){F.set(this,void 0),this.type=0,this.childL=t,this.childR=e,v(this,F,M,\"f\")}async getKey(){return g(this,F,\"f\")===M?_([this.childL.bigInt(),this.childR.bigInt()]):g(this,F,\"f\")}get value(){return C(this.type,this.childL,this.childR)}get string(){return`Middle L:${this.childL} R:${this.childR}`}}F=new WeakMap;class Y{constructor(){D.set(this,void 0),this.type=2,v(this,D,M,\"f\")}async getKey(){return M}get value(){return o}get string(){return h}}D=new WeakMap;class Z{constructor(t){this._prefix=t,G.set(this,void 0);const e=localStorage.getItem(S(t));if(e){const t=JSON.parse(e);v(this,G,new V(Uint8Array.from(t)),\"f\")}else v(this,G,M,\"f\")}async get(t){const e=new Uint8Array([...this._prefix,...t]),i=S(e),s=localStorage.getItem(i);if(null===s)return;const n=JSON.parse(s);switch(n.type){case 2:return new Y;case 0:const t=new V(Uint8Array.from(n.childL)),e=new V(Uint8Array.from(n.childR));return new X(t,e);case 1:const i=new V(Uint8Array.from(n.entry[0])),s=new V(Uint8Array.from(n.entry[1]));return new Q(i,s)}throw`error: value found for key ${S(e)} is not of type Node`}async put(t,e){const i=new Uint8Array([...this._prefix,...t]),s=S(i),n={type:e.type};e instanceof X?(n.childL=Array.from(e.childL.bytes),n.childR=Array.from(e.childR.bytes)):e instanceof Q&&(n.entry=[Array.from(e.entry[0].bytes),Array.from(e.entry[1].bytes)]);const r=JSON.stringify(n);localStorage.setItem(s,r)}async getRoot(){return g(this,G,\"f\")}async setRoot(t){v(this,G,t,\"f\"),localStorage.setItem(S(this._prefix),JSON.stringify(Array.from(t.bytes)))}}function tt(t){return new Promise(((e,i)=>{t.oncomplete=t.onsuccess=()=>e(t.result),t.onabort=t.onerror=()=>i(t.error)}))}function et(t,e){const i=indexedDB.open(t);i.onupgradeneeded=()=>i.result.createObjectStore(e);const s=tt(i);return(t,i)=>s.then((s=>i(s.transaction(e,t).objectStore(e))))}let it;function st(){return it||(it=et(\"keyval-store\",\"keyval\")),it}function nt(t,e=st()){return e(\"readonly\",(e=>tt(e.get(t))))}function rt(t,e,i=st()){return i(\"readwrite\",(i=>(i.put(e,t),tt(i.transaction))))}var at,ot,ht;G=new WeakMap;class lt{constructor(t,e){this._prefix=t,at.set(this,void 0),v(this,at,M,\"f\"),this._prefixHash=S(t),this._store=et(`${e??lt.storageName}-db`,lt.storageName)}async get(t){const e=new Uint8Array([...this._prefix,...t]),i=S(e),s=await nt(i,this._store);if(null!=s){if(2===s.type)return new Y;if(0===s.type){const t=new V(Uint8Array.from(s.childL.bytes)),e=new V(Uint8Array.from(s.childR.bytes));return new X(t,e)}if(1===s.type){const t=new V(Uint8Array.from(s.entry[0].bytes)),e=new V(Uint8Array.from(s.entry[1].bytes));return new Q(t,e)}throw new Error(`error: value found for key ${i} is not of type Node`)}}async put(t,e){const i=new Uint8Array([...this._prefix,...t]),s=S(i);await rt(s,e,this._store)}async getRoot(){if(!g(this,at,\"f\").equals(M))return g(this,at,\"f\");const t=await nt(this._prefixHash,this._store);return v(this,at,t?new V(t.bytes):M,\"f\"),g(this,at,\"f\")}async setRoot(t){await rt(this._prefixHash,t,this._store),v(this,at,t,\"f\")}}at=new WeakMap,lt.storageName=\"merkle-tree\";class ct{constructor(){ot.set(this,void 0),v(this,ot,new Uint8Array(l),\"f\")}get value(){return g(this,ot,\"f\")}set value(t){v(this,ot,t,\"f\")}bigInt(){return L(m(g(this,ot,\"f\")))}string(){return`${S(g(this,ot,\"f\").slice(0,4))}...`}}ot=new WeakMap;class ft{constructor(){ht.set(this,void 0),v(this,ht,new Array(8),\"f\")}get value(){return g(this,ht,\"f\")}set value(t){if(8!==t.length)throw`expected bytes length to be 8, got ${t.length}`;v(this,ht,t,\"f\")}bytes(){const t=new Uint8Array(256);for(let e=0;e<8;e+=1)g(this,ht,\"f\")[e].value.forEach(((i,s)=>{t[e*l+s]=i}));return t}equal(t){return b(g(this,ht,\"f\")[0].value,t.value[0].value)&&b(g(this,ht,\"f\")[1].value,t.value[1].value)&&b(g(this,ht,\"f\")[2].value,t.value[2].value)&&b(g(this,ht,\"f\")[3].value,t.value[3].value)}}ht=new WeakMap;const ut=t=>{if(t.length!==f)throw`expected bytes length to be 256, got ${t.length}`;const e=new ft,i=new Array(f);for(let e=0;e<8;e+=1){const s=new ct;s.value=t.slice(e*l,(e+1)*f),i[e]=s}return e.value=i,e};var dt,wt,yt;class gt{constructor(t){dt.set(this,void 0),wt.set(this,void 0),yt.set(this,void 0),v(this,dt,t||new ft,\"f\"),v(this,wt,M,\"f\"),v(this,yt,M,\"f\")}get data(){return g(this,dt,\"f\")}get index(){return g(this,dt,\"f\").value.slice(0,4)}get value(){return g(this,dt,\"f\").value.slice(4,8)}async hIndex(){return g(this,wt,\"f\")===M?_(vt(this.index)):g(this,wt,\"f\")}async hValue(){return g(this,yt,\"f\")===M?_(vt(this.value)):g(this,yt,\"f\")}hiHv(){return(async()=>({hi:await this.hIndex(),hv:await this.hValue()}))()}bytes(){return g(this,dt,\"f\").value}equal(t){return g(this,dt,\"f\").equal(t.data)}clone(){return new gt(g(this,dt,\"f\"))}}dt=new WeakMap,wt=new WeakMap,yt=new WeakMap;const vt=t=>t.map((t=>t.bigInt())),pt=t=>{const e=vt(t.data.value);let i=!0;return e.forEach((t=>{p(t)||(i=!1)})),i},bt=\"key already exists\",mt=\"Key not found in the MerkleTree\",xt=\"node data has incorrect size in the DB\",It=\"reached maximum level of the merkle tree\",kt=\"found an invalid node in the DB\",At=\"the serialized proof is invalid\",Rt=\"the value in the DB is invalid\",St=\"the entry index already exists in the tree\",Lt=\"Merkle Tree not writable\",Bt=\"key not found\";class Nt{constructor(t=M,e=[],i=M,s=M,n=!1,r=M,a=M,o=0){this.root=t,this.siblings=e,this.oldKey=i,this.oldValue=s,this.isOld0=n,this.key=r,this.value=a,this.fnc=o}}class Ut{constructor(t=M,e=M,i=[],s=M,n=M,r=M,a=M,o=!1,h=0){this.oldRoot=t,this.newRoot=e,this.siblings=i,this.oldKey=s,this.oldValue=n,this.newKey=r,this.newValue=a,this.isOld0=o,this.fnc=h}}const Et=\"non-existence proof being checked against hIndex equal to nodeAux\";class Kt{constructor(t){this.existence=t?.existence??!1,this.depth=0,this.nodeAux=t?.nodeAux;const{siblings:e,notEmpties:i}=this.reduceSiblings(t?.siblings);this.siblings=e,this.notEmpties=i}bytes(){let t=2+this.notEmpties.length+l*this.siblings.length;void 0!==this.nodeAux&&(t+=64);const e=new ArrayBuffer(t),i=new Uint8Array(e);this.existence||(i[0]|=1),i[1]=this.depth,i.set(this.notEmpties,2);const s=U(this.siblings);return i.set(s,this.notEmpties.length+2),void 0!==this.nodeAux&&(i[0]|=2,i.set(this.nodeAux.key.value,i.length-64),i.set(this.nodeAux.value.value,i.length-32)),i}toJSON(){return{existence:this.existence,siblings:this.allSiblings().map((t=>t.toJSON())),node_aux:this.nodeAux?{key:this.nodeAux.key.toJSON(),value:this.nodeAux.value.toJSON()}:void 0}}reduceSiblings(t){const e=[],i=new Uint8Array(30);if(!t)return{siblings:e,notEmpties:i};for(let s=0;s<t.length;s++){const n=t[s];JSON.stringify(t[s])!==JSON.stringify(M)&&(A(i,s),e.push(n),this.depth=s+1)}return{notEmpties:i,siblings:e}}static fromJSON(t){let e;const i=t.node_aux??t.nodeAux;i&&(e={key:V.fromString(i.key),value:V.fromString(i.value)});const s=t.existence??!1,n=t.siblings.map((t=>V.fromString(t)));return new Kt({existence:s,nodeAux:e,siblings:n})}allSiblings(){return Kt.buildAllSiblings(this.depth,this.notEmpties,this.siblings)}static buildAllSiblings(t,e,i){let s=0;const n=[];for(let r=0;r<t;r+=1)k(e,r)?(n.push(i[s]),s+=1):n.push(M);return n}}const Vt=t=>t.allSiblings(),Mt=async(t,e,i,s)=>{try{const n=await Wt(e,i,s);return b(t.value,n.value)}catch(t){if(t===Et)return!1;throw t}},Wt=async(t,e,i)=>{const s=V.fromBigInt(e),n=V.fromBigInt(i);let r;if(t.existence)r=await z(s,n);else if(void 0===t.nodeAux)r=M;else{const e=t.nodeAux;if(b(s.value,e.key.value))throw Et;r=await z(e.key,e.value)}const a=t.allSiblings(),o=N(a.length,s.value);for(let t=a.length-1;t>=0;t-=1)r=o[t]?await new X(a[t],r).getKey():await new X(r,a[t]).getKey();return r};var $t,Ot,_t,Pt;class Jt{constructor(t,e,i){$t.set(this,void 0),Ot.set(this,void 0),_t.set(this,void 0),Pt.set(this,void 0),v(this,$t,t,\"f\"),v(this,_t,e,\"f\"),v(this,Pt,i,\"f\")}async root(){return g(this,Ot,\"f\")||v(this,Ot,await g(this,$t,\"f\").getRoot(),\"f\"),g(this,Ot,\"f\")}get maxLevels(){return g(this,Pt,\"f\")}async add(t,e){if(!g(this,_t,\"f\"))throw Lt;v(this,Ot,await this.root(),\"f\");const i=V.fromBigInt(t),s=V.fromBigInt(e),n=new Q(i,s),r=N(this.maxLevels,i.value),a=await this.addLeaf(n,g(this,Ot,\"f\"),0,r);v(this,Ot,a,\"f\"),await g(this,$t,\"f\").setRoot(g(this,Ot,\"f\"))}async updateNode(t){if(!g(this,_t,\"f\"))throw Lt;if(2===t.type)return await t.getKey();const e=await t.getKey();return await g(this,$t,\"f\").put(e.value,t),e}async addNode(t){if(!g(this,_t,\"f\"))throw Lt;if(2===t.type)return await t.getKey();const e=await t.getKey();return await g(this,$t,\"f\").put(e.value,t),e}async addEntry(t){if(!g(this,_t,\"f\"))throw Lt;if(!pt(t))throw\"elements not inside the finite field over r\";v(this,Ot,await g(this,$t,\"f\").getRoot(),\"f\");const e=await t.hIndex(),i=await t.hValue(),s=new Q(e,i),n=N(this.maxLevels,e.value),r=await this.addLeaf(s,g(this,Ot,\"f\"),0,n);v(this,Ot,r,\"f\"),await g(this,$t,\"f\").setRoot(g(this,Ot,\"f\"))}async pushLeaf(t,e,i,s,n){if(i>g(this,Pt,\"f\")-2)throw new Error(It);let r;if(s[i]===n[i]){const a=await this.pushLeaf(t,e,i+1,s,n);return r=s[i]?new X(new V,a):new X(a,new V),await this.addNode(r)}const a=await e.getKey(),o=await t.getKey();return r=s[i]?new X(a,o):new X(o,a),await this.addNode(t),await this.addNode(r)}async addLeaf(t,e,i,s){if(i>g(this,Pt,\"f\")-1)throw new Error(It);const n=await this.getNode(e);if(void 0===n)throw Bt;switch(n.type){case 2:return this.addNode(t);case 1:{const e=n.entry[0],r=t.entry[0];if(b(e.value,r.value))throw St;const a=N(this.maxLevels,e.value);return this.pushLeaf(t,n,i,s,a)}case 0:{let e;if(s[i]){const r=await this.addLeaf(t,n.childR,i+1,s);e=new X(n.childL,r)}else{const r=await this.addLeaf(t,n.childL,i+1,s);e=new X(r,n.childR)}return this.addNode(e)}default:throw kt}}async get(t){const e=V.fromBigInt(t),i=N(this.maxLevels,e.value);let s=await this.root();const n=[];for(let t=0;t<this.maxLevels;t++){const e=await this.getNode(s);if(void 0===e)throw mt;switch(e.type){case 2:return{key:BigInt(\"0\"),value:BigInt(\"0\"),siblings:n};case 1:return{key:e.entry[0].bigInt(),value:e.entry[1].bigInt(),siblings:n};case 0:i[t]?(s=e.childR,n.push(e.childL)):(s=e.childL,n.push(e.childR));break;default:throw kt}}throw new Error(It)}async update(t,e){if(!g(this,_t,\"f\"))throw Lt;if(!p(t))throw\"key not inside the finite field\";if(!p(e))throw\"key not inside the finite field\";const i=V.fromBigInt(t),s=V.fromBigInt(e),n=N(this.maxLevels,i.value),r=new Ut;r.fnc=1,r.oldRoot=await this.root(),r.oldKey=i,r.newKey=i,r.newValue=s;let a=await this.root();const o=[];for(let t=0;t<this.maxLevels;t+=1){const e=await this.getNode(a);if(void 0===e)throw Bt;switch(e.type){case 2:throw mt;case 1:if(b(i.value,e.entry[0].value)){r.oldValue=e.entry[1],r.siblings=J([...o],this.maxLevels);const t=new Q(i,s);await this.updateNode(t);const a=await this.recalculatePathUntilRoot(n,t,o);return v(this,Ot,a,\"f\"),await g(this,$t,\"f\").setRoot(a),r.newRoot=a,r}break;case 0:n[t]?(a=e.childR,o.push(e.childL)):(a=e.childL,o.push(e.childR));break;default:throw kt}}throw mt}async getNode(t){return b(t.value,M.value)?new Y:await g(this,$t,\"f\").get(t.value)}async recalculatePathUntilRoot(t,e,i){for(let s=i.length-1;s>=0;s-=1){const n=await e.getKey();e=t[s]?new X(i[s],n):new X(n,i[s]),await this.addNode(e)}return await e.getKey()}async delete(t){if(!g(this,_t,\"f\"))throw Lt;const e=V.fromBigInt(t),i=N(this.maxLevels,e.value);let s=g(this,Ot,\"f\");const n=[];for(let t=0;t<g(this,Pt,\"f\");t+=1){const r=await this.getNode(s);if(void 0===r)throw Bt;switch(r.type){case 2:throw mt;case 1:if(b(e.bytes,r.entry[0].value))return void await this.rmAndUpload(i,e,n);throw mt;case 0:i[t]?(s=r.childR,n.push(r.childL)):(s=r.childL,n.push(r.childR));break;default:throw kt}}throw mt}async rmAndUpload(t,e,i){if(0===i.length)return v(this,Ot,M,\"f\"),void await g(this,$t,\"f\").setRoot(g(this,Ot,\"f\"));const s=i[i.length-1];i.length<2&&(v(this,Ot,i[0],\"f\"),await g(this,$t,\"f\").setRoot(g(this,Ot,\"f\")));const n=await g(this,$t,\"f\").get(s.bytes);if(0===n?.type){let e;e=t[i.length-1]?new X(s,M):new X(M,s),await this.addNode(e);const n=await this.recalculatePathUntilRoot(t,e,i.slice(0,i.length-1));return v(this,Ot,n,\"f\"),void await g(this,$t,\"f\").setRoot(g(this,Ot,\"f\"))}for(let e=i.length-2;e>=0;e-=1){if(!b(i[e].value,M.value)){let n;n=t[e]?new X(i[e],s):new X(s,i[e]),await this.addNode(n);const r=await this.recalculatePathUntilRoot(t,n,i.slice(0,e));v(this,Ot,r,\"f\"),await g(this,$t,\"f\").setRoot(g(this,Ot,\"f\"));break}if(0===e){v(this,Ot,s,\"f\"),await g(this,$t,\"f\").setRoot(g(this,Ot,\"f\"));break}}}async recWalk(t,e){const i=await this.getNode(t);if(void 0===i)throw Bt;switch(i.type){case 2:case 1:await e(i);break;case 0:await e(i),await this.recWalk(i.childL,e),await this.recWalk(i.childR,e);break;default:throw kt}}async walk(t,e){b(t.value,M.value)&&(t=await this.root()),await this.recWalk(t,e)}async generateCircomVerifierProof(t,e){const i=await this.generateSCVerifierProof(t,e);return i.siblings=J(i.siblings,this.maxLevels),i}async generateSCVerifierProof(t,e){b(e.value,M.value)&&(e=await this.root());const{proof:i,value:s}=await this.generateProof(t,e),n=new Nt;return n.root=e,n.siblings=i.allSiblings(),void 0!==i.nodeAux?(n.oldKey=i.nodeAux.key,n.oldValue=i.nodeAux.value):(n.oldKey=M,n.oldValue=M),n.key=V.fromBigInt(t),n.value=V.fromBigInt(s),i.existence?n.fnc=0:n.fnc=1,n}async generateProof(t,e){let i;const s=V.fromBigInt(t),n=N(this.maxLevels,s.value);e||(e=await this.root());let r=e,a=0,o=!1;const h=[];let l;for(a=0;a<this.maxLevels;a+=1){const t=await this.getNode(r);if(void 0===t)throw Bt;switch(t.type){case 2:return{proof:new Kt({existence:o,nodeAux:l,siblings:h}),value:BigInt(\"0\")};case 1:return b(s.value,t.entry[0].value)?(o=!0,{proof:new Kt({existence:o,nodeAux:l,siblings:h}),value:t.entry[1].bigInt()}):(l={key:t.entry[0],value:t.entry[1]},{proof:new Kt({existence:o,nodeAux:l,siblings:h}),value:t.entry[1].bigInt()});case 0:n[a]?(r=t.childR,i=t.childL):(r=t.childL,i=t.childR);break;default:throw kt}h.push(i)}throw mt}async addAndGetCircomProof(t,e){const i=new Ut;i.fnc=2,i.oldRoot=await this.root();let s=BigInt(\"0\"),n=BigInt(\"0\"),r=[];try{const e=await this.get(t);s=e.key,n=e.value,r=e.siblings}catch(t){if(t!==mt)throw t}if(void 0===s||void 0===n)throw\"key/value undefined\";return i.oldKey=V.fromBigInt(s),i.oldValue=V.fromBigInt(n),b(i.oldKey.value,M.value)&&(i.isOld0=!0),i.siblings=J(r,this.maxLevels),await this.add(t,e),i.newKey=V.fromBigInt(t),i.newValue=V.fromBigInt(e),i.newRoot=await this.root(),i}async graphViz(t){let e=0;await this.walk(t,(async t=>{const i=await t.getKey();let s,n;switch(t.type){case 2:break;case 1:console.log(`\"${i.string()}\" [style=filled]`);break;case 0:s=[t.childL.string(),t.childR.string()],n=\"\",s.forEach(((t,i)=>{\"0\"===t&&(s[i]=`empty${e}`,n+=`\"${s[i]}\" [style=dashed,label=0];\\n`,e+=1)})),console.log(`\"${i.string()}\" -> {\"${s[1]}\"}`),console.log(n)}})),console.log(\"}\\n\")}async printGraphViz(t){b(t.value,M.value)&&(t=await this.root()),console.log(`--------\\nGraphViz of the MerkleTree with RootKey ${t.bigInt().toString(10)}\\n`),await this.graphViz(M),console.log(`End of GraphViz of the MerkleTree with RootKey ${t.bigInt().toString(10)}\\n--------\\n`)}}$t=new WeakMap,Ot=new WeakMap,_t=new WeakMap,Pt=new WeakMap;export{Ut as CircomProcessorProof,Nt as CircomVerifierProof,c as DATA_LEN,f as DATA_LEN_BYTES,ft as Data,l as ELEM_BYTES_LEN,h as EMPTY_NODE_STRING,o as EMPTY_NODE_VALUE,ct as ElemBytes,gt as Entry,St as ErrEntryIndexAlreadyExists,Rt as ErrInvalidDBValue,kt as ErrInvalidNodeFound,At as ErrInvalidProofBytes,mt as ErrKeyNotFound,xt as ErrNodeBytesBadSize,bt as ErrNodeKeyAlreadyExists,Bt as ErrNotFound,Lt as ErrNotWritable,It as ErrReachedMaxLevel,w as FIELD_SIZE,i as HASH_BYTES_LENGTH,V as Hash,j as InMemoryDB,lt as IndexedDBStorage,Z as LocalStorageDB,y as MAX_NUM_IN_FIELD,Jt as Merkletree,r as NODE_TYPE_EMPTY,n as NODE_TYPE_LEAF,s as NODE_TYPE_MIDDLE,a as NODE_VALUE_BYTE_ARR_LENGTH,d as NOT_EMPTIES_LEN,Y as NodeEmpty,Q as NodeLeaf,X as NodeMiddle,u as PROOF_FLAG_LEN,Kt as Proof,M as ZERO_HASH,K as bigIntToUINT8Array,E as bigint2Array,x as bytes2BinaryString,S as bytes2Hex,b as bytesEqual,p as checkBigIntInField,pt as checkEntryInField,J as circomSiblingsFromSiblings,vt as elemBytesToBigInts,N as getPath,_ as hashElems,P as hashElemsKey,L as newBigIntFromBytes,ut as newDataFromBytes,W as newHashFromBigInt,$ as newHashFromHex,O as newHashFromString,Wt as rootFromProof,A as setBitBigEndian,Vt as siblignsFroomProof,U as siblings2Bytes,B as str2Bytes,m as swapEndianness,I as testBit,k as testBitBigEndian,Mt as verifyProof};\n//# sourceMappingURL=index.js.map\n","import { Id } from '@iden3/js-iden3-core';\nimport { ProvingMethod, ProvingMethodAlg, ZKProof } from './proving';\nimport { AuthV2Circuit, Groth16, prove, verify } from './common';\nimport { Hash } from '@iden3/js-merkletree';\nimport { getCurveFromName } from 'ffjavascript';\n\n// AuthV2PubSignals auth.circom public signals\nexport interface AuthV2PubSignals {\n  userID: Id;\n  challenge: bigint;\n  GISTRoot: Hash;\n}\n\nexport const AuthV2Groth16Alg = new ProvingMethodAlg(Groth16, AuthV2Circuit);\n\n// ProvingMethodGroth16AuthV2 instance for Groth16 proving method with an authV2 circuit\nexport class ProvingMethodGroth16AuthV2 implements ProvingMethod {\n  private static readonly curveName = 'bn128';\n\n  constructor(public readonly methodAlg: ProvingMethodAlg) {}\n\n  get alg(): string {\n    return this.methodAlg.alg;\n  }\n\n  get circuitId(): string {\n    return this.methodAlg.circuitId;\n  }\n\n  async verify(\n    messageHash: Uint8Array,\n    proof: ZKProof,\n    verificationKey: Uint8Array\n  ): Promise<boolean> {\n    const verificationResult = await verify<AuthV2PubSignals>(\n      messageHash,\n      proof,\n      verificationKey,\n      this.unmarshall\n    );\n    await this.terminateCurve();\n\n    return verificationResult;\n  }\n\n  async prove(inputs: Uint8Array, provingKey: Uint8Array, wasm: Uint8Array): Promise<ZKProof> {\n    const zkProof = await prove(inputs, provingKey, wasm);\n    await this.terminateCurve();\n    return zkProof;\n  }\n\n  private async terminateCurve(): Promise<void> {\n    const curve = await getCurveFromName(ProvingMethodGroth16AuthV2.curveName);\n    curve.terminate();\n  }\n\n  unmarshall(pubSignals: string[]): AuthV2PubSignals {\n    const len = 3;\n\n    if (pubSignals.length !== len) {\n      throw new Error(`invalid number of Output values expected ${len} got ${pubSignals.length}`);\n    }\n\n    return {\n      userID: Id.fromBigInt(BigInt(pubSignals[0])),\n      challenge: BigInt(pubSignals[1]),\n      GISTRoot: Hash.fromString(pubSignals[2])\n    };\n  }\n}\n\nexport const provingMethodGroth16AuthV2Instance: ProvingMethod = new ProvingMethodGroth16AuthV2(\n  new ProvingMethodAlg(Groth16, AuthV2Circuit)\n);\n","import { hash } from './hash';\nimport { Token, Header } from './jwz';\nimport { provingMethodGroth16AuthInstance } from './authGroth16';\nimport {\n  getProvingMethod,\n  ProofInputsPreparerHandlerFunc,\n  ProvingMethod,\n  ProvingMethodAlg,\n  registerProvingMethod,\n  ZKProof,\n  ProofData\n} from './proving';\nimport { provingMethodGroth16AuthV2Instance } from './authV2Groth16';\n\nregisterProvingMethod(\n  provingMethodGroth16AuthInstance.methodAlg,\n  () => provingMethodGroth16AuthInstance\n);\n\nregisterProvingMethod(\n  provingMethodGroth16AuthV2Instance.methodAlg,\n  () => provingMethodGroth16AuthV2Instance\n);\n\nconst proving = {\n  registerProvingMethod,\n  getProvingMethod,\n  provingMethodGroth16AuthInstance,\n  provingMethodGroth16AuthV2Instance\n};\n\nexport {\n  proving,\n  ProofInputsPreparerHandlerFunc,\n  ProvingMethod,\n  ProvingMethodAlg,\n  Token,\n  hash,\n  ZKProof,\n  ProofData,\n  Header\n};\n"],"names":["cI","Object","defineProperty","DI","G","I","E","get","enumerable","M","beBuff2int","ZI","beInt2Buff","WI","leBuff2int","pI","leInt2Buff","lI","unstringifyBigInts","d","B","abs","fI","add","iI","band","KI","bitLength","f","bits","l","bor","TI","bxor","PI","div","P","e","nI","eq","aI","exp","bI","fromArray","wI","fromRprBE","z","fromRprLE","m","fromString","R","geq","RI","gt","xI","isNegative","MI","isOdd","p","isZero","Z","land","qI","leq","OI","lor","VI","lt","yI","mod","hI","mul","QI","naf","tI","neg","kI","neq","uI","one","w","pow","N","shiftLeft","sI","shiftRight","W","shl","UI","shr","eI","square","YI","sub","T","toArray","rI","toLEBuff","vI","toNumber","JI","toRprBE","X","toRprLE","q","toString","SI","zero","y","BI","BigInt","slice","Error","A","o","length","parseInt","Number","push","MAX_SAFE_INTEGER","unshift","D","Uint32Array","buffer","byteOffset","s","t","substring","DataView","setUint32","setInt32","byteLength","Array","forEach","padStart","join","getUint32","Uint8Array","Math","floor","isArray","map","entries","from","atob","charCodeAt","getUint16","getUint8","setUint16","setUint8","V","globalThis","crypto","getRandomValues","i","constructor","this","type","negone","two","half","mask","n64","n32","n8","Ri","inv","nqr","nqr_to_t","sqrt_q","sqrt_s","sqrt_t","random","sqrt_z","sqrt_tm1d2","sqrt","H","J","K","C","NI","shift","k","double","mulScalar","idiv","HI","bnot","sqrt_old","normalize","toRprBEM","toRprLEM","fromRprLEM","fromRprBEM","toObject","XI","F","pm1d2","Generator","Base8","order","subOrder","addPoint","mulPointEscalar","inSubgroup","inCurve","packPoint","unpackPoint","S","gI","L","x","h","hash","reduce","c","g","r","hashBytes","hashBytesX","fill","spongeHashX","$","U","encodeLength","encode","HEX_TABLE","decodeString","decode","fromHexChar","encodeString","TextDecoder","textEncoder","TextEncoder","b","FI","$I","GI","u","O","oI","digestLength","blockSize","state","Int32Array","temp","bufferLength","bytesHashed","finished","reset","clean","update","finish","digest","_saveState","_restoreState","OE","freeze","ERRORS","DATA_OVERFLOW","INCORRECT_ID_POSITION","NO_ID","INVALID_SUBJECT_POSITION","INCORRECT_MERKLIZED_POSITION","NO_MERKLIZED_ROOT","NETWORK_NOT_SUPPORTED_FOR_DID","UNSUPPORTED_BLOCKCHAIN_FOR_DID","UNSUPPORTED_DID_METHOD","UNKNOWN_DID_METHOD","INCORRECT_DID","UNSUPPORTED_ID","SCHEMA","HASH_LENGTH","ETH_ADDRESS_LENGTH","BYTES_LENGTH","ELEM_BYTES_LENGTH","NONCE_BYTES_LENGTH","Q","ID","TYPE_DEFAULT","TYPE_READONLY","ID_LENGTH","DID","DID_SCHEMA","GENESIS_LENGTH","n","reverse","R$1","intToBytes","intToNBytes","checkChecksum","typ","genesis","checksum","decomposeBytes","JSON","stringify","calculateChecksum","hexToBytes","bytesToHex","bytesToInt","_bytes","bytes","toBigInt","setBigInt","slotFromHex","set","hex","elemBytesToInts","fromInt","marshalTextBytes","marshalText","newSchemaHashFromHex","newSchemaHashFromInt","bigInt","authSchemaHash","_checksum","getFromBytes","string","equal","marshal","unMarshal","fromBytes","every","indexOf","fromBigInt","profileId","idGenesisFromIdenState","ethAddressFromId","v","IndexA","IndexB","ValueA","ValueB","Self","Invalid","OtherIdenIndex","OtherIdenValue","None","Index","Value","ByteIdx","ExpirationBitIdx","UpdatableBitIdx","qString","message","bi","fromBigEndian","sha256","poseidon","ProvingMethodAlg","alg","circuitId","provingMethods","Map","registerProvingMethod","Promise","res","getProvingMethod","rej","func","Header","base64UrlEncoding","chars","base64url","opts","encoding","_opts$out","codes","loose","SyntaxError","end","out","written","_i","value","undefined","parse","data","_opts$pad","pad","exports","RawJSONWebZeroknowledge","payload","protectedHeaders","header","zkp","sanitized","headers","Critical","key","Alg","CircuitId","method","token","Token","zkProof","setHeader","inputsPreparer","raw","getDefaultHeaders","getPayload","Type","tokenStr","trim","startsWith","parseFull","parseCompact","parts","split","rawProtected","base64","rawPayload","proof","prove","provingKey","wasm","serializeHeaders","msgHash","getMessageHash","inputs","prepare","marshaledProof","compactSerialize","serializedProtected","serializedProof","fullSerialize","serializedHeadersJSON","serializedHeaders","messageToProof","toBigEndian","verify","verificationKey","keys","sort","async","witnessBuilder","code","options","wasmModule","wc","WebAssembly","compile","err","console","log","errStr","msgStr","instance","instantiate","runtime","exceptionHandler","printErrorMessage","getMessage","writeBufferMessage","msg","showSharedRWMemory","shared_rw_memory_size","getFieldNumLen32","arr","j","readSharedRWMemory","fromArray32","printSharedRWMemory","WitnessCalculator","getMessageChar","String","fromCharCode","sanityCheck","version","getVersion","getRawPrime","prime","witnessSize","getWitnessSize","circom_version","_doCalculateWitness","input","init","input_counter","str","uint64_max","shash","repeat","concat","fnvHash","hMSB","hLSB","fArr","a","fillArray","flatArray","signalSize","getInputSignalSize","arrFr","toArray32","writeSharedRWMemory","setInputSignal","getInputSize","calculateWitness","getWitness","calculateBinWitness","buff32","buff","pos","calculateWTNSBin","idSection1lengthHex","idSection2lengthHex","rem","size","radix","hexLen","bitLength$6","aS","isNegative$4","isZero$1","isOdd$5","toNumber$1","ch","_Scalar","__proto__","acc","lnot","base","buildSqrt","c0","a0","b2k","alg5_tonelliShanks","alg4_kong","alg3_atkin","sqrt_e1","a1","alg2_shanks","pm2mod4","alg10_adj","sqrt_e34","sqrt_e12","frobenius","conjugate","alfa","x0","alg9_adj","alg8_complex","quarterRound","st","ChaCha","seed","idx","nextU32","nextU64","nextBool","getRandomBytes","array","threadRng","getThreadRng","arrV","getRandomSeed","FFT","opMulGF","wi","roots","_setRoots","min","nroots","rootsi","fft","log2$1","__fft","ifft","twoinvm","resn","PF","pall","offset","step","ndiv2","p1","p2","ZqField","bind","nres","newt","newr","nb","sq","na","nBytes","vs","fromRng","rng","utils$6","_a","len","build_timesscalar","module","fnName","elementLen","opAB","opAA","opCopy","opInit","addFunction","addParam","addLocal","getCodeBuilder","aux","i32_const","alloc","addCode","if","i32_eqz","getLocal","call","ret","setLocal","block","loop","i32_sub","i32_load8_u","i32_add","i32_ge_u","innerLoop","br_if","br","build_batchinverse","prefix","modules","AUX","i32_load","i32_store","i32_mul","i32_eq","build_batchconvertion","internalFnName","sizeIn","sizeOut","build_batchop","bigint","compare","square$1","isOdd$4","isEven","isNegative$3","isPositive","bitLength$5","isUnit","modInv$3","lastT","lastR","newT","newR","modPow$2","isDivisibleBy","compareAbs","millerRabinTest","nPrev","prev","next","modInv","modPow","isPrime","isBasicPrime","logN","ceil","buildInt","_prefix","i64_store","i64_load","buildCopy","i64_const","buildZero","setReturnType","getCompCode","i64_eqz","buildIsZero","buildOne","i64_eq","buildEq","i64_ge_u","i64_lt_u","i64_gt_u","buildGte","i64_add","i64_load32_u","i64_store32","i64_shr_u","i32_wrap_i64","buildAdd","i64_sub","i64_and","i64_shr_s","buildSub","loadX","loadY","mulij","Y","teeLocal","i64_mul","c1","max","buildMul","c0_old","c1_old","i64_shl","buildSquare","buildSquareOld","_buildMul1","_buildAdd1","Caux","Raux","pr1","R1","R2","i32_or","drop","i64_div_u","i32_and","i32_ge_s","buildDiv","aux1","aux2","aux3","aux4","aux5","aux6","mulBuff","aux7","buildInverseMod","exportFunction","utils$5","buildExp$2","buildBatchInverse$2","buildBatchConvertion$1","buildBatchOp","bitLength$4","modInv$2","modPow$1","isOdd$3","build_f1m","_q","_intPrefix","intPrefix","pq","bigInt2BytesLE","pR2","pOne","pZero","_minusOne","_e","pe","_ePlusOne","pePlusOne","_nqr","s2","_t","pt","_nqrToT","pNqrToT","_tPlusOneOver2","ptPlusOneOver2","buildIsOne","buildNeg","carries","np32","buildMReduct","loadQ","mulqm","buildToMontgomery","pAux2","buildFromMontgomery","buildIsNegative","buildSign","buildInverse","pAux","i32_gt_u","i32_rem_u","i32_store8","buildLoad","buildTimesScalar","ONE","SQ","buildIsSquare","buildF1m$2","bitLength$3","build_f1","_f1mPrefix","f1mPrefix","pAux1","buildExp$1","buildBatchInverse$1","utils$4","build_f2m","mulNonResidueFn","f1n8","x1","r0","r1","y0","y1","buildMul1","AB","APB","APNB","ABPNAB","buildConjugate","t0","t1","t2","t3","e34","e12","alpha","pn1","n1","n1a","n1b","unreachable","buildExp","buildBatchInverse","build_f3m","x2","r2","cd","aA","bB","cC","a_b","A_B","a_c","A_C","b_c","B_C","aA_bB","aA_cC","bB_cC","s0","ab","s1","bc","s3","s4","y2","t4","t5","c2","t6","buildTimesScalarNAF","opAmB","getBit","IDX","i32_shr_u","pushBit","i32_shl","buildBatchConvertion","buildMultiexp$1","opAdd","n8b","n8g","buildMultiexp","pTSizes","i32_clz","i32_div_u","i32_lt_s","i32_gt_s","buildGetChunk","buildReduceTable","buildMutiexpChunk","build_curve_jacobian_a0","prefixField","pB","buildIsZeroAffine","buildZeroAffine","buildCopyAffine","x3","y3","z3","buildToJacobian","buildEqAffine","z1","Z1Z1","U2","Z1_cubed","S2","buildEqMixed","z2","Z2Z2","U1","Z2_cubed","S1","XX","YY","YYYY","eightYYYY","buildDoubleAffine","eightC","buildDouble","HH","y2_minus_y1","V2","y1_J2","buildAddAffine","S2_minus_y1","buildAddMixed","S2_minus_S1","S1_J2","buildNegAffine","buildSubAffine","buildSubMixed","buildFromMontgomeryAffine","buildToMontgomeryAffine","Z_inv","Z2_inv","Z3_inv","buildToAffine","x3b","buildInCurveAffine","buildInCurve","tmp","buildBatchToAffine","buildNormalize","buildReverseBytes","pTmp","tmpX","tmpY","buildLEMtoU","buildLEMtoC","buildUtoLEM","buildCtoLEM","isOdd$2","modInv$1","utils$3","build_fft","gPrefix","fPrefix","opGtimesF","n8f","maxBits","nr","ROOTs","i2","bytesi2","INV2","bytesShiftToSmallM","bytesSConst","shiftToSmallM","sConst","SHIFT_TO_M","SCONST","rev","rtable","REVTABLE","buildFFT","One","i32_rotl","buildRev","i32_lt_u","buildReversePermutation","buildFinalInverse","buildRawFFT","i32_ne","buildLog2","buildIFFT","buildFFTJoin","buildFFTJoinExt","buildFFTJoinExtInv","buildFFTMix","buildFFTFinal","buildPrepareLagrangeEvaluation","build_pol","buildConstructLC","build_qap","buildBuildABC","buildJoinABC","buildBatchAdd","build_applykey","frPrefix","sizeGIn","sizeGOut","sizeF","utils$2","buildF1m$1","buildF1$1","buildF2m$1","buildF3m$1","buildCurve$1","buildFFT$2","buildPol$1","buildQAP$1","buildApplyKey$1","bitLength$2","isOdd$1","isNegative$2","utils$1","buildF1m","buildF1","buildF2m","buildF3m","buildCurve","buildFFT$1","buildPol","buildQAP","buildApplyKey","bitLength$1","isNegative$1","buildBn128$1","frsize","f1size","f2size","ftsize","pr","pG1b","toMontgomery","g1mPrefix","f2mPrefix","pG2b","g2mPrefix","buildGTimesFr","opMul","G1gen","pG1gen","G1zero","pG1zero","G2gen","pG2gen","G2zero","pG2zero","pOneT","pNonResidueF6","pTwoInv","pAltBn128Twist","pTwistCoefB","build_mulNR6","f6mPrefix","build_mulNR12","ftmPrefix","ateLoopBitBytes","pAteLoopBitBytes","ateCoefSize","ateNDblCoefs","ateNAddCoefs","prePSize","preQSize","finalExpZ","buildFrobeniusMap","F12","F6","Xc0","Xc1","Rc0","Rc1","coef","mul2","pCoef","ac0","ac1","bc0","bc1","buildCyclotomicExp","exponent","exponentNafBytes","pExponentNafBytes","inverse","i32_load8_s","buildFinalExponentiationLastChunk","x4","x5","r4","r3","r5","buildCyclotomicSquare","elt","result","pPreP","pPreQ","buildPairingEquation","nPairings","resT","auxT","X2","Y2","X1","Y1","Z1","ELL_0","ELL_VW","ELL_VV","buildPrepAddStep","E2","buildPrepDoubleStep","buildPrepareG1","MulByQX","MulByQY","buildMulByQ","QX","pR","RX","RY","RZ","cQX","cQY","pQ1","Q1","pQ2","Q2","Q2Y","buildPrepareG2","z0","z4","z5","T3","T4","D0","D2","D4","buildMulBy024","pAUX12","AUX12","AUX12_0","AUX12_2","AUX12_4","AUX12_6","AUX12_8","AUX12_10","buildMulBy024Old","preP_PX","preP_PY","pVW","VW","pVV","VV","buildMillerLoop","pExponent","buildFinalExponentiationOld","eltC0","eltC1","pA","Ac0","Ac1","buildFinalExponentiationFirstChunk","eltToFirstChunk","buildFinalExponentiation","buildPairing","buildBls12381$1","n64q","n8q","n64r","n8r","pBls12381Twist","x0c","build_mulNR2","c0copy","isExpNegative","A_c0","A_c1","A_c2","b_b","Ac0_Ac1","Ac1_Ac2","buildF6Mul1","a_a","Ac0_Ac2","buildF6Mul01","c4","aa","bb","R_c0","R_c1","buildF12Mul014","Px","Py","coef0_0","coef0_1","coef1_0","coef1_1","coef2","pc0","c0_c0","c0_c1","pc1","c1_c0","c1_c1","buildELL","Z2M1D3","beta","beta2","z2m1d3","px","py","psp","sp","spx","spy","ps2p","s2p","s2px","s2py","fInGroup","buildInGroupG1","WINV","FROB3Y","wInv","frob2X","frob3Y","x_winv","y_winv","pf2","f2","f2x","f2x_c1","f2x_c2","f2y","f2y_c1","f2y_c2","pf3","f3","f3x","f3x_c1","f3x_c2","f3y","f3y_c1","f3y_c2","f3z","buildInGroupG2","Rx","Ry","Rz","Qx","Qy","t10","t9","zsquared","ysquared","ztsquared","t7","t8","preP","coefs","buffV","_revTable","_revSlow","bitReverse","log2","buffReverseBits","eSize","array2buffer","sG","buffer2array","_utils","stringifyBigInts","stringifyFElements","test","unstringifyFElements","PAGE_SIZE","BigBuffer","buffers","fr","to","firstPage","srcView","buildBatchConvert","tm","sIn","sOut","buffIn","nPoints","pointsPerChunk","concurrency","opPromises","task","cmd","var","params","val","queueAction","all","fullBuffOut","WasmField1","pOp1","pOp2","pOp3","getBuff","shiftInv","batchToMontgomery","batchFromMontgomery","op2","opName","setBuff","op2Bool","op1","op1Bool","fromMontgomery","isSquare","ra","fromObject","buff2","batchInverse","returnArray","WasmField2","mul1","b1","b2","WasmField3","c3","b3","WasmCurve","pGen","pGb","cofactor","zeroAffine","oneAffine","gAffine","batchLEMtoC","batchLEMtoU","batchCtoLEM","batchUtoLEM","batchToJacobian","batchToAffine","op2bool","op1Affine","timesScalar","timesFr","toAffine","toJacobian","toRprUncompressed","fromRprUncompressed","toRprCompressed","fromRprCompressed","toUncompressed","isValid","greatest","Pbuff","MEM_SIZE","Deferred","promise","resolve","reject","workerSource","threadStr","Blob","threadBytes","workerBlob","URL","createObjectURL","btoa","buildThreadManager","singleThread","ThreadManager","memory","Memory","initial","u8","u32","env","Worker","initalPFree","taskManager","self","MAXMEM","maximum","currentPages","requiredPages","grow","allocBuffer","setBuffer","getBuffer","pointer","runTask","ctx","vars","oldAlloc","onmessage","then","postMessage","close","thread","workers","pendingDeferreds","working","navigator","hardwareConcurrency","addEventListener","getOnMsg","initPromises","copyCode","postAction","processWorks","actionQueue","oldPFree","startSyncOp","endSyncOp","workerId","transfers","_deferred","work","deferred","actionData","resetMemory","allocBuff","terminate","ms","setTimeout","buildBatchApplyKey","curve","groupName","Fr","batchApplyKey","first","inc","inType","outType","fnAffine","sGin","sGmid","sGout","outBuff","_multiExpChunk","buffBases","buffScalars","logger","logText","error","sGIn","sScalar","bitChunkSize","nChunks","_multiExp","MAX_CHUNK_SIZE","chunkSize","debug","buffBasesChunk","buffScalarsChunk","multiExp","multiExpAffine","_fft","loggerTxt","sMid","fnIn2Mid","fnMid2Out","fnFFTMix","fnFFTJoin","fnFFTFinal","buffOut","promises","res1","_fftJoinExt","_fftExtInv","_fftExt","chunks","pointsInChunk","l2Chunk","buffChunk","nGroups","nChunksPerGroup","o1","o2","resChunk","buff1","fn","firstChunk","fullBuffOut1","fullBuffOut2","lagrangeEvaluations","fftMix","power","powerChunk","fftJoin","fftFinal","factor","fnToAffine","buildEngine","name","F1","F2","G1","cofactorG1","G2","cofactorG2","Gt","pairing","pRes","pairingEq","buffCt","nEqs","arguments","g1Buff","g2Buff","ftm_one","pMR","ftm_mul","pCt","ftm_eq","prepareG1","pP","pPrepP","prepareG2","pQ","pPrepQ","millerLoop","preQ","finalExponentiation","utf8","charcode","toUTF8Array","varuint32","varuint","varint","_n","sign","paddingBits","paddingMask","varint32","varint64","toHexString","byteArray","byte","CodeBuilder","functionName","localName","valCode","localIdxByName","i64_load8_s","idxCode","_offset","_align","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","_codeVal","align","codeVal","i64_store16","i64_store8","i32_load16_s","i32_load16_u","i32_store16","args","functionIdxByName","call_indirect","fnIdx","condCode","thenCode","elseCode","bCode","relPath","rCode","dCode","num","opcode","op1code","op2code","i64_ne","i64_lt_s","i64_gt_s","i64_le_s","i64_le_u","i64_ge_s","i64_div_s","i64_rem_s","i64_rem_u","i64_or","i64_xor","i64_extend_i32_s","i64_extend_i32_u","i64_clz","i64_ctz","i32_le_s","i32_le_u","i32_div_s","i32_rem_s","i32_xor","i32_shr_s","i32_rotr","i32_ctz","current_memory","comment","typeCodes","i32","i64","f32","f64","anyfunc","emptyblock","FunctionBuilder","fnType","moduleName","fieldName","locals","returnType","nextLocal","paramName","paramType","localType","_length","getSignature","getBody","body","ModuleBuilder","functions","nImportFunctions","nInternalFunctions","pagesSize","free","datas","functionsTable","build","_setSignatures","_buildType","_buildImport","_buildFunctionDeclarations","_buildFunctionsTable","_buildExports","_buildElements","_buildCode","_buildData","addIimportFunction","_fieldName","setMemory","_exportName","exportName","addFunctionToTable","addData","ArrayBuffer","isView","allocString","uint8array","signatures","signatureIdxByName","signature","signatureName","signatureIdx","_buildSection","sectionType","section","buildBn128","plugins","curve_bn128","moduleBuilder","bn128wasm","f1m","frm","bn128","buildBls12381","curve_bls12381","bls12381wasm","bls12381","Scalar","utils","fs","open","fileName","openFlags","cacheSize","pageSize","fd","stats","stat","FastFile","blksize","totalSize","totalPages","maxPagesLoaded","pages","pendingLoads","writing","reading","avBuffs","history","_loadPage","page","__statusPage","logEntry","logHistory","pendingOps","loading","dirty","__printHistory","_triggerLoad","pageIdxs","deletablePages","freePages","ops","load","splice","fp","getNewPage","read","bytesRead","setImmediate","_tryClose","_triggerWrite","write","_getDirtyPage","pendingClose","lastPage","pagePromises","readToBuffer","buffDst","pendingCloseReject","discard","unlink","writeULE32","tmpBuff32","writeUBE32","writeULE64","tmpBuff64","tmpBuff64v","readULE32","readUBE32","readULE64","view","readString","currentPosition","currentPage","endOfStringFound","pagePromise","offsetOnPage","dataArray","indexEndOfString","findIndex","element","tmpBuff32$1","tmpBuff32v$1","tmpBuff64$1","tmpBuff64v$1","MemFile","_resizeIfNeeded","newLen","allocSize","newAllocSize","newData","readOnly","buffDest","buffSrc","tmpBuff32v","BigMemFile","nPages","readLength","O_TRUNC","O_CREAT","O_RDWR","O_RDONLY","DEFAULT_CACHE_SIZE","DEFAULT_PAGE_SIZE","createOverride","initialSize","createNew$1","createNew","readExisting","fetch","arrayBuffer","readExisting$2","readExisting$1","readBinFile","maxVersion","readedType","nSections","sections","ht","hl","startWriteSection","idSection","writingSection","pSectionSize","endWriteSection","sectionSize","oldPos","startReadUniqueSection","readingSection","endReadSection","noCheck","readBigInt","readSection","bls12381q","bn128q","getCurveFromQ","commonjsGlobal","window","global","blake2bWasm","nanoassert","assert$1","AssertionError","captureStackTrace","prototype","browser","byteLength$4","ascii","alphabet","byteLength$3","byteLength$2","hexValue","subarray","char","byteLength$1","toString$1","write$2","decoder","output","bytesNeeded","codePoint","fromCodePoint","encoder","encodeInto","codePointAt","count","blake2b","hasRequiredBlake2b","utf16le","units","hi","lo","ascii$1","base64$1","hex$1","utf8$1","utf16le$1","LE","Uint16Array","of","codecFor","isBuffer","encodingOrOffset","codec","copy","fromBuffer","fromArrayBuffer","bidirectionalIndexOf","lastIndexOf","foundIndex","found","swap","isEncoding","allocUnsafe","allocUnsafeSlow","totalLength","source","target","targetStart","start","RangeError","copyWithin","equals","includes","swap16","swap32","swap64","toBuffer","writeDoubleLE","setFloat64","writeFloatLE","setFloat32","writeUInt32LE","writeInt32LE","readDoubleLE","getFloat64","readFloatLE","getFloat32","readUInt32LE","readInt32LE","getInt32","assert","b4a","wasmPromise","__toBinary","table","bytes2","require_blake2b","cb","__commonJS","exports2","module2","compiled","imports","requireBlake2b","head","freeList","Blake2b","BYTES_MIN","BYTES_MAX","BYTES","KEYBYTES_MIN","KEYBYTES_MAX","KEYBYTES","SALTBYTES","PERSONALBYTES","salt","personal","noAssert","finalized","pop","_memory","_realloc","blake2b_init","noop","blake2b_update","enc","blake2b_final","final","WASM","SUPPORTED","ready","getPartialHash","setPartialHash","ph","GROTH16_PROTOCOL_ID","PLONK_PROTOCOL_ID","FFLONK_PROTOCOL_ID","ZKEY_FF_HEADER_SECTION","readG1","readG2","readHeader$1","protocolId","zkey","nVars","nPublic","domainSize","vk_alpha_1","vk_beta_1","vk_beta_2","vk_gamma_2","vk_delta_1","vk_delta_2","readHeaderGroth16","nAdditions","nConstraints","k1","k2","Qm","Ql","Qr","Qo","Qc","S3","X_2","readHeaderPlonk","w3","w4","w8","wr","C0","readHeaderFFlonk","writeBin","witnessBin","writeBigInt","stringifyBigInts$4","groth16Prove","zkeyFileName","witnessFileName","fdWtns","sectionsWtns","wtns","nWitness","readHeader","fdZKey","sectionsZKey","protocol","buffWitness","buffCoeffs","buffA_T","buffB_T","buffC_T","witness","coeffs","sCoef","nCoef","outBuffA","outBuffB","outBuffC","outBuf","buffCoef","buffCoefV","buildABC1","buffA","buffAodd","buffAodd_T","buffB","buffBodd","buffBodd_T","buffC","buffCodd","buffCodd_T","buffPodd_T","nElements","aChunk","bChunk","cChunk","joinABC","buffBasesA","pi_a","buffBasesB1","pib1","buffBasesB2","pi_b","buffBasesC","pi_c","buffBasesH","resH","publicSignals","WitnessCalculatorCircom1","getFrLen","pRawPrime","getPRawPrime","F1Field","mask32","NVars","getNVars","RInv","pSigOffset","allocInt","pFr","allocFr","getSignalOffset32","sigOffset","getInt","setFr","setSignal","old0","pWitness","getPWitness","getFr","pWitnessBuffer","getWitnessBuffer","setInt","minShort","maxShort","WitnessCalculatorCircom2","unstringifyBigInts$b","wtnsCalculate","_input","wasmFileName","wtnsFileName","fdWasm","memorySize","memoryAllocated","warn","majorVersion","minorVersion","patchVersion","pstr","p2str","sym","labelIdx2Name","logGetSignal","signal","pVal","logSetSignal","logStartComponent","cIdx","logFinishComponent","getMinorVersion","getPatchVersion","i8","apply","builder","createBinFile","unstringifyBigInts$a","unstringifyBigInts$9","unstringifyBigInts$8","p256$2","nstr","groth16","fullProve","wasmFile","_vk_verifier","_publicSignals","_proof","vk_verifier","normName","toUpperCase","match","getCurveFromName","IC0","IC","publicInputs","publicInputsAreValid$1","buffP","cpub","isWellConstructed$1","info","exportSolidityCallData","_pub","pub","INPUT_ERROR","WINDOW","root","JS_SHA3_NO_WINDOW","WEB_WORKER","JS_SHA3_NO_NODE_JS","process","versions","node","COMMON_JS","JS_SHA3_NO_COMMON_JS","ARRAY_BUFFER","JS_SHA3_NO_ARRAY_BUFFER","HEX_CHARS","CSHAKE_PADDING","SHIFT","RC","BITS","SHAKE_BITS","OUTPUT_TYPES","CSHAKE_BYTEPAD","obj","JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW","createOutputMethod","padding","outputType","Keccak","createShakeOutputMethod","outputBits","createCshakeOutputMethod","methods","createKmacOutputMethod","createOutputMethods","createMethod","create","algorithms","bytepad","Kmac","methodNames","algorithm","methodName","newMethodName","blocks","blockCount","byteCount","outputBlocks","extraBytes","notString","index","lastByteIndex","right","strs","paddingBytes","zeros","finalize","c5","c6","c7","c8","c9","b0","b4","b5","b6","b7","b8","b9","b10","b11","b12","b13","b14","b15","b16","b17","b18","b19","b20","b21","b22","b23","b24","b25","b26","b27","b28","b29","b30","b31","b32","b33","b34","b35","b36","b37","b38","b39","b40","b41","b42","b43","b44","b45","b46","b47","b48","b49","Groth16","textDecoder","witnessCalculator","jsonString","parsedData","wtnsBytes","pub_signals","messageHash","unmarshall","challenge","provingMethodGroth16AuthInstance","methodAlg","pubsignals","outputs","userState","userId","Id","values","fromHex","toJSON","ProvingMethodGroth16AuthV2","verificationResult","terminateCurve","curveName","pubSignals","userID","GISTRoot","Hash","provingMethodGroth16AuthV2Instance","proving"],"mappings":"iCAAA,IAAIA,EAAGC,OAAOC,eAAmBC,EAAG,CAACC,EAAEC,KAAK,IAAI,IAAIC,KAAKD,EAAEL,EAAGI,EAAEE,EAAE,CAACC,IAAIF,EAAEC,GAAGE,YAAW,KAAUC,EAAE,CAAA,EAAGN,EAAGM,EAAE,CAACC,WAAW,IAAIC,EAAGC,WAAW,IAAIC,EAAGC,WAAW,IAAIC,EAAGC,WAAW,IAAIC,GAAGC,mBAAmB,IAAIC,IAAI,IAAIC,EAAE,CAAE,EAACjB,EAAGiB,EAAE,CAACC,IAAI,IAAIC,EAAGC,IAAI,IAAIC,EAAGC,KAAK,IAAIC,EAAGC,UAAU,IAAIC,EAAEC,KAAK,IAAIC,EAAEC,IAAI,IAAIC,EAAGC,KAAK,IAAIC,EAAGC,IAAI,IAAIC,EAAEC,EAAE,IAAIC,EAAGC,GAAG,IAAIC,EAAGC,IAAI,IAAIC,EAAGC,UAAU,IAAIC,EAAGC,UAAU,IAAIC,EAAEC,UAAU,IAAIC,EAAEC,WAAW,IAAIC,EAAEC,IAAI,IAAIC,EAAGC,GAAG,IAAIC,EAAGC,WAAW,IAAIC,EAAGC,MAAM,IAAIC,EAAEC,OAAO,IAAIC,EAAEC,KAAK,IAAIC,EAAGC,IAAI,IAAIC,EAAGC,IAAI,IAAIC,EAAGC,GAAG,IAAIC,EAAGC,IAAI,IAAIC,EAAGC,IAAI,IAAIC,EAAGC,IAAI,IAAIC,EAAGC,IAAI,IAAIC,EAAGC,IAAI,IAAIC,EAAGC,IAAI,IAAIC,EAAEC,IAAI,IAAIC,EAAEC,UAAU,IAAIC,EAAGC,WAAW,IAAIC,EAAEC,IAAI,IAAIC,EAAGC,IAAI,IAAIC,EAAGC,OAAO,IAAIC,EAAGC,IAAI,IAAIC,EAAEC,QAAQ,IAAIC,EAAGC,SAAS,IAAIC,EAAGC,SAAS,IAAIC,EAAGC,QAAQ,IAAIC,EAAEC,QAAQ,IAAIC,EAAEC,SAAS,IAAIC,EAAGC,KAAK,IAAIC,IAAI,IAAIC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG3D,EAAE,CAAC9C,EAAEC,KAAK,IAAIA,GAAO,KAAJA,EAAO,OAAOyG,OAAO1G,GAAG,GAAO,KAAJC,EAAO,MAAqB,MAAdD,EAAE2G,MAAM,EAAE,GAASD,OAAO1G,GAAG0G,OAAO,KAAK1G,GAAG,MAAM,IAAI4G,MAAM,oBAAmB,EAAG1E,EAAGY,EAAEN,EAAG,CAACxC,EAAEC,KAAK,IAAIC,EAAEwG,OAAO,GAAGG,EAAEH,OAAOzG,GAAG,IAAI,IAAI6G,EAAE,EAAEA,EAAE9G,EAAE+G,OAAOD,IAAI5G,EAAEA,EAAE2G,EAAEH,OAAO1G,EAAE8G,IAAI,OAAO5G,GAAGsB,EAAExB,IAAI,IAAIC,EAAED,EAAEqG,SAAS,IAAI,OAAmB,GAAZpG,EAAE8G,OAAO,GAAKN,EAAGO,SAAS/G,EAAE,GAAG,IAAG,EAAGmD,EAAGpD,GAAG0G,OAAO1G,GAAG0G,OAAO,GAAGlD,EAAExD,GAAGA,IAAIwG,EAAExB,EAAG,CAAChF,EAAEC,IAAID,GAAGC,EAAEiF,EAAE,CAAClF,EAAEC,IAAID,GAAGC,EAAEmF,EAAGJ,EAAGM,EAAGJ,EAAE5B,EAAEtD,IAAIA,EAAE4E,IAAIA,EAAEN,EAAGtE,IAAI,IAAIC,EAAED,EAAEE,EAAE,GAAG,KAAKD,GAAG,CAAC,GAAGA,EAAE2E,EAAE,CAAC,IAAIiC,EAAE,EAAEI,OAAOhH,EAAEyG,OAAO,IAAIxG,EAAEgH,KAAKL,GAAG5G,GAAIyG,OAAOG,EAAE,MAAM3G,EAAEgH,KAAK,GAAGjH,IAAK2E,CAAC,CAAC,OAAO1E,GAAGwB,EAAE1B,IAAI,IAAIC,EAAED,EAAEE,EAAE,GAAG,KAAKD,GAAGA,EAAE2E,EAAE1E,EAAEgH,KAAK,GAAGhH,EAAEgH,KAAK,GAAGjH,IAAK2E,EAAE,OAAO1E,GAAG8F,EAAGhG,IAAI,GAAGA,EAAE0G,OAAOO,OAAOE,kBAAkB,MAAM,IAAIP,MAAM,kBAAkB,OAAOK,OAAOjH,EAAC,EAAG4F,EAAG,CAAC5F,EAAEC,KAAK,IAAIC,EAAE,GAAG2G,EAAE7G,EAAE8G,EAAE7G,EAAE,KAAK4G,GAAG3G,EAAEkH,QAAQH,OAAOJ,EAAEC,IAAID,GAAIC,EAAE,OAAO5G,GAAGkB,EAAG,CAACpB,EAAEC,IAAID,EAAEC,EAAEyF,EAAE,CAAC1F,EAAEC,IAAID,EAAEC,EAAEuE,EAAGxE,IAAIA,EAAEoE,EAAG,CAACpE,EAAEC,IAAID,EAAEC,EAAEuF,EAAGxF,GAAGA,EAAEA,EAAE8E,EAAE,CAAC9E,EAAEC,IAAID,GAAGC,EAAEqC,EAAG,CAACtC,EAAEC,IAAID,GAAGC,EAAEiB,EAAGlB,GAAGA,GAAG,EAAEA,GAAGA,EAAEgC,EAAE,CAAChC,EAAEC,IAAID,EAAEC,EAAEiE,EAAG,CAAClE,EAAEC,IAAID,EAAEC,EAAEmC,EAAG,CAACpC,EAAEC,IAAID,IAAIC,EAAEyE,EAAG,CAAC1E,EAAEC,IAAID,IAAIC,EAAE+D,EAAG,CAAChE,EAAEC,IAAID,EAAEC,EAAEiD,EAAG,CAAClD,EAAEC,IAAID,EAAEC,EAAE2D,EAAG,CAAC5D,EAAEC,IAAID,GAAGC,EAAE+C,EAAG,CAAChD,EAAEC,IAAID,GAAGC,EAAEqB,EAAG,CAACtB,EAAEC,IAAID,EAAEC,EAAE2B,EAAG,CAAC5B,EAAEC,IAAID,EAAEC,EAAE6B,EAAG,CAAC9B,EAAEC,IAAID,EAAEC,EAAEyD,EAAG,CAAC1D,EAAEC,IAAID,GAAGC,EAAE6D,EAAG,CAAC9D,EAAEC,IAAID,GAAGC,EAAEmG,EAAE,CAACpG,EAAEC,EAAEC,EAAE2G,KAAK,IAAIC,EAAE,UAAU5G,EAAEmG,SAAS,IAAIgB,EAAE,IAAIC,YAAYtH,EAAEuH,OAAOvH,EAAEwH,WAAWvH,EAAE4G,EAAE,GAAGY,EAAwB,GAAR,GAAZX,EAAEC,OAAO,GAAK,GAAG,GAAK,IAAI,IAAIW,EAAE,EAAEA,EAAED,EAAEC,IAAIL,EAAEK,GAAGV,SAASF,EAAEa,UAAUb,EAAEC,OAAO,EAAEW,EAAE,EAAEZ,EAAEC,OAAO,EAAEW,GAAG,IAAI,IAAI,IAAIA,EAAED,EAAEC,EAAEL,EAAEN,OAAOW,IAAIL,EAAEK,GAAG,EAAE,IAAI,IAAIA,EAAW,EAATL,EAAEN,OAASW,EAAEb,EAAEa,IAAI1H,EAAE0H,GAAG1B,EAAG1E,EAAG4D,EAAEhF,EAAEwG,OAAS,EAAFgB,IAAMhB,OAAO,MAAK,EAAGR,EAAE,CAAClG,EAAEC,EAAEC,EAAE2G,KAAK,IAAIC,EAAE,UAAU5G,EAAEmG,SAAS,IAAIgB,EAAE,IAAIO,SAAS5H,EAAEuH,OAAOvH,EAAEwH,WAAWvH,EAAE4G,GAAGY,EAAwB,GAAR,GAAZX,EAAEC,OAAO,GAAK,GAAG,GAAK,IAAI,IAAIW,EAAE,EAAEA,EAAED,EAAEC,IAAIL,EAAEQ,UAAUhB,EAAI,EAAFa,EAAI,EAAEV,SAASF,EAAEa,UAAUb,EAAEC,OAAO,EAAEW,EAAE,EAAEZ,EAAEC,OAAO,EAAEW,GAAG,KAAI,GAAI,IAAI,IAAIA,EAAE,EAAEA,EAAEb,EAAE,EAAEY,EAAEC,IAAIL,EAAES,SAAS,EAAE,GAAE,EAAG,EAAElF,EAAE,CAAC5C,EAAEC,EAAEC,KAAKA,EAAEA,GAAGF,EAAE+H,WAAW9H,EAAEA,GAAG,EAAE,IAAI4G,EAAE,IAAIS,YAAYtH,EAAEuH,OAAOvH,EAAEwH,WAAWvH,EAAEC,EAAE,GAAG4G,EAAE,IAAIkB,MAAM9H,EAAE,GAAG,OAAO2G,EAAEoB,SAAQ,CAACZ,EAAEI,IAAIX,EAAEA,EAAEC,OAAOU,EAAE,GAAGJ,EAAEhB,SAAS,IAAI6B,SAAS,EAAE,OAAMpF,EAAEgE,EAAEqB,KAAK,IAAI,GAAE,EAAGzF,EAAE,CAAC1C,EAAEC,EAAEC,KAAKA,EAAEA,GAAGF,EAAE+H,WAAW9H,EAAEA,GAAG,EAAE,IAAI4G,EAAE,IAAIe,SAAS5H,EAAEuH,OAAOvH,EAAEwH,WAAWvH,EAAEC,GAAG4G,EAAE,IAAIkB,MAAM9H,EAAE,GAAG,IAAI,IAAImH,EAAE,EAAEA,EAAEnH,EAAE,EAAEmH,IAAIP,EAAEO,GAAGR,EAAEuB,UAAY,EAAFf,GAAI,GAAIhB,SAAS,IAAI6B,SAAS,EAAE,KAAK,OAAOpF,EAAEgE,EAAEqB,KAAK,IAAI,GAAE,EAAG7B,EAAG,CAACtG,EAAEC,EAAE,KAAKD,EAAEqG,SAASpG,GAAG6F,EAAG9F,IAAI,IAAIC,EAAE,IAAIoI,WAAWC,KAAKC,OAAO/G,EAAExB,GAAG,GAAG,GAAG,GAAG,OAAOoG,EAAEnG,EAAE,EAAED,EAAEC,EAAE8H,YAAY9H,GAAGuG,EAAEE,OAAO,GAAG9B,EAAE8B,OAAO,GAAG,SAAS3F,EAAEf,GAAG,GAAGgI,MAAMQ,QAAQxI,GAAG,OAAOA,EAAEyI,IAAI1H,GAAG,GAAa,iBAAHf,EAAY,CAAC,IAAI6G,EAAE,GAAG,IAAI,IAAIC,EAAEO,KAAKxH,OAAO6I,QAAQ1I,GAAG6G,EAAEC,GAAG/F,EAAEsG,GAAG,OAAOR,CAAC,CAAC,IAAI3G,EAAE,IAAImI,WAAWM,KAAKC,KAAK5I,IAAG6G,GAAGA,EAAEgC,WAAW,MAAKJ,KAAI5B,GAAGA,EAAER,SAAS,IAAI6B,SAAS,EAAE,OAAMC,KAAK,IAAI,OAAOzB,OAAO,KAAKxG,IAAI,CAAC,SAASK,EAAGP,GAAG,IAAIC,EAAEyG,OAAO,GAAGxG,EAAEF,EAAE+G,OAAOF,EAAE,EAAEC,EAAE,IAAIc,SAAS5H,EAAEuH,OAAOvH,EAAEwH,WAAWxH,EAAE+H,YAAY,KAAK7H,EAAE,GAAGA,GAAG,GAAGA,GAAG,EAAED,GAAGyG,OAAOI,EAAEsB,UAAUlI,KAAKwG,OAAS,EAAFG,GAAKA,GAAG,GAAG3G,GAAG,GAAGA,GAAG,EAAED,GAAGyG,OAAOI,EAAEgC,UAAU5I,KAAKwG,OAAS,EAAFG,GAAKA,GAAG,IAAI3G,GAAG,EAAED,GAAGyG,OAAOI,EAAEiC,SAAS7I,KAAKwG,OAAS,EAAFG,GAAKA,GAAG,GAAG,OAAO5G,CAAC,CAAC,SAASQ,EAAGT,EAAEC,GAAG,IAAIC,EAAEF,EAAE6G,EAAE,IAAIwB,WAAWpI,GAAG6G,EAAE,IAAIc,SAASf,EAAEU,QAAQF,EAAEpH,EAAE,KAAKoH,EAAE,GAAGA,EAAE,GAAG,GAAGA,GAAG,EAAEP,EAAEe,UAAUR,EAAEJ,OAAO/G,EAAEwG,OAAO,cAAcxG,IAAKwG,OAAO,KAAKW,EAAE,GAAG,GAAGA,GAAG,EAAEP,EAAEkC,UAAU3B,EAAEJ,OAAO/G,EAAEwG,OAAO,SAASxG,IAAKwG,OAAO,MAAMW,GAAG,EAAEP,EAAEmC,SAAS5B,EAAEJ,OAAO/G,EAAEwG,OAAO,OAAOxG,IAAKwG,OAAO,IAAI,GAAGxG,EAAE,MAAM,IAAI0G,MAAM,sCAAsC,OAAOC,CAAC,CAAC,SAASlG,EAAGX,GAAG,IAAIC,EAAEyG,OAAO,GAAGxG,EAAE,EAAE2G,EAAE,IAAIe,SAAS5H,EAAEuH,OAAOvH,EAAEwH,WAAWxH,EAAE+H,YAAY,KAAK7H,EAAEF,EAAE+G,QAAQ7G,EAAE,GAAGF,EAAE+G,QAAQ9G,GAAGyG,OAAOG,EAAEuB,UAAUlI,GAAE,KAAMwG,OAAS,EAAFxG,GAAKA,GAAG,GAAGA,EAAE,GAAGF,EAAE+G,QAAQ9G,GAAGyG,OAAOG,EAAEiC,UAAU5I,GAAE,KAAMwG,OAAS,EAAFxG,GAAKA,GAAG,IAAID,GAAGyG,OAAOG,EAAEkC,SAAS7I,KAAKwG,OAAS,EAAFxG,GAAKA,GAAG,GAAG,OAAOD,CAAC,CAAC,SAASY,GAAGb,EAAEC,GAAG,IAAIC,EAAEF,SAASC,EAAE,MAAoC,IAA9BA,EAAEqI,KAAKC,OAAO/G,EAAExB,GAAG,GAAG,GAAG,KAASC,EAAE,IAAI,IAAI4G,EAAE,IAAIwB,WAAWpI,GAAG6G,EAAE,IAAIc,SAASf,EAAEU,QAAQF,EAAE,EAAE,KAAKA,EAAEpH,GAAGoH,EAAE,GAAGpH,GAAG6G,EAAEe,UAAUR,EAAEJ,OAAO/G,EAAEwG,OAAO,cAAa,GAAIW,GAAG,EAAEnH,IAAKwG,OAAO,KAAKW,EAAE,GAAGpH,GAAG6G,EAAEkC,UAAU3B,EAAEJ,OAAO/G,EAAEwG,OAAO,SAAQ,GAAIW,GAAG,EAAEnH,IAAKwG,OAAO,MAAMI,EAAEmC,SAAS5B,EAAEJ,OAAO/G,EAAEwG,OAAO,OAAOW,GAAG,EAAEnH,IAAKwG,OAAO,IAAI,GAAGxG,EAAE,MAAM,IAAI0G,MAAM,sCAAsC,OAAOC,CAAC,CAAC,SAASqC,GAAElJ,GAAG,GAAGA,GAAG,EAAE,MAAM,IAAI4G,MAAM,iCAAiC,IAAI3G,EAAEkJ,WAAW,GAAGlJ,EAAEmJ,QAAQC,gBAAgB,CAAC,IAAInJ,EAAE,IAAImI,WAAWrI,GAAG,OAAOC,EAAEmJ,OAAOC,gBAAgBnJ,GAAGA,CAAC,CAAC,MAAM,IAAI0G,MAAM,8DAA8D,CAAC,IAAI0C,GAAE,MAAM,WAAAC,CAAYtJ,GAAGuJ,KAAKC,KAAK,KAAKD,KAAK7E,IAAI+B,OAAO,GAAG8C,KAAKjD,KAAKG,OAAO,GAAG8C,KAAKlG,EAAEoD,OAAOzG,GAAGuJ,KAAK5G,EAAEgC,EAAE4E,KAAKE,OAAOF,KAAKlG,EAAEkG,KAAK7E,IAAI6E,KAAKG,IAAIjD,OAAO,GAAG8C,KAAKI,KAAKJ,KAAKlG,GAAGkG,KAAK7E,IAAI6E,KAAKjI,UAAUC,EAAEgI,KAAKlG,GAAGkG,KAAKK,MAAML,KAAK7E,KAAK+B,OAAO8C,KAAKjI,YAAYiI,KAAK7E,IAAI6E,KAAKM,IAAIxB,KAAKC,OAAOiB,KAAKjI,UAAU,GAAG,IAAI,EAAEiI,KAAKO,IAAa,EAATP,KAAKM,IAAMN,KAAKQ,GAAY,EAATR,KAAKM,IAAMN,KAAK1G,EAAE0G,KAAKvH,EAAEuH,KAAK7E,KAAK+B,OAAgB,GAAT8C,KAAKM,MAASN,KAAKS,GAAGT,KAAKU,IAAIV,KAAK1G,GAAG,IAAI5C,EAAEsJ,KAAKE,QAAQF,KAAK7E,IAAI6E,KAAKW,IAAIX,KAAKG,IAAI,IAAI9C,EAAE2C,KAAK3E,IAAI2E,KAAKW,IAAIjK,GAAG,MAAMsJ,KAAKrH,GAAG0E,EAAE2C,KAAKE,SAASF,KAAKW,IAAIX,KAAKW,IAAIX,KAAK7E,IAAIkC,EAAE2C,KAAK3E,IAAI2E,KAAKW,IAAIjK,GAAG,IAAIsJ,KAAK/B,EAAE,EAAE+B,KAAK9B,EAAE8B,KAAKE,QAAQF,KAAK9B,EAAE8B,KAAK7E,MAAM6E,KAAKjD,MAAMiD,KAAK/B,EAAE+B,KAAK/B,EAAE,EAAE+B,KAAK9B,EAAE8B,KAAK9B,GAAG8B,KAAK7E,IAAI6E,KAAKY,SAASZ,KAAK3E,IAAI2E,KAAKW,IAAIX,KAAK9B,GAA2/F,SAAY1H,GAAG,IAAIA,EAAEqK,OAAOvF,EAAE9E,EAAEsD,EAAEtD,EAAE4C,GAAG5C,EAAEsK,OAAO9D,EAAExG,EAAEuK,OAAO7E,EAAE1F,EAAEqK,OAAOzF,IAAItB,EAAEtD,EAAEuK,SAASvK,EAAEsK,OAAOtK,EAAEsK,OAAO1F,EAAE5E,EAAEuK,OAAOvI,EAAEhC,EAAEuK,OAAO,IAAI,IAAItK,EAAED,EAAE2E,IAAI,KAAK3E,EAAEmC,GAAGlC,EAAED,EAAE2E,MAAM,CAAC,IAAIzE,EAAEF,EAAEwK,SAASxK,EAAEyK,OAAOzK,EAAE6E,IAAI3E,EAAEF,EAAEuK,QAAQtK,EAAED,EAAE6E,IAAI7E,EAAEyK,OAAO,KAAKzK,EAAEsK,OAAO1F,GAAG,CAAC5E,EAAE0K,WAAW1I,EAAE0D,EAAE1F,EAAEuK,OAAO3F,GAAG,IAAI5E,EAAE2K,KAAKzK,IAAI,GAAGF,EAAEuD,OAAOrD,GAAG,OAAOF,EAAEuG,KAAK,IAAIM,EAAE7G,EAAE6E,IAAI3E,EAAEF,EAAE0K,YAAY5D,EAAE9G,EAAE6E,IAAI7E,EAAEmE,IAAInE,EAAEuF,OAAOsB,GAAG3G,GAAG,KAAKF,EAAEsK,OAAO1F,IAAI,GAAG5E,EAAEmC,GAAG2E,EAAE9G,EAAE0J,QAAQ,OAAO,KAAK,IAAIrC,EAAErH,EAAEsK,OAAO7C,EAAEzH,EAAEmE,IAAIjE,EAAE2G,GAAGa,EAAE1H,EAAEmE,IAAIsD,EAAEZ,GAAG+D,EAAE5K,EAAEyK,OAAO,MAAMzK,EAAEmC,GAAGuF,EAAE1H,EAAE2E,MAAM,CAAC,IAAIkG,EAAE7K,EAAEuF,OAAOmC,GAAGoD,EAAElG,EAAE,MAAM5E,EAAEmC,GAAG0I,EAAE7K,EAAE2E,MAAMkG,EAAE7K,EAAEuF,OAAOsF,GAAGC,IAAIjE,EAAE+D,EAAE,IAAI,IAAIG,EAAE,EAAEA,EAAE1D,EAAEyD,EAAElG,EAAEmG,IAAIlE,EAAE7G,EAAEuF,OAAOsB,GAAG+D,EAAE5K,EAAEuF,OAAOsB,GAAGa,EAAE1H,EAAEmE,IAAIuD,EAAEkD,GAAGnD,EAAEzH,EAAEmE,IAAIsD,EAAEZ,GAAGQ,EAAEyD,CAAC,CAAC,OAAO9K,EAAE+C,IAAI0E,EAAEzH,EAAEuG,MAAMkB,EAAEzH,EAAEuE,IAAIkD,EAAC,CAAE,CAA9pHuD,CAAGxB,MAAMA,KAAKyB,MAAMzB,KAAKjE,OAAOiE,KAAKW,KAAKX,KAAK0B,EAAE1B,KAAKnH,IAAImH,KAAKW,IAAIzD,OAAO,GAAG8C,KAAK/B,GAAG,CAAC,CAAAxF,CAAEhC,EAAEC,OAAE,GAAQ,IAAI2G,EAAE,GAAG3G,EAAEA,GAAGwG,OAAO,MAAMG,EAAEH,OAAO,KAAKzG,IAAI4G,EAAEH,OAAOzG,GAAG4G,EAAE,EAAE,CAAC,IAAIC,GAAGD,EAAE,OAAOC,GAAG0C,KAAKlG,IAAIwD,GAAI0C,KAAKlG,GAAGkG,KAAKlG,EAAEwD,CAAC,CAAM,OAAOD,GAAG2C,KAAKlG,EAAEuD,EAAE2C,KAAKlG,EAAEuD,CAAC,CAAC,GAAA1F,CAAIlB,EAAEC,GAAG,IAAI2G,EAAE5G,EAAEC,EAAE,OAAO2G,GAAG2C,KAAKlG,EAAEuD,EAAE2C,KAAKlG,EAAEuD,CAAC,CAAC,GAAApB,CAAIxF,EAAEC,GAAG,OAAOD,GAAGC,EAAED,EAAEC,EAAEsJ,KAAKlG,EAAEpD,EAAED,CAAC,CAAC,GAAAsE,CAAItE,GAAG,OAAOA,GAAGuJ,KAAKlG,EAAErD,CAAC,CAAC,MAAAkL,CAAOlL,GAAG,OAAOuJ,KAAKrI,IAAIlB,EAAEA,EAAE,CAAC,GAAAkE,CAAIlE,EAAEC,GAAG,OAAOD,EAAEC,EAAEsJ,KAAKlG,CAAC,CAAC,SAAA8H,CAAUnL,EAAEC,GAAG,OAAOD,EAAEuJ,KAAKvH,EAAE/B,GAAGsJ,KAAKlG,CAAC,CAAC,MAAAiC,CAAOtF,GAAG,OAAOA,EAAEA,EAAEuJ,KAAKlG,CAAC,CAAC,EAAAnB,CAAGlC,EAAEC,GAAG,OAAOD,GAAGC,CAAC,CAAC,GAAAuE,CAAIxE,EAAEC,GAAG,OAAOD,GAAGC,CAAC,CAAC,EAAA6D,CAAG9D,EAAEC,GAAyD,OAAhDD,EAAEuJ,KAAKI,KAAK3J,EAAEuJ,KAAKlG,EAAErD,IAAIC,EAAEsJ,KAAKI,KAAK1J,EAAEsJ,KAAKlG,EAAEpD,EAAY,CAAC,EAAA+C,CAAGhD,EAAEC,GAAyD,OAAhDD,EAAEuJ,KAAKI,KAAK3J,EAAEuJ,KAAKlG,EAAErD,IAAIC,EAAEsJ,KAAKI,KAAK1J,EAAEsJ,KAAKlG,EAAEpD,EAAY,CAAC,GAAAyD,CAAI1D,EAAEC,GAAyD,OAAhDD,EAAEuJ,KAAKI,KAAK3J,EAAEuJ,KAAKlG,EAAErD,KAAIC,EAAEsJ,KAAKI,KAAK1J,EAAEsJ,KAAKlG,EAAEpD,EAAa,CAAC,GAAA6C,CAAI9C,EAAEC,GAAyD,OAAhDD,EAAEuJ,KAAKI,KAAK3J,EAAEuJ,KAAKlG,EAAErD,KAAIC,EAAEsJ,KAAKI,KAAK1J,EAAEsJ,KAAKlG,EAAEpD,EAAa,CAAC,GAAA6B,CAAI9B,EAAEC,GAAG,OAAOsJ,KAAKrF,IAAIlE,EAAEuJ,KAAKU,IAAIhK,GAAG,CAAC,IAAAmL,CAAKpL,EAAEC,GAAG,IAAIA,EAAE,MAAM,IAAI0G,MAAM,oBAAoB,OAAO3G,EAAEC,CAAC,CAAC,GAAAgK,CAAIjK,GAAG,IAAIA,EAAE,MAAM,IAAI2G,MAAM,oBAAoB,IAAI1G,EAAEsJ,KAAKjD,KAAKM,EAAE2C,KAAKlG,EAAEwD,EAAE0C,KAAK7E,IAAI0C,EAAEpH,EAAEuJ,KAAKlG,EAAE,KAAK+D,GAAG,CAAC,IAAII,EAAEZ,EAAEQ,GAAGnH,EAAE4G,GAAG,CAACA,EAAE5G,EAAEuH,EAAEX,IAAID,EAAEQ,GAAG,CAACA,EAAER,EAAEY,EAAEJ,EAAE,CAAC,OAAOnH,EAAEsJ,KAAKjD,OAAOrG,GAAGsJ,KAAKlG,GAAGpD,CAAC,CAAC,GAAA+D,CAAIhE,EAAEC,GAAG,OAAOD,EAAEC,CAAC,CAAC,GAAA2E,CAAI5E,EAAEC,GAAG,OAAOoL,GAAG9B,KAAKvJ,EAAEC,EAAE,CAAC,GAAAmC,CAAIpC,EAAEC,GAAG,OAAOoL,GAAG9B,KAAKvJ,EAAEyG,OAAOxG,GAAG,CAAC,IAAAmB,CAAKpB,EAAEC,GAAG,IAAI2G,EAAE5G,EAAEC,EAAEsJ,KAAKK,KAAK,OAAOhD,GAAG2C,KAAKlG,EAAEuD,EAAE2C,KAAKlG,EAAEuD,CAAC,CAAC,GAAAlF,CAAI1B,EAAEC,GAAG,IAAI2G,GAAG5G,EAAEC,GAAGsJ,KAAKK,KAAK,OAAOhD,GAAG2C,KAAKlG,EAAEuD,EAAE2C,KAAKlG,EAAEuD,CAAC,CAAC,IAAAhF,CAAK5B,EAAEC,GAAG,IAAI2G,GAAG5G,EAAEC,GAAGsJ,KAAKK,KAAK,OAAOhD,GAAG2C,KAAKlG,EAAEuD,EAAE2C,KAAKlG,EAAEuD,CAAC,CAAC,IAAA0E,CAAKtL,GAAG,IAAIC,EAAED,EAAEuJ,KAAKK,KAAK,OAAO3J,GAAGsJ,KAAKlG,EAAEpD,EAAEsJ,KAAKlG,EAAEpD,CAAC,CAAC,GAAAiF,CAAIlF,EAAEC,GAAG,GAAG+G,OAAO/G,GAAGsJ,KAAKjI,UAAU,CAAC,IAAIsF,EAAE5G,GAAGC,EAAEsJ,KAAKK,KAAK,OAAOhD,GAAG2C,KAAKlG,EAAEuD,EAAE2C,KAAKlG,EAAEuD,CAAC,CAAK,CAAC,IAAIA,EAAE2C,KAAKlG,EAAEpD,EAAE,OAAO+G,OAAOJ,GAAG2C,KAAKjI,UAAUtB,GAAG4G,EAAE2C,KAAKjD,IAAI,CAAC,CAAC,GAAAlB,CAAIpF,EAAEC,GAAG,GAAG+G,OAAO/G,GAAGsJ,KAAKjI,UAAU,OAAOtB,GAAGC,EAAE,CAAC,IAAI2G,EAAE2C,KAAKlG,EAAEpD,EAAE,GAAG+G,OAAOJ,GAAG2C,KAAKjI,UAAU,CAAC,IAAIuF,EAAE7G,GAAG4G,EAAE2C,KAAKK,KAAK,OAAO/C,GAAG0C,KAAKlG,EAAEwD,EAAE0C,KAAKlG,EAAEwD,CAAC,CAAM,OAAON,CAAC,CAAC,CAAC,IAAA/C,CAAKxD,EAAEC,GAAG,OAAOD,GAAGC,EAAEsJ,KAAK7E,IAAI6E,KAAKjD,IAAI,CAAC,GAAA1C,CAAI5D,EAAEC,GAAG,OAAOD,GAAGC,EAAEsJ,KAAK7E,IAAI6E,KAAKjD,IAAI,CAAC,QAAAiF,CAASvL,GAAG,GAAGA,GAAGuJ,KAAKjD,KAAK,OAAOiD,KAAKjD,KAAK,GAAGiD,KAAK3E,IAAI5E,EAAEuJ,KAAKE,QAAQF,KAAK7E,MAAM6E,KAAK7E,IAAI,OAAO,KAAK,IAAIkC,EAAE2C,KAAK/B,EAAEX,EAAE0C,KAAKY,SAAS/C,EAAEmC,KAAK3E,IAAI5E,EAAEuJ,KAAK9B,GAAGD,EAAE+B,KAAK3E,IAAI5E,EAAEuJ,KAAKrI,IAAIqI,KAAK9B,EAAE8B,KAAK7E,MAAM6E,KAAK7E,KAAK,KAAK0C,GAAGmC,KAAK7E,KAAK,CAAC,IAAI+C,EAAE8B,KAAKjE,OAAO8B,GAAGuD,EAAE,EAAE,KAAKlD,GAAG8B,KAAK7E,KAAKiG,IAAIlD,EAAE8B,KAAKjE,OAAOmC,GAAG,IAAImD,EAAE/D,EAAE,IAAI,IAAIgE,EAAE,EAAEA,EAAEjE,EAAE+D,EAAE,EAAEE,IAAID,EAAErB,KAAKjE,OAAOsF,GAAGhE,EAAE+D,EAAE9D,EAAE0C,KAAKjE,OAAOsF,GAAGxD,EAAEmC,KAAKrF,IAAIkD,EAAEP,GAAGW,EAAE+B,KAAKrF,IAAIsD,EAAEoD,EAAE,CAAC,OAAOpD,EAAE+B,KAAKlG,GAAGkG,KAAK7E,MAAM8C,EAAE+B,KAAKjF,IAAIkD,IAAIA,CAAC,CAAC,SAAAgE,CAAUxL,GAAG,GAAGA,EAAE,EAAE,CAAC,IAAIC,GAAGD,EAAE,OAAOC,GAAGsJ,KAAKlG,IAAIpD,GAAIsJ,KAAKlG,GAAGkG,KAAKlG,EAAEpD,CAAC,CAAM,OAAOD,GAAGuJ,KAAKlG,EAAErD,EAAEuJ,KAAKlG,EAAErD,CAAC,CAAC,MAAAuK,GAAS,IAAIvK,EAAiB,EAAfuJ,KAAKjI,UAAY,EAAErB,EAAEsJ,KAAKjD,KAAK,IAAI,IAAIM,EAAE,EAAEA,EAAE5G,EAAE4G,IAAI3G,GAAGA,GAAGwG,OAAO,IAAIA,OAAOwC,GAAE,GAAG,IAAI,OAAOhJ,EAAEsJ,KAAKlG,CAAC,CAAC,QAAA+C,CAASpG,EAAEC,EAAE,IAAY,IAAI2G,EAAE,OAAd3G,EAAEA,GAAG,GAAmC2G,EAAnB5G,EAAEuJ,KAAKI,MAAS,IAAH1J,EAAQ,KAAKsJ,KAAKlG,EAAErD,GAAGoG,SAASnG,GAAKD,EAAEoG,SAASnG,GAAG2G,CAAC,CAAC,MAAAtD,CAAOtD,GAAG,OAAOA,GAAGuJ,KAAKjD,IAAI,CAAC,OAAAJ,CAAQlG,EAAEC,EAAE2G,GAAGT,EAAEnG,EAAEC,EAAE2G,EAAW,EAAT2C,KAAKM,IAAM,CAAC,OAAA7D,CAAQhG,EAAEC,EAAE2G,GAAGX,EAAEjG,EAAEC,EAAE2G,EAAW,EAAT2C,KAAKM,IAAM,CAAC,QAAA4B,CAASzL,EAAEC,EAAE2G,GAAG,OAAO2C,KAAKvD,QAAQhG,EAAEC,EAAEsJ,KAAKrF,IAAIqF,KAAK1G,EAAE+D,GAAG,CAAC,QAAA8E,CAAS1L,EAAEC,EAAE2G,GAAG,OAAO2C,KAAKrD,QAAQlG,EAAEC,EAAEsJ,KAAKrF,IAAIqF,KAAK1G,EAAE+D,GAAG,CAAC,SAAAlE,CAAU1C,EAAEC,GAAG,OAAO0C,EAAE3C,EAAEC,EAAEsJ,KAAKQ,GAAG,CAAC,SAAAvH,CAAUxC,EAAEC,GAAG,OAAOwC,EAAEzC,EAAEC,EAAEsJ,KAAKQ,GAAG,CAAC,UAAA4B,CAAW3L,EAAEC,GAAG,OAAOsJ,KAAKrF,IAAIqF,KAAK7G,UAAU1C,EAAEC,GAAGsJ,KAAKS,GAAG,CAAC,UAAA4B,CAAW5L,EAAEC,GAAG,OAAOsJ,KAAKrF,IAAIqF,KAAK/G,UAAUxC,EAAEC,GAAGsJ,KAAKS,GAAG,CAAC,QAAA6B,CAAS7L,GAAG,OAAOA,CAAC,CAAC,IAAA0K,CAAK1K,GAAG,MAAM,IAAI2G,MAAM,8BAA8B3G,EAAE,GAA0qB,SAASqL,GAAGtL,EAAEC,EAAEC,GAAG,GAAGsD,EAAEtD,GAAG,OAAOF,EAAE2E,IAAI,IAAIkC,EAAEnF,EAAExB,GAAG,GAAa,GAAV2G,EAAEE,OAAU,OAAO/G,EAAE2E,IAAI,IAAImC,EAAE7G,EAAE,IAAI,IAAIoH,EAAER,EAAEE,OAAO,EAAEM,GAAG,EAAEA,IAAIP,EAAE9G,EAAEuF,OAAOuB,GAAGD,EAAEQ,KAAKP,EAAE9G,EAAEmE,IAAI2C,EAAE7G,IAAI,OAAO6G,CAAC,CAAI,IAAo5DiF,GAAG,IAAIzC,GAAE5C,OAAO,kFAAoF,IAAr/D,MAAM,WAAA6C,CAAYtJ,GAAGuJ,KAAKwC,EAAE/L,EAAEuJ,KAAKlG,EAAEoD,OAAO,iFAAiF8C,KAAKyC,MAAMjL,EAAEe,IAAIf,EAAEyE,IAAI+D,KAAKlG,EAAEtC,EAAE2D,KAAK,IAAI6E,KAAK0C,UAAU,CAACjM,EAAEgC,EAAE,+EAA+EhC,EAAEgC,EAAE,iFAAiFuH,KAAK2C,MAAM,CAAClM,EAAEgC,EAAE,gFAAgFhC,EAAEgC,EAAE,kFAAkFuH,KAAK4C,MAAM1F,OAAO,iFAAiF8C,KAAK6C,SAASrL,EAAEiE,WAAWuE,KAAK4C,MAAM,IAAI5C,KAAK3C,EAAE5G,EAAEgC,EAAE,UAAUuH,KAAKnC,EAAEpH,EAAEgC,EAAE,SAAS,CAAC,QAAAqK,CAASrM,EAAEC,GAAG,IAAI2G,EAAE2C,KAAKwC,EAAElF,EAAE,IAAIkB,MAAM,GAAGX,EAAER,EAAE1C,IAAIlE,EAAE,GAAGC,EAAE,IAAIuH,EAAEZ,EAAE1C,IAAIlE,EAAE,GAAGC,EAAE,IAAIwH,EAAEb,EAAE1C,IAAI0C,EAAEpB,IAAIxF,EAAE,GAAG4G,EAAE1C,IAAIqF,KAAK3C,EAAE5G,EAAE,KAAK4G,EAAE1F,IAAIjB,EAAE,GAAGA,EAAE,KAAK0K,EAAE/D,EAAE1C,IAAIkD,EAAEI,GAAGoD,EAAEhE,EAAE1C,IAAIqF,KAAKnC,EAAEuD,GAAG,OAAO9D,EAAE,GAAGD,EAAE9E,IAAI8E,EAAE1F,IAAIkG,EAAEI,GAAGZ,EAAE1F,IAAI0F,EAAElC,IAAIkG,IAAI/D,EAAE,GAAGD,EAAE9E,IAAI8E,EAAE1F,IAAIuG,EAAEb,EAAEpB,IAAIoB,EAAE1C,IAAIqF,KAAK3C,EAAEQ,GAAGI,IAAIZ,EAAEpB,IAAIoB,EAAElC,IAAIkG,IAAI/D,CAAC,CAAC,eAAAyF,CAAgBtM,EAAEC,GAAG,IAAI2G,EAAE2C,KAAKwC,EAAElF,EAAE,CAACD,EAAE5E,EAAE,KAAK4E,EAAE5E,EAAE,MAAMoF,EAAEnH,EAAEuH,EAAExH,EAAE,MAAMe,EAAEuC,OAAO8D,IAAIrG,EAAEqC,MAAMgE,KAAKP,EAAE0C,KAAK8C,SAASxF,EAAEW,IAAIA,EAAE+B,KAAK8C,SAAS7E,EAAEA,GAAGJ,EAAErG,EAAEiE,WAAWoC,EAAErG,EAAE2D,KAAK,OAAOmC,CAAC,CAAC,UAAA0F,CAAWvM,GAAG,IAAIC,EAAEsJ,KAAKwC,EAAE,IAAIxC,KAAKiD,QAAQxM,GAAG,OAAM,EAAG,IAAI4G,EAAE2C,KAAK+C,gBAAgBtM,EAAEuJ,KAAK6C,UAAU,OAAOnM,EAAEqD,OAAOsD,EAAE,KAAK3G,EAAEiC,GAAG0E,EAAE,GAAG3G,EAAEyE,IAAI,CAAC,OAAA8H,CAAQxM,GAAG,IAAIC,EAAEsJ,KAAKwC,EAAEnF,EAAE3G,EAAEqF,OAAOtF,EAAE,IAAI6G,EAAE5G,EAAEqF,OAAOtF,EAAE,IAAI,QAAQC,EAAEiC,GAAGjC,EAAEiB,IAAIjB,EAAEiE,IAAIqF,KAAK3C,EAAEA,GAAGC,GAAG5G,EAAEiB,IAAIjB,EAAEyE,IAAIzE,EAAEiE,IAAIjE,EAAEiE,IAAI0C,EAAEC,GAAG0C,KAAKnC,IAAI,CAAC,SAAAqF,CAAUzM,GAAG,IAAIC,EAAEsJ,KAAKwC,EAAEnF,EAAE,IAAIwB,WAAW,IAAInI,EAAEiG,QAAQU,EAAE,EAAE5G,EAAE,IAAI,IAAI6G,EAAE5G,EAAE4L,SAAS7L,EAAE,IAAI,OAAOe,EAAEiC,GAAG6D,EAAE0C,KAAKyC,SAASpF,EAAE,IAAU,IAANA,EAAE,KAASA,CAAC,CAAC,WAAA8F,CAAY1M,GAAG,IAAIC,EAAEsJ,KAAKwC,EAAEnF,GAAE,EAAGC,EAAE,CAACJ,OAAO,GAAGA,OAAO,IAAI,GAAS,IAANzG,EAAE,MAAU4G,GAAE,EAAG5G,EAAE,IAAU,IAANA,EAAE,KAAS6G,EAAE,GAAG5G,EAAEyC,UAAU1C,EAAE,GAAGe,EAAEiC,GAAG/C,EAAE4L,SAAShF,EAAE,IAAI0C,KAAKlG,GAAG,OAAO,KAAK,IAAI+D,EAAEnH,EAAEqF,OAAOuB,EAAE,IAAIW,EAAEvH,EAAE6B,IAAI7B,EAAEuF,IAAIvF,EAAEyE,IAAI0C,GAAGnH,EAAEuF,IAAI+D,KAAK3C,EAAE3G,EAAEiE,IAAIqF,KAAKnC,EAAEA,KAAKK,EAAExH,EAAEmC,IAAIoF,EAAEf,OAAOxG,EAAE0J,OAAO,IAAI1J,EAAEiC,GAAGjC,EAAEyE,IAAI+C,GAAG,OAAO,KAAK,IAAIkD,EAAE1K,EAAEyK,KAAKlD,GAAG,OAAU,MAAHmD,EAAQ,MAAM/D,IAAI+D,EAAE1K,EAAEqE,IAAIqG,IAAI9D,EAAE,GAAGJ,OAAOkE,GAAG9D,EAAE,GAA6GiF,IAAI,IAAqjilCa,GAAEvM,EAAES,mBAAljilC,CAACiK,EAAE,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAggDAAggDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAggDAAggDAAggDAAggDAAggDAAggDAAggDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAggDAAggDAAggDAAgiDAAiD1K,EAAE,CAAC,CAAC,CAAC,+CAA+C,gDAAgD,CAAC,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,kDAAkD2B,EAAE,CAAC,CAAC,CAAC,+CAA+C,gDAAgD,CAAC,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,iDAAiD,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,kDAAkD4K,EAAE,CAAC,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,gDAAggDAAggDAAggDAAggDAAggDAAggDAAggDAAggDAAggDAAggDAAggDAAgD,CAAC,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,2CAA2C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+CAA+C,+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","x_google_ignoreList":[0,1,4,7,8,11]}