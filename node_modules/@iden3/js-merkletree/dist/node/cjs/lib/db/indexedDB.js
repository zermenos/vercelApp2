"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _IndexedDBStorage_currentRoot;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexedDBStorage = void 0;
const hash_1 = require("../hash/hash");
const utils_1 = require("../utils");
const idb_keyval_1 = require("idb-keyval");
const constants_1 = require("../../constants");
const node_1 = require("../node/node");
class IndexedDBStorage {
    constructor(_prefix, databaseName) {
        this._prefix = _prefix;
        _IndexedDBStorage_currentRoot.set(this, void 0);
        __classPrivateFieldSet(this, _IndexedDBStorage_currentRoot, hash_1.ZERO_HASH, "f");
        this._prefixHash = (0, utils_1.bytes2Hex)(_prefix);
        this._store = (0, idb_keyval_1.createStore)(`${databaseName ?? IndexedDBStorage.storageName}-db`, IndexedDBStorage.storageName);
    }
    async get(k) {
        const kBytes = new Uint8Array([...this._prefix, ...k]);
        const key = (0, utils_1.bytes2Hex)(kBytes);
        const obj = await (0, idb_keyval_1.get)(key, this._store);
        if (obj === null || obj === undefined) {
            return undefined;
        }
        if (obj.type === constants_1.NODE_TYPE_EMPTY) {
            return new node_1.NodeEmpty();
        }
        if (obj.type === constants_1.NODE_TYPE_MIDDLE) {
            const cL = new hash_1.Hash(Uint8Array.from(obj.childL.bytes));
            const cR = new hash_1.Hash(Uint8Array.from(obj.childR.bytes));
            return new node_1.NodeMiddle(cL, cR);
        }
        if (obj.type === constants_1.NODE_TYPE_LEAF) {
            const k = new hash_1.Hash(Uint8Array.from(obj.entry[0].bytes));
            const v = new hash_1.Hash(Uint8Array.from(obj.entry[1].bytes));
            return new node_1.NodeLeaf(k, v);
        }
        throw new Error(`error: value found for key ${key} is not of type Node`);
    }
    async put(k, n) {
        const kBytes = new Uint8Array([...this._prefix, ...k]);
        const key = (0, utils_1.bytes2Hex)(kBytes);
        await (0, idb_keyval_1.set)(key, n, this._store);
    }
    async getRoot() {
        if (!__classPrivateFieldGet(this, _IndexedDBStorage_currentRoot, "f").equals(hash_1.ZERO_HASH)) {
            return __classPrivateFieldGet(this, _IndexedDBStorage_currentRoot, "f");
        }
        const root = await (0, idb_keyval_1.get)(this._prefixHash, this._store);
        if (!root) {
            __classPrivateFieldSet(this, _IndexedDBStorage_currentRoot, hash_1.ZERO_HASH, "f");
        }
        else {
            __classPrivateFieldSet(this, _IndexedDBStorage_currentRoot, new hash_1.Hash(root.bytes), "f");
        }
        return __classPrivateFieldGet(this, _IndexedDBStorage_currentRoot, "f");
    }
    async setRoot(r) {
        await (0, idb_keyval_1.set)(this._prefixHash, r, this._store);
        __classPrivateFieldSet(this, _IndexedDBStorage_currentRoot, r, "f");
    }
}
exports.IndexedDBStorage = IndexedDBStorage;
_IndexedDBStorage_currentRoot = new WeakMap();
IndexedDBStorage.storageName = 'merkle-tree';
