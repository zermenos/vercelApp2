var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ElemBytes_bytes;
import { ELEM_BYTES_LEN } from '../../constants';
import { bytes2Hex, newBigIntFromBytes, swapEndianness } from '../utils';
export class ElemBytes {
    constructor() {
        // Little Endian
        _ElemBytes_bytes.set(this, void 0);
        __classPrivateFieldSet(this, _ElemBytes_bytes, new Uint8Array(ELEM_BYTES_LEN), "f");
    }
    get value() {
        return __classPrivateFieldGet(this, _ElemBytes_bytes, "f");
    }
    set value(b) {
        __classPrivateFieldSet(this, _ElemBytes_bytes, b, "f");
    }
    bigInt() {
        return newBigIntFromBytes(swapEndianness(__classPrivateFieldGet(this, _ElemBytes_bytes, "f")));
    }
    string() {
        const hexStr = bytes2Hex(__classPrivateFieldGet(this, _ElemBytes_bytes, "f").slice(0, 4));
        return `${hexStr}...`;
    }
}
_ElemBytes_bytes = new WeakMap();
