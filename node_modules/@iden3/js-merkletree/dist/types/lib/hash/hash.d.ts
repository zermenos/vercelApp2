import { Bytes, IHash, Siblings } from '../../types';
export declare class Hash implements IHash {
    bytes: Bytes;
    constructor(_bytes?: Bytes);
    get value(): Bytes;
    set value(bytes: Bytes);
    string(): string;
    hex(): string;
    equals(hash: Hash): boolean;
    bigInt(): bigint;
    static fromString(s: string): Hash;
    static fromBigInt(i: bigint): Hash;
    static fromHex(h: string | undefined): Hash;
    toJSON(): string;
}
export declare const ZERO_HASH: Hash;
/**
 * @deprecated The method should not be used and will be removed in the next major version,
 * please use Hash.fromBigInt instead
 */
export declare const newHashFromBigInt: (bigNum: bigint) => Hash;
/**
 * @deprecated The method should not be used and will be removed in the next major version,
 * please use Hash.fromBigInt instead
 */
export declare const newHashFromHex: (h: string) => Hash;
/**
 * @deprecated The method should not be used and will be removed in the next major version,
 * please use Hash.fromBigString instead
 */
export declare const newHashFromString: (decimalString: string) => Hash;
export declare const hashElems: (e: Array<bigint>) => Hash;
export declare const hashElemsKey: (k: bigint, e: Array<bigint>) => Hash;
export declare const circomSiblingsFromSiblings: (siblings: Siblings, levels: number) => Siblings;
