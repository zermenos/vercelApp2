import { DID } from './did';
export declare const registerBlockchain: (blockchain: string) => void;
export declare const registerNetwork: (network: string) => void;
export declare const registerDidMethod: (method: string, byte: number) => void;
/**
 * Register chain ID for a blockchain and network.
 *
 * @param {string} blockchain
 * @param {string} network
 * @param {number} [chainId]
 * @returns {void}
 */
export declare const registerChainId: (blockchain: string, network: string, chainId: number) => void;
/**
 * Get chain ID by a blockchain and network.
 *
 * @param {string} blockchain
 * @param {string} [network]
 * @returns {number}
 */
export declare const getChainId: (blockchain: string, network?: string) => number;
/**
 * ChainIDfromDID returns chain name from w3c.DID
 *
 * @param {DID} did
 * @returns {number}
 */
export declare const chainIDfromDID: (did: DID) => number;
/**
 * Register a DID method with a byte value.
 * https://docs.iden3.io/getting-started/identity/identity-types/#regular-identity
 * @param {{
 *   method: DidMethodName;  DID method name
 *   methodByte?: number; put DID method byte value in case you want to register new DID method
 *   blockchain: BlockchainName;  blockchain name
 *   network: NetworkName;  network name
 *   networkFlag: number;  network flag
 *   chainId?: number;  put  chain ID in case you need to use it
 * }} {
 *   method,
 *   methodByte,
 *   blockchain,
 *   network,
 *   chainId,
 *   networkFlag
 * }
 */
export declare const registerDidMethodNetwork: ({ method, methodByte, blockchain, network, chainId, networkFlag }: {
    method: string;
    methodByte?: number | undefined;
    blockchain: string;
    network: string;
    networkFlag: number;
    chainId?: number | undefined;
}) => void;
